
ScarlettA1Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccd4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a10  0800ced4  0800ced4  0001ced4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8e4  0800e8e4  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8e4  0800e8e4  0001e8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8ec  0800e8ec  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8ec  0800e8ec  0001e8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8f0  0800e8f0  0001e8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800e8f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000525c  200000c4  0800e9b8  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005320  0800e9b8  00025320  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f2  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028140  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b06  00000000  00000000  00048275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f18  00000000  00000000  0004dd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017e1  00000000  00000000  0004fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002deae  00000000  00000000  00051479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002991e  00000000  00000000  0007f327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e9b4  00000000  00000000  000a8c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008730  00000000  00000000  001b75fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001bfd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000c4 	.word	0x200000c4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cebc 	.word	0x0800cebc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000c8 	.word	0x200000c8
 800023c:	0800cebc 	.word	0x0800cebc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <setLEDStripesEffect>:
 */

#include "commonFunctions.h"

/* LED stripes */
void setLEDStripesEffect(enum StripesEffect stripesEffect, struct DesiredStripesColor *desiredStripesColor) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	switch (stripesEffect) {
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	2b03      	cmp	r3, #3
 80005ec:	d832      	bhi.n	8000654 <setLEDStripesEffect+0x78>
 80005ee:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <setLEDStripesEffect+0x18>)
 80005f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f4:	08000605 	.word	0x08000605
 80005f8:	08000619 	.word	0x08000619
 80005fc:	0800062d 	.word	0x0800062d
 8000600:	08000641 	.word	0x08000641
	case 0:
		desiredStripesColor->red = 0x00;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	709a      	strb	r2, [r3, #2]
		break;
 8000616:	e01d      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 1:
		desiredStripesColor->red = 0x00;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2200      	movs	r2, #0
 8000622:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x2B;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	222b      	movs	r2, #43	; 0x2b
 8000628:	709a      	strb	r2, [r3, #2]
		break;
 800062a:	e013      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 2:
		desiredStripesColor->red = 0x1B;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	221b      	movs	r2, #27
 8000630:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x1B;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	221b      	movs	r2, #27
 8000636:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x1B;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	221b      	movs	r2, #27
 800063c:	709a      	strb	r2, [r3, #2]
		break;
 800063e:	e009      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 3:
		desiredStripesColor->red = 0x27;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	2227      	movs	r2, #39	; 0x27
 8000644:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x13;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	2213      	movs	r2, #19
 800064a:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	2200      	movs	r2, #0
 8000650:	709a      	strb	r2, [r3, #2]
		break;
 8000652:	bf00      	nop
	}
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <setBLDCMotorSpeed>:

/* BLDC motor */
void setBLDCMotorSpeed(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	switch(sliderAccelerateDecelerateCurrentValue) {
 8000664:	4b38      	ldr	r3, [pc, #224]	; (8000748 <setBLDCMotorSpeed+0xe8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	3302      	adds	r3, #2
 800066a:	2b06      	cmp	r3, #6
 800066c:	d84b      	bhi.n	8000706 <setBLDCMotorSpeed+0xa6>
 800066e:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <setBLDCMotorSpeed+0x14>)
 8000670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000674:	08000691 	.word	0x08000691
 8000678:	080006a3 	.word	0x080006a3
 800067c:	080006b5 	.word	0x080006b5
 8000680:	080006bf 	.word	0x080006bf
 8000684:	080006d1 	.word	0x080006d1
 8000688:	080006e3 	.word	0x080006e3
 800068c:	080006f5 	.word	0x080006f5
	case -2:
	  BLDCMotorSpeedVoltage = 0.65;
 8000690:	4b2e      	ldr	r3, [pc, #184]	; (800074c <setBLDCMotorSpeed+0xec>)
 8000692:	4a2f      	ldr	r2, [pc, #188]	; (8000750 <setBLDCMotorSpeed+0xf0>)
 8000694:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2110      	movs	r1, #16
 800069a:	482e      	ldr	r0, [pc, #184]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 800069c:	f003 fca8 	bl	8003ff0 <HAL_GPIO_WritePin>
	  break;
 80006a0:	e031      	b.n	8000706 <setBLDCMotorSpeed+0xa6>
	case -1:
	  BLDCMotorSpeedVoltage = 0.45;
 80006a2:	4b2a      	ldr	r3, [pc, #168]	; (800074c <setBLDCMotorSpeed+0xec>)
 80006a4:	4a2c      	ldr	r2, [pc, #176]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006a6:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2110      	movs	r1, #16
 80006ac:	4829      	ldr	r0, [pc, #164]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006ae:	f003 fc9f 	bl	8003ff0 <HAL_GPIO_WritePin>
	  break;
 80006b2:	e028      	b.n	8000706 <setBLDCMotorSpeed+0xa6>
	case 0:
	  BLDCMotorSpeedVoltage = 0.0;
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <setBLDCMotorSpeed+0xec>)
 80006b6:	f04f 0200 	mov.w	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
	  break;
 80006bc:	e023      	b.n	8000706 <setBLDCMotorSpeed+0xa6>
	case 1:
	  BLDCMotorSpeedVoltage = 0.45;
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <setBLDCMotorSpeed+0xec>)
 80006c0:	4a25      	ldr	r2, [pc, #148]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006c2:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2110      	movs	r1, #16
 80006c8:	4822      	ldr	r0, [pc, #136]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006ca:	f003 fc91 	bl	8003ff0 <HAL_GPIO_WritePin>
	  break;
 80006ce:	e01a      	b.n	8000706 <setBLDCMotorSpeed+0xa6>
	case 2:
	  BLDCMotorSpeedVoltage = 0.65;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <setBLDCMotorSpeed+0xec>)
 80006d2:	4a1f      	ldr	r2, [pc, #124]	; (8000750 <setBLDCMotorSpeed+0xf0>)
 80006d4:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2110      	movs	r1, #16
 80006da:	481e      	ldr	r0, [pc, #120]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006dc:	f003 fc88 	bl	8003ff0 <HAL_GPIO_WritePin>
	  break;
 80006e0:	e011      	b.n	8000706 <setBLDCMotorSpeed+0xa6>
	case 3:
	  BLDCMotorSpeedVoltage = 0.9;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <setBLDCMotorSpeed+0xec>)
 80006e4:	4a1d      	ldr	r2, [pc, #116]	; (800075c <setBLDCMotorSpeed+0xfc>)
 80006e6:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2110      	movs	r1, #16
 80006ec:	4819      	ldr	r0, [pc, #100]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006ee:	f003 fc7f 	bl	8003ff0 <HAL_GPIO_WritePin>
	  break;
 80006f2:	e008      	b.n	8000706 <setBLDCMotorSpeed+0xa6>
	case 4:
	  BLDCMotorSpeedVoltage = 1.2;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <setBLDCMotorSpeed+0xec>)
 80006f6:	4a1a      	ldr	r2, [pc, #104]	; (8000760 <setBLDCMotorSpeed+0x100>)
 80006f8:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2110      	movs	r1, #16
 80006fe:	4815      	ldr	r0, [pc, #84]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 8000700:	f003 fc76 	bl	8003ff0 <HAL_GPIO_WritePin>
	  break;
 8000704:	bf00      	nop
	}

	BLDCMotorSpeedValue = BLDCMotorSpeedVoltage * (0xfff + 1) / 3.3;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <setBLDCMotorSpeed+0xec>)
 8000708:	edd3 7a00 	vldr	s15, [r3]
 800070c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000764 <setBLDCMotorSpeed+0x104>
 8000710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000714:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000718:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000740 <setBLDCMotorSpeed+0xe0>
 800071c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000720:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000724:	ee17 2a90 	vmov	r2, s15
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <setBLDCMotorSpeed+0x108>)
 800072a:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, BLDCMotorSpeedValue);
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <setBLDCMotorSpeed+0x108>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <setBLDCMotorSpeed+0x10c>)
 8000736:	f002 fe1d 	bl	8003374 <HAL_DAC_SetValue>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	66666666 	.word	0x66666666
 8000744:	400a6666 	.word	0x400a6666
 8000748:	200000ec 	.word	0x200000ec
 800074c:	200000f4 	.word	0x200000f4
 8000750:	3f266666 	.word	0x3f266666
 8000754:	40020400 	.word	0x40020400
 8000758:	3ee66666 	.word	0x3ee66666
 800075c:	3f666666 	.word	0x3f666666
 8000760:	3f99999a 	.word	0x3f99999a
 8000764:	45800000 	.word	0x45800000
 8000768:	200000f8 	.word	0x200000f8
 800076c:	20000110 	.word	0x20000110

08000770 <moveStepperMotor>:

/* Stepper motor */
void moveStepperMotor(enum Direction direction) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	if(direction == LEFT) {
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d106      	bne.n	800078e <moveStepperMotor+0x1e>
		HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000786:	480c      	ldr	r0, [pc, #48]	; (80007b8 <moveStepperMotor+0x48>)
 8000788:	f003 fc32 	bl	8003ff0 <HAL_GPIO_WritePin>
 800078c:	e005      	b.n	800079a <moveStepperMotor+0x2a>
	} else {
		HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, SET);
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000794:	4808      	ldr	r0, [pc, #32]	; (80007b8 <moveStepperMotor+0x48>)
 8000796:	f003 fc2b 	bl	8003ff0 <HAL_GPIO_WritePin>
	}

	TIM4->CCR3 = 500;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <moveStepperMotor+0x4c>)
 800079c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007a0:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(70);
 80007a2:	2046      	movs	r0, #70	; 0x46
 80007a4:	f008 fb8c 	bl	8008ec0 <osDelay>
	TIM4->CCR3 = 0;
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <moveStepperMotor+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40020c00 	.word	0x40020c00
 80007bc:	40000800 	.word	0x40000800

080007c0 <moveStepperMotorUntil>:

void moveStepperMotorUntil(int targetLeftRightPosition) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	if(sliderLeftRightCurrentValue == targetLeftRightPosition) {
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <moveStepperMotorUntil+0x7c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d02f      	beq.n	8000832 <moveStepperMotorUntil+0x72>
		// Do nothing
	} else if(sliderLeftRightCurrentValue > targetLeftRightPosition) {
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <moveStepperMotorUntil+0x7c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	429a      	cmp	r2, r3
 80007da:	da15      	bge.n	8000808 <moveStepperMotorUntil+0x48>
		// Turn left until target left/right position is reached
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue --) {
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <moveStepperMotorUntil+0x7c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	e00c      	b.n	80007fc <moveStepperMotorUntil+0x3c>
			moveStepperMotor(LEFT);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff ffc4 	bl	8000770 <moveStepperMotor>
			osDelay(LEFT_RIGHT_DURATION);
 80007e8:	2032      	movs	r0, #50	; 0x32
 80007ea:	f008 fb69 	bl	8008ec0 <osDelay>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue --) {
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <moveStepperMotorUntil+0x7c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	1e5a      	subs	r2, r3, #1
 80007f4:	4911      	ldr	r1, [pc, #68]	; (800083c <moveStepperMotorUntil+0x7c>)
 80007f6:	600a      	str	r2, [r1, #0]
 80007f8:	4a11      	ldr	r2, [pc, #68]	; (8000840 <moveStepperMotorUntil+0x80>)
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <moveStepperMotorUntil+0x7c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	429a      	cmp	r2, r3
 8000804:	d1ed      	bne.n	80007e2 <moveStepperMotorUntil+0x22>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
			moveStepperMotor(RIGHT);
			osDelay(LEFT_RIGHT_DURATION);
		}
	}
}
 8000806:	e014      	b.n	8000832 <moveStepperMotorUntil+0x72>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <moveStepperMotorUntil+0x7c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	e00c      	b.n	8000828 <moveStepperMotorUntil+0x68>
			moveStepperMotor(RIGHT);
 800080e:	2001      	movs	r0, #1
 8000810:	f7ff ffae 	bl	8000770 <moveStepperMotor>
			osDelay(LEFT_RIGHT_DURATION);
 8000814:	2032      	movs	r0, #50	; 0x32
 8000816:	f008 fb53 	bl	8008ec0 <osDelay>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <moveStepperMotorUntil+0x7c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	4906      	ldr	r1, [pc, #24]	; (800083c <moveStepperMotorUntil+0x7c>)
 8000822:	600a      	str	r2, [r1, #0]
 8000824:	4a06      	ldr	r2, [pc, #24]	; (8000840 <moveStepperMotorUntil+0x80>)
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <moveStepperMotorUntil+0x7c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	429a      	cmp	r2, r3
 8000830:	d1ed      	bne.n	800080e <moveStepperMotorUntil+0x4e>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000100 	.word	0x20000100
 8000840:	200000fc 	.word	0x200000fc

08000844 <park>:

/* LiDAR sphere */
void park(enum Direction direction) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	// Private variables
	int targetLeftRightPosition = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]

	// Stop BLDC motor
	sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8000852:	4b4f      	ldr	r3, [pc, #316]	; (8000990 <park+0x14c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a4f      	ldr	r2, [pc, #316]	; (8000994 <park+0x150>)
 8000858:	6013      	str	r3, [r2, #0]
	sliderAccelerateDecelerateCurrentValue = 0;
 800085a:	4b4d      	ldr	r3, [pc, #308]	; (8000990 <park+0x14c>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
	setBLDCMotorSpeed();
 8000860:	f7ff fefe 	bl	8000660 <setBLDCMotorSpeed>

	// Set LED stripes
	stripesEffect = PARKING;
 8000864:	4b4c      	ldr	r3, [pc, #304]	; (8000998 <park+0x154>)
 8000866:	2203      	movs	r2, #3
 8000868:	701a      	strb	r2, [r3, #0]
	ommitToggle = true;
 800086a:	4b4c      	ldr	r3, [pc, #304]	; (800099c <park+0x158>)
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
	internalFunctionCall = true;
 8000870:	4b4b      	ldr	r3, [pc, #300]	; (80009a0 <park+0x15c>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
	vTaskResume(LEDStripesTaskHandle);
 8000876:	4b4b      	ldr	r3, [pc, #300]	; (80009a4 <park+0x160>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4618      	mov	r0, r3
 800087c:	f009 fd30 	bl	800a2e0 <vTaskResume>

	// Toggle left/right blinkers
	if(direction == LEFT) {
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d108      	bne.n	8000898 <park+0x54>
		internalFunctionCall = true;
 8000886:	4b46      	ldr	r3, [pc, #280]	; (80009a0 <park+0x15c>)
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
		vTaskResume(LeftBlinkersTasHandle);
 800088c:	4b46      	ldr	r3, [pc, #280]	; (80009a8 <park+0x164>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f009 fd25 	bl	800a2e0 <vTaskResume>
 8000896:	e007      	b.n	80008a8 <park+0x64>
	} else {
		internalFunctionCall = true;
 8000898:	4b41      	ldr	r3, [pc, #260]	; (80009a0 <park+0x15c>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
		vTaskResume(RightBlinkersTaHandle);
 800089e:	4b43      	ldr	r3, [pc, #268]	; (80009ac <park+0x168>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f009 fd1c 	bl	800a2e0 <vTaskResume>
	}

	// Turn left/right to the destination
	if(direction == LEFT) {
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d103      	bne.n	80008b6 <park+0x72>
		targetLeftRightPosition = -3;
 80008ae:	f06f 0302 	mvn.w	r3, #2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	e001      	b.n	80008ba <park+0x76>
	} else {
		targetLeftRightPosition = 3;
 80008b6:	2303      	movs	r3, #3
 80008b8:	60fb      	str	r3, [r7, #12]
	}
	moveStepperMotorUntil(targetLeftRightPosition);
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f7ff ff80 	bl	80007c0 <moveStepperMotorUntil>

	// Withdraw a little bit
	internalFunctionCall = true;
 80008c0:	4b37      	ldr	r3, [pc, #220]	; (80009a0 <park+0x15c>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
	vTaskResume(DecelerateTaskHandle);
 80008c6:	4b3a      	ldr	r3, [pc, #232]	; (80009b0 <park+0x16c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f009 fd08 	bl	800a2e0 <vTaskResume>
	osDelay(ACCELERATE_DECELERATE_DURATION * 0.60);
 80008d0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80008d4:	f008 faf4 	bl	8008ec0 <osDelay>
	internalFunctionCall = true;
 80008d8:	4b31      	ldr	r3, [pc, #196]	; (80009a0 <park+0x15c>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
	vTaskResume(AccelerateTaskHandle);
 80008de:	4b35      	ldr	r3, [pc, #212]	; (80009b4 <park+0x170>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f009 fcfc 	bl	800a2e0 <vTaskResume>

	// Turn left/right from the destination
	if(direction == LEFT) {
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d102      	bne.n	80008f4 <park+0xb0>
		targetLeftRightPosition = 3;
 80008ee:	2303      	movs	r3, #3
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	e002      	b.n	80008fa <park+0xb6>
	} else {
		targetLeftRightPosition = -3;
 80008f4:	f06f 0302 	mvn.w	r3, #2
 80008f8:	60fb      	str	r3, [r7, #12]
	}
	moveStepperMotorUntil(targetLeftRightPosition);
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f7ff ff60 	bl	80007c0 <moveStepperMotorUntil>

	// Withdraw a little bit
	internalFunctionCall = true;
 8000900:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <park+0x15c>)
 8000902:	2201      	movs	r2, #1
 8000904:	701a      	strb	r2, [r3, #0]
	vTaskResume(DecelerateTaskHandle);
 8000906:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <park+0x16c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f009 fce8 	bl	800a2e0 <vTaskResume>
	osDelay(ACCELERATE_DECELERATE_DURATION * 0.65);
 8000910:	f640 703c 	movw	r0, #3900	; 0xf3c
 8000914:	f008 fad4 	bl	8008ec0 <osDelay>
	internalFunctionCall = true;
 8000918:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <park+0x15c>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
	vTaskResume(AccelerateTaskHandle);
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <park+0x170>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f009 fcdc 	bl	800a2e0 <vTaskResume>

	// Turn left/right to center position
	targetLeftRightPosition = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
	moveStepperMotorUntil(targetLeftRightPosition);
 800092c:	68f8      	ldr	r0, [r7, #12]
 800092e:	f7ff ff47 	bl	80007c0 <moveStepperMotorUntil>

	// Drive forward a little bit
	internalFunctionCall = true;
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <park+0x15c>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
	vTaskResume(AccelerateTaskHandle);
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <park+0x170>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f009 fccf 	bl	800a2e0 <vTaskResume>
	osDelay(ACCELERATE_DECELERATE_DURATION * 0.85);
 8000942:	f241 30ec 	movw	r0, #5100	; 0x13ec
 8000946:	f008 fabb 	bl	8008ec0 <osDelay>
	internalFunctionCall = true;
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <park+0x15c>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
	vTaskResume(DecelerateTaskHandle);
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <park+0x16c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f009 fcc3 	bl	800a2e0 <vTaskResume>

	// Set LED stripes
	if(isOn) {
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <park+0x174>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d003      	beq.n	800096c <park+0x128>
		stripesEffect = DEFAULT;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <park+0x154>)
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
 800096a:	e002      	b.n	8000972 <park+0x12e>
	} else {
		stripesEffect = NONE;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <park+0x154>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
	}
	ommitToggle = true;
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <park+0x158>)
 8000974:	2201      	movs	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
	internalFunctionCall = true;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <park+0x15c>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
	vTaskResume(LEDStripesTaskHandle);
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <park+0x160>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f009 fcac 	bl	800a2e0 <vTaskResume>
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000ec 	.word	0x200000ec
 8000994:	200000e8 	.word	0x200000e8
 8000998:	200000e2 	.word	0x200000e2
 800099c:	200000e4 	.word	0x200000e4
 80009a0:	200000e0 	.word	0x200000e0
 80009a4:	20000134 	.word	0x20000134
 80009a8:	20000138 	.word	0x20000138
 80009ac:	2000013c 	.word	0x2000013c
 80009b0:	2000014c 	.word	0x2000014c
 80009b4:	20000148 	.word	0x20000148
 80009b8:	200000e3 	.word	0x200000e3

080009bc <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_DAC_Init+0x4c>)
 80009cc:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <MX_DAC_Init+0x50>)
 80009ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_DAC_Init+0x4c>)
 80009d2:	f002 fc01 	bl	80031d8 <HAL_DAC_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80009dc:	f001 f9ce 	bl	8001d7c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009e8:	463b      	mov	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <MX_DAC_Init+0x4c>)
 80009f0:	f002 fcef 	bl	80033d2 <HAL_DAC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80009fa:	f001 f9bf 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000110 	.word	0x20000110
 8000a0c:	40007400 	.word	0x40007400

08000a10 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <HAL_DAC_MspInit+0x84>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d12b      	bne.n	8000a8a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <HAL_DAC_MspInit+0x88>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <HAL_DAC_MspInit+0x88>)
 8000a38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <HAL_DAC_MspInit+0x88>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <HAL_DAC_MspInit+0x88>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <HAL_DAC_MspInit+0x88>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <HAL_DAC_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = BLDCMotorStep_Pin;
 8000a62:	2310      	movs	r3, #16
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a66:	2303      	movs	r3, #3
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLDCMotorStep_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <HAL_DAC_MspInit+0x8c>)
 8000a76:	f003 f90f 	bl	8003c98 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	2036      	movs	r0, #54	; 0x36
 8000a80:	f002 fb80 	bl	8003184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a84:	2036      	movs	r0, #54	; 0x36
 8000a86:	f002 fb99 	bl	80031bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40007400 	.word	0x40007400
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_DMA_Init+0x38>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <MX_DMA_Init+0x38>)
 8000aac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_DMA_Init+0x38>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2105      	movs	r1, #5
 8000ac2:	203b      	movs	r0, #59	; 0x3b
 8000ac4:	f002 fb5e 	bl	8003184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ac8:	203b      	movs	r0, #59	; 0x3b
 8000aca:	f002 fb77 	bl	80031bc <HAL_NVIC_EnableIRQ>

}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of ConnectionTaskTimer */
  ConnectionTaskTimerHandle = osTimerNew(CallbackConnectionTaskTimer, osTimerOnce, NULL, &ConnectionTaskTimer_attributes);
 8000ae0:	4b49      	ldr	r3, [pc, #292]	; (8000c08 <MX_FREERTOS_Init+0x12c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4849      	ldr	r0, [pc, #292]	; (8000c0c <MX_FREERTOS_Init+0x130>)
 8000ae8:	f008 fa2e 	bl	8008f48 <osTimerNew>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4a48      	ldr	r2, [pc, #288]	; (8000c10 <MX_FREERTOS_Init+0x134>)
 8000af0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8000af2:	4a48      	ldr	r2, [pc, #288]	; (8000c14 <MX_FREERTOS_Init+0x138>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	4848      	ldr	r0, [pc, #288]	; (8000c18 <MX_FREERTOS_Init+0x13c>)
 8000af8:	f008 f93c 	bl	8008d74 <osThreadNew>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a47      	ldr	r2, [pc, #284]	; (8000c1c <MX_FREERTOS_Init+0x140>)
 8000b00:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartDispatcherTask, NULL, &DispatcherTask_attributes);
 8000b02:	4a47      	ldr	r2, [pc, #284]	; (8000c20 <MX_FREERTOS_Init+0x144>)
 8000b04:	2100      	movs	r1, #0
 8000b06:	4847      	ldr	r0, [pc, #284]	; (8000c24 <MX_FREERTOS_Init+0x148>)
 8000b08:	f008 f934 	bl	8008d74 <osThreadNew>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a46      	ldr	r2, [pc, #280]	; (8000c28 <MX_FREERTOS_Init+0x14c>)
 8000b10:	6013      	str	r3, [r2, #0]

  /* creation of StopTask */
  StopTaskHandle = osThreadNew(StartStopTask, NULL, &StopTask_attributes);
 8000b12:	4a46      	ldr	r2, [pc, #280]	; (8000c2c <MX_FREERTOS_Init+0x150>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4846      	ldr	r0, [pc, #280]	; (8000c30 <MX_FREERTOS_Init+0x154>)
 8000b18:	f008 f92c 	bl	8008d74 <osThreadNew>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4a45      	ldr	r2, [pc, #276]	; (8000c34 <MX_FREERTOS_Init+0x158>)
 8000b20:	6013      	str	r3, [r2, #0]

  /* creation of DrivingLightsTa */
  DrivingLightsTaHandle = osThreadNew(StartDrivingLightsTask, NULL, &DrivingLightsTa_attributes);
 8000b22:	4a45      	ldr	r2, [pc, #276]	; (8000c38 <MX_FREERTOS_Init+0x15c>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	4845      	ldr	r0, [pc, #276]	; (8000c3c <MX_FREERTOS_Init+0x160>)
 8000b28:	f008 f924 	bl	8008d74 <osThreadNew>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a44      	ldr	r2, [pc, #272]	; (8000c40 <MX_FREERTOS_Init+0x164>)
 8000b30:	6013      	str	r3, [r2, #0]

  /* creation of LEDStripesTask */
  LEDStripesTaskHandle = osThreadNew(StartLEDStripesTask, NULL, &LEDStripesTask_attributes);
 8000b32:	4a44      	ldr	r2, [pc, #272]	; (8000c44 <MX_FREERTOS_Init+0x168>)
 8000b34:	2100      	movs	r1, #0
 8000b36:	4844      	ldr	r0, [pc, #272]	; (8000c48 <MX_FREERTOS_Init+0x16c>)
 8000b38:	f008 f91c 	bl	8008d74 <osThreadNew>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a43      	ldr	r2, [pc, #268]	; (8000c4c <MX_FREERTOS_Init+0x170>)
 8000b40:	6013      	str	r3, [r2, #0]

  /* creation of LeftBlinkersTas */
  LeftBlinkersTasHandle = osThreadNew(StartLeftBlinkersTask, NULL, &LeftBlinkersTas_attributes);
 8000b42:	4a43      	ldr	r2, [pc, #268]	; (8000c50 <MX_FREERTOS_Init+0x174>)
 8000b44:	2100      	movs	r1, #0
 8000b46:	4843      	ldr	r0, [pc, #268]	; (8000c54 <MX_FREERTOS_Init+0x178>)
 8000b48:	f008 f914 	bl	8008d74 <osThreadNew>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	4a42      	ldr	r2, [pc, #264]	; (8000c58 <MX_FREERTOS_Init+0x17c>)
 8000b50:	6013      	str	r3, [r2, #0]

  /* creation of RightBlinkersTa */
  RightBlinkersTaHandle = osThreadNew(StartRightBlinkersTask, NULL, &RightBlinkersTa_attributes);
 8000b52:	4a42      	ldr	r2, [pc, #264]	; (8000c5c <MX_FREERTOS_Init+0x180>)
 8000b54:	2100      	movs	r1, #0
 8000b56:	4842      	ldr	r0, [pc, #264]	; (8000c60 <MX_FREERTOS_Init+0x184>)
 8000b58:	f008 f90c 	bl	8008d74 <osThreadNew>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4a41      	ldr	r2, [pc, #260]	; (8000c64 <MX_FREERTOS_Init+0x188>)
 8000b60:	6013      	str	r3, [r2, #0]

  /* creation of ParkLeftTask */
  ParkLeftTaskHandle = osThreadNew(StartParkLeftTask, NULL, &ParkLeftTask_attributes);
 8000b62:	4a41      	ldr	r2, [pc, #260]	; (8000c68 <MX_FREERTOS_Init+0x18c>)
 8000b64:	2100      	movs	r1, #0
 8000b66:	4841      	ldr	r0, [pc, #260]	; (8000c6c <MX_FREERTOS_Init+0x190>)
 8000b68:	f008 f904 	bl	8008d74 <osThreadNew>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4a40      	ldr	r2, [pc, #256]	; (8000c70 <MX_FREERTOS_Init+0x194>)
 8000b70:	6013      	str	r3, [r2, #0]

  /* creation of ParkRightTask */
  ParkRightTaskHandle = osThreadNew(StartParkRightTask, NULL, &ParkRightTask_attributes);
 8000b72:	4a40      	ldr	r2, [pc, #256]	; (8000c74 <MX_FREERTOS_Init+0x198>)
 8000b74:	2100      	movs	r1, #0
 8000b76:	4840      	ldr	r0, [pc, #256]	; (8000c78 <MX_FREERTOS_Init+0x19c>)
 8000b78:	f008 f8fc 	bl	8008d74 <osThreadNew>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4a3f      	ldr	r2, [pc, #252]	; (8000c7c <MX_FREERTOS_Init+0x1a0>)
 8000b80:	6013      	str	r3, [r2, #0]

  /* creation of AccelerateTask */
  AccelerateTaskHandle = osThreadNew(StartAccelerateTask, NULL, &AccelerateTask_attributes);
 8000b82:	4a3f      	ldr	r2, [pc, #252]	; (8000c80 <MX_FREERTOS_Init+0x1a4>)
 8000b84:	2100      	movs	r1, #0
 8000b86:	483f      	ldr	r0, [pc, #252]	; (8000c84 <MX_FREERTOS_Init+0x1a8>)
 8000b88:	f008 f8f4 	bl	8008d74 <osThreadNew>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a3e      	ldr	r2, [pc, #248]	; (8000c88 <MX_FREERTOS_Init+0x1ac>)
 8000b90:	6013      	str	r3, [r2, #0]

  /* creation of DecelerateTask */
  DecelerateTaskHandle = osThreadNew(StartDecelerateTask, NULL, &DecelerateTask_attributes);
 8000b92:	4a3e      	ldr	r2, [pc, #248]	; (8000c8c <MX_FREERTOS_Init+0x1b0>)
 8000b94:	2100      	movs	r1, #0
 8000b96:	483e      	ldr	r0, [pc, #248]	; (8000c90 <MX_FREERTOS_Init+0x1b4>)
 8000b98:	f008 f8ec 	bl	8008d74 <osThreadNew>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	4a3d      	ldr	r2, [pc, #244]	; (8000c94 <MX_FREERTOS_Init+0x1b8>)
 8000ba0:	6013      	str	r3, [r2, #0]

  /* creation of TurnLeftTask */
  TurnLeftTaskHandle = osThreadNew(StartTurnLeftTask, NULL, &TurnLeftTask_attributes);
 8000ba2:	4a3d      	ldr	r2, [pc, #244]	; (8000c98 <MX_FREERTOS_Init+0x1bc>)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	483d      	ldr	r0, [pc, #244]	; (8000c9c <MX_FREERTOS_Init+0x1c0>)
 8000ba8:	f008 f8e4 	bl	8008d74 <osThreadNew>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4a3c      	ldr	r2, [pc, #240]	; (8000ca0 <MX_FREERTOS_Init+0x1c4>)
 8000bb0:	6013      	str	r3, [r2, #0]

  /* creation of TurnRightTask */
  TurnRightTaskHandle = osThreadNew(StartTurnRightTask, NULL, &TurnRightTask_attributes);
 8000bb2:	4a3c      	ldr	r2, [pc, #240]	; (8000ca4 <MX_FREERTOS_Init+0x1c8>)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	483c      	ldr	r0, [pc, #240]	; (8000ca8 <MX_FREERTOS_Init+0x1cc>)
 8000bb8:	f008 f8dc 	bl	8008d74 <osThreadNew>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4a3b      	ldr	r2, [pc, #236]	; (8000cac <MX_FREERTOS_Init+0x1d0>)
 8000bc0:	6013      	str	r3, [r2, #0]

  /* creation of ConnectionTask */
  ConnectionTaskHandle = osThreadNew(StartConnectionTask, NULL, &ConnectionTask_attributes);
 8000bc2:	4a3b      	ldr	r2, [pc, #236]	; (8000cb0 <MX_FREERTOS_Init+0x1d4>)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	483b      	ldr	r0, [pc, #236]	; (8000cb4 <MX_FREERTOS_Init+0x1d8>)
 8000bc8:	f008 f8d4 	bl	8008d74 <osThreadNew>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4a3a      	ldr	r2, [pc, #232]	; (8000cb8 <MX_FREERTOS_Init+0x1dc>)
 8000bd0:	6013      	str	r3, [r2, #0]

  /* creation of BrakeLightsTask */
  BrakeLightsTaskHandle = osThreadNew(StartBrakeLightsTask, NULL, &BrakeLightsTask_attributes);
 8000bd2:	4a3a      	ldr	r2, [pc, #232]	; (8000cbc <MX_FREERTOS_Init+0x1e0>)
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	483a      	ldr	r0, [pc, #232]	; (8000cc0 <MX_FREERTOS_Init+0x1e4>)
 8000bd8:	f008 f8cc 	bl	8008d74 <osThreadNew>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4a39      	ldr	r2, [pc, #228]	; (8000cc4 <MX_FREERTOS_Init+0x1e8>)
 8000be0:	6013      	str	r3, [r2, #0]

  /* creation of WithdrawLightsT */
  WithdrawLightsTHandle = osThreadNew(StartWithdrawLightsTask, NULL, &WithdrawLightsT_attributes);
 8000be2:	4a39      	ldr	r2, [pc, #228]	; (8000cc8 <MX_FREERTOS_Init+0x1ec>)
 8000be4:	2100      	movs	r1, #0
 8000be6:	4839      	ldr	r0, [pc, #228]	; (8000ccc <MX_FREERTOS_Init+0x1f0>)
 8000be8:	f008 f8c4 	bl	8008d74 <osThreadNew>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4a38      	ldr	r2, [pc, #224]	; (8000cd0 <MX_FREERTOS_Init+0x1f4>)
 8000bf0:	6013      	str	r3, [r2, #0]

  /* creation of ResumeFromStopT */
  ResumeFromStopTHandle = osThreadNew(StartResumeFromStopTask, NULL, &ResumeFromStopT_attributes);
 8000bf2:	4a38      	ldr	r2, [pc, #224]	; (8000cd4 <MX_FREERTOS_Init+0x1f8>)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4838      	ldr	r0, [pc, #224]	; (8000cd8 <MX_FREERTOS_Init+0x1fc>)
 8000bf8:	f008 f8bc 	bl	8008d74 <osThreadNew>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4a37      	ldr	r2, [pc, #220]	; (8000cdc <MX_FREERTOS_Init+0x200>)
 8000c00:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	0800d3b8 	.word	0x0800d3b8
 8000c0c:	080017d9 	.word	0x080017d9
 8000c10:	20000168 	.word	0x20000168
 8000c14:	0800d154 	.word	0x0800d154
 8000c18:	08000ce1 	.word	0x08000ce1
 8000c1c:	20000124 	.word	0x20000124
 8000c20:	0800d178 	.word	0x0800d178
 8000c24:	08000e01 	.word	0x08000e01
 8000c28:	20000128 	.word	0x20000128
 8000c2c:	0800d19c 	.word	0x0800d19c
 8000c30:	08000f1d 	.word	0x08000f1d
 8000c34:	2000012c 	.word	0x2000012c
 8000c38:	0800d1c0 	.word	0x0800d1c0
 8000c3c:	08001009 	.word	0x08001009
 8000c40:	20000130 	.word	0x20000130
 8000c44:	0800d1e4 	.word	0x0800d1e4
 8000c48:	0800106d 	.word	0x0800106d
 8000c4c:	20000134 	.word	0x20000134
 8000c50:	0800d208 	.word	0x0800d208
 8000c54:	080012d1 	.word	0x080012d1
 8000c58:	20000138 	.word	0x20000138
 8000c5c:	0800d22c 	.word	0x0800d22c
 8000c60:	0800134d 	.word	0x0800134d
 8000c64:	2000013c 	.word	0x2000013c
 8000c68:	0800d250 	.word	0x0800d250
 8000c6c:	080013c9 	.word	0x080013c9
 8000c70:	20000140 	.word	0x20000140
 8000c74:	0800d274 	.word	0x0800d274
 8000c78:	0800141d 	.word	0x0800141d
 8000c7c:	20000144 	.word	0x20000144
 8000c80:	0800d298 	.word	0x0800d298
 8000c84:	08001471 	.word	0x08001471
 8000c88:	20000148 	.word	0x20000148
 8000c8c:	0800d2bc 	.word	0x0800d2bc
 8000c90:	0800151d 	.word	0x0800151d
 8000c94:	2000014c 	.word	0x2000014c
 8000c98:	0800d2e0 	.word	0x0800d2e0
 8000c9c:	080015d9 	.word	0x080015d9
 8000ca0:	20000150 	.word	0x20000150
 8000ca4:	0800d304 	.word	0x0800d304
 8000ca8:	08001659 	.word	0x08001659
 8000cac:	20000154 	.word	0x20000154
 8000cb0:	0800d328 	.word	0x0800d328
 8000cb4:	080016d5 	.word	0x080016d5
 8000cb8:	20000158 	.word	0x20000158
 8000cbc:	0800d34c 	.word	0x0800d34c
 8000cc0:	08001711 	.word	0x08001711
 8000cc4:	2000015c 	.word	0x2000015c
 8000cc8:	0800d370 	.word	0x0800d370
 8000ccc:	08001741 	.word	0x08001741
 8000cd0:	20000160 	.word	0x20000160
 8000cd4:	0800d394 	.word	0x0800d394
 8000cd8:	0800177d 	.word	0x0800177d
 8000cdc:	20000164 	.word	0x20000164

08000ce0 <StartOLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
	// Initiate display
	ssd1306_Init();
 8000ce8:	f001 f95a 	bl	8001fa0 <ssd1306_Init>
	uint8_t y = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
	ssd1306_Fill(Black);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f001 f9bf 	bl	8002074 <ssd1306_Fill>

	// Set header
	ssd1306_SetCursor(2, y);
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f001 fafc 	bl	80022f8 <ssd1306_SetCursor>
	ssd1306_WriteString(headerBootingUp, Font_7x10, White);
 8000d00:	4a36      	ldr	r2, [pc, #216]	; (8000ddc <StartOLEDTask+0xfc>)
 8000d02:	2301      	movs	r3, #1
 8000d04:	ca06      	ldmia	r2, {r1, r2}
 8000d06:	4836      	ldr	r0, [pc, #216]	; (8000de0 <StartOLEDTask+0x100>)
 8000d08:	f001 fad0 	bl	80022ac <ssd1306_WriteString>
	y += 30;
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	331e      	adds	r3, #30
 8000d10:	73fb      	strb	r3, [r7, #15]

	// Set body
	ssd1306_SetCursor(2, y);
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	4619      	mov	r1, r3
 8000d16:	2002      	movs	r0, #2
 8000d18:	f001 faee 	bl	80022f8 <ssd1306_SetCursor>
	ssd1306_WriteString(bodyVersion, Font_11x18, White);
 8000d1c:	4a31      	ldr	r2, [pc, #196]	; (8000de4 <StartOLEDTask+0x104>)
 8000d1e:	2301      	movs	r3, #1
 8000d20:	ca06      	ldmia	r2, {r1, r2}
 8000d22:	4831      	ldr	r0, [pc, #196]	; (8000de8 <StartOLEDTask+0x108>)
 8000d24:	f001 fac2 	bl	80022ac <ssd1306_WriteString>
	ssd1306_WriteString(versionName, Font_11x18, White);
 8000d28:	4a2e      	ldr	r2, [pc, #184]	; (8000de4 <StartOLEDTask+0x104>)
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	ca06      	ldmia	r2, {r1, r2}
 8000d2e:	482f      	ldr	r0, [pc, #188]	; (8000dec <StartOLEDTask+0x10c>)
 8000d30:	f001 fabc 	bl	80022ac <ssd1306_WriteString>
	y += 36;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	3324      	adds	r3, #36	; 0x24
 8000d38:	73fb      	strb	r3, [r7, #15]

	// Show content
	ssd1306_UpdateScreen();
 8000d3a:	f001 f9b3 	bl	80020a4 <ssd1306_UpdateScreen>
	y = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]

	// Delay
	osDelay(STARTUP_DURATION);
 8000d42:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d46:	f008 f8bb 	bl	8008ec0 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  // Clear screen
	  ssd1306_Fill(Black);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f001 f992 	bl	8002074 <ssd1306_Fill>

	  if(isConnected) {
 8000d50:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <StartOLEDTask+0x110>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d01c      	beq.n	8000d94 <StartOLEDTask+0xb4>
		  // Set header
		  ssd1306_SetCursor(2, y);
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	2002      	movs	r0, #2
 8000d60:	f001 faca 	bl	80022f8 <ssd1306_SetCursor>
		  ssd1306_WriteString(headerConnected, Font_7x10, White);
 8000d64:	4a1d      	ldr	r2, [pc, #116]	; (8000ddc <StartOLEDTask+0xfc>)
 8000d66:	2301      	movs	r3, #1
 8000d68:	ca06      	ldmia	r2, {r1, r2}
 8000d6a:	4822      	ldr	r0, [pc, #136]	; (8000df4 <StartOLEDTask+0x114>)
 8000d6c:	f001 fa9e 	bl	80022ac <ssd1306_WriteString>
		  y += 30;
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	331e      	adds	r3, #30
 8000d74:	73fb      	strb	r3, [r7, #15]

		  // Set body
		  ssd1306_SetCursor(2, y);
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f001 fabc 	bl	80022f8 <ssd1306_SetCursor>
		  ssd1306_WriteString(bodyLogotype, Font_11x18, White);
 8000d80:	4a18      	ldr	r2, [pc, #96]	; (8000de4 <StartOLEDTask+0x104>)
 8000d82:	2301      	movs	r3, #1
 8000d84:	ca06      	ldmia	r2, {r1, r2}
 8000d86:	481c      	ldr	r0, [pc, #112]	; (8000df8 <StartOLEDTask+0x118>)
 8000d88:	f001 fa90 	bl	80022ac <ssd1306_WriteString>
		  y += 36;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	3324      	adds	r3, #36	; 0x24
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e01b      	b.n	8000dcc <StartOLEDTask+0xec>
	  } else {
		  // Set header
		  ssd1306_SetCursor(2, y);
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	4619      	mov	r1, r3
 8000d98:	2002      	movs	r0, #2
 8000d9a:	f001 faad 	bl	80022f8 <ssd1306_SetCursor>
		  ssd1306_WriteString(headerDisconnected, Font_7x10, White);
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <StartOLEDTask+0xfc>)
 8000da0:	2301      	movs	r3, #1
 8000da2:	ca06      	ldmia	r2, {r1, r2}
 8000da4:	4815      	ldr	r0, [pc, #84]	; (8000dfc <StartOLEDTask+0x11c>)
 8000da6:	f001 fa81 	bl	80022ac <ssd1306_WriteString>
		  y += 30;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	331e      	adds	r3, #30
 8000dae:	73fb      	strb	r3, [r7, #15]

		  // Set body
		  ssd1306_SetCursor(2, y);
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	4619      	mov	r1, r3
 8000db4:	2002      	movs	r0, #2
 8000db6:	f001 fa9f 	bl	80022f8 <ssd1306_SetCursor>
		  ssd1306_WriteString(bodyLogotype, Font_11x18, White);
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <StartOLEDTask+0x104>)
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	ca06      	ldmia	r2, {r1, r2}
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <StartOLEDTask+0x118>)
 8000dc2:	f001 fa73 	bl	80022ac <ssd1306_WriteString>
		  y += 36;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	3324      	adds	r3, #36	; 0x24
 8000dca:	73fb      	strb	r3, [r7, #15]
	  }

	  // Show content
	  ssd1306_UpdateScreen();
 8000dcc:	f001 f96a 	bl	80020a4 <ssd1306_UpdateScreen>
	  y = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]

	  vTaskSuspend(NULL);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f009 f9d7 	bl	800a188 <vTaskSuspend>
	  ssd1306_Fill(Black);
 8000dda:	e7b6      	b.n	8000d4a <StartOLEDTask+0x6a>
 8000ddc:	20000048 	.word	0x20000048
 8000de0:	20000004 	.word	0x20000004
 8000de4:	20000050 	.word	0x20000050
 8000de8:	20000030 	.word	0x20000030
 8000dec:	20000000 	.word	0x20000000
 8000df0:	200000e1 	.word	0x200000e1
 8000df4:	20000024 	.word	0x20000024
 8000df8:	2000003c 	.word	0x2000003c
 8000dfc:	20000014 	.word	0x20000014

08000e00 <StartDispatcherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDispatcherTask */
void StartDispatcherTask(void *argument)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDispatcherTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f009 f9bd 	bl	800a188 <vTaskSuspend>

	  switch(RxBuffer[0]) {
 8000e0e:	4b36      	ldr	r3, [pc, #216]	; (8000ee8 <StartDispatcherTask+0xe8>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	3b01      	subs	r3, #1
 8000e16:	2b0d      	cmp	r3, #13
 8000e18:	d860      	bhi.n	8000edc <StartDispatcherTask+0xdc>
 8000e1a:	a201      	add	r2, pc, #4	; (adr r2, 8000e20 <StartDispatcherTask+0x20>)
 8000e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e20:	08000e59 	.word	0x08000e59
 8000e24:	08000e65 	.word	0x08000e65
 8000e28:	08000e71 	.word	0x08000e71
 8000e2c:	08000e7d 	.word	0x08000e7d
 8000e30:	08000e89 	.word	0x08000e89
 8000e34:	08000e95 	.word	0x08000e95
 8000e38:	08000ea1 	.word	0x08000ea1
 8000e3c:	08000edd 	.word	0x08000edd
 8000e40:	08000edd 	.word	0x08000edd
 8000e44:	08000edd 	.word	0x08000edd
 8000e48:	08000ead 	.word	0x08000ead
 8000e4c:	08000eb9 	.word	0x08000eb9
 8000e50:	08000ec5 	.word	0x08000ec5
 8000e54:	08000ed1 	.word	0x08000ed1
		case 0x01:		// Stop vehicle.
			vTaskResume(StopTaskHandle);
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <StartDispatcherTask+0xec>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f009 fa3f 	bl	800a2e0 <vTaskResume>
			break;
 8000e62:	e040      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x02:		// Toggle driving lights.
			vTaskResume(DrivingLightsTaHandle);
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <StartDispatcherTask+0xf0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f009 fa39 	bl	800a2e0 <vTaskResume>
			break;
 8000e6e:	e03a      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x03:		// Toggle RGB stripe.
			vTaskResume(LEDStripesTaskHandle);
 8000e70:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <StartDispatcherTask+0xf4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f009 fa33 	bl	800a2e0 <vTaskResume>
			break;
 8000e7a:	e034      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x04:		// Turn left blinkers on.
			vTaskResume(LeftBlinkersTasHandle);
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <StartDispatcherTask+0xf8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f009 fa2d 	bl	800a2e0 <vTaskResume>
			break;
 8000e86:	e02e      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x05:		// Turn right blinkers on.
			vTaskResume(RightBlinkersTaHandle);
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <StartDispatcherTask+0xfc>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f009 fa27 	bl	800a2e0 <vTaskResume>
			break;
 8000e92:	e028      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x06:		// Toggle parking to the left.
			vTaskResume(ParkLeftTaskHandle);
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <StartDispatcherTask+0x100>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f009 fa21 	bl	800a2e0 <vTaskResume>
			break;
 8000e9e:	e022      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x07:		// Toggle parking to the right.
			vTaskResume(ParkRightTaskHandle);
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <StartDispatcherTask+0x104>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f009 fa1b 	bl	800a2e0 <vTaskResume>
			break;
 8000eaa:	e01c      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x0B:		// Accelerate.
			vTaskResume(AccelerateTaskHandle);
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <StartDispatcherTask+0x108>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f009 fa15 	bl	800a2e0 <vTaskResume>
			break;
 8000eb6:	e016      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x0C:		// Decelerate.
			vTaskResume(DecelerateTaskHandle);
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <StartDispatcherTask+0x10c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f009 fa0f 	bl	800a2e0 <vTaskResume>
			break;
 8000ec2:	e010      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x0D:		// Turn left.
			vTaskResume(TurnLeftTaskHandle);
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <StartDispatcherTask+0x110>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f009 fa09 	bl	800a2e0 <vTaskResume>
			break;
 8000ece:	e00a      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x0E:		// Turn right.
			vTaskResume(TurnRightTaskHandle);
 8000ed0:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <StartDispatcherTask+0x114>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f009 fa03 	bl	800a2e0 <vTaskResume>
			break;
 8000eda:	e004      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		default:		// Acknowledge connection.
			vTaskResume(ConnectionTaskHandle);
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <StartDispatcherTask+0x118>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f009 f9fd 	bl	800a2e0 <vTaskResume>
	  vTaskSuspend(NULL);
 8000ee6:	e78f      	b.n	8000e08 <StartDispatcherTask+0x8>
 8000ee8:	20000108 	.word	0x20000108
 8000eec:	2000012c 	.word	0x2000012c
 8000ef0:	20000130 	.word	0x20000130
 8000ef4:	20000134 	.word	0x20000134
 8000ef8:	20000138 	.word	0x20000138
 8000efc:	2000013c 	.word	0x2000013c
 8000f00:	20000140 	.word	0x20000140
 8000f04:	20000144 	.word	0x20000144
 8000f08:	20000148 	.word	0x20000148
 8000f0c:	2000014c 	.word	0x2000014c
 8000f10:	20000150 	.word	0x20000150
 8000f14:	20000154 	.word	0x20000154
 8000f18:	20000158 	.word	0x20000158

08000f1c <StartStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStopTask */
void StartStopTask(void *argument)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000f24:	2000      	movs	r0, #0
 8000f26:	f009 f92f 	bl	800a188 <vTaskSuspend>

	  // Stop parking if applicable
	  vTaskSuspend(ParkLeftTaskHandle);
 8000f2a:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <StartStopTask+0xb0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f009 f92a 	bl	800a188 <vTaskSuspend>
	  vTaskSuspend(ParkRightTaskHandle);
 8000f34:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <StartStopTask+0xb4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f009 f925 	bl	800a188 <vTaskSuspend>

	  // Stop BLDC motor
	  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <StartStopTask+0xb8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a25      	ldr	r2, [pc, #148]	; (8000fd8 <StartStopTask+0xbc>)
 8000f44:	6013      	str	r3, [r2, #0]
	  sliderAccelerateDecelerateCurrentValue = 0;
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <StartStopTask+0xb8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
	  setBLDCMotorSpeed();
 8000f4c:	f7ff fb88 	bl	8000660 <setBLDCMotorSpeed>

	  // Set LED stripes
	  isStopped = true;
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <StartStopTask+0xc0>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
	  stripesEffect = STOP;
 8000f56:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <StartStopTask+0xc4>)
 8000f58:	2202      	movs	r2, #2
 8000f5a:	701a      	strb	r2, [r3, #0]
	  ommitToggle = true;
 8000f5c:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <StartStopTask+0xc8>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
	  internalFunctionCall = true;
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <StartStopTask+0xcc>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
	  vTaskResume(LEDStripesTaskHandle);
 8000f68:	4b20      	ldr	r3, [pc, #128]	; (8000fec <StartStopTask+0xd0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f009 f9b7 	bl	800a2e0 <vTaskResume>

	  // Home stepper motor
	  moveStepperMotorUntil(0);
 8000f72:	2000      	movs	r0, #0
 8000f74:	f7ff fc24 	bl	80007c0 <moveStepperMotorUntil>

	  // Reset parking state
	  isParking = false;
 8000f78:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <StartStopTask+0xd4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
	  vTaskDelete(ParkLeftTaskHandle);
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <StartStopTask+0xb0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f009 f856 	bl	800a034 <vTaskDelete>
	  vTaskDelete(ParkRightTaskHandle);
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <StartStopTask+0xb4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f009 f851 	bl	800a034 <vTaskDelete>
	  ParkLeftTaskHandle = osThreadNew(StartParkLeftTask, NULL, &ParkLeftTask_attributes);
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <StartStopTask+0xd8>)
 8000f94:	2100      	movs	r1, #0
 8000f96:	4818      	ldr	r0, [pc, #96]	; (8000ff8 <StartStopTask+0xdc>)
 8000f98:	f007 feec 	bl	8008d74 <osThreadNew>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <StartStopTask+0xb0>)
 8000fa0:	6013      	str	r3, [r2, #0]
	  ParkRightTaskHandle = osThreadNew(StartParkRightTask, NULL, &ParkRightTask_attributes);
 8000fa2:	4a16      	ldr	r2, [pc, #88]	; (8000ffc <StartStopTask+0xe0>)
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4816      	ldr	r0, [pc, #88]	; (8001000 <StartStopTask+0xe4>)
 8000fa8:	f007 fee4 	bl	8008d74 <osThreadNew>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <StartStopTask+0xb4>)
 8000fb0:	6013      	str	r3, [r2, #0]

	  // Turn off all the lights
	  HAL_GPIO_WritePin(BrakeLights_GPIO_Port, BrakeLights_Pin, RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb8:	4812      	ldr	r0, [pc, #72]	; (8001004 <StartStopTask+0xe8>)
 8000fba:	f003 f819 	bl	8003ff0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc4:	480f      	ldr	r0, [pc, #60]	; (8001004 <StartStopTask+0xe8>)
 8000fc6:	f003 f813 	bl	8003ff0 <HAL_GPIO_WritePin>
	  vTaskSuspend(NULL);
 8000fca:	e7ab      	b.n	8000f24 <StartStopTask+0x8>
 8000fcc:	20000140 	.word	0x20000140
 8000fd0:	20000144 	.word	0x20000144
 8000fd4:	200000ec 	.word	0x200000ec
 8000fd8:	200000e8 	.word	0x200000e8
 8000fdc:	200000e5 	.word	0x200000e5
 8000fe0:	200000e2 	.word	0x200000e2
 8000fe4:	200000e4 	.word	0x200000e4
 8000fe8:	200000e0 	.word	0x200000e0
 8000fec:	20000134 	.word	0x20000134
 8000ff0:	20000104 	.word	0x20000104
 8000ff4:	0800d250 	.word	0x0800d250
 8000ff8:	080013c9 	.word	0x080013c9
 8000ffc:	0800d274 	.word	0x0800d274
 8001000:	0800141d 	.word	0x0800141d
 8001004:	40020800 	.word	0x40020800

08001008 <StartDrivingLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDrivingLightsTask */
void StartDrivingLightsTask(void *argument)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDrivingLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001010:	2000      	movs	r0, #0
 8001012:	f009 f8b9 	bl	800a188 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <StartDrivingLightsTask+0x50>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	f083 0301 	eor.w	r3, r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d104      	bne.n	8001030 <StartDrivingLightsTask+0x28>
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <StartDrivingLightsTask+0x54>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0ef      	beq.n	8001010 <StartDrivingLightsTask+0x8>
		  internalFunctionCall = false;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <StartDrivingLightsTask+0x54>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <StartDrivingLightsTask+0x58>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	d004      	beq.n	800104a <StartDrivingLightsTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <StartDrivingLightsTask+0x5c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f009 f94b 	bl	800a2e0 <vTaskResume>
		  }

		  // Driving lights effect
		  HAL_GPIO_TogglePin(DrivingLights_GPIO_Port, DrivingLights_Pin);
 800104a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <StartDrivingLightsTask+0x60>)
 8001050:	f002 ffe7 	bl	8004022 <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 8001054:	e7dc      	b.n	8001010 <StartDrivingLightsTask+0x8>
 8001056:	bf00      	nop
 8001058:	20000104 	.word	0x20000104
 800105c:	200000e0 	.word	0x200000e0
 8001060:	200000e5 	.word	0x200000e5
 8001064:	20000164 	.word	0x20000164
 8001068:	40020800 	.word	0x40020800

0800106c <StartLEDStripesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDStripesTask */
void StartLEDStripesTask(void *argument)
{
 800106c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001070:	b096      	sub	sp, #88	; 0x58
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDStripesTask */
	// Set StripesEffect enum
	stripesEffect = NONE;
 8001076:	4b8e      	ldr	r3, [pc, #568]	; (80012b0 <StartLEDStripesTask+0x244>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]

	// Transmit 4 empty bytes to ensure SDO is low
	uint8_t d[4] = {0};
 800107c:	2300      	movs	r3, #0
 800107e:	647b      	str	r3, [r7, #68]	; 0x44
	HAL_SPI_Transmit(&hspi1, d, 4, 100);
 8001080:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001084:	2364      	movs	r3, #100	; 0x64
 8001086:	2204      	movs	r2, #4
 8001088:	488a      	ldr	r0, [pc, #552]	; (80012b4 <StartLEDStripesTask+0x248>)
 800108a:	f004 fe90 	bl	8005dae <HAL_SPI_Transmit>

	// Create handle and configure
	ws2812b_handle_t hws2812b;

	hws2812b.config.packing = PACKING; // See macro above
 800108e:	2301      	movs	r3, #1
 8001090:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hws2812b.config.pulse_len_1 = WS2812B_PULSE_LEN_6b;
 8001094:	233f      	movs	r3, #63	; 0x3f
 8001096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hws2812b.config.pulse_len_0 = WS2812B_PULSE_LEN_2b;
 800109a:	2303      	movs	r3, #3
 800109c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hws2812b.config.first_bit_0 = WS2812B_FIRST_BIT_0_ENABLED;
 80010a0:	2301      	movs	r3, #1
 80010a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hws2812b.config.prefix_len = PREFIX_LEN; // See macro above
 80010a6:	2301      	movs	r3, #1
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	hws2812b.config.suffix_len = SUFFIX_LEN; // See macro above
 80010aa:	2304      	movs	r3, #4
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
	hws2812b.config.spi_bit_order = WS2812B_MSB_FIRST;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	// Create array of LEDs & set LED color
	ws2812b_led_t leds[LED_COUNT];
	struct DesiredStripesColor desiredStripesColor;
	setLEDStripesEffect(stripesEffect, &desiredStripesColor);
 80010b4:	4b7e      	ldr	r3, [pc, #504]	; (80012b0 <StartLEDStripesTask+0x244>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	f107 0208 	add.w	r2, r7, #8
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fa8b 	bl	80005dc <setLEDStripesEffect>
	for(int i = 0; i < LED_COUNT; i ++) {
 80010c6:	2300      	movs	r3, #0
 80010c8:	657b      	str	r3, [r7, #84]	; 0x54
 80010ca:	e020      	b.n	800110e <StartLEDStripesTask+0xa2>
	  leds[i].red = desiredStripesColor.red;
 80010cc:	7a39      	ldrb	r1, [r7, #8]
 80010ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	3358      	adds	r3, #88	; 0x58
 80010d8:	443b      	add	r3, r7
 80010da:	3b4c      	subs	r3, #76	; 0x4c
 80010dc:	460a      	mov	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
	  leds[i].green = desiredStripesColor.green;
 80010e0:	7a79      	ldrb	r1, [r7, #9]
 80010e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	3358      	adds	r3, #88	; 0x58
 80010ec:	443b      	add	r3, r7
 80010ee:	3b4b      	subs	r3, #75	; 0x4b
 80010f0:	460a      	mov	r2, r1
 80010f2:	701a      	strb	r2, [r3, #0]
	  leds[i].blue = desiredStripesColor.blue;
 80010f4:	7ab9      	ldrb	r1, [r7, #10]
 80010f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010f8:	4613      	mov	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4413      	add	r3, r2
 80010fe:	3358      	adds	r3, #88	; 0x58
 8001100:	443b      	add	r3, r7
 8001102:	3b4a      	subs	r3, #74	; 0x4a
 8001104:	460a      	mov	r2, r1
 8001106:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < LED_COUNT; i ++) {
 8001108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800110a:	3301      	adds	r3, #1
 800110c:	657b      	str	r3, [r7, #84]	; 0x54
 800110e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001110:	2b06      	cmp	r3, #6
 8001112:	dddb      	ble.n	80010cc <StartLEDStripesTask+0x60>
	}

	// Add LEDs and count to handle
	hws2812b.led_count = LED_COUNT;
 8001114:	2307      	movs	r3, #7
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
	hws2812b.leds = leds;
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38

	// Initialize the driver
	if(ws2812b_init(&hws2812b)) {
 800111e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001122:	4618      	mov	r0, r3
 8001124:	f001 fc12 	bl	800294c <ws2812b_init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d006      	beq.n	800113c <StartLEDStripesTask+0xd0>
	  printf("Invalid ws2812b config! (%s)\r\n",ws2812b_error_msg);
 800112e:	4b62      	ldr	r3, [pc, #392]	; (80012b8 <StartLEDStripesTask+0x24c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4619      	mov	r1, r3
 8001134:	4861      	ldr	r0, [pc, #388]	; (80012bc <StartLEDStripesTask+0x250>)
 8001136:	f00a ffe9 	bl	800c10c <iprintf>
	  while(1) {;}
 800113a:	e7fe      	b.n	800113a <StartLEDStripesTask+0xce>
	}

	// Create buffer
	uint8_t dma_buf[ws2812b_required_buffer_len(&hws2812b)];
 800113c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fd9f 	bl	8002c84 <ws2812b_required_buffer_len>
 8001146:	4601      	mov	r1, r0
 8001148:	460b      	mov	r3, r1
 800114a:	3b01      	subs	r3, #1
 800114c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800114e:	2300      	movs	r3, #0
 8001150:	4688      	mov	r8, r1
 8001152:	4699      	mov	r9, r3
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001160:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001164:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001168:	2300      	movs	r3, #0
 800116a:	460c      	mov	r4, r1
 800116c:	461d      	mov	r5, r3
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	00eb      	lsls	r3, r5, #3
 8001178:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800117c:	00e2      	lsls	r2, r4, #3
 800117e:	1dcb      	adds	r3, r1, #7
 8001180:	08db      	lsrs	r3, r3, #3
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	ebad 0d03 	sub.w	sp, sp, r3
 8001188:	466b      	mov	r3, sp
 800118a:	3300      	adds	r3, #0
 800118c:	64bb      	str	r3, [r7, #72]	; 0x48

	// Fill buffer
	ws2812b_fill_buffer(&hws2812b, dma_buf);
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fd90 	bl	8002cba <ws2812b_fill_buffer>

	// Transmit
	HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 fd70 	bl	8002c84 <ws2812b_required_buffer_len>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80011ac:	4841      	ldr	r0, [pc, #260]	; (80012b4 <StartLEDStripesTask+0x248>)
 80011ae:	f004 ff6d 	bl	800608c <HAL_SPI_Transmit_DMA>
	HAL_Delay(10); // 10ms delay
 80011b2:	200a      	movs	r0, #10
 80011b4:	f001 ff0a 	bl	8002fcc <HAL_Delay>

  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80011b8:	2000      	movs	r0, #0
 80011ba:	f008 ffe5 	bl	800a188 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 80011be:	4b40      	ldr	r3, [pc, #256]	; (80012c0 <StartLEDStripesTask+0x254>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	f083 0301 	eor.w	r3, r3, #1
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d104      	bne.n	80011d8 <StartLEDStripesTask+0x16c>
 80011ce:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <StartLEDStripesTask+0x258>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0ef      	beq.n	80011b8 <StartLEDStripesTask+0x14c>
		  internalFunctionCall = false;
 80011d8:	4b3a      	ldr	r3, [pc, #232]	; (80012c4 <StartLEDStripesTask+0x258>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]

		  // LED stripes effect
		  if(ommitToggle == false) {
 80011de:	4b3a      	ldr	r3, [pc, #232]	; (80012c8 <StartLEDStripesTask+0x25c>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f083 0301 	eor.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d014      	beq.n	8001218 <StartLEDStripesTask+0x1ac>
			  if(isOn == false) {
 80011ee:	4b37      	ldr	r3, [pc, #220]	; (80012cc <StartLEDStripesTask+0x260>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <StartLEDStripesTask+0x1a0>
				  isOn = true;
 80011fe:	4b33      	ldr	r3, [pc, #204]	; (80012cc <StartLEDStripesTask+0x260>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
				  stripesEffect = DEFAULT;
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <StartLEDStripesTask+0x244>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	e005      	b.n	8001218 <StartLEDStripesTask+0x1ac>
			  } else {
				  isOn = false;
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <StartLEDStripesTask+0x260>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
				  stripesEffect = NONE;
 8001212:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <StartLEDStripesTask+0x244>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  ommitToggle = false;
 8001218:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <StartLEDStripesTask+0x25c>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]

		  // Update LED color
		  setLEDStripesEffect(stripesEffect, &desiredStripesColor);
 800121e:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <StartLEDStripesTask+0x244>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f107 0208 	add.w	r2, r7, #8
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f9d6 	bl	80005dc <setLEDStripesEffect>
		  for(int i = 0; i < LED_COUNT; i ++) {
 8001230:	2300      	movs	r3, #0
 8001232:	653b      	str	r3, [r7, #80]	; 0x50
 8001234:	e020      	b.n	8001278 <StartLEDStripesTask+0x20c>
			  leds[i].red = desiredStripesColor.red;
 8001236:	7a39      	ldrb	r1, [r7, #8]
 8001238:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	3358      	adds	r3, #88	; 0x58
 8001242:	443b      	add	r3, r7
 8001244:	3b4c      	subs	r3, #76	; 0x4c
 8001246:	460a      	mov	r2, r1
 8001248:	701a      	strb	r2, [r3, #0]
			  leds[i].green = desiredStripesColor.green;
 800124a:	7a79      	ldrb	r1, [r7, #9]
 800124c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	3358      	adds	r3, #88	; 0x58
 8001256:	443b      	add	r3, r7
 8001258:	3b4b      	subs	r3, #75	; 0x4b
 800125a:	460a      	mov	r2, r1
 800125c:	701a      	strb	r2, [r3, #0]
			  leds[i].blue = desiredStripesColor.blue;
 800125e:	7ab9      	ldrb	r1, [r7, #10]
 8001260:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001262:	4613      	mov	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4413      	add	r3, r2
 8001268:	3358      	adds	r3, #88	; 0x58
 800126a:	443b      	add	r3, r7
 800126c:	3b4a      	subs	r3, #74	; 0x4a
 800126e:	460a      	mov	r2, r1
 8001270:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < LED_COUNT; i ++) {
 8001272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001274:	3301      	adds	r3, #1
 8001276:	653b      	str	r3, [r7, #80]	; 0x50
 8001278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800127a:	2b06      	cmp	r3, #6
 800127c:	dddb      	ble.n	8001236 <StartLEDStripesTask+0x1ca>
		  }

		  // Add LEDs to handle
		  hws2812b.leds = leds;
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	63bb      	str	r3, [r7, #56]	; 0x38

		  // Fill buffer
		  ws2812b_fill_buffer(&hws2812b, dma_buf);
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800128a:	4618      	mov	r0, r3
 800128c:	f001 fd15 	bl	8002cba <ws2812b_fill_buffer>

		  // Transmit
		  HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 8001290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001294:	4618      	mov	r0, r3
 8001296:	f001 fcf5 	bl	8002c84 <ws2812b_required_buffer_len>
 800129a:	4603      	mov	r3, r0
 800129c:	b29b      	uxth	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80012a2:	4804      	ldr	r0, [pc, #16]	; (80012b4 <StartLEDStripesTask+0x248>)
 80012a4:	f004 fef2 	bl	800608c <HAL_SPI_Transmit_DMA>
		  HAL_Delay(10); // 10ms delay
 80012a8:	200a      	movs	r0, #10
 80012aa:	f001 fe8f 	bl	8002fcc <HAL_Delay>
	  vTaskSuspend(NULL);
 80012ae:	e783      	b.n	80011b8 <StartLEDStripesTask+0x14c>
 80012b0:	200000e2 	.word	0x200000e2
 80012b4:	200001c0 	.word	0x200001c0
 80012b8:	200007b0 	.word	0x200007b0
 80012bc:	0800cff0 	.word	0x0800cff0
 80012c0:	20000104 	.word	0x20000104
 80012c4:	200000e0 	.word	0x200000e0
 80012c8:	200000e4 	.word	0x200000e4
 80012cc:	200000e3 	.word	0x200000e3

080012d0 <StartLeftBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeftBlinkersTask */
void StartLeftBlinkersTask(void *argument)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLeftBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80012d8:	2000      	movs	r0, #0
 80012da:	f008 ff55 	bl	800a188 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <StartLeftBlinkersTask+0x68>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f083 0301 	eor.w	r3, r3, #1
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d104      	bne.n	80012f8 <StartLeftBlinkersTask+0x28>
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <StartLeftBlinkersTask+0x6c>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0ef      	beq.n	80012d8 <StartLeftBlinkersTask+0x8>
		  internalFunctionCall = false;
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <StartLeftBlinkersTask+0x6c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <StartLeftBlinkersTask+0x70>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d004      	beq.n	8001312 <StartLeftBlinkersTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <StartLeftBlinkersTask+0x74>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f008 ffe7 	bl	800a2e0 <vTaskResume>
		  }

		  // Left blinkers effect
		  for(int i = 0; i < 6; i ++) {
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	e00b      	b.n	8001330 <StartLeftBlinkersTask+0x60>
			  HAL_GPIO_TogglePin(LeftBlinkers_GPIO_Port, LeftBlinkers_Pin);
 8001318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800131c:	480a      	ldr	r0, [pc, #40]	; (8001348 <StartLeftBlinkersTask+0x78>)
 800131e:	f002 fe80 	bl	8004022 <HAL_GPIO_TogglePin>
			  osDelay(BLINKERS_DURATION);
 8001322:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001326:	f007 fdcb 	bl	8008ec0 <osDelay>
		  for(int i = 0; i < 6; i ++) {
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3301      	adds	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b05      	cmp	r3, #5
 8001334:	ddf0      	ble.n	8001318 <StartLeftBlinkersTask+0x48>
	  vTaskSuspend(NULL);
 8001336:	e7cf      	b.n	80012d8 <StartLeftBlinkersTask+0x8>
 8001338:	20000104 	.word	0x20000104
 800133c:	200000e0 	.word	0x200000e0
 8001340:	200000e5 	.word	0x200000e5
 8001344:	20000164 	.word	0x20000164
 8001348:	40020800 	.word	0x40020800

0800134c <StartRightBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRightBlinkersTask */
void StartRightBlinkersTask(void *argument)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRightBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001354:	2000      	movs	r0, #0
 8001356:	f008 ff17 	bl	800a188 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <StartRightBlinkersTask+0x68>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f083 0301 	eor.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d104      	bne.n	8001374 <StartRightBlinkersTask+0x28>
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <StartRightBlinkersTask+0x6c>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0ef      	beq.n	8001354 <StartRightBlinkersTask+0x8>
		  internalFunctionCall = false;
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <StartRightBlinkersTask+0x6c>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <StartRightBlinkersTask+0x70>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <StartRightBlinkersTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <StartRightBlinkersTask+0x74>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f008 ffa9 	bl	800a2e0 <vTaskResume>
		  }

		  // Right blinkers effect
		  for(int i = 0; i < 6; i ++) {
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	e00b      	b.n	80013ac <StartRightBlinkersTask+0x60>
			  HAL_GPIO_TogglePin(RightBlinkers_GPIO_Port, RightBlinkers_Pin);
 8001394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001398:	480a      	ldr	r0, [pc, #40]	; (80013c4 <StartRightBlinkersTask+0x78>)
 800139a:	f002 fe42 	bl	8004022 <HAL_GPIO_TogglePin>
			  osDelay(BLINKERS_DURATION);
 800139e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80013a2:	f007 fd8d 	bl	8008ec0 <osDelay>
		  for(int i = 0; i < 6; i ++) {
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3301      	adds	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b05      	cmp	r3, #5
 80013b0:	ddf0      	ble.n	8001394 <StartRightBlinkersTask+0x48>
	  vTaskSuspend(NULL);
 80013b2:	e7cf      	b.n	8001354 <StartRightBlinkersTask+0x8>
 80013b4:	20000104 	.word	0x20000104
 80013b8:	200000e0 	.word	0x200000e0
 80013bc:	200000e5 	.word	0x200000e5
 80013c0:	20000164 	.word	0x20000164
 80013c4:	40020800 	.word	0x40020800

080013c8 <StartParkLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkLeftTask */
void StartParkLeftTask(void *argument)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80013d0:	2000      	movs	r0, #0
 80013d2:	f008 fed9 	bl	800a188 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false) {
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <StartParkLeftTask+0x48>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	f083 0301 	eor.w	r3, r3, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f4      	beq.n	80013d0 <StartParkLeftTask+0x8>
		  // Exit stopped state if applicable
		  if(isStopped) {
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <StartParkLeftTask+0x4c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d004      	beq.n	80013fa <StartParkLeftTask+0x32>
			  vTaskResume(ResumeFromStopTHandle);
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <StartParkLeftTask+0x50>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f008 ff73 	bl	800a2e0 <vTaskResume>
		  }

		  // Park to the left
		  isParking = true;
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <StartParkLeftTask+0x48>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
		  park(LEFT);
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff fa1f 	bl	8000844 <park>
		  isParking = false;
 8001406:	4b02      	ldr	r3, [pc, #8]	; (8001410 <StartParkLeftTask+0x48>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
	  vTaskSuspend(NULL);
 800140c:	e7e0      	b.n	80013d0 <StartParkLeftTask+0x8>
 800140e:	bf00      	nop
 8001410:	20000104 	.word	0x20000104
 8001414:	200000e5 	.word	0x200000e5
 8001418:	20000164 	.word	0x20000164

0800141c <StartParkRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkRightTask */
void StartParkRightTask(void *argument)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001424:	2000      	movs	r0, #0
 8001426:	f008 feaf 	bl	800a188 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false) {
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <StartParkRightTask+0x48>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f083 0301 	eor.w	r3, r3, #1
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f4      	beq.n	8001424 <StartParkRightTask+0x8>
		  // Exit stopped state if applicable
		  if(isStopped) {
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <StartParkRightTask+0x4c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d004      	beq.n	800144e <StartParkRightTask+0x32>
			  vTaskResume(ResumeFromStopTHandle);
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <StartParkRightTask+0x50>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f008 ff49 	bl	800a2e0 <vTaskResume>
		  }

		  // Park to the right
		  isParking = true;
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <StartParkRightTask+0x48>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
		  park(RIGHT);
 8001454:	2001      	movs	r0, #1
 8001456:	f7ff f9f5 	bl	8000844 <park>
		  isParking = false;
 800145a:	4b02      	ldr	r3, [pc, #8]	; (8001464 <StartParkRightTask+0x48>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
	  vTaskSuspend(NULL);
 8001460:	e7e0      	b.n	8001424 <StartParkRightTask+0x8>
 8001462:	bf00      	nop
 8001464:	20000104 	.word	0x20000104
 8001468:	200000e5 	.word	0x200000e5
 800146c:	20000164 	.word	0x20000164

08001470 <StartAccelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccelerateTask */
void StartAccelerateTask(void *argument)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccelerateTask */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0.0);
 8001478:	2300      	movs	r3, #0
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	481e      	ldr	r0, [pc, #120]	; (80014f8 <StartAccelerateTask+0x88>)
 8001480:	f001 ff78 	bl	8003374 <HAL_DAC_SetValue>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001484:	2000      	movs	r0, #0
 8001486:	f008 fe7f 	bl	800a188 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <StartAccelerateTask+0x8c>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	f083 0301 	eor.w	r3, r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d104      	bne.n	80014a4 <StartAccelerateTask+0x34>
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <StartAccelerateTask+0x90>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0ef      	beq.n	8001484 <StartAccelerateTask+0x14>
		  internalFunctionCall = false;
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <StartAccelerateTask+0x90>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <StartAccelerateTask+0x94>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d004      	beq.n	80014be <StartAccelerateTask+0x4e>
			  vTaskResume(ResumeFromStopTHandle);
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <StartAccelerateTask+0x98>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f008 ff11 	bl	800a2e0 <vTaskResume>
		  }

		  // Accelerate if possible
		  if(sliderAccelerateDecelerateCurrentValue < 4) {
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <StartAccelerateTask+0x9c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	dc08      	bgt.n	80014d8 <StartAccelerateTask+0x68>
			  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <StartAccelerateTask+0x9c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a11      	ldr	r2, [pc, #68]	; (8001510 <StartAccelerateTask+0xa0>)
 80014cc:	6013      	str	r3, [r2, #0]
			  sliderAccelerateDecelerateCurrentValue ++;
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <StartAccelerateTask+0x9c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <StartAccelerateTask+0x9c>)
 80014d6:	6013      	str	r3, [r2, #0]
		  }
		  setBLDCMotorSpeed();
 80014d8:	f7ff f8c2 	bl	8000660 <setBLDCMotorSpeed>

		  // Set withdraw lights appropriately
		  if(sliderAccelerateDecelerateCurrentValue >= 0) {
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <StartAccelerateTask+0x9c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	dbcf      	blt.n	8001484 <StartAccelerateTask+0x14>
			  isWithdrawing = false;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <StartAccelerateTask+0xa4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
			  vTaskResume(WithdrawLightsTHandle);
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <StartAccelerateTask+0xa8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f008 fef6 	bl	800a2e0 <vTaskResume>
	  vTaskSuspend(NULL);
 80014f4:	e7c6      	b.n	8001484 <StartAccelerateTask+0x14>
 80014f6:	bf00      	nop
 80014f8:	20000110 	.word	0x20000110
 80014fc:	20000104 	.word	0x20000104
 8001500:	200000e0 	.word	0x200000e0
 8001504:	200000e5 	.word	0x200000e5
 8001508:	20000164 	.word	0x20000164
 800150c:	200000ec 	.word	0x200000ec
 8001510:	200000e8 	.word	0x200000e8
 8001514:	200000f0 	.word	0x200000f0
 8001518:	20000160 	.word	0x20000160

0800151c <StartDecelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDecelerateTask */
void StartDecelerateTask(void *argument)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDecelerateTask */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0.0);
 8001524:	2300      	movs	r3, #0
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	4821      	ldr	r0, [pc, #132]	; (80015b0 <StartDecelerateTask+0x94>)
 800152c:	f001 ff22 	bl	8003374 <HAL_DAC_SetValue>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001530:	2000      	movs	r0, #0
 8001532:	f008 fe29 	bl	800a188 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <StartDecelerateTask+0x98>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	f083 0301 	eor.w	r3, r3, #1
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d104      	bne.n	8001550 <StartDecelerateTask+0x34>
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <StartDecelerateTask+0x9c>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0ef      	beq.n	8001530 <StartDecelerateTask+0x14>
		  internalFunctionCall = false;
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <StartDecelerateTask+0x9c>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <StartDecelerateTask+0xa0>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <StartDecelerateTask+0x4e>
			  vTaskResume(ResumeFromStopTHandle);
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <StartDecelerateTask+0xa4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f008 febb 	bl	800a2e0 <vTaskResume>
		  }

		  // Decelerate if possible
		  if(sliderAccelerateDecelerateCurrentValue > -2) {
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <StartDecelerateTask+0xa8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001572:	db08      	blt.n	8001586 <StartDecelerateTask+0x6a>
			  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <StartDecelerateTask+0xa8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <StartDecelerateTask+0xac>)
 800157a:	6013      	str	r3, [r2, #0]
			  sliderAccelerateDecelerateCurrentValue --;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <StartDecelerateTask+0xa8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3b01      	subs	r3, #1
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <StartDecelerateTask+0xa8>)
 8001584:	6013      	str	r3, [r2, #0]
		  }
		  setBLDCMotorSpeed();
 8001586:	f7ff f86b 	bl	8000660 <setBLDCMotorSpeed>

		  // Set withdraw lights appropriately
		  if(sliderAccelerateDecelerateCurrentValue >= 0) {
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <StartDecelerateTask+0xa8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db05      	blt.n	800159e <StartDecelerateTask+0x82>
			  vTaskResume(BrakeLightsTaskHandle);
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <StartDecelerateTask+0xb0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f008 fea2 	bl	800a2e0 <vTaskResume>
 800159c:	e7c8      	b.n	8001530 <StartDecelerateTask+0x14>
		  } else {
			  isWithdrawing = true;
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <StartDecelerateTask+0xb4>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
			  vTaskResume(WithdrawLightsTHandle);
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <StartDecelerateTask+0xb8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f008 fe99 	bl	800a2e0 <vTaskResume>
	  vTaskSuspend(NULL);
 80015ae:	e7bf      	b.n	8001530 <StartDecelerateTask+0x14>
 80015b0:	20000110 	.word	0x20000110
 80015b4:	20000104 	.word	0x20000104
 80015b8:	200000e0 	.word	0x200000e0
 80015bc:	200000e5 	.word	0x200000e5
 80015c0:	20000164 	.word	0x20000164
 80015c4:	200000ec 	.word	0x200000ec
 80015c8:	200000e8 	.word	0x200000e8
 80015cc:	2000015c 	.word	0x2000015c
 80015d0:	200000f0 	.word	0x200000f0
 80015d4:	20000160 	.word	0x20000160

080015d8 <StartTurnLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnLeftTask */
void StartTurnLeftTask(void *argument)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnLeftTask */

  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80015e0:	2000      	movs	r0, #0
 80015e2:	f008 fdd1 	bl	800a188 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <StartTurnLeftTask+0x68>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	f083 0301 	eor.w	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d104      	bne.n	8001600 <StartTurnLeftTask+0x28>
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <StartTurnLeftTask+0x6c>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0ef      	beq.n	80015e0 <StartTurnLeftTask+0x8>
		  internalFunctionCall = false;
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <StartTurnLeftTask+0x6c>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <StartTurnLeftTask+0x70>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d004      	beq.n	800161a <StartTurnLeftTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <StartTurnLeftTask+0x74>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f008 fe63 	bl	800a2e0 <vTaskResume>
		  }

		  // Turn left if possible
		  if(sliderLeftRightCurrentValue > -3) {
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <StartTurnLeftTask+0x78>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f113 0f02 	cmn.w	r3, #2
 8001622:	dbdd      	blt.n	80015e0 <StartTurnLeftTask+0x8>
			  sliderLeftRightPreviousValue = sliderLeftRightCurrentValue;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <StartTurnLeftTask+0x78>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <StartTurnLeftTask+0x7c>)
 800162a:	6013      	str	r3, [r2, #0]
			  sliderLeftRightCurrentValue --;
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <StartTurnLeftTask+0x78>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	3b01      	subs	r3, #1
 8001632:	4a07      	ldr	r2, [pc, #28]	; (8001650 <StartTurnLeftTask+0x78>)
 8001634:	6013      	str	r3, [r2, #0]

			  moveStepperMotor(LEFT);
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff f89a 	bl	8000770 <moveStepperMotor>
	  vTaskSuspend(NULL);
 800163c:	e7d0      	b.n	80015e0 <StartTurnLeftTask+0x8>
 800163e:	bf00      	nop
 8001640:	20000104 	.word	0x20000104
 8001644:	200000e0 	.word	0x200000e0
 8001648:	200000e5 	.word	0x200000e5
 800164c:	20000164 	.word	0x20000164
 8001650:	20000100 	.word	0x20000100
 8001654:	200000fc 	.word	0x200000fc

08001658 <StartTurnRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnRightTask */
void StartTurnRightTask(void *argument)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnRightTask */

  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001660:	2000      	movs	r0, #0
 8001662:	f008 fd91 	bl	800a188 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <StartTurnRightTask+0x64>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f083 0301 	eor.w	r3, r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d104      	bne.n	8001680 <StartTurnRightTask+0x28>
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <StartTurnRightTask+0x68>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ef      	beq.n	8001660 <StartTurnRightTask+0x8>
		  internalFunctionCall = false;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <StartTurnRightTask+0x68>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <StartTurnRightTask+0x6c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d004      	beq.n	800169a <StartTurnRightTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 8001690:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <StartTurnRightTask+0x70>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f008 fe23 	bl	800a2e0 <vTaskResume>
		  }

		  // Turn right if possible
		  if(sliderLeftRightCurrentValue < 3) {
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <StartTurnRightTask+0x74>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	dcde      	bgt.n	8001660 <StartTurnRightTask+0x8>
			  sliderLeftRightPreviousValue = sliderLeftRightCurrentValue;
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <StartTurnRightTask+0x74>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <StartTurnRightTask+0x78>)
 80016a8:	6013      	str	r3, [r2, #0]
			  sliderLeftRightCurrentValue ++;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <StartTurnRightTask+0x74>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	4a06      	ldr	r2, [pc, #24]	; (80016cc <StartTurnRightTask+0x74>)
 80016b2:	6013      	str	r3, [r2, #0]

			  moveStepperMotor(RIGHT);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f7ff f85b 	bl	8000770 <moveStepperMotor>
	  vTaskSuspend(NULL);
 80016ba:	e7d1      	b.n	8001660 <StartTurnRightTask+0x8>
 80016bc:	20000104 	.word	0x20000104
 80016c0:	200000e0 	.word	0x200000e0
 80016c4:	200000e5 	.word	0x200000e5
 80016c8:	20000164 	.word	0x20000164
 80016cc:	20000100 	.word	0x20000100
 80016d0:	200000fc 	.word	0x200000fc

080016d4 <StartConnectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConnectionTask */
void StartConnectionTask(void *argument)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConnectionTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80016dc:	2000      	movs	r0, #0
 80016de:	f008 fd53 	bl	800a188 <vTaskSuspend>

	  // Refresh connection state
	  osTimerStart(ConnectionTaskTimerHandle, (ACKNOWLEDGE_PACKETS_FREQUENCY + TIME_MARGIN));
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <StartConnectionTask+0x30>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f241 517c 	movw	r1, #5500	; 0x157c
 80016ea:	4618      	mov	r0, r3
 80016ec:	f007 fcb0 	bl	8009050 <osTimerStart>
	  isConnected = true;
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <StartConnectionTask+0x34>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
	  vTaskResume(OLEDTaskHandle);
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <StartConnectionTask+0x38>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f008 fdf0 	bl	800a2e0 <vTaskResume>
	  vTaskSuspend(NULL);
 8001700:	e7ec      	b.n	80016dc <StartConnectionTask+0x8>
 8001702:	bf00      	nop
 8001704:	20000168 	.word	0x20000168
 8001708:	200000e1 	.word	0x200000e1
 800170c:	20000124 	.word	0x20000124

08001710 <StartBrakeLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBrakeLightsTask */
void StartBrakeLightsTask(void *argument)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBrakeLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001718:	2000      	movs	r0, #0
 800171a:	f008 fd35 	bl	800a188 <vTaskSuspend>

	  // Brake lights effect
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 800171e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <StartBrakeLightsTask+0x2c>)
 8001724:	f002 fc7d 	bl	8004022 <HAL_GPIO_TogglePin>
	  osDelay(BRAKE_LIGHTS_DURATION);
 8001728:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800172c:	f007 fbc8 	bl	8008ec0 <osDelay>
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 8001730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001734:	4801      	ldr	r0, [pc, #4]	; (800173c <StartBrakeLightsTask+0x2c>)
 8001736:	f002 fc74 	bl	8004022 <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 800173a:	e7ed      	b.n	8001718 <StartBrakeLightsTask+0x8>
 800173c:	40020800 	.word	0x40020800

08001740 <StartWithdrawLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWithdrawLightsTask */
void StartWithdrawLightsTask(void *argument)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWithdrawLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001748:	2000      	movs	r0, #0
 800174a:	f008 fd1d 	bl	800a188 <vTaskSuspend>

	  // Withdraw lights effect
	  if(isWithdrawing) {
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <StartWithdrawLightsTask+0x34>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <StartWithdrawLightsTask+0x26>
		  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, SET);
 8001758:	2201      	movs	r2, #1
 800175a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800175e:	4806      	ldr	r0, [pc, #24]	; (8001778 <StartWithdrawLightsTask+0x38>)
 8001760:	f002 fc46 	bl	8003ff0 <HAL_GPIO_WritePin>
 8001764:	e7f0      	b.n	8001748 <StartWithdrawLightsTask+0x8>
	  } else {
		  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <StartWithdrawLightsTask+0x38>)
 800176e:	f002 fc3f 	bl	8003ff0 <HAL_GPIO_WritePin>
	  vTaskSuspend(NULL);
 8001772:	e7e9      	b.n	8001748 <StartWithdrawLightsTask+0x8>
 8001774:	200000f0 	.word	0x200000f0
 8001778:	40020800 	.word	0x40020800

0800177c <StartResumeFromStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResumeFromStopTask */
void StartResumeFromStopTask(void *argument)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResumeFromStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001784:	2000      	movs	r0, #0
 8001786:	f008 fcff 	bl	800a188 <vTaskSuspend>

	  // Turn off LED stripes' stop effect if present
	  if(isStopped) {
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <StartResumeFromStopTask+0x48>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f7      	beq.n	8001784 <StartResumeFromStopTask+0x8>
		  isStopped = false;
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <StartResumeFromStopTask+0x48>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
		  if(isOn) {
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <StartResumeFromStopTask+0x4c>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <StartResumeFromStopTask+0x30>
			  stripesEffect = DEFAULT;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <StartResumeFromStopTask+0x50>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	e002      	b.n	80017b2 <StartResumeFromStopTask+0x36>
		  } else {
			  stripesEffect = NONE;
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <StartResumeFromStopTask+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
		  }
		  ommitToggle = true;
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <StartResumeFromStopTask+0x54>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
		  vTaskResume(LEDStripesTaskHandle);
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <StartResumeFromStopTask+0x58>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f008 fd8f 	bl	800a2e0 <vTaskResume>
	  vTaskSuspend(NULL);
 80017c2:	e7df      	b.n	8001784 <StartResumeFromStopTask+0x8>
 80017c4:	200000e5 	.word	0x200000e5
 80017c8:	200000e3 	.word	0x200000e3
 80017cc:	200000e2 	.word	0x200000e2
 80017d0:	200000e4 	.word	0x200000e4
 80017d4:	20000134 	.word	0x20000134

080017d8 <CallbackConnectionTaskTimer>:
  /* USER CODE END StartResumeFromStopTask */
}

/* CallbackConnectionTaskTimer function */
void CallbackConnectionTaskTimer(void *argument)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackConnectionTaskTimer */
	vTaskResume(StopTaskHandle);
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <CallbackConnectionTaskTimer+0x2c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f008 fd7b 	bl	800a2e0 <vTaskResume>
	isConnected = false;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <CallbackConnectionTaskTimer+0x30>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
	vTaskResume(OLEDTaskHandle);
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <CallbackConnectionTaskTimer+0x34>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f008 fd73 	bl	800a2e0 <vTaskResume>
  /* USER CODE END CallbackConnectionTaskTimer */
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000012c 	.word	0x2000012c
 8001808:	200000e1 	.word	0x200000e1
 800180c:	20000124 	.word	0x20000124

08001810 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08c      	sub	sp, #48	; 0x30
 8001814:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	4b94      	ldr	r3, [pc, #592]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a93      	ldr	r2, [pc, #588]	; (8001a78 <MX_GPIO_Init+0x268>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b91      	ldr	r3, [pc, #580]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	61bb      	str	r3, [r7, #24]
 800183c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800183e:	4b8e      	ldr	r3, [pc, #568]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a8d      	ldr	r2, [pc, #564]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b8b      	ldr	r3, [pc, #556]	; (8001a78 <MX_GPIO_Init+0x268>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	4b88      	ldr	r3, [pc, #544]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a87      	ldr	r2, [pc, #540]	; (8001a78 <MX_GPIO_Init+0x268>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b85      	ldr	r3, [pc, #532]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	4b82      	ldr	r3, [pc, #520]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a81      	ldr	r2, [pc, #516]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b7f      	ldr	r3, [pc, #508]	; (8001a78 <MX_GPIO_Init+0x268>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001886:	4b7c      	ldr	r3, [pc, #496]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a7b      	ldr	r2, [pc, #492]	; (8001a78 <MX_GPIO_Init+0x268>)
 800188c:	f043 0308 	orr.w	r3, r3, #8
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b79      	ldr	r3, [pc, #484]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800189e:	4b76      	ldr	r3, [pc, #472]	; (8001a78 <MX_GPIO_Init+0x268>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a75      	ldr	r2, [pc, #468]	; (8001a78 <MX_GPIO_Init+0x268>)
 80018a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b73      	ldr	r3, [pc, #460]	; (8001a78 <MX_GPIO_Init+0x268>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	f244 0191 	movw	r1, #16529	; 0x4091
 80018bc:	486f      	ldr	r0, [pc, #444]	; (8001a7c <MX_GPIO_Init+0x26c>)
 80018be:	f002 fb97 	bl	8003ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c8:	486d      	ldr	r0, [pc, #436]	; (8001a80 <MX_GPIO_Init+0x270>)
 80018ca:	f002 fb91 	bl	8003ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2140      	movs	r1, #64	; 0x40
 80018d2:	486c      	ldr	r0, [pc, #432]	; (8001a84 <MX_GPIO_Init+0x274>)
 80018d4:	f002 fb8c 	bl	8003ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80018de:	486a      	ldr	r0, [pc, #424]	; (8001a88 <MX_GPIO_Init+0x278>)
 80018e0:	f002 fb86 	bl	8003ff0 <HAL_GPIO_WritePin>
                          |WithdrawLights_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	4863      	ldr	r0, [pc, #396]	; (8001a88 <MX_GPIO_Init+0x278>)
 80018fc:	f002 f9cc 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001900:	2332      	movs	r3, #50	; 0x32
 8001902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001910:	230b      	movs	r3, #11
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	4619      	mov	r1, r3
 800191a:	485b      	ldr	r0, [pc, #364]	; (8001a88 <MX_GPIO_Init+0x278>)
 800191c:	f002 f9bc 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001920:	2386      	movs	r3, #134	; 0x86
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001930:	230b      	movs	r3, #11
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	4854      	ldr	r0, [pc, #336]	; (8001a8c <MX_GPIO_Init+0x27c>)
 800193c:	f002 f9ac 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin;
 8001940:	f244 0391 	movw	r3, #16529	; 0x4091
 8001944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	2301      	movs	r3, #1
 8001948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	4619      	mov	r1, r3
 8001958:	4848      	ldr	r0, [pc, #288]	; (8001a7c <MX_GPIO_Init+0x26c>)
 800195a:	f002 f99d 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800195e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001970:	230b      	movs	r3, #11
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	4619      	mov	r1, r3
 800197a:	4840      	ldr	r0, [pc, #256]	; (8001a7c <MX_GPIO_Init+0x26c>)
 800197c:	f002 f98c 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001980:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001992:	2307      	movs	r3, #7
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4619      	mov	r1, r3
 800199c:	4838      	ldr	r0, [pc, #224]	; (8001a80 <MX_GPIO_Init+0x270>)
 800199e:	f002 f97b 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = StepperMotorDir_Pin;
 80019a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(StepperMotorDir_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	4619      	mov	r1, r3
 80019ba:	4831      	ldr	r0, [pc, #196]	; (8001a80 <MX_GPIO_Init+0x270>)
 80019bc:	f002 f96c 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80019c0:	2340      	movs	r3, #64	; 0x40
 80019c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c4:	2301      	movs	r3, #1
 80019c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	4619      	mov	r1, r3
 80019d6:	482b      	ldr	r0, [pc, #172]	; (8001a84 <MX_GPIO_Init+0x274>)
 80019d8:	f002 f95e 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	4619      	mov	r1, r3
 80019ee:	4825      	ldr	r0, [pc, #148]	; (8001a84 <MX_GPIO_Init+0x274>)
 80019f0:	f002 f952 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 80019f4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80019f8:	61fb      	str	r3, [r7, #28]
                          |WithdrawLights_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	481e      	ldr	r0, [pc, #120]	; (8001a88 <MX_GPIO_Init+0x278>)
 8001a0e:	f002 f943 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a12:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a24:	230a      	movs	r3, #10
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4817      	ldr	r0, [pc, #92]	; (8001a8c <MX_GPIO_Init+0x27c>)
 8001a30:	f002 f932 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	4810      	ldr	r0, [pc, #64]	; (8001a8c <MX_GPIO_Init+0x27c>)
 8001a4a:	f002 f925 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a60:	230b      	movs	r3, #11
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4806      	ldr	r0, [pc, #24]	; (8001a84 <MX_GPIO_Init+0x274>)
 8001a6c:	f002 f914 	bl	8003c98 <HAL_GPIO_Init>

}
 8001a70:	bf00      	nop
 8001a72:	3730      	adds	r7, #48	; 0x30
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	40020c00 	.word	0x40020c00
 8001a84:	40021800 	.word	0x40021800
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	40020000 	.word	0x40020000

08001a90 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001a96:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <MX_I2C1_Init+0x78>)
 8001a98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <MX_I2C1_Init+0x7c>)
 8001a9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001acc:	f002 fac4 	bl	8004058 <HAL_I2C_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ad6:	f000 f951 	bl	8001d7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ada:	2100      	movs	r1, #0
 8001adc:	4809      	ldr	r0, [pc, #36]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001ade:	f002 fea5 	bl	800482c <HAL_I2CEx_ConfigAnalogFilter>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ae8:	f000 f948 	bl	8001d7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001aec:	2100      	movs	r1, #0
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001af0:	f002 fee7 	bl	80048c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001afa:	f000 f93f 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000016c 	.word	0x2000016c
 8001b08:	40005400 	.word	0x40005400
 8001b0c:	20404768 	.word	0x20404768

08001b10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b0ae      	sub	sp, #184	; 0xb8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2290      	movs	r2, #144	; 0x90
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f00a fb40 	bl	800c1b6 <memset>
  if(i2cHandle->Instance==I2C1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a22      	ldr	r2, [pc, #136]	; (8001bc4 <HAL_I2C_MspInit+0xb4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d13c      	bne.n	8001bba <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fc5a 	bl	8005408 <HAL_RCCEx_PeriphCLKConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b5a:	f000 f90f 	bl	8001d7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <HAL_I2C_MspInit+0xb8>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <HAL_I2C_MspInit+0xb8>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_I2C_MspInit+0xb8>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8001b76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b7e:	2312      	movs	r3, #18
 8001b80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b90:	2304      	movs	r3, #4
 8001b92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480b      	ldr	r0, [pc, #44]	; (8001bcc <HAL_I2C_MspInit+0xbc>)
 8001b9e:	f002 f87b 	bl	8003c98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_I2C_MspInit+0xb8>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <HAL_I2C_MspInit+0xb8>)
 8001ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bac:	6413      	str	r3, [r2, #64]	; 0x40
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_I2C_MspInit+0xb8>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001bba:	bf00      	nop
 8001bbc:	37b8      	adds	r7, #184	; 0xb8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40005400 	.word	0x40005400
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020400 	.word	0x40020400

08001bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd4:	f001 f9cd 	bl	8002f72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd8:	f000 f82a 	bl	8001c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bdc:	f7ff fe18 	bl	8001810 <MX_GPIO_Init>
  MX_DMA_Init();
 8001be0:	f7fe ff5e 	bl	8000aa0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001be4:	f000 f8d0 	bl	8001d88 <MX_SPI1_Init>
  MX_DAC_Init();
 8001be8:	f7fe fee8 	bl	80009bc <MX_DAC_Init>
  MX_I2C1_Init();
 8001bec:	f7ff ff50 	bl	8001a90 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001bf0:	f000 fd62 	bl	80026b8 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001bf4:	f000 fe12 	bl	800281c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, RxBuffer, 1);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4909      	ldr	r1, [pc, #36]	; (8001c20 <main+0x50>)
 8001bfc:	4809      	ldr	r0, [pc, #36]	; (8001c24 <main+0x54>)
 8001bfe:	f005 fe07 	bl	8007810 <HAL_UART_Receive_IT>
  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 8001c02:	2100      	movs	r1, #0
 8001c04:	4808      	ldr	r0, [pc, #32]	; (8001c28 <main+0x58>)
 8001c06:	f001 fb09 	bl	800321c <HAL_DAC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001c0a:	2108      	movs	r1, #8
 8001c0c:	4807      	ldr	r0, [pc, #28]	; (8001c2c <main+0x5c>)
 8001c0e:	f004 fe8b 	bl	8006928 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001c12:	f007 f845 	bl	8008ca0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001c16:	f7fe ff61 	bl	8000adc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001c1a:	f007 f875 	bl	8008d08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <main+0x4e>
 8001c20:	20000108 	.word	0x20000108
 8001c24:	20000728 	.word	0x20000728
 8001c28:	20000110 	.word	0x20000110
 8001c2c:	200006dc 	.word	0x200006dc

08001c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b094      	sub	sp, #80	; 0x50
 8001c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	2234      	movs	r2, #52	; 0x34
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f00a fab9 	bl	800c1b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c54:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <SystemClock_Config+0xd4>)
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	4a2a      	ldr	r2, [pc, #168]	; (8001d04 <SystemClock_Config+0xd4>)
 8001c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c60:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <SystemClock_Config+0xd4>)
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c6c:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <SystemClock_Config+0xd8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <SystemClock_Config+0xd8>)
 8001c72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <SystemClock_Config+0xd8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c84:	2301      	movs	r3, #1
 8001c86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c88:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001c9c:	23d8      	movs	r3, #216	; 0xd8
 8001c9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cac:	f107 031c 	add.w	r3, r7, #28
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f002 fea3 	bl	80049fc <HAL_RCC_OscConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001cbc:	f000 f85e 	bl	8001d7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cc0:	f002 fe4c 	bl	800495c <HAL_PWREx_EnableOverDrive>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001cca:	f000 f857 	bl	8001d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cce:	230f      	movs	r3, #15
 8001cd0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cda:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001ce6:	f107 0308 	add.w	r3, r7, #8
 8001cea:	2107      	movs	r1, #7
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 f933 	bl	8004f58 <HAL_RCC_ClockConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001cf8:	f000 f840 	bl	8001d7c <Error_Handler>
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3750      	adds	r7, #80	; 0x50
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40007000 	.word	0x40007000

08001d0c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart6x) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	portYIELD_FROM_ISR(xTaskResumeFromISR(DispatcherTaskHandle));
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_UART_RxCpltCallback+0x3c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f008 fb41 	bl	800a3a0 <xTaskResumeFromISR>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <HAL_UART_RxCpltCallback+0x28>
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_UART_RxCpltCallback+0x40>)
 8001d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	f3bf 8f4f 	dsb	sy
 8001d30:	f3bf 8f6f 	isb	sy
	HAL_UART_Receive_IT(&huart6, RxBuffer, 1);					// Used for "opening" ST MCU for future interrupts on RX
 8001d34:	2201      	movs	r2, #1
 8001d36:	4906      	ldr	r1, [pc, #24]	; (8001d50 <HAL_UART_RxCpltCallback+0x44>)
 8001d38:	4806      	ldr	r0, [pc, #24]	; (8001d54 <HAL_UART_RxCpltCallback+0x48>)
 8001d3a:	f005 fd69 	bl	8007810 <HAL_UART_Receive_IT>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000128 	.word	0x20000128
 8001d4c:	e000ed04 	.word	0xe000ed04
 8001d50:	20000108 	.word	0x20000108
 8001d54:	20000728 	.word	0x20000728

08001d58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d101      	bne.n	8001d6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d6a:	f001 f90f 	bl	8002f8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40001000 	.word	0x40001000

08001d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d80:	b672      	cpsid	i
}
 8001d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <Error_Handler+0x8>
	...

08001d88 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <MX_SPI1_Init+0x74>)
 8001d8e:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <MX_SPI1_Init+0x78>)
 8001d90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d92:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <MX_SPI1_Init+0x74>)
 8001d94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <MX_SPI1_Init+0x74>)
 8001d9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001da0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <MX_SPI1_Init+0x74>)
 8001da4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001da8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <MX_SPI1_Init+0x74>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <MX_SPI1_Init+0x74>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <MX_SPI1_Init+0x74>)
 8001db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <MX_SPI1_Init+0x74>)
 8001dc0:	2218      	movs	r2, #24
 8001dc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <MX_SPI1_Init+0x74>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <MX_SPI1_Init+0x74>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <MX_SPI1_Init+0x74>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <MX_SPI1_Init+0x74>)
 8001dd8:	2207      	movs	r2, #7
 8001dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ddc:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <MX_SPI1_Init+0x74>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <MX_SPI1_Init+0x74>)
 8001de4:	2208      	movs	r2, #8
 8001de6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001de8:	4804      	ldr	r0, [pc, #16]	; (8001dfc <MX_SPI1_Init+0x74>)
 8001dea:	f003 ff35 	bl	8005c58 <HAL_SPI_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001df4:	f7ff ffc2 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200001c0 	.word	0x200001c0
 8001e00:	40013000 	.word	0x40013000

08001e04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a3c      	ldr	r2, [pc, #240]	; (8001f14 <HAL_SPI_MspInit+0x110>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d171      	bne.n	8001f0a <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e26:	4b3c      	ldr	r3, [pc, #240]	; (8001f18 <HAL_SPI_MspInit+0x114>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	4a3b      	ldr	r2, [pc, #236]	; (8001f18 <HAL_SPI_MspInit+0x114>)
 8001e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e30:	6453      	str	r3, [r2, #68]	; 0x44
 8001e32:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <HAL_SPI_MspInit+0x114>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <HAL_SPI_MspInit+0x114>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a35      	ldr	r2, [pc, #212]	; (8001f18 <HAL_SPI_MspInit+0x114>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b33      	ldr	r3, [pc, #204]	; (8001f18 <HAL_SPI_MspInit+0x114>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e56:	4b30      	ldr	r3, [pc, #192]	; (8001f18 <HAL_SPI_MspInit+0x114>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a2f      	ldr	r2, [pc, #188]	; (8001f18 <HAL_SPI_MspInit+0x114>)
 8001e5c:	f043 0308 	orr.w	r3, r3, #8
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HAL_SPI_MspInit+0x114>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e6e:	2320      	movs	r3, #32
 8001e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e7e:	2305      	movs	r3, #5
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	4824      	ldr	r0, [pc, #144]	; (8001f1c <HAL_SPI_MspInit+0x118>)
 8001e8a:	f001 ff05 	bl	8003c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEDStripes_Pin;
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEDStripes_GPIO_Port, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	481d      	ldr	r0, [pc, #116]	; (8001f20 <HAL_SPI_MspInit+0x11c>)
 8001eaa:	f001 fef5 	bl	8003c98 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_SPI_MspInit+0x120>)
 8001eb0:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <HAL_SPI_MspInit+0x124>)
 8001eb2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <HAL_SPI_MspInit+0x120>)
 8001eb6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001eba:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <HAL_SPI_MspInit+0x120>)
 8001ebe:	2240      	movs	r2, #64	; 0x40
 8001ec0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec2:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <HAL_SPI_MspInit+0x120>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ec8:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <HAL_SPI_MspInit+0x120>)
 8001eca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ece:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <HAL_SPI_MspInit+0x120>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ed6:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <HAL_SPI_MspInit+0x120>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_SPI_MspInit+0x120>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <HAL_SPI_MspInit+0x120>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <HAL_SPI_MspInit+0x120>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001eee:	480d      	ldr	r0, [pc, #52]	; (8001f24 <HAL_SPI_MspInit+0x120>)
 8001ef0:	f001 fac8 	bl	8003484 <HAL_DMA_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8001efa:	f7ff ff3f 	bl	8001d7c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a08      	ldr	r2, [pc, #32]	; (8001f24 <HAL_SPI_MspInit+0x120>)
 8001f02:	655a      	str	r2, [r3, #84]	; 0x54
 8001f04:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <HAL_SPI_MspInit+0x120>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	3728      	adds	r7, #40	; 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40013000 	.word	0x40013000
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020c00 	.word	0x40020c00
 8001f24:	20000224 	.word	0x20000224
 8001f28:	40026458 	.word	0x40026458

08001f2c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af04      	add	r7, sp, #16
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	9302      	str	r3, [sp, #8]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	1dfb      	adds	r3, r7, #7
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2301      	movs	r3, #1
 8001f56:	2200      	movs	r2, #0
 8001f58:	2178      	movs	r1, #120	; 0x78
 8001f5a:	4803      	ldr	r0, [pc, #12]	; (8001f68 <ssd1306_WriteCommand+0x2c>)
 8001f5c:	f002 f90c 	bl	8004178 <HAL_I2C_Mem_Write>
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	2000016c 	.word	0x2000016c

08001f6c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af04      	add	r7, sp, #16
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7e:	9202      	str	r2, [sp, #8]
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2301      	movs	r3, #1
 8001f88:	2240      	movs	r2, #64	; 0x40
 8001f8a:	2178      	movs	r1, #120	; 0x78
 8001f8c:	4803      	ldr	r0, [pc, #12]	; (8001f9c <ssd1306_WriteData+0x30>)
 8001f8e:	f002 f8f3 	bl	8004178 <HAL_I2C_Mem_Write>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	2000016c 	.word	0x2000016c

08001fa0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001fa4:	f7ff ffc2 	bl	8001f2c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001fa8:	2064      	movs	r0, #100	; 0x64
 8001faa:	f001 f80f 	bl	8002fcc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f000 f9ce 	bl	8002350 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001fb4:	2020      	movs	r0, #32
 8001fb6:	f7ff ffc1 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7ff ffbe 	bl	8001f3c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001fc0:	20b0      	movs	r0, #176	; 0xb0
 8001fc2:	f7ff ffbb 	bl	8001f3c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001fc6:	20c8      	movs	r0, #200	; 0xc8
 8001fc8:	f7ff ffb8 	bl	8001f3c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff ffb5 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001fd2:	2010      	movs	r0, #16
 8001fd4:	f7ff ffb2 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001fd8:	2040      	movs	r0, #64	; 0x40
 8001fda:	f7ff ffaf 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001fde:	20ff      	movs	r0, #255	; 0xff
 8001fe0:	f000 f9a2 	bl	8002328 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001fe4:	20a1      	movs	r0, #161	; 0xa1
 8001fe6:	f7ff ffa9 	bl	8001f3c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001fea:	20a6      	movs	r0, #166	; 0xa6
 8001fec:	f7ff ffa6 	bl	8001f3c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001ff0:	20a8      	movs	r0, #168	; 0xa8
 8001ff2:	f7ff ffa3 	bl	8001f3c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001ff6:	203f      	movs	r0, #63	; 0x3f
 8001ff8:	f7ff ffa0 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ffc:	20a4      	movs	r0, #164	; 0xa4
 8001ffe:	f7ff ff9d 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002002:	20d3      	movs	r0, #211	; 0xd3
 8002004:	f7ff ff9a 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002008:	2000      	movs	r0, #0
 800200a:	f7ff ff97 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800200e:	20d5      	movs	r0, #213	; 0xd5
 8002010:	f7ff ff94 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002014:	20f0      	movs	r0, #240	; 0xf0
 8002016:	f7ff ff91 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800201a:	20d9      	movs	r0, #217	; 0xd9
 800201c:	f7ff ff8e 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002020:	2022      	movs	r0, #34	; 0x22
 8002022:	f7ff ff8b 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002026:	20da      	movs	r0, #218	; 0xda
 8002028:	f7ff ff88 	bl	8001f3c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800202c:	2012      	movs	r0, #18
 800202e:	f7ff ff85 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002032:	20db      	movs	r0, #219	; 0xdb
 8002034:	f7ff ff82 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002038:	2020      	movs	r0, #32
 800203a:	f7ff ff7f 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800203e:	208d      	movs	r0, #141	; 0x8d
 8002040:	f7ff ff7c 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002044:	2014      	movs	r0, #20
 8002046:	f7ff ff79 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800204a:	2001      	movs	r0, #1
 800204c:	f000 f980 	bl	8002350 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002050:	2000      	movs	r0, #0
 8002052:	f000 f80f 	bl	8002074 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002056:	f000 f825 	bl	80020a4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <ssd1306_Init+0xd0>)
 800205c:	2200      	movs	r2, #0
 800205e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <ssd1306_Init+0xd0>)
 8002062:	2200      	movs	r2, #0
 8002064:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002066:	4b02      	ldr	r3, [pc, #8]	; (8002070 <ssd1306_Init+0xd0>)
 8002068:	2201      	movs	r2, #1
 800206a:	711a      	strb	r2, [r3, #4]
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000684 	.word	0x20000684

08002074 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <ssd1306_Fill+0x14>
 8002084:	2300      	movs	r3, #0
 8002086:	e000      	b.n	800208a <ssd1306_Fill+0x16>
 8002088:	23ff      	movs	r3, #255	; 0xff
 800208a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800208e:	4619      	mov	r1, r3
 8002090:	4803      	ldr	r0, [pc, #12]	; (80020a0 <ssd1306_Fill+0x2c>)
 8002092:	f00a f890 	bl	800c1b6 <memset>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000284 	.word	0x20000284

080020a4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80020aa:	2300      	movs	r3, #0
 80020ac:	71fb      	strb	r3, [r7, #7]
 80020ae:	e016      	b.n	80020de <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	3b50      	subs	r3, #80	; 0x50
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ff40 	bl	8001f3c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80020bc:	2000      	movs	r0, #0
 80020be:	f7ff ff3d 	bl	8001f3c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80020c2:	2010      	movs	r0, #16
 80020c4:	f7ff ff3a 	bl	8001f3c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	01db      	lsls	r3, r3, #7
 80020cc:	4a08      	ldr	r2, [pc, #32]	; (80020f0 <ssd1306_UpdateScreen+0x4c>)
 80020ce:	4413      	add	r3, r2
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff4a 	bl	8001f6c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	3301      	adds	r3, #1
 80020dc:	71fb      	strb	r3, [r7, #7]
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b07      	cmp	r3, #7
 80020e2:	d9e5      	bls.n	80020b0 <ssd1306_UpdateScreen+0xc>
    }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000284 	.word	0x20000284

080020f4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
 80020fe:	460b      	mov	r3, r1
 8002100:	71bb      	strb	r3, [r7, #6]
 8002102:	4613      	mov	r3, r2
 8002104:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	2b00      	cmp	r3, #0
 800210c:	db3d      	blt.n	800218a <ssd1306_DrawPixel+0x96>
 800210e:	79bb      	ldrb	r3, [r7, #6]
 8002110:	2b3f      	cmp	r3, #63	; 0x3f
 8002112:	d83a      	bhi.n	800218a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002114:	797b      	ldrb	r3, [r7, #5]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d11a      	bne.n	8002150 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800211a:	79fa      	ldrb	r2, [r7, #7]
 800211c:	79bb      	ldrb	r3, [r7, #6]
 800211e:	08db      	lsrs	r3, r3, #3
 8002120:	b2d8      	uxtb	r0, r3
 8002122:	4603      	mov	r3, r0
 8002124:	01db      	lsls	r3, r3, #7
 8002126:	4413      	add	r3, r2
 8002128:	4a1b      	ldr	r2, [pc, #108]	; (8002198 <ssd1306_DrawPixel+0xa4>)
 800212a:	5cd3      	ldrb	r3, [r2, r3]
 800212c:	b25a      	sxtb	r2, r3
 800212e:	79bb      	ldrb	r3, [r7, #6]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	2101      	movs	r1, #1
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	b25b      	sxtb	r3, r3
 800213c:	4313      	orrs	r3, r2
 800213e:	b259      	sxtb	r1, r3
 8002140:	79fa      	ldrb	r2, [r7, #7]
 8002142:	4603      	mov	r3, r0
 8002144:	01db      	lsls	r3, r3, #7
 8002146:	4413      	add	r3, r2
 8002148:	b2c9      	uxtb	r1, r1
 800214a:	4a13      	ldr	r2, [pc, #76]	; (8002198 <ssd1306_DrawPixel+0xa4>)
 800214c:	54d1      	strb	r1, [r2, r3]
 800214e:	e01d      	b.n	800218c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002150:	79fa      	ldrb	r2, [r7, #7]
 8002152:	79bb      	ldrb	r3, [r7, #6]
 8002154:	08db      	lsrs	r3, r3, #3
 8002156:	b2d8      	uxtb	r0, r3
 8002158:	4603      	mov	r3, r0
 800215a:	01db      	lsls	r3, r3, #7
 800215c:	4413      	add	r3, r2
 800215e:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <ssd1306_DrawPixel+0xa4>)
 8002160:	5cd3      	ldrb	r3, [r2, r3]
 8002162:	b25a      	sxtb	r2, r3
 8002164:	79bb      	ldrb	r3, [r7, #6]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	2101      	movs	r1, #1
 800216c:	fa01 f303 	lsl.w	r3, r1, r3
 8002170:	b25b      	sxtb	r3, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	b25b      	sxtb	r3, r3
 8002176:	4013      	ands	r3, r2
 8002178:	b259      	sxtb	r1, r3
 800217a:	79fa      	ldrb	r2, [r7, #7]
 800217c:	4603      	mov	r3, r0
 800217e:	01db      	lsls	r3, r3, #7
 8002180:	4413      	add	r3, r2
 8002182:	b2c9      	uxtb	r1, r1
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <ssd1306_DrawPixel+0xa4>)
 8002186:	54d1      	strb	r1, [r2, r3]
 8002188:	e000      	b.n	800218c <ssd1306_DrawPixel+0x98>
        return;
 800218a:	bf00      	nop
    }
}
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000284 	.word	0x20000284

0800219c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4604      	mov	r4, r0
 80021a4:	1d38      	adds	r0, r7, #4
 80021a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80021aa:	461a      	mov	r2, r3
 80021ac:	4623      	mov	r3, r4
 80021ae:	73fb      	strb	r3, [r7, #15]
 80021b0:	4613      	mov	r3, r2
 80021b2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	2b1f      	cmp	r3, #31
 80021b8:	d902      	bls.n	80021c0 <ssd1306_WriteChar+0x24>
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	2b7e      	cmp	r3, #126	; 0x7e
 80021be:	d901      	bls.n	80021c4 <ssd1306_WriteChar+0x28>
        return 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e06d      	b.n	80022a0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80021c4:	4b38      	ldr	r3, [pc, #224]	; (80022a8 <ssd1306_WriteChar+0x10c>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	793b      	ldrb	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	2b80      	cmp	r3, #128	; 0x80
 80021d0:	dc06      	bgt.n	80021e0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80021d2:	4b35      	ldr	r3, [pc, #212]	; (80022a8 <ssd1306_WriteChar+0x10c>)
 80021d4:	885b      	ldrh	r3, [r3, #2]
 80021d6:	461a      	mov	r2, r3
 80021d8:	797b      	ldrb	r3, [r7, #5]
 80021da:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80021dc:	2b40      	cmp	r3, #64	; 0x40
 80021de:	dd01      	ble.n	80021e4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e05d      	b.n	80022a0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
 80021e8:	e04c      	b.n	8002284 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	3b20      	subs	r3, #32
 80021f0:	7979      	ldrb	r1, [r7, #5]
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4619      	mov	r1, r3
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	440b      	add	r3, r1
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002204:	2300      	movs	r3, #0
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	e034      	b.n	8002274 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d012      	beq.n	8002240 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800221a:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <ssd1306_WriteChar+0x10c>)
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	4413      	add	r3, r2
 8002226:	b2d8      	uxtb	r0, r3
 8002228:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <ssd1306_WriteChar+0x10c>)
 800222a:	885b      	ldrh	r3, [r3, #2]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	4413      	add	r3, r2
 8002234:	b2db      	uxtb	r3, r3
 8002236:	7bba      	ldrb	r2, [r7, #14]
 8002238:	4619      	mov	r1, r3
 800223a:	f7ff ff5b 	bl	80020f4 <ssd1306_DrawPixel>
 800223e:	e016      	b.n	800226e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <ssd1306_WriteChar+0x10c>)
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	4413      	add	r3, r2
 800224c:	b2d8      	uxtb	r0, r3
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <ssd1306_WriteChar+0x10c>)
 8002250:	885b      	ldrh	r3, [r3, #2]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	4413      	add	r3, r2
 800225a:	b2d9      	uxtb	r1, r3
 800225c:	7bbb      	ldrb	r3, [r7, #14]
 800225e:	2b00      	cmp	r3, #0
 8002260:	bf0c      	ite	eq
 8002262:	2301      	moveq	r3, #1
 8002264:	2300      	movne	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	f7ff ff43 	bl	80020f4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	3301      	adds	r3, #1
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	793b      	ldrb	r3, [r7, #4]
 8002276:	461a      	mov	r2, r3
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	4293      	cmp	r3, r2
 800227c:	d3c5      	bcc.n	800220a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3301      	adds	r3, #1
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	797b      	ldrb	r3, [r7, #5]
 8002286:	461a      	mov	r2, r3
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	4293      	cmp	r3, r2
 800228c:	d3ad      	bcc.n	80021ea <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <ssd1306_WriteChar+0x10c>)
 8002290:	881a      	ldrh	r2, [r3, #0]
 8002292:	793b      	ldrb	r3, [r7, #4]
 8002294:	b29b      	uxth	r3, r3
 8002296:	4413      	add	r3, r2
 8002298:	b29a      	uxth	r2, r3
 800229a:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <ssd1306_WriteChar+0x10c>)
 800229c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800229e:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3724      	adds	r7, #36	; 0x24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd90      	pop	{r4, r7, pc}
 80022a8:	20000684 	.word	0x20000684

080022ac <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	1d38      	adds	r0, r7, #4
 80022b6:	e880 0006 	stmia.w	r0, {r1, r2}
 80022ba:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80022bc:	e012      	b.n	80022e4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	7818      	ldrb	r0, [r3, #0]
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	1d3a      	adds	r2, r7, #4
 80022c6:	ca06      	ldmia	r2, {r1, r2}
 80022c8:	f7ff ff68 	bl	800219c <ssd1306_WriteChar>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d002      	beq.n	80022de <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	e008      	b.n	80022f0 <ssd1306_WriteString+0x44>
        }
        str++;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3301      	adds	r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1e8      	bne.n	80022be <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	781b      	ldrb	r3, [r3, #0]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	460a      	mov	r2, r1
 8002302:	71fb      	strb	r3, [r7, #7]
 8002304:	4613      	mov	r3, r2
 8002306:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	b29a      	uxth	r2, r3
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <ssd1306_SetCursor+0x2c>)
 800230e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002310:	79bb      	ldrb	r3, [r7, #6]
 8002312:	b29a      	uxth	r2, r3
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <ssd1306_SetCursor+0x2c>)
 8002316:	805a      	strh	r2, [r3, #2]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	20000684 	.word	0x20000684

08002328 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002332:	2381      	movs	r3, #129	; 0x81
 8002334:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fdff 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fdfb 	bl	8001f3c <ssd1306_WriteCommand>
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002360:	23af      	movs	r3, #175	; 0xaf
 8002362:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002364:	4b08      	ldr	r3, [pc, #32]	; (8002388 <ssd1306_SetDisplayOn+0x38>)
 8002366:	2201      	movs	r2, #1
 8002368:	715a      	strb	r2, [r3, #5]
 800236a:	e004      	b.n	8002376 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800236c:	23ae      	movs	r3, #174	; 0xae
 800236e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <ssd1306_SetDisplayOn+0x38>)
 8002372:	2200      	movs	r2, #0
 8002374:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fddf 	bl	8001f3c <ssd1306_WriteCommand>
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000684 	.word	0x20000684

0800238c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_MspInit+0x4c>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a10      	ldr	r2, [pc, #64]	; (80023d8 <HAL_MspInit+0x4c>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <HAL_MspInit+0x4c>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_MspInit+0x4c>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <HAL_MspInit+0x4c>)
 80023b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <HAL_MspInit+0x4c>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	210f      	movs	r1, #15
 80023c6:	f06f 0001 	mvn.w	r0, #1
 80023ca:	f000 fedb 	bl	8003184 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800

080023dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08e      	sub	sp, #56	; 0x38
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80023ec:	4b33      	ldr	r3, [pc, #204]	; (80024bc <HAL_InitTick+0xe0>)
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	4a32      	ldr	r2, [pc, #200]	; (80024bc <HAL_InitTick+0xe0>)
 80023f2:	f043 0310 	orr.w	r3, r3, #16
 80023f6:	6413      	str	r3, [r2, #64]	; 0x40
 80023f8:	4b30      	ldr	r3, [pc, #192]	; (80024bc <HAL_InitTick+0xe0>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002404:	f107 0210 	add.w	r2, r7, #16
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	4611      	mov	r1, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f002 ffc8 	bl	80053a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d103      	bne.n	8002426 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800241e:	f002 ff99 	bl	8005354 <HAL_RCC_GetPCLK1Freq>
 8002422:	6378      	str	r0, [r7, #52]	; 0x34
 8002424:	e004      	b.n	8002430 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002426:	f002 ff95 	bl	8005354 <HAL_RCC_GetPCLK1Freq>
 800242a:	4603      	mov	r3, r0
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002432:	4a23      	ldr	r2, [pc, #140]	; (80024c0 <HAL_InitTick+0xe4>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	0c9b      	lsrs	r3, r3, #18
 800243a:	3b01      	subs	r3, #1
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800243e:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <HAL_InitTick+0xe8>)
 8002440:	4a21      	ldr	r2, [pc, #132]	; (80024c8 <HAL_InitTick+0xec>)
 8002442:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002444:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <HAL_InitTick+0xe8>)
 8002446:	f240 32e7 	movw	r2, #999	; 0x3e7
 800244a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800244c:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <HAL_InitTick+0xe8>)
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002452:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <HAL_InitTick+0xe8>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_InitTick+0xe8>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_InitTick+0xe8>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002464:	4817      	ldr	r0, [pc, #92]	; (80024c4 <HAL_InitTick+0xe8>)
 8002466:	f004 f92d 	bl	80066c4 <HAL_TIM_Base_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002470:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002474:	2b00      	cmp	r3, #0
 8002476:	d11b      	bne.n	80024b0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002478:	4812      	ldr	r0, [pc, #72]	; (80024c4 <HAL_InitTick+0xe8>)
 800247a:	f004 f985 	bl	8006788 <HAL_TIM_Base_Start_IT>
 800247e:	4603      	mov	r3, r0
 8002480:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002484:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002488:	2b00      	cmp	r3, #0
 800248a:	d111      	bne.n	80024b0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800248c:	2036      	movs	r0, #54	; 0x36
 800248e:	f000 fe95 	bl	80031bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b0f      	cmp	r3, #15
 8002496:	d808      	bhi.n	80024aa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002498:	2200      	movs	r2, #0
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	2036      	movs	r0, #54	; 0x36
 800249e:	f000 fe71 	bl	8003184 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <HAL_InitTick+0xf0>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	e002      	b.n	80024b0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80024b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3738      	adds	r7, #56	; 0x38
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40023800 	.word	0x40023800
 80024c0:	431bde83 	.word	0x431bde83
 80024c4:	2000068c 	.word	0x2000068c
 80024c8:	40001000 	.word	0x40001000
 80024cc:	2000005c 	.word	0x2000005c

080024d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <NMI_Handler+0x4>

080024d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024da:	e7fe      	b.n	80024da <HardFault_Handler+0x4>

080024dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <MemManage_Handler+0x4>

080024e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e6:	e7fe      	b.n	80024e6 <BusFault_Handler+0x4>

080024e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <UsageFault_Handler+0x4>

080024ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <TIM6_DAC_IRQHandler+0x20>)
 8002502:	791b      	ldrb	r3, [r3, #4]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800250a:	4804      	ldr	r0, [pc, #16]	; (800251c <TIM6_DAC_IRQHandler+0x20>)
 800250c:	f000 fed8 	bl	80032c0 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002510:	4803      	ldr	r0, [pc, #12]	; (8002520 <TIM6_DAC_IRQHandler+0x24>)
 8002512:	f004 fb03 	bl	8006b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000110 	.word	0x20000110
 8002520:	2000068c 	.word	0x2000068c

08002524 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <DMA2_Stream3_IRQHandler+0x10>)
 800252a:	f001 f94b 	bl	80037c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000224 	.word	0x20000224

08002538 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <USART6_IRQHandler+0x10>)
 800253e:	f005 f9ab 	bl	8007898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000728 	.word	0x20000728

0800254c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	e00a      	b.n	8002574 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800255e:	f3af 8000 	nop.w
 8002562:	4601      	mov	r1, r0
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	60ba      	str	r2, [r7, #8]
 800256a:	b2ca      	uxtb	r2, r1
 800256c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	3301      	adds	r3, #1
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	dbf0      	blt.n	800255e <_read+0x12>
  }

  return len;
 800257c:	687b      	ldr	r3, [r7, #4]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	e009      	b.n	80025ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	60ba      	str	r2, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	3301      	adds	r3, #1
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	dbf1      	blt.n	8002598 <_write+0x12>
  }
  return len;
 80025b4:	687b      	ldr	r3, [r7, #4]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <_close>:

int _close(int file)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025e6:	605a      	str	r2, [r3, #4]
  return 0;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <_isatty>:

int _isatty(int file)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <_sbrk+0x5c>)
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <_sbrk+0x60>)
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <_sbrk+0x64>)
 8002646:	4a12      	ldr	r2, [pc, #72]	; (8002690 <_sbrk+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	d207      	bcs.n	8002668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002658:	f009 fe52 	bl	800c300 <__errno>
 800265c:	4603      	mov	r3, r0
 800265e:	220c      	movs	r2, #12
 8002660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	e009      	b.n	800267c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <_sbrk+0x64>)
 8002678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20080000 	.word	0x20080000
 8002688:	00000400 	.word	0x00000400
 800268c:	200006d8 	.word	0x200006d8
 8002690:	20005320 	.word	0x20005320

08002694 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <SystemInit+0x20>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269e:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <SystemInit+0x20>)
 80026a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026be:	f107 031c 	add.w	r3, r7, #28
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ca:	463b      	mov	r3, r7
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
 80026d8:	615a      	str	r2, [r3, #20]
 80026da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026dc:	4b21      	ldr	r3, [pc, #132]	; (8002764 <MX_TIM4_Init+0xac>)
 80026de:	4a22      	ldr	r2, [pc, #136]	; (8002768 <MX_TIM4_Init+0xb0>)
 80026e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <MX_TIM4_Init+0xac>)
 80026e4:	223f      	movs	r2, #63	; 0x3f
 80026e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e8:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <MX_TIM4_Init+0xac>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <MX_TIM4_Init+0xac>)
 80026f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f6:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <MX_TIM4_Init+0xac>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <MX_TIM4_Init+0xac>)
 80026fe:	2200      	movs	r2, #0
 8002700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002702:	4818      	ldr	r0, [pc, #96]	; (8002764 <MX_TIM4_Init+0xac>)
 8002704:	f004 f8b8 	bl	8006878 <HAL_TIM_PWM_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800270e:	f7ff fb35 	bl	8001d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002716:	2300      	movs	r3, #0
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800271a:	f107 031c 	add.w	r3, r7, #28
 800271e:	4619      	mov	r1, r3
 8002720:	4810      	ldr	r0, [pc, #64]	; (8002764 <MX_TIM4_Init+0xac>)
 8002722:	f004 ff7b 	bl	800761c <HAL_TIMEx_MasterConfigSynchronization>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800272c:	f7ff fb26 	bl	8001d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002730:	2360      	movs	r3, #96	; 0x60
 8002732:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002738:	2300      	movs	r3, #0
 800273a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002740:	463b      	mov	r3, r7
 8002742:	2208      	movs	r2, #8
 8002744:	4619      	mov	r1, r3
 8002746:	4807      	ldr	r0, [pc, #28]	; (8002764 <MX_TIM4_Init+0xac>)
 8002748:	f004 fb08 	bl	8006d5c <HAL_TIM_PWM_ConfigChannel>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002752:	f7ff fb13 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002756:	4803      	ldr	r0, [pc, #12]	; (8002764 <MX_TIM4_Init+0xac>)
 8002758:	f000 f828 	bl	80027ac <HAL_TIM_MspPostInit>

}
 800275c:	bf00      	nop
 800275e:	3728      	adds	r7, #40	; 0x28
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	200006dc 	.word	0x200006dc
 8002768:	40000800 	.word	0x40000800

0800276c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <HAL_TIM_PWM_MspInit+0x38>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10b      	bne.n	8002796 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <HAL_TIM_PWM_MspInit+0x3c>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40000800 	.word	0x40000800
 80027a8:	40023800 	.word	0x40023800

080027ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 030c 	add.w	r3, r7, #12
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a11      	ldr	r2, [pc, #68]	; (8002810 <HAL_TIM_MspPostInit+0x64>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d11c      	bne.n	8002808 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_TIM_MspPostInit+0x68>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a10      	ldr	r2, [pc, #64]	; (8002814 <HAL_TIM_MspPostInit+0x68>)
 80027d4:	f043 0308 	orr.w	r3, r3, #8
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <HAL_TIM_MspPostInit+0x68>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = StepperMotorStep_Pin;
 80027e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027f8:	2302      	movs	r3, #2
 80027fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(StepperMotorStep_GPIO_Port, &GPIO_InitStruct);
 80027fc:	f107 030c 	add.w	r3, r7, #12
 8002800:	4619      	mov	r1, r3
 8002802:	4805      	ldr	r0, [pc, #20]	; (8002818 <HAL_TIM_MspPostInit+0x6c>)
 8002804:	f001 fa48 	bl	8003c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002808:	bf00      	nop
 800280a:	3720      	adds	r7, #32
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40000800 	.word	0x40000800
 8002814:	40023800 	.word	0x40023800
 8002818:	40020c00 	.word	0x40020c00

0800281c <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002820:	4b14      	ldr	r3, [pc, #80]	; (8002874 <MX_USART6_UART_Init+0x58>)
 8002822:	4a15      	ldr	r2, [pc, #84]	; (8002878 <MX_USART6_UART_Init+0x5c>)
 8002824:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <MX_USART6_UART_Init+0x58>)
 8002828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800282c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <MX_USART6_UART_Init+0x58>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002834:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <MX_USART6_UART_Init+0x58>)
 8002836:	2200      	movs	r2, #0
 8002838:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <MX_USART6_UART_Init+0x58>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <MX_USART6_UART_Init+0x58>)
 8002842:	220c      	movs	r2, #12
 8002844:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <MX_USART6_UART_Init+0x58>)
 8002848:	2200      	movs	r2, #0
 800284a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <MX_USART6_UART_Init+0x58>)
 800284e:	2200      	movs	r2, #0
 8002850:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <MX_USART6_UART_Init+0x58>)
 8002854:	2200      	movs	r2, #0
 8002856:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <MX_USART6_UART_Init+0x58>)
 800285a:	2200      	movs	r2, #0
 800285c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800285e:	4805      	ldr	r0, [pc, #20]	; (8002874 <MX_USART6_UART_Init+0x58>)
 8002860:	f004 ff88 	bl	8007774 <HAL_UART_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800286a:	f7ff fa87 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000728 	.word	0x20000728
 8002878:	40011400 	.word	0x40011400

0800287c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b0ae      	sub	sp, #184	; 0xb8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	2290      	movs	r2, #144	; 0x90
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f009 fc8a 	bl	800c1b6 <memset>
  if(uartHandle->Instance==USART6)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a26      	ldr	r2, [pc, #152]	; (8002940 <HAL_UART_MspInit+0xc4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d144      	bne.n	8002936 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80028ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028b0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80028b2:	2300      	movs	r3, #0
 80028b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	4618      	mov	r0, r3
 80028bc:	f002 fda4 	bl	8005408 <HAL_RCCEx_PeriphCLKConfig>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80028c6:	f7ff fa59 	bl	8001d7c <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80028ca:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <HAL_UART_MspInit+0xc8>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <HAL_UART_MspInit+0xc8>)
 80028d0:	f043 0320 	orr.w	r3, r3, #32
 80028d4:	6453      	str	r3, [r2, #68]	; 0x44
 80028d6:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_UART_MspInit+0xc8>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f003 0320 	and.w	r3, r3, #32
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <HAL_UART_MspInit+0xc8>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a17      	ldr	r2, [pc, #92]	; (8002944 <HAL_UART_MspInit+0xc8>)
 80028e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b15      	ldr	r3, [pc, #84]	; (8002944 <HAL_UART_MspInit+0xc8>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = RPiPicoW_TX_Pin|RPiPicoW_RX_Pin;
 80028fa:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80028fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290e:	2303      	movs	r3, #3
 8002910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002914:	2308      	movs	r3, #8
 8002916:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800291a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800291e:	4619      	mov	r1, r3
 8002920:	4809      	ldr	r0, [pc, #36]	; (8002948 <HAL_UART_MspInit+0xcc>)
 8002922:	f001 f9b9 	bl	8003c98 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2105      	movs	r1, #5
 800292a:	2047      	movs	r0, #71	; 0x47
 800292c:	f000 fc2a 	bl	8003184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002930:	2047      	movs	r0, #71	; 0x47
 8002932:	f000 fc43 	bl	80031bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002936:	bf00      	nop
 8002938:	37b8      	adds	r7, #184	; 0xb8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40011400 	.word	0x40011400
 8002944:	40023800 	.word	0x40023800
 8002948:	40021800 	.word	0x40021800

0800294c <ws2812b_init>:
static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);
static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);

// ======== Public Functions =======================================================================

int ws2812b_init(ws2812b_handle_t *ws) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  // Point ws2812b_error_msg to error buffer unless error message buffer is disabled.
#ifndef WS2812B_DISABLE_ERROR_MSG
  ws2812b_error_msg = error_msg_buf;
 8002954:	4b7a      	ldr	r3, [pc, #488]	; (8002b40 <ws2812b_init+0x1f4>)
 8002956:	4a7b      	ldr	r2, [pc, #492]	; (8002b44 <ws2812b_init+0x1f8>)
 8002958:	601a      	str	r2, [r3, #0]
  error_msg_buf[0] = '\0';
 800295a:	4b7a      	ldr	r3, [pc, #488]	; (8002b44 <ws2812b_init+0x1f8>)
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
#else  /* WS2812B_DISABLE_ERROR_MSG */
  ws2812b_error_msg = 0;
#endif /* WS2812B_DISABLE_ERROR_MSG */

  // Assert packing is valid
  WS2812B_INIT_ASSERT((ws->config.packing == WS2812B_PACKING_DOUBLE) ||
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d009      	beq.n	800297c <ws2812b_init+0x30>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d005      	beq.n	800297c <ws2812b_init+0x30>
 8002970:	4875      	ldr	r0, [pc, #468]	; (8002b48 <ws2812b_init+0x1fc>)
 8002972:	f000 f9f5 	bl	8002d60 <set_init_error_msg>
 8002976:	f04f 33ff 	mov.w	r3, #4294967295
 800297a:	e17f      	b.n	8002c7c <ws2812b_init+0x330>
                          (ws->config.packing == WS2812B_PACKING_SINGLE),
                      "ws2812b: config.packing is invalid!");

  // Assert pulse_len_1 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_1),
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	789b      	ldrb	r3, [r3, #2]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d01d      	beq.n	80029c0 <ws2812b_init+0x74>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	789b      	ldrb	r3, [r3, #2]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d019      	beq.n	80029c0 <ws2812b_init+0x74>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	789b      	ldrb	r3, [r3, #2]
 8002990:	2b07      	cmp	r3, #7
 8002992:	d015      	beq.n	80029c0 <ws2812b_init+0x74>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	789b      	ldrb	r3, [r3, #2]
 8002998:	2b0f      	cmp	r3, #15
 800299a:	d011      	beq.n	80029c0 <ws2812b_init+0x74>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	789b      	ldrb	r3, [r3, #2]
 80029a0:	2b3f      	cmp	r3, #63	; 0x3f
 80029a2:	d00d      	beq.n	80029c0 <ws2812b_init+0x74>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	789b      	ldrb	r3, [r3, #2]
 80029a8:	2b1f      	cmp	r3, #31
 80029aa:	d009      	beq.n	80029c0 <ws2812b_init+0x74>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	789b      	ldrb	r3, [r3, #2]
 80029b0:	2b7f      	cmp	r3, #127	; 0x7f
 80029b2:	d005      	beq.n	80029c0 <ws2812b_init+0x74>
 80029b4:	4865      	ldr	r0, [pc, #404]	; (8002b4c <ws2812b_init+0x200>)
 80029b6:	f000 f9d3 	bl	8002d60 <set_init_error_msg>
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295
 80029be:	e15d      	b.n	8002c7c <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_1 is invalid!");

  // Asert pulse_len_0 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_0),
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	785b      	ldrb	r3, [r3, #1]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d01d      	beq.n	8002a04 <ws2812b_init+0xb8>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	785b      	ldrb	r3, [r3, #1]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d019      	beq.n	8002a04 <ws2812b_init+0xb8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	785b      	ldrb	r3, [r3, #1]
 80029d4:	2b07      	cmp	r3, #7
 80029d6:	d015      	beq.n	8002a04 <ws2812b_init+0xb8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	785b      	ldrb	r3, [r3, #1]
 80029dc:	2b0f      	cmp	r3, #15
 80029de:	d011      	beq.n	8002a04 <ws2812b_init+0xb8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	785b      	ldrb	r3, [r3, #1]
 80029e4:	2b3f      	cmp	r3, #63	; 0x3f
 80029e6:	d00d      	beq.n	8002a04 <ws2812b_init+0xb8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	785b      	ldrb	r3, [r3, #1]
 80029ec:	2b1f      	cmp	r3, #31
 80029ee:	d009      	beq.n	8002a04 <ws2812b_init+0xb8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	785b      	ldrb	r3, [r3, #1]
 80029f4:	2b7f      	cmp	r3, #127	; 0x7f
 80029f6:	d005      	beq.n	8002a04 <ws2812b_init+0xb8>
 80029f8:	4855      	ldr	r0, [pc, #340]	; (8002b50 <ws2812b_init+0x204>)
 80029fa:	f000 f9b1 	bl	8002d60 <set_init_error_msg>
 80029fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002a02:	e13b      	b.n	8002c7c <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_0 is invalid!");

  // Assert first_bit_0 is valid
  WS2812B_INIT_ASSERT((ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_DISABLED) ||
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	78db      	ldrb	r3, [r3, #3]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d009      	beq.n	8002a20 <ws2812b_init+0xd4>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	78db      	ldrb	r3, [r3, #3]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d005      	beq.n	8002a20 <ws2812b_init+0xd4>
 8002a14:	484f      	ldr	r0, [pc, #316]	; (8002b54 <ws2812b_init+0x208>)
 8002a16:	f000 f9a3 	bl	8002d60 <set_init_error_msg>
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1e:	e12d      	b.n	8002c7c <ws2812b_init+0x330>
                          (ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_ENABLED),
                      "ws2812b: config.first_bit_0 is invalid!");

  // Assert spi_bit_order is valid
  WS2812B_INIT_ASSERT((ws->config.spi_bit_order == WS2812B_LSB_FIRST) ||
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	791b      	ldrb	r3, [r3, #4]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d009      	beq.n	8002a3c <ws2812b_init+0xf0>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	791b      	ldrb	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <ws2812b_init+0xf0>
 8002a30:	4849      	ldr	r0, [pc, #292]	; (8002b58 <ws2812b_init+0x20c>)
 8002a32:	f000 f995 	bl	8002d60 <set_init_error_msg>
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3a:	e11f      	b.n	8002c7c <ws2812b_init+0x330>
                          (ws->config.spi_bit_order == WS2812B_MSB_FIRST),
                      "ws2812b: config.spi_bit_order is invalid!");

  // Assert that the '1' pulse is longer than the '0' pulse:
  WS2812B_INIT_ASSERT(ws->config.pulse_len_1 > ws->config.pulse_len_0,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	789a      	ldrb	r2, [r3, #2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	785b      	ldrb	r3, [r3, #1]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d805      	bhi.n	8002a54 <ws2812b_init+0x108>
 8002a48:	4844      	ldr	r0, [pc, #272]	; (8002b5c <ws2812b_init+0x210>)
 8002a4a:	f000 f989 	bl	8002d60 <set_init_error_msg>
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	e113      	b.n	8002c7c <ws2812b_init+0x330>
                      "ws2812b: One-pulse must be longer than zero-pulse!");

  // Assert that pulse is not too long if in double packing:
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d109      	bne.n	8002a70 <ws2812b_init+0x124>
    WS2812B_INIT_ASSERT(ws->config.pulse_len_1 < WS2812B_PULSE_LEN_4b,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	789b      	ldrb	r3, [r3, #2]
 8002a60:	2b0e      	cmp	r3, #14
 8002a62:	d905      	bls.n	8002a70 <ws2812b_init+0x124>
 8002a64:	483e      	ldr	r0, [pc, #248]	; (8002b60 <ws2812b_init+0x214>)
 8002a66:	f000 f97b 	bl	8002d60 <set_init_error_msg>
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6e:	e105      	b.n	8002c7c <ws2812b_init+0x330>
                        "ws2812b: Pulse is too long for double packing!");
  }

  // Apply 0 prefix to pulse if selected
  ws->state.pulse_0 = ws->config.pulse_len_0 << ws->config.first_bit_0;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	785b      	ldrb	r3, [r3, #1]
 8002a74:	461a      	mov	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	78db      	ldrb	r3, [r3, #3]
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	765a      	strb	r2, [r3, #25]
  ws->state.pulse_1 = ws->config.pulse_len_1 << ws->config.first_bit_0;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	789b      	ldrb	r3, [r3, #2]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	78db      	ldrb	r3, [r3, #3]
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	761a      	strb	r2, [r3, #24]

  // Pulse needs to be reverse for MSB-first transmission:
  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	791b      	ldrb	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f040 80e9 	bne.w	8002c74 <ws2812b_init+0x328>
    if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d15c      	bne.n	8002b64 <ws2812b_init+0x218>
      ws->state.pulse_0 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_0);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	7e5b      	ldrb	r3, [r3, #25]
 8002aae:	10db      	asrs	r3, r3, #3
 8002ab0:	b25b      	sxtb	r3, r3
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	b25a      	sxtb	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7e5b      	ldrb	r3, [r3, #25]
 8002abc:	105b      	asrs	r3, r3, #1
 8002abe:	b25b      	sxtb	r3, r3
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	b25b      	sxtb	r3, r3
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	b25a      	sxtb	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	7e5b      	ldrb	r3, [r3, #25]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	b25b      	sxtb	r3, r3
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	b25b      	sxtb	r3, r3
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	b25a      	sxtb	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7e5b      	ldrb	r3, [r3, #25]
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	b25b      	sxtb	r3, r3
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	b25b      	sxtb	r3, r3
 8002aea:	4313      	orrs	r3, r2
 8002aec:	b25b      	sxtb	r3, r3
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	7e1b      	ldrb	r3, [r3, #24]
 8002af8:	10db      	asrs	r3, r3, #3
 8002afa:	b25b      	sxtb	r3, r3
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	b25a      	sxtb	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	7e1b      	ldrb	r3, [r3, #24]
 8002b06:	105b      	asrs	r3, r3, #1
 8002b08:	b25b      	sxtb	r3, r3
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	b25b      	sxtb	r3, r3
 8002b10:	4313      	orrs	r3, r2
 8002b12:	b25a      	sxtb	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	7e1b      	ldrb	r3, [r3, #24]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	b25b      	sxtb	r3, r3
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	b25b      	sxtb	r3, r3
 8002b22:	4313      	orrs	r3, r2
 8002b24:	b25a      	sxtb	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7e1b      	ldrb	r3, [r3, #24]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	b25b      	sxtb	r3, r3
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	b25b      	sxtb	r3, r3
 8002b34:	4313      	orrs	r3, r2
 8002b36:	b25b      	sxtb	r3, r3
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	761a      	strb	r2, [r3, #24]
 8002b3e:	e099      	b.n	8002c74 <ws2812b_init+0x328>
 8002b40:	200007b0 	.word	0x200007b0
 8002b44:	200007b4 	.word	0x200007b4
 8002b48:	0800d010 	.word	0x0800d010
 8002b4c:	0800d034 	.word	0x0800d034
 8002b50:	0800d05c 	.word	0x0800d05c
 8002b54:	0800d084 	.word	0x0800d084
 8002b58:	0800d0ac 	.word	0x0800d0ac
 8002b5c:	0800d0d8 	.word	0x0800d0d8
 8002b60:	0800d10c 	.word	0x0800d10c
    } else {
      ws->state.pulse_0 = WS2812B_BYTE_REVERSE(ws->state.pulse_0);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7e5b      	ldrb	r3, [r3, #25]
 8002b68:	09db      	lsrs	r3, r3, #7
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	b25a      	sxtb	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7e5b      	ldrb	r3, [r3, #25]
 8002b72:	115b      	asrs	r3, r3, #5
 8002b74:	b25b      	sxtb	r3, r3
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	b25b      	sxtb	r3, r3
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	b25a      	sxtb	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7e5b      	ldrb	r3, [r3, #25]
 8002b84:	10db      	asrs	r3, r3, #3
 8002b86:	b25b      	sxtb	r3, r3
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	b25b      	sxtb	r3, r3
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	b25a      	sxtb	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7e5b      	ldrb	r3, [r3, #25]
 8002b96:	105b      	asrs	r3, r3, #1
 8002b98:	b25b      	sxtb	r3, r3
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	b25b      	sxtb	r3, r3
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	b25a      	sxtb	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	7e5b      	ldrb	r3, [r3, #25]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	b25b      	sxtb	r3, r3
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	b25a      	sxtb	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	7e5b      	ldrb	r3, [r3, #25]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	b25b      	sxtb	r3, r3
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	b25b      	sxtb	r3, r3
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	b25a      	sxtb	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	7e5b      	ldrb	r3, [r3, #25]
 8002bcc:	015b      	lsls	r3, r3, #5
 8002bce:	b25b      	sxtb	r3, r3
 8002bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd4:	b25b      	sxtb	r3, r3
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	b25a      	sxtb	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	7e5b      	ldrb	r3, [r3, #25]
 8002bde:	01db      	lsls	r3, r3, #7
 8002be0:	b25b      	sxtb	r3, r3
 8002be2:	4313      	orrs	r3, r2
 8002be4:	b25b      	sxtb	r3, r3
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_BYTE_REVERSE(ws->state.pulse_1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7e1b      	ldrb	r3, [r3, #24]
 8002bf0:	09db      	lsrs	r3, r3, #7
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	b25a      	sxtb	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	7e1b      	ldrb	r3, [r3, #24]
 8002bfa:	115b      	asrs	r3, r3, #5
 8002bfc:	b25b      	sxtb	r3, r3
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	4313      	orrs	r3, r2
 8002c06:	b25a      	sxtb	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7e1b      	ldrb	r3, [r3, #24]
 8002c0c:	10db      	asrs	r3, r3, #3
 8002c0e:	b25b      	sxtb	r3, r3
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	b25b      	sxtb	r3, r3
 8002c16:	4313      	orrs	r3, r2
 8002c18:	b25a      	sxtb	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	7e1b      	ldrb	r3, [r3, #24]
 8002c1e:	105b      	asrs	r3, r3, #1
 8002c20:	b25b      	sxtb	r3, r3
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	b25b      	sxtb	r3, r3
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	b25a      	sxtb	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7e1b      	ldrb	r3, [r3, #24]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	b25b      	sxtb	r3, r3
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	b25b      	sxtb	r3, r3
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	b25a      	sxtb	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7e1b      	ldrb	r3, [r3, #24]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	b25b      	sxtb	r3, r3
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	b25b      	sxtb	r3, r3
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	b25a      	sxtb	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	7e1b      	ldrb	r3, [r3, #24]
 8002c54:	015b      	lsls	r3, r3, #5
 8002c56:	b25b      	sxtb	r3, r3
 8002c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5c:	b25b      	sxtb	r3, r3
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	b25a      	sxtb	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	7e1b      	ldrb	r3, [r3, #24]
 8002c66:	01db      	lsls	r3, r3, #7
 8002c68:	b25b      	sxtb	r3, r3
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	b25b      	sxtb	r3, r3
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	761a      	strb	r2, [r3, #24]
    }
  }

  ws->state.iteration_index = 0;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	61da      	str	r2, [r3, #28]

  return 0;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <ws2812b_required_buffer_len>:

uint32_t ws2812b_required_buffer_len(ws2812b_handle_t *ws) {
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  return WS2812B_REQUIRED_BUFFER_LEN(ws->led_count, ws->config.packing, ws->config.prefix_len,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <ws2812b_required_buffer_len+0x18>
 8002c98:	2318      	movs	r3, #24
 8002c9a:	e000      	b.n	8002c9e <ws2812b_required_buffer_len+0x1a>
 8002c9c:	230c      	movs	r3, #12
 8002c9e:	fb03 f202 	mul.w	r2, r3, r2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	441a      	add	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4413      	add	r3, r2
                                     ws->config.suffix_len);
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <ws2812b_fill_buffer>:

void ws2812b_fill_buffer(ws2812b_handle_t *ws, uint8_t *buffer) {
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	6039      	str	r1, [r7, #0]
  ws2812b_led_t *led = ws->leds;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	617b      	str	r3, [r7, #20]

  // Add 0x00 prefix
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	e008      	b.n	8002ce2 <ws2812b_fill_buffer+0x28>
    *buffer = 0x00;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
    buffer++;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d3f1      	bcc.n	8002cd0 <ws2812b_fill_buffer+0x16>
  }

  // Fill buffer
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	e01a      	b.n	8002d28 <ws2812b_fill_buffer+0x6e>
    add_byte(ws, led->green, &buffer);
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	785b      	ldrb	r3, [r3, #1]
 8002cf6:	463a      	mov	r2, r7
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f85a 	bl	8002db4 <add_byte>
    add_byte(ws, led->red, &buffer);
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	463a      	mov	r2, r7
 8002d06:	4619      	mov	r1, r3
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f853 	bl	8002db4 <add_byte>
    add_byte(ws, led->blue, &buffer);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	789b      	ldrb	r3, [r3, #2]
 8002d12:	463a      	mov	r2, r7
 8002d14:	4619      	mov	r1, r3
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f84c 	bl	8002db4 <add_byte>
    led++;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	3303      	adds	r3, #3
 8002d20:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3301      	adds	r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d3df      	bcc.n	8002cf2 <ws2812b_fill_buffer+0x38>
  }

  // Add 0x00 suffix
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8002d32:	2300      	movs	r3, #0
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	e008      	b.n	8002d4a <ws2812b_fill_buffer+0x90>
    *buffer = 0x00;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
    buffer++;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	3301      	adds	r3, #1
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d3f1      	bcc.n	8002d38 <ws2812b_fill_buffer+0x7e>
  }
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <set_init_error_msg>:
  return 0x00;
}

// ======== Private Functions ======================================================================

static void set_init_error_msg(const char *error_msg) {
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
#ifndef WS2812B_DISABLE_ERROR_MSG
  // If error mesages are enabled, copy over the error message
  int i = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]

  // Copy content
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 8002d6c:	e00b      	b.n	8002d86 <set_init_error_msg+0x26>
    error_msg_buf[i] = error_msg[i];
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4413      	add	r3, r2
 8002d74:	7819      	ldrb	r1, [r3, #0]
 8002d76:	4a0e      	ldr	r2, [pc, #56]	; (8002db0 <set_init_error_msg+0x50>)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	460a      	mov	r2, r1
 8002d7e:	701a      	strb	r2, [r3, #0]
    i++;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3301      	adds	r3, #1
 8002d84:	60fb      	str	r3, [r7, #12]
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b3a      	cmp	r3, #58	; 0x3a
 8002d8a:	dc05      	bgt.n	8002d98 <set_init_error_msg+0x38>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ea      	bne.n	8002d6e <set_init_error_msg+0xe>
  }

  // Terminate string
  error_msg_buf[i] = '\0';
 8002d98:	4a05      	ldr	r2, [pc, #20]	; (8002db0 <set_init_error_msg+0x50>)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
#else
  // Otherwise avoid the unused-args warning
  (void)(error_msg);
#endif /* WS2812B_DISABLE_ERROR_MSG */
}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	200007b4 	.word	0x200007b4

08002db4 <add_byte>:

static void add_byte(ws2812b_handle_t *ws, uint8_t value, uint8_t **buffer) {
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	72fb      	strb	r3, [r7, #11]
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d118      	bne.n	8002dfc <add_byte+0x48>

    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	e011      	b.n	8002df4 <add_byte+0x40>
      **buffer = construct_double_pulse(ws, b, value);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681c      	ldr	r4, [r3, #0]
 8002dd4:	7afb      	ldrb	r3, [r7, #11]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	6979      	ldr	r1, [r7, #20]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f844 	bl	8002e68 <construct_double_pulse>
 8002de0:	4603      	mov	r3, r0
 8002de2:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	3302      	adds	r3, #2
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2b07      	cmp	r3, #7
 8002df8:	d9ea      	bls.n	8002dd0 <add_byte+0x1c>
    for (uint_fast8_t b = 0; b < 8; b++) {
      **buffer = construct_single_pulse(ws, b, value);
      ++*buffer;
    }
  }
}
 8002dfa:	e017      	b.n	8002e2c <add_byte+0x78>
    for (uint_fast8_t b = 0; b < 8; b++) {
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	e011      	b.n	8002e26 <add_byte+0x72>
      **buffer = construct_single_pulse(ws, b, value);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681c      	ldr	r4, [r3, #0]
 8002e06:	7afb      	ldrb	r3, [r7, #11]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	6939      	ldr	r1, [r7, #16]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f811 	bl	8002e34 <construct_single_pulse>
 8002e12:	4603      	mov	r3, r0
 8002e14:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b++) {
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	3301      	adds	r3, #1
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b07      	cmp	r3, #7
 8002e2a:	d9ea      	bls.n	8002e02 <add_byte+0x4e>
}
 8002e2c:	bf00      	nop
 8002e2e:	371c      	adds	r7, #28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd90      	pop	{r4, r7, pc}

08002e34 <construct_single_pulse>:

static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	71fb      	strb	r3, [r7, #7]
  return (value & ((0x80U) >> b) ? ws->state.pulse_1 : ws->state.pulse_0);
 8002e42:	79fa      	ldrb	r2, [r7, #7]
 8002e44:	2180      	movs	r1, #128	; 0x80
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	fa21 f303 	lsr.w	r3, r1, r3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <construct_single_pulse+0x24>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	7e1b      	ldrb	r3, [r3, #24]
 8002e56:	e001      	b.n	8002e5c <construct_single_pulse+0x28>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	7e5b      	ldrb	r3, [r3, #25]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <construct_double_pulse>:

static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	4613      	mov	r3, r2
 8002e74:	71fb      	strb	r3, [r7, #7]
  uint8_t result;
  uint8_t pulse_1 = ws->state.pulse_1;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	7e1b      	ldrb	r3, [r3, #24]
 8002e7a:	75bb      	strb	r3, [r7, #22]
  uint8_t pulse_0 = ws->state.pulse_0;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	7e5b      	ldrb	r3, [r3, #25]
 8002e80:	757b      	strb	r3, [r7, #21]

  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	791b      	ldrb	r3, [r3, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d121      	bne.n	8002ece <construct_double_pulse+0x66>
    // MSB is first
    result = value & ((0x80U) >> (b + 1)) ? pulse_1 : pulse_0;
 8002e8a:	79fa      	ldrb	r2, [r7, #7]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	fa21 f303 	lsr.w	r3, r1, r3
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <construct_double_pulse+0x38>
 8002e9c:	7dbb      	ldrb	r3, [r7, #22]
 8002e9e:	e000      	b.n	8002ea2 <construct_double_pulse+0x3a>
 8002ea0:	7d7b      	ldrb	r3, [r7, #21]
 8002ea2:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8002ea4:	79fa      	ldrb	r2, [r7, #7]
 8002ea6:	2180      	movs	r1, #128	; 0x80
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <construct_double_pulse+0x54>
 8002eb4:	7dbb      	ldrb	r3, [r7, #22]
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	b25b      	sxtb	r3, r3
 8002eba:	e002      	b.n	8002ec2 <construct_double_pulse+0x5a>
 8002ebc:	7d7b      	ldrb	r3, [r7, #21]
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	b25b      	sxtb	r3, r3
 8002ec2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	75fb      	strb	r3, [r7, #23]
 8002ecc:	e020      	b.n	8002f10 <construct_double_pulse+0xa8>
  } else {
    // LSB is first
    result = value & ((0x80U) >> (b)) ? pulse_1 : pulse_0;
 8002ece:	79fa      	ldrb	r2, [r7, #7]
 8002ed0:	2180      	movs	r1, #128	; 0x80
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	fa21 f303 	lsr.w	r3, r1, r3
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <construct_double_pulse+0x7a>
 8002ede:	7dbb      	ldrb	r3, [r7, #22]
 8002ee0:	e000      	b.n	8002ee4 <construct_double_pulse+0x7c>
 8002ee2:	7d7b      	ldrb	r3, [r7, #21]
 8002ee4:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b + 1)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8002ee6:	79fa      	ldrb	r2, [r7, #7]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	3301      	adds	r3, #1
 8002eec:	2180      	movs	r1, #128	; 0x80
 8002eee:	fa21 f303 	lsr.w	r3, r1, r3
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <construct_double_pulse+0x98>
 8002ef8:	7dbb      	ldrb	r3, [r7, #22]
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	b25b      	sxtb	r3, r3
 8002efe:	e002      	b.n	8002f06 <construct_double_pulse+0x9e>
 8002f00:	7d7b      	ldrb	r3, [r7, #21]
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	b25b      	sxtb	r3, r3
 8002f06:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	b25b      	sxtb	r3, r3
 8002f0e:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8002f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f24:	480d      	ldr	r0, [pc, #52]	; (8002f5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f26:	490e      	ldr	r1, [pc, #56]	; (8002f60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f28:	4a0e      	ldr	r2, [pc, #56]	; (8002f64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f2c:	e002      	b.n	8002f34 <LoopCopyDataInit>

08002f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f32:	3304      	adds	r3, #4

08002f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f38:	d3f9      	bcc.n	8002f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f3a:	4a0b      	ldr	r2, [pc, #44]	; (8002f68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f3c:	4c0b      	ldr	r4, [pc, #44]	; (8002f6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f40:	e001      	b.n	8002f46 <LoopFillZerobss>

08002f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f44:	3204      	adds	r2, #4

08002f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f48:	d3fb      	bcc.n	8002f42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f4a:	f7ff fba3 	bl	8002694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f4e:	f009 f9dd 	bl	800c30c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f52:	f7fe fe3d 	bl	8001bd0 <main>
  bx  lr    
 8002f56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f58:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f60:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8002f64:	0800e8f4 	.word	0x0800e8f4
  ldr r2, =_sbss
 8002f68:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8002f6c:	20005320 	.word	0x20005320

08002f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f70:	e7fe      	b.n	8002f70 <ADC_IRQHandler>

08002f72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f76:	2003      	movs	r0, #3
 8002f78:	f000 f8f9 	bl	800316e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f7c:	2005      	movs	r0, #5
 8002f7e:	f7ff fa2d 	bl	80023dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f82:	f7ff fa03 	bl	800238c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_IncTick+0x20>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_IncTick+0x24>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <HAL_IncTick+0x24>)
 8002f9e:	6013      	str	r3, [r2, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000060 	.word	0x20000060
 8002fb0:	200007f0 	.word	0x200007f0

08002fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <HAL_GetTick+0x14>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	200007f0 	.word	0x200007f0

08002fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fd4:	f7ff ffee 	bl	8002fb4 <HAL_GetTick>
 8002fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d005      	beq.n	8002ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <HAL_Delay+0x44>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ff2:	bf00      	nop
 8002ff4:	f7ff ffde 	bl	8002fb4 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	429a      	cmp	r2, r3
 8003002:	d8f7      	bhi.n	8002ff4 <HAL_Delay+0x28>
  {
  }
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000060 	.word	0x20000060

08003014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <__NVIC_SetPriorityGrouping+0x40>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003030:	4013      	ands	r3, r2
 8003032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	4313      	orrs	r3, r2
 8003040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003042:	4a04      	ldr	r2, [pc, #16]	; (8003054 <__NVIC_SetPriorityGrouping+0x40>)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	60d3      	str	r3, [r2, #12]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00
 8003058:	05fa0000 	.word	0x05fa0000

0800305c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003060:	4b04      	ldr	r3, [pc, #16]	; (8003074 <__NVIC_GetPriorityGrouping+0x18>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	0a1b      	lsrs	r3, r3, #8
 8003066:	f003 0307 	and.w	r3, r3, #7
}
 800306a:	4618      	mov	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	2b00      	cmp	r3, #0
 8003088:	db0b      	blt.n	80030a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	f003 021f 	and.w	r2, r3, #31
 8003090:	4907      	ldr	r1, [pc, #28]	; (80030b0 <__NVIC_EnableIRQ+0x38>)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	2001      	movs	r0, #1
 800309a:	fa00 f202 	lsl.w	r2, r0, r2
 800309e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000e100 	.word	0xe000e100

080030b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	6039      	str	r1, [r7, #0]
 80030be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	db0a      	blt.n	80030de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	490c      	ldr	r1, [pc, #48]	; (8003100 <__NVIC_SetPriority+0x4c>)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	0112      	lsls	r2, r2, #4
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	440b      	add	r3, r1
 80030d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030dc:	e00a      	b.n	80030f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4908      	ldr	r1, [pc, #32]	; (8003104 <__NVIC_SetPriority+0x50>)
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	3b04      	subs	r3, #4
 80030ec:	0112      	lsls	r2, r2, #4
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	440b      	add	r3, r1
 80030f2:	761a      	strb	r2, [r3, #24]
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000e100 	.word	0xe000e100
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	; 0x24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f1c3 0307 	rsb	r3, r3, #7
 8003122:	2b04      	cmp	r3, #4
 8003124:	bf28      	it	cs
 8003126:	2304      	movcs	r3, #4
 8003128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3304      	adds	r3, #4
 800312e:	2b06      	cmp	r3, #6
 8003130:	d902      	bls.n	8003138 <NVIC_EncodePriority+0x30>
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3b03      	subs	r3, #3
 8003136:	e000      	b.n	800313a <NVIC_EncodePriority+0x32>
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	f04f 32ff 	mov.w	r2, #4294967295
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43da      	mvns	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	401a      	ands	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003150:	f04f 31ff 	mov.w	r1, #4294967295
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa01 f303 	lsl.w	r3, r1, r3
 800315a:	43d9      	mvns	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	4313      	orrs	r3, r2
         );
}
 8003162:	4618      	mov	r0, r3
 8003164:	3724      	adds	r7, #36	; 0x24
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff ff4c 	bl	8003014 <__NVIC_SetPriorityGrouping>
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003196:	f7ff ff61 	bl	800305c <__NVIC_GetPriorityGrouping>
 800319a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	6978      	ldr	r0, [r7, #20]
 80031a2:	f7ff ffb1 	bl	8003108 <NVIC_EncodePriority>
 80031a6:	4602      	mov	r2, r0
 80031a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff ff80 	bl	80030b4 <__NVIC_SetPriority>
}
 80031b4:	bf00      	nop
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff ff54 	bl	8003078 <__NVIC_EnableIRQ>
}
 80031d0:	bf00      	nop
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e014      	b.n	8003214 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	791b      	ldrb	r3, [r3, #4]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fd fc08 	bl	8000a10 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	795b      	ldrb	r3, [r3, #5]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_DAC_Start+0x16>
 800322e:	2302      	movs	r3, #2
 8003230:	e040      	b.n	80032b4 <HAL_DAC_Start+0x98>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	2201      	movs	r2, #1
 800324c:	409a      	lsls	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10f      	bne.n	800327c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003266:	2b3c      	cmp	r3, #60	; 0x3c
 8003268:	d11d      	bne.n	80032a6 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0201 	orr.w	r2, r2, #1
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	e014      	b.n	80032a6 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	213c      	movs	r1, #60	; 0x3c
 800328e:	fa01 f303 	lsl.w	r3, r1, r3
 8003292:	429a      	cmp	r2, r3
 8003294:	d107      	bne.n	80032a6 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0202 	orr.w	r2, r2, #2
 80032a4:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d6:	d120      	bne.n	800331a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e6:	d118      	bne.n	800331a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2204      	movs	r2, #4
 80032ec:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f043 0201 	orr.w	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003302:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003312:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f852 	bl	80033be <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003328:	d120      	bne.n	800336c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003338:	d118      	bne.n	800336c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2204      	movs	r2, #4
 800333e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f043 0202 	orr.w	r2, r3, #2
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003354:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003364:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f882 	bl	8003470 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d105      	bne.n	800339e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	3308      	adds	r3, #8
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	e004      	b.n	80033a8 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4413      	add	r3, r2
 80033a4:	3314      	adds	r3, #20
 80033a6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	461a      	mov	r2, r3
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b087      	sub	sp, #28
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	795b      	ldrb	r3, [r3, #5]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_DAC_ConfigChannel+0x18>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e03c      	b.n	8003464 <HAL_DAC_ConfigChannel+0x92>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2202      	movs	r2, #2
 80033f4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4013      	ands	r3, r2
 8003412:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6819      	ldr	r1, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	22c0      	movs	r2, #192	; 0xc0
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43da      	mvns	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	400a      	ands	r2, r1
 8003454:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003490:	f7ff fd90 	bl	8002fb4 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e099      	b.n	80035d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034c0:	e00f      	b.n	80034e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034c2:	f7ff fd77 	bl	8002fb4 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b05      	cmp	r3, #5
 80034ce:	d908      	bls.n	80034e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2203      	movs	r2, #3
 80034da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e078      	b.n	80035d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e8      	bne.n	80034c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4b38      	ldr	r3, [pc, #224]	; (80035dc <HAL_DMA_Init+0x158>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800350e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800351a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003526:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	2b04      	cmp	r3, #4
 800353a:	d107      	bne.n	800354c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	4313      	orrs	r3, r2
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f023 0307 	bic.w	r3, r3, #7
 8003562:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	2b04      	cmp	r3, #4
 8003574:	d117      	bne.n	80035a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00e      	beq.n	80035a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fb09 	bl	8003ba0 <DMA_CheckFifoParam>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2240      	movs	r2, #64	; 0x40
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035a2:	2301      	movs	r3, #1
 80035a4:	e016      	b.n	80035d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fac0 	bl	8003b34 <DMA_CalcBaseAndBitshift>
 80035b4:	4603      	mov	r3, r0
 80035b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	223f      	movs	r2, #63	; 0x3f
 80035be:	409a      	lsls	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	e010803f 	.word	0xe010803f

080035e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_DMA_Start_IT+0x26>
 8003602:	2302      	movs	r3, #2
 8003604:	e048      	b.n	8003698 <HAL_DMA_Start_IT+0xb8>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d137      	bne.n	800368a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2202      	movs	r2, #2
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fa52 	bl	8003ad8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	223f      	movs	r2, #63	; 0x3f
 800363a:	409a      	lsls	r2, r3
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0216 	orr.w	r2, r2, #22
 800364e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800365e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0208 	orr.w	r2, r2, #8
 8003676:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	e005      	b.n	8003696 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003692:	2302      	movs	r3, #2
 8003694:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003696:	7dfb      	ldrb	r3, [r7, #23]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036ae:	f7ff fc81 	bl	8002fb4 <HAL_GetTick>
 80036b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d008      	beq.n	80036d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2280      	movs	r2, #128	; 0x80
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e052      	b.n	8003778 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0216 	bic.w	r2, r2, #22
 80036e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <HAL_DMA_Abort+0x62>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0208 	bic.w	r2, r2, #8
 8003710:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003722:	e013      	b.n	800374c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003724:	f7ff fc46 	bl	8002fb4 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b05      	cmp	r3, #5
 8003730:	d90c      	bls.n	800374c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2203      	movs	r2, #3
 800373c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e015      	b.n	8003778 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e4      	bne.n	8003724 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375e:	223f      	movs	r2, #63	; 0x3f
 8003760:	409a      	lsls	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d004      	beq.n	800379e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e00c      	b.n	80037b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2205      	movs	r2, #5
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80037d0:	4b8e      	ldr	r3, [pc, #568]	; (8003a0c <HAL_DMA_IRQHandler+0x248>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a8e      	ldr	r2, [pc, #568]	; (8003a10 <HAL_DMA_IRQHandler+0x24c>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	0a9b      	lsrs	r3, r3, #10
 80037dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ee:	2208      	movs	r2, #8
 80037f0:	409a      	lsls	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d01a      	beq.n	8003830 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d013      	beq.n	8003830 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0204 	bic.w	r2, r2, #4
 8003816:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381c:	2208      	movs	r2, #8
 800381e:	409a      	lsls	r2, r3
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003828:	f043 0201 	orr.w	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003834:	2201      	movs	r2, #1
 8003836:	409a      	lsls	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d012      	beq.n	8003866 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003852:	2201      	movs	r2, #1
 8003854:	409a      	lsls	r2, r3
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385e:	f043 0202 	orr.w	r2, r3, #2
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386a:	2204      	movs	r2, #4
 800386c:	409a      	lsls	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d012      	beq.n	800389c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00b      	beq.n	800389c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	2204      	movs	r2, #4
 800388a:	409a      	lsls	r2, r3
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003894:	f043 0204 	orr.w	r2, r3, #4
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	2210      	movs	r2, #16
 80038a2:	409a      	lsls	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d043      	beq.n	8003934 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d03c      	beq.n	8003934 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038be:	2210      	movs	r2, #16
 80038c0:	409a      	lsls	r2, r3
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d018      	beq.n	8003906 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d108      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d024      	beq.n	8003934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	4798      	blx	r3
 80038f2:	e01f      	b.n	8003934 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01b      	beq.n	8003934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
 8003904:	e016      	b.n	8003934 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d107      	bne.n	8003924 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0208 	bic.w	r2, r2, #8
 8003922:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003938:	2220      	movs	r2, #32
 800393a:	409a      	lsls	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 808f 	beq.w	8003a64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 8087 	beq.w	8003a64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395a:	2220      	movs	r2, #32
 800395c:	409a      	lsls	r2, r3
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b05      	cmp	r3, #5
 800396c:	d136      	bne.n	80039dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0216 	bic.w	r2, r2, #22
 800397c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800398c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d103      	bne.n	800399e <HAL_DMA_IRQHandler+0x1da>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0208 	bic.w	r2, r2, #8
 80039ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	223f      	movs	r2, #63	; 0x3f
 80039b4:	409a      	lsls	r2, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d07e      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	4798      	blx	r3
        }
        return;
 80039da:	e079      	b.n	8003ad0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d01d      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10d      	bne.n	8003a14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d031      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
 8003a08:	e02c      	b.n	8003a64 <HAL_DMA_IRQHandler+0x2a0>
 8003a0a:	bf00      	nop
 8003a0c:	20000058 	.word	0x20000058
 8003a10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d023      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
 8003a24:	e01e      	b.n	8003a64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10f      	bne.n	8003a54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0210 	bic.w	r2, r2, #16
 8003a42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d032      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d022      	beq.n	8003abe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2205      	movs	r2, #5
 8003a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	3301      	adds	r3, #1
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d307      	bcc.n	8003aac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f2      	bne.n	8003a90 <HAL_DMA_IRQHandler+0x2cc>
 8003aaa:	e000      	b.n	8003aae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003aac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	4798      	blx	r3
 8003ace:	e000      	b.n	8003ad2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ad0:	bf00      	nop
    }
  }
}
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003af4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b40      	cmp	r3, #64	; 0x40
 8003b04:	d108      	bne.n	8003b18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b16:	e007      	b.n	8003b28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	60da      	str	r2, [r3, #12]
}
 8003b28:	bf00      	nop
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	3b10      	subs	r3, #16
 8003b44:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <DMA_CalcBaseAndBitshift+0x60>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b4e:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <DMA_CalcBaseAndBitshift+0x64>)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d908      	bls.n	8003b74 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <DMA_CalcBaseAndBitshift+0x68>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	1d1a      	adds	r2, r3, #4
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	659a      	str	r2, [r3, #88]	; 0x58
 8003b72:	e006      	b.n	8003b82 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <DMA_CalcBaseAndBitshift+0x68>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	aaaaaaab 	.word	0xaaaaaaab
 8003b98:	0800e8a8 	.word	0x0800e8a8
 8003b9c:	fffffc00 	.word	0xfffffc00

08003ba0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d11f      	bne.n	8003bfa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d856      	bhi.n	8003c6e <DMA_CheckFifoParam+0xce>
 8003bc0:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <DMA_CheckFifoParam+0x28>)
 8003bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc6:	bf00      	nop
 8003bc8:	08003bd9 	.word	0x08003bd9
 8003bcc:	08003beb 	.word	0x08003beb
 8003bd0:	08003bd9 	.word	0x08003bd9
 8003bd4:	08003c6f 	.word	0x08003c6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d046      	beq.n	8003c72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be8:	e043      	b.n	8003c72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bf2:	d140      	bne.n	8003c76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf8:	e03d      	b.n	8003c76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c02:	d121      	bne.n	8003c48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d837      	bhi.n	8003c7a <DMA_CheckFifoParam+0xda>
 8003c0a:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <DMA_CheckFifoParam+0x70>)
 8003c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c10:	08003c21 	.word	0x08003c21
 8003c14:	08003c27 	.word	0x08003c27
 8003c18:	08003c21 	.word	0x08003c21
 8003c1c:	08003c39 	.word	0x08003c39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
      break;
 8003c24:	e030      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d025      	beq.n	8003c7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c36:	e022      	b.n	8003c7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c40:	d11f      	bne.n	8003c82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c46:	e01c      	b.n	8003c82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d903      	bls.n	8003c56 <DMA_CheckFifoParam+0xb6>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d003      	beq.n	8003c5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c54:	e018      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
      break;
 8003c5a:	e015      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00e      	beq.n	8003c86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c6c:	e00b      	b.n	8003c86 <DMA_CheckFifoParam+0xe6>
      break;
 8003c6e:	bf00      	nop
 8003c70:	e00a      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>
      break;
 8003c72:	bf00      	nop
 8003c74:	e008      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>
      break;
 8003c76:	bf00      	nop
 8003c78:	e006      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>
      break;
 8003c7a:	bf00      	nop
 8003c7c:	e004      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e002      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c82:	bf00      	nop
 8003c84:	e000      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>
      break;
 8003c86:	bf00      	nop
    }
  } 
  
  return status; 
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop

08003c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b089      	sub	sp, #36	; 0x24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	e175      	b.n	8003fa4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003cb8:	2201      	movs	r2, #1
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	f040 8164 	bne.w	8003f9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d005      	beq.n	8003cee <HAL_GPIO_Init+0x56>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d130      	bne.n	8003d50 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d24:	2201      	movs	r2, #1
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 0201 	and.w	r2, r3, #1
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d017      	beq.n	8003d8c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	2203      	movs	r2, #3
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d123      	bne.n	8003de0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	08da      	lsrs	r2, r3, #3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3208      	adds	r2, #8
 8003da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	220f      	movs	r2, #15
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	08da      	lsrs	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3208      	adds	r2, #8
 8003dda:	69b9      	ldr	r1, [r7, #24]
 8003ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	2203      	movs	r2, #3
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 0203 	and.w	r2, r3, #3
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80be 	beq.w	8003f9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e22:	4b66      	ldr	r3, [pc, #408]	; (8003fbc <HAL_GPIO_Init+0x324>)
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	4a65      	ldr	r2, [pc, #404]	; (8003fbc <HAL_GPIO_Init+0x324>)
 8003e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e2e:	4b63      	ldr	r3, [pc, #396]	; (8003fbc <HAL_GPIO_Init+0x324>)
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e3a:	4a61      	ldr	r2, [pc, #388]	; (8003fc0 <HAL_GPIO_Init+0x328>)
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	3302      	adds	r3, #2
 8003e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	220f      	movs	r2, #15
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43db      	mvns	r3, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a58      	ldr	r2, [pc, #352]	; (8003fc4 <HAL_GPIO_Init+0x32c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d037      	beq.n	8003ed6 <HAL_GPIO_Init+0x23e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a57      	ldr	r2, [pc, #348]	; (8003fc8 <HAL_GPIO_Init+0x330>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d031      	beq.n	8003ed2 <HAL_GPIO_Init+0x23a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a56      	ldr	r2, [pc, #344]	; (8003fcc <HAL_GPIO_Init+0x334>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d02b      	beq.n	8003ece <HAL_GPIO_Init+0x236>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a55      	ldr	r2, [pc, #340]	; (8003fd0 <HAL_GPIO_Init+0x338>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d025      	beq.n	8003eca <HAL_GPIO_Init+0x232>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a54      	ldr	r2, [pc, #336]	; (8003fd4 <HAL_GPIO_Init+0x33c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01f      	beq.n	8003ec6 <HAL_GPIO_Init+0x22e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a53      	ldr	r2, [pc, #332]	; (8003fd8 <HAL_GPIO_Init+0x340>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d019      	beq.n	8003ec2 <HAL_GPIO_Init+0x22a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a52      	ldr	r2, [pc, #328]	; (8003fdc <HAL_GPIO_Init+0x344>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <HAL_GPIO_Init+0x226>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a51      	ldr	r2, [pc, #324]	; (8003fe0 <HAL_GPIO_Init+0x348>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00d      	beq.n	8003eba <HAL_GPIO_Init+0x222>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a50      	ldr	r2, [pc, #320]	; (8003fe4 <HAL_GPIO_Init+0x34c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d007      	beq.n	8003eb6 <HAL_GPIO_Init+0x21e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a4f      	ldr	r2, [pc, #316]	; (8003fe8 <HAL_GPIO_Init+0x350>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d101      	bne.n	8003eb2 <HAL_GPIO_Init+0x21a>
 8003eae:	2309      	movs	r3, #9
 8003eb0:	e012      	b.n	8003ed8 <HAL_GPIO_Init+0x240>
 8003eb2:	230a      	movs	r3, #10
 8003eb4:	e010      	b.n	8003ed8 <HAL_GPIO_Init+0x240>
 8003eb6:	2308      	movs	r3, #8
 8003eb8:	e00e      	b.n	8003ed8 <HAL_GPIO_Init+0x240>
 8003eba:	2307      	movs	r3, #7
 8003ebc:	e00c      	b.n	8003ed8 <HAL_GPIO_Init+0x240>
 8003ebe:	2306      	movs	r3, #6
 8003ec0:	e00a      	b.n	8003ed8 <HAL_GPIO_Init+0x240>
 8003ec2:	2305      	movs	r3, #5
 8003ec4:	e008      	b.n	8003ed8 <HAL_GPIO_Init+0x240>
 8003ec6:	2304      	movs	r3, #4
 8003ec8:	e006      	b.n	8003ed8 <HAL_GPIO_Init+0x240>
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e004      	b.n	8003ed8 <HAL_GPIO_Init+0x240>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e002      	b.n	8003ed8 <HAL_GPIO_Init+0x240>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_GPIO_Init+0x240>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	f002 0203 	and.w	r2, r2, #3
 8003ede:	0092      	lsls	r2, r2, #2
 8003ee0:	4093      	lsls	r3, r2
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ee8:	4935      	ldr	r1, [pc, #212]	; (8003fc0 <HAL_GPIO_Init+0x328>)
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	089b      	lsrs	r3, r3, #2
 8003eee:	3302      	adds	r3, #2
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ef6:	4b3d      	ldr	r3, [pc, #244]	; (8003fec <HAL_GPIO_Init+0x354>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	43db      	mvns	r3, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4013      	ands	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f1a:	4a34      	ldr	r2, [pc, #208]	; (8003fec <HAL_GPIO_Init+0x354>)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f20:	4b32      	ldr	r3, [pc, #200]	; (8003fec <HAL_GPIO_Init+0x354>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f44:	4a29      	ldr	r2, [pc, #164]	; (8003fec <HAL_GPIO_Init+0x354>)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f4a:	4b28      	ldr	r3, [pc, #160]	; (8003fec <HAL_GPIO_Init+0x354>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	43db      	mvns	r3, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f6e:	4a1f      	ldr	r2, [pc, #124]	; (8003fec <HAL_GPIO_Init+0x354>)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f74:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <HAL_GPIO_Init+0x354>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f98:	4a14      	ldr	r2, [pc, #80]	; (8003fec <HAL_GPIO_Init+0x354>)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b0f      	cmp	r3, #15
 8003fa8:	f67f ae86 	bls.w	8003cb8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	3724      	adds	r7, #36	; 0x24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	40013800 	.word	0x40013800
 8003fc4:	40020000 	.word	0x40020000
 8003fc8:	40020400 	.word	0x40020400
 8003fcc:	40020800 	.word	0x40020800
 8003fd0:	40020c00 	.word	0x40020c00
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40021400 	.word	0x40021400
 8003fdc:	40021800 	.word	0x40021800
 8003fe0:	40021c00 	.word	0x40021c00
 8003fe4:	40022000 	.word	0x40022000
 8003fe8:	40022400 	.word	0x40022400
 8003fec:	40013c00 	.word	0x40013c00

08003ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	807b      	strh	r3, [r7, #2]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004000:	787b      	ldrb	r3, [r7, #1]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004006:	887a      	ldrh	r2, [r7, #2]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800400c:	e003      	b.n	8004016 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800400e:	887b      	ldrh	r3, [r7, #2]
 8004010:	041a      	lsls	r2, r3, #16
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	619a      	str	r2, [r3, #24]
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004022:	b480      	push	{r7}
 8004024:	b085      	sub	sp, #20
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	460b      	mov	r3, r1
 800402c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004034:	887a      	ldrh	r2, [r7, #2]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4013      	ands	r3, r2
 800403a:	041a      	lsls	r2, r3, #16
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	43d9      	mvns	r1, r3
 8004040:	887b      	ldrh	r3, [r7, #2]
 8004042:	400b      	ands	r3, r1
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	619a      	str	r2, [r3, #24]
}
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
	...

08004058 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e07f      	b.n	800416a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fd fd46 	bl	8001b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2224      	movs	r2, #36	; 0x24
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0201 	bic.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d107      	bne.n	80040d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040ce:	609a      	str	r2, [r3, #8]
 80040d0:	e006      	b.n	80040e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d104      	bne.n	80040f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_I2C_Init+0x11c>)
 80040fe:	430b      	orrs	r3, r1
 8004100:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004110:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69d9      	ldr	r1, [r3, #28]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1a      	ldr	r2, [r3, #32]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	02008000 	.word	0x02008000

08004178 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af02      	add	r7, sp, #8
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	4608      	mov	r0, r1
 8004182:	4611      	mov	r1, r2
 8004184:	461a      	mov	r2, r3
 8004186:	4603      	mov	r3, r0
 8004188:	817b      	strh	r3, [r7, #10]
 800418a:	460b      	mov	r3, r1
 800418c:	813b      	strh	r3, [r7, #8]
 800418e:	4613      	mov	r3, r2
 8004190:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b20      	cmp	r3, #32
 800419c:	f040 80f9 	bne.w	8004392 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_I2C_Mem_Write+0x34>
 80041a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0ed      	b.n	8004394 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_I2C_Mem_Write+0x4e>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e0e6      	b.n	8004394 <HAL_I2C_Mem_Write+0x21c>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041ce:	f7fe fef1 	bl	8002fb4 <HAL_GetTick>
 80041d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	2319      	movs	r3, #25
 80041da:	2201      	movs	r2, #1
 80041dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f955 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0d1      	b.n	8004394 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2221      	movs	r2, #33	; 0x21
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2240      	movs	r2, #64	; 0x40
 80041fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a3a      	ldr	r2, [r7, #32]
 800420a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004210:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004218:	88f8      	ldrh	r0, [r7, #6]
 800421a:	893a      	ldrh	r2, [r7, #8]
 800421c:	8979      	ldrh	r1, [r7, #10]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	4603      	mov	r3, r0
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f8b9 	bl	80043a0 <I2C_RequestMemoryWrite>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0a9      	b.n	8004394 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2bff      	cmp	r3, #255	; 0xff
 8004248:	d90e      	bls.n	8004268 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	22ff      	movs	r2, #255	; 0xff
 800424e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004254:	b2da      	uxtb	r2, r3
 8004256:	8979      	ldrh	r1, [r7, #10]
 8004258:	2300      	movs	r3, #0
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fab1 	bl	80047c8 <I2C_TransferConfig>
 8004266:	e00f      	b.n	8004288 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004276:	b2da      	uxtb	r2, r3
 8004278:	8979      	ldrh	r1, [r7, #10]
 800427a:	2300      	movs	r3, #0
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 faa0 	bl	80047c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f93f 	bl	8004510 <I2C_WaitOnTXISFlagUntilTimeout>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e07b      	b.n	8004394 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	781a      	ldrb	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d034      	beq.n	8004340 <HAL_I2C_Mem_Write+0x1c8>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d130      	bne.n	8004340 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	2200      	movs	r2, #0
 80042e6:	2180      	movs	r1, #128	; 0x80
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f8d1 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e04d      	b.n	8004394 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2bff      	cmp	r3, #255	; 0xff
 8004300:	d90e      	bls.n	8004320 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	22ff      	movs	r2, #255	; 0xff
 8004306:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430c:	b2da      	uxtb	r2, r3
 800430e:	8979      	ldrh	r1, [r7, #10]
 8004310:	2300      	movs	r3, #0
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 fa55 	bl	80047c8 <I2C_TransferConfig>
 800431e:	e00f      	b.n	8004340 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432e:	b2da      	uxtb	r2, r3
 8004330:	8979      	ldrh	r1, [r7, #10]
 8004332:	2300      	movs	r3, #0
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fa44 	bl	80047c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d19e      	bne.n	8004288 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f91e 	bl	8004590 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e01a      	b.n	8004394 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2220      	movs	r2, #32
 8004364:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6859      	ldr	r1, [r3, #4]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <HAL_I2C_Mem_Write+0x224>)
 8004372:	400b      	ands	r3, r1
 8004374:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	e000      	b.n	8004394 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004392:	2302      	movs	r3, #2
  }
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	fe00e800 	.word	0xfe00e800

080043a0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	4608      	mov	r0, r1
 80043aa:	4611      	mov	r1, r2
 80043ac:	461a      	mov	r2, r3
 80043ae:	4603      	mov	r3, r0
 80043b0:	817b      	strh	r3, [r7, #10]
 80043b2:	460b      	mov	r3, r1
 80043b4:	813b      	strh	r3, [r7, #8]
 80043b6:	4613      	mov	r3, r2
 80043b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043ba:	88fb      	ldrh	r3, [r7, #6]
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	8979      	ldrh	r1, [r7, #10]
 80043c0:	4b20      	ldr	r3, [pc, #128]	; (8004444 <I2C_RequestMemoryWrite+0xa4>)
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f9fd 	bl	80047c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	69b9      	ldr	r1, [r7, #24]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f89c 	bl	8004510 <I2C_WaitOnTXISFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e02c      	b.n	800443c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d105      	bne.n	80043f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043e8:	893b      	ldrh	r3, [r7, #8]
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	629a      	str	r2, [r3, #40]	; 0x28
 80043f2:	e015      	b.n	8004420 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043f4:	893b      	ldrh	r3, [r7, #8]
 80043f6:	0a1b      	lsrs	r3, r3, #8
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	69b9      	ldr	r1, [r7, #24]
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f882 	bl	8004510 <I2C_WaitOnTXISFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e012      	b.n	800443c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004416:	893b      	ldrh	r3, [r7, #8]
 8004418:	b2da      	uxtb	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2200      	movs	r2, #0
 8004428:	2180      	movs	r1, #128	; 0x80
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f830 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	80002000 	.word	0x80002000

08004448 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b02      	cmp	r3, #2
 800445c:	d103      	bne.n	8004466 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b01      	cmp	r3, #1
 8004472:	d007      	beq.n	8004484 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	619a      	str	r2, [r3, #24]
  }
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044a0:	e022      	b.n	80044e8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d01e      	beq.n	80044e8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044aa:	f7fe fd83 	bl	8002fb4 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d302      	bcc.n	80044c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d113      	bne.n	80044e8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c4:	f043 0220 	orr.w	r2, r3, #32
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e00f      	b.n	8004508 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4013      	ands	r3, r2
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	429a      	cmp	r2, r3
 8004504:	d0cd      	beq.n	80044a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800451c:	e02c      	b.n	8004578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f870 	bl	8004608 <I2C_IsErrorOccurred>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e02a      	b.n	8004588 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d01e      	beq.n	8004578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7fe fd3b 	bl	8002fb4 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d113      	bne.n	8004578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004554:	f043 0220 	orr.w	r2, r3, #32
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e007      	b.n	8004588 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b02      	cmp	r3, #2
 8004584:	d1cb      	bne.n	800451e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800459c:	e028      	b.n	80045f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 f830 	bl	8004608 <I2C_IsErrorOccurred>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e026      	b.n	8004600 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b2:	f7fe fcff 	bl	8002fb4 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d302      	bcc.n	80045c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d113      	bne.n	80045f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045cc:	f043 0220 	orr.w	r2, r3, #32
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e007      	b.n	8004600 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d1cf      	bne.n	800459e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	; 0x28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	2b00      	cmp	r3, #0
 8004632:	d068      	beq.n	8004706 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2210      	movs	r2, #16
 800463a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800463c:	e049      	b.n	80046d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d045      	beq.n	80046d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004646:	f7fe fcb5 	bl	8002fb4 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <I2C_IsErrorOccurred+0x54>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d13a      	bne.n	80046d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004666:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800466e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800467a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800467e:	d121      	bne.n	80046c4 <I2C_IsErrorOccurred+0xbc>
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004686:	d01d      	beq.n	80046c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	2b20      	cmp	r3, #32
 800468c:	d01a      	beq.n	80046c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800469c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800469e:	f7fe fc89 	bl	8002fb4 <HAL_GetTick>
 80046a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046a4:	e00e      	b.n	80046c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046a6:	f7fe fc85 	bl	8002fb4 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b19      	cmp	r3, #25
 80046b2:	d907      	bls.n	80046c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	f043 0320 	orr.w	r3, r3, #32
 80046ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80046c2:	e006      	b.n	80046d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d1e9      	bne.n	80046a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d003      	beq.n	80046e8 <I2C_IsErrorOccurred+0xe0>
 80046e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0aa      	beq.n	800463e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2220      	movs	r2, #32
 80046f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	f043 0304 	orr.w	r3, r3, #4
 80046fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00b      	beq.n	8004730 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004728:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00b      	beq.n	8004752 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	f043 0308 	orr.w	r3, r3, #8
 8004740:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800474a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00b      	beq.n	8004774 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	f043 0302 	orr.w	r3, r3, #2
 8004762:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800476c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01c      	beq.n	80047b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7ff fe63 	bl	8004448 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6859      	ldr	r1, [r3, #4]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <I2C_IsErrorOccurred+0x1bc>)
 800478e:	400b      	ands	r3, r1
 8004790:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	431a      	orrs	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80047b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3728      	adds	r7, #40	; 0x28
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	fe00e800 	.word	0xfe00e800

080047c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	817b      	strh	r3, [r7, #10]
 80047d6:	4613      	mov	r3, r2
 80047d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047da:	897b      	ldrh	r3, [r7, #10]
 80047dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047e0:	7a7b      	ldrb	r3, [r7, #9]
 80047e2:	041b      	lsls	r3, r3, #16
 80047e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	0d5b      	lsrs	r3, r3, #21
 8004802:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004806:	4b08      	ldr	r3, [pc, #32]	; (8004828 <I2C_TransferConfig+0x60>)
 8004808:	430b      	orrs	r3, r1
 800480a:	43db      	mvns	r3, r3
 800480c:	ea02 0103 	and.w	r1, r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	03ff63ff 	.word	0x03ff63ff

0800482c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b20      	cmp	r3, #32
 8004840:	d138      	bne.n	80048b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800484c:	2302      	movs	r3, #2
 800484e:	e032      	b.n	80048b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2224      	movs	r2, #36	; 0x24
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800487e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6819      	ldr	r1, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	e000      	b.n	80048b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048b4:	2302      	movs	r3, #2
  }
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d139      	bne.n	800494c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e033      	b.n	800494e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2224      	movs	r2, #36	; 0x24
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0201 	bic.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004914:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	e000      	b.n	800494e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800494c:	2302      	movs	r3, #2
  }
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004962:	2300      	movs	r3, #0
 8004964:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004966:	4b23      	ldr	r3, [pc, #140]	; (80049f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	4a22      	ldr	r2, [pc, #136]	; (80049f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800496c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004970:	6413      	str	r3, [r2, #64]	; 0x40
 8004972:	4b20      	ldr	r3, [pc, #128]	; (80049f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800497e:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1d      	ldr	r2, [pc, #116]	; (80049f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004988:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800498a:	f7fe fb13 	bl	8002fb4 <HAL_GetTick>
 800498e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004990:	e009      	b.n	80049a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004992:	f7fe fb0f 	bl	8002fb4 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049a0:	d901      	bls.n	80049a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e022      	b.n	80049ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049a6:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b2:	d1ee      	bne.n	8004992 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80049b4:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a0f      	ldr	r2, [pc, #60]	; (80049f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049c0:	f7fe faf8 	bl	8002fb4 <HAL_GetTick>
 80049c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049c6:	e009      	b.n	80049dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049c8:	f7fe faf4 	bl	8002fb4 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049d6:	d901      	bls.n	80049dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e007      	b.n	80049ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049dc:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049e8:	d1ee      	bne.n	80049c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40023800 	.word	0x40023800
 80049f8:	40007000 	.word	0x40007000

080049fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004a04:	2300      	movs	r3, #0
 8004a06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e29b      	b.n	8004f4a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8087 	beq.w	8004b2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a20:	4b96      	ldr	r3, [pc, #600]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 030c 	and.w	r3, r3, #12
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d00c      	beq.n	8004a46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a2c:	4b93      	ldr	r3, [pc, #588]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d112      	bne.n	8004a5e <HAL_RCC_OscConfig+0x62>
 8004a38:	4b90      	ldr	r3, [pc, #576]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a44:	d10b      	bne.n	8004a5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a46:	4b8d      	ldr	r3, [pc, #564]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d06c      	beq.n	8004b2c <HAL_RCC_OscConfig+0x130>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d168      	bne.n	8004b2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e275      	b.n	8004f4a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a66:	d106      	bne.n	8004a76 <HAL_RCC_OscConfig+0x7a>
 8004a68:	4b84      	ldr	r3, [pc, #528]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a83      	ldr	r2, [pc, #524]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	e02e      	b.n	8004ad4 <HAL_RCC_OscConfig+0xd8>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10c      	bne.n	8004a98 <HAL_RCC_OscConfig+0x9c>
 8004a7e:	4b7f      	ldr	r3, [pc, #508]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a7e      	ldr	r2, [pc, #504]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	4b7c      	ldr	r3, [pc, #496]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a7b      	ldr	r2, [pc, #492]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004a90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e01d      	b.n	8004ad4 <HAL_RCC_OscConfig+0xd8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCC_OscConfig+0xc0>
 8004aa2:	4b76      	ldr	r3, [pc, #472]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a75      	ldr	r2, [pc, #468]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	4b73      	ldr	r3, [pc, #460]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a72      	ldr	r2, [pc, #456]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCC_OscConfig+0xd8>
 8004abc:	4b6f      	ldr	r3, [pc, #444]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a6e      	ldr	r2, [pc, #440]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	4b6c      	ldr	r3, [pc, #432]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a6b      	ldr	r2, [pc, #428]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d013      	beq.n	8004b04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fe fa6a 	bl	8002fb4 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae4:	f7fe fa66 	bl	8002fb4 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b64      	cmp	r3, #100	; 0x64
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e229      	b.n	8004f4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af6:	4b61      	ldr	r3, [pc, #388]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0xe8>
 8004b02:	e014      	b.n	8004b2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b04:	f7fe fa56 	bl	8002fb4 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b0c:	f7fe fa52 	bl	8002fb4 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b64      	cmp	r3, #100	; 0x64
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e215      	b.n	8004f4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1e:	4b57      	ldr	r3, [pc, #348]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x110>
 8004b2a:	e000      	b.n	8004b2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d069      	beq.n	8004c0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b3a:	4b50      	ldr	r3, [pc, #320]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b46:	4b4d      	ldr	r3, [pc, #308]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d11c      	bne.n	8004b8c <HAL_RCC_OscConfig+0x190>
 8004b52:	4b4a      	ldr	r3, [pc, #296]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d116      	bne.n	8004b8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5e:	4b47      	ldr	r3, [pc, #284]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <HAL_RCC_OscConfig+0x17a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d001      	beq.n	8004b76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e1e9      	b.n	8004f4a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b76:	4b41      	ldr	r3, [pc, #260]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	493d      	ldr	r1, [pc, #244]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8a:	e040      	b.n	8004c0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d023      	beq.n	8004bdc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b94:	4b39      	ldr	r3, [pc, #228]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a38      	ldr	r2, [pc, #224]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004b9a:	f043 0301 	orr.w	r3, r3, #1
 8004b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7fe fa08 	bl	8002fb4 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba8:	f7fe fa04 	bl	8002fb4 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e1c7      	b.n	8004f4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bba:	4b30      	ldr	r3, [pc, #192]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f0      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc6:	4b2d      	ldr	r3, [pc, #180]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4929      	ldr	r1, [pc, #164]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]
 8004bda:	e018      	b.n	8004c0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bdc:	4b27      	ldr	r3, [pc, #156]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a26      	ldr	r2, [pc, #152]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fe f9e4 	bl	8002fb4 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf0:	f7fe f9e0 	bl	8002fb4 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e1a3      	b.n	8004f4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c02:	4b1e      	ldr	r3, [pc, #120]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f0      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d038      	beq.n	8004c8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d019      	beq.n	8004c56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c22:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c26:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004c28:	f043 0301 	orr.w	r3, r3, #1
 8004c2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2e:	f7fe f9c1 	bl	8002fb4 <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c36:	f7fe f9bd 	bl	8002fb4 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e180      	b.n	8004f4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0f0      	beq.n	8004c36 <HAL_RCC_OscConfig+0x23a>
 8004c54:	e01a      	b.n	8004c8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c56:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c5a:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <HAL_RCC_OscConfig+0x280>)
 8004c5c:	f023 0301 	bic.w	r3, r3, #1
 8004c60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c62:	f7fe f9a7 	bl	8002fb4 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c68:	e00a      	b.n	8004c80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c6a:	f7fe f9a3 	bl	8002fb4 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d903      	bls.n	8004c80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e166      	b.n	8004f4a <HAL_RCC_OscConfig+0x54e>
 8004c7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c80:	4b92      	ldr	r3, [pc, #584]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1ee      	bne.n	8004c6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 80a4 	beq.w	8004de2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c9a:	4b8c      	ldr	r3, [pc, #560]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10d      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ca6:	4b89      	ldr	r3, [pc, #548]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	4a88      	ldr	r2, [pc, #544]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004cb2:	4b86      	ldr	r3, [pc, #536]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cba:	60bb      	str	r3, [r7, #8]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cc2:	4b83      	ldr	r3, [pc, #524]	; (8004ed0 <HAL_RCC_OscConfig+0x4d4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d118      	bne.n	8004d00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004cce:	4b80      	ldr	r3, [pc, #512]	; (8004ed0 <HAL_RCC_OscConfig+0x4d4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a7f      	ldr	r2, [pc, #508]	; (8004ed0 <HAL_RCC_OscConfig+0x4d4>)
 8004cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cda:	f7fe f96b 	bl	8002fb4 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce2:	f7fe f967 	bl	8002fb4 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b64      	cmp	r3, #100	; 0x64
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e12a      	b.n	8004f4a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cf4:	4b76      	ldr	r3, [pc, #472]	; (8004ed0 <HAL_RCC_OscConfig+0x4d4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d106      	bne.n	8004d16 <HAL_RCC_OscConfig+0x31a>
 8004d08:	4b70      	ldr	r3, [pc, #448]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0c:	4a6f      	ldr	r2, [pc, #444]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	6713      	str	r3, [r2, #112]	; 0x70
 8004d14:	e02d      	b.n	8004d72 <HAL_RCC_OscConfig+0x376>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10c      	bne.n	8004d38 <HAL_RCC_OscConfig+0x33c>
 8004d1e:	4b6b      	ldr	r3, [pc, #428]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d22:	4a6a      	ldr	r2, [pc, #424]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	6713      	str	r3, [r2, #112]	; 0x70
 8004d2a:	4b68      	ldr	r3, [pc, #416]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2e:	4a67      	ldr	r2, [pc, #412]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004d30:	f023 0304 	bic.w	r3, r3, #4
 8004d34:	6713      	str	r3, [r2, #112]	; 0x70
 8004d36:	e01c      	b.n	8004d72 <HAL_RCC_OscConfig+0x376>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2b05      	cmp	r3, #5
 8004d3e:	d10c      	bne.n	8004d5a <HAL_RCC_OscConfig+0x35e>
 8004d40:	4b62      	ldr	r3, [pc, #392]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d44:	4a61      	ldr	r2, [pc, #388]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004d46:	f043 0304 	orr.w	r3, r3, #4
 8004d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4c:	4b5f      	ldr	r3, [pc, #380]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d50:	4a5e      	ldr	r2, [pc, #376]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	6713      	str	r3, [r2, #112]	; 0x70
 8004d58:	e00b      	b.n	8004d72 <HAL_RCC_OscConfig+0x376>
 8004d5a:	4b5c      	ldr	r3, [pc, #368]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5e:	4a5b      	ldr	r2, [pc, #364]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004d60:	f023 0301 	bic.w	r3, r3, #1
 8004d64:	6713      	str	r3, [r2, #112]	; 0x70
 8004d66:	4b59      	ldr	r3, [pc, #356]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6a:	4a58      	ldr	r2, [pc, #352]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004d6c:	f023 0304 	bic.w	r3, r3, #4
 8004d70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d015      	beq.n	8004da6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7a:	f7fe f91b 	bl	8002fb4 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d80:	e00a      	b.n	8004d98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d82:	f7fe f917 	bl	8002fb4 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e0d8      	b.n	8004f4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d98:	4b4c      	ldr	r3, [pc, #304]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0ee      	beq.n	8004d82 <HAL_RCC_OscConfig+0x386>
 8004da4:	e014      	b.n	8004dd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da6:	f7fe f905 	bl	8002fb4 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dac:	e00a      	b.n	8004dc4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dae:	f7fe f901 	bl	8002fb4 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e0c2      	b.n	8004f4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc4:	4b41      	ldr	r3, [pc, #260]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1ee      	bne.n	8004dae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d105      	bne.n	8004de2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd6:	4b3d      	ldr	r3, [pc, #244]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	4a3c      	ldr	r2, [pc, #240]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80ae 	beq.w	8004f48 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dec:	4b37      	ldr	r3, [pc, #220]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 030c 	and.w	r3, r3, #12
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d06d      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d14b      	bne.n	8004e98 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e00:	4b32      	ldr	r3, [pc, #200]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a31      	ldr	r2, [pc, #196]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0c:	f7fe f8d2 	bl	8002fb4 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e14:	f7fe f8ce 	bl	8002fb4 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e091      	b.n	8004f4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e26:	4b29      	ldr	r3, [pc, #164]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	019b      	lsls	r3, r3, #6
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	041b      	lsls	r3, r3, #16
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	061b      	lsls	r3, r3, #24
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	071b      	lsls	r3, r3, #28
 8004e5e:	491b      	ldr	r1, [pc, #108]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e64:	4b19      	ldr	r3, [pc, #100]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a18      	ldr	r2, [pc, #96]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e70:	f7fe f8a0 	bl	8002fb4 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e78:	f7fe f89c 	bl	8002fb4 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e05f      	b.n	8004f4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e8a:	4b10      	ldr	r3, [pc, #64]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0f0      	beq.n	8004e78 <HAL_RCC_OscConfig+0x47c>
 8004e96:	e057      	b.n	8004f48 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e98:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a0b      	ldr	r2, [pc, #44]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea4:	f7fe f886 	bl	8002fb4 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eac:	f7fe f882 	bl	8002fb4 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e045      	b.n	8004f4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ebe:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <HAL_RCC_OscConfig+0x4d0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f0      	bne.n	8004eac <HAL_RCC_OscConfig+0x4b0>
 8004eca:	e03d      	b.n	8004f48 <HAL_RCC_OscConfig+0x54c>
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004ed4:	4b1f      	ldr	r3, [pc, #124]	; (8004f54 <HAL_RCC_OscConfig+0x558>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d030      	beq.n	8004f44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d129      	bne.n	8004f44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d122      	bne.n	8004f44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f04:	4013      	ands	r3, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d119      	bne.n	8004f44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	085b      	lsrs	r3, r3, #1
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d10f      	bne.n	8004f44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d107      	bne.n	8004f44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d001      	beq.n	8004f48 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40023800 	.word	0x40023800

08004f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0d0      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f70:	4b6a      	ldr	r3, [pc, #424]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d910      	bls.n	8004fa0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7e:	4b67      	ldr	r3, [pc, #412]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 020f 	bic.w	r2, r3, #15
 8004f86:	4965      	ldr	r1, [pc, #404]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8e:	4b63      	ldr	r3, [pc, #396]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0b8      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d020      	beq.n	8004fee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fb8:	4b59      	ldr	r3, [pc, #356]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	4a58      	ldr	r2, [pc, #352]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 8004fbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fd0:	4b53      	ldr	r3, [pc, #332]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4a52      	ldr	r2, [pc, #328]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fdc:	4b50      	ldr	r3, [pc, #320]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	494d      	ldr	r1, [pc, #308]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d040      	beq.n	800507c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d107      	bne.n	8005012 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005002:	4b47      	ldr	r3, [pc, #284]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d115      	bne.n	800503a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e07f      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d107      	bne.n	800502a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800501a:	4b41      	ldr	r3, [pc, #260]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e073      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502a:	4b3d      	ldr	r3, [pc, #244]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e06b      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800503a:	4b39      	ldr	r3, [pc, #228]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f023 0203 	bic.w	r2, r3, #3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	4936      	ldr	r1, [pc, #216]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 8005048:	4313      	orrs	r3, r2
 800504a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800504c:	f7fd ffb2 	bl	8002fb4 <HAL_GetTick>
 8005050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005052:	e00a      	b.n	800506a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005054:	f7fd ffae 	bl	8002fb4 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e053      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506a:	4b2d      	ldr	r3, [pc, #180]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 020c 	and.w	r2, r3, #12
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	429a      	cmp	r2, r3
 800507a:	d1eb      	bne.n	8005054 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800507c:	4b27      	ldr	r3, [pc, #156]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d210      	bcs.n	80050ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800508a:	4b24      	ldr	r3, [pc, #144]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f023 020f 	bic.w	r2, r3, #15
 8005092:	4922      	ldr	r1, [pc, #136]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	4313      	orrs	r3, r2
 8005098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800509a:	4b20      	ldr	r3, [pc, #128]	; (800511c <HAL_RCC_ClockConfig+0x1c4>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d001      	beq.n	80050ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e032      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b8:	4b19      	ldr	r3, [pc, #100]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4916      	ldr	r1, [pc, #88]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d009      	beq.n	80050ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050d6:	4b12      	ldr	r3, [pc, #72]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	490e      	ldr	r1, [pc, #56]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ea:	f000 f821 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 80050ee:	4602      	mov	r2, r0
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	091b      	lsrs	r3, r3, #4
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	490a      	ldr	r1, [pc, #40]	; (8005124 <HAL_RCC_ClockConfig+0x1cc>)
 80050fc:	5ccb      	ldrb	r3, [r1, r3]
 80050fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005102:	4a09      	ldr	r2, [pc, #36]	; (8005128 <HAL_RCC_ClockConfig+0x1d0>)
 8005104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005106:	4b09      	ldr	r3, [pc, #36]	; (800512c <HAL_RCC_ClockConfig+0x1d4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7fd f966 	bl	80023dc <HAL_InitTick>

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40023c00 	.word	0x40023c00
 8005120:	40023800 	.word	0x40023800
 8005124:	0800e890 	.word	0x0800e890
 8005128:	20000058 	.word	0x20000058
 800512c:	2000005c 	.word	0x2000005c

08005130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005134:	b094      	sub	sp, #80	; 0x50
 8005136:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	647b      	str	r3, [r7, #68]	; 0x44
 800513c:	2300      	movs	r3, #0
 800513e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005140:	2300      	movs	r3, #0
 8005142:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005148:	4b79      	ldr	r3, [pc, #484]	; (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 030c 	and.w	r3, r3, #12
 8005150:	2b08      	cmp	r3, #8
 8005152:	d00d      	beq.n	8005170 <HAL_RCC_GetSysClockFreq+0x40>
 8005154:	2b08      	cmp	r3, #8
 8005156:	f200 80e1 	bhi.w	800531c <HAL_RCC_GetSysClockFreq+0x1ec>
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <HAL_RCC_GetSysClockFreq+0x34>
 800515e:	2b04      	cmp	r3, #4
 8005160:	d003      	beq.n	800516a <HAL_RCC_GetSysClockFreq+0x3a>
 8005162:	e0db      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005164:	4b73      	ldr	r3, [pc, #460]	; (8005334 <HAL_RCC_GetSysClockFreq+0x204>)
 8005166:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005168:	e0db      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800516a:	4b73      	ldr	r3, [pc, #460]	; (8005338 <HAL_RCC_GetSysClockFreq+0x208>)
 800516c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800516e:	e0d8      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005170:	4b6f      	ldr	r3, [pc, #444]	; (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005178:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800517a:	4b6d      	ldr	r3, [pc, #436]	; (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d063      	beq.n	800524e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005186:	4b6a      	ldr	r3, [pc, #424]	; (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	099b      	lsrs	r3, r3, #6
 800518c:	2200      	movs	r2, #0
 800518e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005190:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005198:	633b      	str	r3, [r7, #48]	; 0x30
 800519a:	2300      	movs	r3, #0
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
 800519e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051a2:	4622      	mov	r2, r4
 80051a4:	462b      	mov	r3, r5
 80051a6:	f04f 0000 	mov.w	r0, #0
 80051aa:	f04f 0100 	mov.w	r1, #0
 80051ae:	0159      	lsls	r1, r3, #5
 80051b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051b4:	0150      	lsls	r0, r2, #5
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4621      	mov	r1, r4
 80051bc:	1a51      	subs	r1, r2, r1
 80051be:	6139      	str	r1, [r7, #16]
 80051c0:	4629      	mov	r1, r5
 80051c2:	eb63 0301 	sbc.w	r3, r3, r1
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051d4:	4659      	mov	r1, fp
 80051d6:	018b      	lsls	r3, r1, #6
 80051d8:	4651      	mov	r1, sl
 80051da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051de:	4651      	mov	r1, sl
 80051e0:	018a      	lsls	r2, r1, #6
 80051e2:	4651      	mov	r1, sl
 80051e4:	ebb2 0801 	subs.w	r8, r2, r1
 80051e8:	4659      	mov	r1, fp
 80051ea:	eb63 0901 	sbc.w	r9, r3, r1
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005202:	4690      	mov	r8, r2
 8005204:	4699      	mov	r9, r3
 8005206:	4623      	mov	r3, r4
 8005208:	eb18 0303 	adds.w	r3, r8, r3
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	462b      	mov	r3, r5
 8005210:	eb49 0303 	adc.w	r3, r9, r3
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005222:	4629      	mov	r1, r5
 8005224:	024b      	lsls	r3, r1, #9
 8005226:	4621      	mov	r1, r4
 8005228:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800522c:	4621      	mov	r1, r4
 800522e:	024a      	lsls	r2, r1, #9
 8005230:	4610      	mov	r0, r2
 8005232:	4619      	mov	r1, r3
 8005234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005236:	2200      	movs	r2, #0
 8005238:	62bb      	str	r3, [r7, #40]	; 0x28
 800523a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800523c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005240:	f7fb f84e 	bl	80002e0 <__aeabi_uldivmod>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4613      	mov	r3, r2
 800524a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800524c:	e058      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800524e:	4b38      	ldr	r3, [pc, #224]	; (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	099b      	lsrs	r3, r3, #6
 8005254:	2200      	movs	r2, #0
 8005256:	4618      	mov	r0, r3
 8005258:	4611      	mov	r1, r2
 800525a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800525e:	623b      	str	r3, [r7, #32]
 8005260:	2300      	movs	r3, #0
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
 8005264:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005268:	4642      	mov	r2, r8
 800526a:	464b      	mov	r3, r9
 800526c:	f04f 0000 	mov.w	r0, #0
 8005270:	f04f 0100 	mov.w	r1, #0
 8005274:	0159      	lsls	r1, r3, #5
 8005276:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800527a:	0150      	lsls	r0, r2, #5
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4641      	mov	r1, r8
 8005282:	ebb2 0a01 	subs.w	sl, r2, r1
 8005286:	4649      	mov	r1, r9
 8005288:	eb63 0b01 	sbc.w	fp, r3, r1
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005298:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800529c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052a0:	ebb2 040a 	subs.w	r4, r2, sl
 80052a4:	eb63 050b 	sbc.w	r5, r3, fp
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	00eb      	lsls	r3, r5, #3
 80052b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052b6:	00e2      	lsls	r2, r4, #3
 80052b8:	4614      	mov	r4, r2
 80052ba:	461d      	mov	r5, r3
 80052bc:	4643      	mov	r3, r8
 80052be:	18e3      	adds	r3, r4, r3
 80052c0:	603b      	str	r3, [r7, #0]
 80052c2:	464b      	mov	r3, r9
 80052c4:	eb45 0303 	adc.w	r3, r5, r3
 80052c8:	607b      	str	r3, [r7, #4]
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052d6:	4629      	mov	r1, r5
 80052d8:	028b      	lsls	r3, r1, #10
 80052da:	4621      	mov	r1, r4
 80052dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052e0:	4621      	mov	r1, r4
 80052e2:	028a      	lsls	r2, r1, #10
 80052e4:	4610      	mov	r0, r2
 80052e6:	4619      	mov	r1, r3
 80052e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ea:	2200      	movs	r2, #0
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	61fa      	str	r2, [r7, #28]
 80052f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052f4:	f7fa fff4 	bl	80002e0 <__aeabi_uldivmod>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4613      	mov	r3, r2
 80052fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005300:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	0c1b      	lsrs	r3, r3, #16
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	3301      	adds	r3, #1
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005310:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005314:	fbb2 f3f3 	udiv	r3, r2, r3
 8005318:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800531a:	e002      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800531c:	4b05      	ldr	r3, [pc, #20]	; (8005334 <HAL_RCC_GetSysClockFreq+0x204>)
 800531e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005324:	4618      	mov	r0, r3
 8005326:	3750      	adds	r7, #80	; 0x50
 8005328:	46bd      	mov	sp, r7
 800532a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800532e:	bf00      	nop
 8005330:	40023800 	.word	0x40023800
 8005334:	00f42400 	.word	0x00f42400
 8005338:	007a1200 	.word	0x007a1200

0800533c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005340:	4b03      	ldr	r3, [pc, #12]	; (8005350 <HAL_RCC_GetHCLKFreq+0x14>)
 8005342:	681b      	ldr	r3, [r3, #0]
}
 8005344:	4618      	mov	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20000058 	.word	0x20000058

08005354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005358:	f7ff fff0 	bl	800533c <HAL_RCC_GetHCLKFreq>
 800535c:	4602      	mov	r2, r0
 800535e:	4b05      	ldr	r3, [pc, #20]	; (8005374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	0a9b      	lsrs	r3, r3, #10
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	4903      	ldr	r1, [pc, #12]	; (8005378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800536a:	5ccb      	ldrb	r3, [r1, r3]
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40023800 	.word	0x40023800
 8005378:	0800e8a0 	.word	0x0800e8a0

0800537c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005380:	f7ff ffdc 	bl	800533c <HAL_RCC_GetHCLKFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b05      	ldr	r3, [pc, #20]	; (800539c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	0b5b      	lsrs	r3, r3, #13
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	4903      	ldr	r1, [pc, #12]	; (80053a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005392:	5ccb      	ldrb	r3, [r1, r3]
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005398:	4618      	mov	r0, r3
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40023800 	.word	0x40023800
 80053a0:	0800e8a0 	.word	0x0800e8a0

080053a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	220f      	movs	r2, #15
 80053b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053b4:	4b12      	ldr	r3, [pc, #72]	; (8005400 <HAL_RCC_GetClockConfig+0x5c>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 0203 	and.w	r2, r3, #3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80053c0:	4b0f      	ldr	r3, [pc, #60]	; (8005400 <HAL_RCC_GetClockConfig+0x5c>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053cc:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <HAL_RCC_GetClockConfig+0x5c>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80053d8:	4b09      	ldr	r3, [pc, #36]	; (8005400 <HAL_RCC_GetClockConfig+0x5c>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	08db      	lsrs	r3, r3, #3
 80053de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053e6:	4b07      	ldr	r3, [pc, #28]	; (8005404 <HAL_RCC_GetClockConfig+0x60>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 020f 	and.w	r2, r3, #15
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	601a      	str	r2, [r3, #0]
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40023800 	.word	0x40023800
 8005404:	40023c00 	.word	0x40023c00

08005408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800541c:	2300      	movs	r3, #0
 800541e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d012      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005430:	4b69      	ldr	r3, [pc, #420]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	4a68      	ldr	r2, [pc, #416]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005436:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800543a:	6093      	str	r3, [r2, #8]
 800543c:	4b66      	ldr	r3, [pc, #408]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005444:	4964      	ldr	r1, [pc, #400]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005446:	4313      	orrs	r3, r2
 8005448:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005452:	2301      	movs	r3, #1
 8005454:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d017      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005462:	4b5d      	ldr	r3, [pc, #372]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005468:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005470:	4959      	ldr	r1, [pc, #356]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005480:	d101      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005482:	2301      	movs	r3, #1
 8005484:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800548e:	2301      	movs	r3, #1
 8005490:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d017      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800549e:	4b4e      	ldr	r3, [pc, #312]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	494a      	ldr	r1, [pc, #296]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054bc:	d101      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80054be:	2301      	movs	r3, #1
 80054c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80054ca:	2301      	movs	r3, #1
 80054cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80054da:	2301      	movs	r3, #1
 80054dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 808b 	beq.w	8005602 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054ec:	4b3a      	ldr	r3, [pc, #232]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f0:	4a39      	ldr	r2, [pc, #228]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f6:	6413      	str	r3, [r2, #64]	; 0x40
 80054f8:	4b37      	ldr	r3, [pc, #220]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005504:	4b35      	ldr	r3, [pc, #212]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a34      	ldr	r2, [pc, #208]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800550a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800550e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005510:	f7fd fd50 	bl	8002fb4 <HAL_GetTick>
 8005514:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005516:	e008      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005518:	f7fd fd4c 	bl	8002fb4 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b64      	cmp	r3, #100	; 0x64
 8005524:	d901      	bls.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e38f      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800552a:	4b2c      	ldr	r3, [pc, #176]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0f0      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005536:	4b28      	ldr	r3, [pc, #160]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d035      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	429a      	cmp	r2, r3
 8005552:	d02e      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005554:	4b20      	ldr	r3, [pc, #128]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800555e:	4b1e      	ldr	r3, [pc, #120]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005562:	4a1d      	ldr	r2, [pc, #116]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005568:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800556a:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556e:	4a1a      	ldr	r2, [pc, #104]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005574:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005576:	4a18      	ldr	r2, [pc, #96]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800557c:	4b16      	ldr	r3, [pc, #88]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b01      	cmp	r3, #1
 8005586:	d114      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005588:	f7fd fd14 	bl	8002fb4 <HAL_GetTick>
 800558c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800558e:	e00a      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005590:	f7fd fd10 	bl	8002fb4 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f241 3288 	movw	r2, #5000	; 0x1388
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e351      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a6:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0ee      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055be:	d111      	bne.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80055c0:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055cc:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80055ce:	400b      	ands	r3, r1
 80055d0:	4901      	ldr	r1, [pc, #4]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	608b      	str	r3, [r1, #8]
 80055d6:	e00b      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80055d8:	40023800 	.word	0x40023800
 80055dc:	40007000 	.word	0x40007000
 80055e0:	0ffffcff 	.word	0x0ffffcff
 80055e4:	4bac      	ldr	r3, [pc, #688]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	4aab      	ldr	r2, [pc, #684]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055ee:	6093      	str	r3, [r2, #8]
 80055f0:	4ba9      	ldr	r3, [pc, #676]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055fc:	49a6      	ldr	r1, [pc, #664]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b00      	cmp	r3, #0
 800560c:	d010      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800560e:	4ba2      	ldr	r3, [pc, #648]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005614:	4aa0      	ldr	r2, [pc, #640]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800561a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800561e:	4b9e      	ldr	r3, [pc, #632]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005620:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	499b      	ldr	r1, [pc, #620]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800563c:	4b96      	ldr	r3, [pc, #600]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005642:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800564a:	4993      	ldr	r1, [pc, #588]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800565e:	4b8e      	ldr	r3, [pc, #568]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005664:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800566c:	498a      	ldr	r1, [pc, #552]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005680:	4b85      	ldr	r3, [pc, #532]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005686:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800568e:	4982      	ldr	r1, [pc, #520]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056a2:	4b7d      	ldr	r3, [pc, #500]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b0:	4979      	ldr	r1, [pc, #484]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056c4:	4b74      	ldr	r3, [pc, #464]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ca:	f023 0203 	bic.w	r2, r3, #3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d2:	4971      	ldr	r1, [pc, #452]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056e6:	4b6c      	ldr	r3, [pc, #432]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ec:	f023 020c 	bic.w	r2, r3, #12
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f4:	4968      	ldr	r1, [pc, #416]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005708:	4b63      	ldr	r3, [pc, #396]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005716:	4960      	ldr	r1, [pc, #384]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800572a:	4b5b      	ldr	r3, [pc, #364]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800572c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005730:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005738:	4957      	ldr	r1, [pc, #348]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800574c:	4b52      	ldr	r3, [pc, #328]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005752:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575a:	494f      	ldr	r1, [pc, #316]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800576e:	4b4a      	ldr	r3, [pc, #296]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005774:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577c:	4946      	ldr	r1, [pc, #280]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005790:	4b41      	ldr	r3, [pc, #260]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005796:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800579e:	493e      	ldr	r1, [pc, #248]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80057b2:	4b39      	ldr	r3, [pc, #228]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c0:	4935      	ldr	r1, [pc, #212]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057d4:	4b30      	ldr	r3, [pc, #192]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057e2:	492d      	ldr	r1, [pc, #180]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d011      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80057f6:	4b28      	ldr	r3, [pc, #160]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005804:	4924      	ldr	r1, [pc, #144]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005814:	d101      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005816:	2301      	movs	r3, #1
 8005818:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005826:	2301      	movs	r3, #1
 8005828:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005836:	4b18      	ldr	r3, [pc, #96]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005844:	4914      	ldr	r1, [pc, #80]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00b      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005858:	4b0f      	ldr	r3, [pc, #60]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005868:	490b      	ldr	r1, [pc, #44]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00f      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800587c:	4b06      	ldr	r3, [pc, #24]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005882:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800588c:	4902      	ldr	r1, [pc, #8]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800588e:	4313      	orrs	r3, r2
 8005890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005894:	e002      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005896:	bf00      	nop
 8005898:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00b      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058a8:	4b8a      	ldr	r3, [pc, #552]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b8:	4986      	ldr	r1, [pc, #536]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00b      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80058cc:	4b81      	ldr	r3, [pc, #516]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058dc:	497d      	ldr	r1, [pc, #500]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d006      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 80d6 	beq.w	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058f8:	4b76      	ldr	r3, [pc, #472]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a75      	ldr	r2, [pc, #468]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005904:	f7fd fb56 	bl	8002fb4 <HAL_GetTick>
 8005908:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800590a:	e008      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800590c:	f7fd fb52 	bl	8002fb4 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b64      	cmp	r3, #100	; 0x64
 8005918:	d901      	bls.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e195      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800591e:	4b6d      	ldr	r3, [pc, #436]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1f0      	bne.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d021      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593a:	2b00      	cmp	r3, #0
 800593c:	d11d      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800593e:	4b65      	ldr	r3, [pc, #404]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005944:	0c1b      	lsrs	r3, r3, #16
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800594c:	4b61      	ldr	r3, [pc, #388]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800594e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005952:	0e1b      	lsrs	r3, r3, #24
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	019a      	lsls	r2, r3, #6
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	041b      	lsls	r3, r3, #16
 8005964:	431a      	orrs	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	061b      	lsls	r3, r3, #24
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	071b      	lsls	r3, r3, #28
 8005972:	4958      	ldr	r1, [pc, #352]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005974:	4313      	orrs	r3, r2
 8005976:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d004      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800598e:	d00a      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005998:	2b00      	cmp	r3, #0
 800599a:	d02e      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059a4:	d129      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80059a6:	4b4b      	ldr	r3, [pc, #300]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ac:	0c1b      	lsrs	r3, r3, #16
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059b4:	4b47      	ldr	r3, [pc, #284]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ba:	0f1b      	lsrs	r3, r3, #28
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	019a      	lsls	r2, r3, #6
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	041b      	lsls	r3, r3, #16
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	061b      	lsls	r3, r3, #24
 80059d4:	431a      	orrs	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	071b      	lsls	r3, r3, #28
 80059da:	493e      	ldr	r1, [pc, #248]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059e2:	4b3c      	ldr	r3, [pc, #240]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059e8:	f023 021f 	bic.w	r2, r3, #31
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	3b01      	subs	r3, #1
 80059f2:	4938      	ldr	r1, [pc, #224]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01d      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a06:	4b33      	ldr	r3, [pc, #204]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a0c:	0e1b      	lsrs	r3, r3, #24
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a14:	4b2f      	ldr	r3, [pc, #188]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a1a:	0f1b      	lsrs	r3, r3, #28
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	019a      	lsls	r2, r3, #6
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	041b      	lsls	r3, r3, #16
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	061b      	lsls	r3, r3, #24
 8005a34:	431a      	orrs	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	071b      	lsls	r3, r3, #28
 8005a3a:	4926      	ldr	r1, [pc, #152]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d011      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	019a      	lsls	r2, r3, #6
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	041b      	lsls	r3, r3, #16
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	061b      	lsls	r3, r3, #24
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	071b      	lsls	r3, r3, #28
 8005a6a:	491a      	ldr	r1, [pc, #104]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a72:	4b18      	ldr	r3, [pc, #96]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a17      	ldr	r2, [pc, #92]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a7e:	f7fd fa99 	bl	8002fb4 <HAL_GetTick>
 8005a82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a84:	e008      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a86:	f7fd fa95 	bl	8002fb4 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b64      	cmp	r3, #100	; 0x64
 8005a92:	d901      	bls.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e0d8      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a98:	4b0e      	ldr	r3, [pc, #56]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0f0      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	f040 80ce 	bne.w	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005aac:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a08      	ldr	r2, [pc, #32]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ab6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab8:	f7fd fa7c 	bl	8002fb4 <HAL_GetTick>
 8005abc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005abe:	e00b      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ac0:	f7fd fa78 	bl	8002fb4 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b64      	cmp	r3, #100	; 0x64
 8005acc:	d904      	bls.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e0bb      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ad8:	4b5e      	ldr	r3, [pc, #376]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ae4:	d0ec      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d009      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d02e      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d12a      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b0e:	4b51      	ldr	r3, [pc, #324]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b14:	0c1b      	lsrs	r3, r3, #16
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b1c:	4b4d      	ldr	r3, [pc, #308]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b22:	0f1b      	lsrs	r3, r3, #28
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	019a      	lsls	r2, r3, #6
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	041b      	lsls	r3, r3, #16
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	061b      	lsls	r3, r3, #24
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	071b      	lsls	r3, r3, #28
 8005b42:	4944      	ldr	r1, [pc, #272]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b4a:	4b42      	ldr	r3, [pc, #264]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	493d      	ldr	r1, [pc, #244]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d022      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b78:	d11d      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b7a:	4b36      	ldr	r3, [pc, #216]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b80:	0e1b      	lsrs	r3, r3, #24
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b88:	4b32      	ldr	r3, [pc, #200]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8e:	0f1b      	lsrs	r3, r3, #28
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	019a      	lsls	r2, r3, #6
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	041b      	lsls	r3, r3, #16
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	061b      	lsls	r3, r3, #24
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	071b      	lsls	r3, r3, #28
 8005bae:	4929      	ldr	r1, [pc, #164]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d028      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005bc2:	4b24      	ldr	r3, [pc, #144]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc8:	0e1b      	lsrs	r3, r3, #24
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005bd0:	4b20      	ldr	r3, [pc, #128]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd6:	0c1b      	lsrs	r3, r3, #16
 8005bd8:	f003 0303 	and.w	r3, r3, #3
 8005bdc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	019a      	lsls	r2, r3, #6
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	431a      	orrs	r2, r3
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	061b      	lsls	r3, r3, #24
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	071b      	lsls	r3, r3, #28
 8005bf6:	4917      	ldr	r1, [pc, #92]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005bfe:	4b15      	ldr	r3, [pc, #84]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	4911      	ldr	r1, [pc, #68]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c14:	4b0f      	ldr	r3, [pc, #60]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a0e      	ldr	r2, [pc, #56]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c20:	f7fd f9c8 	bl	8002fb4 <HAL_GetTick>
 8005c24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c26:	e008      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c28:	f7fd f9c4 	bl	8002fb4 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b64      	cmp	r3, #100	; 0x64
 8005c34:	d901      	bls.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e007      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c3a:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c46:	d1ef      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3720      	adds	r7, #32
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40023800 	.word	0x40023800

08005c58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e09d      	b.n	8005da6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d108      	bne.n	8005c84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c7a:	d009      	beq.n	8005c90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	61da      	str	r2, [r3, #28]
 8005c82:	e005      	b.n	8005c90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d106      	bne.n	8005cb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fc f8aa 	bl	8001e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cd0:	d902      	bls.n	8005cd8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	e002      	b.n	8005cde <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cdc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005ce6:	d007      	beq.n	8005cf8 <HAL_SPI_Init+0xa0>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cf0:	d002      	beq.n	8005cf8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3a:	ea42 0103 	orr.w	r1, r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	0c1b      	lsrs	r3, r3, #16
 8005d54:	f003 0204 	and.w	r2, r3, #4
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	f003 0310 	and.w	r3, r3, #16
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d66:	f003 0308 	and.w	r3, r3, #8
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d74:	ea42 0103 	orr.w	r1, r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69da      	ldr	r2, [r3, #28]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b088      	sub	sp, #32
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	603b      	str	r3, [r7, #0]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d101      	bne.n	8005dd0 <HAL_SPI_Transmit+0x22>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e158      	b.n	8006082 <HAL_SPI_Transmit+0x2d4>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dd8:	f7fd f8ec 	bl	8002fb4 <HAL_GetTick>
 8005ddc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005dde:	88fb      	ldrh	r3, [r7, #6]
 8005de0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d002      	beq.n	8005df4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dee:	2302      	movs	r3, #2
 8005df0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005df2:	e13d      	b.n	8006070 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_SPI_Transmit+0x52>
 8005dfa:	88fb      	ldrh	r3, [r7, #6]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d102      	bne.n	8005e06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e04:	e134      	b.n	8006070 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2203      	movs	r2, #3
 8005e0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	88fa      	ldrh	r2, [r7, #6]
 8005e1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	88fa      	ldrh	r2, [r7, #6]
 8005e24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e50:	d10f      	bne.n	8005e72 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	d007      	beq.n	8005e90 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e98:	d94b      	bls.n	8005f32 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <HAL_SPI_Transmit+0xfa>
 8005ea2:	8afb      	ldrh	r3, [r7, #22]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d13e      	bne.n	8005f26 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	881a      	ldrh	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	1c9a      	adds	r2, r3, #2
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ecc:	e02b      	b.n	8005f26 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d112      	bne.n	8005f02 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	881a      	ldrh	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	1c9a      	adds	r2, r3, #2
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f00:	e011      	b.n	8005f26 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f02:	f7fd f857 	bl	8002fb4 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d803      	bhi.n	8005f1a <HAL_SPI_Transmit+0x16c>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f18:	d102      	bne.n	8005f20 <HAL_SPI_Transmit+0x172>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d102      	bne.n	8005f26 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f24:	e0a4      	b.n	8006070 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1ce      	bne.n	8005ece <HAL_SPI_Transmit+0x120>
 8005f30:	e07c      	b.n	800602c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <HAL_SPI_Transmit+0x192>
 8005f3a:	8afb      	ldrh	r3, [r7, #22]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d170      	bne.n	8006022 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d912      	bls.n	8005f70 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	881a      	ldrh	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	1c9a      	adds	r2, r3, #2
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	3b02      	subs	r3, #2
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f6e:	e058      	b.n	8006022 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	7812      	ldrb	r2, [r2, #0]
 8005f7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005f96:	e044      	b.n	8006022 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d12b      	bne.n	8005ffe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d912      	bls.n	8005fd6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb4:	881a      	ldrh	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc0:	1c9a      	adds	r2, r3, #2
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b02      	subs	r3, #2
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fd4:	e025      	b.n	8006022 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	330c      	adds	r3, #12
 8005fe0:	7812      	ldrb	r2, [r2, #0]
 8005fe2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ffc:	e011      	b.n	8006022 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ffe:	f7fc ffd9 	bl	8002fb4 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d803      	bhi.n	8006016 <HAL_SPI_Transmit+0x268>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006014:	d102      	bne.n	800601c <HAL_SPI_Transmit+0x26e>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006020:	e026      	b.n	8006070 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006026:	b29b      	uxth	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1b5      	bne.n	8005f98 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	6839      	ldr	r1, [r7, #0]
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 fadd 	bl	80065f0 <SPI_EndRxTxTransaction>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2220      	movs	r2, #32
 8006040:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10a      	bne.n	8006060 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800604a:	2300      	movs	r3, #0
 800604c:	613b      	str	r3, [r7, #16]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	613b      	str	r3, [r7, #16]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	77fb      	strb	r3, [r7, #31]
 800606c:	e000      	b.n	8006070 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800606e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006080:	7ffb      	ldrb	r3, [r7, #31]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3720      	adds	r7, #32
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_SPI_Transmit_DMA+0x20>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e0d8      	b.n	800625e <HAL_SPI_Transmit_DMA+0x1d2>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d002      	beq.n	80060c6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80060c0:	2302      	movs	r3, #2
 80060c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060c4:	e0c6      	b.n	8006254 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <HAL_SPI_Transmit_DMA+0x46>
 80060cc:	88fb      	ldrh	r3, [r7, #6]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060d6:	e0bd      	b.n	8006254 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2203      	movs	r2, #3
 80060dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	88fa      	ldrh	r2, [r7, #6]
 80060f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	88fa      	ldrh	r2, [r7, #6]
 80060f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006122:	d10f      	bne.n	8006144 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006132:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006142:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006148:	4a47      	ldr	r2, [pc, #284]	; (8006268 <HAL_SPI_Transmit_DMA+0x1dc>)
 800614a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006150:	4a46      	ldr	r2, [pc, #280]	; (800626c <HAL_SPI_Transmit_DMA+0x1e0>)
 8006152:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006158:	4a45      	ldr	r2, [pc, #276]	; (8006270 <HAL_SPI_Transmit_DMA+0x1e4>)
 800615a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006160:	2200      	movs	r2, #0
 8006162:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006172:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800617c:	d82d      	bhi.n	80061da <HAL_SPI_Transmit_DMA+0x14e>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006188:	d127      	bne.n	80061da <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800618e:	b29b      	uxth	r3, r3
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10f      	bne.n	80061b8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061a6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	085b      	lsrs	r3, r3, #1
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061b6:	e010      	b.n	80061da <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061c6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	085b      	lsrs	r3, r3, #1
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	3301      	adds	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	4619      	mov	r1, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	330c      	adds	r3, #12
 80061ea:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80061f2:	f7fd f9f5 	bl	80035e0 <HAL_DMA_Start_IT>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00c      	beq.n	8006216 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006200:	f043 0210 	orr.w	r2, r3, #16
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006214:	e01e      	b.n	8006254 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006220:	2b40      	cmp	r3, #64	; 0x40
 8006222:	d007      	beq.n	8006234 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006232:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0220 	orr.w	r2, r2, #32
 8006242:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0202 	orr.w	r2, r2, #2
 8006252:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800625c:	7dfb      	ldrb	r3, [r7, #23]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	08006359 	.word	0x08006359
 800626c:	080062b1 	.word	0x080062b1
 8006270:	08006375 	.word	0x08006375

08006274 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062bc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062be:	f7fc fe79 	bl	8002fb4 <HAL_GetTick>
 80062c2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d2:	d03b      	beq.n	800634c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0220 	bic.w	r2, r2, #32
 80062e2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0202 	bic.w	r2, r2, #2
 80062f2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	2164      	movs	r1, #100	; 0x64
 80062f8:	6978      	ldr	r0, [r7, #20]
 80062fa:	f000 f979 	bl	80065f0 <SPI_EndRxTxTransaction>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d005      	beq.n	8006310 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006308:	f043 0220 	orr.w	r2, r3, #32
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2200      	movs	r2, #0
 8006332:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006344:	6978      	ldr	r0, [r7, #20]
 8006346:	f7ff ffa9 	bl	800629c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800634a:	e002      	b.n	8006352 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800634c:	6978      	ldr	r0, [r7, #20]
 800634e:	f7ff ff91 	bl	8006274 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7ff ff8e 	bl	8006288 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800636c:	bf00      	nop
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0203 	bic.w	r2, r2, #3
 8006390:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006396:	f043 0210 	orr.w	r2, r3, #16
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f7ff ff78 	bl	800629c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063ac:	bf00      	nop
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	4613      	mov	r3, r2
 80063c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063c4:	f7fc fdf6 	bl	8002fb4 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063cc:	1a9b      	subs	r3, r3, r2
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	4413      	add	r3, r2
 80063d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063d4:	f7fc fdee 	bl	8002fb4 <HAL_GetTick>
 80063d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063da:	4b39      	ldr	r3, [pc, #228]	; (80064c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	015b      	lsls	r3, r3, #5
 80063e0:	0d1b      	lsrs	r3, r3, #20
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	fb02 f303 	mul.w	r3, r2, r3
 80063e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063ea:	e054      	b.n	8006496 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f2:	d050      	beq.n	8006496 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063f4:	f7fc fdde 	bl	8002fb4 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	429a      	cmp	r2, r3
 8006402:	d902      	bls.n	800640a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d13d      	bne.n	8006486 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006418:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006422:	d111      	bne.n	8006448 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800642c:	d004      	beq.n	8006438 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006436:	d107      	bne.n	8006448 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006446:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006450:	d10f      	bne.n	8006472 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006470:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e017      	b.n	80064b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	3b01      	subs	r3, #1
 8006494:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4013      	ands	r3, r2
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	bf0c      	ite	eq
 80064a6:	2301      	moveq	r3, #1
 80064a8:	2300      	movne	r3, #0
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	461a      	mov	r2, r3
 80064ae:	79fb      	ldrb	r3, [r7, #7]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d19b      	bne.n	80063ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3720      	adds	r7, #32
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20000058 	.word	0x20000058

080064c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b08a      	sub	sp, #40	; 0x28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80064d2:	2300      	movs	r3, #0
 80064d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80064d6:	f7fc fd6d 	bl	8002fb4 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	1a9b      	subs	r3, r3, r2
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	4413      	add	r3, r2
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80064e6:	f7fc fd65 	bl	8002fb4 <HAL_GetTick>
 80064ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	330c      	adds	r3, #12
 80064f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80064f4:	4b3d      	ldr	r3, [pc, #244]	; (80065ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	00da      	lsls	r2, r3, #3
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	0d1b      	lsrs	r3, r3, #20
 8006504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006506:	fb02 f303 	mul.w	r3, r2, r3
 800650a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800650c:	e060      	b.n	80065d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006514:	d107      	bne.n	8006526 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d104      	bne.n	8006526 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	b2db      	uxtb	r3, r3
 8006522:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006524:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652c:	d050      	beq.n	80065d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800652e:	f7fc fd41 	bl	8002fb4 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653a:	429a      	cmp	r2, r3
 800653c:	d902      	bls.n	8006544 <SPI_WaitFifoStateUntilTimeout+0x80>
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	2b00      	cmp	r3, #0
 8006542:	d13d      	bne.n	80065c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006552:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800655c:	d111      	bne.n	8006582 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006566:	d004      	beq.n	8006572 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006570:	d107      	bne.n	8006582 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006580:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800658a:	d10f      	bne.n	80065ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e010      	b.n	80065e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	3b01      	subs	r3, #1
 80065ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	4013      	ands	r3, r2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d196      	bne.n	800650e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3728      	adds	r7, #40	; 0x28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	20000058 	.word	0x20000058

080065f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af02      	add	r7, sp, #8
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2200      	movs	r2, #0
 8006604:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f7ff ff5b 	bl	80064c4 <SPI_WaitFifoStateUntilTimeout>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d007      	beq.n	8006624 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006618:	f043 0220 	orr.w	r2, r3, #32
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e046      	b.n	80066b2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006624:	4b25      	ldr	r3, [pc, #148]	; (80066bc <SPI_EndRxTxTransaction+0xcc>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a25      	ldr	r2, [pc, #148]	; (80066c0 <SPI_EndRxTxTransaction+0xd0>)
 800662a:	fba2 2303 	umull	r2, r3, r2, r3
 800662e:	0d5b      	lsrs	r3, r3, #21
 8006630:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006634:	fb02 f303 	mul.w	r3, r2, r3
 8006638:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006642:	d112      	bne.n	800666a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2200      	movs	r2, #0
 800664c:	2180      	movs	r1, #128	; 0x80
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f7ff feb0 	bl	80063b4 <SPI_WaitFlagStateUntilTimeout>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d016      	beq.n	8006688 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800665e:	f043 0220 	orr.w	r2, r3, #32
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e023      	b.n	80066b2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00a      	beq.n	8006686 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	3b01      	subs	r3, #1
 8006674:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006680:	2b80      	cmp	r3, #128	; 0x80
 8006682:	d0f2      	beq.n	800666a <SPI_EndRxTxTransaction+0x7a>
 8006684:	e000      	b.n	8006688 <SPI_EndRxTxTransaction+0x98>
        break;
 8006686:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2200      	movs	r2, #0
 8006690:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f7ff ff15 	bl	80064c4 <SPI_WaitFifoStateUntilTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d007      	beq.n	80066b0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a4:	f043 0220 	orr.w	r2, r3, #32
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e000      	b.n	80066b2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20000058 	.word	0x20000058
 80066c0:	165e9f81 	.word	0x165e9f81

080066c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e049      	b.n	800676a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f841 	bl	8006772 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3304      	adds	r3, #4
 8006700:	4619      	mov	r1, r3
 8006702:	4610      	mov	r0, r2
 8006704:	f000 fc66 	bl	8006fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
	...

08006788 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b01      	cmp	r3, #1
 800679a:	d001      	beq.n	80067a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e054      	b.n	800684a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68da      	ldr	r2, [r3, #12]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f042 0201 	orr.w	r2, r2, #1
 80067b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a26      	ldr	r2, [pc, #152]	; (8006858 <HAL_TIM_Base_Start_IT+0xd0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d022      	beq.n	8006808 <HAL_TIM_Base_Start_IT+0x80>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ca:	d01d      	beq.n	8006808 <HAL_TIM_Base_Start_IT+0x80>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a22      	ldr	r2, [pc, #136]	; (800685c <HAL_TIM_Base_Start_IT+0xd4>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d018      	beq.n	8006808 <HAL_TIM_Base_Start_IT+0x80>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a21      	ldr	r2, [pc, #132]	; (8006860 <HAL_TIM_Base_Start_IT+0xd8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d013      	beq.n	8006808 <HAL_TIM_Base_Start_IT+0x80>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a1f      	ldr	r2, [pc, #124]	; (8006864 <HAL_TIM_Base_Start_IT+0xdc>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00e      	beq.n	8006808 <HAL_TIM_Base_Start_IT+0x80>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a1e      	ldr	r2, [pc, #120]	; (8006868 <HAL_TIM_Base_Start_IT+0xe0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d009      	beq.n	8006808 <HAL_TIM_Base_Start_IT+0x80>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a1c      	ldr	r2, [pc, #112]	; (800686c <HAL_TIM_Base_Start_IT+0xe4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d004      	beq.n	8006808 <HAL_TIM_Base_Start_IT+0x80>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1b      	ldr	r2, [pc, #108]	; (8006870 <HAL_TIM_Base_Start_IT+0xe8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d115      	bne.n	8006834 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	4b19      	ldr	r3, [pc, #100]	; (8006874 <HAL_TIM_Base_Start_IT+0xec>)
 8006810:	4013      	ands	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b06      	cmp	r3, #6
 8006818:	d015      	beq.n	8006846 <HAL_TIM_Base_Start_IT+0xbe>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006820:	d011      	beq.n	8006846 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 0201 	orr.w	r2, r2, #1
 8006830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006832:	e008      	b.n	8006846 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0201 	orr.w	r2, r2, #1
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	e000      	b.n	8006848 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006846:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40010000 	.word	0x40010000
 800685c:	40000400 	.word	0x40000400
 8006860:	40000800 	.word	0x40000800
 8006864:	40000c00 	.word	0x40000c00
 8006868:	40010400 	.word	0x40010400
 800686c:	40014000 	.word	0x40014000
 8006870:	40001800 	.word	0x40001800
 8006874:	00010007 	.word	0x00010007

08006878 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e049      	b.n	800691e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d106      	bne.n	80068a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7fb ff64 	bl	800276c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3304      	adds	r3, #4
 80068b4:	4619      	mov	r1, r3
 80068b6:	4610      	mov	r0, r2
 80068b8:	f000 fb8c 	bl	8006fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
	...

08006928 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d109      	bne.n	800694c <HAL_TIM_PWM_Start+0x24>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b01      	cmp	r3, #1
 8006942:	bf14      	ite	ne
 8006944:	2301      	movne	r3, #1
 8006946:	2300      	moveq	r3, #0
 8006948:	b2db      	uxtb	r3, r3
 800694a:	e03c      	b.n	80069c6 <HAL_TIM_PWM_Start+0x9e>
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2b04      	cmp	r3, #4
 8006950:	d109      	bne.n	8006966 <HAL_TIM_PWM_Start+0x3e>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b01      	cmp	r3, #1
 800695c:	bf14      	ite	ne
 800695e:	2301      	movne	r3, #1
 8006960:	2300      	moveq	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	e02f      	b.n	80069c6 <HAL_TIM_PWM_Start+0x9e>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b08      	cmp	r3, #8
 800696a:	d109      	bne.n	8006980 <HAL_TIM_PWM_Start+0x58>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b01      	cmp	r3, #1
 8006976:	bf14      	ite	ne
 8006978:	2301      	movne	r3, #1
 800697a:	2300      	moveq	r3, #0
 800697c:	b2db      	uxtb	r3, r3
 800697e:	e022      	b.n	80069c6 <HAL_TIM_PWM_Start+0x9e>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b0c      	cmp	r3, #12
 8006984:	d109      	bne.n	800699a <HAL_TIM_PWM_Start+0x72>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b01      	cmp	r3, #1
 8006990:	bf14      	ite	ne
 8006992:	2301      	movne	r3, #1
 8006994:	2300      	moveq	r3, #0
 8006996:	b2db      	uxtb	r3, r3
 8006998:	e015      	b.n	80069c6 <HAL_TIM_PWM_Start+0x9e>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b10      	cmp	r3, #16
 800699e:	d109      	bne.n	80069b4 <HAL_TIM_PWM_Start+0x8c>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	bf14      	ite	ne
 80069ac:	2301      	movne	r3, #1
 80069ae:	2300      	moveq	r3, #0
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	e008      	b.n	80069c6 <HAL_TIM_PWM_Start+0x9e>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b01      	cmp	r3, #1
 80069be:	bf14      	ite	ne
 80069c0:	2301      	movne	r3, #1
 80069c2:	2300      	moveq	r3, #0
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e092      	b.n	8006af4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d104      	bne.n	80069de <HAL_TIM_PWM_Start+0xb6>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069dc:	e023      	b.n	8006a26 <HAL_TIM_PWM_Start+0xfe>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d104      	bne.n	80069ee <HAL_TIM_PWM_Start+0xc6>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069ec:	e01b      	b.n	8006a26 <HAL_TIM_PWM_Start+0xfe>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d104      	bne.n	80069fe <HAL_TIM_PWM_Start+0xd6>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069fc:	e013      	b.n	8006a26 <HAL_TIM_PWM_Start+0xfe>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b0c      	cmp	r3, #12
 8006a02:	d104      	bne.n	8006a0e <HAL_TIM_PWM_Start+0xe6>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a0c:	e00b      	b.n	8006a26 <HAL_TIM_PWM_Start+0xfe>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b10      	cmp	r3, #16
 8006a12:	d104      	bne.n	8006a1e <HAL_TIM_PWM_Start+0xf6>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a1c:	e003      	b.n	8006a26 <HAL_TIM_PWM_Start+0xfe>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2202      	movs	r2, #2
 8006a22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fdce 	bl	80075d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a30      	ldr	r2, [pc, #192]	; (8006afc <HAL_TIM_PWM_Start+0x1d4>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d004      	beq.n	8006a48 <HAL_TIM_PWM_Start+0x120>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a2f      	ldr	r2, [pc, #188]	; (8006b00 <HAL_TIM_PWM_Start+0x1d8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d101      	bne.n	8006a4c <HAL_TIM_PWM_Start+0x124>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <HAL_TIM_PWM_Start+0x126>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a25      	ldr	r2, [pc, #148]	; (8006afc <HAL_TIM_PWM_Start+0x1d4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d022      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x18a>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a74:	d01d      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x18a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a22      	ldr	r2, [pc, #136]	; (8006b04 <HAL_TIM_PWM_Start+0x1dc>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d018      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x18a>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a20      	ldr	r2, [pc, #128]	; (8006b08 <HAL_TIM_PWM_Start+0x1e0>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d013      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x18a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a1f      	ldr	r2, [pc, #124]	; (8006b0c <HAL_TIM_PWM_Start+0x1e4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00e      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x18a>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a19      	ldr	r2, [pc, #100]	; (8006b00 <HAL_TIM_PWM_Start+0x1d8>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d009      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x18a>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a1b      	ldr	r2, [pc, #108]	; (8006b10 <HAL_TIM_PWM_Start+0x1e8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d004      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x18a>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a19      	ldr	r2, [pc, #100]	; (8006b14 <HAL_TIM_PWM_Start+0x1ec>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d115      	bne.n	8006ade <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	4b17      	ldr	r3, [pc, #92]	; (8006b18 <HAL_TIM_PWM_Start+0x1f0>)
 8006aba:	4013      	ands	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b06      	cmp	r3, #6
 8006ac2:	d015      	beq.n	8006af0 <HAL_TIM_PWM_Start+0x1c8>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aca:	d011      	beq.n	8006af0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 0201 	orr.w	r2, r2, #1
 8006ada:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006adc:	e008      	b.n	8006af0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f042 0201 	orr.w	r2, r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	e000      	b.n	8006af2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	40010000 	.word	0x40010000
 8006b00:	40010400 	.word	0x40010400
 8006b04:	40000400 	.word	0x40000400
 8006b08:	40000800 	.word	0x40000800
 8006b0c:	40000c00 	.word	0x40000c00
 8006b10:	40014000 	.word	0x40014000
 8006b14:	40001800 	.word	0x40001800
 8006b18:	00010007 	.word	0x00010007

08006b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d122      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d11b      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f06f 0202 	mvn.w	r2, #2
 8006b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fa1a 	bl	8006f98 <HAL_TIM_IC_CaptureCallback>
 8006b64:	e005      	b.n	8006b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fa0c 	bl	8006f84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fa1d 	bl	8006fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0304 	and.w	r3, r3, #4
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d122      	bne.n	8006bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d11b      	bne.n	8006bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f06f 0204 	mvn.w	r2, #4
 8006b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f9f0 	bl	8006f98 <HAL_TIM_IC_CaptureCallback>
 8006bb8:	e005      	b.n	8006bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f9e2 	bl	8006f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f9f3 	bl	8006fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b08      	cmp	r3, #8
 8006bd8:	d122      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b08      	cmp	r3, #8
 8006be6:	d11b      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f06f 0208 	mvn.w	r2, #8
 8006bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2204      	movs	r2, #4
 8006bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	f003 0303 	and.w	r3, r3, #3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f9c6 	bl	8006f98 <HAL_TIM_IC_CaptureCallback>
 8006c0c:	e005      	b.n	8006c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f9b8 	bl	8006f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f9c9 	bl	8006fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f003 0310 	and.w	r3, r3, #16
 8006c2a:	2b10      	cmp	r3, #16
 8006c2c:	d122      	bne.n	8006c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f003 0310 	and.w	r3, r3, #16
 8006c38:	2b10      	cmp	r3, #16
 8006c3a:	d11b      	bne.n	8006c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f06f 0210 	mvn.w	r2, #16
 8006c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2208      	movs	r2, #8
 8006c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f99c 	bl	8006f98 <HAL_TIM_IC_CaptureCallback>
 8006c60:	e005      	b.n	8006c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f98e 	bl	8006f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f99f 	bl	8006fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d10e      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d107      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f06f 0201 	mvn.w	r2, #1
 8006c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7fb f85c 	bl	8001d58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006caa:	2b80      	cmp	r3, #128	; 0x80
 8006cac:	d10e      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb8:	2b80      	cmp	r3, #128	; 0x80
 8006cba:	d107      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fd40 	bl	800774c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cda:	d10e      	bne.n	8006cfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce6:	2b80      	cmp	r3, #128	; 0x80
 8006ce8:	d107      	bne.n	8006cfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fd33 	bl	8007760 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d04:	2b40      	cmp	r3, #64	; 0x40
 8006d06:	d10e      	bne.n	8006d26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d12:	2b40      	cmp	r3, #64	; 0x40
 8006d14:	d107      	bne.n	8006d26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f94d 	bl	8006fc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	2b20      	cmp	r3, #32
 8006d32:	d10e      	bne.n	8006d52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b20      	cmp	r3, #32
 8006d40:	d107      	bne.n	8006d52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f06f 0220 	mvn.w	r2, #32
 8006d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fcf3 	bl	8007738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
	...

08006d5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d101      	bne.n	8006d7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d76:	2302      	movs	r3, #2
 8006d78:	e0ff      	b.n	8006f7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b14      	cmp	r3, #20
 8006d86:	f200 80f0 	bhi.w	8006f6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d8a:	a201      	add	r2, pc, #4	; (adr r2, 8006d90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d90:	08006de5 	.word	0x08006de5
 8006d94:	08006f6b 	.word	0x08006f6b
 8006d98:	08006f6b 	.word	0x08006f6b
 8006d9c:	08006f6b 	.word	0x08006f6b
 8006da0:	08006e25 	.word	0x08006e25
 8006da4:	08006f6b 	.word	0x08006f6b
 8006da8:	08006f6b 	.word	0x08006f6b
 8006dac:	08006f6b 	.word	0x08006f6b
 8006db0:	08006e67 	.word	0x08006e67
 8006db4:	08006f6b 	.word	0x08006f6b
 8006db8:	08006f6b 	.word	0x08006f6b
 8006dbc:	08006f6b 	.word	0x08006f6b
 8006dc0:	08006ea7 	.word	0x08006ea7
 8006dc4:	08006f6b 	.word	0x08006f6b
 8006dc8:	08006f6b 	.word	0x08006f6b
 8006dcc:	08006f6b 	.word	0x08006f6b
 8006dd0:	08006ee9 	.word	0x08006ee9
 8006dd4:	08006f6b 	.word	0x08006f6b
 8006dd8:	08006f6b 	.word	0x08006f6b
 8006ddc:	08006f6b 	.word	0x08006f6b
 8006de0:	08006f29 	.word	0x08006f29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68b9      	ldr	r1, [r7, #8]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 f992 	bl	8007114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	699a      	ldr	r2, [r3, #24]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0208 	orr.w	r2, r2, #8
 8006dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699a      	ldr	r2, [r3, #24]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0204 	bic.w	r2, r2, #4
 8006e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6999      	ldr	r1, [r3, #24]
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	691a      	ldr	r2, [r3, #16]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	619a      	str	r2, [r3, #24]
      break;
 8006e22:	e0a5      	b.n	8006f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68b9      	ldr	r1, [r7, #8]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 f9e4 	bl	80071f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	699a      	ldr	r2, [r3, #24]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699a      	ldr	r2, [r3, #24]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6999      	ldr	r1, [r3, #24]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	021a      	lsls	r2, r3, #8
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	619a      	str	r2, [r3, #24]
      break;
 8006e64:	e084      	b.n	8006f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68b9      	ldr	r1, [r7, #8]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 fa3b 	bl	80072e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69da      	ldr	r2, [r3, #28]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f042 0208 	orr.w	r2, r2, #8
 8006e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69da      	ldr	r2, [r3, #28]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 0204 	bic.w	r2, r2, #4
 8006e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69d9      	ldr	r1, [r3, #28]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	691a      	ldr	r2, [r3, #16]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	61da      	str	r2, [r3, #28]
      break;
 8006ea4:	e064      	b.n	8006f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68b9      	ldr	r1, [r7, #8]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 fa91 	bl	80073d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	69da      	ldr	r2, [r3, #28]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	69da      	ldr	r2, [r3, #28]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69d9      	ldr	r1, [r3, #28]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	021a      	lsls	r2, r3, #8
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	61da      	str	r2, [r3, #28]
      break;
 8006ee6:	e043      	b.n	8006f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68b9      	ldr	r1, [r7, #8]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f000 fac8 	bl	8007484 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 0208 	orr.w	r2, r2, #8
 8006f02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0204 	bic.w	r2, r2, #4
 8006f12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	691a      	ldr	r2, [r3, #16]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	430a      	orrs	r2, r1
 8006f24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f26:	e023      	b.n	8006f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fafa 	bl	8007528 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	021a      	lsls	r2, r3, #8
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f68:	e002      	b.n	8006f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop

08006f84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a40      	ldr	r2, [pc, #256]	; (80070e8 <TIM_Base_SetConfig+0x114>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d013      	beq.n	8007014 <TIM_Base_SetConfig+0x40>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff2:	d00f      	beq.n	8007014 <TIM_Base_SetConfig+0x40>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a3d      	ldr	r2, [pc, #244]	; (80070ec <TIM_Base_SetConfig+0x118>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d00b      	beq.n	8007014 <TIM_Base_SetConfig+0x40>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a3c      	ldr	r2, [pc, #240]	; (80070f0 <TIM_Base_SetConfig+0x11c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d007      	beq.n	8007014 <TIM_Base_SetConfig+0x40>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a3b      	ldr	r2, [pc, #236]	; (80070f4 <TIM_Base_SetConfig+0x120>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d003      	beq.n	8007014 <TIM_Base_SetConfig+0x40>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a3a      	ldr	r2, [pc, #232]	; (80070f8 <TIM_Base_SetConfig+0x124>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d108      	bne.n	8007026 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	4313      	orrs	r3, r2
 8007024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a2f      	ldr	r2, [pc, #188]	; (80070e8 <TIM_Base_SetConfig+0x114>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d02b      	beq.n	8007086 <TIM_Base_SetConfig+0xb2>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007034:	d027      	beq.n	8007086 <TIM_Base_SetConfig+0xb2>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a2c      	ldr	r2, [pc, #176]	; (80070ec <TIM_Base_SetConfig+0x118>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d023      	beq.n	8007086 <TIM_Base_SetConfig+0xb2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a2b      	ldr	r2, [pc, #172]	; (80070f0 <TIM_Base_SetConfig+0x11c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d01f      	beq.n	8007086 <TIM_Base_SetConfig+0xb2>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a2a      	ldr	r2, [pc, #168]	; (80070f4 <TIM_Base_SetConfig+0x120>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d01b      	beq.n	8007086 <TIM_Base_SetConfig+0xb2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a29      	ldr	r2, [pc, #164]	; (80070f8 <TIM_Base_SetConfig+0x124>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d017      	beq.n	8007086 <TIM_Base_SetConfig+0xb2>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a28      	ldr	r2, [pc, #160]	; (80070fc <TIM_Base_SetConfig+0x128>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d013      	beq.n	8007086 <TIM_Base_SetConfig+0xb2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a27      	ldr	r2, [pc, #156]	; (8007100 <TIM_Base_SetConfig+0x12c>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d00f      	beq.n	8007086 <TIM_Base_SetConfig+0xb2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a26      	ldr	r2, [pc, #152]	; (8007104 <TIM_Base_SetConfig+0x130>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d00b      	beq.n	8007086 <TIM_Base_SetConfig+0xb2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a25      	ldr	r2, [pc, #148]	; (8007108 <TIM_Base_SetConfig+0x134>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d007      	beq.n	8007086 <TIM_Base_SetConfig+0xb2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a24      	ldr	r2, [pc, #144]	; (800710c <TIM_Base_SetConfig+0x138>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d003      	beq.n	8007086 <TIM_Base_SetConfig+0xb2>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a23      	ldr	r2, [pc, #140]	; (8007110 <TIM_Base_SetConfig+0x13c>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d108      	bne.n	8007098 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800708c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	4313      	orrs	r3, r2
 8007096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a0a      	ldr	r2, [pc, #40]	; (80070e8 <TIM_Base_SetConfig+0x114>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d003      	beq.n	80070cc <TIM_Base_SetConfig+0xf8>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a0c      	ldr	r2, [pc, #48]	; (80070f8 <TIM_Base_SetConfig+0x124>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d103      	bne.n	80070d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	691a      	ldr	r2, [r3, #16]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	615a      	str	r2, [r3, #20]
}
 80070da:	bf00      	nop
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	40010000 	.word	0x40010000
 80070ec:	40000400 	.word	0x40000400
 80070f0:	40000800 	.word	0x40000800
 80070f4:	40000c00 	.word	0x40000c00
 80070f8:	40010400 	.word	0x40010400
 80070fc:	40014000 	.word	0x40014000
 8007100:	40014400 	.word	0x40014400
 8007104:	40014800 	.word	0x40014800
 8007108:	40001800 	.word	0x40001800
 800710c:	40001c00 	.word	0x40001c00
 8007110:	40002000 	.word	0x40002000

08007114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	f023 0201 	bic.w	r2, r3, #1
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4b2b      	ldr	r3, [pc, #172]	; (80071ec <TIM_OC1_SetConfig+0xd8>)
 8007140:	4013      	ands	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0303 	bic.w	r3, r3, #3
 800714a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f023 0302 	bic.w	r3, r3, #2
 800715c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	4313      	orrs	r3, r2
 8007166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a21      	ldr	r2, [pc, #132]	; (80071f0 <TIM_OC1_SetConfig+0xdc>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d003      	beq.n	8007178 <TIM_OC1_SetConfig+0x64>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a20      	ldr	r2, [pc, #128]	; (80071f4 <TIM_OC1_SetConfig+0xe0>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d10c      	bne.n	8007192 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f023 0308 	bic.w	r3, r3, #8
 800717e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f023 0304 	bic.w	r3, r3, #4
 8007190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a16      	ldr	r2, [pc, #88]	; (80071f0 <TIM_OC1_SetConfig+0xdc>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d003      	beq.n	80071a2 <TIM_OC1_SetConfig+0x8e>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a15      	ldr	r2, [pc, #84]	; (80071f4 <TIM_OC1_SetConfig+0xe0>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d111      	bne.n	80071c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	621a      	str	r2, [r3, #32]
}
 80071e0:	bf00      	nop
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	fffeff8f 	.word	0xfffeff8f
 80071f0:	40010000 	.word	0x40010000
 80071f4:	40010400 	.word	0x40010400

080071f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	f023 0210 	bic.w	r2, r3, #16
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4b2e      	ldr	r3, [pc, #184]	; (80072dc <TIM_OC2_SetConfig+0xe4>)
 8007224:	4013      	ands	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800722e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	021b      	lsls	r3, r3, #8
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	4313      	orrs	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f023 0320 	bic.w	r3, r3, #32
 8007242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	011b      	lsls	r3, r3, #4
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	4313      	orrs	r3, r2
 800724e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a23      	ldr	r2, [pc, #140]	; (80072e0 <TIM_OC2_SetConfig+0xe8>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d003      	beq.n	8007260 <TIM_OC2_SetConfig+0x68>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a22      	ldr	r2, [pc, #136]	; (80072e4 <TIM_OC2_SetConfig+0xec>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d10d      	bne.n	800727c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	011b      	lsls	r3, r3, #4
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4313      	orrs	r3, r2
 8007272:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800727a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a18      	ldr	r2, [pc, #96]	; (80072e0 <TIM_OC2_SetConfig+0xe8>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d003      	beq.n	800728c <TIM_OC2_SetConfig+0x94>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a17      	ldr	r2, [pc, #92]	; (80072e4 <TIM_OC2_SetConfig+0xec>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d113      	bne.n	80072b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800729a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	621a      	str	r2, [r3, #32]
}
 80072ce:	bf00      	nop
 80072d0:	371c      	adds	r7, #28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	feff8fff 	.word	0xfeff8fff
 80072e0:	40010000 	.word	0x40010000
 80072e4:	40010400 	.word	0x40010400

080072e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	4b2d      	ldr	r3, [pc, #180]	; (80073c8 <TIM_OC3_SetConfig+0xe0>)
 8007314:	4013      	ands	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 0303 	bic.w	r3, r3, #3
 800731e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	021b      	lsls	r3, r3, #8
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	4313      	orrs	r3, r2
 800733c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a22      	ldr	r2, [pc, #136]	; (80073cc <TIM_OC3_SetConfig+0xe4>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d003      	beq.n	800734e <TIM_OC3_SetConfig+0x66>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a21      	ldr	r2, [pc, #132]	; (80073d0 <TIM_OC3_SetConfig+0xe8>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d10d      	bne.n	800736a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	021b      	lsls	r3, r3, #8
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	4313      	orrs	r3, r2
 8007360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a17      	ldr	r2, [pc, #92]	; (80073cc <TIM_OC3_SetConfig+0xe4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d003      	beq.n	800737a <TIM_OC3_SetConfig+0x92>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a16      	ldr	r2, [pc, #88]	; (80073d0 <TIM_OC3_SetConfig+0xe8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d113      	bne.n	80073a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	011b      	lsls	r3, r3, #4
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	4313      	orrs	r3, r2
 8007394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	011b      	lsls	r3, r3, #4
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	4313      	orrs	r3, r2
 80073a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	621a      	str	r2, [r3, #32]
}
 80073bc:	bf00      	nop
 80073be:	371c      	adds	r7, #28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	fffeff8f 	.word	0xfffeff8f
 80073cc:	40010000 	.word	0x40010000
 80073d0:	40010400 	.word	0x40010400

080073d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	4b1e      	ldr	r3, [pc, #120]	; (8007478 <TIM_OC4_SetConfig+0xa4>)
 8007400:	4013      	ands	r3, r2
 8007402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800740a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	021b      	lsls	r3, r3, #8
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	4313      	orrs	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800741e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	031b      	lsls	r3, r3, #12
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	4313      	orrs	r3, r2
 800742a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a13      	ldr	r2, [pc, #76]	; (800747c <TIM_OC4_SetConfig+0xa8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d003      	beq.n	800743c <TIM_OC4_SetConfig+0x68>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a12      	ldr	r2, [pc, #72]	; (8007480 <TIM_OC4_SetConfig+0xac>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d109      	bne.n	8007450 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007442:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	019b      	lsls	r3, r3, #6
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	4313      	orrs	r3, r2
 800744e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	621a      	str	r2, [r3, #32]
}
 800746a:	bf00      	nop
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	feff8fff 	.word	0xfeff8fff
 800747c:	40010000 	.word	0x40010000
 8007480:	40010400 	.word	0x40010400

08007484 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	4b1b      	ldr	r3, [pc, #108]	; (800751c <TIM_OC5_SetConfig+0x98>)
 80074b0:	4013      	ands	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80074c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	041b      	lsls	r3, r3, #16
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a12      	ldr	r2, [pc, #72]	; (8007520 <TIM_OC5_SetConfig+0x9c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d003      	beq.n	80074e2 <TIM_OC5_SetConfig+0x5e>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a11      	ldr	r2, [pc, #68]	; (8007524 <TIM_OC5_SetConfig+0xa0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d109      	bne.n	80074f6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	021b      	lsls	r3, r3, #8
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	621a      	str	r2, [r3, #32]
}
 8007510:	bf00      	nop
 8007512:	371c      	adds	r7, #28
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	fffeff8f 	.word	0xfffeff8f
 8007520:	40010000 	.word	0x40010000
 8007524:	40010400 	.word	0x40010400

08007528 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007528:	b480      	push	{r7}
 800752a:	b087      	sub	sp, #28
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	4b1c      	ldr	r3, [pc, #112]	; (80075c4 <TIM_OC6_SetConfig+0x9c>)
 8007554:	4013      	ands	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	021b      	lsls	r3, r3, #8
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	4313      	orrs	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800756a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	051b      	lsls	r3, r3, #20
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	4313      	orrs	r3, r2
 8007576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a13      	ldr	r2, [pc, #76]	; (80075c8 <TIM_OC6_SetConfig+0xa0>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d003      	beq.n	8007588 <TIM_OC6_SetConfig+0x60>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a12      	ldr	r2, [pc, #72]	; (80075cc <TIM_OC6_SetConfig+0xa4>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d109      	bne.n	800759c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800758e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	029b      	lsls	r3, r3, #10
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4313      	orrs	r3, r2
 800759a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	621a      	str	r2, [r3, #32]
}
 80075b6:	bf00      	nop
 80075b8:	371c      	adds	r7, #28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	feff8fff 	.word	0xfeff8fff
 80075c8:	40010000 	.word	0x40010000
 80075cc:	40010400 	.word	0x40010400

080075d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f003 031f 	and.w	r3, r3, #31
 80075e2:	2201      	movs	r2, #1
 80075e4:	fa02 f303 	lsl.w	r3, r2, r3
 80075e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a1a      	ldr	r2, [r3, #32]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	43db      	mvns	r3, r3
 80075f2:	401a      	ands	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a1a      	ldr	r2, [r3, #32]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	f003 031f 	and.w	r3, r3, #31
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	fa01 f303 	lsl.w	r3, r1, r3
 8007608:	431a      	orrs	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	621a      	str	r2, [r3, #32]
}
 800760e:	bf00      	nop
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
	...

0800761c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800762c:	2b01      	cmp	r3, #1
 800762e:	d101      	bne.n	8007634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007630:	2302      	movs	r3, #2
 8007632:	e06d      	b.n	8007710 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a30      	ldr	r2, [pc, #192]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d004      	beq.n	8007668 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a2f      	ldr	r2, [pc, #188]	; (8007720 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d108      	bne.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800766e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007680:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a20      	ldr	r2, [pc, #128]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d022      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a6:	d01d      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a1d      	ldr	r2, [pc, #116]	; (8007724 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d018      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a1c      	ldr	r2, [pc, #112]	; (8007728 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d013      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a1a      	ldr	r2, [pc, #104]	; (800772c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d00e      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a15      	ldr	r2, [pc, #84]	; (8007720 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d009      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a16      	ldr	r2, [pc, #88]	; (8007730 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d004      	beq.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a15      	ldr	r2, [pc, #84]	; (8007734 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d10c      	bne.n	80076fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	40010000 	.word	0x40010000
 8007720:	40010400 	.word	0x40010400
 8007724:	40000400 	.word	0x40000400
 8007728:	40000800 	.word	0x40000800
 800772c:	40000c00 	.word	0x40000c00
 8007730:	40014000 	.word	0x40014000
 8007734:	40001800 	.word	0x40001800

08007738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e040      	b.n	8007808 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800778a:	2b00      	cmp	r3, #0
 800778c:	d106      	bne.n	800779c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7fb f870 	bl	800287c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2224      	movs	r2, #36	; 0x24
 80077a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 0201 	bic.w	r2, r2, #1
 80077b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fb82 	bl	8007ebc <UART_SetConfig>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d101      	bne.n	80077c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e022      	b.n	8007808 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d002      	beq.n	80077d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fdda 	bl	8008384 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689a      	ldr	r2, [r3, #8]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0201 	orr.w	r2, r2, #1
 80077fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fe61 	bl	80084c8 <UART_CheckIdleState>
 8007806:	4603      	mov	r3, r0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08a      	sub	sp, #40	; 0x28
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	4613      	mov	r3, r2
 800781c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007824:	2b20      	cmp	r3, #32
 8007826:	d132      	bne.n	800788e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <HAL_UART_Receive_IT+0x24>
 800782e:	88fb      	ldrh	r3, [r7, #6]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e02b      	b.n	8007890 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d018      	beq.n	800787e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	613b      	str	r3, [r7, #16]
   return(result);
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007860:	627b      	str	r3, [r7, #36]	; 0x24
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	623b      	str	r3, [r7, #32]
 800786c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	69f9      	ldr	r1, [r7, #28]
 8007870:	6a3a      	ldr	r2, [r7, #32]
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	61bb      	str	r3, [r7, #24]
   return(result);
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e6      	bne.n	800784c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800787e:	88fb      	ldrh	r3, [r7, #6]
 8007880:	461a      	mov	r2, r3
 8007882:	68b9      	ldr	r1, [r7, #8]
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 ff33 	bl	80086f0 <UART_Start_Receive_IT>
 800788a:	4603      	mov	r3, r0
 800788c:	e000      	b.n	8007890 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800788e:	2302      	movs	r3, #2
  }
}
 8007890:	4618      	mov	r0, r3
 8007892:	3728      	adds	r7, #40	; 0x28
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b0ba      	sub	sp, #232	; 0xe8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80078c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80078c6:	4013      	ands	r3, r2
 80078c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80078cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d115      	bne.n	8007900 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80078d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d8:	f003 0320 	and.w	r3, r3, #32
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00f      	beq.n	8007900 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078e4:	f003 0320 	and.w	r3, r3, #32
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d009      	beq.n	8007900 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 82ac 	beq.w	8007e4e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	4798      	blx	r3
      }
      return;
 80078fe:	e2a6      	b.n	8007e4e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 8117 	beq.w	8007b38 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800790a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b00      	cmp	r3, #0
 8007914:	d106      	bne.n	8007924 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007916:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800791a:	4b85      	ldr	r3, [pc, #532]	; (8007b30 <HAL_UART_IRQHandler+0x298>)
 800791c:	4013      	ands	r3, r2
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 810a 	beq.w	8007b38 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b00      	cmp	r3, #0
 800792e:	d011      	beq.n	8007954 <HAL_UART_IRQHandler+0xbc>
 8007930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00b      	beq.n	8007954 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2201      	movs	r2, #1
 8007942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800794a:	f043 0201 	orr.w	r2, r3, #1
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d011      	beq.n	8007984 <HAL_UART_IRQHandler+0xec>
 8007960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00b      	beq.n	8007984 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2202      	movs	r2, #2
 8007972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800797a:	f043 0204 	orr.w	r2, r3, #4
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007988:	f003 0304 	and.w	r3, r3, #4
 800798c:	2b00      	cmp	r3, #0
 800798e:	d011      	beq.n	80079b4 <HAL_UART_IRQHandler+0x11c>
 8007990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00b      	beq.n	80079b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2204      	movs	r2, #4
 80079a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079aa:	f043 0202 	orr.w	r2, r3, #2
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b8:	f003 0308 	and.w	r3, r3, #8
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d017      	beq.n	80079f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c4:	f003 0320 	and.w	r3, r3, #32
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d105      	bne.n	80079d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80079cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00b      	beq.n	80079f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2208      	movs	r2, #8
 80079de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079e6:	f043 0208 	orr.w	r2, r3, #8
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d012      	beq.n	8007a22 <HAL_UART_IRQHandler+0x18a>
 80079fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00c      	beq.n	8007a22 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a18:	f043 0220 	orr.w	r2, r3, #32
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 8212 	beq.w	8007e52 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00d      	beq.n	8007a56 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a3e:	f003 0320 	and.w	r3, r3, #32
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d007      	beq.n	8007a56 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6a:	2b40      	cmp	r3, #64	; 0x40
 8007a6c:	d005      	beq.n	8007a7a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d04f      	beq.n	8007b1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fefe 	bl	800887c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8a:	2b40      	cmp	r3, #64	; 0x40
 8007a8c:	d141      	bne.n	8007b12 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3308      	adds	r3, #8
 8007a94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007aba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ac6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1d9      	bne.n	8007a8e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d013      	beq.n	8007b0a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae6:	4a13      	ldr	r2, [pc, #76]	; (8007b34 <HAL_UART_IRQHandler+0x29c>)
 8007ae8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fb fe46 	bl	8003780 <HAL_DMA_Abort_IT>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d017      	beq.n	8007b2a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007b04:	4610      	mov	r0, r2
 8007b06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b08:	e00f      	b.n	8007b2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f9b6 	bl	8007e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b10:	e00b      	b.n	8007b2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f9b2 	bl	8007e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b18:	e007      	b.n	8007b2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f9ae 	bl	8007e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007b28:	e193      	b.n	8007e52 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b2a:	bf00      	nop
    return;
 8007b2c:	e191      	b.n	8007e52 <HAL_UART_IRQHandler+0x5ba>
 8007b2e:	bf00      	nop
 8007b30:	04000120 	.word	0x04000120
 8007b34:	08008945 	.word	0x08008945

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	f040 814c 	bne.w	8007dda <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b46:	f003 0310 	and.w	r3, r3, #16
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 8145 	beq.w	8007dda <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b54:	f003 0310 	and.w	r3, r3, #16
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 813e 	beq.w	8007dda <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2210      	movs	r2, #16
 8007b64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b70:	2b40      	cmp	r3, #64	; 0x40
 8007b72:	f040 80b6 	bne.w	8007ce2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 8165 	beq.w	8007e56 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b96:	429a      	cmp	r2, r3
 8007b98:	f080 815d 	bcs.w	8007e56 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ba2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007baa:	69db      	ldr	r3, [r3, #28]
 8007bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bb0:	f000 8086 	beq.w	8007cc0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007bc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007be2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007bea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007bee:	e841 2300 	strex	r3, r2, [r1]
 8007bf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1da      	bne.n	8007bb4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3308      	adds	r3, #8
 8007c04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c10:	f023 0301 	bic.w	r3, r3, #1
 8007c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e1      	bne.n	8007bfe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3308      	adds	r3, #8
 8007c40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c44:	e853 3f00 	ldrex	r3, [r3]
 8007c48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3308      	adds	r3, #8
 8007c5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c66:	e841 2300 	strex	r3, r2, [r1]
 8007c6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1e3      	bne.n	8007c3a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c88:	e853 3f00 	ldrex	r3, [r3]
 8007c8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c90:	f023 0310 	bic.w	r3, r3, #16
 8007c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ca2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ca4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ca8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007caa:	e841 2300 	strex	r3, r2, [r1]
 8007cae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e4      	bne.n	8007c80 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fb fcf0 	bl	80036a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f8d8 	bl	8007e90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ce0:	e0b9      	b.n	8007e56 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f000 80ab 	beq.w	8007e5a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007d04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 80a6 	beq.w	8007e5a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	e853 3f00 	ldrex	r3, [r3]
 8007d1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d30:	647b      	str	r3, [r7, #68]	; 0x44
 8007d32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e4      	bne.n	8007d0e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3308      	adds	r3, #8
 8007d4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	e853 3f00 	ldrex	r3, [r3]
 8007d52:	623b      	str	r3, [r7, #32]
   return(result);
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	f023 0301 	bic.w	r3, r3, #1
 8007d5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3308      	adds	r3, #8
 8007d64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d68:	633a      	str	r2, [r7, #48]	; 0x30
 8007d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d70:	e841 2300 	strex	r3, r2, [r1]
 8007d74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1e3      	bne.n	8007d44 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	e853 3f00 	ldrex	r3, [r3]
 8007d9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f023 0310 	bic.w	r3, r3, #16
 8007da4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	461a      	mov	r2, r3
 8007dae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007db2:	61fb      	str	r3, [r7, #28]
 8007db4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db6:	69b9      	ldr	r1, [r7, #24]
 8007db8:	69fa      	ldr	r2, [r7, #28]
 8007dba:	e841 2300 	strex	r3, r2, [r1]
 8007dbe:	617b      	str	r3, [r7, #20]
   return(result);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e4      	bne.n	8007d90 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f85c 	bl	8007e90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dd8:	e03f      	b.n	8007e5a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00e      	beq.n	8007e04 <HAL_UART_IRQHandler+0x56c>
 8007de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d008      	beq.n	8007e04 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007dfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f853 	bl	8007ea8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e02:	e02d      	b.n	8007e60 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00e      	beq.n	8007e2e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d008      	beq.n	8007e2e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d01c      	beq.n	8007e5e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	4798      	blx	r3
    }
    return;
 8007e2c:	e017      	b.n	8007e5e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d012      	beq.n	8007e60 <HAL_UART_IRQHandler+0x5c8>
 8007e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00c      	beq.n	8007e60 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fd92 	bl	8008970 <UART_EndTransmit_IT>
    return;
 8007e4c:	e008      	b.n	8007e60 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007e4e:	bf00      	nop
 8007e50:	e006      	b.n	8007e60 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007e52:	bf00      	nop
 8007e54:	e004      	b.n	8007e60 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007e56:	bf00      	nop
 8007e58:	e002      	b.n	8007e60 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007e5a:	bf00      	nop
 8007e5c:	e000      	b.n	8007e60 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007e5e:	bf00      	nop
  }

}
 8007e60:	37e8      	adds	r7, #232	; 0xe8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop

08007e68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	431a      	orrs	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	4ba6      	ldr	r3, [pc, #664]	; (8008180 <UART_SetConfig+0x2c4>)
 8007ee8:	4013      	ands	r3, r2
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	6812      	ldr	r2, [r2, #0]
 8007eee:	6979      	ldr	r1, [r7, #20]
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a1b      	ldr	r3, [r3, #32]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a94      	ldr	r2, [pc, #592]	; (8008184 <UART_SetConfig+0x2c8>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d120      	bne.n	8007f7a <UART_SetConfig+0xbe>
 8007f38:	4b93      	ldr	r3, [pc, #588]	; (8008188 <UART_SetConfig+0x2cc>)
 8007f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f3e:	f003 0303 	and.w	r3, r3, #3
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d816      	bhi.n	8007f74 <UART_SetConfig+0xb8>
 8007f46:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <UART_SetConfig+0x90>)
 8007f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4c:	08007f5d 	.word	0x08007f5d
 8007f50:	08007f69 	.word	0x08007f69
 8007f54:	08007f63 	.word	0x08007f63
 8007f58:	08007f6f 	.word	0x08007f6f
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	77fb      	strb	r3, [r7, #31]
 8007f60:	e150      	b.n	8008204 <UART_SetConfig+0x348>
 8007f62:	2302      	movs	r3, #2
 8007f64:	77fb      	strb	r3, [r7, #31]
 8007f66:	e14d      	b.n	8008204 <UART_SetConfig+0x348>
 8007f68:	2304      	movs	r3, #4
 8007f6a:	77fb      	strb	r3, [r7, #31]
 8007f6c:	e14a      	b.n	8008204 <UART_SetConfig+0x348>
 8007f6e:	2308      	movs	r3, #8
 8007f70:	77fb      	strb	r3, [r7, #31]
 8007f72:	e147      	b.n	8008204 <UART_SetConfig+0x348>
 8007f74:	2310      	movs	r3, #16
 8007f76:	77fb      	strb	r3, [r7, #31]
 8007f78:	e144      	b.n	8008204 <UART_SetConfig+0x348>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a83      	ldr	r2, [pc, #524]	; (800818c <UART_SetConfig+0x2d0>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d132      	bne.n	8007fea <UART_SetConfig+0x12e>
 8007f84:	4b80      	ldr	r3, [pc, #512]	; (8008188 <UART_SetConfig+0x2cc>)
 8007f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f8a:	f003 030c 	and.w	r3, r3, #12
 8007f8e:	2b0c      	cmp	r3, #12
 8007f90:	d828      	bhi.n	8007fe4 <UART_SetConfig+0x128>
 8007f92:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <UART_SetConfig+0xdc>)
 8007f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f98:	08007fcd 	.word	0x08007fcd
 8007f9c:	08007fe5 	.word	0x08007fe5
 8007fa0:	08007fe5 	.word	0x08007fe5
 8007fa4:	08007fe5 	.word	0x08007fe5
 8007fa8:	08007fd9 	.word	0x08007fd9
 8007fac:	08007fe5 	.word	0x08007fe5
 8007fb0:	08007fe5 	.word	0x08007fe5
 8007fb4:	08007fe5 	.word	0x08007fe5
 8007fb8:	08007fd3 	.word	0x08007fd3
 8007fbc:	08007fe5 	.word	0x08007fe5
 8007fc0:	08007fe5 	.word	0x08007fe5
 8007fc4:	08007fe5 	.word	0x08007fe5
 8007fc8:	08007fdf 	.word	0x08007fdf
 8007fcc:	2300      	movs	r3, #0
 8007fce:	77fb      	strb	r3, [r7, #31]
 8007fd0:	e118      	b.n	8008204 <UART_SetConfig+0x348>
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	77fb      	strb	r3, [r7, #31]
 8007fd6:	e115      	b.n	8008204 <UART_SetConfig+0x348>
 8007fd8:	2304      	movs	r3, #4
 8007fda:	77fb      	strb	r3, [r7, #31]
 8007fdc:	e112      	b.n	8008204 <UART_SetConfig+0x348>
 8007fde:	2308      	movs	r3, #8
 8007fe0:	77fb      	strb	r3, [r7, #31]
 8007fe2:	e10f      	b.n	8008204 <UART_SetConfig+0x348>
 8007fe4:	2310      	movs	r3, #16
 8007fe6:	77fb      	strb	r3, [r7, #31]
 8007fe8:	e10c      	b.n	8008204 <UART_SetConfig+0x348>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a68      	ldr	r2, [pc, #416]	; (8008190 <UART_SetConfig+0x2d4>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d120      	bne.n	8008036 <UART_SetConfig+0x17a>
 8007ff4:	4b64      	ldr	r3, [pc, #400]	; (8008188 <UART_SetConfig+0x2cc>)
 8007ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ffa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ffe:	2b30      	cmp	r3, #48	; 0x30
 8008000:	d013      	beq.n	800802a <UART_SetConfig+0x16e>
 8008002:	2b30      	cmp	r3, #48	; 0x30
 8008004:	d814      	bhi.n	8008030 <UART_SetConfig+0x174>
 8008006:	2b20      	cmp	r3, #32
 8008008:	d009      	beq.n	800801e <UART_SetConfig+0x162>
 800800a:	2b20      	cmp	r3, #32
 800800c:	d810      	bhi.n	8008030 <UART_SetConfig+0x174>
 800800e:	2b00      	cmp	r3, #0
 8008010:	d002      	beq.n	8008018 <UART_SetConfig+0x15c>
 8008012:	2b10      	cmp	r3, #16
 8008014:	d006      	beq.n	8008024 <UART_SetConfig+0x168>
 8008016:	e00b      	b.n	8008030 <UART_SetConfig+0x174>
 8008018:	2300      	movs	r3, #0
 800801a:	77fb      	strb	r3, [r7, #31]
 800801c:	e0f2      	b.n	8008204 <UART_SetConfig+0x348>
 800801e:	2302      	movs	r3, #2
 8008020:	77fb      	strb	r3, [r7, #31]
 8008022:	e0ef      	b.n	8008204 <UART_SetConfig+0x348>
 8008024:	2304      	movs	r3, #4
 8008026:	77fb      	strb	r3, [r7, #31]
 8008028:	e0ec      	b.n	8008204 <UART_SetConfig+0x348>
 800802a:	2308      	movs	r3, #8
 800802c:	77fb      	strb	r3, [r7, #31]
 800802e:	e0e9      	b.n	8008204 <UART_SetConfig+0x348>
 8008030:	2310      	movs	r3, #16
 8008032:	77fb      	strb	r3, [r7, #31]
 8008034:	e0e6      	b.n	8008204 <UART_SetConfig+0x348>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a56      	ldr	r2, [pc, #344]	; (8008194 <UART_SetConfig+0x2d8>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d120      	bne.n	8008082 <UART_SetConfig+0x1c6>
 8008040:	4b51      	ldr	r3, [pc, #324]	; (8008188 <UART_SetConfig+0x2cc>)
 8008042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008046:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800804a:	2bc0      	cmp	r3, #192	; 0xc0
 800804c:	d013      	beq.n	8008076 <UART_SetConfig+0x1ba>
 800804e:	2bc0      	cmp	r3, #192	; 0xc0
 8008050:	d814      	bhi.n	800807c <UART_SetConfig+0x1c0>
 8008052:	2b80      	cmp	r3, #128	; 0x80
 8008054:	d009      	beq.n	800806a <UART_SetConfig+0x1ae>
 8008056:	2b80      	cmp	r3, #128	; 0x80
 8008058:	d810      	bhi.n	800807c <UART_SetConfig+0x1c0>
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <UART_SetConfig+0x1a8>
 800805e:	2b40      	cmp	r3, #64	; 0x40
 8008060:	d006      	beq.n	8008070 <UART_SetConfig+0x1b4>
 8008062:	e00b      	b.n	800807c <UART_SetConfig+0x1c0>
 8008064:	2300      	movs	r3, #0
 8008066:	77fb      	strb	r3, [r7, #31]
 8008068:	e0cc      	b.n	8008204 <UART_SetConfig+0x348>
 800806a:	2302      	movs	r3, #2
 800806c:	77fb      	strb	r3, [r7, #31]
 800806e:	e0c9      	b.n	8008204 <UART_SetConfig+0x348>
 8008070:	2304      	movs	r3, #4
 8008072:	77fb      	strb	r3, [r7, #31]
 8008074:	e0c6      	b.n	8008204 <UART_SetConfig+0x348>
 8008076:	2308      	movs	r3, #8
 8008078:	77fb      	strb	r3, [r7, #31]
 800807a:	e0c3      	b.n	8008204 <UART_SetConfig+0x348>
 800807c:	2310      	movs	r3, #16
 800807e:	77fb      	strb	r3, [r7, #31]
 8008080:	e0c0      	b.n	8008204 <UART_SetConfig+0x348>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a44      	ldr	r2, [pc, #272]	; (8008198 <UART_SetConfig+0x2dc>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d125      	bne.n	80080d8 <UART_SetConfig+0x21c>
 800808c:	4b3e      	ldr	r3, [pc, #248]	; (8008188 <UART_SetConfig+0x2cc>)
 800808e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800809a:	d017      	beq.n	80080cc <UART_SetConfig+0x210>
 800809c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080a0:	d817      	bhi.n	80080d2 <UART_SetConfig+0x216>
 80080a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a6:	d00b      	beq.n	80080c0 <UART_SetConfig+0x204>
 80080a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ac:	d811      	bhi.n	80080d2 <UART_SetConfig+0x216>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <UART_SetConfig+0x1fe>
 80080b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080b6:	d006      	beq.n	80080c6 <UART_SetConfig+0x20a>
 80080b8:	e00b      	b.n	80080d2 <UART_SetConfig+0x216>
 80080ba:	2300      	movs	r3, #0
 80080bc:	77fb      	strb	r3, [r7, #31]
 80080be:	e0a1      	b.n	8008204 <UART_SetConfig+0x348>
 80080c0:	2302      	movs	r3, #2
 80080c2:	77fb      	strb	r3, [r7, #31]
 80080c4:	e09e      	b.n	8008204 <UART_SetConfig+0x348>
 80080c6:	2304      	movs	r3, #4
 80080c8:	77fb      	strb	r3, [r7, #31]
 80080ca:	e09b      	b.n	8008204 <UART_SetConfig+0x348>
 80080cc:	2308      	movs	r3, #8
 80080ce:	77fb      	strb	r3, [r7, #31]
 80080d0:	e098      	b.n	8008204 <UART_SetConfig+0x348>
 80080d2:	2310      	movs	r3, #16
 80080d4:	77fb      	strb	r3, [r7, #31]
 80080d6:	e095      	b.n	8008204 <UART_SetConfig+0x348>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a2f      	ldr	r2, [pc, #188]	; (800819c <UART_SetConfig+0x2e0>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d125      	bne.n	800812e <UART_SetConfig+0x272>
 80080e2:	4b29      	ldr	r3, [pc, #164]	; (8008188 <UART_SetConfig+0x2cc>)
 80080e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080f0:	d017      	beq.n	8008122 <UART_SetConfig+0x266>
 80080f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080f6:	d817      	bhi.n	8008128 <UART_SetConfig+0x26c>
 80080f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080fc:	d00b      	beq.n	8008116 <UART_SetConfig+0x25a>
 80080fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008102:	d811      	bhi.n	8008128 <UART_SetConfig+0x26c>
 8008104:	2b00      	cmp	r3, #0
 8008106:	d003      	beq.n	8008110 <UART_SetConfig+0x254>
 8008108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800810c:	d006      	beq.n	800811c <UART_SetConfig+0x260>
 800810e:	e00b      	b.n	8008128 <UART_SetConfig+0x26c>
 8008110:	2301      	movs	r3, #1
 8008112:	77fb      	strb	r3, [r7, #31]
 8008114:	e076      	b.n	8008204 <UART_SetConfig+0x348>
 8008116:	2302      	movs	r3, #2
 8008118:	77fb      	strb	r3, [r7, #31]
 800811a:	e073      	b.n	8008204 <UART_SetConfig+0x348>
 800811c:	2304      	movs	r3, #4
 800811e:	77fb      	strb	r3, [r7, #31]
 8008120:	e070      	b.n	8008204 <UART_SetConfig+0x348>
 8008122:	2308      	movs	r3, #8
 8008124:	77fb      	strb	r3, [r7, #31]
 8008126:	e06d      	b.n	8008204 <UART_SetConfig+0x348>
 8008128:	2310      	movs	r3, #16
 800812a:	77fb      	strb	r3, [r7, #31]
 800812c:	e06a      	b.n	8008204 <UART_SetConfig+0x348>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a1b      	ldr	r2, [pc, #108]	; (80081a0 <UART_SetConfig+0x2e4>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d138      	bne.n	80081aa <UART_SetConfig+0x2ee>
 8008138:	4b13      	ldr	r3, [pc, #76]	; (8008188 <UART_SetConfig+0x2cc>)
 800813a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800813e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008142:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008146:	d017      	beq.n	8008178 <UART_SetConfig+0x2bc>
 8008148:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800814c:	d82a      	bhi.n	80081a4 <UART_SetConfig+0x2e8>
 800814e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008152:	d00b      	beq.n	800816c <UART_SetConfig+0x2b0>
 8008154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008158:	d824      	bhi.n	80081a4 <UART_SetConfig+0x2e8>
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <UART_SetConfig+0x2aa>
 800815e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008162:	d006      	beq.n	8008172 <UART_SetConfig+0x2b6>
 8008164:	e01e      	b.n	80081a4 <UART_SetConfig+0x2e8>
 8008166:	2300      	movs	r3, #0
 8008168:	77fb      	strb	r3, [r7, #31]
 800816a:	e04b      	b.n	8008204 <UART_SetConfig+0x348>
 800816c:	2302      	movs	r3, #2
 800816e:	77fb      	strb	r3, [r7, #31]
 8008170:	e048      	b.n	8008204 <UART_SetConfig+0x348>
 8008172:	2304      	movs	r3, #4
 8008174:	77fb      	strb	r3, [r7, #31]
 8008176:	e045      	b.n	8008204 <UART_SetConfig+0x348>
 8008178:	2308      	movs	r3, #8
 800817a:	77fb      	strb	r3, [r7, #31]
 800817c:	e042      	b.n	8008204 <UART_SetConfig+0x348>
 800817e:	bf00      	nop
 8008180:	efff69f3 	.word	0xefff69f3
 8008184:	40011000 	.word	0x40011000
 8008188:	40023800 	.word	0x40023800
 800818c:	40004400 	.word	0x40004400
 8008190:	40004800 	.word	0x40004800
 8008194:	40004c00 	.word	0x40004c00
 8008198:	40005000 	.word	0x40005000
 800819c:	40011400 	.word	0x40011400
 80081a0:	40007800 	.word	0x40007800
 80081a4:	2310      	movs	r3, #16
 80081a6:	77fb      	strb	r3, [r7, #31]
 80081a8:	e02c      	b.n	8008204 <UART_SetConfig+0x348>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a72      	ldr	r2, [pc, #456]	; (8008378 <UART_SetConfig+0x4bc>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d125      	bne.n	8008200 <UART_SetConfig+0x344>
 80081b4:	4b71      	ldr	r3, [pc, #452]	; (800837c <UART_SetConfig+0x4c0>)
 80081b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80081be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80081c2:	d017      	beq.n	80081f4 <UART_SetConfig+0x338>
 80081c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80081c8:	d817      	bhi.n	80081fa <UART_SetConfig+0x33e>
 80081ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ce:	d00b      	beq.n	80081e8 <UART_SetConfig+0x32c>
 80081d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081d4:	d811      	bhi.n	80081fa <UART_SetConfig+0x33e>
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <UART_SetConfig+0x326>
 80081da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081de:	d006      	beq.n	80081ee <UART_SetConfig+0x332>
 80081e0:	e00b      	b.n	80081fa <UART_SetConfig+0x33e>
 80081e2:	2300      	movs	r3, #0
 80081e4:	77fb      	strb	r3, [r7, #31]
 80081e6:	e00d      	b.n	8008204 <UART_SetConfig+0x348>
 80081e8:	2302      	movs	r3, #2
 80081ea:	77fb      	strb	r3, [r7, #31]
 80081ec:	e00a      	b.n	8008204 <UART_SetConfig+0x348>
 80081ee:	2304      	movs	r3, #4
 80081f0:	77fb      	strb	r3, [r7, #31]
 80081f2:	e007      	b.n	8008204 <UART_SetConfig+0x348>
 80081f4:	2308      	movs	r3, #8
 80081f6:	77fb      	strb	r3, [r7, #31]
 80081f8:	e004      	b.n	8008204 <UART_SetConfig+0x348>
 80081fa:	2310      	movs	r3, #16
 80081fc:	77fb      	strb	r3, [r7, #31]
 80081fe:	e001      	b.n	8008204 <UART_SetConfig+0x348>
 8008200:	2310      	movs	r3, #16
 8008202:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	69db      	ldr	r3, [r3, #28]
 8008208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800820c:	d15b      	bne.n	80082c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800820e:	7ffb      	ldrb	r3, [r7, #31]
 8008210:	2b08      	cmp	r3, #8
 8008212:	d828      	bhi.n	8008266 <UART_SetConfig+0x3aa>
 8008214:	a201      	add	r2, pc, #4	; (adr r2, 800821c <UART_SetConfig+0x360>)
 8008216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821a:	bf00      	nop
 800821c:	08008241 	.word	0x08008241
 8008220:	08008249 	.word	0x08008249
 8008224:	08008251 	.word	0x08008251
 8008228:	08008267 	.word	0x08008267
 800822c:	08008257 	.word	0x08008257
 8008230:	08008267 	.word	0x08008267
 8008234:	08008267 	.word	0x08008267
 8008238:	08008267 	.word	0x08008267
 800823c:	0800825f 	.word	0x0800825f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008240:	f7fd f888 	bl	8005354 <HAL_RCC_GetPCLK1Freq>
 8008244:	61b8      	str	r0, [r7, #24]
        break;
 8008246:	e013      	b.n	8008270 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008248:	f7fd f898 	bl	800537c <HAL_RCC_GetPCLK2Freq>
 800824c:	61b8      	str	r0, [r7, #24]
        break;
 800824e:	e00f      	b.n	8008270 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008250:	4b4b      	ldr	r3, [pc, #300]	; (8008380 <UART_SetConfig+0x4c4>)
 8008252:	61bb      	str	r3, [r7, #24]
        break;
 8008254:	e00c      	b.n	8008270 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008256:	f7fc ff6b 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 800825a:	61b8      	str	r0, [r7, #24]
        break;
 800825c:	e008      	b.n	8008270 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800825e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008262:	61bb      	str	r3, [r7, #24]
        break;
 8008264:	e004      	b.n	8008270 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	77bb      	strb	r3, [r7, #30]
        break;
 800826e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d074      	beq.n	8008360 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	005a      	lsls	r2, r3, #1
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	085b      	lsrs	r3, r3, #1
 8008280:	441a      	add	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	fbb2 f3f3 	udiv	r3, r2, r3
 800828a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	2b0f      	cmp	r3, #15
 8008290:	d916      	bls.n	80082c0 <UART_SetConfig+0x404>
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008298:	d212      	bcs.n	80082c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	b29b      	uxth	r3, r3
 800829e:	f023 030f 	bic.w	r3, r3, #15
 80082a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	085b      	lsrs	r3, r3, #1
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	f003 0307 	and.w	r3, r3, #7
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	89fb      	ldrh	r3, [r7, #14]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	89fa      	ldrh	r2, [r7, #14]
 80082bc:	60da      	str	r2, [r3, #12]
 80082be:	e04f      	b.n	8008360 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	77bb      	strb	r3, [r7, #30]
 80082c4:	e04c      	b.n	8008360 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082c6:	7ffb      	ldrb	r3, [r7, #31]
 80082c8:	2b08      	cmp	r3, #8
 80082ca:	d828      	bhi.n	800831e <UART_SetConfig+0x462>
 80082cc:	a201      	add	r2, pc, #4	; (adr r2, 80082d4 <UART_SetConfig+0x418>)
 80082ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d2:	bf00      	nop
 80082d4:	080082f9 	.word	0x080082f9
 80082d8:	08008301 	.word	0x08008301
 80082dc:	08008309 	.word	0x08008309
 80082e0:	0800831f 	.word	0x0800831f
 80082e4:	0800830f 	.word	0x0800830f
 80082e8:	0800831f 	.word	0x0800831f
 80082ec:	0800831f 	.word	0x0800831f
 80082f0:	0800831f 	.word	0x0800831f
 80082f4:	08008317 	.word	0x08008317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082f8:	f7fd f82c 	bl	8005354 <HAL_RCC_GetPCLK1Freq>
 80082fc:	61b8      	str	r0, [r7, #24]
        break;
 80082fe:	e013      	b.n	8008328 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008300:	f7fd f83c 	bl	800537c <HAL_RCC_GetPCLK2Freq>
 8008304:	61b8      	str	r0, [r7, #24]
        break;
 8008306:	e00f      	b.n	8008328 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008308:	4b1d      	ldr	r3, [pc, #116]	; (8008380 <UART_SetConfig+0x4c4>)
 800830a:	61bb      	str	r3, [r7, #24]
        break;
 800830c:	e00c      	b.n	8008328 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800830e:	f7fc ff0f 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 8008312:	61b8      	str	r0, [r7, #24]
        break;
 8008314:	e008      	b.n	8008328 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800831a:	61bb      	str	r3, [r7, #24]
        break;
 800831c:	e004      	b.n	8008328 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800831e:	2300      	movs	r3, #0
 8008320:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	77bb      	strb	r3, [r7, #30]
        break;
 8008326:	bf00      	nop
    }

    if (pclk != 0U)
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d018      	beq.n	8008360 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	085a      	lsrs	r2, r3, #1
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	441a      	add	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008340:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	2b0f      	cmp	r3, #15
 8008346:	d909      	bls.n	800835c <UART_SetConfig+0x4a0>
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800834e:	d205      	bcs.n	800835c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	b29a      	uxth	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	60da      	str	r2, [r3, #12]
 800835a:	e001      	b.n	8008360 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800836c:	7fbb      	ldrb	r3, [r7, #30]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3720      	adds	r7, #32
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	40007c00 	.word	0x40007c00
 800837c:	40023800 	.word	0x40023800
 8008380:	00f42400 	.word	0x00f42400

08008384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00a      	beq.n	80083ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d4:	f003 0304 	and.w	r3, r3, #4
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00a      	beq.n	80083f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f6:	f003 0308 	and.w	r3, r3, #8
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00a      	beq.n	8008414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	430a      	orrs	r2, r1
 8008412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008418:	f003 0310 	and.w	r3, r3, #16
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00a      	beq.n	8008436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843a:	f003 0320 	and.w	r3, r3, #32
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00a      	beq.n	8008458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	430a      	orrs	r2, r1
 8008456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008460:	2b00      	cmp	r3, #0
 8008462:	d01a      	beq.n	800849a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008482:	d10a      	bne.n	800849a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	430a      	orrs	r2, r1
 8008498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	430a      	orrs	r2, r1
 80084ba:	605a      	str	r2, [r3, #4]
  }
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af02      	add	r7, sp, #8
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084d8:	f7fa fd6c 	bl	8002fb4 <HAL_GetTick>
 80084dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 0308 	and.w	r3, r3, #8
 80084e8:	2b08      	cmp	r3, #8
 80084ea:	d10e      	bne.n	800850a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f831 	bl	8008562 <UART_WaitOnFlagUntilTimeout>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e027      	b.n	800855a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b04      	cmp	r3, #4
 8008516:	d10e      	bne.n	8008536 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008518:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f81b 	bl	8008562 <UART_WaitOnFlagUntilTimeout>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e011      	b.n	800855a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2220      	movs	r2, #32
 800853a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2220      	movs	r2, #32
 8008540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b09c      	sub	sp, #112	; 0x70
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	603b      	str	r3, [r7, #0]
 800856e:	4613      	mov	r3, r2
 8008570:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008572:	e0a7      	b.n	80086c4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800857a:	f000 80a3 	beq.w	80086c4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800857e:	f7fa fd19 	bl	8002fb4 <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800858a:	429a      	cmp	r2, r3
 800858c:	d302      	bcc.n	8008594 <UART_WaitOnFlagUntilTimeout+0x32>
 800858e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008590:	2b00      	cmp	r3, #0
 8008592:	d13f      	bne.n	8008614 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80085a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085a8:	667b      	str	r3, [r7, #100]	; 0x64
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80085c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1e6      	bne.n	8008594 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3308      	adds	r3, #8
 80085cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d0:	e853 3f00 	ldrex	r3, [r3]
 80085d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d8:	f023 0301 	bic.w	r3, r3, #1
 80085dc:	663b      	str	r3, [r7, #96]	; 0x60
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3308      	adds	r3, #8
 80085e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80085e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085ee:	e841 2300 	strex	r3, r2, [r1]
 80085f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80085f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1e5      	bne.n	80085c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2220      	movs	r2, #32
 80085fe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2220      	movs	r2, #32
 8008604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e068      	b.n	80086e6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0304 	and.w	r3, r3, #4
 800861e:	2b00      	cmp	r3, #0
 8008620:	d050      	beq.n	80086c4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800862c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008630:	d148      	bne.n	80086c4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800863a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008644:	e853 3f00 	ldrex	r3, [r3]
 8008648:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008650:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800865a:	637b      	str	r3, [r7, #52]	; 0x34
 800865c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008662:	e841 2300 	strex	r3, r2, [r1]
 8008666:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e6      	bne.n	800863c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3308      	adds	r3, #8
 8008674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	e853 3f00 	ldrex	r3, [r3]
 800867c:	613b      	str	r3, [r7, #16]
   return(result);
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	f023 0301 	bic.w	r3, r3, #1
 8008684:	66bb      	str	r3, [r7, #104]	; 0x68
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3308      	adds	r3, #8
 800868c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800868e:	623a      	str	r2, [r7, #32]
 8008690:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	69f9      	ldr	r1, [r7, #28]
 8008694:	6a3a      	ldr	r2, [r7, #32]
 8008696:	e841 2300 	strex	r3, r2, [r1]
 800869a:	61bb      	str	r3, [r7, #24]
   return(result);
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1e5      	bne.n	800866e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2220      	movs	r2, #32
 80086a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2220      	movs	r2, #32
 80086ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2220      	movs	r2, #32
 80086b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e010      	b.n	80086e6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	69da      	ldr	r2, [r3, #28]
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	4013      	ands	r3, r2
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	bf0c      	ite	eq
 80086d4:	2301      	moveq	r3, #1
 80086d6:	2300      	movne	r3, #0
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	461a      	mov	r2, r3
 80086dc:	79fb      	ldrb	r3, [r7, #7]
 80086de:	429a      	cmp	r2, r3
 80086e0:	f43f af48 	beq.w	8008574 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3770      	adds	r7, #112	; 0x70
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
	...

080086f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b097      	sub	sp, #92	; 0x5c
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	4613      	mov	r3, r2
 80086fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	88fa      	ldrh	r2, [r7, #6]
 8008708:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	88fa      	ldrh	r2, [r7, #6]
 8008710:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008722:	d10e      	bne.n	8008742 <UART_Start_Receive_IT+0x52>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d105      	bne.n	8008738 <UART_Start_Receive_IT+0x48>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008732:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008736:	e02d      	b.n	8008794 <UART_Start_Receive_IT+0xa4>
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	22ff      	movs	r2, #255	; 0xff
 800873c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008740:	e028      	b.n	8008794 <UART_Start_Receive_IT+0xa4>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10d      	bne.n	8008766 <UART_Start_Receive_IT+0x76>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d104      	bne.n	800875c <UART_Start_Receive_IT+0x6c>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	22ff      	movs	r2, #255	; 0xff
 8008756:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800875a:	e01b      	b.n	8008794 <UART_Start_Receive_IT+0xa4>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	227f      	movs	r2, #127	; 0x7f
 8008760:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008764:	e016      	b.n	8008794 <UART_Start_Receive_IT+0xa4>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800876e:	d10d      	bne.n	800878c <UART_Start_Receive_IT+0x9c>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d104      	bne.n	8008782 <UART_Start_Receive_IT+0x92>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	227f      	movs	r2, #127	; 0x7f
 800877c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008780:	e008      	b.n	8008794 <UART_Start_Receive_IT+0xa4>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	223f      	movs	r2, #63	; 0x3f
 8008786:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800878a:	e003      	b.n	8008794 <UART_Start_Receive_IT+0xa4>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2222      	movs	r2, #34	; 0x22
 80087a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3308      	adds	r3, #8
 80087aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	f043 0301 	orr.w	r3, r3, #1
 80087ba:	657b      	str	r3, [r7, #84]	; 0x54
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3308      	adds	r3, #8
 80087c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087c4:	64ba      	str	r2, [r7, #72]	; 0x48
 80087c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80087d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e5      	bne.n	80087a4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e0:	d107      	bne.n	80087f2 <UART_Start_Receive_IT+0x102>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d103      	bne.n	80087f2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	4a21      	ldr	r2, [pc, #132]	; (8008874 <UART_Start_Receive_IT+0x184>)
 80087ee:	669a      	str	r2, [r3, #104]	; 0x68
 80087f0:	e002      	b.n	80087f8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	4a20      	ldr	r2, [pc, #128]	; (8008878 <UART_Start_Receive_IT+0x188>)
 80087f6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d019      	beq.n	8008834 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008814:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800881e:	637b      	str	r3, [r7, #52]	; 0x34
 8008820:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008826:	e841 2300 	strex	r3, r2, [r1]
 800882a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800882c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1e6      	bne.n	8008800 <UART_Start_Receive_IT+0x110>
 8008832:	e018      	b.n	8008866 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	e853 3f00 	ldrex	r3, [r3]
 8008840:	613b      	str	r3, [r7, #16]
   return(result);
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	f043 0320 	orr.w	r3, r3, #32
 8008848:	653b      	str	r3, [r7, #80]	; 0x50
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008852:	623b      	str	r3, [r7, #32]
 8008854:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008856:	69f9      	ldr	r1, [r7, #28]
 8008858:	6a3a      	ldr	r2, [r7, #32]
 800885a:	e841 2300 	strex	r3, r2, [r1]
 800885e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1e6      	bne.n	8008834 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	375c      	adds	r7, #92	; 0x5c
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	08008b2b 	.word	0x08008b2b
 8008878:	080089c5 	.word	0x080089c5

0800887c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800887c:	b480      	push	{r7}
 800887e:	b095      	sub	sp, #84	; 0x54
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888c:	e853 3f00 	ldrex	r3, [r3]
 8008890:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008894:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008898:	64fb      	str	r3, [r7, #76]	; 0x4c
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088a2:	643b      	str	r3, [r7, #64]	; 0x40
 80088a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088aa:	e841 2300 	strex	r3, r2, [r1]
 80088ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1e6      	bne.n	8008884 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	3308      	adds	r3, #8
 80088bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088be:	6a3b      	ldr	r3, [r7, #32]
 80088c0:	e853 3f00 	ldrex	r3, [r3]
 80088c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	f023 0301 	bic.w	r3, r3, #1
 80088cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3308      	adds	r3, #8
 80088d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088de:	e841 2300 	strex	r3, r2, [r1]
 80088e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1e5      	bne.n	80088b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d118      	bne.n	8008924 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	e853 3f00 	ldrex	r3, [r3]
 80088fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	f023 0310 	bic.w	r3, r3, #16
 8008906:	647b      	str	r3, [r7, #68]	; 0x44
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	461a      	mov	r2, r3
 800890e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008910:	61bb      	str	r3, [r7, #24]
 8008912:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	6979      	ldr	r1, [r7, #20]
 8008916:	69ba      	ldr	r2, [r7, #24]
 8008918:	e841 2300 	strex	r3, r2, [r1]
 800891c:	613b      	str	r3, [r7, #16]
   return(result);
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e6      	bne.n	80088f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2220      	movs	r2, #32
 8008928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008938:	bf00      	nop
 800893a:	3754      	adds	r7, #84	; 0x54
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008950:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f7ff fa8a 	bl	8007e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008968:	bf00      	nop
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	e853 3f00 	ldrex	r3, [r3]
 8008984:	60bb      	str	r3, [r7, #8]
   return(result);
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800898c:	61fb      	str	r3, [r7, #28]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	461a      	mov	r2, r3
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	61bb      	str	r3, [r7, #24]
 8008998:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899a:	6979      	ldr	r1, [r7, #20]
 800899c:	69ba      	ldr	r2, [r7, #24]
 800899e:	e841 2300 	strex	r3, r2, [r1]
 80089a2:	613b      	str	r3, [r7, #16]
   return(result);
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1e6      	bne.n	8008978 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2220      	movs	r2, #32
 80089ae:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7ff fa56 	bl	8007e68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089bc:	bf00      	nop
 80089be:	3720      	adds	r7, #32
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b096      	sub	sp, #88	; 0x58
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089d2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089dc:	2b22      	cmp	r3, #34	; 0x22
 80089de:	f040 8098 	bne.w	8008b12 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089ec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80089f0:	b2d9      	uxtb	r1, r3
 80089f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089fc:	400a      	ands	r2, r1
 80089fe:	b2d2      	uxtb	r2, r2
 8008a00:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a06:	1c5a      	adds	r2, r3, #1
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	3b01      	subs	r3, #1
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d17b      	bne.n	8008b22 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a3e:	653b      	str	r3, [r7, #80]	; 0x50
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a48:	647b      	str	r3, [r7, #68]	; 0x44
 8008a4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e6      	bne.n	8008a2a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3308      	adds	r3, #8
 8008a62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a66:	e853 3f00 	ldrex	r3, [r3]
 8008a6a:	623b      	str	r3, [r7, #32]
   return(result);
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	f023 0301 	bic.w	r3, r3, #1
 8008a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3308      	adds	r3, #8
 8008a7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a7c:	633a      	str	r2, [r7, #48]	; 0x30
 8008a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a84:	e841 2300 	strex	r3, r2, [r1]
 8008a88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e5      	bne.n	8008a5c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d12e      	bne.n	8008b0a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	e853 3f00 	ldrex	r3, [r3]
 8008abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 0310 	bic.w	r3, r3, #16
 8008ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	461a      	mov	r2, r3
 8008ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ad0:	61fb      	str	r3, [r7, #28]
 8008ad2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad4:	69b9      	ldr	r1, [r7, #24]
 8008ad6:	69fa      	ldr	r2, [r7, #28]
 8008ad8:	e841 2300 	strex	r3, r2, [r1]
 8008adc:	617b      	str	r3, [r7, #20]
   return(result);
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1e6      	bne.n	8008ab2 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	f003 0310 	and.w	r3, r3, #16
 8008aee:	2b10      	cmp	r3, #16
 8008af0:	d103      	bne.n	8008afa <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2210      	movs	r2, #16
 8008af8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7ff f9c4 	bl	8007e90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b08:	e00b      	b.n	8008b22 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7f9 f8fe 	bl	8001d0c <HAL_UART_RxCpltCallback>
}
 8008b10:	e007      	b.n	8008b22 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	699a      	ldr	r2, [r3, #24]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f042 0208 	orr.w	r2, r2, #8
 8008b20:	619a      	str	r2, [r3, #24]
}
 8008b22:	bf00      	nop
 8008b24:	3758      	adds	r7, #88	; 0x58
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b096      	sub	sp, #88	; 0x58
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b38:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b42:	2b22      	cmp	r3, #34	; 0x22
 8008b44:	f040 8098 	bne.w	8008c78 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b56:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b58:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008b5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008b60:	4013      	ands	r3, r2
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b66:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b6c:	1c9a      	adds	r2, r3, #2
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d17b      	bne.n	8008c88 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b98:	e853 3f00 	ldrex	r3, [r3]
 8008b9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bae:	643b      	str	r3, [r7, #64]	; 0x40
 8008bb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e6      	bne.n	8008b90 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3308      	adds	r3, #8
 8008bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	f023 0301 	bic.w	r3, r3, #1
 8008bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3308      	adds	r3, #8
 8008be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008be4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bea:	e841 2300 	strex	r3, r2, [r1]
 8008bee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1e5      	bne.n	8008bc2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d12e      	bne.n	8008c70 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	e853 3f00 	ldrex	r3, [r3]
 8008c24:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	f023 0310 	bic.w	r3, r3, #16
 8008c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c36:	61bb      	str	r3, [r7, #24]
 8008c38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3a:	6979      	ldr	r1, [r7, #20]
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	e841 2300 	strex	r3, r2, [r1]
 8008c42:	613b      	str	r3, [r7, #16]
   return(result);
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1e6      	bne.n	8008c18 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	69db      	ldr	r3, [r3, #28]
 8008c50:	f003 0310 	and.w	r3, r3, #16
 8008c54:	2b10      	cmp	r3, #16
 8008c56:	d103      	bne.n	8008c60 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2210      	movs	r2, #16
 8008c5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff f911 	bl	8007e90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c6e:	e00b      	b.n	8008c88 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7f9 f84b 	bl	8001d0c <HAL_UART_RxCpltCallback>
}
 8008c76:	e007      	b.n	8008c88 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	699a      	ldr	r2, [r3, #24]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f042 0208 	orr.w	r2, r2, #8
 8008c86:	619a      	str	r2, [r3, #24]
}
 8008c88:	bf00      	nop
 8008c8a:	3758      	adds	r7, #88	; 0x58
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c90:	b480      	push	{r7}
 8008c92:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008c94:	bf00      	nop
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
	...

08008ca0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ca6:	f3ef 8305 	mrs	r3, IPSR
 8008caa:	60bb      	str	r3, [r7, #8]
  return(result);
 8008cac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10f      	bne.n	8008cd2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8008cb6:	607b      	str	r3, [r7, #4]
  return(result);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d105      	bne.n	8008cca <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cbe:	f3ef 8311 	mrs	r3, BASEPRI
 8008cc2:	603b      	str	r3, [r7, #0]
  return(result);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d007      	beq.n	8008cda <osKernelInitialize+0x3a>
 8008cca:	4b0e      	ldr	r3, [pc, #56]	; (8008d04 <osKernelInitialize+0x64>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d103      	bne.n	8008cda <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008cd2:	f06f 0305 	mvn.w	r3, #5
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	e00c      	b.n	8008cf4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008cda:	4b0a      	ldr	r3, [pc, #40]	; (8008d04 <osKernelInitialize+0x64>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d105      	bne.n	8008cee <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008ce2:	4b08      	ldr	r3, [pc, #32]	; (8008d04 <osKernelInitialize+0x64>)
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	e002      	b.n	8008cf4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008cee:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	200007f4 	.word	0x200007f4

08008d08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d0e:	f3ef 8305 	mrs	r3, IPSR
 8008d12:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10f      	bne.n	8008d3a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8008d1e:	607b      	str	r3, [r7, #4]
  return(result);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d105      	bne.n	8008d32 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d26:	f3ef 8311 	mrs	r3, BASEPRI
 8008d2a:	603b      	str	r3, [r7, #0]
  return(result);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d007      	beq.n	8008d42 <osKernelStart+0x3a>
 8008d32:	4b0f      	ldr	r3, [pc, #60]	; (8008d70 <osKernelStart+0x68>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d103      	bne.n	8008d42 <osKernelStart+0x3a>
    stat = osErrorISR;
 8008d3a:	f06f 0305 	mvn.w	r3, #5
 8008d3e:	60fb      	str	r3, [r7, #12]
 8008d40:	e010      	b.n	8008d64 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008d42:	4b0b      	ldr	r3, [pc, #44]	; (8008d70 <osKernelStart+0x68>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d109      	bne.n	8008d5e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008d4a:	f7ff ffa1 	bl	8008c90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008d4e:	4b08      	ldr	r3, [pc, #32]	; (8008d70 <osKernelStart+0x68>)
 8008d50:	2202      	movs	r2, #2
 8008d52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008d54:	f001 fb9a 	bl	800a48c <vTaskStartScheduler>
      stat = osOK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	e002      	b.n	8008d64 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008d64:	68fb      	ldr	r3, [r7, #12]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	200007f4 	.word	0x200007f4

08008d74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b090      	sub	sp, #64	; 0x40
 8008d78:	af04      	add	r7, sp, #16
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d80:	2300      	movs	r3, #0
 8008d82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d84:	f3ef 8305 	mrs	r3, IPSR
 8008d88:	61fb      	str	r3, [r7, #28]
  return(result);
 8008d8a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f040 808f 	bne.w	8008eb0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d92:	f3ef 8310 	mrs	r3, PRIMASK
 8008d96:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d105      	bne.n	8008daa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8008da2:	617b      	str	r3, [r7, #20]
  return(result);
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d003      	beq.n	8008db2 <osThreadNew+0x3e>
 8008daa:	4b44      	ldr	r3, [pc, #272]	; (8008ebc <osThreadNew+0x148>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d07e      	beq.n	8008eb0 <osThreadNew+0x13c>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d07b      	beq.n	8008eb0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008db8:	2380      	movs	r3, #128	; 0x80
 8008dba:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008dbc:	2318      	movs	r3, #24
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d045      	beq.n	8008e5c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <osThreadNew+0x6a>
        name = attr->name;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d008      	beq.n	8008e04 <osThreadNew+0x90>
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	2b38      	cmp	r3, #56	; 0x38
 8008df6:	d805      	bhi.n	8008e04 <osThreadNew+0x90>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f003 0301 	and.w	r3, r3, #1
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d001      	beq.n	8008e08 <osThreadNew+0x94>
        return (NULL);
 8008e04:	2300      	movs	r3, #0
 8008e06:	e054      	b.n	8008eb2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	695b      	ldr	r3, [r3, #20]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	089b      	lsrs	r3, r3, #2
 8008e16:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00e      	beq.n	8008e3e <osThreadNew+0xca>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	2ba7      	cmp	r3, #167	; 0xa7
 8008e26:	d90a      	bls.n	8008e3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d006      	beq.n	8008e3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d002      	beq.n	8008e3e <osThreadNew+0xca>
        mem = 1;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	623b      	str	r3, [r7, #32]
 8008e3c:	e010      	b.n	8008e60 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10c      	bne.n	8008e60 <osThreadNew+0xec>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d108      	bne.n	8008e60 <osThreadNew+0xec>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d104      	bne.n	8008e60 <osThreadNew+0xec>
          mem = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	623b      	str	r3, [r7, #32]
 8008e5a:	e001      	b.n	8008e60 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008e60:	6a3b      	ldr	r3, [r7, #32]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d110      	bne.n	8008e88 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e6e:	9202      	str	r2, [sp, #8]
 8008e70:	9301      	str	r3, [sp, #4]
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 ff19 	bl	8009cb4 <xTaskCreateStatic>
 8008e82:	4603      	mov	r3, r0
 8008e84:	613b      	str	r3, [r7, #16]
 8008e86:	e013      	b.n	8008eb0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d110      	bne.n	8008eb0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	f107 0310 	add.w	r3, r7, #16
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f000 ff6a 	bl	8009d7a <xTaskCreate>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d001      	beq.n	8008eb0 <osThreadNew+0x13c>
          hTask = NULL;
 8008eac:	2300      	movs	r3, #0
 8008eae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008eb0:	693b      	ldr	r3, [r7, #16]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3730      	adds	r7, #48	; 0x30
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	200007f4 	.word	0x200007f4

08008ec0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b086      	sub	sp, #24
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ec8:	f3ef 8305 	mrs	r3, IPSR
 8008ecc:	613b      	str	r3, [r7, #16]
  return(result);
 8008ece:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10f      	bne.n	8008ef4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d105      	bne.n	8008eec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ee0:	f3ef 8311 	mrs	r3, BASEPRI
 8008ee4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d007      	beq.n	8008efc <osDelay+0x3c>
 8008eec:	4b0a      	ldr	r3, [pc, #40]	; (8008f18 <osDelay+0x58>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d103      	bne.n	8008efc <osDelay+0x3c>
    stat = osErrorISR;
 8008ef4:	f06f 0305 	mvn.w	r3, #5
 8008ef8:	617b      	str	r3, [r7, #20]
 8008efa:	e007      	b.n	8008f0c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d002      	beq.n	8008f0c <osDelay+0x4c>
      vTaskDelay(ticks);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f001 f908 	bl	800a11c <vTaskDelay>
    }
  }

  return (stat);
 8008f0c:	697b      	ldr	r3, [r7, #20]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3718      	adds	r7, #24
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	200007f4 	.word	0x200007f4

08008f1c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f002 fc03 	bl	800b730 <pvTimerGetTimerID>
 8008f2a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d005      	beq.n	8008f3e <TimerCallback+0x22>
    callb->func (callb->arg);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	6852      	ldr	r2, [r2, #4]
 8008f3a:	4610      	mov	r0, r2
 8008f3c:	4798      	blx	r3
  }
}
 8008f3e:	bf00      	nop
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
	...

08008f48 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08e      	sub	sp, #56	; 0x38
 8008f4c:	af02      	add	r7, sp, #8
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	607a      	str	r2, [r7, #4]
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	460b      	mov	r3, r1
 8008f56:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f5c:	f3ef 8305 	mrs	r3, IPSR
 8008f60:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f62:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d16a      	bne.n	800903e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f68:	f3ef 8310 	mrs	r3, PRIMASK
 8008f6c:	617b      	str	r3, [r7, #20]
  return(result);
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d105      	bne.n	8008f80 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f74:	f3ef 8311 	mrs	r3, BASEPRI
 8008f78:	613b      	str	r3, [r7, #16]
  return(result);
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d003      	beq.n	8008f88 <osTimerNew+0x40>
 8008f80:	4b31      	ldr	r3, [pc, #196]	; (8009048 <osTimerNew+0x100>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d05a      	beq.n	800903e <osTimerNew+0xf6>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d057      	beq.n	800903e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8008f8e:	2008      	movs	r0, #8
 8008f90:	f002 fe28 	bl	800bbe4 <pvPortMalloc>
 8008f94:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d050      	beq.n	800903e <osTimerNew+0xf6>
      callb->func = func;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008fa8:	7afb      	ldrb	r3, [r7, #11]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d102      	bne.n	8008fb4 <osTimerNew+0x6c>
        reload = pdFALSE;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb2:	e001      	b.n	8008fb8 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8008fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fbc:	623b      	str	r3, [r7, #32]
      name = NULL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d01c      	beq.n	8009002 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d002      	beq.n	8008fd6 <osTimerNew+0x8e>
          name = attr->name;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d006      	beq.n	8008fec <osTimerNew+0xa4>
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	2b2b      	cmp	r3, #43	; 0x2b
 8008fe4:	d902      	bls.n	8008fec <osTimerNew+0xa4>
          mem = 1;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	623b      	str	r3, [r7, #32]
 8008fea:	e00c      	b.n	8009006 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d108      	bne.n	8009006 <osTimerNew+0xbe>
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d104      	bne.n	8009006 <osTimerNew+0xbe>
            mem = 0;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	623b      	str	r3, [r7, #32]
 8009000:	e001      	b.n	8009006 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8009002:	2300      	movs	r3, #0
 8009004:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8009006:	6a3b      	ldr	r3, [r7, #32]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d10c      	bne.n	8009026 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	9301      	str	r3, [sp, #4]
 8009012:	4b0e      	ldr	r3, [pc, #56]	; (800904c <osTimerNew+0x104>)
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800901a:	2101      	movs	r1, #1
 800901c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800901e:	f001 fff6 	bl	800b00e <xTimerCreateStatic>
 8009022:	62b8      	str	r0, [r7, #40]	; 0x28
 8009024:	e00b      	b.n	800903e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d108      	bne.n	800903e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800902c:	4b07      	ldr	r3, [pc, #28]	; (800904c <osTimerNew+0x104>)
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009034:	2101      	movs	r1, #1
 8009036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009038:	f001 ffc8 	bl	800afcc <xTimerCreate>
 800903c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800903e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009040:	4618      	mov	r0, r3
 8009042:	3730      	adds	r7, #48	; 0x30
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	200007f4 	.word	0x200007f4
 800904c:	08008f1d 	.word	0x08008f1d

08009050 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8009050:	b580      	push	{r7, lr}
 8009052:	b08a      	sub	sp, #40	; 0x28
 8009054:	af02      	add	r7, sp, #8
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800905e:	f3ef 8305 	mrs	r3, IPSR
 8009062:	617b      	str	r3, [r7, #20]
  return(result);
 8009064:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10f      	bne.n	800908a <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800906a:	f3ef 8310 	mrs	r3, PRIMASK
 800906e:	613b      	str	r3, [r7, #16]
  return(result);
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d105      	bne.n	8009082 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009076:	f3ef 8311 	mrs	r3, BASEPRI
 800907a:	60fb      	str	r3, [r7, #12]
  return(result);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d007      	beq.n	8009092 <osTimerStart+0x42>
 8009082:	4b12      	ldr	r3, [pc, #72]	; (80090cc <osTimerStart+0x7c>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b02      	cmp	r3, #2
 8009088:	d103      	bne.n	8009092 <osTimerStart+0x42>
    stat = osErrorISR;
 800908a:	f06f 0305 	mvn.w	r3, #5
 800908e:	61fb      	str	r3, [r7, #28]
 8009090:	e017      	b.n	80090c2 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d103      	bne.n	80090a0 <osTimerStart+0x50>
    stat = osErrorParameter;
 8009098:	f06f 0303 	mvn.w	r3, #3
 800909c:	61fb      	str	r3, [r7, #28]
 800909e:	e010      	b.n	80090c2 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80090a0:	2300      	movs	r3, #0
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	2300      	movs	r3, #0
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	2104      	movs	r1, #4
 80090aa:	69b8      	ldr	r0, [r7, #24]
 80090ac:	f002 f82e 	bl	800b10c <xTimerGenericCommand>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d102      	bne.n	80090bc <osTimerStart+0x6c>
      stat = osOK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	61fb      	str	r3, [r7, #28]
 80090ba:	e002      	b.n	80090c2 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 80090bc:	f06f 0302 	mvn.w	r3, #2
 80090c0:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80090c2:	69fb      	ldr	r3, [r7, #28]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3720      	adds	r7, #32
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	200007f4 	.word	0x200007f4

080090d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	4a07      	ldr	r2, [pc, #28]	; (80090fc <vApplicationGetIdleTaskMemory+0x2c>)
 80090e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	4a06      	ldr	r2, [pc, #24]	; (8009100 <vApplicationGetIdleTaskMemory+0x30>)
 80090e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2280      	movs	r2, #128	; 0x80
 80090ec:	601a      	str	r2, [r3, #0]
}
 80090ee:	bf00      	nop
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	200007f8 	.word	0x200007f8
 8009100:	200008a0 	.word	0x200008a0

08009104 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	4a07      	ldr	r2, [pc, #28]	; (8009130 <vApplicationGetTimerTaskMemory+0x2c>)
 8009114:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	4a06      	ldr	r2, [pc, #24]	; (8009134 <vApplicationGetTimerTaskMemory+0x30>)
 800911a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009122:	601a      	str	r2, [r3, #0]
}
 8009124:	bf00      	nop
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	20000aa0 	.word	0x20000aa0
 8009134:	20000b48 	.word	0x20000b48

08009138 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f103 0208 	add.w	r2, r3, #8
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f04f 32ff 	mov.w	r2, #4294967295
 8009150:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f103 0208 	add.w	r2, r3, #8
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f103 0208 	add.w	r2, r3, #8
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009186:	bf00      	nop
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009192:	b480      	push	{r7}
 8009194:	b085      	sub	sp, #20
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	689a      	ldr	r2, [r3, #8]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	683a      	ldr	r2, [r7, #0]
 80091b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	1c5a      	adds	r2, r3, #1
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	601a      	str	r2, [r3, #0]
}
 80091ce:	bf00      	nop
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091da:	b480      	push	{r7}
 80091dc:	b085      	sub	sp, #20
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f0:	d103      	bne.n	80091fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	e00c      	b.n	8009214 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	3308      	adds	r3, #8
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	e002      	b.n	8009208 <vListInsert+0x2e>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	60fb      	str	r3, [r7, #12]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	429a      	cmp	r2, r3
 8009212:	d2f6      	bcs.n	8009202 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	685a      	ldr	r2, [r3, #4]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	601a      	str	r2, [r3, #0]
}
 8009240:	bf00      	nop
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	6892      	ldr	r2, [r2, #8]
 8009262:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	6852      	ldr	r2, [r2, #4]
 800926c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	429a      	cmp	r2, r3
 8009276:	d103      	bne.n	8009280 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	1e5a      	subs	r2, r3, #1
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10c      	bne.n	80092ce <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b8:	b672      	cpsid	i
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	b662      	cpsie	i
 80092c8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80092ca:	bf00      	nop
 80092cc:	e7fe      	b.n	80092cc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80092ce:	f002 fb5d 	bl	800b98c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092da:	68f9      	ldr	r1, [r7, #12]
 80092dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092de:	fb01 f303 	mul.w	r3, r1, r3
 80092e2:	441a      	add	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092fe:	3b01      	subs	r3, #1
 8009300:	68f9      	ldr	r1, [r7, #12]
 8009302:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009304:	fb01 f303 	mul.w	r3, r1, r3
 8009308:	441a      	add	r2, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	22ff      	movs	r2, #255	; 0xff
 8009312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	22ff      	movs	r2, #255	; 0xff
 800931a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d114      	bne.n	800934e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d01a      	beq.n	8009362 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	3310      	adds	r3, #16
 8009330:	4618      	mov	r0, r3
 8009332:	f001 fb53 	bl	800a9dc <xTaskRemoveFromEventList>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d012      	beq.n	8009362 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800933c:	4b0c      	ldr	r3, [pc, #48]	; (8009370 <xQueueGenericReset+0xd0>)
 800933e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	e009      	b.n	8009362 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	3310      	adds	r3, #16
 8009352:	4618      	mov	r0, r3
 8009354:	f7ff fef0 	bl	8009138 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	3324      	adds	r3, #36	; 0x24
 800935c:	4618      	mov	r0, r3
 800935e:	f7ff feeb 	bl	8009138 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009362:	f002 fb47 	bl	800b9f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009366:	2301      	movs	r3, #1
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	e000ed04 	.word	0xe000ed04

08009374 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009374:	b580      	push	{r7, lr}
 8009376:	b08e      	sub	sp, #56	; 0x38
 8009378:	af02      	add	r7, sp, #8
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
 8009380:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10c      	bne.n	80093a2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8009388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938c:	b672      	cpsid	i
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	b662      	cpsie	i
 800939c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800939e:	bf00      	nop
 80093a0:	e7fe      	b.n	80093a0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10c      	bne.n	80093c2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80093a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ac:	b672      	cpsid	i
 80093ae:	f383 8811 	msr	BASEPRI, r3
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	b662      	cpsie	i
 80093bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093be:	bf00      	nop
 80093c0:	e7fe      	b.n	80093c0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <xQueueGenericCreateStatic+0x5a>
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <xQueueGenericCreateStatic+0x5e>
 80093ce:	2301      	movs	r3, #1
 80093d0:	e000      	b.n	80093d4 <xQueueGenericCreateStatic+0x60>
 80093d2:	2300      	movs	r3, #0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10c      	bne.n	80093f2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80093d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093dc:	b672      	cpsid	i
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	b662      	cpsie	i
 80093ec:	623b      	str	r3, [r7, #32]
}
 80093ee:	bf00      	nop
 80093f0:	e7fe      	b.n	80093f0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d102      	bne.n	80093fe <xQueueGenericCreateStatic+0x8a>
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <xQueueGenericCreateStatic+0x8e>
 80093fe:	2301      	movs	r3, #1
 8009400:	e000      	b.n	8009404 <xQueueGenericCreateStatic+0x90>
 8009402:	2300      	movs	r3, #0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10c      	bne.n	8009422 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940c:	b672      	cpsid	i
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	b662      	cpsie	i
 800941c:	61fb      	str	r3, [r7, #28]
}
 800941e:	bf00      	nop
 8009420:	e7fe      	b.n	8009420 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009422:	2350      	movs	r3, #80	; 0x50
 8009424:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	2b50      	cmp	r3, #80	; 0x50
 800942a:	d00c      	beq.n	8009446 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	b672      	cpsid	i
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	b662      	cpsie	i
 8009440:	61bb      	str	r3, [r7, #24]
}
 8009442:	bf00      	nop
 8009444:	e7fe      	b.n	8009444 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009446:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800944c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00d      	beq.n	800946e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009454:	2201      	movs	r2, #1
 8009456:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800945a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	4613      	mov	r3, r2
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	68b9      	ldr	r1, [r7, #8]
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f000 f805 	bl	8009478 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800946e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009470:	4618      	mov	r0, r3
 8009472:	3730      	adds	r7, #48	; 0x30
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d103      	bne.n	8009494 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	69ba      	ldr	r2, [r7, #24]
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	e002      	b.n	800949a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094a6:	2101      	movs	r1, #1
 80094a8:	69b8      	ldr	r0, [r7, #24]
 80094aa:	f7ff fef9 	bl	80092a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	78fa      	ldrb	r2, [r7, #3]
 80094b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094b6:	bf00      	nop
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
	...

080094c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b08e      	sub	sp, #56	; 0x38
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
 80094cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094ce:	2300      	movs	r3, #0
 80094d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10c      	bne.n	80094f6 <xQueueGenericSend+0x36>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	b672      	cpsid	i
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	b662      	cpsie	i
 80094f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094f2:	bf00      	nop
 80094f4:	e7fe      	b.n	80094f4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d103      	bne.n	8009504 <xQueueGenericSend+0x44>
 80094fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009500:	2b00      	cmp	r3, #0
 8009502:	d101      	bne.n	8009508 <xQueueGenericSend+0x48>
 8009504:	2301      	movs	r3, #1
 8009506:	e000      	b.n	800950a <xQueueGenericSend+0x4a>
 8009508:	2300      	movs	r3, #0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10c      	bne.n	8009528 <xQueueGenericSend+0x68>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	b672      	cpsid	i
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	b662      	cpsie	i
 8009522:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009524:	bf00      	nop
 8009526:	e7fe      	b.n	8009526 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	2b02      	cmp	r3, #2
 800952c:	d103      	bne.n	8009536 <xQueueGenericSend+0x76>
 800952e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009532:	2b01      	cmp	r3, #1
 8009534:	d101      	bne.n	800953a <xQueueGenericSend+0x7a>
 8009536:	2301      	movs	r3, #1
 8009538:	e000      	b.n	800953c <xQueueGenericSend+0x7c>
 800953a:	2300      	movs	r3, #0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10c      	bne.n	800955a <xQueueGenericSend+0x9a>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	b672      	cpsid	i
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	b662      	cpsie	i
 8009554:	623b      	str	r3, [r7, #32]
}
 8009556:	bf00      	nop
 8009558:	e7fe      	b.n	8009558 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800955a:	f001 fc09 	bl	800ad70 <xTaskGetSchedulerState>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d102      	bne.n	800956a <xQueueGenericSend+0xaa>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d101      	bne.n	800956e <xQueueGenericSend+0xae>
 800956a:	2301      	movs	r3, #1
 800956c:	e000      	b.n	8009570 <xQueueGenericSend+0xb0>
 800956e:	2300      	movs	r3, #0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10c      	bne.n	800958e <xQueueGenericSend+0xce>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009578:	b672      	cpsid	i
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	b662      	cpsie	i
 8009588:	61fb      	str	r3, [r7, #28]
}
 800958a:	bf00      	nop
 800958c:	e7fe      	b.n	800958c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800958e:	f002 f9fd 	bl	800b98c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800959a:	429a      	cmp	r2, r3
 800959c:	d302      	bcc.n	80095a4 <xQueueGenericSend+0xe4>
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	d129      	bne.n	80095f8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095a4:	683a      	ldr	r2, [r7, #0]
 80095a6:	68b9      	ldr	r1, [r7, #8]
 80095a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095aa:	f000 fa15 	bl	80099d8 <prvCopyDataToQueue>
 80095ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d010      	beq.n	80095da <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ba:	3324      	adds	r3, #36	; 0x24
 80095bc:	4618      	mov	r0, r3
 80095be:	f001 fa0d 	bl	800a9dc <xTaskRemoveFromEventList>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d013      	beq.n	80095f0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095c8:	4b3f      	ldr	r3, [pc, #252]	; (80096c8 <xQueueGenericSend+0x208>)
 80095ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ce:	601a      	str	r2, [r3, #0]
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	e00a      	b.n	80095f0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d007      	beq.n	80095f0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095e0:	4b39      	ldr	r3, [pc, #228]	; (80096c8 <xQueueGenericSend+0x208>)
 80095e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095f0:	f002 fa00 	bl	800b9f4 <vPortExitCritical>
				return pdPASS;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e063      	b.n	80096c0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d103      	bne.n	8009606 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095fe:	f002 f9f9 	bl	800b9f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009602:	2300      	movs	r3, #0
 8009604:	e05c      	b.n	80096c0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009608:	2b00      	cmp	r3, #0
 800960a:	d106      	bne.n	800961a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800960c:	f107 0314 	add.w	r3, r7, #20
 8009610:	4618      	mov	r0, r3
 8009612:	f001 fa49 	bl	800aaa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009616:	2301      	movs	r3, #1
 8009618:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800961a:	f002 f9eb 	bl	800b9f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800961e:	f000 ffa9 	bl	800a574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009622:	f002 f9b3 	bl	800b98c <vPortEnterCritical>
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800962c:	b25b      	sxtb	r3, r3
 800962e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009632:	d103      	bne.n	800963c <xQueueGenericSend+0x17c>
 8009634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800963c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009642:	b25b      	sxtb	r3, r3
 8009644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009648:	d103      	bne.n	8009652 <xQueueGenericSend+0x192>
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	2200      	movs	r2, #0
 800964e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009652:	f002 f9cf 	bl	800b9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009656:	1d3a      	adds	r2, r7, #4
 8009658:	f107 0314 	add.w	r3, r7, #20
 800965c:	4611      	mov	r1, r2
 800965e:	4618      	mov	r0, r3
 8009660:	f001 fa38 	bl	800aad4 <xTaskCheckForTimeOut>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d124      	bne.n	80096b4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800966a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800966c:	f000 faac 	bl	8009bc8 <prvIsQueueFull>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d018      	beq.n	80096a8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009678:	3310      	adds	r3, #16
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	4611      	mov	r1, r2
 800967e:	4618      	mov	r0, r3
 8009680:	f001 f958 	bl	800a934 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009686:	f000 fa37 	bl	8009af8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800968a:	f000 ff81 	bl	800a590 <xTaskResumeAll>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	f47f af7c 	bne.w	800958e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8009696:	4b0c      	ldr	r3, [pc, #48]	; (80096c8 <xQueueGenericSend+0x208>)
 8009698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800969c:	601a      	str	r2, [r3, #0]
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	e772      	b.n	800958e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80096a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096aa:	f000 fa25 	bl	8009af8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096ae:	f000 ff6f 	bl	800a590 <xTaskResumeAll>
 80096b2:	e76c      	b.n	800958e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80096b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096b6:	f000 fa1f 	bl	8009af8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096ba:	f000 ff69 	bl	800a590 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80096be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3738      	adds	r7, #56	; 0x38
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	e000ed04 	.word	0xe000ed04

080096cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b08e      	sub	sp, #56	; 0x38
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
 80096d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10c      	bne.n	80096fe <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	b672      	cpsid	i
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	b662      	cpsie	i
 80096f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096fa:	bf00      	nop
 80096fc:	e7fe      	b.n	80096fc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d103      	bne.n	800970c <xQueueGenericSendFromISR+0x40>
 8009704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009708:	2b00      	cmp	r3, #0
 800970a:	d101      	bne.n	8009710 <xQueueGenericSendFromISR+0x44>
 800970c:	2301      	movs	r3, #1
 800970e:	e000      	b.n	8009712 <xQueueGenericSendFromISR+0x46>
 8009710:	2300      	movs	r3, #0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10c      	bne.n	8009730 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	b672      	cpsid	i
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	b662      	cpsie	i
 800972a:	623b      	str	r3, [r7, #32]
}
 800972c:	bf00      	nop
 800972e:	e7fe      	b.n	800972e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	2b02      	cmp	r3, #2
 8009734:	d103      	bne.n	800973e <xQueueGenericSendFromISR+0x72>
 8009736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800973a:	2b01      	cmp	r3, #1
 800973c:	d101      	bne.n	8009742 <xQueueGenericSendFromISR+0x76>
 800973e:	2301      	movs	r3, #1
 8009740:	e000      	b.n	8009744 <xQueueGenericSendFromISR+0x78>
 8009742:	2300      	movs	r3, #0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10c      	bne.n	8009762 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8009748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974c:	b672      	cpsid	i
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	b662      	cpsie	i
 800975c:	61fb      	str	r3, [r7, #28]
}
 800975e:	bf00      	nop
 8009760:	e7fe      	b.n	8009760 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009762:	f002 f9fb 	bl	800bb5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009766:	f3ef 8211 	mrs	r2, BASEPRI
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	b672      	cpsid	i
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	b662      	cpsie	i
 800977e:	61ba      	str	r2, [r7, #24]
 8009780:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009782:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009784:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800978a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800978e:	429a      	cmp	r2, r3
 8009790:	d302      	bcc.n	8009798 <xQueueGenericSendFromISR+0xcc>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b02      	cmp	r3, #2
 8009796:	d12c      	bne.n	80097f2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800979e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	68b9      	ldr	r1, [r7, #8]
 80097a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097a8:	f000 f916 	bl	80099d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80097ac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80097b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b4:	d112      	bne.n	80097dc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d016      	beq.n	80097ec <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	3324      	adds	r3, #36	; 0x24
 80097c2:	4618      	mov	r0, r3
 80097c4:	f001 f90a 	bl	800a9dc <xTaskRemoveFromEventList>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00e      	beq.n	80097ec <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00b      	beq.n	80097ec <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	601a      	str	r2, [r3, #0]
 80097da:	e007      	b.n	80097ec <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80097e0:	3301      	adds	r3, #1
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	b25a      	sxtb	r2, r3
 80097e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80097ec:	2301      	movs	r3, #1
 80097ee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80097f0:	e001      	b.n	80097f6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097f2:	2300      	movs	r3, #0
 80097f4:	637b      	str	r3, [r7, #52]	; 0x34
 80097f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009800:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009804:	4618      	mov	r0, r3
 8009806:	3738      	adds	r7, #56	; 0x38
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b08c      	sub	sp, #48	; 0x30
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009818:	2300      	movs	r3, #0
 800981a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10c      	bne.n	8009840 <xQueueReceive+0x34>
	__asm volatile
 8009826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982a:	b672      	cpsid	i
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	b662      	cpsie	i
 800983a:	623b      	str	r3, [r7, #32]
}
 800983c:	bf00      	nop
 800983e:	e7fe      	b.n	800983e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d103      	bne.n	800984e <xQueueReceive+0x42>
 8009846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <xQueueReceive+0x46>
 800984e:	2301      	movs	r3, #1
 8009850:	e000      	b.n	8009854 <xQueueReceive+0x48>
 8009852:	2300      	movs	r3, #0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10c      	bne.n	8009872 <xQueueReceive+0x66>
	__asm volatile
 8009858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985c:	b672      	cpsid	i
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	b662      	cpsie	i
 800986c:	61fb      	str	r3, [r7, #28]
}
 800986e:	bf00      	nop
 8009870:	e7fe      	b.n	8009870 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009872:	f001 fa7d 	bl	800ad70 <xTaskGetSchedulerState>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d102      	bne.n	8009882 <xQueueReceive+0x76>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d101      	bne.n	8009886 <xQueueReceive+0x7a>
 8009882:	2301      	movs	r3, #1
 8009884:	e000      	b.n	8009888 <xQueueReceive+0x7c>
 8009886:	2300      	movs	r3, #0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10c      	bne.n	80098a6 <xQueueReceive+0x9a>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009890:	b672      	cpsid	i
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	b662      	cpsie	i
 80098a0:	61bb      	str	r3, [r7, #24]
}
 80098a2:	bf00      	nop
 80098a4:	e7fe      	b.n	80098a4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098a6:	f002 f871 	bl	800b98c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d01f      	beq.n	80098f6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098b6:	68b9      	ldr	r1, [r7, #8]
 80098b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098ba:	f000 f8f7 	bl	8009aac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	1e5a      	subs	r2, r3, #1
 80098c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00f      	beq.n	80098ee <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	3310      	adds	r3, #16
 80098d2:	4618      	mov	r0, r3
 80098d4:	f001 f882 	bl	800a9dc <xTaskRemoveFromEventList>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d007      	beq.n	80098ee <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098de:	4b3d      	ldr	r3, [pc, #244]	; (80099d4 <xQueueReceive+0x1c8>)
 80098e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098ee:	f002 f881 	bl	800b9f4 <vPortExitCritical>
				return pdPASS;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e069      	b.n	80099ca <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d103      	bne.n	8009904 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098fc:	f002 f87a 	bl	800b9f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009900:	2300      	movs	r3, #0
 8009902:	e062      	b.n	80099ca <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d106      	bne.n	8009918 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800990a:	f107 0310 	add.w	r3, r7, #16
 800990e:	4618      	mov	r0, r3
 8009910:	f001 f8ca 	bl	800aaa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009914:	2301      	movs	r3, #1
 8009916:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009918:	f002 f86c 	bl	800b9f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800991c:	f000 fe2a 	bl	800a574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009920:	f002 f834 	bl	800b98c <vPortEnterCritical>
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800992a:	b25b      	sxtb	r3, r3
 800992c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009930:	d103      	bne.n	800993a <xQueueReceive+0x12e>
 8009932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800993a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009940:	b25b      	sxtb	r3, r3
 8009942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009946:	d103      	bne.n	8009950 <xQueueReceive+0x144>
 8009948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994a:	2200      	movs	r2, #0
 800994c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009950:	f002 f850 	bl	800b9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009954:	1d3a      	adds	r2, r7, #4
 8009956:	f107 0310 	add.w	r3, r7, #16
 800995a:	4611      	mov	r1, r2
 800995c:	4618      	mov	r0, r3
 800995e:	f001 f8b9 	bl	800aad4 <xTaskCheckForTimeOut>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d123      	bne.n	80099b0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800996a:	f000 f917 	bl	8009b9c <prvIsQueueEmpty>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d017      	beq.n	80099a4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	3324      	adds	r3, #36	; 0x24
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	4611      	mov	r1, r2
 800997c:	4618      	mov	r0, r3
 800997e:	f000 ffd9 	bl	800a934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009984:	f000 f8b8 	bl	8009af8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009988:	f000 fe02 	bl	800a590 <xTaskResumeAll>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d189      	bne.n	80098a6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009992:	4b10      	ldr	r3, [pc, #64]	; (80099d4 <xQueueReceive+0x1c8>)
 8009994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009998:	601a      	str	r2, [r3, #0]
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	e780      	b.n	80098a6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80099a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099a6:	f000 f8a7 	bl	8009af8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099aa:	f000 fdf1 	bl	800a590 <xTaskResumeAll>
 80099ae:	e77a      	b.n	80098a6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80099b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099b2:	f000 f8a1 	bl	8009af8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099b6:	f000 fdeb 	bl	800a590 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099bc:	f000 f8ee 	bl	8009b9c <prvIsQueueEmpty>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f43f af6f 	beq.w	80098a6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3730      	adds	r7, #48	; 0x30
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	e000ed04 	.word	0xe000ed04

080099d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b086      	sub	sp, #24
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099e4:	2300      	movs	r3, #0
 80099e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d10d      	bne.n	8009a12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d14d      	bne.n	8009a9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f001 f9d2 	bl	800adac <xTaskPriorityDisinherit>
 8009a08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	609a      	str	r2, [r3, #8]
 8009a10:	e043      	b.n	8009a9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d119      	bne.n	8009a4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6858      	ldr	r0, [r3, #4]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a20:	461a      	mov	r2, r3
 8009a22:	68b9      	ldr	r1, [r7, #8]
 8009a24:	f002 fc98 	bl	800c358 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a30:	441a      	add	r2, r3
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	685a      	ldr	r2, [r3, #4]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d32b      	bcc.n	8009a9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	605a      	str	r2, [r3, #4]
 8009a4a:	e026      	b.n	8009a9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	68d8      	ldr	r0, [r3, #12]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a54:	461a      	mov	r2, r3
 8009a56:	68b9      	ldr	r1, [r7, #8]
 8009a58:	f002 fc7e 	bl	800c358 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	68da      	ldr	r2, [r3, #12]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a64:	425b      	negs	r3, r3
 8009a66:	441a      	add	r2, r3
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	68da      	ldr	r2, [r3, #12]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d207      	bcs.n	8009a88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	689a      	ldr	r2, [r3, #8]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a80:	425b      	negs	r3, r3
 8009a82:	441a      	add	r2, r3
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d105      	bne.n	8009a9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d002      	beq.n	8009a9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	3b01      	subs	r3, #1
 8009a98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	1c5a      	adds	r2, r3, #1
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009aa2:	697b      	ldr	r3, [r7, #20]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3718      	adds	r7, #24
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d018      	beq.n	8009af0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68da      	ldr	r2, [r3, #12]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac6:	441a      	add	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	68da      	ldr	r2, [r3, #12]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d303      	bcc.n	8009ae0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	68d9      	ldr	r1, [r3, #12]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae8:	461a      	mov	r2, r3
 8009aea:	6838      	ldr	r0, [r7, #0]
 8009aec:	f002 fc34 	bl	800c358 <memcpy>
	}
}
 8009af0:	bf00      	nop
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b00:	f001 ff44 	bl	800b98c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b0c:	e011      	b.n	8009b32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d012      	beq.n	8009b3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	3324      	adds	r3, #36	; 0x24
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 ff5e 	bl	800a9dc <xTaskRemoveFromEventList>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b26:	f001 f83b 	bl	800aba0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b2a:	7bfb      	ldrb	r3, [r7, #15]
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	dce9      	bgt.n	8009b0e <prvUnlockQueue+0x16>
 8009b3a:	e000      	b.n	8009b3e <prvUnlockQueue+0x46>
					break;
 8009b3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	22ff      	movs	r2, #255	; 0xff
 8009b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b46:	f001 ff55 	bl	800b9f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b4a:	f001 ff1f 	bl	800b98c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b56:	e011      	b.n	8009b7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d012      	beq.n	8009b86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	3310      	adds	r3, #16
 8009b64:	4618      	mov	r0, r3
 8009b66:	f000 ff39 	bl	800a9dc <xTaskRemoveFromEventList>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b70:	f001 f816 	bl	800aba0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	3b01      	subs	r3, #1
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	dce9      	bgt.n	8009b58 <prvUnlockQueue+0x60>
 8009b84:	e000      	b.n	8009b88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	22ff      	movs	r2, #255	; 0xff
 8009b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b90:	f001 ff30 	bl	800b9f4 <vPortExitCritical>
}
 8009b94:	bf00      	nop
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ba4:	f001 fef2 	bl	800b98c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d102      	bne.n	8009bb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	60fb      	str	r3, [r7, #12]
 8009bb4:	e001      	b.n	8009bba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bba:	f001 ff1b 	bl	800b9f4 <vPortExitCritical>

	return xReturn;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bd0:	f001 fedc 	bl	800b98c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d102      	bne.n	8009be6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009be0:	2301      	movs	r3, #1
 8009be2:	60fb      	str	r3, [r7, #12]
 8009be4:	e001      	b.n	8009bea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009be6:	2300      	movs	r3, #0
 8009be8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bea:	f001 ff03 	bl	800b9f4 <vPortExitCritical>

	return xReturn;
 8009bee:	68fb      	ldr	r3, [r7, #12]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c02:	2300      	movs	r3, #0
 8009c04:	60fb      	str	r3, [r7, #12]
 8009c06:	e014      	b.n	8009c32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c08:	4a0f      	ldr	r2, [pc, #60]	; (8009c48 <vQueueAddToRegistry+0x50>)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10b      	bne.n	8009c2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c14:	490c      	ldr	r1, [pc, #48]	; (8009c48 <vQueueAddToRegistry+0x50>)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c1e:	4a0a      	ldr	r2, [pc, #40]	; (8009c48 <vQueueAddToRegistry+0x50>)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	00db      	lsls	r3, r3, #3
 8009c24:	4413      	add	r3, r2
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c2a:	e006      	b.n	8009c3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	60fb      	str	r3, [r7, #12]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2b07      	cmp	r3, #7
 8009c36:	d9e7      	bls.n	8009c08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c38:	bf00      	nop
 8009c3a:	bf00      	nop
 8009c3c:	3714      	adds	r7, #20
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	20000f48 	.word	0x20000f48

08009c4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b086      	sub	sp, #24
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c5c:	f001 fe96 	bl	800b98c <vPortEnterCritical>
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c66:	b25b      	sxtb	r3, r3
 8009c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c6c:	d103      	bne.n	8009c76 <vQueueWaitForMessageRestricted+0x2a>
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c7c:	b25b      	sxtb	r3, r3
 8009c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c82:	d103      	bne.n	8009c8c <vQueueWaitForMessageRestricted+0x40>
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c8c:	f001 feb2 	bl	800b9f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d106      	bne.n	8009ca6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	3324      	adds	r3, #36	; 0x24
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	68b9      	ldr	r1, [r7, #8]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f000 fe6d 	bl	800a980 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009ca6:	6978      	ldr	r0, [r7, #20]
 8009ca8:	f7ff ff26 	bl	8009af8 <prvUnlockQueue>
	}
 8009cac:	bf00      	nop
 8009cae:	3718      	adds	r7, #24
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b08e      	sub	sp, #56	; 0x38
 8009cb8:	af04      	add	r7, sp, #16
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
 8009cc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10c      	bne.n	8009ce2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8009cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ccc:	b672      	cpsid	i
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	b662      	cpsie	i
 8009cdc:	623b      	str	r3, [r7, #32]
}
 8009cde:	bf00      	nop
 8009ce0:	e7fe      	b.n	8009ce0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10c      	bne.n	8009d02 <xTaskCreateStatic+0x4e>
	__asm volatile
 8009ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cec:	b672      	cpsid	i
 8009cee:	f383 8811 	msr	BASEPRI, r3
 8009cf2:	f3bf 8f6f 	isb	sy
 8009cf6:	f3bf 8f4f 	dsb	sy
 8009cfa:	b662      	cpsie	i
 8009cfc:	61fb      	str	r3, [r7, #28]
}
 8009cfe:	bf00      	nop
 8009d00:	e7fe      	b.n	8009d00 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d02:	23a8      	movs	r3, #168	; 0xa8
 8009d04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	2ba8      	cmp	r3, #168	; 0xa8
 8009d0a:	d00c      	beq.n	8009d26 <xTaskCreateStatic+0x72>
	__asm volatile
 8009d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d10:	b672      	cpsid	i
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	b662      	cpsie	i
 8009d20:	61bb      	str	r3, [r7, #24]
}
 8009d22:	bf00      	nop
 8009d24:	e7fe      	b.n	8009d24 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d01e      	beq.n	8009d6c <xTaskCreateStatic+0xb8>
 8009d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d01b      	beq.n	8009d6c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d40:	2202      	movs	r2, #2
 8009d42:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d46:	2300      	movs	r3, #0
 8009d48:	9303      	str	r3, [sp, #12]
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	9302      	str	r3, [sp, #8]
 8009d4e:	f107 0314 	add.w	r3, r7, #20
 8009d52:	9301      	str	r3, [sp, #4]
 8009d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	68b9      	ldr	r1, [r7, #8]
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f000 f850 	bl	8009e04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d66:	f000 f8f5 	bl	8009f54 <prvAddNewTaskToReadyList>
 8009d6a:	e001      	b.n	8009d70 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d70:	697b      	ldr	r3, [r7, #20]
	}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3728      	adds	r7, #40	; 0x28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b08c      	sub	sp, #48	; 0x30
 8009d7e:	af04      	add	r7, sp, #16
 8009d80:	60f8      	str	r0, [r7, #12]
 8009d82:	60b9      	str	r1, [r7, #8]
 8009d84:	603b      	str	r3, [r7, #0]
 8009d86:	4613      	mov	r3, r2
 8009d88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d8a:	88fb      	ldrh	r3, [r7, #6]
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f001 ff28 	bl	800bbe4 <pvPortMalloc>
 8009d94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00e      	beq.n	8009dba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d9c:	20a8      	movs	r0, #168	; 0xa8
 8009d9e:	f001 ff21 	bl	800bbe4 <pvPortMalloc>
 8009da2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d003      	beq.n	8009db2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	631a      	str	r2, [r3, #48]	; 0x30
 8009db0:	e005      	b.n	8009dbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009db2:	6978      	ldr	r0, [r7, #20]
 8009db4:	f001 ffe0 	bl	800bd78 <vPortFree>
 8009db8:	e001      	b.n	8009dbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d017      	beq.n	8009df4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009dcc:	88fa      	ldrh	r2, [r7, #6]
 8009dce:	2300      	movs	r3, #0
 8009dd0:	9303      	str	r3, [sp, #12]
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	9302      	str	r3, [sp, #8]
 8009dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd8:	9301      	str	r3, [sp, #4]
 8009dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	68b9      	ldr	r1, [r7, #8]
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f000 f80e 	bl	8009e04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009de8:	69f8      	ldr	r0, [r7, #28]
 8009dea:	f000 f8b3 	bl	8009f54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dee:	2301      	movs	r3, #1
 8009df0:	61bb      	str	r3, [r7, #24]
 8009df2:	e002      	b.n	8009dfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009df4:	f04f 33ff 	mov.w	r3, #4294967295
 8009df8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dfa:	69bb      	ldr	r3, [r7, #24]
	}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3720      	adds	r7, #32
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b088      	sub	sp, #32
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
 8009e10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	21a5      	movs	r1, #165	; 0xa5
 8009e1e:	f002 f9ca 	bl	800c1b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009e2c:	440b      	add	r3, r1
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	4413      	add	r3, r2
 8009e32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	f023 0307 	bic.w	r3, r3, #7
 8009e3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	f003 0307 	and.w	r3, r3, #7
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00c      	beq.n	8009e60 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4a:	b672      	cpsid	i
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	b662      	cpsie	i
 8009e5a:	617b      	str	r3, [r7, #20]
}
 8009e5c:	bf00      	nop
 8009e5e:	e7fe      	b.n	8009e5e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d01f      	beq.n	8009ea6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e66:	2300      	movs	r3, #0
 8009e68:	61fb      	str	r3, [r7, #28]
 8009e6a:	e012      	b.n	8009e92 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	4413      	add	r3, r2
 8009e72:	7819      	ldrb	r1, [r3, #0]
 8009e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	4413      	add	r3, r2
 8009e7a:	3334      	adds	r3, #52	; 0x34
 8009e7c:	460a      	mov	r2, r1
 8009e7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	4413      	add	r3, r2
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d006      	beq.n	8009e9a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	61fb      	str	r3, [r7, #28]
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	2b0f      	cmp	r3, #15
 8009e96:	d9e9      	bls.n	8009e6c <prvInitialiseNewTask+0x68>
 8009e98:	e000      	b.n	8009e9c <prvInitialiseNewTask+0x98>
			{
				break;
 8009e9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ea4:	e003      	b.n	8009eae <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb0:	2b37      	cmp	r3, #55	; 0x37
 8009eb2:	d901      	bls.n	8009eb8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009eb4:	2337      	movs	r3, #55	; 0x37
 8009eb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ebc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ec2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ecc:	3304      	adds	r3, #4
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7ff f952 	bl	8009178 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed6:	3318      	adds	r3, #24
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7ff f94d 	bl	8009178 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ee2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ef2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f06:	3354      	adds	r3, #84	; 0x54
 8009f08:	224c      	movs	r2, #76	; 0x4c
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f002 f952 	bl	800c1b6 <memset>
 8009f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f14:	4a0c      	ldr	r2, [pc, #48]	; (8009f48 <prvInitialiseNewTask+0x144>)
 8009f16:	659a      	str	r2, [r3, #88]	; 0x58
 8009f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1a:	4a0c      	ldr	r2, [pc, #48]	; (8009f4c <prvInitialiseNewTask+0x148>)
 8009f1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f20:	4a0b      	ldr	r2, [pc, #44]	; (8009f50 <prvInitialiseNewTask+0x14c>)
 8009f22:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	68f9      	ldr	r1, [r7, #12]
 8009f28:	69b8      	ldr	r0, [r7, #24]
 8009f2a:	f001 fc23 	bl	800b774 <pxPortInitialiseStack>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f32:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d002      	beq.n	8009f40 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f40:	bf00      	nop
 8009f42:	3720      	adds	r7, #32
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	200051d4 	.word	0x200051d4
 8009f4c:	2000523c 	.word	0x2000523c
 8009f50:	200052a4 	.word	0x200052a4

08009f54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f5c:	f001 fd16 	bl	800b98c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f60:	4b2d      	ldr	r3, [pc, #180]	; (800a018 <prvAddNewTaskToReadyList+0xc4>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	3301      	adds	r3, #1
 8009f66:	4a2c      	ldr	r2, [pc, #176]	; (800a018 <prvAddNewTaskToReadyList+0xc4>)
 8009f68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f6a:	4b2c      	ldr	r3, [pc, #176]	; (800a01c <prvAddNewTaskToReadyList+0xc8>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d109      	bne.n	8009f86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f72:	4a2a      	ldr	r2, [pc, #168]	; (800a01c <prvAddNewTaskToReadyList+0xc8>)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f78:	4b27      	ldr	r3, [pc, #156]	; (800a018 <prvAddNewTaskToReadyList+0xc4>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d110      	bne.n	8009fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f80:	f000 fe32 	bl	800abe8 <prvInitialiseTaskLists>
 8009f84:	e00d      	b.n	8009fa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f86:	4b26      	ldr	r3, [pc, #152]	; (800a020 <prvAddNewTaskToReadyList+0xcc>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d109      	bne.n	8009fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f8e:	4b23      	ldr	r3, [pc, #140]	; (800a01c <prvAddNewTaskToReadyList+0xc8>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d802      	bhi.n	8009fa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f9c:	4a1f      	ldr	r2, [pc, #124]	; (800a01c <prvAddNewTaskToReadyList+0xc8>)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009fa2:	4b20      	ldr	r3, [pc, #128]	; (800a024 <prvAddNewTaskToReadyList+0xd0>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	4a1e      	ldr	r2, [pc, #120]	; (800a024 <prvAddNewTaskToReadyList+0xd0>)
 8009faa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009fac:	4b1d      	ldr	r3, [pc, #116]	; (800a024 <prvAddNewTaskToReadyList+0xd0>)
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb8:	4b1b      	ldr	r3, [pc, #108]	; (800a028 <prvAddNewTaskToReadyList+0xd4>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d903      	bls.n	8009fc8 <prvAddNewTaskToReadyList+0x74>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc4:	4a18      	ldr	r2, [pc, #96]	; (800a028 <prvAddNewTaskToReadyList+0xd4>)
 8009fc6:	6013      	str	r3, [r2, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fcc:	4613      	mov	r3, r2
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	4413      	add	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4a15      	ldr	r2, [pc, #84]	; (800a02c <prvAddNewTaskToReadyList+0xd8>)
 8009fd6:	441a      	add	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	3304      	adds	r3, #4
 8009fdc:	4619      	mov	r1, r3
 8009fde:	4610      	mov	r0, r2
 8009fe0:	f7ff f8d7 	bl	8009192 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009fe4:	f001 fd06 	bl	800b9f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009fe8:	4b0d      	ldr	r3, [pc, #52]	; (800a020 <prvAddNewTaskToReadyList+0xcc>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00e      	beq.n	800a00e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ff0:	4b0a      	ldr	r3, [pc, #40]	; (800a01c <prvAddNewTaskToReadyList+0xc8>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d207      	bcs.n	800a00e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ffe:	4b0c      	ldr	r3, [pc, #48]	; (800a030 <prvAddNewTaskToReadyList+0xdc>)
 800a000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a004:	601a      	str	r2, [r3, #0]
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a00e:	bf00      	nop
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	2000145c 	.word	0x2000145c
 800a01c:	20000f88 	.word	0x20000f88
 800a020:	20001468 	.word	0x20001468
 800a024:	20001478 	.word	0x20001478
 800a028:	20001464 	.word	0x20001464
 800a02c:	20000f8c 	.word	0x20000f8c
 800a030:	e000ed04 	.word	0xe000ed04

0800a034 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a03c:	f001 fca6 	bl	800b98c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d102      	bne.n	800a04c <vTaskDelete+0x18>
 800a046:	4b2d      	ldr	r3, [pc, #180]	; (800a0fc <vTaskDelete+0xc8>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	e000      	b.n	800a04e <vTaskDelete+0x1a>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	3304      	adds	r3, #4
 800a054:	4618      	mov	r0, r3
 800a056:	f7ff f8f9 	bl	800924c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d004      	beq.n	800a06c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3318      	adds	r3, #24
 800a066:	4618      	mov	r0, r3
 800a068:	f7ff f8f0 	bl	800924c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800a06c:	4b24      	ldr	r3, [pc, #144]	; (800a100 <vTaskDelete+0xcc>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	3301      	adds	r3, #1
 800a072:	4a23      	ldr	r2, [pc, #140]	; (800a100 <vTaskDelete+0xcc>)
 800a074:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800a076:	4b21      	ldr	r3, [pc, #132]	; (800a0fc <vTaskDelete+0xc8>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d10b      	bne.n	800a098 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	3304      	adds	r3, #4
 800a084:	4619      	mov	r1, r3
 800a086:	481f      	ldr	r0, [pc, #124]	; (800a104 <vTaskDelete+0xd0>)
 800a088:	f7ff f883 	bl	8009192 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800a08c:	4b1e      	ldr	r3, [pc, #120]	; (800a108 <vTaskDelete+0xd4>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	3301      	adds	r3, #1
 800a092:	4a1d      	ldr	r2, [pc, #116]	; (800a108 <vTaskDelete+0xd4>)
 800a094:	6013      	str	r3, [r2, #0]
 800a096:	e009      	b.n	800a0ac <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800a098:	4b1c      	ldr	r3, [pc, #112]	; (800a10c <vTaskDelete+0xd8>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3b01      	subs	r3, #1
 800a09e:	4a1b      	ldr	r2, [pc, #108]	; (800a10c <vTaskDelete+0xd8>)
 800a0a0:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f000 fe0e 	bl	800acc4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800a0a8:	f000 fe42 	bl	800ad30 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800a0ac:	f001 fca2 	bl	800b9f4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800a0b0:	4b17      	ldr	r3, [pc, #92]	; (800a110 <vTaskDelete+0xdc>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d01d      	beq.n	800a0f4 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 800a0b8:	4b10      	ldr	r3, [pc, #64]	; (800a0fc <vTaskDelete+0xc8>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d118      	bne.n	800a0f4 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800a0c2:	4b14      	ldr	r3, [pc, #80]	; (800a114 <vTaskDelete+0xe0>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00c      	beq.n	800a0e4 <vTaskDelete+0xb0>
	__asm volatile
 800a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ce:	b672      	cpsid	i
 800a0d0:	f383 8811 	msr	BASEPRI, r3
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	b662      	cpsie	i
 800a0de:	60bb      	str	r3, [r7, #8]
}
 800a0e0:	bf00      	nop
 800a0e2:	e7fe      	b.n	800a0e2 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800a0e4:	4b0c      	ldr	r3, [pc, #48]	; (800a118 <vTaskDelete+0xe4>)
 800a0e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ea:	601a      	str	r2, [r3, #0]
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0f4:	bf00      	nop
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	20000f88 	.word	0x20000f88
 800a100:	20001478 	.word	0x20001478
 800a104:	20001430 	.word	0x20001430
 800a108:	20001444 	.word	0x20001444
 800a10c:	2000145c 	.word	0x2000145c
 800a110:	20001468 	.word	0x20001468
 800a114:	20001484 	.word	0x20001484
 800a118:	e000ed04 	.word	0xe000ed04

0800a11c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a124:	2300      	movs	r3, #0
 800a126:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d019      	beq.n	800a162 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a12e:	4b14      	ldr	r3, [pc, #80]	; (800a180 <vTaskDelay+0x64>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d00c      	beq.n	800a150 <vTaskDelay+0x34>
	__asm volatile
 800a136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13a:	b672      	cpsid	i
 800a13c:	f383 8811 	msr	BASEPRI, r3
 800a140:	f3bf 8f6f 	isb	sy
 800a144:	f3bf 8f4f 	dsb	sy
 800a148:	b662      	cpsie	i
 800a14a:	60bb      	str	r3, [r7, #8]
}
 800a14c:	bf00      	nop
 800a14e:	e7fe      	b.n	800a14e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a150:	f000 fa10 	bl	800a574 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a154:	2100      	movs	r1, #0
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fe9a 	bl	800ae90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a15c:	f000 fa18 	bl	800a590 <xTaskResumeAll>
 800a160:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d107      	bne.n	800a178 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800a168:	4b06      	ldr	r3, [pc, #24]	; (800a184 <vTaskDelay+0x68>)
 800a16a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a16e:	601a      	str	r2, [r3, #0]
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a178:	bf00      	nop
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	20001484 	.word	0x20001484
 800a184:	e000ed04 	.word	0xe000ed04

0800a188 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a190:	f001 fbfc 	bl	800b98c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d102      	bne.n	800a1a0 <vTaskSuspend+0x18>
 800a19a:	4b31      	ldr	r3, [pc, #196]	; (800a260 <vTaskSuspend+0xd8>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	e000      	b.n	800a1a2 <vTaskSuspend+0x1a>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7ff f84f 	bl	800924c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d004      	beq.n	800a1c0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	3318      	adds	r3, #24
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7ff f846 	bl	800924c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4827      	ldr	r0, [pc, #156]	; (800a264 <vTaskSuspend+0xdc>)
 800a1c8:	f7fe ffe3 	bl	8009192 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d103      	bne.n	800a1e0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a1e0:	f001 fc08 	bl	800b9f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a1e4:	4b20      	ldr	r3, [pc, #128]	; (800a268 <vTaskSuspend+0xe0>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d005      	beq.n	800a1f8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a1ec:	f001 fbce 	bl	800b98c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a1f0:	f000 fd9e 	bl	800ad30 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a1f4:	f001 fbfe 	bl	800b9f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a1f8:	4b19      	ldr	r3, [pc, #100]	; (800a260 <vTaskSuspend+0xd8>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d129      	bne.n	800a256 <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 800a202:	4b19      	ldr	r3, [pc, #100]	; (800a268 <vTaskSuspend+0xe0>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d019      	beq.n	800a23e <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a20a:	4b18      	ldr	r3, [pc, #96]	; (800a26c <vTaskSuspend+0xe4>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00c      	beq.n	800a22c <vTaskSuspend+0xa4>
	__asm volatile
 800a212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a216:	b672      	cpsid	i
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	b662      	cpsie	i
 800a226:	60bb      	str	r3, [r7, #8]
}
 800a228:	bf00      	nop
 800a22a:	e7fe      	b.n	800a22a <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 800a22c:	4b10      	ldr	r3, [pc, #64]	; (800a270 <vTaskSuspend+0xe8>)
 800a22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a23c:	e00b      	b.n	800a256 <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a23e:	4b09      	ldr	r3, [pc, #36]	; (800a264 <vTaskSuspend+0xdc>)
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	4b0c      	ldr	r3, [pc, #48]	; (800a274 <vTaskSuspend+0xec>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	429a      	cmp	r2, r3
 800a248:	d103      	bne.n	800a252 <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 800a24a:	4b05      	ldr	r3, [pc, #20]	; (800a260 <vTaskSuspend+0xd8>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	601a      	str	r2, [r3, #0]
	}
 800a250:	e001      	b.n	800a256 <vTaskSuspend+0xce>
					vTaskSwitchContext();
 800a252:	f000 fb09 	bl	800a868 <vTaskSwitchContext>
	}
 800a256:	bf00      	nop
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	20000f88 	.word	0x20000f88
 800a264:	20001448 	.word	0x20001448
 800a268:	20001468 	.word	0x20001468
 800a26c:	20001484 	.word	0x20001484
 800a270:	e000ed04 	.word	0xe000ed04
 800a274:	2000145c 	.word	0x2000145c

0800a278 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a278:	b480      	push	{r7}
 800a27a:	b087      	sub	sp, #28
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a280:	2300      	movs	r3, #0
 800a282:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10c      	bne.n	800a2a8 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	b672      	cpsid	i
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	b662      	cpsie	i
 800a2a2:	60fb      	str	r3, [r7, #12]
}
 800a2a4:	bf00      	nop
 800a2a6:	e7fe      	b.n	800a2a6 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	695b      	ldr	r3, [r3, #20]
 800a2ac:	4a0a      	ldr	r2, [pc, #40]	; (800a2d8 <prvTaskIsTaskSuspended+0x60>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d10a      	bne.n	800a2c8 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b6:	4a09      	ldr	r2, [pc, #36]	; (800a2dc <prvTaskIsTaskSuspended+0x64>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d005      	beq.n	800a2c8 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a2c8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	371c      	adds	r7, #28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	20001448 	.word	0x20001448
 800a2dc:	2000141c 	.word	0x2000141c

0800a2e0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10c      	bne.n	800a30c <vTaskResume+0x2c>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	b672      	cpsid	i
 800a2f8:	f383 8811 	msr	BASEPRI, r3
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	b662      	cpsie	i
 800a306:	60bb      	str	r3, [r7, #8]
}
 800a308:	bf00      	nop
 800a30a:	e7fe      	b.n	800a30a <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a30c:	4b20      	ldr	r3, [pc, #128]	; (800a390 <vTaskResume+0xb0>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	429a      	cmp	r2, r3
 800a314:	d038      	beq.n	800a388 <vTaskResume+0xa8>
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d035      	beq.n	800a388 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 800a31c:	f001 fb36 	bl	800b98c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f7ff ffa9 	bl	800a278 <prvTaskIsTaskSuspended>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d02b      	beq.n	800a384 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3304      	adds	r3, #4
 800a330:	4618      	mov	r0, r3
 800a332:	f7fe ff8b 	bl	800924c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a33a:	4b16      	ldr	r3, [pc, #88]	; (800a394 <vTaskResume+0xb4>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d903      	bls.n	800a34a <vTaskResume+0x6a>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a346:	4a13      	ldr	r2, [pc, #76]	; (800a394 <vTaskResume+0xb4>)
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a34e:	4613      	mov	r3, r2
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4413      	add	r3, r2
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4a10      	ldr	r2, [pc, #64]	; (800a398 <vTaskResume+0xb8>)
 800a358:	441a      	add	r2, r3
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3304      	adds	r3, #4
 800a35e:	4619      	mov	r1, r3
 800a360:	4610      	mov	r0, r2
 800a362:	f7fe ff16 	bl	8009192 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36a:	4b09      	ldr	r3, [pc, #36]	; (800a390 <vTaskResume+0xb0>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a370:	429a      	cmp	r2, r3
 800a372:	d307      	bcc.n	800a384 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a374:	4b09      	ldr	r3, [pc, #36]	; (800a39c <vTaskResume+0xbc>)
 800a376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a37a:	601a      	str	r2, [r3, #0]
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a384:	f001 fb36 	bl	800b9f4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a388:	bf00      	nop
 800a38a:	3710      	adds	r7, #16
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	20000f88 	.word	0x20000f88
 800a394:	20001464 	.word	0x20001464
 800a398:	20000f8c 	.word	0x20000f8c
 800a39c:	e000ed04 	.word	0xe000ed04

0800a3a0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b08a      	sub	sp, #40	; 0x28
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10c      	bne.n	800a3d0 <xTaskResumeFromISR+0x30>
	__asm volatile
 800a3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ba:	b672      	cpsid	i
 800a3bc:	f383 8811 	msr	BASEPRI, r3
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	b662      	cpsie	i
 800a3ca:	61bb      	str	r3, [r7, #24]
}
 800a3cc:	bf00      	nop
 800a3ce:	e7fe      	b.n	800a3ce <xTaskResumeFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3d0:	f001 fbc4 	bl	800bb5c <vPortValidateInterruptPriority>
	__asm volatile
 800a3d4:	f3ef 8211 	mrs	r2, BASEPRI
 800a3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3dc:	b672      	cpsid	i
 800a3de:	f383 8811 	msr	BASEPRI, r3
 800a3e2:	f3bf 8f6f 	isb	sy
 800a3e6:	f3bf 8f4f 	dsb	sy
 800a3ea:	b662      	cpsie	i
 800a3ec:	617a      	str	r2, [r7, #20]
 800a3ee:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a3f0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3f2:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a3f4:	6a38      	ldr	r0, [r7, #32]
 800a3f6:	f7ff ff3f 	bl	800a278 <prvTaskIsTaskSuspended>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d030      	beq.n	800a462 <xTaskResumeFromISR+0xc2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a400:	4b1d      	ldr	r3, [pc, #116]	; (800a478 <xTaskResumeFromISR+0xd8>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d126      	bne.n	800a456 <xTaskResumeFromISR+0xb6>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a408:	6a3b      	ldr	r3, [r7, #32]
 800a40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a40c:	4b1b      	ldr	r3, [pc, #108]	; (800a47c <xTaskResumeFromISR+0xdc>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a412:	429a      	cmp	r2, r3
 800a414:	d301      	bcc.n	800a41a <xTaskResumeFromISR+0x7a>
					{
						xYieldRequired = pdTRUE;
 800a416:	2301      	movs	r3, #1
 800a418:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a41a:	6a3b      	ldr	r3, [r7, #32]
 800a41c:	3304      	adds	r3, #4
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fe ff14 	bl	800924c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a424:	6a3b      	ldr	r3, [r7, #32]
 800a426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a428:	4b15      	ldr	r3, [pc, #84]	; (800a480 <xTaskResumeFromISR+0xe0>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d903      	bls.n	800a438 <xTaskResumeFromISR+0x98>
 800a430:	6a3b      	ldr	r3, [r7, #32]
 800a432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a434:	4a12      	ldr	r2, [pc, #72]	; (800a480 <xTaskResumeFromISR+0xe0>)
 800a436:	6013      	str	r3, [r2, #0]
 800a438:	6a3b      	ldr	r3, [r7, #32]
 800a43a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a43c:	4613      	mov	r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	4413      	add	r3, r2
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	4a0f      	ldr	r2, [pc, #60]	; (800a484 <xTaskResumeFromISR+0xe4>)
 800a446:	441a      	add	r2, r3
 800a448:	6a3b      	ldr	r3, [r7, #32]
 800a44a:	3304      	adds	r3, #4
 800a44c:	4619      	mov	r1, r3
 800a44e:	4610      	mov	r0, r2
 800a450:	f7fe fe9f 	bl	8009192 <vListInsertEnd>
 800a454:	e005      	b.n	800a462 <xTaskResumeFromISR+0xc2>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a456:	6a3b      	ldr	r3, [r7, #32]
 800a458:	3318      	adds	r3, #24
 800a45a:	4619      	mov	r1, r3
 800a45c:	480a      	ldr	r0, [pc, #40]	; (800a488 <xTaskResumeFromISR+0xe8>)
 800a45e:	f7fe fe98 	bl	8009192 <vListInsertEnd>
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f383 8811 	msr	BASEPRI, r3
}
 800a46c:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800a46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a470:	4618      	mov	r0, r3
 800a472:	3728      	adds	r7, #40	; 0x28
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	20001484 	.word	0x20001484
 800a47c:	20000f88 	.word	0x20000f88
 800a480:	20001464 	.word	0x20001464
 800a484:	20000f8c 	.word	0x20000f8c
 800a488:	2000141c 	.word	0x2000141c

0800a48c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b08a      	sub	sp, #40	; 0x28
 800a490:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a492:	2300      	movs	r3, #0
 800a494:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a496:	2300      	movs	r3, #0
 800a498:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a49a:	463a      	mov	r2, r7
 800a49c:	1d39      	adds	r1, r7, #4
 800a49e:	f107 0308 	add.w	r3, r7, #8
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7fe fe14 	bl	80090d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a4a8:	6839      	ldr	r1, [r7, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	9202      	str	r2, [sp, #8]
 800a4b0:	9301      	str	r3, [sp, #4]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	460a      	mov	r2, r1
 800a4ba:	4926      	ldr	r1, [pc, #152]	; (800a554 <vTaskStartScheduler+0xc8>)
 800a4bc:	4826      	ldr	r0, [pc, #152]	; (800a558 <vTaskStartScheduler+0xcc>)
 800a4be:	f7ff fbf9 	bl	8009cb4 <xTaskCreateStatic>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	4a25      	ldr	r2, [pc, #148]	; (800a55c <vTaskStartScheduler+0xd0>)
 800a4c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a4c8:	4b24      	ldr	r3, [pc, #144]	; (800a55c <vTaskStartScheduler+0xd0>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d002      	beq.n	800a4d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	617b      	str	r3, [r7, #20]
 800a4d4:	e001      	b.n	800a4da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d102      	bne.n	800a4e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a4e0:	f000 fd2a 	bl	800af38 <xTimerCreateTimerTask>
 800a4e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d11d      	bne.n	800a528 <vTaskStartScheduler+0x9c>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	b672      	cpsid	i
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	b662      	cpsie	i
 800a500:	613b      	str	r3, [r7, #16]
}
 800a502:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a504:	4b16      	ldr	r3, [pc, #88]	; (800a560 <vTaskStartScheduler+0xd4>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3354      	adds	r3, #84	; 0x54
 800a50a:	4a16      	ldr	r2, [pc, #88]	; (800a564 <vTaskStartScheduler+0xd8>)
 800a50c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a50e:	4b16      	ldr	r3, [pc, #88]	; (800a568 <vTaskStartScheduler+0xdc>)
 800a510:	f04f 32ff 	mov.w	r2, #4294967295
 800a514:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a516:	4b15      	ldr	r3, [pc, #84]	; (800a56c <vTaskStartScheduler+0xe0>)
 800a518:	2201      	movs	r2, #1
 800a51a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a51c:	4b14      	ldr	r3, [pc, #80]	; (800a570 <vTaskStartScheduler+0xe4>)
 800a51e:	2200      	movs	r2, #0
 800a520:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a522:	f001 f9b5 	bl	800b890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a526:	e010      	b.n	800a54a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52e:	d10c      	bne.n	800a54a <vTaskStartScheduler+0xbe>
	__asm volatile
 800a530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a534:	b672      	cpsid	i
 800a536:	f383 8811 	msr	BASEPRI, r3
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	b662      	cpsie	i
 800a544:	60fb      	str	r3, [r7, #12]
}
 800a546:	bf00      	nop
 800a548:	e7fe      	b.n	800a548 <vTaskStartScheduler+0xbc>
}
 800a54a:	bf00      	nop
 800a54c:	3718      	adds	r7, #24
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	0800d13c 	.word	0x0800d13c
 800a558:	0800abb9 	.word	0x0800abb9
 800a55c:	20001480 	.word	0x20001480
 800a560:	20000f88 	.word	0x20000f88
 800a564:	200000c0 	.word	0x200000c0
 800a568:	2000147c 	.word	0x2000147c
 800a56c:	20001468 	.word	0x20001468
 800a570:	20001460 	.word	0x20001460

0800a574 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a574:	b480      	push	{r7}
 800a576:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a578:	4b04      	ldr	r3, [pc, #16]	; (800a58c <vTaskSuspendAll+0x18>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	3301      	adds	r3, #1
 800a57e:	4a03      	ldr	r2, [pc, #12]	; (800a58c <vTaskSuspendAll+0x18>)
 800a580:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a582:	bf00      	nop
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	20001484 	.word	0x20001484

0800a590 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a596:	2300      	movs	r3, #0
 800a598:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a59a:	2300      	movs	r3, #0
 800a59c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a59e:	4b43      	ldr	r3, [pc, #268]	; (800a6ac <xTaskResumeAll+0x11c>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10c      	bne.n	800a5c0 <xTaskResumeAll+0x30>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5aa:	b672      	cpsid	i
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	b662      	cpsie	i
 800a5ba:	603b      	str	r3, [r7, #0]
}
 800a5bc:	bf00      	nop
 800a5be:	e7fe      	b.n	800a5be <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a5c0:	f001 f9e4 	bl	800b98c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a5c4:	4b39      	ldr	r3, [pc, #228]	; (800a6ac <xTaskResumeAll+0x11c>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	4a38      	ldr	r2, [pc, #224]	; (800a6ac <xTaskResumeAll+0x11c>)
 800a5cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5ce:	4b37      	ldr	r3, [pc, #220]	; (800a6ac <xTaskResumeAll+0x11c>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d162      	bne.n	800a69c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a5d6:	4b36      	ldr	r3, [pc, #216]	; (800a6b0 <xTaskResumeAll+0x120>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d05e      	beq.n	800a69c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5de:	e02f      	b.n	800a640 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5e0:	4b34      	ldr	r3, [pc, #208]	; (800a6b4 <xTaskResumeAll+0x124>)
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	3318      	adds	r3, #24
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fe fe2d 	bl	800924c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	3304      	adds	r3, #4
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fe fe28 	bl	800924c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a600:	4b2d      	ldr	r3, [pc, #180]	; (800a6b8 <xTaskResumeAll+0x128>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	429a      	cmp	r2, r3
 800a606:	d903      	bls.n	800a610 <xTaskResumeAll+0x80>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60c:	4a2a      	ldr	r2, [pc, #168]	; (800a6b8 <xTaskResumeAll+0x128>)
 800a60e:	6013      	str	r3, [r2, #0]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a614:	4613      	mov	r3, r2
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	4413      	add	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4a27      	ldr	r2, [pc, #156]	; (800a6bc <xTaskResumeAll+0x12c>)
 800a61e:	441a      	add	r2, r3
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	3304      	adds	r3, #4
 800a624:	4619      	mov	r1, r3
 800a626:	4610      	mov	r0, r2
 800a628:	f7fe fdb3 	bl	8009192 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a630:	4b23      	ldr	r3, [pc, #140]	; (800a6c0 <xTaskResumeAll+0x130>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a636:	429a      	cmp	r2, r3
 800a638:	d302      	bcc.n	800a640 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800a63a:	4b22      	ldr	r3, [pc, #136]	; (800a6c4 <xTaskResumeAll+0x134>)
 800a63c:	2201      	movs	r2, #1
 800a63e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a640:	4b1c      	ldr	r3, [pc, #112]	; (800a6b4 <xTaskResumeAll+0x124>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d1cb      	bne.n	800a5e0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d001      	beq.n	800a652 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a64e:	f000 fb6f 	bl	800ad30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a652:	4b1d      	ldr	r3, [pc, #116]	; (800a6c8 <xTaskResumeAll+0x138>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d010      	beq.n	800a680 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a65e:	f000 f847 	bl	800a6f0 <xTaskIncrementTick>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d002      	beq.n	800a66e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800a668:	4b16      	ldr	r3, [pc, #88]	; (800a6c4 <xTaskResumeAll+0x134>)
 800a66a:	2201      	movs	r2, #1
 800a66c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	3b01      	subs	r3, #1
 800a672:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1f1      	bne.n	800a65e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800a67a:	4b13      	ldr	r3, [pc, #76]	; (800a6c8 <xTaskResumeAll+0x138>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a680:	4b10      	ldr	r3, [pc, #64]	; (800a6c4 <xTaskResumeAll+0x134>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d009      	beq.n	800a69c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a688:	2301      	movs	r3, #1
 800a68a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a68c:	4b0f      	ldr	r3, [pc, #60]	; (800a6cc <xTaskResumeAll+0x13c>)
 800a68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a69c:	f001 f9aa 	bl	800b9f4 <vPortExitCritical>

	return xAlreadyYielded;
 800a6a0:	68bb      	ldr	r3, [r7, #8]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	20001484 	.word	0x20001484
 800a6b0:	2000145c 	.word	0x2000145c
 800a6b4:	2000141c 	.word	0x2000141c
 800a6b8:	20001464 	.word	0x20001464
 800a6bc:	20000f8c 	.word	0x20000f8c
 800a6c0:	20000f88 	.word	0x20000f88
 800a6c4:	20001470 	.word	0x20001470
 800a6c8:	2000146c 	.word	0x2000146c
 800a6cc:	e000ed04 	.word	0xe000ed04

0800a6d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a6d6:	4b05      	ldr	r3, [pc, #20]	; (800a6ec <xTaskGetTickCount+0x1c>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a6dc:	687b      	ldr	r3, [r7, #4]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	370c      	adds	r7, #12
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	20001460 	.word	0x20001460

0800a6f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6fa:	4b50      	ldr	r3, [pc, #320]	; (800a83c <xTaskIncrementTick+0x14c>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f040 808b 	bne.w	800a81a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a704:	4b4e      	ldr	r3, [pc, #312]	; (800a840 <xTaskIncrementTick+0x150>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	3301      	adds	r3, #1
 800a70a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a70c:	4a4c      	ldr	r2, [pc, #304]	; (800a840 <xTaskIncrementTick+0x150>)
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d122      	bne.n	800a75e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a718:	4b4a      	ldr	r3, [pc, #296]	; (800a844 <xTaskIncrementTick+0x154>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00c      	beq.n	800a73c <xTaskIncrementTick+0x4c>
	__asm volatile
 800a722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a726:	b672      	cpsid	i
 800a728:	f383 8811 	msr	BASEPRI, r3
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	b662      	cpsie	i
 800a736:	603b      	str	r3, [r7, #0]
}
 800a738:	bf00      	nop
 800a73a:	e7fe      	b.n	800a73a <xTaskIncrementTick+0x4a>
 800a73c:	4b41      	ldr	r3, [pc, #260]	; (800a844 <xTaskIncrementTick+0x154>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	60fb      	str	r3, [r7, #12]
 800a742:	4b41      	ldr	r3, [pc, #260]	; (800a848 <xTaskIncrementTick+0x158>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a3f      	ldr	r2, [pc, #252]	; (800a844 <xTaskIncrementTick+0x154>)
 800a748:	6013      	str	r3, [r2, #0]
 800a74a:	4a3f      	ldr	r2, [pc, #252]	; (800a848 <xTaskIncrementTick+0x158>)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	4b3e      	ldr	r3, [pc, #248]	; (800a84c <xTaskIncrementTick+0x15c>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	3301      	adds	r3, #1
 800a756:	4a3d      	ldr	r2, [pc, #244]	; (800a84c <xTaskIncrementTick+0x15c>)
 800a758:	6013      	str	r3, [r2, #0]
 800a75a:	f000 fae9 	bl	800ad30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a75e:	4b3c      	ldr	r3, [pc, #240]	; (800a850 <xTaskIncrementTick+0x160>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	693a      	ldr	r2, [r7, #16]
 800a764:	429a      	cmp	r2, r3
 800a766:	d349      	bcc.n	800a7fc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a768:	4b36      	ldr	r3, [pc, #216]	; (800a844 <xTaskIncrementTick+0x154>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d104      	bne.n	800a77c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a772:	4b37      	ldr	r3, [pc, #220]	; (800a850 <xTaskIncrementTick+0x160>)
 800a774:	f04f 32ff 	mov.w	r2, #4294967295
 800a778:	601a      	str	r2, [r3, #0]
					break;
 800a77a:	e03f      	b.n	800a7fc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a77c:	4b31      	ldr	r3, [pc, #196]	; (800a844 <xTaskIncrementTick+0x154>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a78c:	693a      	ldr	r2, [r7, #16]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	429a      	cmp	r2, r3
 800a792:	d203      	bcs.n	800a79c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a794:	4a2e      	ldr	r2, [pc, #184]	; (800a850 <xTaskIncrementTick+0x160>)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a79a:	e02f      	b.n	800a7fc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	3304      	adds	r3, #4
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7fe fd53 	bl	800924c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d004      	beq.n	800a7b8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	3318      	adds	r3, #24
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fe fd4a 	bl	800924c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7bc:	4b25      	ldr	r3, [pc, #148]	; (800a854 <xTaskIncrementTick+0x164>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d903      	bls.n	800a7cc <xTaskIncrementTick+0xdc>
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c8:	4a22      	ldr	r2, [pc, #136]	; (800a854 <xTaskIncrementTick+0x164>)
 800a7ca:	6013      	str	r3, [r2, #0]
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4413      	add	r3, r2
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	4a1f      	ldr	r2, [pc, #124]	; (800a858 <xTaskIncrementTick+0x168>)
 800a7da:	441a      	add	r2, r3
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	3304      	adds	r3, #4
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	f7fe fcd5 	bl	8009192 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ec:	4b1b      	ldr	r3, [pc, #108]	; (800a85c <xTaskIncrementTick+0x16c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d3b8      	bcc.n	800a768 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7fa:	e7b5      	b.n	800a768 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a7fc:	4b17      	ldr	r3, [pc, #92]	; (800a85c <xTaskIncrementTick+0x16c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a802:	4915      	ldr	r1, [pc, #84]	; (800a858 <xTaskIncrementTick+0x168>)
 800a804:	4613      	mov	r3, r2
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4413      	add	r3, r2
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	440b      	add	r3, r1
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2b01      	cmp	r3, #1
 800a812:	d907      	bls.n	800a824 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800a814:	2301      	movs	r3, #1
 800a816:	617b      	str	r3, [r7, #20]
 800a818:	e004      	b.n	800a824 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a81a:	4b11      	ldr	r3, [pc, #68]	; (800a860 <xTaskIncrementTick+0x170>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3301      	adds	r3, #1
 800a820:	4a0f      	ldr	r2, [pc, #60]	; (800a860 <xTaskIncrementTick+0x170>)
 800a822:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a824:	4b0f      	ldr	r3, [pc, #60]	; (800a864 <xTaskIncrementTick+0x174>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800a82c:	2301      	movs	r3, #1
 800a82e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a830:	697b      	ldr	r3, [r7, #20]
}
 800a832:	4618      	mov	r0, r3
 800a834:	3718      	adds	r7, #24
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	20001484 	.word	0x20001484
 800a840:	20001460 	.word	0x20001460
 800a844:	20001414 	.word	0x20001414
 800a848:	20001418 	.word	0x20001418
 800a84c:	20001474 	.word	0x20001474
 800a850:	2000147c 	.word	0x2000147c
 800a854:	20001464 	.word	0x20001464
 800a858:	20000f8c 	.word	0x20000f8c
 800a85c:	20000f88 	.word	0x20000f88
 800a860:	2000146c 	.word	0x2000146c
 800a864:	20001470 	.word	0x20001470

0800a868 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a86e:	4b2b      	ldr	r3, [pc, #172]	; (800a91c <vTaskSwitchContext+0xb4>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d003      	beq.n	800a87e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a876:	4b2a      	ldr	r3, [pc, #168]	; (800a920 <vTaskSwitchContext+0xb8>)
 800a878:	2201      	movs	r2, #1
 800a87a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a87c:	e048      	b.n	800a910 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800a87e:	4b28      	ldr	r3, [pc, #160]	; (800a920 <vTaskSwitchContext+0xb8>)
 800a880:	2200      	movs	r2, #0
 800a882:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a884:	4b27      	ldr	r3, [pc, #156]	; (800a924 <vTaskSwitchContext+0xbc>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	60fb      	str	r3, [r7, #12]
 800a88a:	e012      	b.n	800a8b2 <vTaskSwitchContext+0x4a>
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10c      	bne.n	800a8ac <vTaskSwitchContext+0x44>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	b672      	cpsid	i
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	b662      	cpsie	i
 800a8a6:	607b      	str	r3, [r7, #4]
}
 800a8a8:	bf00      	nop
 800a8aa:	e7fe      	b.n	800a8aa <vTaskSwitchContext+0x42>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	60fb      	str	r3, [r7, #12]
 800a8b2:	491d      	ldr	r1, [pc, #116]	; (800a928 <vTaskSwitchContext+0xc0>)
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	4413      	add	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	440b      	add	r3, r1
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d0e2      	beq.n	800a88c <vTaskSwitchContext+0x24>
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	4413      	add	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	4a15      	ldr	r2, [pc, #84]	; (800a928 <vTaskSwitchContext+0xc0>)
 800a8d2:	4413      	add	r3, r2
 800a8d4:	60bb      	str	r3, [r7, #8]
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	685a      	ldr	r2, [r3, #4]
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	605a      	str	r2, [r3, #4]
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	685a      	ldr	r2, [r3, #4]
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	3308      	adds	r3, #8
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d104      	bne.n	800a8f6 <vTaskSwitchContext+0x8e>
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	685a      	ldr	r2, [r3, #4]
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	605a      	str	r2, [r3, #4]
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	4a0b      	ldr	r2, [pc, #44]	; (800a92c <vTaskSwitchContext+0xc4>)
 800a8fe:	6013      	str	r3, [r2, #0]
 800a900:	4a08      	ldr	r2, [pc, #32]	; (800a924 <vTaskSwitchContext+0xbc>)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a906:	4b09      	ldr	r3, [pc, #36]	; (800a92c <vTaskSwitchContext+0xc4>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	3354      	adds	r3, #84	; 0x54
 800a90c:	4a08      	ldr	r2, [pc, #32]	; (800a930 <vTaskSwitchContext+0xc8>)
 800a90e:	6013      	str	r3, [r2, #0]
}
 800a910:	bf00      	nop
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	20001484 	.word	0x20001484
 800a920:	20001470 	.word	0x20001470
 800a924:	20001464 	.word	0x20001464
 800a928:	20000f8c 	.word	0x20000f8c
 800a92c:	20000f88 	.word	0x20000f88
 800a930:	200000c0 	.word	0x200000c0

0800a934 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10c      	bne.n	800a95e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a948:	b672      	cpsid	i
 800a94a:	f383 8811 	msr	BASEPRI, r3
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	b662      	cpsie	i
 800a958:	60fb      	str	r3, [r7, #12]
}
 800a95a:	bf00      	nop
 800a95c:	e7fe      	b.n	800a95c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a95e:	4b07      	ldr	r3, [pc, #28]	; (800a97c <vTaskPlaceOnEventList+0x48>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	3318      	adds	r3, #24
 800a964:	4619      	mov	r1, r3
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7fe fc37 	bl	80091da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a96c:	2101      	movs	r1, #1
 800a96e:	6838      	ldr	r0, [r7, #0]
 800a970:	f000 fa8e 	bl	800ae90 <prvAddCurrentTaskToDelayedList>
}
 800a974:	bf00      	nop
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	20000f88 	.word	0x20000f88

0800a980 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10c      	bne.n	800a9ac <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a996:	b672      	cpsid	i
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	b662      	cpsie	i
 800a9a6:	617b      	str	r3, [r7, #20]
}
 800a9a8:	bf00      	nop
 800a9aa:	e7fe      	b.n	800a9aa <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9ac:	4b0a      	ldr	r3, [pc, #40]	; (800a9d8 <vTaskPlaceOnEventListRestricted+0x58>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3318      	adds	r3, #24
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f7fe fbec 	bl	8009192 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d002      	beq.n	800a9c6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800a9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a9c6:	6879      	ldr	r1, [r7, #4]
 800a9c8:	68b8      	ldr	r0, [r7, #8]
 800a9ca:	f000 fa61 	bl	800ae90 <prvAddCurrentTaskToDelayedList>
	}
 800a9ce:	bf00      	nop
 800a9d0:	3718      	adds	r7, #24
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	20000f88 	.word	0x20000f88

0800a9dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b086      	sub	sp, #24
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d10c      	bne.n	800aa0c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f6:	b672      	cpsid	i
 800a9f8:	f383 8811 	msr	BASEPRI, r3
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	b662      	cpsie	i
 800aa06:	60fb      	str	r3, [r7, #12]
}
 800aa08:	bf00      	nop
 800aa0a:	e7fe      	b.n	800aa0a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	3318      	adds	r3, #24
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fe fc1b 	bl	800924c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa16:	4b1e      	ldr	r3, [pc, #120]	; (800aa90 <xTaskRemoveFromEventList+0xb4>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d11d      	bne.n	800aa5a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	3304      	adds	r3, #4
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe fc12 	bl	800924c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa2c:	4b19      	ldr	r3, [pc, #100]	; (800aa94 <xTaskRemoveFromEventList+0xb8>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d903      	bls.n	800aa3c <xTaskRemoveFromEventList+0x60>
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa38:	4a16      	ldr	r2, [pc, #88]	; (800aa94 <xTaskRemoveFromEventList+0xb8>)
 800aa3a:	6013      	str	r3, [r2, #0]
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa40:	4613      	mov	r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	4413      	add	r3, r2
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	4a13      	ldr	r2, [pc, #76]	; (800aa98 <xTaskRemoveFromEventList+0xbc>)
 800aa4a:	441a      	add	r2, r3
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	3304      	adds	r3, #4
 800aa50:	4619      	mov	r1, r3
 800aa52:	4610      	mov	r0, r2
 800aa54:	f7fe fb9d 	bl	8009192 <vListInsertEnd>
 800aa58:	e005      	b.n	800aa66 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	3318      	adds	r3, #24
 800aa5e:	4619      	mov	r1, r3
 800aa60:	480e      	ldr	r0, [pc, #56]	; (800aa9c <xTaskRemoveFromEventList+0xc0>)
 800aa62:	f7fe fb96 	bl	8009192 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa6a:	4b0d      	ldr	r3, [pc, #52]	; (800aaa0 <xTaskRemoveFromEventList+0xc4>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d905      	bls.n	800aa80 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aa74:	2301      	movs	r3, #1
 800aa76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aa78:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <xTaskRemoveFromEventList+0xc8>)
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	601a      	str	r2, [r3, #0]
 800aa7e:	e001      	b.n	800aa84 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800aa80:	2300      	movs	r3, #0
 800aa82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aa84:	697b      	ldr	r3, [r7, #20]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	20001484 	.word	0x20001484
 800aa94:	20001464 	.word	0x20001464
 800aa98:	20000f8c 	.word	0x20000f8c
 800aa9c:	2000141c 	.word	0x2000141c
 800aaa0:	20000f88 	.word	0x20000f88
 800aaa4:	20001470 	.word	0x20001470

0800aaa8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aab0:	4b06      	ldr	r3, [pc, #24]	; (800aacc <vTaskInternalSetTimeOutState+0x24>)
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aab8:	4b05      	ldr	r3, [pc, #20]	; (800aad0 <vTaskInternalSetTimeOutState+0x28>)
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	605a      	str	r2, [r3, #4]
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr
 800aacc:	20001474 	.word	0x20001474
 800aad0:	20001460 	.word	0x20001460

0800aad4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b088      	sub	sp, #32
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d10c      	bne.n	800aafe <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800aae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae8:	b672      	cpsid	i
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	b662      	cpsie	i
 800aaf8:	613b      	str	r3, [r7, #16]
}
 800aafa:	bf00      	nop
 800aafc:	e7fe      	b.n	800aafc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d10c      	bne.n	800ab1e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ab04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab08:	b672      	cpsid	i
 800ab0a:	f383 8811 	msr	BASEPRI, r3
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	b662      	cpsie	i
 800ab18:	60fb      	str	r3, [r7, #12]
}
 800ab1a:	bf00      	nop
 800ab1c:	e7fe      	b.n	800ab1c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ab1e:	f000 ff35 	bl	800b98c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab22:	4b1d      	ldr	r3, [pc, #116]	; (800ab98 <xTaskCheckForTimeOut+0xc4>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	69ba      	ldr	r2, [r7, #24]
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3a:	d102      	bne.n	800ab42 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	61fb      	str	r3, [r7, #28]
 800ab40:	e023      	b.n	800ab8a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	4b15      	ldr	r3, [pc, #84]	; (800ab9c <xTaskCheckForTimeOut+0xc8>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d007      	beq.n	800ab5e <xTaskCheckForTimeOut+0x8a>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	69ba      	ldr	r2, [r7, #24]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d302      	bcc.n	800ab5e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	61fb      	str	r3, [r7, #28]
 800ab5c:	e015      	b.n	800ab8a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d20b      	bcs.n	800ab80 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	1ad2      	subs	r2, r2, r3
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f7ff ff97 	bl	800aaa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	61fb      	str	r3, [r7, #28]
 800ab7e:	e004      	b.n	800ab8a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	2200      	movs	r2, #0
 800ab84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ab86:	2301      	movs	r3, #1
 800ab88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ab8a:	f000 ff33 	bl	800b9f4 <vPortExitCritical>

	return xReturn;
 800ab8e:	69fb      	ldr	r3, [r7, #28]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3720      	adds	r7, #32
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	20001460 	.word	0x20001460
 800ab9c:	20001474 	.word	0x20001474

0800aba0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aba0:	b480      	push	{r7}
 800aba2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aba4:	4b03      	ldr	r3, [pc, #12]	; (800abb4 <vTaskMissedYield+0x14>)
 800aba6:	2201      	movs	r2, #1
 800aba8:	601a      	str	r2, [r3, #0]
}
 800abaa:	bf00      	nop
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr
 800abb4:	20001470 	.word	0x20001470

0800abb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800abc0:	f000 f852 	bl	800ac68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800abc4:	4b06      	ldr	r3, [pc, #24]	; (800abe0 <prvIdleTask+0x28>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d9f9      	bls.n	800abc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800abcc:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <prvIdleTask+0x2c>)
 800abce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800abdc:	e7f0      	b.n	800abc0 <prvIdleTask+0x8>
 800abde:	bf00      	nop
 800abe0:	20000f8c 	.word	0x20000f8c
 800abe4:	e000ed04 	.word	0xe000ed04

0800abe8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abee:	2300      	movs	r3, #0
 800abf0:	607b      	str	r3, [r7, #4]
 800abf2:	e00c      	b.n	800ac0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	4613      	mov	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4413      	add	r3, r2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	4a12      	ldr	r2, [pc, #72]	; (800ac48 <prvInitialiseTaskLists+0x60>)
 800ac00:	4413      	add	r3, r2
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fe fa98 	bl	8009138 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	607b      	str	r3, [r7, #4]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2b37      	cmp	r3, #55	; 0x37
 800ac12:	d9ef      	bls.n	800abf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ac14:	480d      	ldr	r0, [pc, #52]	; (800ac4c <prvInitialiseTaskLists+0x64>)
 800ac16:	f7fe fa8f 	bl	8009138 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac1a:	480d      	ldr	r0, [pc, #52]	; (800ac50 <prvInitialiseTaskLists+0x68>)
 800ac1c:	f7fe fa8c 	bl	8009138 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac20:	480c      	ldr	r0, [pc, #48]	; (800ac54 <prvInitialiseTaskLists+0x6c>)
 800ac22:	f7fe fa89 	bl	8009138 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac26:	480c      	ldr	r0, [pc, #48]	; (800ac58 <prvInitialiseTaskLists+0x70>)
 800ac28:	f7fe fa86 	bl	8009138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac2c:	480b      	ldr	r0, [pc, #44]	; (800ac5c <prvInitialiseTaskLists+0x74>)
 800ac2e:	f7fe fa83 	bl	8009138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac32:	4b0b      	ldr	r3, [pc, #44]	; (800ac60 <prvInitialiseTaskLists+0x78>)
 800ac34:	4a05      	ldr	r2, [pc, #20]	; (800ac4c <prvInitialiseTaskLists+0x64>)
 800ac36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac38:	4b0a      	ldr	r3, [pc, #40]	; (800ac64 <prvInitialiseTaskLists+0x7c>)
 800ac3a:	4a05      	ldr	r2, [pc, #20]	; (800ac50 <prvInitialiseTaskLists+0x68>)
 800ac3c:	601a      	str	r2, [r3, #0]
}
 800ac3e:	bf00      	nop
 800ac40:	3708      	adds	r7, #8
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	20000f8c 	.word	0x20000f8c
 800ac4c:	200013ec 	.word	0x200013ec
 800ac50:	20001400 	.word	0x20001400
 800ac54:	2000141c 	.word	0x2000141c
 800ac58:	20001430 	.word	0x20001430
 800ac5c:	20001448 	.word	0x20001448
 800ac60:	20001414 	.word	0x20001414
 800ac64:	20001418 	.word	0x20001418

0800ac68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac6e:	e019      	b.n	800aca4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac70:	f000 fe8c 	bl	800b98c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac74:	4b10      	ldr	r3, [pc, #64]	; (800acb8 <prvCheckTasksWaitingTermination+0x50>)
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	3304      	adds	r3, #4
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7fe fae3 	bl	800924c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac86:	4b0d      	ldr	r3, [pc, #52]	; (800acbc <prvCheckTasksWaitingTermination+0x54>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	3b01      	subs	r3, #1
 800ac8c:	4a0b      	ldr	r2, [pc, #44]	; (800acbc <prvCheckTasksWaitingTermination+0x54>)
 800ac8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac90:	4b0b      	ldr	r3, [pc, #44]	; (800acc0 <prvCheckTasksWaitingTermination+0x58>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	3b01      	subs	r3, #1
 800ac96:	4a0a      	ldr	r2, [pc, #40]	; (800acc0 <prvCheckTasksWaitingTermination+0x58>)
 800ac98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac9a:	f000 feab 	bl	800b9f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f810 	bl	800acc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aca4:	4b06      	ldr	r3, [pc, #24]	; (800acc0 <prvCheckTasksWaitingTermination+0x58>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1e1      	bne.n	800ac70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800acac:	bf00      	nop
 800acae:	bf00      	nop
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	20001430 	.word	0x20001430
 800acbc:	2000145c 	.word	0x2000145c
 800acc0:	20001444 	.word	0x20001444

0800acc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	3354      	adds	r3, #84	; 0x54
 800acd0:	4618      	mov	r0, r3
 800acd2:	f001 fa89 	bl	800c1e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d108      	bne.n	800acf2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace4:	4618      	mov	r0, r3
 800ace6:	f001 f847 	bl	800bd78 <vPortFree>
				vPortFree( pxTCB );
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f001 f844 	bl	800bd78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800acf0:	e01a      	b.n	800ad28 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d103      	bne.n	800ad04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f001 f83b 	bl	800bd78 <vPortFree>
	}
 800ad02:	e011      	b.n	800ad28 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d00c      	beq.n	800ad28 <prvDeleteTCB+0x64>
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad12:	b672      	cpsid	i
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	b662      	cpsie	i
 800ad22:	60fb      	str	r3, [r7, #12]
}
 800ad24:	bf00      	nop
 800ad26:	e7fe      	b.n	800ad26 <prvDeleteTCB+0x62>
	}
 800ad28:	bf00      	nop
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad36:	4b0c      	ldr	r3, [pc, #48]	; (800ad68 <prvResetNextTaskUnblockTime+0x38>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d104      	bne.n	800ad4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad40:	4b0a      	ldr	r3, [pc, #40]	; (800ad6c <prvResetNextTaskUnblockTime+0x3c>)
 800ad42:	f04f 32ff 	mov.w	r2, #4294967295
 800ad46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad48:	e008      	b.n	800ad5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad4a:	4b07      	ldr	r3, [pc, #28]	; (800ad68 <prvResetNextTaskUnblockTime+0x38>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	4a04      	ldr	r2, [pc, #16]	; (800ad6c <prvResetNextTaskUnblockTime+0x3c>)
 800ad5a:	6013      	str	r3, [r2, #0]
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr
 800ad68:	20001414 	.word	0x20001414
 800ad6c:	2000147c 	.word	0x2000147c

0800ad70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad76:	4b0b      	ldr	r3, [pc, #44]	; (800ada4 <xTaskGetSchedulerState+0x34>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d102      	bne.n	800ad84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	607b      	str	r3, [r7, #4]
 800ad82:	e008      	b.n	800ad96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad84:	4b08      	ldr	r3, [pc, #32]	; (800ada8 <xTaskGetSchedulerState+0x38>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d102      	bne.n	800ad92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	607b      	str	r3, [r7, #4]
 800ad90:	e001      	b.n	800ad96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad92:	2300      	movs	r3, #0
 800ad94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ad96:	687b      	ldr	r3, [r7, #4]
	}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr
 800ada4:	20001468 	.word	0x20001468
 800ada8:	20001484 	.word	0x20001484

0800adac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800adb8:	2300      	movs	r3, #0
 800adba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d05a      	beq.n	800ae78 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800adc2:	4b30      	ldr	r3, [pc, #192]	; (800ae84 <xTaskPriorityDisinherit+0xd8>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	693a      	ldr	r2, [r7, #16]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d00c      	beq.n	800ade6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	b672      	cpsid	i
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	b662      	cpsie	i
 800ade0:	60fb      	str	r3, [r7, #12]
}
 800ade2:	bf00      	nop
 800ade4:	e7fe      	b.n	800ade4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adea:	2b00      	cmp	r3, #0
 800adec:	d10c      	bne.n	800ae08 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	b672      	cpsid	i
 800adf4:	f383 8811 	msr	BASEPRI, r3
 800adf8:	f3bf 8f6f 	isb	sy
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	b662      	cpsie	i
 800ae02:	60bb      	str	r3, [r7, #8]
}
 800ae04:	bf00      	nop
 800ae06:	e7fe      	b.n	800ae06 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae0c:	1e5a      	subs	r2, r3, #1
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d02c      	beq.n	800ae78 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d128      	bne.n	800ae78 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	3304      	adds	r3, #4
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7fe fa0e 	bl	800924c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae48:	4b0f      	ldr	r3, [pc, #60]	; (800ae88 <xTaskPriorityDisinherit+0xdc>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d903      	bls.n	800ae58 <xTaskPriorityDisinherit+0xac>
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae54:	4a0c      	ldr	r2, [pc, #48]	; (800ae88 <xTaskPriorityDisinherit+0xdc>)
 800ae56:	6013      	str	r3, [r2, #0]
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4413      	add	r3, r2
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	4a09      	ldr	r2, [pc, #36]	; (800ae8c <xTaskPriorityDisinherit+0xe0>)
 800ae66:	441a      	add	r2, r3
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	3304      	adds	r3, #4
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	4610      	mov	r0, r2
 800ae70:	f7fe f98f 	bl	8009192 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ae74:	2301      	movs	r3, #1
 800ae76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae78:	697b      	ldr	r3, [r7, #20]
	}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3718      	adds	r7, #24
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	20000f88 	.word	0x20000f88
 800ae88:	20001464 	.word	0x20001464
 800ae8c:	20000f8c 	.word	0x20000f8c

0800ae90 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae9a:	4b21      	ldr	r3, [pc, #132]	; (800af20 <prvAddCurrentTaskToDelayedList+0x90>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aea0:	4b20      	ldr	r3, [pc, #128]	; (800af24 <prvAddCurrentTaskToDelayedList+0x94>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	3304      	adds	r3, #4
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fe f9d0 	bl	800924c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb2:	d10a      	bne.n	800aeca <prvAddCurrentTaskToDelayedList+0x3a>
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d007      	beq.n	800aeca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aeba:	4b1a      	ldr	r3, [pc, #104]	; (800af24 <prvAddCurrentTaskToDelayedList+0x94>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	3304      	adds	r3, #4
 800aec0:	4619      	mov	r1, r3
 800aec2:	4819      	ldr	r0, [pc, #100]	; (800af28 <prvAddCurrentTaskToDelayedList+0x98>)
 800aec4:	f7fe f965 	bl	8009192 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aec8:	e026      	b.n	800af18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4413      	add	r3, r2
 800aed0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aed2:	4b14      	ldr	r3, [pc, #80]	; (800af24 <prvAddCurrentTaskToDelayedList+0x94>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68ba      	ldr	r2, [r7, #8]
 800aed8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d209      	bcs.n	800aef6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aee2:	4b12      	ldr	r3, [pc, #72]	; (800af2c <prvAddCurrentTaskToDelayedList+0x9c>)
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	4b0f      	ldr	r3, [pc, #60]	; (800af24 <prvAddCurrentTaskToDelayedList+0x94>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	3304      	adds	r3, #4
 800aeec:	4619      	mov	r1, r3
 800aeee:	4610      	mov	r0, r2
 800aef0:	f7fe f973 	bl	80091da <vListInsert>
}
 800aef4:	e010      	b.n	800af18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aef6:	4b0e      	ldr	r3, [pc, #56]	; (800af30 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	4b0a      	ldr	r3, [pc, #40]	; (800af24 <prvAddCurrentTaskToDelayedList+0x94>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	3304      	adds	r3, #4
 800af00:	4619      	mov	r1, r3
 800af02:	4610      	mov	r0, r2
 800af04:	f7fe f969 	bl	80091da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af08:	4b0a      	ldr	r3, [pc, #40]	; (800af34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d202      	bcs.n	800af18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800af12:	4a08      	ldr	r2, [pc, #32]	; (800af34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	6013      	str	r3, [r2, #0]
}
 800af18:	bf00      	nop
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	20001460 	.word	0x20001460
 800af24:	20000f88 	.word	0x20000f88
 800af28:	20001448 	.word	0x20001448
 800af2c:	20001418 	.word	0x20001418
 800af30:	20001414 	.word	0x20001414
 800af34:	2000147c 	.word	0x2000147c

0800af38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b08a      	sub	sp, #40	; 0x28
 800af3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af3e:	2300      	movs	r3, #0
 800af40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af42:	f000 fbb5 	bl	800b6b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800af46:	4b1d      	ldr	r3, [pc, #116]	; (800afbc <xTimerCreateTimerTask+0x84>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d021      	beq.n	800af92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af4e:	2300      	movs	r3, #0
 800af50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af52:	2300      	movs	r3, #0
 800af54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af56:	1d3a      	adds	r2, r7, #4
 800af58:	f107 0108 	add.w	r1, r7, #8
 800af5c:	f107 030c 	add.w	r3, r7, #12
 800af60:	4618      	mov	r0, r3
 800af62:	f7fe f8cf 	bl	8009104 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af66:	6879      	ldr	r1, [r7, #4]
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	9202      	str	r2, [sp, #8]
 800af6e:	9301      	str	r3, [sp, #4]
 800af70:	2302      	movs	r3, #2
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	2300      	movs	r3, #0
 800af76:	460a      	mov	r2, r1
 800af78:	4911      	ldr	r1, [pc, #68]	; (800afc0 <xTimerCreateTimerTask+0x88>)
 800af7a:	4812      	ldr	r0, [pc, #72]	; (800afc4 <xTimerCreateTimerTask+0x8c>)
 800af7c:	f7fe fe9a 	bl	8009cb4 <xTaskCreateStatic>
 800af80:	4603      	mov	r3, r0
 800af82:	4a11      	ldr	r2, [pc, #68]	; (800afc8 <xTimerCreateTimerTask+0x90>)
 800af84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800af86:	4b10      	ldr	r3, [pc, #64]	; (800afc8 <xTimerCreateTimerTask+0x90>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800af8e:	2301      	movs	r3, #1
 800af90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10c      	bne.n	800afb2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800af98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9c:	b672      	cpsid	i
 800af9e:	f383 8811 	msr	BASEPRI, r3
 800afa2:	f3bf 8f6f 	isb	sy
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	b662      	cpsie	i
 800afac:	613b      	str	r3, [r7, #16]
}
 800afae:	bf00      	nop
 800afb0:	e7fe      	b.n	800afb0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800afb2:	697b      	ldr	r3, [r7, #20]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3718      	adds	r7, #24
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	200014b8 	.word	0x200014b8
 800afc0:	0800d144 	.word	0x0800d144
 800afc4:	0800b249 	.word	0x0800b249
 800afc8:	200014bc 	.word	0x200014bc

0800afcc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b088      	sub	sp, #32
 800afd0:	af02      	add	r7, sp, #8
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
 800afd8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800afda:	202c      	movs	r0, #44	; 0x2c
 800afdc:	f000 fe02 	bl	800bbe4 <pvPortMalloc>
 800afe0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00d      	beq.n	800b004 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	2200      	movs	r2, #0
 800afec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	9301      	str	r3, [sp, #4]
 800aff4:	6a3b      	ldr	r3, [r7, #32]
 800aff6:	9300      	str	r3, [sp, #0]
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	68b9      	ldr	r1, [r7, #8]
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f000 f847 	bl	800b092 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b004:	697b      	ldr	r3, [r7, #20]
	}
 800b006:	4618      	mov	r0, r3
 800b008:	3718      	adds	r7, #24
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b08a      	sub	sp, #40	; 0x28
 800b012:	af02      	add	r7, sp, #8
 800b014:	60f8      	str	r0, [r7, #12]
 800b016:	60b9      	str	r1, [r7, #8]
 800b018:	607a      	str	r2, [r7, #4]
 800b01a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b01c:	232c      	movs	r3, #44	; 0x2c
 800b01e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	2b2c      	cmp	r3, #44	; 0x2c
 800b024:	d00c      	beq.n	800b040 <xTimerCreateStatic+0x32>
	__asm volatile
 800b026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02a:	b672      	cpsid	i
 800b02c:	f383 8811 	msr	BASEPRI, r3
 800b030:	f3bf 8f6f 	isb	sy
 800b034:	f3bf 8f4f 	dsb	sy
 800b038:	b662      	cpsie	i
 800b03a:	61bb      	str	r3, [r7, #24]
}
 800b03c:	bf00      	nop
 800b03e:	e7fe      	b.n	800b03e <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b040:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10c      	bne.n	800b062 <xTimerCreateStatic+0x54>
	__asm volatile
 800b048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04c:	b672      	cpsid	i
 800b04e:	f383 8811 	msr	BASEPRI, r3
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	b662      	cpsie	i
 800b05c:	617b      	str	r3, [r7, #20]
}
 800b05e:	bf00      	nop
 800b060:	e7fe      	b.n	800b060 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800b062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b064:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00d      	beq.n	800b088 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	2202      	movs	r2, #2
 800b070:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	9301      	str	r3, [sp, #4]
 800b078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	68b9      	ldr	r1, [r7, #8]
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f000 f805 	bl	800b092 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b088:	69fb      	ldr	r3, [r7, #28]
	}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3720      	adds	r7, #32
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b086      	sub	sp, #24
 800b096:	af00      	add	r7, sp, #0
 800b098:	60f8      	str	r0, [r7, #12]
 800b09a:	60b9      	str	r1, [r7, #8]
 800b09c:	607a      	str	r2, [r7, #4]
 800b09e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d10c      	bne.n	800b0c0 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800b0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0aa:	b672      	cpsid	i
 800b0ac:	f383 8811 	msr	BASEPRI, r3
 800b0b0:	f3bf 8f6f 	isb	sy
 800b0b4:	f3bf 8f4f 	dsb	sy
 800b0b8:	b662      	cpsie	i
 800b0ba:	617b      	str	r3, [r7, #20]
}
 800b0bc:	bf00      	nop
 800b0be:	e7fe      	b.n	800b0be <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d01e      	beq.n	800b104 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b0c6:	f000 faf3 	bl	800b6b0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d2:	68ba      	ldr	r2, [r7, #8]
 800b0d4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d8:	683a      	ldr	r2, [r7, #0]
 800b0da:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	6a3a      	ldr	r2, [r7, #32]
 800b0e0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e4:	3304      	adds	r3, #4
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fe f846 	bl	8009178 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d008      	beq.n	800b104 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0f8:	f043 0304 	orr.w	r3, r3, #4
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b100:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b104:	bf00      	nop
 800b106:	3718      	adds	r7, #24
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b08a      	sub	sp, #40	; 0x28
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	607a      	str	r2, [r7, #4]
 800b118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b11a:	2300      	movs	r3, #0
 800b11c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d10c      	bne.n	800b13e <xTimerGenericCommand+0x32>
	__asm volatile
 800b124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b128:	b672      	cpsid	i
 800b12a:	f383 8811 	msr	BASEPRI, r3
 800b12e:	f3bf 8f6f 	isb	sy
 800b132:	f3bf 8f4f 	dsb	sy
 800b136:	b662      	cpsie	i
 800b138:	623b      	str	r3, [r7, #32]
}
 800b13a:	bf00      	nop
 800b13c:	e7fe      	b.n	800b13c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b13e:	4b1a      	ldr	r3, [pc, #104]	; (800b1a8 <xTimerGenericCommand+0x9c>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d02a      	beq.n	800b19c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	2b05      	cmp	r3, #5
 800b156:	dc18      	bgt.n	800b18a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b158:	f7ff fe0a 	bl	800ad70 <xTaskGetSchedulerState>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d109      	bne.n	800b176 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b162:	4b11      	ldr	r3, [pc, #68]	; (800b1a8 <xTimerGenericCommand+0x9c>)
 800b164:	6818      	ldr	r0, [r3, #0]
 800b166:	f107 0110 	add.w	r1, r7, #16
 800b16a:	2300      	movs	r3, #0
 800b16c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b16e:	f7fe f9a7 	bl	80094c0 <xQueueGenericSend>
 800b172:	6278      	str	r0, [r7, #36]	; 0x24
 800b174:	e012      	b.n	800b19c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b176:	4b0c      	ldr	r3, [pc, #48]	; (800b1a8 <xTimerGenericCommand+0x9c>)
 800b178:	6818      	ldr	r0, [r3, #0]
 800b17a:	f107 0110 	add.w	r1, r7, #16
 800b17e:	2300      	movs	r3, #0
 800b180:	2200      	movs	r2, #0
 800b182:	f7fe f99d 	bl	80094c0 <xQueueGenericSend>
 800b186:	6278      	str	r0, [r7, #36]	; 0x24
 800b188:	e008      	b.n	800b19c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b18a:	4b07      	ldr	r3, [pc, #28]	; (800b1a8 <xTimerGenericCommand+0x9c>)
 800b18c:	6818      	ldr	r0, [r3, #0]
 800b18e:	f107 0110 	add.w	r1, r7, #16
 800b192:	2300      	movs	r3, #0
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	f7fe fa99 	bl	80096cc <xQueueGenericSendFromISR>
 800b19a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3728      	adds	r7, #40	; 0x28
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	200014b8 	.word	0x200014b8

0800b1ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b088      	sub	sp, #32
 800b1b0:	af02      	add	r7, sp, #8
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1b6:	4b23      	ldr	r3, [pc, #140]	; (800b244 <prvProcessExpiredTimer+0x98>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fe f841 	bl	800924c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1d0:	f003 0304 	and.w	r3, r3, #4
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d024      	beq.n	800b222 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	699a      	ldr	r2, [r3, #24]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	18d1      	adds	r1, r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	683a      	ldr	r2, [r7, #0]
 800b1e4:	6978      	ldr	r0, [r7, #20]
 800b1e6:	f000 f8d3 	bl	800b390 <prvInsertTimerInActiveList>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d021      	beq.n	800b234 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	6978      	ldr	r0, [r7, #20]
 800b1fc:	f7ff ff86 	bl	800b10c <xTimerGenericCommand>
 800b200:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d115      	bne.n	800b234 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800b208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20c:	b672      	cpsid	i
 800b20e:	f383 8811 	msr	BASEPRI, r3
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	f3bf 8f4f 	dsb	sy
 800b21a:	b662      	cpsie	i
 800b21c:	60fb      	str	r3, [r7, #12]
}
 800b21e:	bf00      	nop
 800b220:	e7fe      	b.n	800b220 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b228:	f023 0301 	bic.w	r3, r3, #1
 800b22c:	b2da      	uxtb	r2, r3
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	6a1b      	ldr	r3, [r3, #32]
 800b238:	6978      	ldr	r0, [r7, #20]
 800b23a:	4798      	blx	r3
}
 800b23c:	bf00      	nop
 800b23e:	3718      	adds	r7, #24
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	200014b0 	.word	0x200014b0

0800b248 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b250:	f107 0308 	add.w	r3, r7, #8
 800b254:	4618      	mov	r0, r3
 800b256:	f000 f857 	bl	800b308 <prvGetNextExpireTime>
 800b25a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	4619      	mov	r1, r3
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f000 f803 	bl	800b26c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b266:	f000 f8d5 	bl	800b414 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b26a:	e7f1      	b.n	800b250 <prvTimerTask+0x8>

0800b26c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b276:	f7ff f97d 	bl	800a574 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b27a:	f107 0308 	add.w	r3, r7, #8
 800b27e:	4618      	mov	r0, r3
 800b280:	f000 f866 	bl	800b350 <prvSampleTimeNow>
 800b284:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d130      	bne.n	800b2ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10a      	bne.n	800b2a8 <prvProcessTimerOrBlockTask+0x3c>
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	429a      	cmp	r2, r3
 800b298:	d806      	bhi.n	800b2a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b29a:	f7ff f979 	bl	800a590 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b29e:	68f9      	ldr	r1, [r7, #12]
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f7ff ff83 	bl	800b1ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b2a6:	e024      	b.n	800b2f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d008      	beq.n	800b2c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b2ae:	4b13      	ldr	r3, [pc, #76]	; (800b2fc <prvProcessTimerOrBlockTask+0x90>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d101      	bne.n	800b2bc <prvProcessTimerOrBlockTask+0x50>
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e000      	b.n	800b2be <prvProcessTimerOrBlockTask+0x52>
 800b2bc:	2300      	movs	r3, #0
 800b2be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b2c0:	4b0f      	ldr	r3, [pc, #60]	; (800b300 <prvProcessTimerOrBlockTask+0x94>)
 800b2c2:	6818      	ldr	r0, [r3, #0]
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	1ad3      	subs	r3, r2, r3
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	f7fe fcbd 	bl	8009c4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b2d2:	f7ff f95d 	bl	800a590 <xTaskResumeAll>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d10a      	bne.n	800b2f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b2dc:	4b09      	ldr	r3, [pc, #36]	; (800b304 <prvProcessTimerOrBlockTask+0x98>)
 800b2de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2e2:	601a      	str	r2, [r3, #0]
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	f3bf 8f6f 	isb	sy
}
 800b2ec:	e001      	b.n	800b2f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b2ee:	f7ff f94f 	bl	800a590 <xTaskResumeAll>
}
 800b2f2:	bf00      	nop
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	200014b4 	.word	0x200014b4
 800b300:	200014b8 	.word	0x200014b8
 800b304:	e000ed04 	.word	0xe000ed04

0800b308 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b308:	b480      	push	{r7}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b310:	4b0e      	ldr	r3, [pc, #56]	; (800b34c <prvGetNextExpireTime+0x44>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d101      	bne.n	800b31e <prvGetNextExpireTime+0x16>
 800b31a:	2201      	movs	r2, #1
 800b31c:	e000      	b.n	800b320 <prvGetNextExpireTime+0x18>
 800b31e:	2200      	movs	r2, #0
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d105      	bne.n	800b338 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b32c:	4b07      	ldr	r3, [pc, #28]	; (800b34c <prvGetNextExpireTime+0x44>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	60fb      	str	r3, [r7, #12]
 800b336:	e001      	b.n	800b33c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b338:	2300      	movs	r3, #0
 800b33a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b33c:	68fb      	ldr	r3, [r7, #12]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3714      	adds	r7, #20
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	200014b0 	.word	0x200014b0

0800b350 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b358:	f7ff f9ba 	bl	800a6d0 <xTaskGetTickCount>
 800b35c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b35e:	4b0b      	ldr	r3, [pc, #44]	; (800b38c <prvSampleTimeNow+0x3c>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	429a      	cmp	r2, r3
 800b366:	d205      	bcs.n	800b374 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b368:	f000 f93c 	bl	800b5e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	601a      	str	r2, [r3, #0]
 800b372:	e002      	b.n	800b37a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b37a:	4a04      	ldr	r2, [pc, #16]	; (800b38c <prvSampleTimeNow+0x3c>)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b380:	68fb      	ldr	r3, [r7, #12]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	200014c0 	.word	0x200014c0

0800b390 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
 800b39c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	68ba      	ldr	r2, [r7, #8]
 800b3a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b3ae:	68ba      	ldr	r2, [r7, #8]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d812      	bhi.n	800b3dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	1ad2      	subs	r2, r2, r3
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	699b      	ldr	r3, [r3, #24]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d302      	bcc.n	800b3ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	617b      	str	r3, [r7, #20]
 800b3c8:	e01b      	b.n	800b402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b3ca:	4b10      	ldr	r3, [pc, #64]	; (800b40c <prvInsertTimerInActiveList+0x7c>)
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	3304      	adds	r3, #4
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	f7fd ff00 	bl	80091da <vListInsert>
 800b3da:	e012      	b.n	800b402 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d206      	bcs.n	800b3f2 <prvInsertTimerInActiveList+0x62>
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d302      	bcc.n	800b3f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	617b      	str	r3, [r7, #20]
 800b3f0:	e007      	b.n	800b402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3f2:	4b07      	ldr	r3, [pc, #28]	; (800b410 <prvInsertTimerInActiveList+0x80>)
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	3304      	adds	r3, #4
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	4610      	mov	r0, r2
 800b3fe:	f7fd feec 	bl	80091da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b402:	697b      	ldr	r3, [r7, #20]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3718      	adds	r7, #24
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	200014b4 	.word	0x200014b4
 800b410:	200014b0 	.word	0x200014b0

0800b414 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b08e      	sub	sp, #56	; 0x38
 800b418:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b41a:	e0d0      	b.n	800b5be <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	da1a      	bge.n	800b458 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b422:	1d3b      	adds	r3, r7, #4
 800b424:	3304      	adds	r3, #4
 800b426:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d10c      	bne.n	800b448 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800b42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b432:	b672      	cpsid	i
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	b662      	cpsie	i
 800b442:	61fb      	str	r3, [r7, #28]
}
 800b444:	bf00      	nop
 800b446:	e7fe      	b.n	800b446 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b44e:	6850      	ldr	r0, [r2, #4]
 800b450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b452:	6892      	ldr	r2, [r2, #8]
 800b454:	4611      	mov	r1, r2
 800b456:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f2c0 80af 	blt.w	800b5be <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b466:	695b      	ldr	r3, [r3, #20]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d004      	beq.n	800b476 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b46e:	3304      	adds	r3, #4
 800b470:	4618      	mov	r0, r3
 800b472:	f7fd feeb 	bl	800924c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b476:	463b      	mov	r3, r7
 800b478:	4618      	mov	r0, r3
 800b47a:	f7ff ff69 	bl	800b350 <prvSampleTimeNow>
 800b47e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2b09      	cmp	r3, #9
 800b484:	f200 809a 	bhi.w	800b5bc <prvProcessReceivedCommands+0x1a8>
 800b488:	a201      	add	r2, pc, #4	; (adr r2, 800b490 <prvProcessReceivedCommands+0x7c>)
 800b48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b48e:	bf00      	nop
 800b490:	0800b4b9 	.word	0x0800b4b9
 800b494:	0800b4b9 	.word	0x0800b4b9
 800b498:	0800b4b9 	.word	0x0800b4b9
 800b49c:	0800b531 	.word	0x0800b531
 800b4a0:	0800b545 	.word	0x0800b545
 800b4a4:	0800b593 	.word	0x0800b593
 800b4a8:	0800b4b9 	.word	0x0800b4b9
 800b4ac:	0800b4b9 	.word	0x0800b4b9
 800b4b0:	0800b531 	.word	0x0800b531
 800b4b4:	0800b545 	.word	0x0800b545
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4be:	f043 0301 	orr.w	r3, r3, #1
 800b4c2:	b2da      	uxtb	r2, r3
 800b4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ce:	699b      	ldr	r3, [r3, #24]
 800b4d0:	18d1      	adds	r1, r2, r3
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4d8:	f7ff ff5a 	bl	800b390 <prvInsertTimerInActiveList>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d06d      	beq.n	800b5be <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e4:	6a1b      	ldr	r3, [r3, #32]
 800b4e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4f0:	f003 0304 	and.w	r3, r3, #4
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d062      	beq.n	800b5be <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b4f8:	68ba      	ldr	r2, [r7, #8]
 800b4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fc:	699b      	ldr	r3, [r3, #24]
 800b4fe:	441a      	add	r2, r3
 800b500:	2300      	movs	r3, #0
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	2300      	movs	r3, #0
 800b506:	2100      	movs	r1, #0
 800b508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b50a:	f7ff fdff 	bl	800b10c <xTimerGenericCommand>
 800b50e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b510:	6a3b      	ldr	r3, [r7, #32]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d153      	bne.n	800b5be <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800b516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51a:	b672      	cpsid	i
 800b51c:	f383 8811 	msr	BASEPRI, r3
 800b520:	f3bf 8f6f 	isb	sy
 800b524:	f3bf 8f4f 	dsb	sy
 800b528:	b662      	cpsie	i
 800b52a:	61bb      	str	r3, [r7, #24]
}
 800b52c:	bf00      	nop
 800b52e:	e7fe      	b.n	800b52e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b536:	f023 0301 	bic.w	r3, r3, #1
 800b53a:	b2da      	uxtb	r2, r3
 800b53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b542:	e03c      	b.n	800b5be <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b54a:	f043 0301 	orr.w	r3, r3, #1
 800b54e:	b2da      	uxtb	r2, r3
 800b550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b556:	68ba      	ldr	r2, [r7, #8]
 800b558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55e:	699b      	ldr	r3, [r3, #24]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10c      	bne.n	800b57e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800b564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b568:	b672      	cpsid	i
 800b56a:	f383 8811 	msr	BASEPRI, r3
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f3bf 8f4f 	dsb	sy
 800b576:	b662      	cpsie	i
 800b578:	617b      	str	r3, [r7, #20]
}
 800b57a:	bf00      	nop
 800b57c:	e7fe      	b.n	800b57c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b580:	699a      	ldr	r2, [r3, #24]
 800b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b584:	18d1      	adds	r1, r2, r3
 800b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b58a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b58c:	f7ff ff00 	bl	800b390 <prvInsertTimerInActiveList>
					break;
 800b590:	e015      	b.n	800b5be <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b598:	f003 0302 	and.w	r3, r3, #2
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d103      	bne.n	800b5a8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800b5a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5a2:	f000 fbe9 	bl	800bd78 <vPortFree>
 800b5a6:	e00a      	b.n	800b5be <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5ae:	f023 0301 	bic.w	r3, r3, #1
 800b5b2:	b2da      	uxtb	r2, r3
 800b5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b5ba:	e000      	b.n	800b5be <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800b5bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b5be:	4b08      	ldr	r3, [pc, #32]	; (800b5e0 <prvProcessReceivedCommands+0x1cc>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	1d39      	adds	r1, r7, #4
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fe f920 	bl	800980c <xQueueReceive>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f47f af24 	bne.w	800b41c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b5d4:	bf00      	nop
 800b5d6:	bf00      	nop
 800b5d8:	3730      	adds	r7, #48	; 0x30
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	200014b8 	.word	0x200014b8

0800b5e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b088      	sub	sp, #32
 800b5e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b5ea:	e04a      	b.n	800b682 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5ec:	4b2e      	ldr	r3, [pc, #184]	; (800b6a8 <prvSwitchTimerLists+0xc4>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5f6:	4b2c      	ldr	r3, [pc, #176]	; (800b6a8 <prvSwitchTimerLists+0xc4>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	3304      	adds	r3, #4
 800b604:	4618      	mov	r0, r3
 800b606:	f7fd fe21 	bl	800924c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6a1b      	ldr	r3, [r3, #32]
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b618:	f003 0304 	and.w	r3, r3, #4
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d030      	beq.n	800b682 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	693a      	ldr	r2, [r7, #16]
 800b626:	4413      	add	r3, r2
 800b628:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b62a:	68ba      	ldr	r2, [r7, #8]
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d90e      	bls.n	800b650 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b63e:	4b1a      	ldr	r3, [pc, #104]	; (800b6a8 <prvSwitchTimerLists+0xc4>)
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	3304      	adds	r3, #4
 800b646:	4619      	mov	r1, r3
 800b648:	4610      	mov	r0, r2
 800b64a:	f7fd fdc6 	bl	80091da <vListInsert>
 800b64e:	e018      	b.n	800b682 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b650:	2300      	movs	r3, #0
 800b652:	9300      	str	r3, [sp, #0]
 800b654:	2300      	movs	r3, #0
 800b656:	693a      	ldr	r2, [r7, #16]
 800b658:	2100      	movs	r1, #0
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff fd56 	bl	800b10c <xTimerGenericCommand>
 800b660:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10c      	bne.n	800b682 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800b668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66c:	b672      	cpsid	i
 800b66e:	f383 8811 	msr	BASEPRI, r3
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	f3bf 8f4f 	dsb	sy
 800b67a:	b662      	cpsie	i
 800b67c:	603b      	str	r3, [r7, #0]
}
 800b67e:	bf00      	nop
 800b680:	e7fe      	b.n	800b680 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b682:	4b09      	ldr	r3, [pc, #36]	; (800b6a8 <prvSwitchTimerLists+0xc4>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1af      	bne.n	800b5ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b68c:	4b06      	ldr	r3, [pc, #24]	; (800b6a8 <prvSwitchTimerLists+0xc4>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b692:	4b06      	ldr	r3, [pc, #24]	; (800b6ac <prvSwitchTimerLists+0xc8>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a04      	ldr	r2, [pc, #16]	; (800b6a8 <prvSwitchTimerLists+0xc4>)
 800b698:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b69a:	4a04      	ldr	r2, [pc, #16]	; (800b6ac <prvSwitchTimerLists+0xc8>)
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	6013      	str	r3, [r2, #0]
}
 800b6a0:	bf00      	nop
 800b6a2:	3718      	adds	r7, #24
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	200014b0 	.word	0x200014b0
 800b6ac:	200014b4 	.word	0x200014b4

0800b6b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b6b6:	f000 f969 	bl	800b98c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b6ba:	4b15      	ldr	r3, [pc, #84]	; (800b710 <prvCheckForValidListAndQueue+0x60>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d120      	bne.n	800b704 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b6c2:	4814      	ldr	r0, [pc, #80]	; (800b714 <prvCheckForValidListAndQueue+0x64>)
 800b6c4:	f7fd fd38 	bl	8009138 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b6c8:	4813      	ldr	r0, [pc, #76]	; (800b718 <prvCheckForValidListAndQueue+0x68>)
 800b6ca:	f7fd fd35 	bl	8009138 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b6ce:	4b13      	ldr	r3, [pc, #76]	; (800b71c <prvCheckForValidListAndQueue+0x6c>)
 800b6d0:	4a10      	ldr	r2, [pc, #64]	; (800b714 <prvCheckForValidListAndQueue+0x64>)
 800b6d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b6d4:	4b12      	ldr	r3, [pc, #72]	; (800b720 <prvCheckForValidListAndQueue+0x70>)
 800b6d6:	4a10      	ldr	r2, [pc, #64]	; (800b718 <prvCheckForValidListAndQueue+0x68>)
 800b6d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b6da:	2300      	movs	r3, #0
 800b6dc:	9300      	str	r3, [sp, #0]
 800b6de:	4b11      	ldr	r3, [pc, #68]	; (800b724 <prvCheckForValidListAndQueue+0x74>)
 800b6e0:	4a11      	ldr	r2, [pc, #68]	; (800b728 <prvCheckForValidListAndQueue+0x78>)
 800b6e2:	2110      	movs	r1, #16
 800b6e4:	200a      	movs	r0, #10
 800b6e6:	f7fd fe45 	bl	8009374 <xQueueGenericCreateStatic>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	4a08      	ldr	r2, [pc, #32]	; (800b710 <prvCheckForValidListAndQueue+0x60>)
 800b6ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b6f0:	4b07      	ldr	r3, [pc, #28]	; (800b710 <prvCheckForValidListAndQueue+0x60>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d005      	beq.n	800b704 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b6f8:	4b05      	ldr	r3, [pc, #20]	; (800b710 <prvCheckForValidListAndQueue+0x60>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	490b      	ldr	r1, [pc, #44]	; (800b72c <prvCheckForValidListAndQueue+0x7c>)
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7fe fa7a 	bl	8009bf8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b704:	f000 f976 	bl	800b9f4 <vPortExitCritical>
}
 800b708:	bf00      	nop
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	200014b8 	.word	0x200014b8
 800b714:	20001488 	.word	0x20001488
 800b718:	2000149c 	.word	0x2000149c
 800b71c:	200014b0 	.word	0x200014b0
 800b720:	200014b4 	.word	0x200014b4
 800b724:	20001564 	.word	0x20001564
 800b728:	200014c4 	.word	0x200014c4
 800b72c:	0800d14c 	.word	0x0800d14c

0800b730 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b086      	sub	sp, #24
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10c      	bne.n	800b75c <pvTimerGetTimerID+0x2c>
	__asm volatile
 800b742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b746:	b672      	cpsid	i
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	b662      	cpsie	i
 800b756:	60fb      	str	r3, [r7, #12]
}
 800b758:	bf00      	nop
 800b75a:	e7fe      	b.n	800b75a <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800b75c:	f000 f916 	bl	800b98c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	69db      	ldr	r3, [r3, #28]
 800b764:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b766:	f000 f945 	bl	800b9f4 <vPortExitCritical>

	return pvReturn;
 800b76a:	693b      	ldr	r3, [r7, #16]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3718      	adds	r7, #24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	3b04      	subs	r3, #4
 800b784:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b78c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	3b04      	subs	r3, #4
 800b792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	f023 0201 	bic.w	r2, r3, #1
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	3b04      	subs	r3, #4
 800b7a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7a4:	4a0c      	ldr	r2, [pc, #48]	; (800b7d8 <pxPortInitialiseStack+0x64>)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	3b14      	subs	r3, #20
 800b7ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	3b04      	subs	r3, #4
 800b7ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f06f 0202 	mvn.w	r2, #2
 800b7c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	3b20      	subs	r3, #32
 800b7c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3714      	adds	r7, #20
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	0800b7dd 	.word	0x0800b7dd

0800b7dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b7e6:	4b14      	ldr	r3, [pc, #80]	; (800b838 <prvTaskExitError+0x5c>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ee:	d00c      	beq.n	800b80a <prvTaskExitError+0x2e>
	__asm volatile
 800b7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f4:	b672      	cpsid	i
 800b7f6:	f383 8811 	msr	BASEPRI, r3
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	b662      	cpsie	i
 800b804:	60fb      	str	r3, [r7, #12]
}
 800b806:	bf00      	nop
 800b808:	e7fe      	b.n	800b808 <prvTaskExitError+0x2c>
	__asm volatile
 800b80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80e:	b672      	cpsid	i
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	b662      	cpsie	i
 800b81e:	60bb      	str	r3, [r7, #8]
}
 800b820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b822:	bf00      	nop
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d0fc      	beq.n	800b824 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b82a:	bf00      	nop
 800b82c:	bf00      	nop
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	20000064 	.word	0x20000064
 800b83c:	00000000 	.word	0x00000000

0800b840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b840:	4b07      	ldr	r3, [pc, #28]	; (800b860 <pxCurrentTCBConst2>)
 800b842:	6819      	ldr	r1, [r3, #0]
 800b844:	6808      	ldr	r0, [r1, #0]
 800b846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84a:	f380 8809 	msr	PSP, r0
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f04f 0000 	mov.w	r0, #0
 800b856:	f380 8811 	msr	BASEPRI, r0
 800b85a:	4770      	bx	lr
 800b85c:	f3af 8000 	nop.w

0800b860 <pxCurrentTCBConst2>:
 800b860:	20000f88 	.word	0x20000f88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b864:	bf00      	nop
 800b866:	bf00      	nop

0800b868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b868:	4808      	ldr	r0, [pc, #32]	; (800b88c <prvPortStartFirstTask+0x24>)
 800b86a:	6800      	ldr	r0, [r0, #0]
 800b86c:	6800      	ldr	r0, [r0, #0]
 800b86e:	f380 8808 	msr	MSP, r0
 800b872:	f04f 0000 	mov.w	r0, #0
 800b876:	f380 8814 	msr	CONTROL, r0
 800b87a:	b662      	cpsie	i
 800b87c:	b661      	cpsie	f
 800b87e:	f3bf 8f4f 	dsb	sy
 800b882:	f3bf 8f6f 	isb	sy
 800b886:	df00      	svc	0
 800b888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b88a:	bf00      	nop
 800b88c:	e000ed08 	.word	0xe000ed08

0800b890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b896:	4b37      	ldr	r3, [pc, #220]	; (800b974 <xPortStartScheduler+0xe4>)
 800b898:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	22ff      	movs	r2, #255	; 0xff
 800b8a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8b0:	78fb      	ldrb	r3, [r7, #3]
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b8b8:	b2da      	uxtb	r2, r3
 800b8ba:	4b2f      	ldr	r3, [pc, #188]	; (800b978 <xPortStartScheduler+0xe8>)
 800b8bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b8be:	4b2f      	ldr	r3, [pc, #188]	; (800b97c <xPortStartScheduler+0xec>)
 800b8c0:	2207      	movs	r2, #7
 800b8c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8c4:	e009      	b.n	800b8da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b8c6:	4b2d      	ldr	r3, [pc, #180]	; (800b97c <xPortStartScheduler+0xec>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	4a2b      	ldr	r2, [pc, #172]	; (800b97c <xPortStartScheduler+0xec>)
 800b8ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b8d0:	78fb      	ldrb	r3, [r7, #3]
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	005b      	lsls	r3, r3, #1
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8da:	78fb      	ldrb	r3, [r7, #3]
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8e2:	2b80      	cmp	r3, #128	; 0x80
 800b8e4:	d0ef      	beq.n	800b8c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b8e6:	4b25      	ldr	r3, [pc, #148]	; (800b97c <xPortStartScheduler+0xec>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f1c3 0307 	rsb	r3, r3, #7
 800b8ee:	2b04      	cmp	r3, #4
 800b8f0:	d00c      	beq.n	800b90c <xPortStartScheduler+0x7c>
	__asm volatile
 800b8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f6:	b672      	cpsid	i
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	b662      	cpsie	i
 800b906:	60bb      	str	r3, [r7, #8]
}
 800b908:	bf00      	nop
 800b90a:	e7fe      	b.n	800b90a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b90c:	4b1b      	ldr	r3, [pc, #108]	; (800b97c <xPortStartScheduler+0xec>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	021b      	lsls	r3, r3, #8
 800b912:	4a1a      	ldr	r2, [pc, #104]	; (800b97c <xPortStartScheduler+0xec>)
 800b914:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b916:	4b19      	ldr	r3, [pc, #100]	; (800b97c <xPortStartScheduler+0xec>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b91e:	4a17      	ldr	r2, [pc, #92]	; (800b97c <xPortStartScheduler+0xec>)
 800b920:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	b2da      	uxtb	r2, r3
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b92a:	4b15      	ldr	r3, [pc, #84]	; (800b980 <xPortStartScheduler+0xf0>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a14      	ldr	r2, [pc, #80]	; (800b980 <xPortStartScheduler+0xf0>)
 800b930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b934:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b936:	4b12      	ldr	r3, [pc, #72]	; (800b980 <xPortStartScheduler+0xf0>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4a11      	ldr	r2, [pc, #68]	; (800b980 <xPortStartScheduler+0xf0>)
 800b93c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b940:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b942:	f000 f8dd 	bl	800bb00 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b946:	4b0f      	ldr	r3, [pc, #60]	; (800b984 <xPortStartScheduler+0xf4>)
 800b948:	2200      	movs	r2, #0
 800b94a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b94c:	f000 f8fc 	bl	800bb48 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b950:	4b0d      	ldr	r3, [pc, #52]	; (800b988 <xPortStartScheduler+0xf8>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a0c      	ldr	r2, [pc, #48]	; (800b988 <xPortStartScheduler+0xf8>)
 800b956:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b95a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b95c:	f7ff ff84 	bl	800b868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b960:	f7fe ff82 	bl	800a868 <vTaskSwitchContext>
	prvTaskExitError();
 800b964:	f7ff ff3a 	bl	800b7dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	e000e400 	.word	0xe000e400
 800b978:	200015b4 	.word	0x200015b4
 800b97c:	200015b8 	.word	0x200015b8
 800b980:	e000ed20 	.word	0xe000ed20
 800b984:	20000064 	.word	0x20000064
 800b988:	e000ef34 	.word	0xe000ef34

0800b98c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
	__asm volatile
 800b992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b996:	b672      	cpsid	i
 800b998:	f383 8811 	msr	BASEPRI, r3
 800b99c:	f3bf 8f6f 	isb	sy
 800b9a0:	f3bf 8f4f 	dsb	sy
 800b9a4:	b662      	cpsie	i
 800b9a6:	607b      	str	r3, [r7, #4]
}
 800b9a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b9aa:	4b10      	ldr	r3, [pc, #64]	; (800b9ec <vPortEnterCritical+0x60>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	4a0e      	ldr	r2, [pc, #56]	; (800b9ec <vPortEnterCritical+0x60>)
 800b9b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b9b4:	4b0d      	ldr	r3, [pc, #52]	; (800b9ec <vPortEnterCritical+0x60>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d111      	bne.n	800b9e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b9bc:	4b0c      	ldr	r3, [pc, #48]	; (800b9f0 <vPortEnterCritical+0x64>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00c      	beq.n	800b9e0 <vPortEnterCritical+0x54>
	__asm volatile
 800b9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ca:	b672      	cpsid	i
 800b9cc:	f383 8811 	msr	BASEPRI, r3
 800b9d0:	f3bf 8f6f 	isb	sy
 800b9d4:	f3bf 8f4f 	dsb	sy
 800b9d8:	b662      	cpsie	i
 800b9da:	603b      	str	r3, [r7, #0]
}
 800b9dc:	bf00      	nop
 800b9de:	e7fe      	b.n	800b9de <vPortEnterCritical+0x52>
	}
}
 800b9e0:	bf00      	nop
 800b9e2:	370c      	adds	r7, #12
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr
 800b9ec:	20000064 	.word	0x20000064
 800b9f0:	e000ed04 	.word	0xe000ed04

0800b9f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b9fa:	4b13      	ldr	r3, [pc, #76]	; (800ba48 <vPortExitCritical+0x54>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d10c      	bne.n	800ba1c <vPortExitCritical+0x28>
	__asm volatile
 800ba02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba06:	b672      	cpsid	i
 800ba08:	f383 8811 	msr	BASEPRI, r3
 800ba0c:	f3bf 8f6f 	isb	sy
 800ba10:	f3bf 8f4f 	dsb	sy
 800ba14:	b662      	cpsie	i
 800ba16:	607b      	str	r3, [r7, #4]
}
 800ba18:	bf00      	nop
 800ba1a:	e7fe      	b.n	800ba1a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ba1c:	4b0a      	ldr	r3, [pc, #40]	; (800ba48 <vPortExitCritical+0x54>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	3b01      	subs	r3, #1
 800ba22:	4a09      	ldr	r2, [pc, #36]	; (800ba48 <vPortExitCritical+0x54>)
 800ba24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba26:	4b08      	ldr	r3, [pc, #32]	; (800ba48 <vPortExitCritical+0x54>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d105      	bne.n	800ba3a <vPortExitCritical+0x46>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	f383 8811 	msr	BASEPRI, r3
}
 800ba38:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba3a:	bf00      	nop
 800ba3c:	370c      	adds	r7, #12
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr
 800ba46:	bf00      	nop
 800ba48:	20000064 	.word	0x20000064
 800ba4c:	00000000 	.word	0x00000000

0800ba50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba50:	f3ef 8009 	mrs	r0, PSP
 800ba54:	f3bf 8f6f 	isb	sy
 800ba58:	4b15      	ldr	r3, [pc, #84]	; (800bab0 <pxCurrentTCBConst>)
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	f01e 0f10 	tst.w	lr, #16
 800ba60:	bf08      	it	eq
 800ba62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ba66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6a:	6010      	str	r0, [r2, #0]
 800ba6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ba70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ba74:	b672      	cpsid	i
 800ba76:	f380 8811 	msr	BASEPRI, r0
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	f3bf 8f6f 	isb	sy
 800ba82:	b662      	cpsie	i
 800ba84:	f7fe fef0 	bl	800a868 <vTaskSwitchContext>
 800ba88:	f04f 0000 	mov.w	r0, #0
 800ba8c:	f380 8811 	msr	BASEPRI, r0
 800ba90:	bc09      	pop	{r0, r3}
 800ba92:	6819      	ldr	r1, [r3, #0]
 800ba94:	6808      	ldr	r0, [r1, #0]
 800ba96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba9a:	f01e 0f10 	tst.w	lr, #16
 800ba9e:	bf08      	it	eq
 800baa0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800baa4:	f380 8809 	msr	PSP, r0
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop

0800bab0 <pxCurrentTCBConst>:
 800bab0:	20000f88 	.word	0x20000f88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bab4:	bf00      	nop
 800bab6:	bf00      	nop

0800bab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
	__asm volatile
 800babe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac2:	b672      	cpsid	i
 800bac4:	f383 8811 	msr	BASEPRI, r3
 800bac8:	f3bf 8f6f 	isb	sy
 800bacc:	f3bf 8f4f 	dsb	sy
 800bad0:	b662      	cpsie	i
 800bad2:	607b      	str	r3, [r7, #4]
}
 800bad4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bad6:	f7fe fe0b 	bl	800a6f0 <xTaskIncrementTick>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d003      	beq.n	800bae8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bae0:	4b06      	ldr	r3, [pc, #24]	; (800bafc <SysTick_Handler+0x44>)
 800bae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bae6:	601a      	str	r2, [r3, #0]
 800bae8:	2300      	movs	r3, #0
 800baea:	603b      	str	r3, [r7, #0]
	__asm volatile
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	f383 8811 	msr	BASEPRI, r3
}
 800baf2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800baf4:	bf00      	nop
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	e000ed04 	.word	0xe000ed04

0800bb00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bb00:	b480      	push	{r7}
 800bb02:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb04:	4b0b      	ldr	r3, [pc, #44]	; (800bb34 <vPortSetupTimerInterrupt+0x34>)
 800bb06:	2200      	movs	r2, #0
 800bb08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb0a:	4b0b      	ldr	r3, [pc, #44]	; (800bb38 <vPortSetupTimerInterrupt+0x38>)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb10:	4b0a      	ldr	r3, [pc, #40]	; (800bb3c <vPortSetupTimerInterrupt+0x3c>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a0a      	ldr	r2, [pc, #40]	; (800bb40 <vPortSetupTimerInterrupt+0x40>)
 800bb16:	fba2 2303 	umull	r2, r3, r2, r3
 800bb1a:	099b      	lsrs	r3, r3, #6
 800bb1c:	4a09      	ldr	r2, [pc, #36]	; (800bb44 <vPortSetupTimerInterrupt+0x44>)
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb22:	4b04      	ldr	r3, [pc, #16]	; (800bb34 <vPortSetupTimerInterrupt+0x34>)
 800bb24:	2207      	movs	r2, #7
 800bb26:	601a      	str	r2, [r3, #0]
}
 800bb28:	bf00      	nop
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	e000e010 	.word	0xe000e010
 800bb38:	e000e018 	.word	0xe000e018
 800bb3c:	20000058 	.word	0x20000058
 800bb40:	10624dd3 	.word	0x10624dd3
 800bb44:	e000e014 	.word	0xe000e014

0800bb48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bb48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bb58 <vPortEnableVFP+0x10>
 800bb4c:	6801      	ldr	r1, [r0, #0]
 800bb4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bb52:	6001      	str	r1, [r0, #0]
 800bb54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bb56:	bf00      	nop
 800bb58:	e000ed88 	.word	0xe000ed88

0800bb5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bb62:	f3ef 8305 	mrs	r3, IPSR
 800bb66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2b0f      	cmp	r3, #15
 800bb6c:	d916      	bls.n	800bb9c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bb6e:	4a19      	ldr	r2, [pc, #100]	; (800bbd4 <vPortValidateInterruptPriority+0x78>)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	4413      	add	r3, r2
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bb78:	4b17      	ldr	r3, [pc, #92]	; (800bbd8 <vPortValidateInterruptPriority+0x7c>)
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	7afa      	ldrb	r2, [r7, #11]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d20c      	bcs.n	800bb9c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800bb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb86:	b672      	cpsid	i
 800bb88:	f383 8811 	msr	BASEPRI, r3
 800bb8c:	f3bf 8f6f 	isb	sy
 800bb90:	f3bf 8f4f 	dsb	sy
 800bb94:	b662      	cpsie	i
 800bb96:	607b      	str	r3, [r7, #4]
}
 800bb98:	bf00      	nop
 800bb9a:	e7fe      	b.n	800bb9a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bb9c:	4b0f      	ldr	r3, [pc, #60]	; (800bbdc <vPortValidateInterruptPriority+0x80>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bba4:	4b0e      	ldr	r3, [pc, #56]	; (800bbe0 <vPortValidateInterruptPriority+0x84>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d90c      	bls.n	800bbc6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800bbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb0:	b672      	cpsid	i
 800bbb2:	f383 8811 	msr	BASEPRI, r3
 800bbb6:	f3bf 8f6f 	isb	sy
 800bbba:	f3bf 8f4f 	dsb	sy
 800bbbe:	b662      	cpsie	i
 800bbc0:	603b      	str	r3, [r7, #0]
}
 800bbc2:	bf00      	nop
 800bbc4:	e7fe      	b.n	800bbc4 <vPortValidateInterruptPriority+0x68>
	}
 800bbc6:	bf00      	nop
 800bbc8:	3714      	adds	r7, #20
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	e000e3f0 	.word	0xe000e3f0
 800bbd8:	200015b4 	.word	0x200015b4
 800bbdc:	e000ed0c 	.word	0xe000ed0c
 800bbe0:	200015b8 	.word	0x200015b8

0800bbe4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b08a      	sub	sp, #40	; 0x28
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bbec:	2300      	movs	r3, #0
 800bbee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bbf0:	f7fe fcc0 	bl	800a574 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bbf4:	4b5b      	ldr	r3, [pc, #364]	; (800bd64 <pvPortMalloc+0x180>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d101      	bne.n	800bc00 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bbfc:	f000 f91a 	bl	800be34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc00:	4b59      	ldr	r3, [pc, #356]	; (800bd68 <pvPortMalloc+0x184>)
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4013      	ands	r3, r2
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f040 8092 	bne.w	800bd32 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d01f      	beq.n	800bc54 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800bc14:	2208      	movs	r2, #8
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	4413      	add	r3, r2
 800bc1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f003 0307 	and.w	r3, r3, #7
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d016      	beq.n	800bc54 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f023 0307 	bic.w	r3, r3, #7
 800bc2c:	3308      	adds	r3, #8
 800bc2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f003 0307 	and.w	r3, r3, #7
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00c      	beq.n	800bc54 <pvPortMalloc+0x70>
	__asm volatile
 800bc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3e:	b672      	cpsid	i
 800bc40:	f383 8811 	msr	BASEPRI, r3
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	b662      	cpsie	i
 800bc4e:	617b      	str	r3, [r7, #20]
}
 800bc50:	bf00      	nop
 800bc52:	e7fe      	b.n	800bc52 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d06b      	beq.n	800bd32 <pvPortMalloc+0x14e>
 800bc5a:	4b44      	ldr	r3, [pc, #272]	; (800bd6c <pvPortMalloc+0x188>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d866      	bhi.n	800bd32 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bc64:	4b42      	ldr	r3, [pc, #264]	; (800bd70 <pvPortMalloc+0x18c>)
 800bc66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bc68:	4b41      	ldr	r3, [pc, #260]	; (800bd70 <pvPortMalloc+0x18c>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc6e:	e004      	b.n	800bc7a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800bc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d903      	bls.n	800bc8c <pvPortMalloc+0xa8>
 800bc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1f1      	bne.n	800bc70 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bc8c:	4b35      	ldr	r3, [pc, #212]	; (800bd64 <pvPortMalloc+0x180>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d04d      	beq.n	800bd32 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bc96:	6a3b      	ldr	r3, [r7, #32]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2208      	movs	r2, #8
 800bc9c:	4413      	add	r3, r2
 800bc9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	6a3b      	ldr	r3, [r7, #32]
 800bca6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcaa:	685a      	ldr	r2, [r3, #4]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	1ad2      	subs	r2, r2, r3
 800bcb0:	2308      	movs	r3, #8
 800bcb2:	005b      	lsls	r3, r3, #1
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d921      	bls.n	800bcfc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bcb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	f003 0307 	and.w	r3, r3, #7
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00c      	beq.n	800bce4 <pvPortMalloc+0x100>
	__asm volatile
 800bcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcce:	b672      	cpsid	i
 800bcd0:	f383 8811 	msr	BASEPRI, r3
 800bcd4:	f3bf 8f6f 	isb	sy
 800bcd8:	f3bf 8f4f 	dsb	sy
 800bcdc:	b662      	cpsie	i
 800bcde:	613b      	str	r3, [r7, #16]
}
 800bce0:	bf00      	nop
 800bce2:	e7fe      	b.n	800bce2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce6:	685a      	ldr	r2, [r3, #4]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	1ad2      	subs	r2, r2, r3
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bcf6:	69b8      	ldr	r0, [r7, #24]
 800bcf8:	f000 f8fe 	bl	800bef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bcfc:	4b1b      	ldr	r3, [pc, #108]	; (800bd6c <pvPortMalloc+0x188>)
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	1ad3      	subs	r3, r2, r3
 800bd06:	4a19      	ldr	r2, [pc, #100]	; (800bd6c <pvPortMalloc+0x188>)
 800bd08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd0a:	4b18      	ldr	r3, [pc, #96]	; (800bd6c <pvPortMalloc+0x188>)
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	4b19      	ldr	r3, [pc, #100]	; (800bd74 <pvPortMalloc+0x190>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d203      	bcs.n	800bd1e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd16:	4b15      	ldr	r3, [pc, #84]	; (800bd6c <pvPortMalloc+0x188>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a16      	ldr	r2, [pc, #88]	; (800bd74 <pvPortMalloc+0x190>)
 800bd1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd20:	685a      	ldr	r2, [r3, #4]
 800bd22:	4b11      	ldr	r3, [pc, #68]	; (800bd68 <pvPortMalloc+0x184>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	431a      	orrs	r2, r3
 800bd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2e:	2200      	movs	r2, #0
 800bd30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bd32:	f7fe fc2d 	bl	800a590 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	f003 0307 	and.w	r3, r3, #7
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00c      	beq.n	800bd5a <pvPortMalloc+0x176>
	__asm volatile
 800bd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd44:	b672      	cpsid	i
 800bd46:	f383 8811 	msr	BASEPRI, r3
 800bd4a:	f3bf 8f6f 	isb	sy
 800bd4e:	f3bf 8f4f 	dsb	sy
 800bd52:	b662      	cpsie	i
 800bd54:	60fb      	str	r3, [r7, #12]
}
 800bd56:	bf00      	nop
 800bd58:	e7fe      	b.n	800bd58 <pvPortMalloc+0x174>
	return pvReturn;
 800bd5a:	69fb      	ldr	r3, [r7, #28]
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3728      	adds	r7, #40	; 0x28
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	200051c4 	.word	0x200051c4
 800bd68:	200051d0 	.word	0x200051d0
 800bd6c:	200051c8 	.word	0x200051c8
 800bd70:	200051bc 	.word	0x200051bc
 800bd74:	200051cc 	.word	0x200051cc

0800bd78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b086      	sub	sp, #24
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d04c      	beq.n	800be24 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bd8a:	2308      	movs	r3, #8
 800bd8c:	425b      	negs	r3, r3
 800bd8e:	697a      	ldr	r2, [r7, #20]
 800bd90:	4413      	add	r3, r2
 800bd92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	685a      	ldr	r2, [r3, #4]
 800bd9c:	4b23      	ldr	r3, [pc, #140]	; (800be2c <vPortFree+0xb4>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4013      	ands	r3, r2
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d10c      	bne.n	800bdc0 <vPortFree+0x48>
	__asm volatile
 800bda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdaa:	b672      	cpsid	i
 800bdac:	f383 8811 	msr	BASEPRI, r3
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	b662      	cpsie	i
 800bdba:	60fb      	str	r3, [r7, #12]
}
 800bdbc:	bf00      	nop
 800bdbe:	e7fe      	b.n	800bdbe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00c      	beq.n	800bde2 <vPortFree+0x6a>
	__asm volatile
 800bdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdcc:	b672      	cpsid	i
 800bdce:	f383 8811 	msr	BASEPRI, r3
 800bdd2:	f3bf 8f6f 	isb	sy
 800bdd6:	f3bf 8f4f 	dsb	sy
 800bdda:	b662      	cpsie	i
 800bddc:	60bb      	str	r3, [r7, #8]
}
 800bdde:	bf00      	nop
 800bde0:	e7fe      	b.n	800bde0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	685a      	ldr	r2, [r3, #4]
 800bde6:	4b11      	ldr	r3, [pc, #68]	; (800be2c <vPortFree+0xb4>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4013      	ands	r3, r2
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d019      	beq.n	800be24 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d115      	bne.n	800be24 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	685a      	ldr	r2, [r3, #4]
 800bdfc:	4b0b      	ldr	r3, [pc, #44]	; (800be2c <vPortFree+0xb4>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	43db      	mvns	r3, r3
 800be02:	401a      	ands	r2, r3
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800be08:	f7fe fbb4 	bl	800a574 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	685a      	ldr	r2, [r3, #4]
 800be10:	4b07      	ldr	r3, [pc, #28]	; (800be30 <vPortFree+0xb8>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4413      	add	r3, r2
 800be16:	4a06      	ldr	r2, [pc, #24]	; (800be30 <vPortFree+0xb8>)
 800be18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be1a:	6938      	ldr	r0, [r7, #16]
 800be1c:	f000 f86c 	bl	800bef8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800be20:	f7fe fbb6 	bl	800a590 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800be24:	bf00      	nop
 800be26:	3718      	adds	r7, #24
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	200051d0 	.word	0x200051d0
 800be30:	200051c8 	.word	0x200051c8

0800be34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800be3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800be3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800be40:	4b27      	ldr	r3, [pc, #156]	; (800bee0 <prvHeapInit+0xac>)
 800be42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f003 0307 	and.w	r3, r3, #7
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00c      	beq.n	800be68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	3307      	adds	r3, #7
 800be52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f023 0307 	bic.w	r3, r3, #7
 800be5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800be5c:	68ba      	ldr	r2, [r7, #8]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	4a1f      	ldr	r2, [pc, #124]	; (800bee0 <prvHeapInit+0xac>)
 800be64:	4413      	add	r3, r2
 800be66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800be6c:	4a1d      	ldr	r2, [pc, #116]	; (800bee4 <prvHeapInit+0xb0>)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800be72:	4b1c      	ldr	r3, [pc, #112]	; (800bee4 <prvHeapInit+0xb0>)
 800be74:	2200      	movs	r2, #0
 800be76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	68ba      	ldr	r2, [r7, #8]
 800be7c:	4413      	add	r3, r2
 800be7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800be80:	2208      	movs	r2, #8
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	1a9b      	subs	r3, r3, r2
 800be86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f023 0307 	bic.w	r3, r3, #7
 800be8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	4a15      	ldr	r2, [pc, #84]	; (800bee8 <prvHeapInit+0xb4>)
 800be94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800be96:	4b14      	ldr	r3, [pc, #80]	; (800bee8 <prvHeapInit+0xb4>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2200      	movs	r2, #0
 800be9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800be9e:	4b12      	ldr	r3, [pc, #72]	; (800bee8 <prvHeapInit+0xb4>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2200      	movs	r2, #0
 800bea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	1ad2      	subs	r2, r2, r3
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800beb4:	4b0c      	ldr	r3, [pc, #48]	; (800bee8 <prvHeapInit+0xb4>)
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	4a0a      	ldr	r2, [pc, #40]	; (800beec <prvHeapInit+0xb8>)
 800bec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	4a09      	ldr	r2, [pc, #36]	; (800bef0 <prvHeapInit+0xbc>)
 800beca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800becc:	4b09      	ldr	r3, [pc, #36]	; (800bef4 <prvHeapInit+0xc0>)
 800bece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bed2:	601a      	str	r2, [r3, #0]
}
 800bed4:	bf00      	nop
 800bed6:	3714      	adds	r7, #20
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr
 800bee0:	200015bc 	.word	0x200015bc
 800bee4:	200051bc 	.word	0x200051bc
 800bee8:	200051c4 	.word	0x200051c4
 800beec:	200051cc 	.word	0x200051cc
 800bef0:	200051c8 	.word	0x200051c8
 800bef4:	200051d0 	.word	0x200051d0

0800bef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bef8:	b480      	push	{r7}
 800befa:	b085      	sub	sp, #20
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf00:	4b28      	ldr	r3, [pc, #160]	; (800bfa4 <prvInsertBlockIntoFreeList+0xac>)
 800bf02:	60fb      	str	r3, [r7, #12]
 800bf04:	e002      	b.n	800bf0c <prvInsertBlockIntoFreeList+0x14>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	60fb      	str	r3, [r7, #12]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d8f7      	bhi.n	800bf06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	4413      	add	r3, r2
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d108      	bne.n	800bf3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	685a      	ldr	r2, [r3, #4]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	441a      	add	r2, r3
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	68ba      	ldr	r2, [r7, #8]
 800bf44:	441a      	add	r2, r3
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d118      	bne.n	800bf80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	4b15      	ldr	r3, [pc, #84]	; (800bfa8 <prvInsertBlockIntoFreeList+0xb0>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d00d      	beq.n	800bf76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	685a      	ldr	r2, [r3, #4]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	441a      	add	r2, r3
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	601a      	str	r2, [r3, #0]
 800bf74:	e008      	b.n	800bf88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bf76:	4b0c      	ldr	r3, [pc, #48]	; (800bfa8 <prvInsertBlockIntoFreeList+0xb0>)
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	601a      	str	r2, [r3, #0]
 800bf7e:	e003      	b.n	800bf88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d002      	beq.n	800bf96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf96:	bf00      	nop
 800bf98:	3714      	adds	r7, #20
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	200051bc 	.word	0x200051bc
 800bfa8:	200051c4 	.word	0x200051c4

0800bfac <std>:
 800bfac:	2300      	movs	r3, #0
 800bfae:	b510      	push	{r4, lr}
 800bfb0:	4604      	mov	r4, r0
 800bfb2:	e9c0 3300 	strd	r3, r3, [r0]
 800bfb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfba:	6083      	str	r3, [r0, #8]
 800bfbc:	8181      	strh	r1, [r0, #12]
 800bfbe:	6643      	str	r3, [r0, #100]	; 0x64
 800bfc0:	81c2      	strh	r2, [r0, #14]
 800bfc2:	6183      	str	r3, [r0, #24]
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	2208      	movs	r2, #8
 800bfc8:	305c      	adds	r0, #92	; 0x5c
 800bfca:	f000 f8f4 	bl	800c1b6 <memset>
 800bfce:	4b05      	ldr	r3, [pc, #20]	; (800bfe4 <std+0x38>)
 800bfd0:	6263      	str	r3, [r4, #36]	; 0x24
 800bfd2:	4b05      	ldr	r3, [pc, #20]	; (800bfe8 <std+0x3c>)
 800bfd4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bfd6:	4b05      	ldr	r3, [pc, #20]	; (800bfec <std+0x40>)
 800bfd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bfda:	4b05      	ldr	r3, [pc, #20]	; (800bff0 <std+0x44>)
 800bfdc:	6224      	str	r4, [r4, #32]
 800bfde:	6323      	str	r3, [r4, #48]	; 0x30
 800bfe0:	bd10      	pop	{r4, pc}
 800bfe2:	bf00      	nop
 800bfe4:	0800c131 	.word	0x0800c131
 800bfe8:	0800c153 	.word	0x0800c153
 800bfec:	0800c18b 	.word	0x0800c18b
 800bff0:	0800c1af 	.word	0x0800c1af

0800bff4 <stdio_exit_handler>:
 800bff4:	4a02      	ldr	r2, [pc, #8]	; (800c000 <stdio_exit_handler+0xc>)
 800bff6:	4903      	ldr	r1, [pc, #12]	; (800c004 <stdio_exit_handler+0x10>)
 800bff8:	4803      	ldr	r0, [pc, #12]	; (800c008 <stdio_exit_handler+0x14>)
 800bffa:	f000 b869 	b.w	800c0d0 <_fwalk_sglue>
 800bffe:	bf00      	nop
 800c000:	20000068 	.word	0x20000068
 800c004:	0800cc19 	.word	0x0800cc19
 800c008:	20000074 	.word	0x20000074

0800c00c <cleanup_stdio>:
 800c00c:	6841      	ldr	r1, [r0, #4]
 800c00e:	4b0c      	ldr	r3, [pc, #48]	; (800c040 <cleanup_stdio+0x34>)
 800c010:	4299      	cmp	r1, r3
 800c012:	b510      	push	{r4, lr}
 800c014:	4604      	mov	r4, r0
 800c016:	d001      	beq.n	800c01c <cleanup_stdio+0x10>
 800c018:	f000 fdfe 	bl	800cc18 <_fflush_r>
 800c01c:	68a1      	ldr	r1, [r4, #8]
 800c01e:	4b09      	ldr	r3, [pc, #36]	; (800c044 <cleanup_stdio+0x38>)
 800c020:	4299      	cmp	r1, r3
 800c022:	d002      	beq.n	800c02a <cleanup_stdio+0x1e>
 800c024:	4620      	mov	r0, r4
 800c026:	f000 fdf7 	bl	800cc18 <_fflush_r>
 800c02a:	68e1      	ldr	r1, [r4, #12]
 800c02c:	4b06      	ldr	r3, [pc, #24]	; (800c048 <cleanup_stdio+0x3c>)
 800c02e:	4299      	cmp	r1, r3
 800c030:	d004      	beq.n	800c03c <cleanup_stdio+0x30>
 800c032:	4620      	mov	r0, r4
 800c034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c038:	f000 bdee 	b.w	800cc18 <_fflush_r>
 800c03c:	bd10      	pop	{r4, pc}
 800c03e:	bf00      	nop
 800c040:	200051d4 	.word	0x200051d4
 800c044:	2000523c 	.word	0x2000523c
 800c048:	200052a4 	.word	0x200052a4

0800c04c <global_stdio_init.part.0>:
 800c04c:	b510      	push	{r4, lr}
 800c04e:	4b0b      	ldr	r3, [pc, #44]	; (800c07c <global_stdio_init.part.0+0x30>)
 800c050:	4c0b      	ldr	r4, [pc, #44]	; (800c080 <global_stdio_init.part.0+0x34>)
 800c052:	4a0c      	ldr	r2, [pc, #48]	; (800c084 <global_stdio_init.part.0+0x38>)
 800c054:	601a      	str	r2, [r3, #0]
 800c056:	4620      	mov	r0, r4
 800c058:	2200      	movs	r2, #0
 800c05a:	2104      	movs	r1, #4
 800c05c:	f7ff ffa6 	bl	800bfac <std>
 800c060:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c064:	2201      	movs	r2, #1
 800c066:	2109      	movs	r1, #9
 800c068:	f7ff ffa0 	bl	800bfac <std>
 800c06c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c070:	2202      	movs	r2, #2
 800c072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c076:	2112      	movs	r1, #18
 800c078:	f7ff bf98 	b.w	800bfac <std>
 800c07c:	2000530c 	.word	0x2000530c
 800c080:	200051d4 	.word	0x200051d4
 800c084:	0800bff5 	.word	0x0800bff5

0800c088 <__sfp_lock_acquire>:
 800c088:	4801      	ldr	r0, [pc, #4]	; (800c090 <__sfp_lock_acquire+0x8>)
 800c08a:	f000 b963 	b.w	800c354 <__retarget_lock_acquire_recursive>
 800c08e:	bf00      	nop
 800c090:	20005315 	.word	0x20005315

0800c094 <__sfp_lock_release>:
 800c094:	4801      	ldr	r0, [pc, #4]	; (800c09c <__sfp_lock_release+0x8>)
 800c096:	f000 b95e 	b.w	800c356 <__retarget_lock_release_recursive>
 800c09a:	bf00      	nop
 800c09c:	20005315 	.word	0x20005315

0800c0a0 <__sinit>:
 800c0a0:	b510      	push	{r4, lr}
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	f7ff fff0 	bl	800c088 <__sfp_lock_acquire>
 800c0a8:	6a23      	ldr	r3, [r4, #32]
 800c0aa:	b11b      	cbz	r3, 800c0b4 <__sinit+0x14>
 800c0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0b0:	f7ff bff0 	b.w	800c094 <__sfp_lock_release>
 800c0b4:	4b04      	ldr	r3, [pc, #16]	; (800c0c8 <__sinit+0x28>)
 800c0b6:	6223      	str	r3, [r4, #32]
 800c0b8:	4b04      	ldr	r3, [pc, #16]	; (800c0cc <__sinit+0x2c>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d1f5      	bne.n	800c0ac <__sinit+0xc>
 800c0c0:	f7ff ffc4 	bl	800c04c <global_stdio_init.part.0>
 800c0c4:	e7f2      	b.n	800c0ac <__sinit+0xc>
 800c0c6:	bf00      	nop
 800c0c8:	0800c00d 	.word	0x0800c00d
 800c0cc:	2000530c 	.word	0x2000530c

0800c0d0 <_fwalk_sglue>:
 800c0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d4:	4607      	mov	r7, r0
 800c0d6:	4688      	mov	r8, r1
 800c0d8:	4614      	mov	r4, r2
 800c0da:	2600      	movs	r6, #0
 800c0dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0e0:	f1b9 0901 	subs.w	r9, r9, #1
 800c0e4:	d505      	bpl.n	800c0f2 <_fwalk_sglue+0x22>
 800c0e6:	6824      	ldr	r4, [r4, #0]
 800c0e8:	2c00      	cmp	r4, #0
 800c0ea:	d1f7      	bne.n	800c0dc <_fwalk_sglue+0xc>
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0f2:	89ab      	ldrh	r3, [r5, #12]
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d907      	bls.n	800c108 <_fwalk_sglue+0x38>
 800c0f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	d003      	beq.n	800c108 <_fwalk_sglue+0x38>
 800c100:	4629      	mov	r1, r5
 800c102:	4638      	mov	r0, r7
 800c104:	47c0      	blx	r8
 800c106:	4306      	orrs	r6, r0
 800c108:	3568      	adds	r5, #104	; 0x68
 800c10a:	e7e9      	b.n	800c0e0 <_fwalk_sglue+0x10>

0800c10c <iprintf>:
 800c10c:	b40f      	push	{r0, r1, r2, r3}
 800c10e:	b507      	push	{r0, r1, r2, lr}
 800c110:	4906      	ldr	r1, [pc, #24]	; (800c12c <iprintf+0x20>)
 800c112:	ab04      	add	r3, sp, #16
 800c114:	6808      	ldr	r0, [r1, #0]
 800c116:	f853 2b04 	ldr.w	r2, [r3], #4
 800c11a:	6881      	ldr	r1, [r0, #8]
 800c11c:	9301      	str	r3, [sp, #4]
 800c11e:	f000 fa4b 	bl	800c5b8 <_vfiprintf_r>
 800c122:	b003      	add	sp, #12
 800c124:	f85d eb04 	ldr.w	lr, [sp], #4
 800c128:	b004      	add	sp, #16
 800c12a:	4770      	bx	lr
 800c12c:	200000c0 	.word	0x200000c0

0800c130 <__sread>:
 800c130:	b510      	push	{r4, lr}
 800c132:	460c      	mov	r4, r1
 800c134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c138:	f000 f8be 	bl	800c2b8 <_read_r>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	bfab      	itete	ge
 800c140:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c142:	89a3      	ldrhlt	r3, [r4, #12]
 800c144:	181b      	addge	r3, r3, r0
 800c146:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c14a:	bfac      	ite	ge
 800c14c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c14e:	81a3      	strhlt	r3, [r4, #12]
 800c150:	bd10      	pop	{r4, pc}

0800c152 <__swrite>:
 800c152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c156:	461f      	mov	r7, r3
 800c158:	898b      	ldrh	r3, [r1, #12]
 800c15a:	05db      	lsls	r3, r3, #23
 800c15c:	4605      	mov	r5, r0
 800c15e:	460c      	mov	r4, r1
 800c160:	4616      	mov	r6, r2
 800c162:	d505      	bpl.n	800c170 <__swrite+0x1e>
 800c164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c168:	2302      	movs	r3, #2
 800c16a:	2200      	movs	r2, #0
 800c16c:	f000 f892 	bl	800c294 <_lseek_r>
 800c170:	89a3      	ldrh	r3, [r4, #12]
 800c172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c17a:	81a3      	strh	r3, [r4, #12]
 800c17c:	4632      	mov	r2, r6
 800c17e:	463b      	mov	r3, r7
 800c180:	4628      	mov	r0, r5
 800c182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c186:	f000 b8a9 	b.w	800c2dc <_write_r>

0800c18a <__sseek>:
 800c18a:	b510      	push	{r4, lr}
 800c18c:	460c      	mov	r4, r1
 800c18e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c192:	f000 f87f 	bl	800c294 <_lseek_r>
 800c196:	1c43      	adds	r3, r0, #1
 800c198:	89a3      	ldrh	r3, [r4, #12]
 800c19a:	bf15      	itete	ne
 800c19c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c19e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1a6:	81a3      	strheq	r3, [r4, #12]
 800c1a8:	bf18      	it	ne
 800c1aa:	81a3      	strhne	r3, [r4, #12]
 800c1ac:	bd10      	pop	{r4, pc}

0800c1ae <__sclose>:
 800c1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b2:	f000 b809 	b.w	800c1c8 <_close_r>

0800c1b6 <memset>:
 800c1b6:	4402      	add	r2, r0
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d100      	bne.n	800c1c0 <memset+0xa>
 800c1be:	4770      	bx	lr
 800c1c0:	f803 1b01 	strb.w	r1, [r3], #1
 800c1c4:	e7f9      	b.n	800c1ba <memset+0x4>
	...

0800c1c8 <_close_r>:
 800c1c8:	b538      	push	{r3, r4, r5, lr}
 800c1ca:	4d06      	ldr	r5, [pc, #24]	; (800c1e4 <_close_r+0x1c>)
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	4608      	mov	r0, r1
 800c1d2:	602b      	str	r3, [r5, #0]
 800c1d4:	f7f6 f9f3 	bl	80025be <_close>
 800c1d8:	1c43      	adds	r3, r0, #1
 800c1da:	d102      	bne.n	800c1e2 <_close_r+0x1a>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	b103      	cbz	r3, 800c1e2 <_close_r+0x1a>
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	20005310 	.word	0x20005310

0800c1e8 <_reclaim_reent>:
 800c1e8:	4b29      	ldr	r3, [pc, #164]	; (800c290 <_reclaim_reent+0xa8>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4283      	cmp	r3, r0
 800c1ee:	b570      	push	{r4, r5, r6, lr}
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	d04b      	beq.n	800c28c <_reclaim_reent+0xa4>
 800c1f4:	69c3      	ldr	r3, [r0, #28]
 800c1f6:	b143      	cbz	r3, 800c20a <_reclaim_reent+0x22>
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d144      	bne.n	800c288 <_reclaim_reent+0xa0>
 800c1fe:	69e3      	ldr	r3, [r4, #28]
 800c200:	6819      	ldr	r1, [r3, #0]
 800c202:	b111      	cbz	r1, 800c20a <_reclaim_reent+0x22>
 800c204:	4620      	mov	r0, r4
 800c206:	f000 f8b5 	bl	800c374 <_free_r>
 800c20a:	6961      	ldr	r1, [r4, #20]
 800c20c:	b111      	cbz	r1, 800c214 <_reclaim_reent+0x2c>
 800c20e:	4620      	mov	r0, r4
 800c210:	f000 f8b0 	bl	800c374 <_free_r>
 800c214:	69e1      	ldr	r1, [r4, #28]
 800c216:	b111      	cbz	r1, 800c21e <_reclaim_reent+0x36>
 800c218:	4620      	mov	r0, r4
 800c21a:	f000 f8ab 	bl	800c374 <_free_r>
 800c21e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c220:	b111      	cbz	r1, 800c228 <_reclaim_reent+0x40>
 800c222:	4620      	mov	r0, r4
 800c224:	f000 f8a6 	bl	800c374 <_free_r>
 800c228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c22a:	b111      	cbz	r1, 800c232 <_reclaim_reent+0x4a>
 800c22c:	4620      	mov	r0, r4
 800c22e:	f000 f8a1 	bl	800c374 <_free_r>
 800c232:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c234:	b111      	cbz	r1, 800c23c <_reclaim_reent+0x54>
 800c236:	4620      	mov	r0, r4
 800c238:	f000 f89c 	bl	800c374 <_free_r>
 800c23c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c23e:	b111      	cbz	r1, 800c246 <_reclaim_reent+0x5e>
 800c240:	4620      	mov	r0, r4
 800c242:	f000 f897 	bl	800c374 <_free_r>
 800c246:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c248:	b111      	cbz	r1, 800c250 <_reclaim_reent+0x68>
 800c24a:	4620      	mov	r0, r4
 800c24c:	f000 f892 	bl	800c374 <_free_r>
 800c250:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c252:	b111      	cbz	r1, 800c25a <_reclaim_reent+0x72>
 800c254:	4620      	mov	r0, r4
 800c256:	f000 f88d 	bl	800c374 <_free_r>
 800c25a:	6a23      	ldr	r3, [r4, #32]
 800c25c:	b1b3      	cbz	r3, 800c28c <_reclaim_reent+0xa4>
 800c25e:	4620      	mov	r0, r4
 800c260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c264:	4718      	bx	r3
 800c266:	5949      	ldr	r1, [r1, r5]
 800c268:	b941      	cbnz	r1, 800c27c <_reclaim_reent+0x94>
 800c26a:	3504      	adds	r5, #4
 800c26c:	69e3      	ldr	r3, [r4, #28]
 800c26e:	2d80      	cmp	r5, #128	; 0x80
 800c270:	68d9      	ldr	r1, [r3, #12]
 800c272:	d1f8      	bne.n	800c266 <_reclaim_reent+0x7e>
 800c274:	4620      	mov	r0, r4
 800c276:	f000 f87d 	bl	800c374 <_free_r>
 800c27a:	e7c0      	b.n	800c1fe <_reclaim_reent+0x16>
 800c27c:	680e      	ldr	r6, [r1, #0]
 800c27e:	4620      	mov	r0, r4
 800c280:	f000 f878 	bl	800c374 <_free_r>
 800c284:	4631      	mov	r1, r6
 800c286:	e7ef      	b.n	800c268 <_reclaim_reent+0x80>
 800c288:	2500      	movs	r5, #0
 800c28a:	e7ef      	b.n	800c26c <_reclaim_reent+0x84>
 800c28c:	bd70      	pop	{r4, r5, r6, pc}
 800c28e:	bf00      	nop
 800c290:	200000c0 	.word	0x200000c0

0800c294 <_lseek_r>:
 800c294:	b538      	push	{r3, r4, r5, lr}
 800c296:	4d07      	ldr	r5, [pc, #28]	; (800c2b4 <_lseek_r+0x20>)
 800c298:	4604      	mov	r4, r0
 800c29a:	4608      	mov	r0, r1
 800c29c:	4611      	mov	r1, r2
 800c29e:	2200      	movs	r2, #0
 800c2a0:	602a      	str	r2, [r5, #0]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	f7f6 f9b2 	bl	800260c <_lseek>
 800c2a8:	1c43      	adds	r3, r0, #1
 800c2aa:	d102      	bne.n	800c2b2 <_lseek_r+0x1e>
 800c2ac:	682b      	ldr	r3, [r5, #0]
 800c2ae:	b103      	cbz	r3, 800c2b2 <_lseek_r+0x1e>
 800c2b0:	6023      	str	r3, [r4, #0]
 800c2b2:	bd38      	pop	{r3, r4, r5, pc}
 800c2b4:	20005310 	.word	0x20005310

0800c2b8 <_read_r>:
 800c2b8:	b538      	push	{r3, r4, r5, lr}
 800c2ba:	4d07      	ldr	r5, [pc, #28]	; (800c2d8 <_read_r+0x20>)
 800c2bc:	4604      	mov	r4, r0
 800c2be:	4608      	mov	r0, r1
 800c2c0:	4611      	mov	r1, r2
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	602a      	str	r2, [r5, #0]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	f7f6 f940 	bl	800254c <_read>
 800c2cc:	1c43      	adds	r3, r0, #1
 800c2ce:	d102      	bne.n	800c2d6 <_read_r+0x1e>
 800c2d0:	682b      	ldr	r3, [r5, #0]
 800c2d2:	b103      	cbz	r3, 800c2d6 <_read_r+0x1e>
 800c2d4:	6023      	str	r3, [r4, #0]
 800c2d6:	bd38      	pop	{r3, r4, r5, pc}
 800c2d8:	20005310 	.word	0x20005310

0800c2dc <_write_r>:
 800c2dc:	b538      	push	{r3, r4, r5, lr}
 800c2de:	4d07      	ldr	r5, [pc, #28]	; (800c2fc <_write_r+0x20>)
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	4608      	mov	r0, r1
 800c2e4:	4611      	mov	r1, r2
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	602a      	str	r2, [r5, #0]
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	f7f6 f94b 	bl	8002586 <_write>
 800c2f0:	1c43      	adds	r3, r0, #1
 800c2f2:	d102      	bne.n	800c2fa <_write_r+0x1e>
 800c2f4:	682b      	ldr	r3, [r5, #0]
 800c2f6:	b103      	cbz	r3, 800c2fa <_write_r+0x1e>
 800c2f8:	6023      	str	r3, [r4, #0]
 800c2fa:	bd38      	pop	{r3, r4, r5, pc}
 800c2fc:	20005310 	.word	0x20005310

0800c300 <__errno>:
 800c300:	4b01      	ldr	r3, [pc, #4]	; (800c308 <__errno+0x8>)
 800c302:	6818      	ldr	r0, [r3, #0]
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop
 800c308:	200000c0 	.word	0x200000c0

0800c30c <__libc_init_array>:
 800c30c:	b570      	push	{r4, r5, r6, lr}
 800c30e:	4d0d      	ldr	r5, [pc, #52]	; (800c344 <__libc_init_array+0x38>)
 800c310:	4c0d      	ldr	r4, [pc, #52]	; (800c348 <__libc_init_array+0x3c>)
 800c312:	1b64      	subs	r4, r4, r5
 800c314:	10a4      	asrs	r4, r4, #2
 800c316:	2600      	movs	r6, #0
 800c318:	42a6      	cmp	r6, r4
 800c31a:	d109      	bne.n	800c330 <__libc_init_array+0x24>
 800c31c:	4d0b      	ldr	r5, [pc, #44]	; (800c34c <__libc_init_array+0x40>)
 800c31e:	4c0c      	ldr	r4, [pc, #48]	; (800c350 <__libc_init_array+0x44>)
 800c320:	f000 fdcc 	bl	800cebc <_init>
 800c324:	1b64      	subs	r4, r4, r5
 800c326:	10a4      	asrs	r4, r4, #2
 800c328:	2600      	movs	r6, #0
 800c32a:	42a6      	cmp	r6, r4
 800c32c:	d105      	bne.n	800c33a <__libc_init_array+0x2e>
 800c32e:	bd70      	pop	{r4, r5, r6, pc}
 800c330:	f855 3b04 	ldr.w	r3, [r5], #4
 800c334:	4798      	blx	r3
 800c336:	3601      	adds	r6, #1
 800c338:	e7ee      	b.n	800c318 <__libc_init_array+0xc>
 800c33a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c33e:	4798      	blx	r3
 800c340:	3601      	adds	r6, #1
 800c342:	e7f2      	b.n	800c32a <__libc_init_array+0x1e>
 800c344:	0800e8ec 	.word	0x0800e8ec
 800c348:	0800e8ec 	.word	0x0800e8ec
 800c34c:	0800e8ec 	.word	0x0800e8ec
 800c350:	0800e8f0 	.word	0x0800e8f0

0800c354 <__retarget_lock_acquire_recursive>:
 800c354:	4770      	bx	lr

0800c356 <__retarget_lock_release_recursive>:
 800c356:	4770      	bx	lr

0800c358 <memcpy>:
 800c358:	440a      	add	r2, r1
 800c35a:	4291      	cmp	r1, r2
 800c35c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c360:	d100      	bne.n	800c364 <memcpy+0xc>
 800c362:	4770      	bx	lr
 800c364:	b510      	push	{r4, lr}
 800c366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c36a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c36e:	4291      	cmp	r1, r2
 800c370:	d1f9      	bne.n	800c366 <memcpy+0xe>
 800c372:	bd10      	pop	{r4, pc}

0800c374 <_free_r>:
 800c374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c376:	2900      	cmp	r1, #0
 800c378:	d044      	beq.n	800c404 <_free_r+0x90>
 800c37a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c37e:	9001      	str	r0, [sp, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	f1a1 0404 	sub.w	r4, r1, #4
 800c386:	bfb8      	it	lt
 800c388:	18e4      	addlt	r4, r4, r3
 800c38a:	f000 f8df 	bl	800c54c <__malloc_lock>
 800c38e:	4a1e      	ldr	r2, [pc, #120]	; (800c408 <_free_r+0x94>)
 800c390:	9801      	ldr	r0, [sp, #4]
 800c392:	6813      	ldr	r3, [r2, #0]
 800c394:	b933      	cbnz	r3, 800c3a4 <_free_r+0x30>
 800c396:	6063      	str	r3, [r4, #4]
 800c398:	6014      	str	r4, [r2, #0]
 800c39a:	b003      	add	sp, #12
 800c39c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3a0:	f000 b8da 	b.w	800c558 <__malloc_unlock>
 800c3a4:	42a3      	cmp	r3, r4
 800c3a6:	d908      	bls.n	800c3ba <_free_r+0x46>
 800c3a8:	6825      	ldr	r5, [r4, #0]
 800c3aa:	1961      	adds	r1, r4, r5
 800c3ac:	428b      	cmp	r3, r1
 800c3ae:	bf01      	itttt	eq
 800c3b0:	6819      	ldreq	r1, [r3, #0]
 800c3b2:	685b      	ldreq	r3, [r3, #4]
 800c3b4:	1949      	addeq	r1, r1, r5
 800c3b6:	6021      	streq	r1, [r4, #0]
 800c3b8:	e7ed      	b.n	800c396 <_free_r+0x22>
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	b10b      	cbz	r3, 800c3c4 <_free_r+0x50>
 800c3c0:	42a3      	cmp	r3, r4
 800c3c2:	d9fa      	bls.n	800c3ba <_free_r+0x46>
 800c3c4:	6811      	ldr	r1, [r2, #0]
 800c3c6:	1855      	adds	r5, r2, r1
 800c3c8:	42a5      	cmp	r5, r4
 800c3ca:	d10b      	bne.n	800c3e4 <_free_r+0x70>
 800c3cc:	6824      	ldr	r4, [r4, #0]
 800c3ce:	4421      	add	r1, r4
 800c3d0:	1854      	adds	r4, r2, r1
 800c3d2:	42a3      	cmp	r3, r4
 800c3d4:	6011      	str	r1, [r2, #0]
 800c3d6:	d1e0      	bne.n	800c39a <_free_r+0x26>
 800c3d8:	681c      	ldr	r4, [r3, #0]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	6053      	str	r3, [r2, #4]
 800c3de:	440c      	add	r4, r1
 800c3e0:	6014      	str	r4, [r2, #0]
 800c3e2:	e7da      	b.n	800c39a <_free_r+0x26>
 800c3e4:	d902      	bls.n	800c3ec <_free_r+0x78>
 800c3e6:	230c      	movs	r3, #12
 800c3e8:	6003      	str	r3, [r0, #0]
 800c3ea:	e7d6      	b.n	800c39a <_free_r+0x26>
 800c3ec:	6825      	ldr	r5, [r4, #0]
 800c3ee:	1961      	adds	r1, r4, r5
 800c3f0:	428b      	cmp	r3, r1
 800c3f2:	bf04      	itt	eq
 800c3f4:	6819      	ldreq	r1, [r3, #0]
 800c3f6:	685b      	ldreq	r3, [r3, #4]
 800c3f8:	6063      	str	r3, [r4, #4]
 800c3fa:	bf04      	itt	eq
 800c3fc:	1949      	addeq	r1, r1, r5
 800c3fe:	6021      	streq	r1, [r4, #0]
 800c400:	6054      	str	r4, [r2, #4]
 800c402:	e7ca      	b.n	800c39a <_free_r+0x26>
 800c404:	b003      	add	sp, #12
 800c406:	bd30      	pop	{r4, r5, pc}
 800c408:	20005318 	.word	0x20005318

0800c40c <sbrk_aligned>:
 800c40c:	b570      	push	{r4, r5, r6, lr}
 800c40e:	4e0e      	ldr	r6, [pc, #56]	; (800c448 <sbrk_aligned+0x3c>)
 800c410:	460c      	mov	r4, r1
 800c412:	6831      	ldr	r1, [r6, #0]
 800c414:	4605      	mov	r5, r0
 800c416:	b911      	cbnz	r1, 800c41e <sbrk_aligned+0x12>
 800c418:	f000 fcbc 	bl	800cd94 <_sbrk_r>
 800c41c:	6030      	str	r0, [r6, #0]
 800c41e:	4621      	mov	r1, r4
 800c420:	4628      	mov	r0, r5
 800c422:	f000 fcb7 	bl	800cd94 <_sbrk_r>
 800c426:	1c43      	adds	r3, r0, #1
 800c428:	d00a      	beq.n	800c440 <sbrk_aligned+0x34>
 800c42a:	1cc4      	adds	r4, r0, #3
 800c42c:	f024 0403 	bic.w	r4, r4, #3
 800c430:	42a0      	cmp	r0, r4
 800c432:	d007      	beq.n	800c444 <sbrk_aligned+0x38>
 800c434:	1a21      	subs	r1, r4, r0
 800c436:	4628      	mov	r0, r5
 800c438:	f000 fcac 	bl	800cd94 <_sbrk_r>
 800c43c:	3001      	adds	r0, #1
 800c43e:	d101      	bne.n	800c444 <sbrk_aligned+0x38>
 800c440:	f04f 34ff 	mov.w	r4, #4294967295
 800c444:	4620      	mov	r0, r4
 800c446:	bd70      	pop	{r4, r5, r6, pc}
 800c448:	2000531c 	.word	0x2000531c

0800c44c <_malloc_r>:
 800c44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c450:	1ccd      	adds	r5, r1, #3
 800c452:	f025 0503 	bic.w	r5, r5, #3
 800c456:	3508      	adds	r5, #8
 800c458:	2d0c      	cmp	r5, #12
 800c45a:	bf38      	it	cc
 800c45c:	250c      	movcc	r5, #12
 800c45e:	2d00      	cmp	r5, #0
 800c460:	4607      	mov	r7, r0
 800c462:	db01      	blt.n	800c468 <_malloc_r+0x1c>
 800c464:	42a9      	cmp	r1, r5
 800c466:	d905      	bls.n	800c474 <_malloc_r+0x28>
 800c468:	230c      	movs	r3, #12
 800c46a:	603b      	str	r3, [r7, #0]
 800c46c:	2600      	movs	r6, #0
 800c46e:	4630      	mov	r0, r6
 800c470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c474:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c548 <_malloc_r+0xfc>
 800c478:	f000 f868 	bl	800c54c <__malloc_lock>
 800c47c:	f8d8 3000 	ldr.w	r3, [r8]
 800c480:	461c      	mov	r4, r3
 800c482:	bb5c      	cbnz	r4, 800c4dc <_malloc_r+0x90>
 800c484:	4629      	mov	r1, r5
 800c486:	4638      	mov	r0, r7
 800c488:	f7ff ffc0 	bl	800c40c <sbrk_aligned>
 800c48c:	1c43      	adds	r3, r0, #1
 800c48e:	4604      	mov	r4, r0
 800c490:	d155      	bne.n	800c53e <_malloc_r+0xf2>
 800c492:	f8d8 4000 	ldr.w	r4, [r8]
 800c496:	4626      	mov	r6, r4
 800c498:	2e00      	cmp	r6, #0
 800c49a:	d145      	bne.n	800c528 <_malloc_r+0xdc>
 800c49c:	2c00      	cmp	r4, #0
 800c49e:	d048      	beq.n	800c532 <_malloc_r+0xe6>
 800c4a0:	6823      	ldr	r3, [r4, #0]
 800c4a2:	4631      	mov	r1, r6
 800c4a4:	4638      	mov	r0, r7
 800c4a6:	eb04 0903 	add.w	r9, r4, r3
 800c4aa:	f000 fc73 	bl	800cd94 <_sbrk_r>
 800c4ae:	4581      	cmp	r9, r0
 800c4b0:	d13f      	bne.n	800c532 <_malloc_r+0xe6>
 800c4b2:	6821      	ldr	r1, [r4, #0]
 800c4b4:	1a6d      	subs	r5, r5, r1
 800c4b6:	4629      	mov	r1, r5
 800c4b8:	4638      	mov	r0, r7
 800c4ba:	f7ff ffa7 	bl	800c40c <sbrk_aligned>
 800c4be:	3001      	adds	r0, #1
 800c4c0:	d037      	beq.n	800c532 <_malloc_r+0xe6>
 800c4c2:	6823      	ldr	r3, [r4, #0]
 800c4c4:	442b      	add	r3, r5
 800c4c6:	6023      	str	r3, [r4, #0]
 800c4c8:	f8d8 3000 	ldr.w	r3, [r8]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d038      	beq.n	800c542 <_malloc_r+0xf6>
 800c4d0:	685a      	ldr	r2, [r3, #4]
 800c4d2:	42a2      	cmp	r2, r4
 800c4d4:	d12b      	bne.n	800c52e <_malloc_r+0xe2>
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	605a      	str	r2, [r3, #4]
 800c4da:	e00f      	b.n	800c4fc <_malloc_r+0xb0>
 800c4dc:	6822      	ldr	r2, [r4, #0]
 800c4de:	1b52      	subs	r2, r2, r5
 800c4e0:	d41f      	bmi.n	800c522 <_malloc_r+0xd6>
 800c4e2:	2a0b      	cmp	r2, #11
 800c4e4:	d917      	bls.n	800c516 <_malloc_r+0xca>
 800c4e6:	1961      	adds	r1, r4, r5
 800c4e8:	42a3      	cmp	r3, r4
 800c4ea:	6025      	str	r5, [r4, #0]
 800c4ec:	bf18      	it	ne
 800c4ee:	6059      	strne	r1, [r3, #4]
 800c4f0:	6863      	ldr	r3, [r4, #4]
 800c4f2:	bf08      	it	eq
 800c4f4:	f8c8 1000 	streq.w	r1, [r8]
 800c4f8:	5162      	str	r2, [r4, r5]
 800c4fa:	604b      	str	r3, [r1, #4]
 800c4fc:	4638      	mov	r0, r7
 800c4fe:	f104 060b 	add.w	r6, r4, #11
 800c502:	f000 f829 	bl	800c558 <__malloc_unlock>
 800c506:	f026 0607 	bic.w	r6, r6, #7
 800c50a:	1d23      	adds	r3, r4, #4
 800c50c:	1af2      	subs	r2, r6, r3
 800c50e:	d0ae      	beq.n	800c46e <_malloc_r+0x22>
 800c510:	1b9b      	subs	r3, r3, r6
 800c512:	50a3      	str	r3, [r4, r2]
 800c514:	e7ab      	b.n	800c46e <_malloc_r+0x22>
 800c516:	42a3      	cmp	r3, r4
 800c518:	6862      	ldr	r2, [r4, #4]
 800c51a:	d1dd      	bne.n	800c4d8 <_malloc_r+0x8c>
 800c51c:	f8c8 2000 	str.w	r2, [r8]
 800c520:	e7ec      	b.n	800c4fc <_malloc_r+0xb0>
 800c522:	4623      	mov	r3, r4
 800c524:	6864      	ldr	r4, [r4, #4]
 800c526:	e7ac      	b.n	800c482 <_malloc_r+0x36>
 800c528:	4634      	mov	r4, r6
 800c52a:	6876      	ldr	r6, [r6, #4]
 800c52c:	e7b4      	b.n	800c498 <_malloc_r+0x4c>
 800c52e:	4613      	mov	r3, r2
 800c530:	e7cc      	b.n	800c4cc <_malloc_r+0x80>
 800c532:	230c      	movs	r3, #12
 800c534:	603b      	str	r3, [r7, #0]
 800c536:	4638      	mov	r0, r7
 800c538:	f000 f80e 	bl	800c558 <__malloc_unlock>
 800c53c:	e797      	b.n	800c46e <_malloc_r+0x22>
 800c53e:	6025      	str	r5, [r4, #0]
 800c540:	e7dc      	b.n	800c4fc <_malloc_r+0xb0>
 800c542:	605b      	str	r3, [r3, #4]
 800c544:	deff      	udf	#255	; 0xff
 800c546:	bf00      	nop
 800c548:	20005318 	.word	0x20005318

0800c54c <__malloc_lock>:
 800c54c:	4801      	ldr	r0, [pc, #4]	; (800c554 <__malloc_lock+0x8>)
 800c54e:	f7ff bf01 	b.w	800c354 <__retarget_lock_acquire_recursive>
 800c552:	bf00      	nop
 800c554:	20005314 	.word	0x20005314

0800c558 <__malloc_unlock>:
 800c558:	4801      	ldr	r0, [pc, #4]	; (800c560 <__malloc_unlock+0x8>)
 800c55a:	f7ff befc 	b.w	800c356 <__retarget_lock_release_recursive>
 800c55e:	bf00      	nop
 800c560:	20005314 	.word	0x20005314

0800c564 <__sfputc_r>:
 800c564:	6893      	ldr	r3, [r2, #8]
 800c566:	3b01      	subs	r3, #1
 800c568:	2b00      	cmp	r3, #0
 800c56a:	b410      	push	{r4}
 800c56c:	6093      	str	r3, [r2, #8]
 800c56e:	da08      	bge.n	800c582 <__sfputc_r+0x1e>
 800c570:	6994      	ldr	r4, [r2, #24]
 800c572:	42a3      	cmp	r3, r4
 800c574:	db01      	blt.n	800c57a <__sfputc_r+0x16>
 800c576:	290a      	cmp	r1, #10
 800c578:	d103      	bne.n	800c582 <__sfputc_r+0x1e>
 800c57a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c57e:	f000 bb73 	b.w	800cc68 <__swbuf_r>
 800c582:	6813      	ldr	r3, [r2, #0]
 800c584:	1c58      	adds	r0, r3, #1
 800c586:	6010      	str	r0, [r2, #0]
 800c588:	7019      	strb	r1, [r3, #0]
 800c58a:	4608      	mov	r0, r1
 800c58c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c590:	4770      	bx	lr

0800c592 <__sfputs_r>:
 800c592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c594:	4606      	mov	r6, r0
 800c596:	460f      	mov	r7, r1
 800c598:	4614      	mov	r4, r2
 800c59a:	18d5      	adds	r5, r2, r3
 800c59c:	42ac      	cmp	r4, r5
 800c59e:	d101      	bne.n	800c5a4 <__sfputs_r+0x12>
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	e007      	b.n	800c5b4 <__sfputs_r+0x22>
 800c5a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5a8:	463a      	mov	r2, r7
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	f7ff ffda 	bl	800c564 <__sfputc_r>
 800c5b0:	1c43      	adds	r3, r0, #1
 800c5b2:	d1f3      	bne.n	800c59c <__sfputs_r+0xa>
 800c5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5b8 <_vfiprintf_r>:
 800c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5bc:	460d      	mov	r5, r1
 800c5be:	b09d      	sub	sp, #116	; 0x74
 800c5c0:	4614      	mov	r4, r2
 800c5c2:	4698      	mov	r8, r3
 800c5c4:	4606      	mov	r6, r0
 800c5c6:	b118      	cbz	r0, 800c5d0 <_vfiprintf_r+0x18>
 800c5c8:	6a03      	ldr	r3, [r0, #32]
 800c5ca:	b90b      	cbnz	r3, 800c5d0 <_vfiprintf_r+0x18>
 800c5cc:	f7ff fd68 	bl	800c0a0 <__sinit>
 800c5d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5d2:	07d9      	lsls	r1, r3, #31
 800c5d4:	d405      	bmi.n	800c5e2 <_vfiprintf_r+0x2a>
 800c5d6:	89ab      	ldrh	r3, [r5, #12]
 800c5d8:	059a      	lsls	r2, r3, #22
 800c5da:	d402      	bmi.n	800c5e2 <_vfiprintf_r+0x2a>
 800c5dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5de:	f7ff feb9 	bl	800c354 <__retarget_lock_acquire_recursive>
 800c5e2:	89ab      	ldrh	r3, [r5, #12]
 800c5e4:	071b      	lsls	r3, r3, #28
 800c5e6:	d501      	bpl.n	800c5ec <_vfiprintf_r+0x34>
 800c5e8:	692b      	ldr	r3, [r5, #16]
 800c5ea:	b99b      	cbnz	r3, 800c614 <_vfiprintf_r+0x5c>
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	f000 fb78 	bl	800cce4 <__swsetup_r>
 800c5f4:	b170      	cbz	r0, 800c614 <_vfiprintf_r+0x5c>
 800c5f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5f8:	07dc      	lsls	r4, r3, #31
 800c5fa:	d504      	bpl.n	800c606 <_vfiprintf_r+0x4e>
 800c5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c600:	b01d      	add	sp, #116	; 0x74
 800c602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c606:	89ab      	ldrh	r3, [r5, #12]
 800c608:	0598      	lsls	r0, r3, #22
 800c60a:	d4f7      	bmi.n	800c5fc <_vfiprintf_r+0x44>
 800c60c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c60e:	f7ff fea2 	bl	800c356 <__retarget_lock_release_recursive>
 800c612:	e7f3      	b.n	800c5fc <_vfiprintf_r+0x44>
 800c614:	2300      	movs	r3, #0
 800c616:	9309      	str	r3, [sp, #36]	; 0x24
 800c618:	2320      	movs	r3, #32
 800c61a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c61e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c622:	2330      	movs	r3, #48	; 0x30
 800c624:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c7d8 <_vfiprintf_r+0x220>
 800c628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c62c:	f04f 0901 	mov.w	r9, #1
 800c630:	4623      	mov	r3, r4
 800c632:	469a      	mov	sl, r3
 800c634:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c638:	b10a      	cbz	r2, 800c63e <_vfiprintf_r+0x86>
 800c63a:	2a25      	cmp	r2, #37	; 0x25
 800c63c:	d1f9      	bne.n	800c632 <_vfiprintf_r+0x7a>
 800c63e:	ebba 0b04 	subs.w	fp, sl, r4
 800c642:	d00b      	beq.n	800c65c <_vfiprintf_r+0xa4>
 800c644:	465b      	mov	r3, fp
 800c646:	4622      	mov	r2, r4
 800c648:	4629      	mov	r1, r5
 800c64a:	4630      	mov	r0, r6
 800c64c:	f7ff ffa1 	bl	800c592 <__sfputs_r>
 800c650:	3001      	adds	r0, #1
 800c652:	f000 80a9 	beq.w	800c7a8 <_vfiprintf_r+0x1f0>
 800c656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c658:	445a      	add	r2, fp
 800c65a:	9209      	str	r2, [sp, #36]	; 0x24
 800c65c:	f89a 3000 	ldrb.w	r3, [sl]
 800c660:	2b00      	cmp	r3, #0
 800c662:	f000 80a1 	beq.w	800c7a8 <_vfiprintf_r+0x1f0>
 800c666:	2300      	movs	r3, #0
 800c668:	f04f 32ff 	mov.w	r2, #4294967295
 800c66c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c670:	f10a 0a01 	add.w	sl, sl, #1
 800c674:	9304      	str	r3, [sp, #16]
 800c676:	9307      	str	r3, [sp, #28]
 800c678:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c67c:	931a      	str	r3, [sp, #104]	; 0x68
 800c67e:	4654      	mov	r4, sl
 800c680:	2205      	movs	r2, #5
 800c682:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c686:	4854      	ldr	r0, [pc, #336]	; (800c7d8 <_vfiprintf_r+0x220>)
 800c688:	f7f3 fdda 	bl	8000240 <memchr>
 800c68c:	9a04      	ldr	r2, [sp, #16]
 800c68e:	b9d8      	cbnz	r0, 800c6c8 <_vfiprintf_r+0x110>
 800c690:	06d1      	lsls	r1, r2, #27
 800c692:	bf44      	itt	mi
 800c694:	2320      	movmi	r3, #32
 800c696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c69a:	0713      	lsls	r3, r2, #28
 800c69c:	bf44      	itt	mi
 800c69e:	232b      	movmi	r3, #43	; 0x2b
 800c6a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c6aa:	d015      	beq.n	800c6d8 <_vfiprintf_r+0x120>
 800c6ac:	9a07      	ldr	r2, [sp, #28]
 800c6ae:	4654      	mov	r4, sl
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	f04f 0c0a 	mov.w	ip, #10
 800c6b6:	4621      	mov	r1, r4
 800c6b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6bc:	3b30      	subs	r3, #48	; 0x30
 800c6be:	2b09      	cmp	r3, #9
 800c6c0:	d94d      	bls.n	800c75e <_vfiprintf_r+0x1a6>
 800c6c2:	b1b0      	cbz	r0, 800c6f2 <_vfiprintf_r+0x13a>
 800c6c4:	9207      	str	r2, [sp, #28]
 800c6c6:	e014      	b.n	800c6f2 <_vfiprintf_r+0x13a>
 800c6c8:	eba0 0308 	sub.w	r3, r0, r8
 800c6cc:	fa09 f303 	lsl.w	r3, r9, r3
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	9304      	str	r3, [sp, #16]
 800c6d4:	46a2      	mov	sl, r4
 800c6d6:	e7d2      	b.n	800c67e <_vfiprintf_r+0xc6>
 800c6d8:	9b03      	ldr	r3, [sp, #12]
 800c6da:	1d19      	adds	r1, r3, #4
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	9103      	str	r1, [sp, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	bfbb      	ittet	lt
 800c6e4:	425b      	neglt	r3, r3
 800c6e6:	f042 0202 	orrlt.w	r2, r2, #2
 800c6ea:	9307      	strge	r3, [sp, #28]
 800c6ec:	9307      	strlt	r3, [sp, #28]
 800c6ee:	bfb8      	it	lt
 800c6f0:	9204      	strlt	r2, [sp, #16]
 800c6f2:	7823      	ldrb	r3, [r4, #0]
 800c6f4:	2b2e      	cmp	r3, #46	; 0x2e
 800c6f6:	d10c      	bne.n	800c712 <_vfiprintf_r+0x15a>
 800c6f8:	7863      	ldrb	r3, [r4, #1]
 800c6fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c6fc:	d134      	bne.n	800c768 <_vfiprintf_r+0x1b0>
 800c6fe:	9b03      	ldr	r3, [sp, #12]
 800c700:	1d1a      	adds	r2, r3, #4
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	9203      	str	r2, [sp, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	bfb8      	it	lt
 800c70a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c70e:	3402      	adds	r4, #2
 800c710:	9305      	str	r3, [sp, #20]
 800c712:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c7e8 <_vfiprintf_r+0x230>
 800c716:	7821      	ldrb	r1, [r4, #0]
 800c718:	2203      	movs	r2, #3
 800c71a:	4650      	mov	r0, sl
 800c71c:	f7f3 fd90 	bl	8000240 <memchr>
 800c720:	b138      	cbz	r0, 800c732 <_vfiprintf_r+0x17a>
 800c722:	9b04      	ldr	r3, [sp, #16]
 800c724:	eba0 000a 	sub.w	r0, r0, sl
 800c728:	2240      	movs	r2, #64	; 0x40
 800c72a:	4082      	lsls	r2, r0
 800c72c:	4313      	orrs	r3, r2
 800c72e:	3401      	adds	r4, #1
 800c730:	9304      	str	r3, [sp, #16]
 800c732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c736:	4829      	ldr	r0, [pc, #164]	; (800c7dc <_vfiprintf_r+0x224>)
 800c738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c73c:	2206      	movs	r2, #6
 800c73e:	f7f3 fd7f 	bl	8000240 <memchr>
 800c742:	2800      	cmp	r0, #0
 800c744:	d03f      	beq.n	800c7c6 <_vfiprintf_r+0x20e>
 800c746:	4b26      	ldr	r3, [pc, #152]	; (800c7e0 <_vfiprintf_r+0x228>)
 800c748:	bb1b      	cbnz	r3, 800c792 <_vfiprintf_r+0x1da>
 800c74a:	9b03      	ldr	r3, [sp, #12]
 800c74c:	3307      	adds	r3, #7
 800c74e:	f023 0307 	bic.w	r3, r3, #7
 800c752:	3308      	adds	r3, #8
 800c754:	9303      	str	r3, [sp, #12]
 800c756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c758:	443b      	add	r3, r7
 800c75a:	9309      	str	r3, [sp, #36]	; 0x24
 800c75c:	e768      	b.n	800c630 <_vfiprintf_r+0x78>
 800c75e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c762:	460c      	mov	r4, r1
 800c764:	2001      	movs	r0, #1
 800c766:	e7a6      	b.n	800c6b6 <_vfiprintf_r+0xfe>
 800c768:	2300      	movs	r3, #0
 800c76a:	3401      	adds	r4, #1
 800c76c:	9305      	str	r3, [sp, #20]
 800c76e:	4619      	mov	r1, r3
 800c770:	f04f 0c0a 	mov.w	ip, #10
 800c774:	4620      	mov	r0, r4
 800c776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c77a:	3a30      	subs	r2, #48	; 0x30
 800c77c:	2a09      	cmp	r2, #9
 800c77e:	d903      	bls.n	800c788 <_vfiprintf_r+0x1d0>
 800c780:	2b00      	cmp	r3, #0
 800c782:	d0c6      	beq.n	800c712 <_vfiprintf_r+0x15a>
 800c784:	9105      	str	r1, [sp, #20]
 800c786:	e7c4      	b.n	800c712 <_vfiprintf_r+0x15a>
 800c788:	fb0c 2101 	mla	r1, ip, r1, r2
 800c78c:	4604      	mov	r4, r0
 800c78e:	2301      	movs	r3, #1
 800c790:	e7f0      	b.n	800c774 <_vfiprintf_r+0x1bc>
 800c792:	ab03      	add	r3, sp, #12
 800c794:	9300      	str	r3, [sp, #0]
 800c796:	462a      	mov	r2, r5
 800c798:	4b12      	ldr	r3, [pc, #72]	; (800c7e4 <_vfiprintf_r+0x22c>)
 800c79a:	a904      	add	r1, sp, #16
 800c79c:	4630      	mov	r0, r6
 800c79e:	f3af 8000 	nop.w
 800c7a2:	4607      	mov	r7, r0
 800c7a4:	1c78      	adds	r0, r7, #1
 800c7a6:	d1d6      	bne.n	800c756 <_vfiprintf_r+0x19e>
 800c7a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7aa:	07d9      	lsls	r1, r3, #31
 800c7ac:	d405      	bmi.n	800c7ba <_vfiprintf_r+0x202>
 800c7ae:	89ab      	ldrh	r3, [r5, #12]
 800c7b0:	059a      	lsls	r2, r3, #22
 800c7b2:	d402      	bmi.n	800c7ba <_vfiprintf_r+0x202>
 800c7b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7b6:	f7ff fdce 	bl	800c356 <__retarget_lock_release_recursive>
 800c7ba:	89ab      	ldrh	r3, [r5, #12]
 800c7bc:	065b      	lsls	r3, r3, #25
 800c7be:	f53f af1d 	bmi.w	800c5fc <_vfiprintf_r+0x44>
 800c7c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7c4:	e71c      	b.n	800c600 <_vfiprintf_r+0x48>
 800c7c6:	ab03      	add	r3, sp, #12
 800c7c8:	9300      	str	r3, [sp, #0]
 800c7ca:	462a      	mov	r2, r5
 800c7cc:	4b05      	ldr	r3, [pc, #20]	; (800c7e4 <_vfiprintf_r+0x22c>)
 800c7ce:	a904      	add	r1, sp, #16
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	f000 f879 	bl	800c8c8 <_printf_i>
 800c7d6:	e7e4      	b.n	800c7a2 <_vfiprintf_r+0x1ea>
 800c7d8:	0800e8b0 	.word	0x0800e8b0
 800c7dc:	0800e8ba 	.word	0x0800e8ba
 800c7e0:	00000000 	.word	0x00000000
 800c7e4:	0800c593 	.word	0x0800c593
 800c7e8:	0800e8b6 	.word	0x0800e8b6

0800c7ec <_printf_common>:
 800c7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f0:	4616      	mov	r6, r2
 800c7f2:	4699      	mov	r9, r3
 800c7f4:	688a      	ldr	r2, [r1, #8]
 800c7f6:	690b      	ldr	r3, [r1, #16]
 800c7f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	bfb8      	it	lt
 800c800:	4613      	movlt	r3, r2
 800c802:	6033      	str	r3, [r6, #0]
 800c804:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c808:	4607      	mov	r7, r0
 800c80a:	460c      	mov	r4, r1
 800c80c:	b10a      	cbz	r2, 800c812 <_printf_common+0x26>
 800c80e:	3301      	adds	r3, #1
 800c810:	6033      	str	r3, [r6, #0]
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	0699      	lsls	r1, r3, #26
 800c816:	bf42      	ittt	mi
 800c818:	6833      	ldrmi	r3, [r6, #0]
 800c81a:	3302      	addmi	r3, #2
 800c81c:	6033      	strmi	r3, [r6, #0]
 800c81e:	6825      	ldr	r5, [r4, #0]
 800c820:	f015 0506 	ands.w	r5, r5, #6
 800c824:	d106      	bne.n	800c834 <_printf_common+0x48>
 800c826:	f104 0a19 	add.w	sl, r4, #25
 800c82a:	68e3      	ldr	r3, [r4, #12]
 800c82c:	6832      	ldr	r2, [r6, #0]
 800c82e:	1a9b      	subs	r3, r3, r2
 800c830:	42ab      	cmp	r3, r5
 800c832:	dc26      	bgt.n	800c882 <_printf_common+0x96>
 800c834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c838:	1e13      	subs	r3, r2, #0
 800c83a:	6822      	ldr	r2, [r4, #0]
 800c83c:	bf18      	it	ne
 800c83e:	2301      	movne	r3, #1
 800c840:	0692      	lsls	r2, r2, #26
 800c842:	d42b      	bmi.n	800c89c <_printf_common+0xb0>
 800c844:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c848:	4649      	mov	r1, r9
 800c84a:	4638      	mov	r0, r7
 800c84c:	47c0      	blx	r8
 800c84e:	3001      	adds	r0, #1
 800c850:	d01e      	beq.n	800c890 <_printf_common+0xa4>
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	6922      	ldr	r2, [r4, #16]
 800c856:	f003 0306 	and.w	r3, r3, #6
 800c85a:	2b04      	cmp	r3, #4
 800c85c:	bf02      	ittt	eq
 800c85e:	68e5      	ldreq	r5, [r4, #12]
 800c860:	6833      	ldreq	r3, [r6, #0]
 800c862:	1aed      	subeq	r5, r5, r3
 800c864:	68a3      	ldr	r3, [r4, #8]
 800c866:	bf0c      	ite	eq
 800c868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c86c:	2500      	movne	r5, #0
 800c86e:	4293      	cmp	r3, r2
 800c870:	bfc4      	itt	gt
 800c872:	1a9b      	subgt	r3, r3, r2
 800c874:	18ed      	addgt	r5, r5, r3
 800c876:	2600      	movs	r6, #0
 800c878:	341a      	adds	r4, #26
 800c87a:	42b5      	cmp	r5, r6
 800c87c:	d11a      	bne.n	800c8b4 <_printf_common+0xc8>
 800c87e:	2000      	movs	r0, #0
 800c880:	e008      	b.n	800c894 <_printf_common+0xa8>
 800c882:	2301      	movs	r3, #1
 800c884:	4652      	mov	r2, sl
 800c886:	4649      	mov	r1, r9
 800c888:	4638      	mov	r0, r7
 800c88a:	47c0      	blx	r8
 800c88c:	3001      	adds	r0, #1
 800c88e:	d103      	bne.n	800c898 <_printf_common+0xac>
 800c890:	f04f 30ff 	mov.w	r0, #4294967295
 800c894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c898:	3501      	adds	r5, #1
 800c89a:	e7c6      	b.n	800c82a <_printf_common+0x3e>
 800c89c:	18e1      	adds	r1, r4, r3
 800c89e:	1c5a      	adds	r2, r3, #1
 800c8a0:	2030      	movs	r0, #48	; 0x30
 800c8a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8a6:	4422      	add	r2, r4
 800c8a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8b0:	3302      	adds	r3, #2
 800c8b2:	e7c7      	b.n	800c844 <_printf_common+0x58>
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	4622      	mov	r2, r4
 800c8b8:	4649      	mov	r1, r9
 800c8ba:	4638      	mov	r0, r7
 800c8bc:	47c0      	blx	r8
 800c8be:	3001      	adds	r0, #1
 800c8c0:	d0e6      	beq.n	800c890 <_printf_common+0xa4>
 800c8c2:	3601      	adds	r6, #1
 800c8c4:	e7d9      	b.n	800c87a <_printf_common+0x8e>
	...

0800c8c8 <_printf_i>:
 800c8c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8cc:	7e0f      	ldrb	r7, [r1, #24]
 800c8ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c8d0:	2f78      	cmp	r7, #120	; 0x78
 800c8d2:	4691      	mov	r9, r2
 800c8d4:	4680      	mov	r8, r0
 800c8d6:	460c      	mov	r4, r1
 800c8d8:	469a      	mov	sl, r3
 800c8da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c8de:	d807      	bhi.n	800c8f0 <_printf_i+0x28>
 800c8e0:	2f62      	cmp	r7, #98	; 0x62
 800c8e2:	d80a      	bhi.n	800c8fa <_printf_i+0x32>
 800c8e4:	2f00      	cmp	r7, #0
 800c8e6:	f000 80d4 	beq.w	800ca92 <_printf_i+0x1ca>
 800c8ea:	2f58      	cmp	r7, #88	; 0x58
 800c8ec:	f000 80c0 	beq.w	800ca70 <_printf_i+0x1a8>
 800c8f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8f8:	e03a      	b.n	800c970 <_printf_i+0xa8>
 800c8fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8fe:	2b15      	cmp	r3, #21
 800c900:	d8f6      	bhi.n	800c8f0 <_printf_i+0x28>
 800c902:	a101      	add	r1, pc, #4	; (adr r1, 800c908 <_printf_i+0x40>)
 800c904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c908:	0800c961 	.word	0x0800c961
 800c90c:	0800c975 	.word	0x0800c975
 800c910:	0800c8f1 	.word	0x0800c8f1
 800c914:	0800c8f1 	.word	0x0800c8f1
 800c918:	0800c8f1 	.word	0x0800c8f1
 800c91c:	0800c8f1 	.word	0x0800c8f1
 800c920:	0800c975 	.word	0x0800c975
 800c924:	0800c8f1 	.word	0x0800c8f1
 800c928:	0800c8f1 	.word	0x0800c8f1
 800c92c:	0800c8f1 	.word	0x0800c8f1
 800c930:	0800c8f1 	.word	0x0800c8f1
 800c934:	0800ca79 	.word	0x0800ca79
 800c938:	0800c9a1 	.word	0x0800c9a1
 800c93c:	0800ca33 	.word	0x0800ca33
 800c940:	0800c8f1 	.word	0x0800c8f1
 800c944:	0800c8f1 	.word	0x0800c8f1
 800c948:	0800ca9b 	.word	0x0800ca9b
 800c94c:	0800c8f1 	.word	0x0800c8f1
 800c950:	0800c9a1 	.word	0x0800c9a1
 800c954:	0800c8f1 	.word	0x0800c8f1
 800c958:	0800c8f1 	.word	0x0800c8f1
 800c95c:	0800ca3b 	.word	0x0800ca3b
 800c960:	682b      	ldr	r3, [r5, #0]
 800c962:	1d1a      	adds	r2, r3, #4
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	602a      	str	r2, [r5, #0]
 800c968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c96c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c970:	2301      	movs	r3, #1
 800c972:	e09f      	b.n	800cab4 <_printf_i+0x1ec>
 800c974:	6820      	ldr	r0, [r4, #0]
 800c976:	682b      	ldr	r3, [r5, #0]
 800c978:	0607      	lsls	r7, r0, #24
 800c97a:	f103 0104 	add.w	r1, r3, #4
 800c97e:	6029      	str	r1, [r5, #0]
 800c980:	d501      	bpl.n	800c986 <_printf_i+0xbe>
 800c982:	681e      	ldr	r6, [r3, #0]
 800c984:	e003      	b.n	800c98e <_printf_i+0xc6>
 800c986:	0646      	lsls	r6, r0, #25
 800c988:	d5fb      	bpl.n	800c982 <_printf_i+0xba>
 800c98a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c98e:	2e00      	cmp	r6, #0
 800c990:	da03      	bge.n	800c99a <_printf_i+0xd2>
 800c992:	232d      	movs	r3, #45	; 0x2d
 800c994:	4276      	negs	r6, r6
 800c996:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c99a:	485a      	ldr	r0, [pc, #360]	; (800cb04 <_printf_i+0x23c>)
 800c99c:	230a      	movs	r3, #10
 800c99e:	e012      	b.n	800c9c6 <_printf_i+0xfe>
 800c9a0:	682b      	ldr	r3, [r5, #0]
 800c9a2:	6820      	ldr	r0, [r4, #0]
 800c9a4:	1d19      	adds	r1, r3, #4
 800c9a6:	6029      	str	r1, [r5, #0]
 800c9a8:	0605      	lsls	r5, r0, #24
 800c9aa:	d501      	bpl.n	800c9b0 <_printf_i+0xe8>
 800c9ac:	681e      	ldr	r6, [r3, #0]
 800c9ae:	e002      	b.n	800c9b6 <_printf_i+0xee>
 800c9b0:	0641      	lsls	r1, r0, #25
 800c9b2:	d5fb      	bpl.n	800c9ac <_printf_i+0xe4>
 800c9b4:	881e      	ldrh	r6, [r3, #0]
 800c9b6:	4853      	ldr	r0, [pc, #332]	; (800cb04 <_printf_i+0x23c>)
 800c9b8:	2f6f      	cmp	r7, #111	; 0x6f
 800c9ba:	bf0c      	ite	eq
 800c9bc:	2308      	moveq	r3, #8
 800c9be:	230a      	movne	r3, #10
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9c6:	6865      	ldr	r5, [r4, #4]
 800c9c8:	60a5      	str	r5, [r4, #8]
 800c9ca:	2d00      	cmp	r5, #0
 800c9cc:	bfa2      	ittt	ge
 800c9ce:	6821      	ldrge	r1, [r4, #0]
 800c9d0:	f021 0104 	bicge.w	r1, r1, #4
 800c9d4:	6021      	strge	r1, [r4, #0]
 800c9d6:	b90e      	cbnz	r6, 800c9dc <_printf_i+0x114>
 800c9d8:	2d00      	cmp	r5, #0
 800c9da:	d04b      	beq.n	800ca74 <_printf_i+0x1ac>
 800c9dc:	4615      	mov	r5, r2
 800c9de:	fbb6 f1f3 	udiv	r1, r6, r3
 800c9e2:	fb03 6711 	mls	r7, r3, r1, r6
 800c9e6:	5dc7      	ldrb	r7, [r0, r7]
 800c9e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c9ec:	4637      	mov	r7, r6
 800c9ee:	42bb      	cmp	r3, r7
 800c9f0:	460e      	mov	r6, r1
 800c9f2:	d9f4      	bls.n	800c9de <_printf_i+0x116>
 800c9f4:	2b08      	cmp	r3, #8
 800c9f6:	d10b      	bne.n	800ca10 <_printf_i+0x148>
 800c9f8:	6823      	ldr	r3, [r4, #0]
 800c9fa:	07de      	lsls	r6, r3, #31
 800c9fc:	d508      	bpl.n	800ca10 <_printf_i+0x148>
 800c9fe:	6923      	ldr	r3, [r4, #16]
 800ca00:	6861      	ldr	r1, [r4, #4]
 800ca02:	4299      	cmp	r1, r3
 800ca04:	bfde      	ittt	le
 800ca06:	2330      	movle	r3, #48	; 0x30
 800ca08:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca10:	1b52      	subs	r2, r2, r5
 800ca12:	6122      	str	r2, [r4, #16]
 800ca14:	f8cd a000 	str.w	sl, [sp]
 800ca18:	464b      	mov	r3, r9
 800ca1a:	aa03      	add	r2, sp, #12
 800ca1c:	4621      	mov	r1, r4
 800ca1e:	4640      	mov	r0, r8
 800ca20:	f7ff fee4 	bl	800c7ec <_printf_common>
 800ca24:	3001      	adds	r0, #1
 800ca26:	d14a      	bne.n	800cabe <_printf_i+0x1f6>
 800ca28:	f04f 30ff 	mov.w	r0, #4294967295
 800ca2c:	b004      	add	sp, #16
 800ca2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca32:	6823      	ldr	r3, [r4, #0]
 800ca34:	f043 0320 	orr.w	r3, r3, #32
 800ca38:	6023      	str	r3, [r4, #0]
 800ca3a:	4833      	ldr	r0, [pc, #204]	; (800cb08 <_printf_i+0x240>)
 800ca3c:	2778      	movs	r7, #120	; 0x78
 800ca3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca42:	6823      	ldr	r3, [r4, #0]
 800ca44:	6829      	ldr	r1, [r5, #0]
 800ca46:	061f      	lsls	r7, r3, #24
 800ca48:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca4c:	d402      	bmi.n	800ca54 <_printf_i+0x18c>
 800ca4e:	065f      	lsls	r7, r3, #25
 800ca50:	bf48      	it	mi
 800ca52:	b2b6      	uxthmi	r6, r6
 800ca54:	07df      	lsls	r7, r3, #31
 800ca56:	bf48      	it	mi
 800ca58:	f043 0320 	orrmi.w	r3, r3, #32
 800ca5c:	6029      	str	r1, [r5, #0]
 800ca5e:	bf48      	it	mi
 800ca60:	6023      	strmi	r3, [r4, #0]
 800ca62:	b91e      	cbnz	r6, 800ca6c <_printf_i+0x1a4>
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	f023 0320 	bic.w	r3, r3, #32
 800ca6a:	6023      	str	r3, [r4, #0]
 800ca6c:	2310      	movs	r3, #16
 800ca6e:	e7a7      	b.n	800c9c0 <_printf_i+0xf8>
 800ca70:	4824      	ldr	r0, [pc, #144]	; (800cb04 <_printf_i+0x23c>)
 800ca72:	e7e4      	b.n	800ca3e <_printf_i+0x176>
 800ca74:	4615      	mov	r5, r2
 800ca76:	e7bd      	b.n	800c9f4 <_printf_i+0x12c>
 800ca78:	682b      	ldr	r3, [r5, #0]
 800ca7a:	6826      	ldr	r6, [r4, #0]
 800ca7c:	6961      	ldr	r1, [r4, #20]
 800ca7e:	1d18      	adds	r0, r3, #4
 800ca80:	6028      	str	r0, [r5, #0]
 800ca82:	0635      	lsls	r5, r6, #24
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	d501      	bpl.n	800ca8c <_printf_i+0x1c4>
 800ca88:	6019      	str	r1, [r3, #0]
 800ca8a:	e002      	b.n	800ca92 <_printf_i+0x1ca>
 800ca8c:	0670      	lsls	r0, r6, #25
 800ca8e:	d5fb      	bpl.n	800ca88 <_printf_i+0x1c0>
 800ca90:	8019      	strh	r1, [r3, #0]
 800ca92:	2300      	movs	r3, #0
 800ca94:	6123      	str	r3, [r4, #16]
 800ca96:	4615      	mov	r5, r2
 800ca98:	e7bc      	b.n	800ca14 <_printf_i+0x14c>
 800ca9a:	682b      	ldr	r3, [r5, #0]
 800ca9c:	1d1a      	adds	r2, r3, #4
 800ca9e:	602a      	str	r2, [r5, #0]
 800caa0:	681d      	ldr	r5, [r3, #0]
 800caa2:	6862      	ldr	r2, [r4, #4]
 800caa4:	2100      	movs	r1, #0
 800caa6:	4628      	mov	r0, r5
 800caa8:	f7f3 fbca 	bl	8000240 <memchr>
 800caac:	b108      	cbz	r0, 800cab2 <_printf_i+0x1ea>
 800caae:	1b40      	subs	r0, r0, r5
 800cab0:	6060      	str	r0, [r4, #4]
 800cab2:	6863      	ldr	r3, [r4, #4]
 800cab4:	6123      	str	r3, [r4, #16]
 800cab6:	2300      	movs	r3, #0
 800cab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cabc:	e7aa      	b.n	800ca14 <_printf_i+0x14c>
 800cabe:	6923      	ldr	r3, [r4, #16]
 800cac0:	462a      	mov	r2, r5
 800cac2:	4649      	mov	r1, r9
 800cac4:	4640      	mov	r0, r8
 800cac6:	47d0      	blx	sl
 800cac8:	3001      	adds	r0, #1
 800caca:	d0ad      	beq.n	800ca28 <_printf_i+0x160>
 800cacc:	6823      	ldr	r3, [r4, #0]
 800cace:	079b      	lsls	r3, r3, #30
 800cad0:	d413      	bmi.n	800cafa <_printf_i+0x232>
 800cad2:	68e0      	ldr	r0, [r4, #12]
 800cad4:	9b03      	ldr	r3, [sp, #12]
 800cad6:	4298      	cmp	r0, r3
 800cad8:	bfb8      	it	lt
 800cada:	4618      	movlt	r0, r3
 800cadc:	e7a6      	b.n	800ca2c <_printf_i+0x164>
 800cade:	2301      	movs	r3, #1
 800cae0:	4632      	mov	r2, r6
 800cae2:	4649      	mov	r1, r9
 800cae4:	4640      	mov	r0, r8
 800cae6:	47d0      	blx	sl
 800cae8:	3001      	adds	r0, #1
 800caea:	d09d      	beq.n	800ca28 <_printf_i+0x160>
 800caec:	3501      	adds	r5, #1
 800caee:	68e3      	ldr	r3, [r4, #12]
 800caf0:	9903      	ldr	r1, [sp, #12]
 800caf2:	1a5b      	subs	r3, r3, r1
 800caf4:	42ab      	cmp	r3, r5
 800caf6:	dcf2      	bgt.n	800cade <_printf_i+0x216>
 800caf8:	e7eb      	b.n	800cad2 <_printf_i+0x20a>
 800cafa:	2500      	movs	r5, #0
 800cafc:	f104 0619 	add.w	r6, r4, #25
 800cb00:	e7f5      	b.n	800caee <_printf_i+0x226>
 800cb02:	bf00      	nop
 800cb04:	0800e8c1 	.word	0x0800e8c1
 800cb08:	0800e8d2 	.word	0x0800e8d2

0800cb0c <__sflush_r>:
 800cb0c:	898a      	ldrh	r2, [r1, #12]
 800cb0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb12:	4605      	mov	r5, r0
 800cb14:	0710      	lsls	r0, r2, #28
 800cb16:	460c      	mov	r4, r1
 800cb18:	d458      	bmi.n	800cbcc <__sflush_r+0xc0>
 800cb1a:	684b      	ldr	r3, [r1, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	dc05      	bgt.n	800cb2c <__sflush_r+0x20>
 800cb20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	dc02      	bgt.n	800cb2c <__sflush_r+0x20>
 800cb26:	2000      	movs	r0, #0
 800cb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb2e:	2e00      	cmp	r6, #0
 800cb30:	d0f9      	beq.n	800cb26 <__sflush_r+0x1a>
 800cb32:	2300      	movs	r3, #0
 800cb34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb38:	682f      	ldr	r7, [r5, #0]
 800cb3a:	6a21      	ldr	r1, [r4, #32]
 800cb3c:	602b      	str	r3, [r5, #0]
 800cb3e:	d032      	beq.n	800cba6 <__sflush_r+0x9a>
 800cb40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb42:	89a3      	ldrh	r3, [r4, #12]
 800cb44:	075a      	lsls	r2, r3, #29
 800cb46:	d505      	bpl.n	800cb54 <__sflush_r+0x48>
 800cb48:	6863      	ldr	r3, [r4, #4]
 800cb4a:	1ac0      	subs	r0, r0, r3
 800cb4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb4e:	b10b      	cbz	r3, 800cb54 <__sflush_r+0x48>
 800cb50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb52:	1ac0      	subs	r0, r0, r3
 800cb54:	2300      	movs	r3, #0
 800cb56:	4602      	mov	r2, r0
 800cb58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb5a:	6a21      	ldr	r1, [r4, #32]
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	47b0      	blx	r6
 800cb60:	1c43      	adds	r3, r0, #1
 800cb62:	89a3      	ldrh	r3, [r4, #12]
 800cb64:	d106      	bne.n	800cb74 <__sflush_r+0x68>
 800cb66:	6829      	ldr	r1, [r5, #0]
 800cb68:	291d      	cmp	r1, #29
 800cb6a:	d82b      	bhi.n	800cbc4 <__sflush_r+0xb8>
 800cb6c:	4a29      	ldr	r2, [pc, #164]	; (800cc14 <__sflush_r+0x108>)
 800cb6e:	410a      	asrs	r2, r1
 800cb70:	07d6      	lsls	r6, r2, #31
 800cb72:	d427      	bmi.n	800cbc4 <__sflush_r+0xb8>
 800cb74:	2200      	movs	r2, #0
 800cb76:	6062      	str	r2, [r4, #4]
 800cb78:	04d9      	lsls	r1, r3, #19
 800cb7a:	6922      	ldr	r2, [r4, #16]
 800cb7c:	6022      	str	r2, [r4, #0]
 800cb7e:	d504      	bpl.n	800cb8a <__sflush_r+0x7e>
 800cb80:	1c42      	adds	r2, r0, #1
 800cb82:	d101      	bne.n	800cb88 <__sflush_r+0x7c>
 800cb84:	682b      	ldr	r3, [r5, #0]
 800cb86:	b903      	cbnz	r3, 800cb8a <__sflush_r+0x7e>
 800cb88:	6560      	str	r0, [r4, #84]	; 0x54
 800cb8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb8c:	602f      	str	r7, [r5, #0]
 800cb8e:	2900      	cmp	r1, #0
 800cb90:	d0c9      	beq.n	800cb26 <__sflush_r+0x1a>
 800cb92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb96:	4299      	cmp	r1, r3
 800cb98:	d002      	beq.n	800cba0 <__sflush_r+0x94>
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	f7ff fbea 	bl	800c374 <_free_r>
 800cba0:	2000      	movs	r0, #0
 800cba2:	6360      	str	r0, [r4, #52]	; 0x34
 800cba4:	e7c0      	b.n	800cb28 <__sflush_r+0x1c>
 800cba6:	2301      	movs	r3, #1
 800cba8:	4628      	mov	r0, r5
 800cbaa:	47b0      	blx	r6
 800cbac:	1c41      	adds	r1, r0, #1
 800cbae:	d1c8      	bne.n	800cb42 <__sflush_r+0x36>
 800cbb0:	682b      	ldr	r3, [r5, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d0c5      	beq.n	800cb42 <__sflush_r+0x36>
 800cbb6:	2b1d      	cmp	r3, #29
 800cbb8:	d001      	beq.n	800cbbe <__sflush_r+0xb2>
 800cbba:	2b16      	cmp	r3, #22
 800cbbc:	d101      	bne.n	800cbc2 <__sflush_r+0xb6>
 800cbbe:	602f      	str	r7, [r5, #0]
 800cbc0:	e7b1      	b.n	800cb26 <__sflush_r+0x1a>
 800cbc2:	89a3      	ldrh	r3, [r4, #12]
 800cbc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbc8:	81a3      	strh	r3, [r4, #12]
 800cbca:	e7ad      	b.n	800cb28 <__sflush_r+0x1c>
 800cbcc:	690f      	ldr	r7, [r1, #16]
 800cbce:	2f00      	cmp	r7, #0
 800cbd0:	d0a9      	beq.n	800cb26 <__sflush_r+0x1a>
 800cbd2:	0793      	lsls	r3, r2, #30
 800cbd4:	680e      	ldr	r6, [r1, #0]
 800cbd6:	bf08      	it	eq
 800cbd8:	694b      	ldreq	r3, [r1, #20]
 800cbda:	600f      	str	r7, [r1, #0]
 800cbdc:	bf18      	it	ne
 800cbde:	2300      	movne	r3, #0
 800cbe0:	eba6 0807 	sub.w	r8, r6, r7
 800cbe4:	608b      	str	r3, [r1, #8]
 800cbe6:	f1b8 0f00 	cmp.w	r8, #0
 800cbea:	dd9c      	ble.n	800cb26 <__sflush_r+0x1a>
 800cbec:	6a21      	ldr	r1, [r4, #32]
 800cbee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbf0:	4643      	mov	r3, r8
 800cbf2:	463a      	mov	r2, r7
 800cbf4:	4628      	mov	r0, r5
 800cbf6:	47b0      	blx	r6
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	dc06      	bgt.n	800cc0a <__sflush_r+0xfe>
 800cbfc:	89a3      	ldrh	r3, [r4, #12]
 800cbfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc02:	81a3      	strh	r3, [r4, #12]
 800cc04:	f04f 30ff 	mov.w	r0, #4294967295
 800cc08:	e78e      	b.n	800cb28 <__sflush_r+0x1c>
 800cc0a:	4407      	add	r7, r0
 800cc0c:	eba8 0800 	sub.w	r8, r8, r0
 800cc10:	e7e9      	b.n	800cbe6 <__sflush_r+0xda>
 800cc12:	bf00      	nop
 800cc14:	dfbffffe 	.word	0xdfbffffe

0800cc18 <_fflush_r>:
 800cc18:	b538      	push	{r3, r4, r5, lr}
 800cc1a:	690b      	ldr	r3, [r1, #16]
 800cc1c:	4605      	mov	r5, r0
 800cc1e:	460c      	mov	r4, r1
 800cc20:	b913      	cbnz	r3, 800cc28 <_fflush_r+0x10>
 800cc22:	2500      	movs	r5, #0
 800cc24:	4628      	mov	r0, r5
 800cc26:	bd38      	pop	{r3, r4, r5, pc}
 800cc28:	b118      	cbz	r0, 800cc32 <_fflush_r+0x1a>
 800cc2a:	6a03      	ldr	r3, [r0, #32]
 800cc2c:	b90b      	cbnz	r3, 800cc32 <_fflush_r+0x1a>
 800cc2e:	f7ff fa37 	bl	800c0a0 <__sinit>
 800cc32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d0f3      	beq.n	800cc22 <_fflush_r+0xa>
 800cc3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc3c:	07d0      	lsls	r0, r2, #31
 800cc3e:	d404      	bmi.n	800cc4a <_fflush_r+0x32>
 800cc40:	0599      	lsls	r1, r3, #22
 800cc42:	d402      	bmi.n	800cc4a <_fflush_r+0x32>
 800cc44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc46:	f7ff fb85 	bl	800c354 <__retarget_lock_acquire_recursive>
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	4621      	mov	r1, r4
 800cc4e:	f7ff ff5d 	bl	800cb0c <__sflush_r>
 800cc52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc54:	07da      	lsls	r2, r3, #31
 800cc56:	4605      	mov	r5, r0
 800cc58:	d4e4      	bmi.n	800cc24 <_fflush_r+0xc>
 800cc5a:	89a3      	ldrh	r3, [r4, #12]
 800cc5c:	059b      	lsls	r3, r3, #22
 800cc5e:	d4e1      	bmi.n	800cc24 <_fflush_r+0xc>
 800cc60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc62:	f7ff fb78 	bl	800c356 <__retarget_lock_release_recursive>
 800cc66:	e7dd      	b.n	800cc24 <_fflush_r+0xc>

0800cc68 <__swbuf_r>:
 800cc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc6a:	460e      	mov	r6, r1
 800cc6c:	4614      	mov	r4, r2
 800cc6e:	4605      	mov	r5, r0
 800cc70:	b118      	cbz	r0, 800cc7a <__swbuf_r+0x12>
 800cc72:	6a03      	ldr	r3, [r0, #32]
 800cc74:	b90b      	cbnz	r3, 800cc7a <__swbuf_r+0x12>
 800cc76:	f7ff fa13 	bl	800c0a0 <__sinit>
 800cc7a:	69a3      	ldr	r3, [r4, #24]
 800cc7c:	60a3      	str	r3, [r4, #8]
 800cc7e:	89a3      	ldrh	r3, [r4, #12]
 800cc80:	071a      	lsls	r2, r3, #28
 800cc82:	d525      	bpl.n	800ccd0 <__swbuf_r+0x68>
 800cc84:	6923      	ldr	r3, [r4, #16]
 800cc86:	b31b      	cbz	r3, 800ccd0 <__swbuf_r+0x68>
 800cc88:	6823      	ldr	r3, [r4, #0]
 800cc8a:	6922      	ldr	r2, [r4, #16]
 800cc8c:	1a98      	subs	r0, r3, r2
 800cc8e:	6963      	ldr	r3, [r4, #20]
 800cc90:	b2f6      	uxtb	r6, r6
 800cc92:	4283      	cmp	r3, r0
 800cc94:	4637      	mov	r7, r6
 800cc96:	dc04      	bgt.n	800cca2 <__swbuf_r+0x3a>
 800cc98:	4621      	mov	r1, r4
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	f7ff ffbc 	bl	800cc18 <_fflush_r>
 800cca0:	b9e0      	cbnz	r0, 800ccdc <__swbuf_r+0x74>
 800cca2:	68a3      	ldr	r3, [r4, #8]
 800cca4:	3b01      	subs	r3, #1
 800cca6:	60a3      	str	r3, [r4, #8]
 800cca8:	6823      	ldr	r3, [r4, #0]
 800ccaa:	1c5a      	adds	r2, r3, #1
 800ccac:	6022      	str	r2, [r4, #0]
 800ccae:	701e      	strb	r6, [r3, #0]
 800ccb0:	6962      	ldr	r2, [r4, #20]
 800ccb2:	1c43      	adds	r3, r0, #1
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d004      	beq.n	800ccc2 <__swbuf_r+0x5a>
 800ccb8:	89a3      	ldrh	r3, [r4, #12]
 800ccba:	07db      	lsls	r3, r3, #31
 800ccbc:	d506      	bpl.n	800cccc <__swbuf_r+0x64>
 800ccbe:	2e0a      	cmp	r6, #10
 800ccc0:	d104      	bne.n	800cccc <__swbuf_r+0x64>
 800ccc2:	4621      	mov	r1, r4
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	f7ff ffa7 	bl	800cc18 <_fflush_r>
 800ccca:	b938      	cbnz	r0, 800ccdc <__swbuf_r+0x74>
 800cccc:	4638      	mov	r0, r7
 800ccce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccd0:	4621      	mov	r1, r4
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	f000 f806 	bl	800cce4 <__swsetup_r>
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	d0d5      	beq.n	800cc88 <__swbuf_r+0x20>
 800ccdc:	f04f 37ff 	mov.w	r7, #4294967295
 800cce0:	e7f4      	b.n	800cccc <__swbuf_r+0x64>
	...

0800cce4 <__swsetup_r>:
 800cce4:	b538      	push	{r3, r4, r5, lr}
 800cce6:	4b2a      	ldr	r3, [pc, #168]	; (800cd90 <__swsetup_r+0xac>)
 800cce8:	4605      	mov	r5, r0
 800ccea:	6818      	ldr	r0, [r3, #0]
 800ccec:	460c      	mov	r4, r1
 800ccee:	b118      	cbz	r0, 800ccf8 <__swsetup_r+0x14>
 800ccf0:	6a03      	ldr	r3, [r0, #32]
 800ccf2:	b90b      	cbnz	r3, 800ccf8 <__swsetup_r+0x14>
 800ccf4:	f7ff f9d4 	bl	800c0a0 <__sinit>
 800ccf8:	89a3      	ldrh	r3, [r4, #12]
 800ccfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccfe:	0718      	lsls	r0, r3, #28
 800cd00:	d422      	bmi.n	800cd48 <__swsetup_r+0x64>
 800cd02:	06d9      	lsls	r1, r3, #27
 800cd04:	d407      	bmi.n	800cd16 <__swsetup_r+0x32>
 800cd06:	2309      	movs	r3, #9
 800cd08:	602b      	str	r3, [r5, #0]
 800cd0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd0e:	81a3      	strh	r3, [r4, #12]
 800cd10:	f04f 30ff 	mov.w	r0, #4294967295
 800cd14:	e034      	b.n	800cd80 <__swsetup_r+0x9c>
 800cd16:	0758      	lsls	r0, r3, #29
 800cd18:	d512      	bpl.n	800cd40 <__swsetup_r+0x5c>
 800cd1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd1c:	b141      	cbz	r1, 800cd30 <__swsetup_r+0x4c>
 800cd1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd22:	4299      	cmp	r1, r3
 800cd24:	d002      	beq.n	800cd2c <__swsetup_r+0x48>
 800cd26:	4628      	mov	r0, r5
 800cd28:	f7ff fb24 	bl	800c374 <_free_r>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	6363      	str	r3, [r4, #52]	; 0x34
 800cd30:	89a3      	ldrh	r3, [r4, #12]
 800cd32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd36:	81a3      	strh	r3, [r4, #12]
 800cd38:	2300      	movs	r3, #0
 800cd3a:	6063      	str	r3, [r4, #4]
 800cd3c:	6923      	ldr	r3, [r4, #16]
 800cd3e:	6023      	str	r3, [r4, #0]
 800cd40:	89a3      	ldrh	r3, [r4, #12]
 800cd42:	f043 0308 	orr.w	r3, r3, #8
 800cd46:	81a3      	strh	r3, [r4, #12]
 800cd48:	6923      	ldr	r3, [r4, #16]
 800cd4a:	b94b      	cbnz	r3, 800cd60 <__swsetup_r+0x7c>
 800cd4c:	89a3      	ldrh	r3, [r4, #12]
 800cd4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd56:	d003      	beq.n	800cd60 <__swsetup_r+0x7c>
 800cd58:	4621      	mov	r1, r4
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	f000 f850 	bl	800ce00 <__smakebuf_r>
 800cd60:	89a0      	ldrh	r0, [r4, #12]
 800cd62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd66:	f010 0301 	ands.w	r3, r0, #1
 800cd6a:	d00a      	beq.n	800cd82 <__swsetup_r+0x9e>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	60a3      	str	r3, [r4, #8]
 800cd70:	6963      	ldr	r3, [r4, #20]
 800cd72:	425b      	negs	r3, r3
 800cd74:	61a3      	str	r3, [r4, #24]
 800cd76:	6923      	ldr	r3, [r4, #16]
 800cd78:	b943      	cbnz	r3, 800cd8c <__swsetup_r+0xa8>
 800cd7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd7e:	d1c4      	bne.n	800cd0a <__swsetup_r+0x26>
 800cd80:	bd38      	pop	{r3, r4, r5, pc}
 800cd82:	0781      	lsls	r1, r0, #30
 800cd84:	bf58      	it	pl
 800cd86:	6963      	ldrpl	r3, [r4, #20]
 800cd88:	60a3      	str	r3, [r4, #8]
 800cd8a:	e7f4      	b.n	800cd76 <__swsetup_r+0x92>
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	e7f7      	b.n	800cd80 <__swsetup_r+0x9c>
 800cd90:	200000c0 	.word	0x200000c0

0800cd94 <_sbrk_r>:
 800cd94:	b538      	push	{r3, r4, r5, lr}
 800cd96:	4d06      	ldr	r5, [pc, #24]	; (800cdb0 <_sbrk_r+0x1c>)
 800cd98:	2300      	movs	r3, #0
 800cd9a:	4604      	mov	r4, r0
 800cd9c:	4608      	mov	r0, r1
 800cd9e:	602b      	str	r3, [r5, #0]
 800cda0:	f7f5 fc42 	bl	8002628 <_sbrk>
 800cda4:	1c43      	adds	r3, r0, #1
 800cda6:	d102      	bne.n	800cdae <_sbrk_r+0x1a>
 800cda8:	682b      	ldr	r3, [r5, #0]
 800cdaa:	b103      	cbz	r3, 800cdae <_sbrk_r+0x1a>
 800cdac:	6023      	str	r3, [r4, #0]
 800cdae:	bd38      	pop	{r3, r4, r5, pc}
 800cdb0:	20005310 	.word	0x20005310

0800cdb4 <__swhatbuf_r>:
 800cdb4:	b570      	push	{r4, r5, r6, lr}
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdbc:	2900      	cmp	r1, #0
 800cdbe:	b096      	sub	sp, #88	; 0x58
 800cdc0:	4615      	mov	r5, r2
 800cdc2:	461e      	mov	r6, r3
 800cdc4:	da0d      	bge.n	800cde2 <__swhatbuf_r+0x2e>
 800cdc6:	89a3      	ldrh	r3, [r4, #12]
 800cdc8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cdcc:	f04f 0100 	mov.w	r1, #0
 800cdd0:	bf0c      	ite	eq
 800cdd2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cdd6:	2340      	movne	r3, #64	; 0x40
 800cdd8:	2000      	movs	r0, #0
 800cdda:	6031      	str	r1, [r6, #0]
 800cddc:	602b      	str	r3, [r5, #0]
 800cdde:	b016      	add	sp, #88	; 0x58
 800cde0:	bd70      	pop	{r4, r5, r6, pc}
 800cde2:	466a      	mov	r2, sp
 800cde4:	f000 f848 	bl	800ce78 <_fstat_r>
 800cde8:	2800      	cmp	r0, #0
 800cdea:	dbec      	blt.n	800cdc6 <__swhatbuf_r+0x12>
 800cdec:	9901      	ldr	r1, [sp, #4]
 800cdee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cdf2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cdf6:	4259      	negs	r1, r3
 800cdf8:	4159      	adcs	r1, r3
 800cdfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdfe:	e7eb      	b.n	800cdd8 <__swhatbuf_r+0x24>

0800ce00 <__smakebuf_r>:
 800ce00:	898b      	ldrh	r3, [r1, #12]
 800ce02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce04:	079d      	lsls	r5, r3, #30
 800ce06:	4606      	mov	r6, r0
 800ce08:	460c      	mov	r4, r1
 800ce0a:	d507      	bpl.n	800ce1c <__smakebuf_r+0x1c>
 800ce0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	6123      	str	r3, [r4, #16]
 800ce14:	2301      	movs	r3, #1
 800ce16:	6163      	str	r3, [r4, #20]
 800ce18:	b002      	add	sp, #8
 800ce1a:	bd70      	pop	{r4, r5, r6, pc}
 800ce1c:	ab01      	add	r3, sp, #4
 800ce1e:	466a      	mov	r2, sp
 800ce20:	f7ff ffc8 	bl	800cdb4 <__swhatbuf_r>
 800ce24:	9900      	ldr	r1, [sp, #0]
 800ce26:	4605      	mov	r5, r0
 800ce28:	4630      	mov	r0, r6
 800ce2a:	f7ff fb0f 	bl	800c44c <_malloc_r>
 800ce2e:	b948      	cbnz	r0, 800ce44 <__smakebuf_r+0x44>
 800ce30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce34:	059a      	lsls	r2, r3, #22
 800ce36:	d4ef      	bmi.n	800ce18 <__smakebuf_r+0x18>
 800ce38:	f023 0303 	bic.w	r3, r3, #3
 800ce3c:	f043 0302 	orr.w	r3, r3, #2
 800ce40:	81a3      	strh	r3, [r4, #12]
 800ce42:	e7e3      	b.n	800ce0c <__smakebuf_r+0xc>
 800ce44:	89a3      	ldrh	r3, [r4, #12]
 800ce46:	6020      	str	r0, [r4, #0]
 800ce48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce4c:	81a3      	strh	r3, [r4, #12]
 800ce4e:	9b00      	ldr	r3, [sp, #0]
 800ce50:	6163      	str	r3, [r4, #20]
 800ce52:	9b01      	ldr	r3, [sp, #4]
 800ce54:	6120      	str	r0, [r4, #16]
 800ce56:	b15b      	cbz	r3, 800ce70 <__smakebuf_r+0x70>
 800ce58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	f000 f81d 	bl	800ce9c <_isatty_r>
 800ce62:	b128      	cbz	r0, 800ce70 <__smakebuf_r+0x70>
 800ce64:	89a3      	ldrh	r3, [r4, #12]
 800ce66:	f023 0303 	bic.w	r3, r3, #3
 800ce6a:	f043 0301 	orr.w	r3, r3, #1
 800ce6e:	81a3      	strh	r3, [r4, #12]
 800ce70:	89a3      	ldrh	r3, [r4, #12]
 800ce72:	431d      	orrs	r5, r3
 800ce74:	81a5      	strh	r5, [r4, #12]
 800ce76:	e7cf      	b.n	800ce18 <__smakebuf_r+0x18>

0800ce78 <_fstat_r>:
 800ce78:	b538      	push	{r3, r4, r5, lr}
 800ce7a:	4d07      	ldr	r5, [pc, #28]	; (800ce98 <_fstat_r+0x20>)
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	4604      	mov	r4, r0
 800ce80:	4608      	mov	r0, r1
 800ce82:	4611      	mov	r1, r2
 800ce84:	602b      	str	r3, [r5, #0]
 800ce86:	f7f5 fba6 	bl	80025d6 <_fstat>
 800ce8a:	1c43      	adds	r3, r0, #1
 800ce8c:	d102      	bne.n	800ce94 <_fstat_r+0x1c>
 800ce8e:	682b      	ldr	r3, [r5, #0]
 800ce90:	b103      	cbz	r3, 800ce94 <_fstat_r+0x1c>
 800ce92:	6023      	str	r3, [r4, #0]
 800ce94:	bd38      	pop	{r3, r4, r5, pc}
 800ce96:	bf00      	nop
 800ce98:	20005310 	.word	0x20005310

0800ce9c <_isatty_r>:
 800ce9c:	b538      	push	{r3, r4, r5, lr}
 800ce9e:	4d06      	ldr	r5, [pc, #24]	; (800ceb8 <_isatty_r+0x1c>)
 800cea0:	2300      	movs	r3, #0
 800cea2:	4604      	mov	r4, r0
 800cea4:	4608      	mov	r0, r1
 800cea6:	602b      	str	r3, [r5, #0]
 800cea8:	f7f5 fba5 	bl	80025f6 <_isatty>
 800ceac:	1c43      	adds	r3, r0, #1
 800ceae:	d102      	bne.n	800ceb6 <_isatty_r+0x1a>
 800ceb0:	682b      	ldr	r3, [r5, #0]
 800ceb2:	b103      	cbz	r3, 800ceb6 <_isatty_r+0x1a>
 800ceb4:	6023      	str	r3, [r4, #0]
 800ceb6:	bd38      	pop	{r3, r4, r5, pc}
 800ceb8:	20005310 	.word	0x20005310

0800cebc <_init>:
 800cebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cebe:	bf00      	nop
 800cec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cec2:	bc08      	pop	{r3}
 800cec4:	469e      	mov	lr, r3
 800cec6:	4770      	bx	lr

0800cec8 <_fini>:
 800cec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceca:	bf00      	nop
 800cecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cece:	bc08      	pop	{r3}
 800ced0:	469e      	mov	lr, r3
 800ced2:	4770      	bx	lr
