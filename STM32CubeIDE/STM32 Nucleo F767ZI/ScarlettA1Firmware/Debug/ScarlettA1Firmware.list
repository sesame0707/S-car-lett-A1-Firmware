
ScarlettA1Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c380  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019bc  0800c580  0800c580  0001c580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df3c  0800df3c  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800df3c  0800df3c  0001df3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df44  0800df44  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df44  0800df44  0001df44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df48  0800df48  0001df48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800df4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000524c  200000c4  0800e010  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005310  0800e010  00025310  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f2  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027dae  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a99  00000000  00000000  00047ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ef0  00000000  00000000  0004d980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017bf  00000000  00000000  0004f870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dd95  00000000  00000000  0005102f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002940c  00000000  00000000  0007edc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e84c  00000000  00000000  000a81d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000086a8  00000000  00000000  001b6a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001bf0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000c4 	.word	0x200000c4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c568 	.word	0x0800c568

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000c8 	.word	0x200000c8
 800023c:	0800c568 	.word	0x0800c568

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <setLEDStripesEffect>:
 */

#include "commonFunctions.h"

/* LED stripes */
void setLEDStripesEffect(enum StripesEffect stripesEffect, struct DesiredStripesColor *desiredStripesColor) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	switch (stripesEffect) {
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	2b05      	cmp	r3, #5
 80005ee:	d84b      	bhi.n	8000688 <setLEDStripesEffect+0xac>
 80005f0:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <setLEDStripesEffect+0x1c>)
 80005f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f6:	bf00      	nop
 80005f8:	08000611 	.word	0x08000611
 80005fc:	08000625 	.word	0x08000625
 8000600:	08000639 	.word	0x08000639
 8000604:	0800064d 	.word	0x0800064d
 8000608:	08000661 	.word	0x08000661
 800060c:	08000675 	.word	0x08000675
	case 1:
		desiredStripesColor->red = 0x00;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	2200      	movs	r2, #0
 800061a:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	2200      	movs	r2, #0
 8000620:	709a      	strb	r2, [r3, #2]
		break;
 8000622:	e031      	b.n	8000688 <setLEDStripesEffect+0xac>
	case 2:
		desiredStripesColor->red = 0x40;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	2240      	movs	r2, #64	; 0x40
 8000628:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x20;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2220      	movs	r2, #32
 800062e:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	709a      	strb	r2, [r3, #2]
		break;
 8000636:	e027      	b.n	8000688 <setLEDStripesEffect+0xac>
	case 3:
		desiredStripesColor->red = 0x40;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	2240      	movs	r2, #64	; 0x40
 800063c:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x40;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	2240      	movs	r2, #64	; 0x40
 8000642:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x40;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	2240      	movs	r2, #64	; 0x40
 8000648:	709a      	strb	r2, [r3, #2]
		break;
 800064a:	e01d      	b.n	8000688 <setLEDStripesEffect+0xac>
	case 4:
		desiredStripesColor->red = 0x00;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	2200      	movs	r2, #0
 8000656:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x40;
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	2240      	movs	r2, #64	; 0x40
 800065c:	709a      	strb	r2, [r3, #2]
		break;
 800065e:	e013      	b.n	8000688 <setLEDStripesEffect+0xac>
	case 5:
		desiredStripesColor->red = 0x00;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x40;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	2240      	movs	r2, #64	; 0x40
 800066a:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	2200      	movs	r2, #0
 8000670:	709a      	strb	r2, [r3, #2]
		break;
 8000672:	e009      	b.n	8000688 <setLEDStripesEffect+0xac>
	case 6:
		desiredStripesColor->red = 0x40;
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	2240      	movs	r2, #64	; 0x40
 8000678:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	2200      	movs	r2, #0
 800067e:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	2200      	movs	r2, #0
 8000684:	709a      	strb	r2, [r3, #2]
		break;
 8000686:	bf00      	nop
	}
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	0000      	movs	r0, r0
	...

08000698 <setBLDCMotorSpeed>:

/* BLDC motor */
void setBLDCMotorSpeed(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	switch(sliderAccelerateDecelerateCurrentValue) {
 800069c:	4b3a      	ldr	r3, [pc, #232]	; (8000788 <setBLDCMotorSpeed+0xf0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3302      	adds	r3, #2
 80006a2:	2b06      	cmp	r3, #6
 80006a4:	d84d      	bhi.n	8000742 <setBLDCMotorSpeed+0xaa>
 80006a6:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <setBLDCMotorSpeed+0x14>)
 80006a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ac:	080006c9 	.word	0x080006c9
 80006b0:	080006dd 	.word	0x080006dd
 80006b4:	080006ef 	.word	0x080006ef
 80006b8:	080006f9 	.word	0x080006f9
 80006bc:	0800070b 	.word	0x0800070b
 80006c0:	0800071f 	.word	0x0800071f
 80006c4:	08000731 	.word	0x08000731
	case -2:
	  BLDCMotorSpeedVoltage = 0.5;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <setBLDCMotorSpeed+0xf4>)
 80006ca:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80006ce:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2110      	movs	r1, #16
 80006d4:	482e      	ldr	r0, [pc, #184]	; (8000790 <setBLDCMotorSpeed+0xf8>)
 80006d6:	f003 f9e1 	bl	8003a9c <HAL_GPIO_WritePin>
	  break;
 80006da:	e032      	b.n	8000742 <setBLDCMotorSpeed+0xaa>
	case -1:
	  BLDCMotorSpeedVoltage = 0.4;
 80006dc:	4b2b      	ldr	r3, [pc, #172]	; (800078c <setBLDCMotorSpeed+0xf4>)
 80006de:	4a2d      	ldr	r2, [pc, #180]	; (8000794 <setBLDCMotorSpeed+0xfc>)
 80006e0:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2110      	movs	r1, #16
 80006e6:	482a      	ldr	r0, [pc, #168]	; (8000790 <setBLDCMotorSpeed+0xf8>)
 80006e8:	f003 f9d8 	bl	8003a9c <HAL_GPIO_WritePin>
	  break;
 80006ec:	e029      	b.n	8000742 <setBLDCMotorSpeed+0xaa>
	case 0:
	  BLDCMotorSpeedVoltage = 0.0;
 80006ee:	4b27      	ldr	r3, [pc, #156]	; (800078c <setBLDCMotorSpeed+0xf4>)
 80006f0:	f04f 0200 	mov.w	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
	  break;
 80006f6:	e024      	b.n	8000742 <setBLDCMotorSpeed+0xaa>
	case 1:
	  BLDCMotorSpeedVoltage = 0.4;
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <setBLDCMotorSpeed+0xf4>)
 80006fa:	4a26      	ldr	r2, [pc, #152]	; (8000794 <setBLDCMotorSpeed+0xfc>)
 80006fc:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2110      	movs	r1, #16
 8000702:	4823      	ldr	r0, [pc, #140]	; (8000790 <setBLDCMotorSpeed+0xf8>)
 8000704:	f003 f9ca 	bl	8003a9c <HAL_GPIO_WritePin>
	  break;
 8000708:	e01b      	b.n	8000742 <setBLDCMotorSpeed+0xaa>
	case 2:
	  BLDCMotorSpeedVoltage = 0.5;
 800070a:	4b20      	ldr	r3, [pc, #128]	; (800078c <setBLDCMotorSpeed+0xf4>)
 800070c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000710:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2110      	movs	r1, #16
 8000716:	481e      	ldr	r0, [pc, #120]	; (8000790 <setBLDCMotorSpeed+0xf8>)
 8000718:	f003 f9c0 	bl	8003a9c <HAL_GPIO_WritePin>
	  break;
 800071c:	e011      	b.n	8000742 <setBLDCMotorSpeed+0xaa>
	case 3:
	  BLDCMotorSpeedVoltage = 0.6;
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <setBLDCMotorSpeed+0xf4>)
 8000720:	4a1d      	ldr	r2, [pc, #116]	; (8000798 <setBLDCMotorSpeed+0x100>)
 8000722:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2110      	movs	r1, #16
 8000728:	4819      	ldr	r0, [pc, #100]	; (8000790 <setBLDCMotorSpeed+0xf8>)
 800072a:	f003 f9b7 	bl	8003a9c <HAL_GPIO_WritePin>
	  break;
 800072e:	e008      	b.n	8000742 <setBLDCMotorSpeed+0xaa>
	case 4:
	  BLDCMotorSpeedVoltage = 0.7;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <setBLDCMotorSpeed+0xf4>)
 8000732:	4a1a      	ldr	r2, [pc, #104]	; (800079c <setBLDCMotorSpeed+0x104>)
 8000734:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2110      	movs	r1, #16
 800073a:	4815      	ldr	r0, [pc, #84]	; (8000790 <setBLDCMotorSpeed+0xf8>)
 800073c:	f003 f9ae 	bl	8003a9c <HAL_GPIO_WritePin>
	  break;
 8000740:	bf00      	nop
	}

	BLDCMotorSpeedValue = BLDCMotorSpeedVoltage * (0xfff + 1) / 3.3;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <setBLDCMotorSpeed+0xf4>)
 8000744:	edd3 7a00 	vldr	s15, [r3]
 8000748:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80007a0 <setBLDCMotorSpeed+0x108>
 800074c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000750:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000754:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000780 <setBLDCMotorSpeed+0xe8>
 8000758:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800075c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000760:	ee17 2a90 	vmov	r2, s15
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <setBLDCMotorSpeed+0x10c>)
 8000766:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, BLDCMotorSpeedValue);
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <setBLDCMotorSpeed+0x10c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2200      	movs	r2, #0
 800076e:	2100      	movs	r1, #0
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <setBLDCMotorSpeed+0x110>)
 8000772:	f002 fb55 	bl	8002e20 <HAL_DAC_SetValue>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	f3af 8000 	nop.w
 8000780:	66666666 	.word	0x66666666
 8000784:	400a6666 	.word	0x400a6666
 8000788:	200000e8 	.word	0x200000e8
 800078c:	200000f0 	.word	0x200000f0
 8000790:	40020400 	.word	0x40020400
 8000794:	3ecccccd 	.word	0x3ecccccd
 8000798:	3f19999a 	.word	0x3f19999a
 800079c:	3f333333 	.word	0x3f333333
 80007a0:	45800000 	.word	0x45800000
 80007a4:	200000f4 	.word	0x200000f4
 80007a8:	20000108 	.word	0x20000108

080007ac <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_DAC_Init+0x4c>)
 80007bc:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <MX_DAC_Init+0x50>)
 80007be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_DAC_Init+0x4c>)
 80007c2:	f002 fa5f 	bl	8002c84 <HAL_DAC_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007cc:	f001 f82c 	bl	8001828 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <MX_DAC_Init+0x4c>)
 80007e0:	f002 fb4d 	bl	8002e7e <HAL_DAC_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007ea:	f001 f81d 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000108 	.word	0x20000108
 80007fc:	40007400 	.word	0x40007400

08000800 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a19      	ldr	r2, [pc, #100]	; (8000884 <HAL_DAC_MspInit+0x84>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d12b      	bne.n	800087a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <HAL_DAC_MspInit+0x88>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a18      	ldr	r2, [pc, #96]	; (8000888 <HAL_DAC_MspInit+0x88>)
 8000828:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <HAL_DAC_MspInit+0x88>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <HAL_DAC_MspInit+0x88>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <HAL_DAC_MspInit+0x88>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_DAC_MspInit+0x88>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = BLDCMotorStep_Pin;
 8000852:	2310      	movs	r3, #16
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000856:	2303      	movs	r3, #3
 8000858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLDCMotorStep_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	4809      	ldr	r0, [pc, #36]	; (800088c <HAL_DAC_MspInit+0x8c>)
 8000866:	f002 ff6d 	bl	8003744 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2105      	movs	r1, #5
 800086e:	2036      	movs	r0, #54	; 0x36
 8000870:	f002 f9de 	bl	8002c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000874:	2036      	movs	r0, #54	; 0x36
 8000876:	f002 f9f7 	bl	8002c68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800087a:	bf00      	nop
 800087c:	3728      	adds	r7, #40	; 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40007400 	.word	0x40007400
 8000888:	40023800 	.word	0x40023800
 800088c:	40020000 	.word	0x40020000

08000890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_DMA_Init+0x38>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <MX_DMA_Init+0x38>)
 800089c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_DMA_Init+0x38>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	203b      	movs	r0, #59	; 0x3b
 80008b4:	f002 f9bc 	bl	8002c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008b8:	203b      	movs	r0, #59	; 0x3b
 80008ba:	f002 f9d5 	bl	8002c68 <HAL_NVIC_EnableIRQ>

}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 80008d0:	4a40      	ldr	r2, [pc, #256]	; (80009d4 <MX_FREERTOS_Init+0x108>)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4840      	ldr	r0, [pc, #256]	; (80009d8 <MX_FREERTOS_Init+0x10c>)
 80008d6:	f007 ffa3 	bl	8008820 <osThreadNew>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a3f      	ldr	r2, [pc, #252]	; (80009dc <MX_FREERTOS_Init+0x110>)
 80008de:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartDispatcherTask, NULL, &DispatcherTask_attributes);
 80008e0:	4a3f      	ldr	r2, [pc, #252]	; (80009e0 <MX_FREERTOS_Init+0x114>)
 80008e2:	2100      	movs	r1, #0
 80008e4:	483f      	ldr	r0, [pc, #252]	; (80009e4 <MX_FREERTOS_Init+0x118>)
 80008e6:	f007 ff9b 	bl	8008820 <osThreadNew>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4a3e      	ldr	r2, [pc, #248]	; (80009e8 <MX_FREERTOS_Init+0x11c>)
 80008ee:	6013      	str	r3, [r2, #0]

  /* creation of StopTask */
  StopTaskHandle = osThreadNew(StartStopTask, NULL, &StopTask_attributes);
 80008f0:	4a3e      	ldr	r2, [pc, #248]	; (80009ec <MX_FREERTOS_Init+0x120>)
 80008f2:	2100      	movs	r1, #0
 80008f4:	483e      	ldr	r0, [pc, #248]	; (80009f0 <MX_FREERTOS_Init+0x124>)
 80008f6:	f007 ff93 	bl	8008820 <osThreadNew>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4a3d      	ldr	r2, [pc, #244]	; (80009f4 <MX_FREERTOS_Init+0x128>)
 80008fe:	6013      	str	r3, [r2, #0]

  /* creation of DrivingLightsTa */
  DrivingLightsTaHandle = osThreadNew(StartDrivingLightsTask, NULL, &DrivingLightsTa_attributes);
 8000900:	4a3d      	ldr	r2, [pc, #244]	; (80009f8 <MX_FREERTOS_Init+0x12c>)
 8000902:	2100      	movs	r1, #0
 8000904:	483d      	ldr	r0, [pc, #244]	; (80009fc <MX_FREERTOS_Init+0x130>)
 8000906:	f007 ff8b 	bl	8008820 <osThreadNew>
 800090a:	4603      	mov	r3, r0
 800090c:	4a3c      	ldr	r2, [pc, #240]	; (8000a00 <MX_FREERTOS_Init+0x134>)
 800090e:	6013      	str	r3, [r2, #0]

  /* creation of LEDStripesTask */
  LEDStripesTaskHandle = osThreadNew(StartLEDStripesTask, NULL, &LEDStripesTask_attributes);
 8000910:	4a3c      	ldr	r2, [pc, #240]	; (8000a04 <MX_FREERTOS_Init+0x138>)
 8000912:	2100      	movs	r1, #0
 8000914:	483c      	ldr	r0, [pc, #240]	; (8000a08 <MX_FREERTOS_Init+0x13c>)
 8000916:	f007 ff83 	bl	8008820 <osThreadNew>
 800091a:	4603      	mov	r3, r0
 800091c:	4a3b      	ldr	r2, [pc, #236]	; (8000a0c <MX_FREERTOS_Init+0x140>)
 800091e:	6013      	str	r3, [r2, #0]

  /* creation of LeftBlinkersTas */
  LeftBlinkersTasHandle = osThreadNew(StartLeftBlinkersTask, NULL, &LeftBlinkersTas_attributes);
 8000920:	4a3b      	ldr	r2, [pc, #236]	; (8000a10 <MX_FREERTOS_Init+0x144>)
 8000922:	2100      	movs	r1, #0
 8000924:	483b      	ldr	r0, [pc, #236]	; (8000a14 <MX_FREERTOS_Init+0x148>)
 8000926:	f007 ff7b 	bl	8008820 <osThreadNew>
 800092a:	4603      	mov	r3, r0
 800092c:	4a3a      	ldr	r2, [pc, #232]	; (8000a18 <MX_FREERTOS_Init+0x14c>)
 800092e:	6013      	str	r3, [r2, #0]

  /* creation of RightBlinkersTa */
  RightBlinkersTaHandle = osThreadNew(StartRightBlinkersTask, NULL, &RightBlinkersTa_attributes);
 8000930:	4a3a      	ldr	r2, [pc, #232]	; (8000a1c <MX_FREERTOS_Init+0x150>)
 8000932:	2100      	movs	r1, #0
 8000934:	483a      	ldr	r0, [pc, #232]	; (8000a20 <MX_FREERTOS_Init+0x154>)
 8000936:	f007 ff73 	bl	8008820 <osThreadNew>
 800093a:	4603      	mov	r3, r0
 800093c:	4a39      	ldr	r2, [pc, #228]	; (8000a24 <MX_FREERTOS_Init+0x158>)
 800093e:	6013      	str	r3, [r2, #0]

  /* creation of ParkLeftTask */
  ParkLeftTaskHandle = osThreadNew(StartParkLeftTask, NULL, &ParkLeftTask_attributes);
 8000940:	4a39      	ldr	r2, [pc, #228]	; (8000a28 <MX_FREERTOS_Init+0x15c>)
 8000942:	2100      	movs	r1, #0
 8000944:	4839      	ldr	r0, [pc, #228]	; (8000a2c <MX_FREERTOS_Init+0x160>)
 8000946:	f007 ff6b 	bl	8008820 <osThreadNew>
 800094a:	4603      	mov	r3, r0
 800094c:	4a38      	ldr	r2, [pc, #224]	; (8000a30 <MX_FREERTOS_Init+0x164>)
 800094e:	6013      	str	r3, [r2, #0]

  /* creation of ParkRightTask */
  ParkRightTaskHandle = osThreadNew(StartParkRightTask, NULL, &ParkRightTask_attributes);
 8000950:	4a38      	ldr	r2, [pc, #224]	; (8000a34 <MX_FREERTOS_Init+0x168>)
 8000952:	2100      	movs	r1, #0
 8000954:	4838      	ldr	r0, [pc, #224]	; (8000a38 <MX_FREERTOS_Init+0x16c>)
 8000956:	f007 ff63 	bl	8008820 <osThreadNew>
 800095a:	4603      	mov	r3, r0
 800095c:	4a37      	ldr	r2, [pc, #220]	; (8000a3c <MX_FREERTOS_Init+0x170>)
 800095e:	6013      	str	r3, [r2, #0]

  /* creation of AccelerateTask */
  AccelerateTaskHandle = osThreadNew(StartAccelerateTask, NULL, &AccelerateTask_attributes);
 8000960:	4a37      	ldr	r2, [pc, #220]	; (8000a40 <MX_FREERTOS_Init+0x174>)
 8000962:	2100      	movs	r1, #0
 8000964:	4837      	ldr	r0, [pc, #220]	; (8000a44 <MX_FREERTOS_Init+0x178>)
 8000966:	f007 ff5b 	bl	8008820 <osThreadNew>
 800096a:	4603      	mov	r3, r0
 800096c:	4a36      	ldr	r2, [pc, #216]	; (8000a48 <MX_FREERTOS_Init+0x17c>)
 800096e:	6013      	str	r3, [r2, #0]

  /* creation of DecelerateTask */
  DecelerateTaskHandle = osThreadNew(StartDecelerateTask, NULL, &DecelerateTask_attributes);
 8000970:	4a36      	ldr	r2, [pc, #216]	; (8000a4c <MX_FREERTOS_Init+0x180>)
 8000972:	2100      	movs	r1, #0
 8000974:	4836      	ldr	r0, [pc, #216]	; (8000a50 <MX_FREERTOS_Init+0x184>)
 8000976:	f007 ff53 	bl	8008820 <osThreadNew>
 800097a:	4603      	mov	r3, r0
 800097c:	4a35      	ldr	r2, [pc, #212]	; (8000a54 <MX_FREERTOS_Init+0x188>)
 800097e:	6013      	str	r3, [r2, #0]

  /* creation of TurnLeftTask */
  TurnLeftTaskHandle = osThreadNew(StartTurnLeftTask, NULL, &TurnLeftTask_attributes);
 8000980:	4a35      	ldr	r2, [pc, #212]	; (8000a58 <MX_FREERTOS_Init+0x18c>)
 8000982:	2100      	movs	r1, #0
 8000984:	4835      	ldr	r0, [pc, #212]	; (8000a5c <MX_FREERTOS_Init+0x190>)
 8000986:	f007 ff4b 	bl	8008820 <osThreadNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a34      	ldr	r2, [pc, #208]	; (8000a60 <MX_FREERTOS_Init+0x194>)
 800098e:	6013      	str	r3, [r2, #0]

  /* creation of TurnRightTask */
  TurnRightTaskHandle = osThreadNew(StartTurnRightTask, NULL, &TurnRightTask_attributes);
 8000990:	4a34      	ldr	r2, [pc, #208]	; (8000a64 <MX_FREERTOS_Init+0x198>)
 8000992:	2100      	movs	r1, #0
 8000994:	4834      	ldr	r0, [pc, #208]	; (8000a68 <MX_FREERTOS_Init+0x19c>)
 8000996:	f007 ff43 	bl	8008820 <osThreadNew>
 800099a:	4603      	mov	r3, r0
 800099c:	4a33      	ldr	r2, [pc, #204]	; (8000a6c <MX_FREERTOS_Init+0x1a0>)
 800099e:	6013      	str	r3, [r2, #0]

  /* creation of ConnectionTask */
  ConnectionTaskHandle = osThreadNew(StartConnectionTask, NULL, &ConnectionTask_attributes);
 80009a0:	4a33      	ldr	r2, [pc, #204]	; (8000a70 <MX_FREERTOS_Init+0x1a4>)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4833      	ldr	r0, [pc, #204]	; (8000a74 <MX_FREERTOS_Init+0x1a8>)
 80009a6:	f007 ff3b 	bl	8008820 <osThreadNew>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a32      	ldr	r2, [pc, #200]	; (8000a78 <MX_FREERTOS_Init+0x1ac>)
 80009ae:	6013      	str	r3, [r2, #0]

  /* creation of BrakeLightsTask */
  BrakeLightsTaskHandle = osThreadNew(StartBrakeLightsTask, NULL, &BrakeLightsTask_attributes);
 80009b0:	4a32      	ldr	r2, [pc, #200]	; (8000a7c <MX_FREERTOS_Init+0x1b0>)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4832      	ldr	r0, [pc, #200]	; (8000a80 <MX_FREERTOS_Init+0x1b4>)
 80009b6:	f007 ff33 	bl	8008820 <osThreadNew>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a31      	ldr	r2, [pc, #196]	; (8000a84 <MX_FREERTOS_Init+0x1b8>)
 80009be:	6013      	str	r3, [r2, #0]

  /* creation of WithdrawLightsT */
  WithdrawLightsTHandle = osThreadNew(StartWithdrawLightsTask, NULL, &WithdrawLightsT_attributes);
 80009c0:	4a31      	ldr	r2, [pc, #196]	; (8000a88 <MX_FREERTOS_Init+0x1bc>)
 80009c2:	2100      	movs	r1, #0
 80009c4:	4831      	ldr	r0, [pc, #196]	; (8000a8c <MX_FREERTOS_Init+0x1c0>)
 80009c6:	f007 ff2b 	bl	8008820 <osThreadNew>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a30      	ldr	r2, [pc, #192]	; (8000a90 <MX_FREERTOS_Init+0x1c4>)
 80009ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	0800c7e0 	.word	0x0800c7e0
 80009d8:	08000a95 	.word	0x08000a95
 80009dc:	2000011c 	.word	0x2000011c
 80009e0:	0800c804 	.word	0x0800c804
 80009e4:	08000bb1 	.word	0x08000bb1
 80009e8:	20000120 	.word	0x20000120
 80009ec:	0800c828 	.word	0x0800c828
 80009f0:	08000ccd 	.word	0x08000ccd
 80009f4:	20000124 	.word	0x20000124
 80009f8:	0800c84c 	.word	0x0800c84c
 80009fc:	08000d25 	.word	0x08000d25
 8000a00:	20000128 	.word	0x20000128
 8000a04:	0800c870 	.word	0x0800c870
 8000a08:	08000d45 	.word	0x08000d45
 8000a0c:	2000012c 	.word	0x2000012c
 8000a10:	0800c894 	.word	0x0800c894
 8000a14:	08000f81 	.word	0x08000f81
 8000a18:	20000130 	.word	0x20000130
 8000a1c:	0800c8b8 	.word	0x0800c8b8
 8000a20:	08000fb9 	.word	0x08000fb9
 8000a24:	20000134 	.word	0x20000134
 8000a28:	0800c8dc 	.word	0x0800c8dc
 8000a2c:	08000ff1 	.word	0x08000ff1
 8000a30:	20000138 	.word	0x20000138
 8000a34:	0800c900 	.word	0x0800c900
 8000a38:	08001001 	.word	0x08001001
 8000a3c:	2000013c 	.word	0x2000013c
 8000a40:	0800c924 	.word	0x0800c924
 8000a44:	08001011 	.word	0x08001011
 8000a48:	20000140 	.word	0x20000140
 8000a4c:	0800c948 	.word	0x0800c948
 8000a50:	080010c5 	.word	0x080010c5
 8000a54:	20000144 	.word	0x20000144
 8000a58:	0800c96c 	.word	0x0800c96c
 8000a5c:	08001189 	.word	0x08001189
 8000a60:	20000148 	.word	0x20000148
 8000a64:	0800c990 	.word	0x0800c990
 8000a68:	080011e5 	.word	0x080011e5
 8000a6c:	2000014c 	.word	0x2000014c
 8000a70:	0800c9b4 	.word	0x0800c9b4
 8000a74:	08001241 	.word	0x08001241
 8000a78:	20000150 	.word	0x20000150
 8000a7c:	0800c9d8 	.word	0x0800c9d8
 8000a80:	08001251 	.word	0x08001251
 8000a84:	20000154 	.word	0x20000154
 8000a88:	0800c9fc 	.word	0x0800c9fc
 8000a8c:	08001281 	.word	0x08001281
 8000a90:	20000158 	.word	0x20000158

08000a94 <StartOLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
	// Prepare bodyVersion string
	strcat(bodyVersion, versionName);
 8000a9c:	493b      	ldr	r1, [pc, #236]	; (8000b8c <StartOLEDTask+0xf8>)
 8000a9e:	483c      	ldr	r0, [pc, #240]	; (8000b90 <StartOLEDTask+0xfc>)
 8000aa0:	f00a fed9 	bl	800b856 <strcat>

	// Initiate display
	ssd1306_Init();
 8000aa4:	f000 ffd2 	bl	8001a4c <ssd1306_Init>
	uint8_t y = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]
	ssd1306_Fill(Black);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f001 f837 	bl	8001b20 <ssd1306_Fill>

	// Set header
	ssd1306_SetCursor(2, y);
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	2002      	movs	r0, #2
 8000ab8:	f001 f974 	bl	8001da4 <ssd1306_SetCursor>
	ssd1306_WriteString(headerBootingUp, Font_7x10, White);
 8000abc:	4a35      	ldr	r2, [pc, #212]	; (8000b94 <StartOLEDTask+0x100>)
 8000abe:	2301      	movs	r3, #1
 8000ac0:	ca06      	ldmia	r2, {r1, r2}
 8000ac2:	4835      	ldr	r0, [pc, #212]	; (8000b98 <StartOLEDTask+0x104>)
 8000ac4:	f001 f948 	bl	8001d58 <ssd1306_WriteString>
	y += 30;
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
 8000aca:	331e      	adds	r3, #30
 8000acc:	73fb      	strb	r3, [r7, #15]

	// Set body
	ssd1306_SetCursor(2, y);
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	2002      	movs	r0, #2
 8000ad4:	f001 f966 	bl	8001da4 <ssd1306_SetCursor>
	ssd1306_WriteString(bodyVersion, Font_11x18, White);
 8000ad8:	4a30      	ldr	r2, [pc, #192]	; (8000b9c <StartOLEDTask+0x108>)
 8000ada:	2301      	movs	r3, #1
 8000adc:	ca06      	ldmia	r2, {r1, r2}
 8000ade:	482c      	ldr	r0, [pc, #176]	; (8000b90 <StartOLEDTask+0xfc>)
 8000ae0:	f001 f93a 	bl	8001d58 <ssd1306_WriteString>
	y += 36;
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	3324      	adds	r3, #36	; 0x24
 8000ae8:	73fb      	strb	r3, [r7, #15]

	// Show content
	ssd1306_UpdateScreen();
 8000aea:	f001 f831 	bl	8001b50 <ssd1306_UpdateScreen>
	y = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	73fb      	strb	r3, [r7, #15]

	// Delay
	osDelay(STARTUP_DURATION);
 8000af2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000af6:	f007 ff39 	bl	800896c <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  // Clear screen
	  ssd1306_Fill(Black);
 8000afa:	2000      	movs	r0, #0
 8000afc:	f001 f810 	bl	8001b20 <ssd1306_Fill>

	  if(isConnected) {
 8000b00:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <StartOLEDTask+0x10c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d01c      	beq.n	8000b44 <StartOLEDTask+0xb0>
		  // Set header
		  ssd1306_SetCursor(2, y);
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	2002      	movs	r0, #2
 8000b10:	f001 f948 	bl	8001da4 <ssd1306_SetCursor>
		  ssd1306_WriteString(headerConnected, Font_7x10, White);
 8000b14:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <StartOLEDTask+0x100>)
 8000b16:	2301      	movs	r3, #1
 8000b18:	ca06      	ldmia	r2, {r1, r2}
 8000b1a:	4822      	ldr	r0, [pc, #136]	; (8000ba4 <StartOLEDTask+0x110>)
 8000b1c:	f001 f91c 	bl	8001d58 <ssd1306_WriteString>
		  y += 30;
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	331e      	adds	r3, #30
 8000b24:	73fb      	strb	r3, [r7, #15]

		  // Set body
		  ssd1306_SetCursor(2, y);
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	f001 f93a 	bl	8001da4 <ssd1306_SetCursor>
		  ssd1306_WriteString(bodyLogotype, Font_11x18, White);
 8000b30:	4a1a      	ldr	r2, [pc, #104]	; (8000b9c <StartOLEDTask+0x108>)
 8000b32:	2301      	movs	r3, #1
 8000b34:	ca06      	ldmia	r2, {r1, r2}
 8000b36:	481c      	ldr	r0, [pc, #112]	; (8000ba8 <StartOLEDTask+0x114>)
 8000b38:	f001 f90e 	bl	8001d58 <ssd1306_WriteString>
		  y += 36;
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	3324      	adds	r3, #36	; 0x24
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e01b      	b.n	8000b7c <StartOLEDTask+0xe8>
	  } else {
		  // Set header
		  ssd1306_SetCursor(2, y);
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	4619      	mov	r1, r3
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f001 f92b 	bl	8001da4 <ssd1306_SetCursor>
		  ssd1306_WriteString(headerDisconnected, Font_7x10, White);
 8000b4e:	4a11      	ldr	r2, [pc, #68]	; (8000b94 <StartOLEDTask+0x100>)
 8000b50:	2301      	movs	r3, #1
 8000b52:	ca06      	ldmia	r2, {r1, r2}
 8000b54:	4815      	ldr	r0, [pc, #84]	; (8000bac <StartOLEDTask+0x118>)
 8000b56:	f001 f8ff 	bl	8001d58 <ssd1306_WriteString>
		  y += 30;
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	331e      	adds	r3, #30
 8000b5e:	73fb      	strb	r3, [r7, #15]

		  // Set body
		  ssd1306_SetCursor(2, y);
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	4619      	mov	r1, r3
 8000b64:	2002      	movs	r0, #2
 8000b66:	f001 f91d 	bl	8001da4 <ssd1306_SetCursor>
		  ssd1306_WriteString(bodyLogotype, Font_11x18, White);
 8000b6a:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <StartOLEDTask+0x108>)
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	ca06      	ldmia	r2, {r1, r2}
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <StartOLEDTask+0x114>)
 8000b72:	f001 f8f1 	bl	8001d58 <ssd1306_WriteString>
		  y += 36;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	3324      	adds	r3, #36	; 0x24
 8000b7a:	73fb      	strb	r3, [r7, #15]
	  }

	  // Show content
	  ssd1306_UpdateScreen();
 8000b7c:	f000 ffe8 	bl	8001b50 <ssd1306_UpdateScreen>
	  y = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]

	  vTaskSuspend(NULL);
 8000b84:	2000      	movs	r0, #0
 8000b86:	f008 ff07 	bl	8009998 <vTaskSuspend>
	  ssd1306_Fill(Black);
 8000b8a:	e7b6      	b.n	8000afa <StartOLEDTask+0x66>
 8000b8c:	0800c7dc 	.word	0x0800c7dc
 8000b90:	2000002c 	.word	0x2000002c
 8000b94:	20000048 	.word	0x20000048
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000050 	.word	0x20000050
 8000ba0:	20000043 	.word	0x20000043
 8000ba4:	20000020 	.word	0x20000020
 8000ba8:	20000038 	.word	0x20000038
 8000bac:	20000010 	.word	0x20000010

08000bb0 <StartDispatcherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDispatcherTask */
void StartDispatcherTask(void *argument)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDispatcherTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f008 feed 	bl	8009998 <vTaskSuspend>

	  switch(RxBuffer[0]) {
 8000bbe:	4b36      	ldr	r3, [pc, #216]	; (8000c98 <StartDispatcherTask+0xe8>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	2b0d      	cmp	r3, #13
 8000bc8:	d860      	bhi.n	8000c8c <StartDispatcherTask+0xdc>
 8000bca:	a201      	add	r2, pc, #4	; (adr r2, 8000bd0 <StartDispatcherTask+0x20>)
 8000bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd0:	08000c09 	.word	0x08000c09
 8000bd4:	08000c15 	.word	0x08000c15
 8000bd8:	08000c21 	.word	0x08000c21
 8000bdc:	08000c2d 	.word	0x08000c2d
 8000be0:	08000c39 	.word	0x08000c39
 8000be4:	08000c45 	.word	0x08000c45
 8000be8:	08000c51 	.word	0x08000c51
 8000bec:	08000c8d 	.word	0x08000c8d
 8000bf0:	08000c8d 	.word	0x08000c8d
 8000bf4:	08000c8d 	.word	0x08000c8d
 8000bf8:	08000c5d 	.word	0x08000c5d
 8000bfc:	08000c69 	.word	0x08000c69
 8000c00:	08000c75 	.word	0x08000c75
 8000c04:	08000c81 	.word	0x08000c81
		case 0x01:		// Stop vehicle.
			vTaskResume(StopTaskHandle);
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <StartDispatcherTask+0xec>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f008 ff6f 	bl	8009af0 <vTaskResume>
			break;
 8000c12:	e040      	b.n	8000c96 <StartDispatcherTask+0xe6>
		case 0x02:		// Toggle driving lights.
			vTaskResume(DrivingLightsTaHandle);
 8000c14:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <StartDispatcherTask+0xf0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f008 ff69 	bl	8009af0 <vTaskResume>
			break;
 8000c1e:	e03a      	b.n	8000c96 <StartDispatcherTask+0xe6>
		case 0x03:		// Toggle RGB stripe.
			vTaskResume(LEDStripesTaskHandle);
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <StartDispatcherTask+0xf4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f008 ff63 	bl	8009af0 <vTaskResume>
			break;
 8000c2a:	e034      	b.n	8000c96 <StartDispatcherTask+0xe6>
		case 0x04:		// Turn left blinkers on.
			vTaskResume(LeftBlinkersTasHandle);
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <StartDispatcherTask+0xf8>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f008 ff5d 	bl	8009af0 <vTaskResume>
			break;
 8000c36:	e02e      	b.n	8000c96 <StartDispatcherTask+0xe6>
		case 0x05:		// Turn right blinkers on.
			vTaskResume(RightBlinkersTaHandle);
 8000c38:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <StartDispatcherTask+0xfc>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f008 ff57 	bl	8009af0 <vTaskResume>
			break;
 8000c42:	e028      	b.n	8000c96 <StartDispatcherTask+0xe6>
		case 0x06:		// Toggle parking to the left.
			vTaskResume(ParkLeftTaskHandle);
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <StartDispatcherTask+0x100>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f008 ff51 	bl	8009af0 <vTaskResume>
			break;
 8000c4e:	e022      	b.n	8000c96 <StartDispatcherTask+0xe6>
		case 0x07:		// Toggle parking to the right.
			vTaskResume(ParkRightTaskHandle);
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <StartDispatcherTask+0x104>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f008 ff4b 	bl	8009af0 <vTaskResume>
			break;
 8000c5a:	e01c      	b.n	8000c96 <StartDispatcherTask+0xe6>
		case 0x0B:		// Accelerate.
			vTaskResume(AccelerateTaskHandle);
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <StartDispatcherTask+0x108>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f008 ff45 	bl	8009af0 <vTaskResume>
			break;
 8000c66:	e016      	b.n	8000c96 <StartDispatcherTask+0xe6>
		case 0x0C:		// Decelerate.
			vTaskResume(DecelerateTaskHandle);
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <StartDispatcherTask+0x10c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f008 ff3f 	bl	8009af0 <vTaskResume>
			break;
 8000c72:	e010      	b.n	8000c96 <StartDispatcherTask+0xe6>
		case 0x0D:		// Turn left.
			vTaskResume(TurnLeftTaskHandle);
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <StartDispatcherTask+0x110>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f008 ff39 	bl	8009af0 <vTaskResume>
			break;
 8000c7e:	e00a      	b.n	8000c96 <StartDispatcherTask+0xe6>
		case 0x0E:		// Turn right.
			vTaskResume(TurnRightTaskHandle);
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <StartDispatcherTask+0x114>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f008 ff33 	bl	8009af0 <vTaskResume>
			break;
 8000c8a:	e004      	b.n	8000c96 <StartDispatcherTask+0xe6>
		default:		// Acknowledge connection.
			vTaskResume(ConnectionTaskHandle);
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <StartDispatcherTask+0x118>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f008 ff2d 	bl	8009af0 <vTaskResume>
	  vTaskSuspend(NULL);
 8000c96:	e78f      	b.n	8000bb8 <StartDispatcherTask+0x8>
 8000c98:	20000100 	.word	0x20000100
 8000c9c:	20000124 	.word	0x20000124
 8000ca0:	20000128 	.word	0x20000128
 8000ca4:	2000012c 	.word	0x2000012c
 8000ca8:	20000130 	.word	0x20000130
 8000cac:	20000134 	.word	0x20000134
 8000cb0:	20000138 	.word	0x20000138
 8000cb4:	2000013c 	.word	0x2000013c
 8000cb8:	20000140 	.word	0x20000140
 8000cbc:	20000144 	.word	0x20000144
 8000cc0:	20000148 	.word	0x20000148
 8000cc4:	2000014c 	.word	0x2000014c
 8000cc8:	20000150 	.word	0x20000150

08000ccc <StartStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStopTask */
void StartStopTask(void *argument)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f008 fe5f 	bl	8009998 <vTaskSuspend>

	  // Stop BLDC motor
	  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <StartStopTask+0x40>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <StartStopTask+0x44>)
 8000ce0:	6013      	str	r3, [r2, #0]
	  sliderAccelerateDecelerateCurrentValue = 0;
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <StartStopTask+0x40>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
	  setBLDCMotorSpeed();
 8000ce8:	f7ff fcd6 	bl	8000698 <setBLDCMotorSpeed>

	  // Set LED stripes
	  isStopped = true;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <StartStopTask+0x48>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
	  stripesEffect = STOP;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <StartStopTask+0x4c>)
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	701a      	strb	r2, [r3, #0]
	  ommitToggle = true;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <StartStopTask+0x50>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]
	  vTaskResume(LEDStripesTaskHandle);
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <StartStopTask+0x54>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f008 fef4 	bl	8009af0 <vTaskResume>
	  vTaskSuspend(NULL);
 8000d08:	e7e4      	b.n	8000cd4 <StartStopTask+0x8>
 8000d0a:	bf00      	nop
 8000d0c:	200000e8 	.word	0x200000e8
 8000d10:	200000e4 	.word	0x200000e4
 8000d14:	200000e2 	.word	0x200000e2
 8000d18:	20000044 	.word	0x20000044
 8000d1c:	200000e1 	.word	0x200000e1
 8000d20:	2000012c 	.word	0x2000012c

08000d24 <StartDrivingLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDrivingLightsTask */
void StartDrivingLightsTask(void *argument)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDrivingLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f008 fe33 	bl	8009998 <vTaskSuspend>
	  HAL_GPIO_TogglePin(DrivingLights_GPIO_Port, DrivingLights_Pin);
 8000d32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d36:	4802      	ldr	r0, [pc, #8]	; (8000d40 <StartDrivingLightsTask+0x1c>)
 8000d38:	f002 fec9 	bl	8003ace <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 8000d3c:	e7f6      	b.n	8000d2c <StartDrivingLightsTask+0x8>
 8000d3e:	bf00      	nop
 8000d40:	40020800 	.word	0x40020800

08000d44 <StartLEDStripesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDStripesTask */
void StartLEDStripesTask(void *argument)
{
 8000d44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d48:	b096      	sub	sp, #88	; 0x58
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDStripesTask */
	// Set StripesEffect enum
	stripesEffect = NONE;
 8000d4e:	4b86      	ldr	r3, [pc, #536]	; (8000f68 <StartLEDStripesTask+0x224>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]

	// Transmit 4 empty bytes to ensure SDO is low
	uint8_t d[4] = {0};
 8000d54:	2300      	movs	r3, #0
 8000d56:	647b      	str	r3, [r7, #68]	; 0x44
	HAL_SPI_Transmit(&hspi1, d, 4, 100);
 8000d58:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000d5c:	2364      	movs	r3, #100	; 0x64
 8000d5e:	2204      	movs	r2, #4
 8000d60:	4882      	ldr	r0, [pc, #520]	; (8000f6c <StartLEDStripesTask+0x228>)
 8000d62:	f004 fd7a 	bl	800585a <HAL_SPI_Transmit>

	// Create handle and configure
	ws2812b_handle_t hws2812b;

	hws2812b.config.packing = PACKING; // See macro above
 8000d66:	2301      	movs	r3, #1
 8000d68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hws2812b.config.pulse_len_1 = WS2812B_PULSE_LEN_6b;
 8000d6c:	233f      	movs	r3, #63	; 0x3f
 8000d6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hws2812b.config.pulse_len_0 = WS2812B_PULSE_LEN_2b;
 8000d72:	2303      	movs	r3, #3
 8000d74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hws2812b.config.first_bit_0 = WS2812B_FIRST_BIT_0_ENABLED;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hws2812b.config.prefix_len = PREFIX_LEN; // See macro above
 8000d7e:	2301      	movs	r3, #1
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
	hws2812b.config.suffix_len = SUFFIX_LEN; // See macro above
 8000d82:	2304      	movs	r3, #4
 8000d84:	633b      	str	r3, [r7, #48]	; 0x30
	hws2812b.config.spi_bit_order = WS2812B_MSB_FIRST;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	// Create array of LEDs & set LED color
	ws2812b_led_t leds[LED_COUNT];
	struct DesiredStripesColor desiredStripesColor;
	setLEDStripesEffect(stripesEffect, &desiredStripesColor);
 8000d8c:	4b76      	ldr	r3, [pc, #472]	; (8000f68 <StartLEDStripesTask+0x224>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	f107 0208 	add.w	r2, r7, #8
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fc1f 	bl	80005dc <setLEDStripesEffect>
	for(int i = 0; i < LED_COUNT; i ++) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	657b      	str	r3, [r7, #84]	; 0x54
 8000da2:	e020      	b.n	8000de6 <StartLEDStripesTask+0xa2>
	  leds[i].red = desiredStripesColor.red;
 8000da4:	7a39      	ldrb	r1, [r7, #8]
 8000da6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	3358      	adds	r3, #88	; 0x58
 8000db0:	443b      	add	r3, r7
 8000db2:	3b4c      	subs	r3, #76	; 0x4c
 8000db4:	460a      	mov	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	  leds[i].green = desiredStripesColor.green;
 8000db8:	7a79      	ldrb	r1, [r7, #9]
 8000dba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	3358      	adds	r3, #88	; 0x58
 8000dc4:	443b      	add	r3, r7
 8000dc6:	3b4b      	subs	r3, #75	; 0x4b
 8000dc8:	460a      	mov	r2, r1
 8000dca:	701a      	strb	r2, [r3, #0]
	  leds[i].blue = desiredStripesColor.blue;
 8000dcc:	7ab9      	ldrb	r1, [r7, #10]
 8000dce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	3358      	adds	r3, #88	; 0x58
 8000dd8:	443b      	add	r3, r7
 8000dda:	3b4a      	subs	r3, #74	; 0x4a
 8000ddc:	460a      	mov	r2, r1
 8000dde:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < LED_COUNT; i ++) {
 8000de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000de2:	3301      	adds	r3, #1
 8000de4:	657b      	str	r3, [r7, #84]	; 0x54
 8000de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000de8:	2b06      	cmp	r3, #6
 8000dea:	dddb      	ble.n	8000da4 <StartLEDStripesTask+0x60>
	}

	// Add LEDs and count to handle
	hws2812b.led_count = LED_COUNT;
 8000dec:	2307      	movs	r3, #7
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
	hws2812b.leds = leds;
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	63bb      	str	r3, [r7, #56]	; 0x38

	// Initialize the driver
	if(ws2812b_init(&hws2812b)){
 8000df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 fafc 	bl	80023f8 <ws2812b_init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d006      	beq.n	8000e14 <StartLEDStripesTask+0xd0>
	  printf("Invalid ws2812b config! (%s)\r\n",ws2812b_error_msg);
 8000e06:	4b5a      	ldr	r3, [pc, #360]	; (8000f70 <StartLEDStripesTask+0x22c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4859      	ldr	r0, [pc, #356]	; (8000f74 <StartLEDStripesTask+0x230>)
 8000e0e:	f00a fcc5 	bl	800b79c <iprintf>
	  while(1) {;}
 8000e12:	e7fe      	b.n	8000e12 <StartLEDStripesTask+0xce>
	}

	// Create buffer
	uint8_t dma_buf[ws2812b_required_buffer_len(&hws2812b)];
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 fc89 	bl	8002730 <ws2812b_required_buffer_len>
 8000e1e:	4601      	mov	r1, r0
 8000e20:	460b      	mov	r3, r1
 8000e22:	3b01      	subs	r3, #1
 8000e24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e26:	2300      	movs	r3, #0
 8000e28:	4688      	mov	r8, r1
 8000e2a:	4699      	mov	r9, r3
 8000e2c:	f04f 0200 	mov.w	r2, #0
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e40:	2300      	movs	r3, #0
 8000e42:	460c      	mov	r4, r1
 8000e44:	461d      	mov	r5, r3
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	00eb      	lsls	r3, r5, #3
 8000e50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e54:	00e2      	lsls	r2, r4, #3
 8000e56:	1dcb      	adds	r3, r1, #7
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	ebad 0d03 	sub.w	sp, sp, r3
 8000e60:	466b      	mov	r3, sp
 8000e62:	3300      	adds	r3, #0
 8000e64:	64bb      	str	r3, [r7, #72]	; 0x48

	// Fill buffer
	ws2812b_fill_buffer(&hws2812b, dma_buf);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 fc7a 	bl	8002766 <ws2812b_fill_buffer>

	// Transmit
	HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 8000e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 fc5a 	bl	8002730 <ws2812b_required_buffer_len>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000e84:	4839      	ldr	r0, [pc, #228]	; (8000f6c <StartLEDStripesTask+0x228>)
 8000e86:	f004 fe57 	bl	8005b38 <HAL_SPI_Transmit_DMA>
	HAL_Delay(10); // 10ms delay
 8000e8a:	200a      	movs	r0, #10
 8000e8c:	f001 fdf4 	bl	8002a78 <HAL_Delay>

  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f008 fd81 	bl	8009998 <vTaskSuspend>

	  if(ommitToggle == false) {
 8000e96:	4b38      	ldr	r3, [pc, #224]	; (8000f78 <StartLEDStripesTask+0x234>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	f083 0301 	eor.w	r3, r3, #1
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d014      	beq.n	8000ed0 <StartLEDStripesTask+0x18c>
		  // Toggle effect
		  if(isOn == false) {
 8000ea6:	4b35      	ldr	r3, [pc, #212]	; (8000f7c <StartLEDStripesTask+0x238>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f083 0301 	eor.w	r3, r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d006      	beq.n	8000ec4 <StartLEDStripesTask+0x180>
			  isOn = true;
 8000eb6:	4b31      	ldr	r3, [pc, #196]	; (8000f7c <StartLEDStripesTask+0x238>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]
			  stripesEffect = DEFAULT;
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <StartLEDStripesTask+0x224>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	701a      	strb	r2, [r3, #0]
 8000ec2:	e005      	b.n	8000ed0 <StartLEDStripesTask+0x18c>
		  } else {
			  isOn = false;
 8000ec4:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <StartLEDStripesTask+0x238>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
			  stripesEffect = NONE;
 8000eca:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <StartLEDStripesTask+0x224>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  ommitToggle = false;
 8000ed0:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <StartLEDStripesTask+0x234>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]

	  // Update LED color
	  setLEDStripesEffect(stripesEffect, &desiredStripesColor);
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <StartLEDStripesTask+0x224>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	f107 0208 	add.w	r2, r7, #8
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fb7a 	bl	80005dc <setLEDStripesEffect>
	  for(int i = 0; i < LED_COUNT; i ++) {
 8000ee8:	2300      	movs	r3, #0
 8000eea:	653b      	str	r3, [r7, #80]	; 0x50
 8000eec:	e020      	b.n	8000f30 <StartLEDStripesTask+0x1ec>
		  leds[i].red = desiredStripesColor.red;
 8000eee:	7a39      	ldrb	r1, [r7, #8]
 8000ef0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4413      	add	r3, r2
 8000ef8:	3358      	adds	r3, #88	; 0x58
 8000efa:	443b      	add	r3, r7
 8000efc:	3b4c      	subs	r3, #76	; 0x4c
 8000efe:	460a      	mov	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
		  leds[i].green = desiredStripesColor.green;
 8000f02:	7a79      	ldrb	r1, [r7, #9]
 8000f04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f06:	4613      	mov	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4413      	add	r3, r2
 8000f0c:	3358      	adds	r3, #88	; 0x58
 8000f0e:	443b      	add	r3, r7
 8000f10:	3b4b      	subs	r3, #75	; 0x4b
 8000f12:	460a      	mov	r2, r1
 8000f14:	701a      	strb	r2, [r3, #0]
		  leds[i].blue = desiredStripesColor.blue;
 8000f16:	7ab9      	ldrb	r1, [r7, #10]
 8000f18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	3358      	adds	r3, #88	; 0x58
 8000f22:	443b      	add	r3, r7
 8000f24:	3b4a      	subs	r3, #74	; 0x4a
 8000f26:	460a      	mov	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < LED_COUNT; i ++) {
 8000f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	653b      	str	r3, [r7, #80]	; 0x50
 8000f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	dddb      	ble.n	8000eee <StartLEDStripesTask+0x1aa>
	  }

	  // Add LEDs to handle
	  hws2812b.leds = leds;
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	63bb      	str	r3, [r7, #56]	; 0x38

	  // Fill buffer
	  ws2812b_fill_buffer(&hws2812b, dma_buf);
 8000f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f40:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 fc0f 	bl	8002766 <ws2812b_fill_buffer>

	  // Transmit
	  HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 fbef 	bl	8002730 <ws2812b_required_buffer_len>
 8000f52:	4603      	mov	r3, r0
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	461a      	mov	r2, r3
 8000f58:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000f5a:	4804      	ldr	r0, [pc, #16]	; (8000f6c <StartLEDStripesTask+0x228>)
 8000f5c:	f004 fdec 	bl	8005b38 <HAL_SPI_Transmit_DMA>
	  HAL_Delay(10); // 10ms delay
 8000f60:	200a      	movs	r0, #10
 8000f62:	f001 fd89 	bl	8002a78 <HAL_Delay>
	  vTaskSuspend(NULL);
 8000f66:	e793      	b.n	8000e90 <StartLEDStripesTask+0x14c>
 8000f68:	20000044 	.word	0x20000044
 8000f6c:	200001b0 	.word	0x200001b0
 8000f70:	200007a0 	.word	0x200007a0
 8000f74:	0800c678 	.word	0x0800c678
 8000f78:	200000e1 	.word	0x200000e1
 8000f7c:	200000e0 	.word	0x200000e0

08000f80 <StartLeftBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeftBlinkersTask */
void StartLeftBlinkersTask(void *argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLeftBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f008 fd05 	bl	8009998 <vTaskSuspend>
	  for(int i = 0; i < 6; i ++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	e00b      	b.n	8000fac <StartLeftBlinkersTask+0x2c>
	  {
		  HAL_GPIO_TogglePin(LeftBlinkers_GPIO_Port, LeftBlinkers_Pin);
 8000f94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f98:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <StartLeftBlinkersTask+0x34>)
 8000f9a:	f002 fd98 	bl	8003ace <HAL_GPIO_TogglePin>
		  osDelay(400);
 8000f9e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000fa2:	f007 fce3 	bl	800896c <osDelay>
	  for(int i = 0; i < 6; i ++)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	ddf0      	ble.n	8000f94 <StartLeftBlinkersTask+0x14>
	  vTaskSuspend(NULL);
 8000fb2:	e7e9      	b.n	8000f88 <StartLeftBlinkersTask+0x8>
 8000fb4:	40020800 	.word	0x40020800

08000fb8 <StartRightBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRightBlinkersTask */
void StartRightBlinkersTask(void *argument)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRightBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f008 fce9 	bl	8009998 <vTaskSuspend>
	  for(int i = 0; i < 6; i ++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	e00b      	b.n	8000fe4 <StartRightBlinkersTask+0x2c>
	  {
		  HAL_GPIO_TogglePin(RightBlinkers_GPIO_Port, RightBlinkers_Pin);
 8000fcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd0:	4806      	ldr	r0, [pc, #24]	; (8000fec <StartRightBlinkersTask+0x34>)
 8000fd2:	f002 fd7c 	bl	8003ace <HAL_GPIO_TogglePin>
		  osDelay(400);
 8000fd6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000fda:	f007 fcc7 	bl	800896c <osDelay>
	  for(int i = 0; i < 6; i ++)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b05      	cmp	r3, #5
 8000fe8:	ddf0      	ble.n	8000fcc <StartRightBlinkersTask+0x14>
	  vTaskSuspend(NULL);
 8000fea:	e7e9      	b.n	8000fc0 <StartRightBlinkersTask+0x8>
 8000fec:	40020800 	.word	0x40020800

08000ff0 <StartParkLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkLeftTask */
void StartParkLeftTask(void *argument)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f008 fccd 	bl	8009998 <vTaskSuspend>
 8000ffe:	e7fb      	b.n	8000ff8 <StartParkLeftTask+0x8>

08001000 <StartParkRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkRightTask */
void StartParkRightTask(void *argument)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001008:	2000      	movs	r0, #0
 800100a:	f008 fcc5 	bl	8009998 <vTaskSuspend>
 800100e:	e7fb      	b.n	8001008 <StartParkRightTask+0x8>

08001010 <StartAccelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccelerateTask */
void StartAccelerateTask(void *argument)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccelerateTask */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0.0);
 8001018:	2300      	movs	r3, #0
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	481f      	ldr	r0, [pc, #124]	; (800109c <StartAccelerateTask+0x8c>)
 8001020:	f001 fefe 	bl	8002e20 <HAL_DAC_SetValue>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001024:	2000      	movs	r0, #0
 8001026:	f008 fcb7 	bl	8009998 <vTaskSuspend>

	  // Turn off LED stripes' stop effect if present
	  if(isStopped) {
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <StartAccelerateTask+0x90>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	d016      	beq.n	8001062 <StartAccelerateTask+0x52>
		  isStopped = false;
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <StartAccelerateTask+0x90>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
		  if(isOn) {
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <StartAccelerateTask+0x94>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <StartAccelerateTask+0x3c>
			  stripesEffect = DEFAULT;
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <StartAccelerateTask+0x98>)
 8001046:	2202      	movs	r2, #2
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	e002      	b.n	8001052 <StartAccelerateTask+0x42>
		  } else {
			  stripesEffect = NONE;
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <StartAccelerateTask+0x98>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
		  }
		  ommitToggle = true;
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <StartAccelerateTask+0x9c>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
		  vTaskResume(LEDStripesTaskHandle);
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <StartAccelerateTask+0xa0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f008 fd47 	bl	8009af0 <vTaskResume>
	  }

	  // Accelerate if possible
	  if(sliderAccelerateDecelerateCurrentValue < 4) {
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <StartAccelerateTask+0xa4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b03      	cmp	r3, #3
 8001068:	dc08      	bgt.n	800107c <StartAccelerateTask+0x6c>
		  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <StartAccelerateTask+0xa4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <StartAccelerateTask+0xa8>)
 8001070:	6013      	str	r3, [r2, #0]
		  sliderAccelerateDecelerateCurrentValue ++;
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <StartAccelerateTask+0xa4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <StartAccelerateTask+0xa4>)
 800107a:	6013      	str	r3, [r2, #0]
	  }
	  setBLDCMotorSpeed();
 800107c:	f7ff fb0c 	bl	8000698 <setBLDCMotorSpeed>

	  // Set withdraw lights appropriately
	  if(sliderAccelerateDecelerateCurrentValue >= 0) {
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <StartAccelerateTask+0xa4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	dbcd      	blt.n	8001024 <StartAccelerateTask+0x14>
		  isWithdrawing = false;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <StartAccelerateTask+0xac>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
		  vTaskResume(WithdrawLightsTHandle);
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <StartAccelerateTask+0xb0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f008 fd2c 	bl	8009af0 <vTaskResume>
	  vTaskSuspend(NULL);
 8001098:	e7c4      	b.n	8001024 <StartAccelerateTask+0x14>
 800109a:	bf00      	nop
 800109c:	20000108 	.word	0x20000108
 80010a0:	200000e2 	.word	0x200000e2
 80010a4:	200000e0 	.word	0x200000e0
 80010a8:	20000044 	.word	0x20000044
 80010ac:	200000e1 	.word	0x200000e1
 80010b0:	2000012c 	.word	0x2000012c
 80010b4:	200000e8 	.word	0x200000e8
 80010b8:	200000e4 	.word	0x200000e4
 80010bc:	200000ec 	.word	0x200000ec
 80010c0:	20000158 	.word	0x20000158

080010c4 <StartDecelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDecelerateTask */
void StartDecelerateTask(void *argument)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDecelerateTask */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0.0);
 80010cc:	2300      	movs	r3, #0
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	4822      	ldr	r0, [pc, #136]	; (800115c <StartDecelerateTask+0x98>)
 80010d4:	f001 fea4 	bl	8002e20 <HAL_DAC_SetValue>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80010d8:	2000      	movs	r0, #0
 80010da:	f008 fc5d 	bl	8009998 <vTaskSuspend>

	  // Turn off LED stripes' stop effect if present
	  if(isStopped) {
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <StartDecelerateTask+0x9c>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d016      	beq.n	8001116 <StartDecelerateTask+0x52>
		  isStopped = false;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <StartDecelerateTask+0x9c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
		  if(isOn) {
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <StartDecelerateTask+0xa0>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <StartDecelerateTask+0x3c>
			  stripesEffect = DEFAULT;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <StartDecelerateTask+0xa4>)
 80010fa:	2202      	movs	r2, #2
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	e002      	b.n	8001106 <StartDecelerateTask+0x42>
		  } else {
			  stripesEffect = NONE;
 8001100:	4b19      	ldr	r3, [pc, #100]	; (8001168 <StartDecelerateTask+0xa4>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
		  }
		  ommitToggle = true;
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <StartDecelerateTask+0xa8>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
		  vTaskResume(LEDStripesTaskHandle);
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <StartDecelerateTask+0xac>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f008 fced 	bl	8009af0 <vTaskResume>
	  }

	  // Decelerate if possible
	  if(sliderAccelerateDecelerateCurrentValue > -2){
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <StartDecelerateTask+0xb0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111e:	db08      	blt.n	8001132 <StartDecelerateTask+0x6e>
		  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <StartDecelerateTask+0xb0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a14      	ldr	r2, [pc, #80]	; (8001178 <StartDecelerateTask+0xb4>)
 8001126:	6013      	str	r3, [r2, #0]
		  sliderAccelerateDecelerateCurrentValue --;
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <StartDecelerateTask+0xb0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3b01      	subs	r3, #1
 800112e:	4a11      	ldr	r2, [pc, #68]	; (8001174 <StartDecelerateTask+0xb0>)
 8001130:	6013      	str	r3, [r2, #0]
	  }
	  setBLDCMotorSpeed();
 8001132:	f7ff fab1 	bl	8000698 <setBLDCMotorSpeed>

	  // Set withdraw lights appropriately
	  if(sliderAccelerateDecelerateCurrentValue >= 0) {
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <StartDecelerateTask+0xb0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db05      	blt.n	800114a <StartDecelerateTask+0x86>
		  vTaskResume(BrakeLightsTaskHandle);
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <StartDecelerateTask+0xb8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f008 fcd4 	bl	8009af0 <vTaskResume>
 8001148:	e7c6      	b.n	80010d8 <StartDecelerateTask+0x14>
	  } else {
		  isWithdrawing = true;
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <StartDecelerateTask+0xbc>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
		  vTaskResume(WithdrawLightsTHandle);
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <StartDecelerateTask+0xc0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f008 fccb 	bl	8009af0 <vTaskResume>
	  vTaskSuspend(NULL);
 800115a:	e7bd      	b.n	80010d8 <StartDecelerateTask+0x14>
 800115c:	20000108 	.word	0x20000108
 8001160:	200000e2 	.word	0x200000e2
 8001164:	200000e0 	.word	0x200000e0
 8001168:	20000044 	.word	0x20000044
 800116c:	200000e1 	.word	0x200000e1
 8001170:	2000012c 	.word	0x2000012c
 8001174:	200000e8 	.word	0x200000e8
 8001178:	200000e4 	.word	0x200000e4
 800117c:	20000154 	.word	0x20000154
 8001180:	200000ec 	.word	0x200000ec
 8001184:	20000158 	.word	0x20000158

08001188 <StartTurnLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnLeftTask */
void StartTurnLeftTask(void *argument)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001190:	2000      	movs	r0, #0
 8001192:	f008 fc01 	bl	8009998 <vTaskSuspend>

	  if(sliderLeftRightCurrentValue > -3) {
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <StartTurnLeftTask+0x4c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f113 0f02 	cmn.w	r3, #2
 800119e:	dbf7      	blt.n	8001190 <StartTurnLeftTask+0x8>
		  sliderLeftRightPreviousValue = sliderLeftRightCurrentValue;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <StartTurnLeftTask+0x4c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0c      	ldr	r2, [pc, #48]	; (80011d8 <StartTurnLeftTask+0x50>)
 80011a6:	6013      	str	r3, [r2, #0]
		  sliderLeftRightCurrentValue --;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <StartTurnLeftTask+0x4c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <StartTurnLeftTask+0x4c>)
 80011b0:	6013      	str	r3, [r2, #0]

		  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b8:	4808      	ldr	r0, [pc, #32]	; (80011dc <StartTurnLeftTask+0x54>)
 80011ba:	f002 fc6f 	bl	8003a9c <HAL_GPIO_WritePin>
		  TIM4->CCR3 = 500;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <StartTurnLeftTask+0x58>)
 80011c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011c4:	63da      	str	r2, [r3, #60]	; 0x3c
		  osDelay(35);
 80011c6:	2023      	movs	r0, #35	; 0x23
 80011c8:	f007 fbd0 	bl	800896c <osDelay>
		  TIM4->CCR3 = 0;
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <StartTurnLeftTask+0x58>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	63da      	str	r2, [r3, #60]	; 0x3c
	  vTaskSuspend(NULL);
 80011d2:	e7dd      	b.n	8001190 <StartTurnLeftTask+0x8>
 80011d4:	200000fc 	.word	0x200000fc
 80011d8:	200000f8 	.word	0x200000f8
 80011dc:	40020c00 	.word	0x40020c00
 80011e0:	40000800 	.word	0x40000800

080011e4 <StartTurnRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnRightTask */
void StartTurnRightTask(void *argument)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f008 fbd3 	bl	8009998 <vTaskSuspend>

	  if(sliderLeftRightCurrentValue < 3) {
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <StartTurnRightTask+0x4c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	dcf8      	bgt.n	80011ec <StartTurnRightTask+0x8>
		  sliderLeftRightPreviousValue = sliderLeftRightCurrentValue;
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <StartTurnRightTask+0x4c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <StartTurnRightTask+0x50>)
 8001200:	6013      	str	r3, [r2, #0]
		  sliderLeftRightCurrentValue ++;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <StartTurnRightTask+0x4c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	4a09      	ldr	r2, [pc, #36]	; (8001230 <StartTurnRightTask+0x4c>)
 800120a:	6013      	str	r3, [r2, #0]

		  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001212:	4809      	ldr	r0, [pc, #36]	; (8001238 <StartTurnRightTask+0x54>)
 8001214:	f002 fc42 	bl	8003a9c <HAL_GPIO_WritePin>
		  TIM4->CCR3 = 500;
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <StartTurnRightTask+0x58>)
 800121a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
		  osDelay(35);
 8001220:	2023      	movs	r0, #35	; 0x23
 8001222:	f007 fba3 	bl	800896c <osDelay>
		  TIM4->CCR3 = 0;
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <StartTurnRightTask+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	63da      	str	r2, [r3, #60]	; 0x3c
	  vTaskSuspend(NULL);
 800122c:	e7de      	b.n	80011ec <StartTurnRightTask+0x8>
 800122e:	bf00      	nop
 8001230:	200000fc 	.word	0x200000fc
 8001234:	200000f8 	.word	0x200000f8
 8001238:	40020c00 	.word	0x40020c00
 800123c:	40000800 	.word	0x40000800

08001240 <StartConnectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConnectionTask */
void StartConnectionTask(void *argument)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConnectionTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001248:	2000      	movs	r0, #0
 800124a:	f008 fba5 	bl	8009998 <vTaskSuspend>
 800124e:	e7fb      	b.n	8001248 <StartConnectionTask+0x8>

08001250 <StartBrakeLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBrakeLightsTask */
void StartBrakeLightsTask(void *argument)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBrakeLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001258:	2000      	movs	r0, #0
 800125a:	f008 fb9d 	bl	8009998 <vTaskSuspend>

	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 800125e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <StartBrakeLightsTask+0x2c>)
 8001264:	f002 fc33 	bl	8003ace <HAL_GPIO_TogglePin>
	  osDelay(BRAKE_LIGHTS_DURATION);
 8001268:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800126c:	f007 fb7e 	bl	800896c <osDelay>
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 8001270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001274:	4801      	ldr	r0, [pc, #4]	; (800127c <StartBrakeLightsTask+0x2c>)
 8001276:	f002 fc2a 	bl	8003ace <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 800127a:	e7ed      	b.n	8001258 <StartBrakeLightsTask+0x8>
 800127c:	40020800 	.word	0x40020800

08001280 <StartWithdrawLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWithdrawLightsTask */
void StartWithdrawLightsTask(void *argument)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWithdrawLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001288:	2000      	movs	r0, #0
 800128a:	f008 fb85 	bl	8009998 <vTaskSuspend>

	  if(isWithdrawing) {
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <StartWithdrawLightsTask+0x34>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <StartWithdrawLightsTask+0x26>
		  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129e:	4806      	ldr	r0, [pc, #24]	; (80012b8 <StartWithdrawLightsTask+0x38>)
 80012a0:	f002 fbfc 	bl	8003a9c <HAL_GPIO_WritePin>
 80012a4:	e7f0      	b.n	8001288 <StartWithdrawLightsTask+0x8>
	  } else {
		  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <StartWithdrawLightsTask+0x38>)
 80012ae:	f002 fbf5 	bl	8003a9c <HAL_GPIO_WritePin>
	  vTaskSuspend(NULL);
 80012b2:	e7e9      	b.n	8001288 <StartWithdrawLightsTask+0x8>
 80012b4:	200000ec 	.word	0x200000ec
 80012b8:	40020800 	.word	0x40020800

080012bc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08c      	sub	sp, #48	; 0x30
 80012c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	4b94      	ldr	r3, [pc, #592]	; (8001524 <MX_GPIO_Init+0x268>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a93      	ldr	r2, [pc, #588]	; (8001524 <MX_GPIO_Init+0x268>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b91      	ldr	r3, [pc, #580]	; (8001524 <MX_GPIO_Init+0x268>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ea:	4b8e      	ldr	r3, [pc, #568]	; (8001524 <MX_GPIO_Init+0x268>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a8d      	ldr	r2, [pc, #564]	; (8001524 <MX_GPIO_Init+0x268>)
 80012f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b8b      	ldr	r3, [pc, #556]	; (8001524 <MX_GPIO_Init+0x268>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b88      	ldr	r3, [pc, #544]	; (8001524 <MX_GPIO_Init+0x268>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a87      	ldr	r2, [pc, #540]	; (8001524 <MX_GPIO_Init+0x268>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b85      	ldr	r3, [pc, #532]	; (8001524 <MX_GPIO_Init+0x268>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b82      	ldr	r3, [pc, #520]	; (8001524 <MX_GPIO_Init+0x268>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a81      	ldr	r2, [pc, #516]	; (8001524 <MX_GPIO_Init+0x268>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b7f      	ldr	r3, [pc, #508]	; (8001524 <MX_GPIO_Init+0x268>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001332:	4b7c      	ldr	r3, [pc, #496]	; (8001524 <MX_GPIO_Init+0x268>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a7b      	ldr	r2, [pc, #492]	; (8001524 <MX_GPIO_Init+0x268>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b79      	ldr	r3, [pc, #484]	; (8001524 <MX_GPIO_Init+0x268>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800134a:	4b76      	ldr	r3, [pc, #472]	; (8001524 <MX_GPIO_Init+0x268>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a75      	ldr	r2, [pc, #468]	; (8001524 <MX_GPIO_Init+0x268>)
 8001350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b73      	ldr	r3, [pc, #460]	; (8001524 <MX_GPIO_Init+0x268>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f244 0191 	movw	r1, #16529	; 0x4091
 8001368:	486f      	ldr	r0, [pc, #444]	; (8001528 <MX_GPIO_Init+0x26c>)
 800136a:	f002 fb97 	bl	8003a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001374:	486d      	ldr	r0, [pc, #436]	; (800152c <MX_GPIO_Init+0x270>)
 8001376:	f002 fb91 	bl	8003a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2140      	movs	r1, #64	; 0x40
 800137e:	486c      	ldr	r0, [pc, #432]	; (8001530 <MX_GPIO_Init+0x274>)
 8001380:	f002 fb8c 	bl	8003a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800138a:	486a      	ldr	r0, [pc, #424]	; (8001534 <MX_GPIO_Init+0x278>)
 800138c:	f002 fb86 	bl	8003a9c <HAL_GPIO_WritePin>
                          |WithdrawLights_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001396:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800139a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	4619      	mov	r1, r3
 80013a6:	4863      	ldr	r0, [pc, #396]	; (8001534 <MX_GPIO_Init+0x278>)
 80013a8:	f002 f9cc 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013ac:	2332      	movs	r3, #50	; 0x32
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013bc:	230b      	movs	r3, #11
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	485b      	ldr	r0, [pc, #364]	; (8001534 <MX_GPIO_Init+0x278>)
 80013c8:	f002 f9bc 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013cc:	2386      	movs	r3, #134	; 0x86
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013dc:	230b      	movs	r3, #11
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4854      	ldr	r0, [pc, #336]	; (8001538 <MX_GPIO_Init+0x27c>)
 80013e8:	f002 f9ac 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin;
 80013ec:	f244 0391 	movw	r3, #16529	; 0x4091
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	4619      	mov	r1, r3
 8001404:	4848      	ldr	r0, [pc, #288]	; (8001528 <MX_GPIO_Init+0x26c>)
 8001406:	f002 f99d 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800140a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800141c:	230b      	movs	r3, #11
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	4840      	ldr	r0, [pc, #256]	; (8001528 <MX_GPIO_Init+0x26c>)
 8001428:	f002 f98c 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800142c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800143e:	2307      	movs	r3, #7
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	4838      	ldr	r0, [pc, #224]	; (800152c <MX_GPIO_Init+0x270>)
 800144a:	f002 f97b 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = StepperMotorDir_Pin;
 800144e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(StepperMotorDir_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4831      	ldr	r0, [pc, #196]	; (800152c <MX_GPIO_Init+0x270>)
 8001468:	f002 f96c 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800146c:	2340      	movs	r3, #64	; 0x40
 800146e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	482b      	ldr	r0, [pc, #172]	; (8001530 <MX_GPIO_Init+0x274>)
 8001484:	f002 f95e 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	4825      	ldr	r0, [pc, #148]	; (8001530 <MX_GPIO_Init+0x274>)
 800149c:	f002 f952 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 80014a0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80014a4:	61fb      	str	r3, [r7, #28]
                          |WithdrawLights_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	4619      	mov	r1, r3
 80014b8:	481e      	ldr	r0, [pc, #120]	; (8001534 <MX_GPIO_Init+0x278>)
 80014ba:	f002 f943 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014be:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014cc:	2303      	movs	r3, #3
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014d0:	230a      	movs	r3, #10
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	4817      	ldr	r0, [pc, #92]	; (8001538 <MX_GPIO_Init+0x27c>)
 80014dc:	f002 f932 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	4619      	mov	r1, r3
 80014f4:	4810      	ldr	r0, [pc, #64]	; (8001538 <MX_GPIO_Init+0x27c>)
 80014f6:	f002 f925 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800150c:	230b      	movs	r3, #11
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	4806      	ldr	r0, [pc, #24]	; (8001530 <MX_GPIO_Init+0x274>)
 8001518:	f002 f914 	bl	8003744 <HAL_GPIO_Init>

}
 800151c:	bf00      	nop
 800151e:	3730      	adds	r7, #48	; 0x30
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	40020400 	.word	0x40020400
 800152c:	40020c00 	.word	0x40020c00
 8001530:	40021800 	.word	0x40021800
 8001534:	40020800 	.word	0x40020800
 8001538:	40020000 	.word	0x40020000

0800153c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <MX_I2C1_Init+0x74>)
 8001542:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <MX_I2C1_Init+0x78>)
 8001544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <MX_I2C1_Init+0x74>)
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <MX_I2C1_Init+0x7c>)
 800154a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <MX_I2C1_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <MX_I2C1_Init+0x74>)
 8001554:	2201      	movs	r2, #1
 8001556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <MX_I2C1_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_I2C1_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <MX_I2C1_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_I2C1_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <MX_I2C1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001576:	480e      	ldr	r0, [pc, #56]	; (80015b0 <MX_I2C1_Init+0x74>)
 8001578:	f002 fac4 	bl	8003b04 <HAL_I2C_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001582:	f000 f951 	bl	8001828 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001586:	2100      	movs	r1, #0
 8001588:	4809      	ldr	r0, [pc, #36]	; (80015b0 <MX_I2C1_Init+0x74>)
 800158a:	f002 fea5 	bl	80042d8 <HAL_I2CEx_ConfigAnalogFilter>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001594:	f000 f948 	bl	8001828 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001598:	2100      	movs	r1, #0
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_I2C1_Init+0x74>)
 800159c:	f002 fee7 	bl	800436e <HAL_I2CEx_ConfigDigitalFilter>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015a6:	f000 f93f 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000015c 	.word	0x2000015c
 80015b4:	40005400 	.word	0x40005400
 80015b8:	20404768 	.word	0x20404768

080015bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0ae      	sub	sp, #184	; 0xb8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2290      	movs	r2, #144	; 0x90
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f00a f932 	bl	800b846 <memset>
  if(i2cHandle->Instance==I2C1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a22      	ldr	r2, [pc, #136]	; (8001670 <HAL_I2C_MspInit+0xb4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d13c      	bne.n	8001666 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015f0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 fc5a 	bl	8004eb4 <HAL_RCCEx_PeriphCLKConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001606:	f000 f90f 	bl	8001828 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_I2C_MspInit+0xb8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a19      	ldr	r2, [pc, #100]	; (8001674 <HAL_I2C_MspInit+0xb8>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_I2C_MspInit+0xb8>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8001622:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001626:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162a:	2312      	movs	r3, #18
 800162c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800163c:	2304      	movs	r3, #4
 800163e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001642:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001646:	4619      	mov	r1, r3
 8001648:	480b      	ldr	r0, [pc, #44]	; (8001678 <HAL_I2C_MspInit+0xbc>)
 800164a:	f002 f87b 	bl	8003744 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_I2C_MspInit+0xb8>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a08      	ldr	r2, [pc, #32]	; (8001674 <HAL_I2C_MspInit+0xb8>)
 8001654:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_I2C_MspInit+0xb8>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001666:	bf00      	nop
 8001668:	37b8      	adds	r7, #184	; 0xb8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40005400 	.word	0x40005400
 8001674:	40023800 	.word	0x40023800
 8001678:	40020400 	.word	0x40020400

0800167c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001680:	f001 f9cd 	bl	8002a1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001684:	f000 f82a 	bl	80016dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001688:	f7ff fe18 	bl	80012bc <MX_GPIO_Init>
  MX_DMA_Init();
 800168c:	f7ff f900 	bl	8000890 <MX_DMA_Init>
  MX_SPI1_Init();
 8001690:	f000 f8d0 	bl	8001834 <MX_SPI1_Init>
  MX_DAC_Init();
 8001694:	f7ff f88a 	bl	80007ac <MX_DAC_Init>
  MX_I2C1_Init();
 8001698:	f7ff ff50 	bl	800153c <MX_I2C1_Init>
  MX_TIM4_Init();
 800169c:	f000 fd62 	bl	8002164 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 80016a0:	f000 fe12 	bl	80022c8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, RxBuffer, 1);
 80016a4:	2201      	movs	r2, #1
 80016a6:	4909      	ldr	r1, [pc, #36]	; (80016cc <main+0x50>)
 80016a8:	4809      	ldr	r0, [pc, #36]	; (80016d0 <main+0x54>)
 80016aa:	f005 fe07 	bl	80072bc <HAL_UART_Receive_IT>
  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 80016ae:	2100      	movs	r1, #0
 80016b0:	4808      	ldr	r0, [pc, #32]	; (80016d4 <main+0x58>)
 80016b2:	f001 fb09 	bl	8002cc8 <HAL_DAC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80016b6:	2108      	movs	r1, #8
 80016b8:	4807      	ldr	r0, [pc, #28]	; (80016d8 <main+0x5c>)
 80016ba:	f004 fe8b 	bl	80063d4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80016be:	f007 f845 	bl	800874c <osKernelInitialize>
  MX_FREERTOS_Init();
 80016c2:	f7ff f903 	bl	80008cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80016c6:	f007 f875 	bl	80087b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <main+0x4e>
 80016cc:	20000100 	.word	0x20000100
 80016d0:	20000718 	.word	0x20000718
 80016d4:	20000108 	.word	0x20000108
 80016d8:	200006cc 	.word	0x200006cc

080016dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b094      	sub	sp, #80	; 0x50
 80016e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	2234      	movs	r2, #52	; 0x34
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f00a f8ab 	bl	800b846 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <SystemClock_Config+0xd4>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	4a2a      	ldr	r2, [pc, #168]	; (80017b0 <SystemClock_Config+0xd4>)
 8001706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170a:	6413      	str	r3, [r2, #64]	; 0x40
 800170c:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <SystemClock_Config+0xd4>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001718:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <SystemClock_Config+0xd8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a25      	ldr	r2, [pc, #148]	; (80017b4 <SystemClock_Config+0xd8>)
 800171e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <SystemClock_Config+0xd8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001730:	2301      	movs	r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001734:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001738:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173a:	2302      	movs	r3, #2
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001744:	2304      	movs	r3, #4
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001748:	23d8      	movs	r3, #216	; 0xd8
 800174a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800174c:	2302      	movs	r3, #2
 800174e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001750:	2302      	movs	r3, #2
 8001752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001754:	2302      	movs	r3, #2
 8001756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4618      	mov	r0, r3
 800175e:	f002 fea3 	bl	80044a8 <HAL_RCC_OscConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001768:	f000 f85e 	bl	8001828 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800176c:	f002 fe4c 	bl	8004408 <HAL_PWREx_EnableOverDrive>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001776:	f000 f857 	bl	8001828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177a:	230f      	movs	r3, #15
 800177c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177e:	2302      	movs	r3, #2
 8001780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001786:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800178a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800178c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001790:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	2107      	movs	r1, #7
 8001798:	4618      	mov	r0, r3
 800179a:	f003 f933 	bl	8004a04 <HAL_RCC_ClockConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80017a4:	f000 f840 	bl	8001828 <Error_Handler>
  }
}
 80017a8:	bf00      	nop
 80017aa:	3750      	adds	r7, #80	; 0x50
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40007000 	.word	0x40007000

080017b8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart6x) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	portYIELD_FROM_ISR(xTaskResumeFromISR(DispatcherTaskHandle));
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_UART_RxCpltCallback+0x3c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f008 f9f3 	bl	8009bb0 <xTaskResumeFromISR>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d007      	beq.n	80017e0 <HAL_UART_RxCpltCallback+0x28>
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_UART_RxCpltCallback+0x40>)
 80017d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	f3bf 8f4f 	dsb	sy
 80017dc:	f3bf 8f6f 	isb	sy
	HAL_UART_Receive_IT(&huart6, RxBuffer, 1);					// Used for "opening" ST MCU for future interrupts on RX
 80017e0:	2201      	movs	r2, #1
 80017e2:	4906      	ldr	r1, [pc, #24]	; (80017fc <HAL_UART_RxCpltCallback+0x44>)
 80017e4:	4806      	ldr	r0, [pc, #24]	; (8001800 <HAL_UART_RxCpltCallback+0x48>)
 80017e6:	f005 fd69 	bl	80072bc <HAL_UART_Receive_IT>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000120 	.word	0x20000120
 80017f8:	e000ed04 	.word	0xe000ed04
 80017fc:	20000100 	.word	0x20000100
 8001800:	20000718 	.word	0x20000718

08001804 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a04      	ldr	r2, [pc, #16]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001816:	f001 f90f 	bl	8002a38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40001000 	.word	0x40001000

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182c:	b672      	cpsid	i
}
 800182e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001830:	e7fe      	b.n	8001830 <Error_Handler+0x8>
	...

08001834 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <MX_SPI1_Init+0x74>)
 800183a:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <MX_SPI1_Init+0x78>)
 800183c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800183e:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001840:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001844:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001848:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800184c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001850:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001854:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001856:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <MX_SPI1_Init+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001868:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_SPI1_Init+0x74>)
 800186c:	2218      	movs	r2, #24
 800186e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001870:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001872:	2200      	movs	r2, #0
 8001874:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <MX_SPI1_Init+0x74>)
 800187e:	2200      	movs	r2, #0
 8001880:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001884:	2207      	movs	r2, #7
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <MX_SPI1_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001890:	2208      	movs	r2, #8
 8001892:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001896:	f003 ff35 	bl	8005704 <HAL_SPI_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80018a0:	f7ff ffc2 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	200001b0 	.word	0x200001b0
 80018ac:	40013000 	.word	0x40013000

080018b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a3c      	ldr	r2, [pc, #240]	; (80019c0 <HAL_SPI_MspInit+0x110>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d171      	bne.n	80019b6 <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018d2:	4b3c      	ldr	r3, [pc, #240]	; (80019c4 <HAL_SPI_MspInit+0x114>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a3b      	ldr	r2, [pc, #236]	; (80019c4 <HAL_SPI_MspInit+0x114>)
 80018d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
 80018de:	4b39      	ldr	r3, [pc, #228]	; (80019c4 <HAL_SPI_MspInit+0x114>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <HAL_SPI_MspInit+0x114>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a35      	ldr	r2, [pc, #212]	; (80019c4 <HAL_SPI_MspInit+0x114>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <HAL_SPI_MspInit+0x114>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001902:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <HAL_SPI_MspInit+0x114>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a2f      	ldr	r2, [pc, #188]	; (80019c4 <HAL_SPI_MspInit+0x114>)
 8001908:	f043 0308 	orr.w	r3, r3, #8
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <HAL_SPI_MspInit+0x114>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800191a:	2320      	movs	r3, #32
 800191c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800192a:	2305      	movs	r3, #5
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	4824      	ldr	r0, [pc, #144]	; (80019c8 <HAL_SPI_MspInit+0x118>)
 8001936:	f001 ff05 	bl	8003744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEDStripes_Pin;
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800194a:	2305      	movs	r3, #5
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEDStripes_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	481d      	ldr	r0, [pc, #116]	; (80019cc <HAL_SPI_MspInit+0x11c>)
 8001956:	f001 fef5 	bl	8003744 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <HAL_SPI_MspInit+0x120>)
 800195c:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_SPI_MspInit+0x124>)
 800195e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_SPI_MspInit+0x120>)
 8001962:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001966:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_SPI_MspInit+0x120>)
 800196a:	2240      	movs	r2, #64	; 0x40
 800196c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_SPI_MspInit+0x120>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_SPI_MspInit+0x120>)
 8001976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800197a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <HAL_SPI_MspInit+0x120>)
 800197e:	2200      	movs	r2, #0
 8001980:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_SPI_MspInit+0x120>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_SPI_MspInit+0x120>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <HAL_SPI_MspInit+0x120>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <HAL_SPI_MspInit+0x120>)
 8001996:	2200      	movs	r2, #0
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800199a:	480d      	ldr	r0, [pc, #52]	; (80019d0 <HAL_SPI_MspInit+0x120>)
 800199c:	f001 fac8 	bl	8002f30 <HAL_DMA_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 80019a6:	f7ff ff3f 	bl	8001828 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <HAL_SPI_MspInit+0x120>)
 80019ae:	655a      	str	r2, [r3, #84]	; 0x54
 80019b0:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <HAL_SPI_MspInit+0x120>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40013000 	.word	0x40013000
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020000 	.word	0x40020000
 80019cc:	40020c00 	.word	0x40020c00
 80019d0:	20000214 	.word	0x20000214
 80019d4:	40026458 	.word	0x40026458

080019d8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af04      	add	r7, sp, #16
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	2301      	movs	r3, #1
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	1dfb      	adds	r3, r7, #7
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2301      	movs	r3, #1
 8001a02:	2200      	movs	r2, #0
 8001a04:	2178      	movs	r1, #120	; 0x78
 8001a06:	4803      	ldr	r0, [pc, #12]	; (8001a14 <ssd1306_WriteCommand+0x2c>)
 8001a08:	f002 f90c 	bl	8003c24 <HAL_I2C_Mem_Write>
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	2000015c 	.word	0x2000015c

08001a18 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af04      	add	r7, sp, #16
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2a:	9202      	str	r2, [sp, #8]
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2301      	movs	r3, #1
 8001a34:	2240      	movs	r2, #64	; 0x40
 8001a36:	2178      	movs	r1, #120	; 0x78
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <ssd1306_WriteData+0x30>)
 8001a3a:	f002 f8f3 	bl	8003c24 <HAL_I2C_Mem_Write>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000015c 	.word	0x2000015c

08001a4c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001a50:	f7ff ffc2 	bl	80019d8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001a54:	2064      	movs	r0, #100	; 0x64
 8001a56:	f001 f80f 	bl	8002a78 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f000 f9ce 	bl	8001dfc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001a60:	2020      	movs	r0, #32
 8001a62:	f7ff ffc1 	bl	80019e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff ffbe 	bl	80019e8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a6c:	20b0      	movs	r0, #176	; 0xb0
 8001a6e:	f7ff ffbb 	bl	80019e8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001a72:	20c8      	movs	r0, #200	; 0xc8
 8001a74:	f7ff ffb8 	bl	80019e8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff ffb5 	bl	80019e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001a7e:	2010      	movs	r0, #16
 8001a80:	f7ff ffb2 	bl	80019e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001a84:	2040      	movs	r0, #64	; 0x40
 8001a86:	f7ff ffaf 	bl	80019e8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001a8a:	20ff      	movs	r0, #255	; 0xff
 8001a8c:	f000 f9a2 	bl	8001dd4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001a90:	20a1      	movs	r0, #161	; 0xa1
 8001a92:	f7ff ffa9 	bl	80019e8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001a96:	20a6      	movs	r0, #166	; 0xa6
 8001a98:	f7ff ffa6 	bl	80019e8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001a9c:	20a8      	movs	r0, #168	; 0xa8
 8001a9e:	f7ff ffa3 	bl	80019e8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001aa2:	203f      	movs	r0, #63	; 0x3f
 8001aa4:	f7ff ffa0 	bl	80019e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001aa8:	20a4      	movs	r0, #164	; 0xa4
 8001aaa:	f7ff ff9d 	bl	80019e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001aae:	20d3      	movs	r0, #211	; 0xd3
 8001ab0:	f7ff ff9a 	bl	80019e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7ff ff97 	bl	80019e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001aba:	20d5      	movs	r0, #213	; 0xd5
 8001abc:	f7ff ff94 	bl	80019e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ac0:	20f0      	movs	r0, #240	; 0xf0
 8001ac2:	f7ff ff91 	bl	80019e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001ac6:	20d9      	movs	r0, #217	; 0xd9
 8001ac8:	f7ff ff8e 	bl	80019e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001acc:	2022      	movs	r0, #34	; 0x22
 8001ace:	f7ff ff8b 	bl	80019e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001ad2:	20da      	movs	r0, #218	; 0xda
 8001ad4:	f7ff ff88 	bl	80019e8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001ad8:	2012      	movs	r0, #18
 8001ada:	f7ff ff85 	bl	80019e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ade:	20db      	movs	r0, #219	; 0xdb
 8001ae0:	f7ff ff82 	bl	80019e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ae4:	2020      	movs	r0, #32
 8001ae6:	f7ff ff7f 	bl	80019e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001aea:	208d      	movs	r0, #141	; 0x8d
 8001aec:	f7ff ff7c 	bl	80019e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001af0:	2014      	movs	r0, #20
 8001af2:	f7ff ff79 	bl	80019e8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001af6:	2001      	movs	r0, #1
 8001af8:	f000 f980 	bl	8001dfc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001afc:	2000      	movs	r0, #0
 8001afe:	f000 f80f 	bl	8001b20 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001b02:	f000 f825 	bl	8001b50 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <ssd1306_Init+0xd0>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <ssd1306_Init+0xd0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001b12:	4b02      	ldr	r3, [pc, #8]	; (8001b1c <ssd1306_Init+0xd0>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	711a      	strb	r2, [r3, #4]
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000674 	.word	0x20000674

08001b20 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <ssd1306_Fill+0x14>
 8001b30:	2300      	movs	r3, #0
 8001b32:	e000      	b.n	8001b36 <ssd1306_Fill+0x16>
 8001b34:	23ff      	movs	r3, #255	; 0xff
 8001b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <ssd1306_Fill+0x2c>)
 8001b3e:	f009 fe82 	bl	800b846 <memset>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000274 	.word	0x20000274

08001b50 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b56:	2300      	movs	r3, #0
 8001b58:	71fb      	strb	r3, [r7, #7]
 8001b5a:	e016      	b.n	8001b8a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	3b50      	subs	r3, #80	; 0x50
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ff40 	bl	80019e8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f7ff ff3d 	bl	80019e8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001b6e:	2010      	movs	r0, #16
 8001b70:	f7ff ff3a 	bl	80019e8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	01db      	lsls	r3, r3, #7
 8001b78:	4a08      	ldr	r2, [pc, #32]	; (8001b9c <ssd1306_UpdateScreen+0x4c>)
 8001b7a:	4413      	add	r3, r2
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff4a 	bl	8001a18 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	3301      	adds	r3, #1
 8001b88:	71fb      	strb	r3, [r7, #7]
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	2b07      	cmp	r3, #7
 8001b8e:	d9e5      	bls.n	8001b5c <ssd1306_UpdateScreen+0xc>
    }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000274 	.word	0x20000274

08001ba0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
 8001baa:	460b      	mov	r3, r1
 8001bac:	71bb      	strb	r3, [r7, #6]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	db3d      	blt.n	8001c36 <ssd1306_DrawPixel+0x96>
 8001bba:	79bb      	ldrb	r3, [r7, #6]
 8001bbc:	2b3f      	cmp	r3, #63	; 0x3f
 8001bbe:	d83a      	bhi.n	8001c36 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001bc0:	797b      	ldrb	r3, [r7, #5]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d11a      	bne.n	8001bfc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001bc6:	79fa      	ldrb	r2, [r7, #7]
 8001bc8:	79bb      	ldrb	r3, [r7, #6]
 8001bca:	08db      	lsrs	r3, r3, #3
 8001bcc:	b2d8      	uxtb	r0, r3
 8001bce:	4603      	mov	r3, r0
 8001bd0:	01db      	lsls	r3, r3, #7
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a1b      	ldr	r2, [pc, #108]	; (8001c44 <ssd1306_DrawPixel+0xa4>)
 8001bd6:	5cd3      	ldrb	r3, [r2, r3]
 8001bd8:	b25a      	sxtb	r2, r3
 8001bda:	79bb      	ldrb	r3, [r7, #6]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	2101      	movs	r1, #1
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	b25b      	sxtb	r3, r3
 8001be8:	4313      	orrs	r3, r2
 8001bea:	b259      	sxtb	r1, r3
 8001bec:	79fa      	ldrb	r2, [r7, #7]
 8001bee:	4603      	mov	r3, r0
 8001bf0:	01db      	lsls	r3, r3, #7
 8001bf2:	4413      	add	r3, r2
 8001bf4:	b2c9      	uxtb	r1, r1
 8001bf6:	4a13      	ldr	r2, [pc, #76]	; (8001c44 <ssd1306_DrawPixel+0xa4>)
 8001bf8:	54d1      	strb	r1, [r2, r3]
 8001bfa:	e01d      	b.n	8001c38 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001bfc:	79fa      	ldrb	r2, [r7, #7]
 8001bfe:	79bb      	ldrb	r3, [r7, #6]
 8001c00:	08db      	lsrs	r3, r3, #3
 8001c02:	b2d8      	uxtb	r0, r3
 8001c04:	4603      	mov	r3, r0
 8001c06:	01db      	lsls	r3, r3, #7
 8001c08:	4413      	add	r3, r2
 8001c0a:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <ssd1306_DrawPixel+0xa4>)
 8001c0c:	5cd3      	ldrb	r3, [r2, r3]
 8001c0e:	b25a      	sxtb	r2, r3
 8001c10:	79bb      	ldrb	r3, [r7, #6]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	2101      	movs	r1, #1
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	b25b      	sxtb	r3, r3
 8001c22:	4013      	ands	r3, r2
 8001c24:	b259      	sxtb	r1, r3
 8001c26:	79fa      	ldrb	r2, [r7, #7]
 8001c28:	4603      	mov	r3, r0
 8001c2a:	01db      	lsls	r3, r3, #7
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b2c9      	uxtb	r1, r1
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <ssd1306_DrawPixel+0xa4>)
 8001c32:	54d1      	strb	r1, [r2, r3]
 8001c34:	e000      	b.n	8001c38 <ssd1306_DrawPixel+0x98>
        return;
 8001c36:	bf00      	nop
    }
}
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000274 	.word	0x20000274

08001c48 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4604      	mov	r4, r0
 8001c50:	1d38      	adds	r0, r7, #4
 8001c52:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c56:	461a      	mov	r2, r3
 8001c58:	4623      	mov	r3, r4
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2b1f      	cmp	r3, #31
 8001c64:	d902      	bls.n	8001c6c <ssd1306_WriteChar+0x24>
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	2b7e      	cmp	r3, #126	; 0x7e
 8001c6a:	d901      	bls.n	8001c70 <ssd1306_WriteChar+0x28>
        return 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e06d      	b.n	8001d4c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c70:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <ssd1306_WriteChar+0x10c>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	793b      	ldrb	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	2b80      	cmp	r3, #128	; 0x80
 8001c7c:	dc06      	bgt.n	8001c8c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001c7e:	4b35      	ldr	r3, [pc, #212]	; (8001d54 <ssd1306_WriteChar+0x10c>)
 8001c80:	885b      	ldrh	r3, [r3, #2]
 8001c82:	461a      	mov	r2, r3
 8001c84:	797b      	ldrb	r3, [r7, #5]
 8001c86:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c88:	2b40      	cmp	r3, #64	; 0x40
 8001c8a:	dd01      	ble.n	8001c90 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e05d      	b.n	8001d4c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	e04c      	b.n	8001d30 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	3b20      	subs	r3, #32
 8001c9c:	7979      	ldrb	r1, [r7, #5]
 8001c9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	440b      	add	r3, r1
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	e034      	b.n	8001d20 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d012      	beq.n	8001cec <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <ssd1306_WriteChar+0x10c>)
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	b2d8      	uxtb	r0, r3
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <ssd1306_WriteChar+0x10c>)
 8001cd6:	885b      	ldrh	r3, [r3, #2]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	4413      	add	r3, r2
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	7bba      	ldrb	r2, [r7, #14]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f7ff ff5b 	bl	8001ba0 <ssd1306_DrawPixel>
 8001cea:	e016      	b.n	8001d1a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <ssd1306_WriteChar+0x10c>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	b2d8      	uxtb	r0, r3
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <ssd1306_WriteChar+0x10c>)
 8001cfc:	885b      	ldrh	r3, [r3, #2]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	b2d9      	uxtb	r1, r3
 8001d08:	7bbb      	ldrb	r3, [r7, #14]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	bf0c      	ite	eq
 8001d0e:	2301      	moveq	r3, #1
 8001d10:	2300      	movne	r3, #0
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	461a      	mov	r2, r3
 8001d16:	f7ff ff43 	bl	8001ba0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	793b      	ldrb	r3, [r7, #4]
 8001d22:	461a      	mov	r2, r3
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d3c5      	bcc.n	8001cb6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	797b      	ldrb	r3, [r7, #5]
 8001d32:	461a      	mov	r2, r3
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d3ad      	bcc.n	8001c96 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <ssd1306_WriteChar+0x10c>)
 8001d3c:	881a      	ldrh	r2, [r3, #0]
 8001d3e:	793b      	ldrb	r3, [r7, #4]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4413      	add	r3, r2
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <ssd1306_WriteChar+0x10c>)
 8001d48:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3724      	adds	r7, #36	; 0x24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd90      	pop	{r4, r7, pc}
 8001d54:	20000674 	.word	0x20000674

08001d58 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	1d38      	adds	r0, r7, #4
 8001d62:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d66:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001d68:	e012      	b.n	8001d90 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	7818      	ldrb	r0, [r3, #0]
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	1d3a      	adds	r2, r7, #4
 8001d72:	ca06      	ldmia	r2, {r1, r2}
 8001d74:	f7ff ff68 	bl	8001c48 <ssd1306_WriteChar>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d002      	beq.n	8001d8a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	e008      	b.n	8001d9c <ssd1306_WriteString+0x44>
        }
        str++;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1e8      	bne.n	8001d6a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	781b      	ldrb	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	460a      	mov	r2, r1
 8001dae:	71fb      	strb	r3, [r7, #7]
 8001db0:	4613      	mov	r3, r2
 8001db2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <ssd1306_SetCursor+0x2c>)
 8001dba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001dbc:	79bb      	ldrb	r3, [r7, #6]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <ssd1306_SetCursor+0x2c>)
 8001dc2:	805a      	strh	r2, [r3, #2]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	20000674 	.word	0x20000674

08001dd4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001dde:	2381      	movs	r3, #129	; 0x81
 8001de0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fdff 	bl	80019e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fdfb 	bl	80019e8 <ssd1306_WriteCommand>
}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001e0c:	23af      	movs	r3, #175	; 0xaf
 8001e0e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <ssd1306_SetDisplayOn+0x38>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	715a      	strb	r2, [r3, #5]
 8001e16:	e004      	b.n	8001e22 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001e18:	23ae      	movs	r3, #174	; 0xae
 8001e1a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <ssd1306_SetDisplayOn+0x38>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fddf 	bl	80019e8 <ssd1306_WriteCommand>
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000674 	.word	0x20000674

08001e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	210f      	movs	r1, #15
 8001e72:	f06f 0001 	mvn.w	r0, #1
 8001e76:	f000 fedb 	bl	8002c30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800

08001e88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08e      	sub	sp, #56	; 0x38
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e98:	4b33      	ldr	r3, [pc, #204]	; (8001f68 <HAL_InitTick+0xe0>)
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	4a32      	ldr	r2, [pc, #200]	; (8001f68 <HAL_InitTick+0xe0>)
 8001e9e:	f043 0310 	orr.w	r3, r3, #16
 8001ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea4:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <HAL_InitTick+0xe0>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eb0:	f107 0210 	add.w	r2, r7, #16
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f002 ffc8 	bl	8004e50 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001eca:	f002 ff99 	bl	8004e00 <HAL_RCC_GetPCLK1Freq>
 8001ece:	6378      	str	r0, [r7, #52]	; 0x34
 8001ed0:	e004      	b.n	8001edc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ed2:	f002 ff95 	bl	8004e00 <HAL_RCC_GetPCLK1Freq>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ede:	4a23      	ldr	r2, [pc, #140]	; (8001f6c <HAL_InitTick+0xe4>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	0c9b      	lsrs	r3, r3, #18
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001eea:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <HAL_InitTick+0xe8>)
 8001eec:	4a21      	ldr	r2, [pc, #132]	; (8001f74 <HAL_InitTick+0xec>)
 8001eee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ef0:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <HAL_InitTick+0xe8>)
 8001ef2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ef6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <HAL_InitTick+0xe8>)
 8001efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001efe:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <HAL_InitTick+0xe8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f04:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <HAL_InitTick+0xe8>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0a:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_InitTick+0xe8>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001f10:	4817      	ldr	r0, [pc, #92]	; (8001f70 <HAL_InitTick+0xe8>)
 8001f12:	f004 f92d 	bl	8006170 <HAL_TIM_Base_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001f1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d11b      	bne.n	8001f5c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001f24:	4812      	ldr	r0, [pc, #72]	; (8001f70 <HAL_InitTick+0xe8>)
 8001f26:	f004 f985 	bl	8006234 <HAL_TIM_Base_Start_IT>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001f30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d111      	bne.n	8001f5c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f38:	2036      	movs	r0, #54	; 0x36
 8001f3a:	f000 fe95 	bl	8002c68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b0f      	cmp	r3, #15
 8001f42:	d808      	bhi.n	8001f56 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001f44:	2200      	movs	r2, #0
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	2036      	movs	r0, #54	; 0x36
 8001f4a:	f000 fe71 	bl	8002c30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <HAL_InitTick+0xf0>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	e002      	b.n	8001f5c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3738      	adds	r7, #56	; 0x38
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	431bde83 	.word	0x431bde83
 8001f70:	2000067c 	.word	0x2000067c
 8001f74:	40001000 	.word	0x40001000
 8001f78:	2000005c 	.word	0x2000005c

08001f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <NMI_Handler+0x4>

08001f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <HardFault_Handler+0x4>

08001f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <MemManage_Handler+0x4>

08001f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <BusFault_Handler+0x4>

08001f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <UsageFault_Handler+0x4>

08001f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <TIM6_DAC_IRQHandler+0x20>)
 8001fae:	791b      	ldrb	r3, [r3, #4]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001fb6:	4804      	ldr	r0, [pc, #16]	; (8001fc8 <TIM6_DAC_IRQHandler+0x20>)
 8001fb8:	f000 fed8 	bl	8002d6c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001fbc:	4803      	ldr	r0, [pc, #12]	; (8001fcc <TIM6_DAC_IRQHandler+0x24>)
 8001fbe:	f004 fb03 	bl	80065c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000108 	.word	0x20000108
 8001fcc:	2000067c 	.word	0x2000067c

08001fd0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <DMA2_Stream3_IRQHandler+0x10>)
 8001fd6:	f001 f94b 	bl	8003270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000214 	.word	0x20000214

08001fe4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <USART6_IRQHandler+0x10>)
 8001fea:	f005 f9ab 	bl	8007344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000718 	.word	0x20000718

08001ff8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	e00a      	b.n	8002020 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800200a:	f3af 8000 	nop.w
 800200e:	4601      	mov	r1, r0
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	60ba      	str	r2, [r7, #8]
 8002016:	b2ca      	uxtb	r2, r1
 8002018:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3301      	adds	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	dbf0      	blt.n	800200a <_read+0x12>
  }

  return len;
 8002028:	687b      	ldr	r3, [r7, #4]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e009      	b.n	8002058 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	60ba      	str	r2, [r7, #8]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	dbf1      	blt.n	8002044 <_write+0x12>
  }
  return len;
 8002060:	687b      	ldr	r3, [r7, #4]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_close>:

int _close(int file)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002092:	605a      	str	r2, [r3, #4]
  return 0;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <_isatty>:

int _isatty(int file)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020aa:	2301      	movs	r3, #1
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020dc:	4a14      	ldr	r2, [pc, #80]	; (8002130 <_sbrk+0x5c>)
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <_sbrk+0x60>)
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <_sbrk+0x64>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <_sbrk+0x64>)
 80020f2:	4a12      	ldr	r2, [pc, #72]	; (800213c <_sbrk+0x68>)
 80020f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <_sbrk+0x64>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	429a      	cmp	r2, r3
 8002102:	d207      	bcs.n	8002114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002104:	f009 fc52 	bl	800b9ac <__errno>
 8002108:	4603      	mov	r3, r0
 800210a:	220c      	movs	r2, #12
 800210c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
 8002112:	e009      	b.n	8002128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <_sbrk+0x64>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	4a05      	ldr	r2, [pc, #20]	; (8002138 <_sbrk+0x64>)
 8002124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002126:	68fb      	ldr	r3, [r7, #12]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20080000 	.word	0x20080000
 8002134:	00000400 	.word	0x00000400
 8002138:	200006c8 	.word	0x200006c8
 800213c:	20005310 	.word	0x20005310

08002140 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <SystemInit+0x20>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <SystemInit+0x20>)
 800214c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800216a:	f107 031c 	add.w	r3, r7, #28
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002176:	463b      	mov	r3, r7
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
 8002184:	615a      	str	r2, [r3, #20]
 8002186:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002188:	4b21      	ldr	r3, [pc, #132]	; (8002210 <MX_TIM4_Init+0xac>)
 800218a:	4a22      	ldr	r2, [pc, #136]	; (8002214 <MX_TIM4_Init+0xb0>)
 800218c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32-1;
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <MX_TIM4_Init+0xac>)
 8002190:	221f      	movs	r2, #31
 8002192:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002194:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <MX_TIM4_Init+0xac>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <MX_TIM4_Init+0xac>)
 800219c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <MX_TIM4_Init+0xac>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <MX_TIM4_Init+0xac>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021ae:	4818      	ldr	r0, [pc, #96]	; (8002210 <MX_TIM4_Init+0xac>)
 80021b0:	f004 f8b8 	bl	8006324 <HAL_TIM_PWM_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80021ba:	f7ff fb35 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	4619      	mov	r1, r3
 80021cc:	4810      	ldr	r0, [pc, #64]	; (8002210 <MX_TIM4_Init+0xac>)
 80021ce:	f004 ff7b 	bl	80070c8 <HAL_TIMEx_MasterConfigSynchronization>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80021d8:	f7ff fb26 	bl	8001828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021dc:	2360      	movs	r3, #96	; 0x60
 80021de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021ec:	463b      	mov	r3, r7
 80021ee:	2208      	movs	r2, #8
 80021f0:	4619      	mov	r1, r3
 80021f2:	4807      	ldr	r0, [pc, #28]	; (8002210 <MX_TIM4_Init+0xac>)
 80021f4:	f004 fb08 	bl	8006808 <HAL_TIM_PWM_ConfigChannel>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80021fe:	f7ff fb13 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002202:	4803      	ldr	r0, [pc, #12]	; (8002210 <MX_TIM4_Init+0xac>)
 8002204:	f000 f828 	bl	8002258 <HAL_TIM_MspPostInit>

}
 8002208:	bf00      	nop
 800220a:	3728      	adds	r7, #40	; 0x28
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	200006cc 	.word	0x200006cc
 8002214:	40000800 	.word	0x40000800

08002218 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <HAL_TIM_PWM_MspInit+0x38>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d10b      	bne.n	8002242 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_TIM_PWM_MspInit+0x3c>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a09      	ldr	r2, [pc, #36]	; (8002254 <HAL_TIM_PWM_MspInit+0x3c>)
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <HAL_TIM_PWM_MspInit+0x3c>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40000800 	.word	0x40000800
 8002254:	40023800 	.word	0x40023800

08002258 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a11      	ldr	r2, [pc, #68]	; (80022bc <HAL_TIM_MspPostInit+0x64>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d11c      	bne.n	80022b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_TIM_MspPostInit+0x68>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <HAL_TIM_MspPostInit+0x68>)
 8002280:	f043 0308 	orr.w	r3, r3, #8
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HAL_TIM_MspPostInit+0x68>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = StepperMotorStep_Pin;
 8002292:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002296:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022a4:	2302      	movs	r3, #2
 80022a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(StepperMotorStep_GPIO_Port, &GPIO_InitStruct);
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	4619      	mov	r1, r3
 80022ae:	4805      	ldr	r0, [pc, #20]	; (80022c4 <HAL_TIM_MspPostInit+0x6c>)
 80022b0:	f001 fa48 	bl	8003744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80022b4:	bf00      	nop
 80022b6:	3720      	adds	r7, #32
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40000800 	.word	0x40000800
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020c00 	.word	0x40020c00

080022c8 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <MX_USART6_UART_Init+0x58>)
 80022ce:	4a15      	ldr	r2, [pc, #84]	; (8002324 <MX_USART6_UART_Init+0x5c>)
 80022d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80022d2:	4b13      	ldr	r3, [pc, #76]	; (8002320 <MX_USART6_UART_Init+0x58>)
 80022d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <MX_USART6_UART_Init+0x58>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <MX_USART6_UART_Init+0x58>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <MX_USART6_UART_Init+0x58>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <MX_USART6_UART_Init+0x58>)
 80022ee:	220c      	movs	r2, #12
 80022f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <MX_USART6_UART_Init+0x58>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <MX_USART6_UART_Init+0x58>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <MX_USART6_UART_Init+0x58>)
 8002300:	2200      	movs	r2, #0
 8002302:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <MX_USART6_UART_Init+0x58>)
 8002306:	2200      	movs	r2, #0
 8002308:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800230a:	4805      	ldr	r0, [pc, #20]	; (8002320 <MX_USART6_UART_Init+0x58>)
 800230c:	f004 ff88 	bl	8007220 <HAL_UART_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002316:	f7ff fa87 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000718 	.word	0x20000718
 8002324:	40011400 	.word	0x40011400

08002328 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b0ae      	sub	sp, #184	; 0xb8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	2290      	movs	r2, #144	; 0x90
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f009 fa7c 	bl	800b846 <memset>
  if(uartHandle->Instance==USART6)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a26      	ldr	r2, [pc, #152]	; (80023ec <HAL_UART_MspInit+0xc4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d144      	bne.n	80023e2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002358:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800235c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800235e:	2300      	movs	r3, #0
 8002360:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4618      	mov	r0, r3
 8002368:	f002 fda4 	bl	8004eb4 <HAL_RCCEx_PeriphCLKConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002372:	f7ff fa59 	bl	8001828 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002376:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <HAL_UART_MspInit+0xc8>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <HAL_UART_MspInit+0xc8>)
 800237c:	f043 0320 	orr.w	r3, r3, #32
 8002380:	6453      	str	r3, [r2, #68]	; 0x44
 8002382:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <HAL_UART_MspInit+0xc8>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_UART_MspInit+0xc8>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a17      	ldr	r2, [pc, #92]	; (80023f0 <HAL_UART_MspInit+0xc8>)
 8002394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_UART_MspInit+0xc8>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = RPiPicoW_TX_Pin|RPiPicoW_RX_Pin;
 80023a6:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80023aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80023c0:	2308      	movs	r3, #8
 80023c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023ca:	4619      	mov	r1, r3
 80023cc:	4809      	ldr	r0, [pc, #36]	; (80023f4 <HAL_UART_MspInit+0xcc>)
 80023ce:	f001 f9b9 	bl	8003744 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2105      	movs	r1, #5
 80023d6:	2047      	movs	r0, #71	; 0x47
 80023d8:	f000 fc2a 	bl	8002c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80023dc:	2047      	movs	r0, #71	; 0x47
 80023de:	f000 fc43 	bl	8002c68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80023e2:	bf00      	nop
 80023e4:	37b8      	adds	r7, #184	; 0xb8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40011400 	.word	0x40011400
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40021800 	.word	0x40021800

080023f8 <ws2812b_init>:
static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);
static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);

// ======== Public Functions =======================================================================

int ws2812b_init(ws2812b_handle_t *ws) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  // Point ws2812b_error_msg to error buffer unless error message buffer is disabled.
#ifndef WS2812B_DISABLE_ERROR_MSG
  ws2812b_error_msg = error_msg_buf;
 8002400:	4b7a      	ldr	r3, [pc, #488]	; (80025ec <ws2812b_init+0x1f4>)
 8002402:	4a7b      	ldr	r2, [pc, #492]	; (80025f0 <ws2812b_init+0x1f8>)
 8002404:	601a      	str	r2, [r3, #0]
  error_msg_buf[0] = '\0';
 8002406:	4b7a      	ldr	r3, [pc, #488]	; (80025f0 <ws2812b_init+0x1f8>)
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
#else  /* WS2812B_DISABLE_ERROR_MSG */
  ws2812b_error_msg = 0;
#endif /* WS2812B_DISABLE_ERROR_MSG */

  // Assert packing is valid
  WS2812B_INIT_ASSERT((ws->config.packing == WS2812B_PACKING_DOUBLE) ||
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d009      	beq.n	8002428 <ws2812b_init+0x30>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d005      	beq.n	8002428 <ws2812b_init+0x30>
 800241c:	4875      	ldr	r0, [pc, #468]	; (80025f4 <ws2812b_init+0x1fc>)
 800241e:	f000 f9f5 	bl	800280c <set_init_error_msg>
 8002422:	f04f 33ff 	mov.w	r3, #4294967295
 8002426:	e17f      	b.n	8002728 <ws2812b_init+0x330>
                          (ws->config.packing == WS2812B_PACKING_SINGLE),
                      "ws2812b: config.packing is invalid!");

  // Assert pulse_len_1 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_1),
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	789b      	ldrb	r3, [r3, #2]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d01d      	beq.n	800246c <ws2812b_init+0x74>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	789b      	ldrb	r3, [r3, #2]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d019      	beq.n	800246c <ws2812b_init+0x74>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	789b      	ldrb	r3, [r3, #2]
 800243c:	2b07      	cmp	r3, #7
 800243e:	d015      	beq.n	800246c <ws2812b_init+0x74>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	789b      	ldrb	r3, [r3, #2]
 8002444:	2b0f      	cmp	r3, #15
 8002446:	d011      	beq.n	800246c <ws2812b_init+0x74>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	789b      	ldrb	r3, [r3, #2]
 800244c:	2b3f      	cmp	r3, #63	; 0x3f
 800244e:	d00d      	beq.n	800246c <ws2812b_init+0x74>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	789b      	ldrb	r3, [r3, #2]
 8002454:	2b1f      	cmp	r3, #31
 8002456:	d009      	beq.n	800246c <ws2812b_init+0x74>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	789b      	ldrb	r3, [r3, #2]
 800245c:	2b7f      	cmp	r3, #127	; 0x7f
 800245e:	d005      	beq.n	800246c <ws2812b_init+0x74>
 8002460:	4865      	ldr	r0, [pc, #404]	; (80025f8 <ws2812b_init+0x200>)
 8002462:	f000 f9d3 	bl	800280c <set_init_error_msg>
 8002466:	f04f 33ff 	mov.w	r3, #4294967295
 800246a:	e15d      	b.n	8002728 <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_1 is invalid!");

  // Asert pulse_len_0 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_0),
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	785b      	ldrb	r3, [r3, #1]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d01d      	beq.n	80024b0 <ws2812b_init+0xb8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	785b      	ldrb	r3, [r3, #1]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d019      	beq.n	80024b0 <ws2812b_init+0xb8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	785b      	ldrb	r3, [r3, #1]
 8002480:	2b07      	cmp	r3, #7
 8002482:	d015      	beq.n	80024b0 <ws2812b_init+0xb8>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	785b      	ldrb	r3, [r3, #1]
 8002488:	2b0f      	cmp	r3, #15
 800248a:	d011      	beq.n	80024b0 <ws2812b_init+0xb8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	785b      	ldrb	r3, [r3, #1]
 8002490:	2b3f      	cmp	r3, #63	; 0x3f
 8002492:	d00d      	beq.n	80024b0 <ws2812b_init+0xb8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	785b      	ldrb	r3, [r3, #1]
 8002498:	2b1f      	cmp	r3, #31
 800249a:	d009      	beq.n	80024b0 <ws2812b_init+0xb8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	785b      	ldrb	r3, [r3, #1]
 80024a0:	2b7f      	cmp	r3, #127	; 0x7f
 80024a2:	d005      	beq.n	80024b0 <ws2812b_init+0xb8>
 80024a4:	4855      	ldr	r0, [pc, #340]	; (80025fc <ws2812b_init+0x204>)
 80024a6:	f000 f9b1 	bl	800280c <set_init_error_msg>
 80024aa:	f04f 33ff 	mov.w	r3, #4294967295
 80024ae:	e13b      	b.n	8002728 <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_0 is invalid!");

  // Assert first_bit_0 is valid
  WS2812B_INIT_ASSERT((ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_DISABLED) ||
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	78db      	ldrb	r3, [r3, #3]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d009      	beq.n	80024cc <ws2812b_init+0xd4>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	78db      	ldrb	r3, [r3, #3]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d005      	beq.n	80024cc <ws2812b_init+0xd4>
 80024c0:	484f      	ldr	r0, [pc, #316]	; (8002600 <ws2812b_init+0x208>)
 80024c2:	f000 f9a3 	bl	800280c <set_init_error_msg>
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ca:	e12d      	b.n	8002728 <ws2812b_init+0x330>
                          (ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_ENABLED),
                      "ws2812b: config.first_bit_0 is invalid!");

  // Assert spi_bit_order is valid
  WS2812B_INIT_ASSERT((ws->config.spi_bit_order == WS2812B_LSB_FIRST) ||
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	791b      	ldrb	r3, [r3, #4]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d009      	beq.n	80024e8 <ws2812b_init+0xf0>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	791b      	ldrb	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <ws2812b_init+0xf0>
 80024dc:	4849      	ldr	r0, [pc, #292]	; (8002604 <ws2812b_init+0x20c>)
 80024de:	f000 f995 	bl	800280c <set_init_error_msg>
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	e11f      	b.n	8002728 <ws2812b_init+0x330>
                          (ws->config.spi_bit_order == WS2812B_MSB_FIRST),
                      "ws2812b: config.spi_bit_order is invalid!");

  // Assert that the '1' pulse is longer than the '0' pulse:
  WS2812B_INIT_ASSERT(ws->config.pulse_len_1 > ws->config.pulse_len_0,
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	789a      	ldrb	r2, [r3, #2]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	785b      	ldrb	r3, [r3, #1]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d805      	bhi.n	8002500 <ws2812b_init+0x108>
 80024f4:	4844      	ldr	r0, [pc, #272]	; (8002608 <ws2812b_init+0x210>)
 80024f6:	f000 f989 	bl	800280c <set_init_error_msg>
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295
 80024fe:	e113      	b.n	8002728 <ws2812b_init+0x330>
                      "ws2812b: One-pulse must be longer than zero-pulse!");

  // Assert that pulse is not too long if in double packing:
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d109      	bne.n	800251c <ws2812b_init+0x124>
    WS2812B_INIT_ASSERT(ws->config.pulse_len_1 < WS2812B_PULSE_LEN_4b,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	789b      	ldrb	r3, [r3, #2]
 800250c:	2b0e      	cmp	r3, #14
 800250e:	d905      	bls.n	800251c <ws2812b_init+0x124>
 8002510:	483e      	ldr	r0, [pc, #248]	; (800260c <ws2812b_init+0x214>)
 8002512:	f000 f97b 	bl	800280c <set_init_error_msg>
 8002516:	f04f 33ff 	mov.w	r3, #4294967295
 800251a:	e105      	b.n	8002728 <ws2812b_init+0x330>
                        "ws2812b: Pulse is too long for double packing!");
  }

  // Apply 0 prefix to pulse if selected
  ws->state.pulse_0 = ws->config.pulse_len_0 << ws->config.first_bit_0;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	785b      	ldrb	r3, [r3, #1]
 8002520:	461a      	mov	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	78db      	ldrb	r3, [r3, #3]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	b2da      	uxtb	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	765a      	strb	r2, [r3, #25]
  ws->state.pulse_1 = ws->config.pulse_len_1 << ws->config.first_bit_0;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	789b      	ldrb	r3, [r3, #2]
 8002534:	461a      	mov	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	78db      	ldrb	r3, [r3, #3]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	b2da      	uxtb	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	761a      	strb	r2, [r3, #24]

  // Pulse needs to be reverse for MSB-first transmission:
  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	791b      	ldrb	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	f040 80e9 	bne.w	8002720 <ws2812b_init+0x328>
    if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d15c      	bne.n	8002610 <ws2812b_init+0x218>
      ws->state.pulse_0 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_0);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	7e5b      	ldrb	r3, [r3, #25]
 800255a:	10db      	asrs	r3, r3, #3
 800255c:	b25b      	sxtb	r3, r3
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	b25a      	sxtb	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	7e5b      	ldrb	r3, [r3, #25]
 8002568:	105b      	asrs	r3, r3, #1
 800256a:	b25b      	sxtb	r3, r3
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	b25b      	sxtb	r3, r3
 8002572:	4313      	orrs	r3, r2
 8002574:	b25a      	sxtb	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	7e5b      	ldrb	r3, [r3, #25]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	b25b      	sxtb	r3, r3
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	b25b      	sxtb	r3, r3
 8002584:	4313      	orrs	r3, r2
 8002586:	b25a      	sxtb	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7e5b      	ldrb	r3, [r3, #25]
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	b25b      	sxtb	r3, r3
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	b25b      	sxtb	r3, r3
 8002596:	4313      	orrs	r3, r2
 8002598:	b25b      	sxtb	r3, r3
 800259a:	b2da      	uxtb	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	7e1b      	ldrb	r3, [r3, #24]
 80025a4:	10db      	asrs	r3, r3, #3
 80025a6:	b25b      	sxtb	r3, r3
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	b25a      	sxtb	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	7e1b      	ldrb	r3, [r3, #24]
 80025b2:	105b      	asrs	r3, r3, #1
 80025b4:	b25b      	sxtb	r3, r3
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	b25b      	sxtb	r3, r3
 80025bc:	4313      	orrs	r3, r2
 80025be:	b25a      	sxtb	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7e1b      	ldrb	r3, [r3, #24]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	b25b      	sxtb	r3, r3
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	4313      	orrs	r3, r2
 80025d0:	b25a      	sxtb	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7e1b      	ldrb	r3, [r3, #24]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	b25b      	sxtb	r3, r3
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	4313      	orrs	r3, r2
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	761a      	strb	r2, [r3, #24]
 80025ea:	e099      	b.n	8002720 <ws2812b_init+0x328>
 80025ec:	200007a0 	.word	0x200007a0
 80025f0:	200007a4 	.word	0x200007a4
 80025f4:	0800c698 	.word	0x0800c698
 80025f8:	0800c6bc 	.word	0x0800c6bc
 80025fc:	0800c6e4 	.word	0x0800c6e4
 8002600:	0800c70c 	.word	0x0800c70c
 8002604:	0800c734 	.word	0x0800c734
 8002608:	0800c760 	.word	0x0800c760
 800260c:	0800c794 	.word	0x0800c794
    } else {
      ws->state.pulse_0 = WS2812B_BYTE_REVERSE(ws->state.pulse_0);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	7e5b      	ldrb	r3, [r3, #25]
 8002614:	09db      	lsrs	r3, r3, #7
 8002616:	b2db      	uxtb	r3, r3
 8002618:	b25a      	sxtb	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	7e5b      	ldrb	r3, [r3, #25]
 800261e:	115b      	asrs	r3, r3, #5
 8002620:	b25b      	sxtb	r3, r3
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	b25b      	sxtb	r3, r3
 8002628:	4313      	orrs	r3, r2
 800262a:	b25a      	sxtb	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7e5b      	ldrb	r3, [r3, #25]
 8002630:	10db      	asrs	r3, r3, #3
 8002632:	b25b      	sxtb	r3, r3
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	b25b      	sxtb	r3, r3
 800263a:	4313      	orrs	r3, r2
 800263c:	b25a      	sxtb	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7e5b      	ldrb	r3, [r3, #25]
 8002642:	105b      	asrs	r3, r3, #1
 8002644:	b25b      	sxtb	r3, r3
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	b25b      	sxtb	r3, r3
 800264c:	4313      	orrs	r3, r2
 800264e:	b25a      	sxtb	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	7e5b      	ldrb	r3, [r3, #25]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	b25b      	sxtb	r3, r3
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	b25b      	sxtb	r3, r3
 800265e:	4313      	orrs	r3, r2
 8002660:	b25a      	sxtb	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	7e5b      	ldrb	r3, [r3, #25]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	b25b      	sxtb	r3, r3
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	b25b      	sxtb	r3, r3
 8002670:	4313      	orrs	r3, r2
 8002672:	b25a      	sxtb	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7e5b      	ldrb	r3, [r3, #25]
 8002678:	015b      	lsls	r3, r3, #5
 800267a:	b25b      	sxtb	r3, r3
 800267c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002680:	b25b      	sxtb	r3, r3
 8002682:	4313      	orrs	r3, r2
 8002684:	b25a      	sxtb	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	7e5b      	ldrb	r3, [r3, #25]
 800268a:	01db      	lsls	r3, r3, #7
 800268c:	b25b      	sxtb	r3, r3
 800268e:	4313      	orrs	r3, r2
 8002690:	b25b      	sxtb	r3, r3
 8002692:	b2da      	uxtb	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_BYTE_REVERSE(ws->state.pulse_1);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	7e1b      	ldrb	r3, [r3, #24]
 800269c:	09db      	lsrs	r3, r3, #7
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	b25a      	sxtb	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	7e1b      	ldrb	r3, [r3, #24]
 80026a6:	115b      	asrs	r3, r3, #5
 80026a8:	b25b      	sxtb	r3, r3
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	b25b      	sxtb	r3, r3
 80026b0:	4313      	orrs	r3, r2
 80026b2:	b25a      	sxtb	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	7e1b      	ldrb	r3, [r3, #24]
 80026b8:	10db      	asrs	r3, r3, #3
 80026ba:	b25b      	sxtb	r3, r3
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	b25b      	sxtb	r3, r3
 80026c2:	4313      	orrs	r3, r2
 80026c4:	b25a      	sxtb	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	7e1b      	ldrb	r3, [r3, #24]
 80026ca:	105b      	asrs	r3, r3, #1
 80026cc:	b25b      	sxtb	r3, r3
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	b25b      	sxtb	r3, r3
 80026d4:	4313      	orrs	r3, r2
 80026d6:	b25a      	sxtb	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7e1b      	ldrb	r3, [r3, #24]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	b25b      	sxtb	r3, r3
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	4313      	orrs	r3, r2
 80026e8:	b25a      	sxtb	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7e1b      	ldrb	r3, [r3, #24]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	b25b      	sxtb	r3, r3
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	b25b      	sxtb	r3, r3
 80026f8:	4313      	orrs	r3, r2
 80026fa:	b25a      	sxtb	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7e1b      	ldrb	r3, [r3, #24]
 8002700:	015b      	lsls	r3, r3, #5
 8002702:	b25b      	sxtb	r3, r3
 8002704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002708:	b25b      	sxtb	r3, r3
 800270a:	4313      	orrs	r3, r2
 800270c:	b25a      	sxtb	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	7e1b      	ldrb	r3, [r3, #24]
 8002712:	01db      	lsls	r3, r3, #7
 8002714:	b25b      	sxtb	r3, r3
 8002716:	4313      	orrs	r3, r2
 8002718:	b25b      	sxtb	r3, r3
 800271a:	b2da      	uxtb	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	761a      	strb	r2, [r3, #24]
    }
  }

  ws->state.iteration_index = 0;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]

  return 0;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <ws2812b_required_buffer_len>:

uint32_t ws2812b_required_buffer_len(ws2812b_handle_t *ws) {
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  return WS2812B_REQUIRED_BUFFER_LEN(ws->led_count, ws->config.packing, ws->config.prefix_len,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <ws2812b_required_buffer_len+0x18>
 8002744:	2318      	movs	r3, #24
 8002746:	e000      	b.n	800274a <ws2812b_required_buffer_len+0x1a>
 8002748:	230c      	movs	r3, #12
 800274a:	fb03 f202 	mul.w	r2, r3, r2
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	441a      	add	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4413      	add	r3, r2
                                     ws->config.suffix_len);
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <ws2812b_fill_buffer>:

void ws2812b_fill_buffer(ws2812b_handle_t *ws, uint8_t *buffer) {
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]
  ws2812b_led_t *led = ws->leds;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	617b      	str	r3, [r7, #20]

  // Add 0x00 prefix
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	e008      	b.n	800278e <ws2812b_fill_buffer+0x28>
    *buffer = 0x00;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
    buffer++;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	3301      	adds	r3, #1
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	429a      	cmp	r2, r3
 8002796:	d3f1      	bcc.n	800277c <ws2812b_fill_buffer+0x16>
  }

  // Fill buffer
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	e01a      	b.n	80027d4 <ws2812b_fill_buffer+0x6e>
    add_byte(ws, led->green, &buffer);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	785b      	ldrb	r3, [r3, #1]
 80027a2:	463a      	mov	r2, r7
 80027a4:	4619      	mov	r1, r3
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f85a 	bl	8002860 <add_byte>
    add_byte(ws, led->red, &buffer);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	463a      	mov	r2, r7
 80027b2:	4619      	mov	r1, r3
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f853 	bl	8002860 <add_byte>
    add_byte(ws, led->blue, &buffer);
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	789b      	ldrb	r3, [r3, #2]
 80027be:	463a      	mov	r2, r7
 80027c0:	4619      	mov	r1, r3
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f84c 	bl	8002860 <add_byte>
    led++;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	3303      	adds	r3, #3
 80027cc:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < ws->led_count; i++) {
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	3301      	adds	r3, #1
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d3df      	bcc.n	800279e <ws2812b_fill_buffer+0x38>
  }

  // Add 0x00 suffix
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	e008      	b.n	80027f6 <ws2812b_fill_buffer+0x90>
    *buffer = 0x00;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
    buffer++;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	3301      	adds	r3, #1
 80027ee:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	3301      	adds	r3, #1
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d3f1      	bcc.n	80027e4 <ws2812b_fill_buffer+0x7e>
  }
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <set_init_error_msg>:
  return 0x00;
}

// ======== Private Functions ======================================================================

static void set_init_error_msg(const char *error_msg) {
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
#ifndef WS2812B_DISABLE_ERROR_MSG
  // If error mesages are enabled, copy over the error message
  int i = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]

  // Copy content
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 8002818:	e00b      	b.n	8002832 <set_init_error_msg+0x26>
    error_msg_buf[i] = error_msg[i];
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	4413      	add	r3, r2
 8002820:	7819      	ldrb	r1, [r3, #0]
 8002822:	4a0e      	ldr	r2, [pc, #56]	; (800285c <set_init_error_msg+0x50>)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4413      	add	r3, r2
 8002828:	460a      	mov	r2, r1
 800282a:	701a      	strb	r2, [r3, #0]
    i++;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	3301      	adds	r3, #1
 8002830:	60fb      	str	r3, [r7, #12]
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b3a      	cmp	r3, #58	; 0x3a
 8002836:	dc05      	bgt.n	8002844 <set_init_error_msg+0x38>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1ea      	bne.n	800281a <set_init_error_msg+0xe>
  }

  // Terminate string
  error_msg_buf[i] = '\0';
 8002844:	4a05      	ldr	r2, [pc, #20]	; (800285c <set_init_error_msg+0x50>)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4413      	add	r3, r2
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
#else
  // Otherwise avoid the unused-args warning
  (void)(error_msg);
#endif /* WS2812B_DISABLE_ERROR_MSG */
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	200007a4 	.word	0x200007a4

08002860 <add_byte>:

static void add_byte(ws2812b_handle_t *ws, uint8_t value, uint8_t **buffer) {
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	460b      	mov	r3, r1
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	72fb      	strb	r3, [r7, #11]
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d118      	bne.n	80028a8 <add_byte+0x48>

    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	e011      	b.n	80028a0 <add_byte+0x40>
      **buffer = construct_double_pulse(ws, b, value);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681c      	ldr	r4, [r3, #0]
 8002880:	7afb      	ldrb	r3, [r7, #11]
 8002882:	461a      	mov	r2, r3
 8002884:	6979      	ldr	r1, [r7, #20]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f844 	bl	8002914 <construct_double_pulse>
 800288c:	4603      	mov	r3, r0
 800288e:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3302      	adds	r3, #2
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2b07      	cmp	r3, #7
 80028a4:	d9ea      	bls.n	800287c <add_byte+0x1c>
    for (uint_fast8_t b = 0; b < 8; b++) {
      **buffer = construct_single_pulse(ws, b, value);
      ++*buffer;
    }
  }
}
 80028a6:	e017      	b.n	80028d8 <add_byte+0x78>
    for (uint_fast8_t b = 0; b < 8; b++) {
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	e011      	b.n	80028d2 <add_byte+0x72>
      **buffer = construct_single_pulse(ws, b, value);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681c      	ldr	r4, [r3, #0]
 80028b2:	7afb      	ldrb	r3, [r7, #11]
 80028b4:	461a      	mov	r2, r3
 80028b6:	6939      	ldr	r1, [r7, #16]
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f811 	bl	80028e0 <construct_single_pulse>
 80028be:	4603      	mov	r3, r0
 80028c0:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b++) {
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	3301      	adds	r3, #1
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2b07      	cmp	r3, #7
 80028d6:	d9ea      	bls.n	80028ae <add_byte+0x4e>
}
 80028d8:	bf00      	nop
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd90      	pop	{r4, r7, pc}

080028e0 <construct_single_pulse>:

static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	4613      	mov	r3, r2
 80028ec:	71fb      	strb	r3, [r7, #7]
  return (value & ((0x80U) >> b) ? ws->state.pulse_1 : ws->state.pulse_0);
 80028ee:	79fa      	ldrb	r2, [r7, #7]
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	fa21 f303 	lsr.w	r3, r1, r3
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <construct_single_pulse+0x24>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	7e1b      	ldrb	r3, [r3, #24]
 8002902:	e001      	b.n	8002908 <construct_single_pulse+0x28>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	7e5b      	ldrb	r3, [r3, #25]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <construct_double_pulse>:

static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	4613      	mov	r3, r2
 8002920:	71fb      	strb	r3, [r7, #7]
  uint8_t result;
  uint8_t pulse_1 = ws->state.pulse_1;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	7e1b      	ldrb	r3, [r3, #24]
 8002926:	75bb      	strb	r3, [r7, #22]
  uint8_t pulse_0 = ws->state.pulse_0;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	7e5b      	ldrb	r3, [r3, #25]
 800292c:	757b      	strb	r3, [r7, #21]

  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	791b      	ldrb	r3, [r3, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d121      	bne.n	800297a <construct_double_pulse+0x66>
    // MSB is first
    result = value & ((0x80U) >> (b + 1)) ? pulse_1 : pulse_0;
 8002936:	79fa      	ldrb	r2, [r7, #7]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	3301      	adds	r3, #1
 800293c:	2180      	movs	r1, #128	; 0x80
 800293e:	fa21 f303 	lsr.w	r3, r1, r3
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <construct_double_pulse+0x38>
 8002948:	7dbb      	ldrb	r3, [r7, #22]
 800294a:	e000      	b.n	800294e <construct_double_pulse+0x3a>
 800294c:	7d7b      	ldrb	r3, [r7, #21]
 800294e:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8002950:	79fa      	ldrb	r2, [r7, #7]
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <construct_double_pulse+0x54>
 8002960:	7dbb      	ldrb	r3, [r7, #22]
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	b25b      	sxtb	r3, r3
 8002966:	e002      	b.n	800296e <construct_double_pulse+0x5a>
 8002968:	7d7b      	ldrb	r3, [r7, #21]
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	b25b      	sxtb	r3, r3
 800296e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002972:	4313      	orrs	r3, r2
 8002974:	b25b      	sxtb	r3, r3
 8002976:	75fb      	strb	r3, [r7, #23]
 8002978:	e020      	b.n	80029bc <construct_double_pulse+0xa8>
  } else {
    // LSB is first
    result = value & ((0x80U) >> (b)) ? pulse_1 : pulse_0;
 800297a:	79fa      	ldrb	r2, [r7, #7]
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	fa21 f303 	lsr.w	r3, r1, r3
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <construct_double_pulse+0x7a>
 800298a:	7dbb      	ldrb	r3, [r7, #22]
 800298c:	e000      	b.n	8002990 <construct_double_pulse+0x7c>
 800298e:	7d7b      	ldrb	r3, [r7, #21]
 8002990:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b + 1)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8002992:	79fa      	ldrb	r2, [r7, #7]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	3301      	adds	r3, #1
 8002998:	2180      	movs	r1, #128	; 0x80
 800299a:	fa21 f303 	lsr.w	r3, r1, r3
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <construct_double_pulse+0x98>
 80029a4:	7dbb      	ldrb	r3, [r7, #22]
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	b25b      	sxtb	r3, r3
 80029aa:	e002      	b.n	80029b2 <construct_double_pulse+0x9e>
 80029ac:	7d7b      	ldrb	r3, [r7, #21]
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	b25b      	sxtb	r3, r3
 80029b2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b25b      	sxtb	r3, r3
 80029ba:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	371c      	adds	r7, #28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029d0:	480d      	ldr	r0, [pc, #52]	; (8002a08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029d2:	490e      	ldr	r1, [pc, #56]	; (8002a0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029d4:	4a0e      	ldr	r2, [pc, #56]	; (8002a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d8:	e002      	b.n	80029e0 <LoopCopyDataInit>

080029da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029de:	3304      	adds	r3, #4

080029e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e4:	d3f9      	bcc.n	80029da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029e6:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029e8:	4c0b      	ldr	r4, [pc, #44]	; (8002a18 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029ec:	e001      	b.n	80029f2 <LoopFillZerobss>

080029ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029f0:	3204      	adds	r2, #4

080029f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f4:	d3fb      	bcc.n	80029ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029f6:	f7ff fba3 	bl	8002140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029fa:	f008 ffdd 	bl	800b9b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029fe:	f7fe fe3d 	bl	800167c <main>
  bx  lr    
 8002a02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a04:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a0c:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8002a10:	0800df4c 	.word	0x0800df4c
  ldr r2, =_sbss
 8002a14:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8002a18:	20005310 	.word	0x20005310

08002a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a1c:	e7fe      	b.n	8002a1c <ADC_IRQHandler>

08002a1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a22:	2003      	movs	r0, #3
 8002a24:	f000 f8f9 	bl	8002c1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a28:	2005      	movs	r0, #5
 8002a2a:	f7ff fa2d 	bl	8001e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a2e:	f7ff fa03 	bl	8001e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_IncTick+0x20>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_IncTick+0x24>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4413      	add	r3, r2
 8002a48:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <HAL_IncTick+0x24>)
 8002a4a:	6013      	str	r3, [r2, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	20000060 	.word	0x20000060
 8002a5c:	200007e0 	.word	0x200007e0

08002a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return uwTick;
 8002a64:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <HAL_GetTick+0x14>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	200007e0 	.word	0x200007e0

08002a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a80:	f7ff ffee 	bl	8002a60 <HAL_GetTick>
 8002a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d005      	beq.n	8002a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_Delay+0x44>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a9e:	bf00      	nop
 8002aa0:	f7ff ffde 	bl	8002a60 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d8f7      	bhi.n	8002aa0 <HAL_Delay+0x28>
  {
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000060 	.word	0x20000060

08002ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <__NVIC_SetPriorityGrouping+0x40>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002adc:	4013      	ands	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <__NVIC_SetPriorityGrouping+0x44>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aee:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <__NVIC_SetPriorityGrouping+0x40>)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	60d3      	str	r3, [r2, #12]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000ed00 	.word	0xe000ed00
 8002b04:	05fa0000 	.word	0x05fa0000

08002b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <__NVIC_GetPriorityGrouping+0x18>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	f003 0307 	and.w	r3, r3, #7
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	db0b      	blt.n	8002b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	4907      	ldr	r1, [pc, #28]	; (8002b5c <__NVIC_EnableIRQ+0x38>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	2001      	movs	r0, #1
 8002b46:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000e100 	.word	0xe000e100

08002b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	db0a      	blt.n	8002b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	490c      	ldr	r1, [pc, #48]	; (8002bac <__NVIC_SetPriority+0x4c>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	0112      	lsls	r2, r2, #4
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	440b      	add	r3, r1
 8002b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b88:	e00a      	b.n	8002ba0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4908      	ldr	r1, [pc, #32]	; (8002bb0 <__NVIC_SetPriority+0x50>)
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	3b04      	subs	r3, #4
 8002b98:	0112      	lsls	r2, r2, #4
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	761a      	strb	r2, [r3, #24]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000e100 	.word	0xe000e100
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b089      	sub	sp, #36	; 0x24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f1c3 0307 	rsb	r3, r3, #7
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	bf28      	it	cs
 8002bd2:	2304      	movcs	r3, #4
 8002bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d902      	bls.n	8002be4 <NVIC_EncodePriority+0x30>
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3b03      	subs	r3, #3
 8002be2:	e000      	b.n	8002be6 <NVIC_EncodePriority+0x32>
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	43d9      	mvns	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	4313      	orrs	r3, r2
         );
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff ff4c 	bl	8002ac0 <__NVIC_SetPriorityGrouping>
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c42:	f7ff ff61 	bl	8002b08 <__NVIC_GetPriorityGrouping>
 8002c46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	6978      	ldr	r0, [r7, #20]
 8002c4e:	f7ff ffb1 	bl	8002bb4 <NVIC_EncodePriority>
 8002c52:	4602      	mov	r2, r0
 8002c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ff80 	bl	8002b60 <__NVIC_SetPriority>
}
 8002c60:	bf00      	nop
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff ff54 	bl	8002b24 <__NVIC_EnableIRQ>
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e014      	b.n	8002cc0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	791b      	ldrb	r3, [r3, #4]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d105      	bne.n	8002cac <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7fd fdaa 	bl	8000800 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	795b      	ldrb	r3, [r3, #5]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <HAL_DAC_Start+0x16>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e040      	b.n	8002d60 <HAL_DAC_Start+0x98>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6819      	ldr	r1, [r3, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10f      	bne.n	8002d28 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002d12:	2b3c      	cmp	r3, #60	; 0x3c
 8002d14:	d11d      	bne.n	8002d52 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0201 	orr.w	r2, r2, #1
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	e014      	b.n	8002d52 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	213c      	movs	r1, #60	; 0x3c
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d107      	bne.n	8002d52 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0202 	orr.w	r2, r2, #2
 8002d50:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d82:	d120      	bne.n	8002dc6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d92:	d118      	bne.n	8002dc6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2204      	movs	r2, #4
 8002d98:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f043 0201 	orr.w	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f852 	bl	8002e6a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd4:	d120      	bne.n	8002e18 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de4:	d118      	bne.n	8002e18 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2204      	movs	r2, #4
 8002dea:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f043 0202 	orr.w	r2, r3, #2
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002e10:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f882 	bl	8002f1c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4413      	add	r3, r2
 8002e44:	3308      	adds	r3, #8
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	e004      	b.n	8002e54 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	3314      	adds	r3, #20
 8002e52:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	461a      	mov	r2, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b087      	sub	sp, #28
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	795b      	ldrb	r3, [r3, #5]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_DAC_ConfigChannel+0x18>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e03c      	b.n	8002f10 <HAL_DAC_ConfigChannel+0x92>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6819      	ldr	r1, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	22c0      	movs	r2, #192	; 0xc0
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	400a      	ands	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7ff fd90 	bl	8002a60 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e099      	b.n	8003080 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f6c:	e00f      	b.n	8002f8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f6e:	f7ff fd77 	bl	8002a60 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b05      	cmp	r3, #5
 8002f7a:	d908      	bls.n	8002f8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2203      	movs	r2, #3
 8002f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e078      	b.n	8003080 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e8      	bne.n	8002f6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4b38      	ldr	r3, [pc, #224]	; (8003088 <HAL_DMA_Init+0x158>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d107      	bne.n	8002ff8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f023 0307 	bic.w	r3, r3, #7
 800300e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	4313      	orrs	r3, r2
 8003018:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	2b04      	cmp	r3, #4
 8003020:	d117      	bne.n	8003052 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00e      	beq.n	8003052 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fb09 	bl	800364c <DMA_CheckFifoParam>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2240      	movs	r2, #64	; 0x40
 8003044:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800304e:	2301      	movs	r3, #1
 8003050:	e016      	b.n	8003080 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fac0 	bl	80035e0 <DMA_CalcBaseAndBitshift>
 8003060:	4603      	mov	r3, r0
 8003062:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	223f      	movs	r2, #63	; 0x3f
 800306a:	409a      	lsls	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	e010803f 	.word	0xe010803f

0800308c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_DMA_Start_IT+0x26>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e048      	b.n	8003144 <HAL_DMA_Start_IT+0xb8>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d137      	bne.n	8003136 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2202      	movs	r2, #2
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 fa52 	bl	8003584 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	223f      	movs	r2, #63	; 0x3f
 80030e6:	409a      	lsls	r2, r3
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0216 	orr.w	r2, r2, #22
 80030fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695a      	ldr	r2, [r3, #20]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800310a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0208 	orr.w	r2, r2, #8
 8003122:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	e005      	b.n	8003142 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800313e:	2302      	movs	r3, #2
 8003140:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003142:	7dfb      	ldrb	r3, [r7, #23]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800315a:	f7ff fc81 	bl	8002a60 <HAL_GetTick>
 800315e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d008      	beq.n	800317e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2280      	movs	r2, #128	; 0x80
 8003170:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e052      	b.n	8003224 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0216 	bic.w	r2, r2, #22
 800318c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800319c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d103      	bne.n	80031ae <HAL_DMA_Abort+0x62>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d007      	beq.n	80031be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0208 	bic.w	r2, r2, #8
 80031bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ce:	e013      	b.n	80031f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031d0:	f7ff fc46 	bl	8002a60 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b05      	cmp	r3, #5
 80031dc:	d90c      	bls.n	80031f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2203      	movs	r2, #3
 80031e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e015      	b.n	8003224 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1e4      	bne.n	80031d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320a:	223f      	movs	r2, #63	; 0x3f
 800320c:	409a      	lsls	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d004      	beq.n	800324a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2280      	movs	r2, #128	; 0x80
 8003244:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e00c      	b.n	8003264 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2205      	movs	r2, #5
 800324e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800327c:	4b8e      	ldr	r3, [pc, #568]	; (80034b8 <HAL_DMA_IRQHandler+0x248>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a8e      	ldr	r2, [pc, #568]	; (80034bc <HAL_DMA_IRQHandler+0x24c>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	0a9b      	lsrs	r3, r3, #10
 8003288:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329a:	2208      	movs	r2, #8
 800329c:	409a      	lsls	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d01a      	beq.n	80032dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d013      	beq.n	80032dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0204 	bic.w	r2, r2, #4
 80032c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	2208      	movs	r2, #8
 80032ca:	409a      	lsls	r2, r3
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	f043 0201 	orr.w	r2, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e0:	2201      	movs	r2, #1
 80032e2:	409a      	lsls	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d012      	beq.n	8003312 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fe:	2201      	movs	r2, #1
 8003300:	409a      	lsls	r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330a:	f043 0202 	orr.w	r2, r3, #2
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003316:	2204      	movs	r2, #4
 8003318:	409a      	lsls	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4013      	ands	r3, r2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d012      	beq.n	8003348 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00b      	beq.n	8003348 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003334:	2204      	movs	r2, #4
 8003336:	409a      	lsls	r2, r3
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	f043 0204 	orr.w	r2, r3, #4
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	2210      	movs	r2, #16
 800334e:	409a      	lsls	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4013      	ands	r3, r2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d043      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d03c      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336a:	2210      	movs	r2, #16
 800336c:	409a      	lsls	r2, r3
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d018      	beq.n	80033b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d108      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d024      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	4798      	blx	r3
 800339e:	e01f      	b.n	80033e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01b      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
 80033b0:	e016      	b.n	80033e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d107      	bne.n	80033d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0208 	bic.w	r2, r2, #8
 80033ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	2220      	movs	r2, #32
 80033e6:	409a      	lsls	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 808f 	beq.w	8003510 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 8087 	beq.w	8003510 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	2220      	movs	r2, #32
 8003408:	409a      	lsls	r2, r3
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b05      	cmp	r3, #5
 8003418:	d136      	bne.n	8003488 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0216 	bic.w	r2, r2, #22
 8003428:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003438:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d103      	bne.n	800344a <HAL_DMA_IRQHandler+0x1da>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003446:	2b00      	cmp	r3, #0
 8003448:	d007      	beq.n	800345a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0208 	bic.w	r2, r2, #8
 8003458:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	223f      	movs	r2, #63	; 0x3f
 8003460:	409a      	lsls	r2, r3
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347a:	2b00      	cmp	r3, #0
 800347c:	d07e      	beq.n	800357c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	4798      	blx	r3
        }
        return;
 8003486:	e079      	b.n	800357c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01d      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10d      	bne.n	80034c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d031      	beq.n	8003510 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4798      	blx	r3
 80034b4:	e02c      	b.n	8003510 <HAL_DMA_IRQHandler+0x2a0>
 80034b6:	bf00      	nop
 80034b8:	20000058 	.word	0x20000058
 80034bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d023      	beq.n	8003510 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4798      	blx	r3
 80034d0:	e01e      	b.n	8003510 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10f      	bne.n	8003500 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0210 	bic.w	r2, r2, #16
 80034ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003514:	2b00      	cmp	r3, #0
 8003516:	d032      	beq.n	800357e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d022      	beq.n	800356a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2205      	movs	r2, #5
 8003528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	3301      	adds	r3, #1
 8003540:	60bb      	str	r3, [r7, #8]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	429a      	cmp	r2, r3
 8003546:	d307      	bcc.n	8003558 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f2      	bne.n	800353c <HAL_DMA_IRQHandler+0x2cc>
 8003556:	e000      	b.n	800355a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003558:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	4798      	blx	r3
 800357a:	e000      	b.n	800357e <HAL_DMA_IRQHandler+0x30e>
        return;
 800357c:	bf00      	nop
    }
  }
}
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b40      	cmp	r3, #64	; 0x40
 80035b0:	d108      	bne.n	80035c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035c2:	e007      	b.n	80035d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	60da      	str	r2, [r3, #12]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	3b10      	subs	r3, #16
 80035f0:	4a13      	ldr	r2, [pc, #76]	; (8003640 <DMA_CalcBaseAndBitshift+0x60>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035fa:	4a12      	ldr	r2, [pc, #72]	; (8003644 <DMA_CalcBaseAndBitshift+0x64>)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b03      	cmp	r3, #3
 800360c:	d908      	bls.n	8003620 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <DMA_CalcBaseAndBitshift+0x68>)
 8003616:	4013      	ands	r3, r2
 8003618:	1d1a      	adds	r2, r3, #4
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	659a      	str	r2, [r3, #88]	; 0x58
 800361e:	e006      	b.n	800362e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	461a      	mov	r2, r3
 8003626:	4b08      	ldr	r3, [pc, #32]	; (8003648 <DMA_CalcBaseAndBitshift+0x68>)
 8003628:	4013      	ands	r3, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	aaaaaaab 	.word	0xaaaaaaab
 8003644:	0800df00 	.word	0x0800df00
 8003648:	fffffc00 	.word	0xfffffc00

0800364c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d11f      	bne.n	80036a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b03      	cmp	r3, #3
 800366a:	d856      	bhi.n	800371a <DMA_CheckFifoParam+0xce>
 800366c:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <DMA_CheckFifoParam+0x28>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	08003685 	.word	0x08003685
 8003678:	08003697 	.word	0x08003697
 800367c:	08003685 	.word	0x08003685
 8003680:	0800371b 	.word	0x0800371b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d046      	beq.n	800371e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003694:	e043      	b.n	800371e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800369e:	d140      	bne.n	8003722 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a4:	e03d      	b.n	8003722 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ae:	d121      	bne.n	80036f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d837      	bhi.n	8003726 <DMA_CheckFifoParam+0xda>
 80036b6:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <DMA_CheckFifoParam+0x70>)
 80036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036bc:	080036cd 	.word	0x080036cd
 80036c0:	080036d3 	.word	0x080036d3
 80036c4:	080036cd 	.word	0x080036cd
 80036c8:	080036e5 	.word	0x080036e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	73fb      	strb	r3, [r7, #15]
      break;
 80036d0:	e030      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d025      	beq.n	800372a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e2:	e022      	b.n	800372a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036ec:	d11f      	bne.n	800372e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036f2:	e01c      	b.n	800372e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d903      	bls.n	8003702 <DMA_CheckFifoParam+0xb6>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d003      	beq.n	8003708 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003700:	e018      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
      break;
 8003706:	e015      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00e      	beq.n	8003732 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      break;
 8003718:	e00b      	b.n	8003732 <DMA_CheckFifoParam+0xe6>
      break;
 800371a:	bf00      	nop
 800371c:	e00a      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
      break;
 800371e:	bf00      	nop
 8003720:	e008      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
      break;
 8003722:	bf00      	nop
 8003724:	e006      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
      break;
 8003726:	bf00      	nop
 8003728:	e004      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
      break;
 800372a:	bf00      	nop
 800372c:	e002      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
      break;   
 800372e:	bf00      	nop
 8003730:	e000      	b.n	8003734 <DMA_CheckFifoParam+0xe8>
      break;
 8003732:	bf00      	nop
    }
  } 
  
  return status; 
 8003734:	7bfb      	ldrb	r3, [r7, #15]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop

08003744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003744:	b480      	push	{r7}
 8003746:	b089      	sub	sp, #36	; 0x24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800375a:	2300      	movs	r3, #0
 800375c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800375e:	2300      	movs	r3, #0
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	e175      	b.n	8003a50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003764:	2201      	movs	r2, #1
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4013      	ands	r3, r2
 8003776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	429a      	cmp	r2, r3
 800377e:	f040 8164 	bne.w	8003a4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b01      	cmp	r3, #1
 800378c:	d005      	beq.n	800379a <HAL_GPIO_Init+0x56>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d130      	bne.n	80037fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	2203      	movs	r2, #3
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037d0:	2201      	movs	r2, #1
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	091b      	lsrs	r3, r3, #4
 80037e6:	f003 0201 	and.w	r2, r3, #1
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b03      	cmp	r3, #3
 8003806:	d017      	beq.n	8003838 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	2203      	movs	r2, #3
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d123      	bne.n	800388c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	08da      	lsrs	r2, r3, #3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3208      	adds	r2, #8
 800384c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	220f      	movs	r2, #15
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	08da      	lsrs	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3208      	adds	r2, #8
 8003886:	69b9      	ldr	r1, [r7, #24]
 8003888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	2203      	movs	r2, #3
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0203 	and.w	r2, r3, #3
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80be 	beq.w	8003a4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ce:	4b66      	ldr	r3, [pc, #408]	; (8003a68 <HAL_GPIO_Init+0x324>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	4a65      	ldr	r2, [pc, #404]	; (8003a68 <HAL_GPIO_Init+0x324>)
 80038d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038d8:	6453      	str	r3, [r2, #68]	; 0x44
 80038da:	4b63      	ldr	r3, [pc, #396]	; (8003a68 <HAL_GPIO_Init+0x324>)
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80038e6:	4a61      	ldr	r2, [pc, #388]	; (8003a6c <HAL_GPIO_Init+0x328>)
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	089b      	lsrs	r3, r3, #2
 80038ec:	3302      	adds	r3, #2
 80038ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	220f      	movs	r2, #15
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a58      	ldr	r2, [pc, #352]	; (8003a70 <HAL_GPIO_Init+0x32c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d037      	beq.n	8003982 <HAL_GPIO_Init+0x23e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a57      	ldr	r2, [pc, #348]	; (8003a74 <HAL_GPIO_Init+0x330>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d031      	beq.n	800397e <HAL_GPIO_Init+0x23a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a56      	ldr	r2, [pc, #344]	; (8003a78 <HAL_GPIO_Init+0x334>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d02b      	beq.n	800397a <HAL_GPIO_Init+0x236>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a55      	ldr	r2, [pc, #340]	; (8003a7c <HAL_GPIO_Init+0x338>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d025      	beq.n	8003976 <HAL_GPIO_Init+0x232>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a54      	ldr	r2, [pc, #336]	; (8003a80 <HAL_GPIO_Init+0x33c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d01f      	beq.n	8003972 <HAL_GPIO_Init+0x22e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a53      	ldr	r2, [pc, #332]	; (8003a84 <HAL_GPIO_Init+0x340>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d019      	beq.n	800396e <HAL_GPIO_Init+0x22a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a52      	ldr	r2, [pc, #328]	; (8003a88 <HAL_GPIO_Init+0x344>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_GPIO_Init+0x226>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a51      	ldr	r2, [pc, #324]	; (8003a8c <HAL_GPIO_Init+0x348>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00d      	beq.n	8003966 <HAL_GPIO_Init+0x222>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a50      	ldr	r2, [pc, #320]	; (8003a90 <HAL_GPIO_Init+0x34c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d007      	beq.n	8003962 <HAL_GPIO_Init+0x21e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a4f      	ldr	r2, [pc, #316]	; (8003a94 <HAL_GPIO_Init+0x350>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d101      	bne.n	800395e <HAL_GPIO_Init+0x21a>
 800395a:	2309      	movs	r3, #9
 800395c:	e012      	b.n	8003984 <HAL_GPIO_Init+0x240>
 800395e:	230a      	movs	r3, #10
 8003960:	e010      	b.n	8003984 <HAL_GPIO_Init+0x240>
 8003962:	2308      	movs	r3, #8
 8003964:	e00e      	b.n	8003984 <HAL_GPIO_Init+0x240>
 8003966:	2307      	movs	r3, #7
 8003968:	e00c      	b.n	8003984 <HAL_GPIO_Init+0x240>
 800396a:	2306      	movs	r3, #6
 800396c:	e00a      	b.n	8003984 <HAL_GPIO_Init+0x240>
 800396e:	2305      	movs	r3, #5
 8003970:	e008      	b.n	8003984 <HAL_GPIO_Init+0x240>
 8003972:	2304      	movs	r3, #4
 8003974:	e006      	b.n	8003984 <HAL_GPIO_Init+0x240>
 8003976:	2303      	movs	r3, #3
 8003978:	e004      	b.n	8003984 <HAL_GPIO_Init+0x240>
 800397a:	2302      	movs	r3, #2
 800397c:	e002      	b.n	8003984 <HAL_GPIO_Init+0x240>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <HAL_GPIO_Init+0x240>
 8003982:	2300      	movs	r3, #0
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	f002 0203 	and.w	r2, r2, #3
 800398a:	0092      	lsls	r2, r2, #2
 800398c:	4093      	lsls	r3, r2
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003994:	4935      	ldr	r1, [pc, #212]	; (8003a6c <HAL_GPIO_Init+0x328>)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	089b      	lsrs	r3, r3, #2
 800399a:	3302      	adds	r3, #2
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039a2:	4b3d      	ldr	r3, [pc, #244]	; (8003a98 <HAL_GPIO_Init+0x354>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	43db      	mvns	r3, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4013      	ands	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039c6:	4a34      	ldr	r2, [pc, #208]	; (8003a98 <HAL_GPIO_Init+0x354>)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039cc:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <HAL_GPIO_Init+0x354>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4013      	ands	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039f0:	4a29      	ldr	r2, [pc, #164]	; (8003a98 <HAL_GPIO_Init+0x354>)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039f6:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <HAL_GPIO_Init+0x354>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a1a:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <HAL_GPIO_Init+0x354>)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a20:	4b1d      	ldr	r3, [pc, #116]	; (8003a98 <HAL_GPIO_Init+0x354>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a44:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <HAL_GPIO_Init+0x354>)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	61fb      	str	r3, [r7, #28]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2b0f      	cmp	r3, #15
 8003a54:	f67f ae86 	bls.w	8003764 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	3724      	adds	r7, #36	; 0x24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40013800 	.word	0x40013800
 8003a70:	40020000 	.word	0x40020000
 8003a74:	40020400 	.word	0x40020400
 8003a78:	40020800 	.word	0x40020800
 8003a7c:	40020c00 	.word	0x40020c00
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40021400 	.word	0x40021400
 8003a88:	40021800 	.word	0x40021800
 8003a8c:	40021c00 	.word	0x40021c00
 8003a90:	40022000 	.word	0x40022000
 8003a94:	40022400 	.word	0x40022400
 8003a98:	40013c00 	.word	0x40013c00

08003a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	807b      	strh	r3, [r7, #2]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aac:	787b      	ldrb	r3, [r7, #1]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ab8:	e003      	b.n	8003ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003aba:	887b      	ldrh	r3, [r7, #2]
 8003abc:	041a      	lsls	r2, r3, #16
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	619a      	str	r2, [r3, #24]
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b085      	sub	sp, #20
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ae0:	887a      	ldrh	r2, [r7, #2]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	041a      	lsls	r2, r3, #16
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	43d9      	mvns	r1, r3
 8003aec:	887b      	ldrh	r3, [r7, #2]
 8003aee:	400b      	ands	r3, r1
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	619a      	str	r2, [r3, #24]
}
 8003af6:	bf00      	nop
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e07f      	b.n	8003c16 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fd fd46 	bl	80015bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2224      	movs	r2, #36	; 0x24
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0201 	bic.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d107      	bne.n	8003b7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b7a:	609a      	str	r2, [r3, #8]
 8003b7c:	e006      	b.n	8003b8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d104      	bne.n	8003b9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6859      	ldr	r1, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <HAL_I2C_Init+0x11c>)
 8003baa:	430b      	orrs	r3, r1
 8003bac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69d9      	ldr	r1, [r3, #28]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1a      	ldr	r2, [r3, #32]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	02008000 	.word	0x02008000

08003c24 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	4611      	mov	r1, r2
 8003c30:	461a      	mov	r2, r3
 8003c32:	4603      	mov	r3, r0
 8003c34:	817b      	strh	r3, [r7, #10]
 8003c36:	460b      	mov	r3, r1
 8003c38:	813b      	strh	r3, [r7, #8]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b20      	cmp	r3, #32
 8003c48:	f040 80f9 	bne.w	8003e3e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_I2C_Mem_Write+0x34>
 8003c52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d105      	bne.n	8003c64 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c5e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0ed      	b.n	8003e40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_I2C_Mem_Write+0x4e>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e0e6      	b.n	8003e40 <HAL_I2C_Mem_Write+0x21c>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c7a:	f7fe fef1 	bl	8002a60 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2319      	movs	r3, #25
 8003c86:	2201      	movs	r2, #1
 8003c88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f955 	bl	8003f3c <I2C_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0d1      	b.n	8003e40 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2221      	movs	r2, #33	; 0x21
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2240      	movs	r2, #64	; 0x40
 8003ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a3a      	ldr	r2, [r7, #32]
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cc4:	88f8      	ldrh	r0, [r7, #6]
 8003cc6:	893a      	ldrh	r2, [r7, #8]
 8003cc8:	8979      	ldrh	r1, [r7, #10]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f8b9 	bl	8003e4c <I2C_RequestMemoryWrite>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0a9      	b.n	8003e40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2bff      	cmp	r3, #255	; 0xff
 8003cf4:	d90e      	bls.n	8003d14 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	22ff      	movs	r2, #255	; 0xff
 8003cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	8979      	ldrh	r1, [r7, #10]
 8003d04:	2300      	movs	r3, #0
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fab1 	bl	8004274 <I2C_TransferConfig>
 8003d12:	e00f      	b.n	8003d34 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	8979      	ldrh	r1, [r7, #10]
 8003d26:	2300      	movs	r3, #0
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 faa0 	bl	8004274 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f93f 	bl	8003fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e07b      	b.n	8003e40 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	781a      	ldrb	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d034      	beq.n	8003dec <HAL_I2C_Mem_Write+0x1c8>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d130      	bne.n	8003dec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	2200      	movs	r2, #0
 8003d92:	2180      	movs	r1, #128	; 0x80
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f8d1 	bl	8003f3c <I2C_WaitOnFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e04d      	b.n	8003e40 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2bff      	cmp	r3, #255	; 0xff
 8003dac:	d90e      	bls.n	8003dcc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	22ff      	movs	r2, #255	; 0xff
 8003db2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	8979      	ldrh	r1, [r7, #10]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fa55 	bl	8004274 <I2C_TransferConfig>
 8003dca:	e00f      	b.n	8003dec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	8979      	ldrh	r1, [r7, #10]
 8003dde:	2300      	movs	r3, #0
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fa44 	bl	8004274 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d19e      	bne.n	8003d34 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f91e 	bl	800403c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e01a      	b.n	8003e40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6859      	ldr	r1, [r3, #4]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <HAL_I2C_Mem_Write+0x224>)
 8003e1e:	400b      	ands	r3, r1
 8003e20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e000      	b.n	8003e40 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e3e:	2302      	movs	r3, #2
  }
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	fe00e800 	.word	0xfe00e800

08003e4c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	4608      	mov	r0, r1
 8003e56:	4611      	mov	r1, r2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	817b      	strh	r3, [r7, #10]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	813b      	strh	r3, [r7, #8]
 8003e62:	4613      	mov	r3, r2
 8003e64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	8979      	ldrh	r1, [r7, #10]
 8003e6c:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <I2C_RequestMemoryWrite+0xa4>)
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 f9fd 	bl	8004274 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	69b9      	ldr	r1, [r7, #24]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f89c 	bl	8003fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e02c      	b.n	8003ee8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e8e:	88fb      	ldrh	r3, [r7, #6]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d105      	bne.n	8003ea0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e94:	893b      	ldrh	r3, [r7, #8]
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	629a      	str	r2, [r3, #40]	; 0x28
 8003e9e:	e015      	b.n	8003ecc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ea0:	893b      	ldrh	r3, [r7, #8]
 8003ea2:	0a1b      	lsrs	r3, r3, #8
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	69b9      	ldr	r1, [r7, #24]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f882 	bl	8003fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e012      	b.n	8003ee8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ec2:	893b      	ldrh	r3, [r7, #8]
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2180      	movs	r1, #128	; 0x80
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f830 	bl	8003f3c <I2C_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	80002000 	.word	0x80002000

08003ef4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d103      	bne.n	8003f12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d007      	beq.n	8003f30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	619a      	str	r2, [r3, #24]
  }
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f4c:	e022      	b.n	8003f94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f54:	d01e      	beq.n	8003f94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f56:	f7fe fd83 	bl	8002a60 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d302      	bcc.n	8003f6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d113      	bne.n	8003f94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f70:	f043 0220 	orr.w	r2, r3, #32
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e00f      	b.n	8003fb4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d0cd      	beq.n	8003f4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fc8:	e02c      	b.n	8004024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f870 	bl	80040b4 <I2C_IsErrorOccurred>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e02a      	b.n	8004034 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d01e      	beq.n	8004024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe6:	f7fe fd3b 	bl	8002a60 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d302      	bcc.n	8003ffc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d113      	bne.n	8004024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004000:	f043 0220 	orr.w	r2, r3, #32
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e007      	b.n	8004034 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b02      	cmp	r3, #2
 8004030:	d1cb      	bne.n	8003fca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004048:	e028      	b.n	800409c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68b9      	ldr	r1, [r7, #8]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f830 	bl	80040b4 <I2C_IsErrorOccurred>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e026      	b.n	80040ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405e:	f7fe fcff 	bl	8002a60 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	429a      	cmp	r2, r3
 800406c:	d302      	bcc.n	8004074 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d113      	bne.n	800409c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004078:	f043 0220 	orr.w	r2, r3, #32
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e007      	b.n	80040ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	d1cf      	bne.n	800404a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08a      	sub	sp, #40	; 0x28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80040ce:	2300      	movs	r3, #0
 80040d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d068      	beq.n	80041b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2210      	movs	r2, #16
 80040e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040e8:	e049      	b.n	800417e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d045      	beq.n	800417e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040f2:	f7fe fcb5 	bl	8002a60 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d302      	bcc.n	8004108 <I2C_IsErrorOccurred+0x54>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d13a      	bne.n	800417e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004112:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800411a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800412a:	d121      	bne.n	8004170 <I2C_IsErrorOccurred+0xbc>
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004132:	d01d      	beq.n	8004170 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	2b20      	cmp	r3, #32
 8004138:	d01a      	beq.n	8004170 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004148:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800414a:	f7fe fc89 	bl	8002a60 <HAL_GetTick>
 800414e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004150:	e00e      	b.n	8004170 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004152:	f7fe fc85 	bl	8002a60 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b19      	cmp	r3, #25
 800415e:	d907      	bls.n	8004170 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	f043 0320 	orr.w	r3, r3, #32
 8004166:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800416e:	e006      	b.n	800417e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b20      	cmp	r3, #32
 800417c:	d1e9      	bne.n	8004152 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b20      	cmp	r3, #32
 800418a:	d003      	beq.n	8004194 <I2C_IsErrorOccurred+0xe0>
 800418c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0aa      	beq.n	80040ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004198:	2b00      	cmp	r3, #0
 800419a:	d103      	bne.n	80041a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2220      	movs	r2, #32
 80041a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	f043 0304 	orr.w	r3, r3, #4
 80041aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00b      	beq.n	80041dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00b      	beq.n	80041fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f043 0308 	orr.w	r3, r3, #8
 80041ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00b      	beq.n	8004220 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	f043 0302 	orr.w	r3, r3, #2
 800420e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004218:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01c      	beq.n	8004262 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff fe63 	bl	8003ef4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <I2C_IsErrorOccurred+0x1bc>)
 800423a:	400b      	ands	r3, r1
 800423c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	431a      	orrs	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004266:	4618      	mov	r0, r3
 8004268:	3728      	adds	r7, #40	; 0x28
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	fe00e800 	.word	0xfe00e800

08004274 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	460b      	mov	r3, r1
 8004280:	817b      	strh	r3, [r7, #10]
 8004282:	4613      	mov	r3, r2
 8004284:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004286:	897b      	ldrh	r3, [r7, #10]
 8004288:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800428c:	7a7b      	ldrb	r3, [r7, #9]
 800428e:	041b      	lsls	r3, r3, #16
 8004290:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004294:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	4313      	orrs	r3, r2
 800429e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	0d5b      	lsrs	r3, r3, #21
 80042ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <I2C_TransferConfig+0x60>)
 80042b4:	430b      	orrs	r3, r1
 80042b6:	43db      	mvns	r3, r3
 80042b8:	ea02 0103 	and.w	r1, r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	03ff63ff 	.word	0x03ff63ff

080042d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d138      	bne.n	8004360 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e032      	b.n	8004362 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2224      	movs	r2, #36	; 0x24
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0201 	bic.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800432a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6819      	ldr	r1, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	e000      	b.n	8004362 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004360:	2302      	movs	r3, #2
  }
}
 8004362:	4618      	mov	r0, r3
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800436e:	b480      	push	{r7}
 8004370:	b085      	sub	sp, #20
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b20      	cmp	r3, #32
 8004382:	d139      	bne.n	80043f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800438e:	2302      	movs	r3, #2
 8004390:	e033      	b.n	80043fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2224      	movs	r2, #36	; 0x24
 800439e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0201 	bic.w	r2, r2, #1
 80043b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	e000      	b.n	80043fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043f8:	2302      	movs	r3, #2
  }
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004412:	4b23      	ldr	r3, [pc, #140]	; (80044a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	4a22      	ldr	r2, [pc, #136]	; (80044a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441c:	6413      	str	r3, [r2, #64]	; 0x40
 800441e:	4b20      	ldr	r3, [pc, #128]	; (80044a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800442a:	4b1e      	ldr	r3, [pc, #120]	; (80044a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1d      	ldr	r2, [pc, #116]	; (80044a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004434:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004436:	f7fe fb13 	bl	8002a60 <HAL_GetTick>
 800443a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800443c:	e009      	b.n	8004452 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800443e:	f7fe fb0f 	bl	8002a60 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800444c:	d901      	bls.n	8004452 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e022      	b.n	8004498 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004452:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445e:	d1ee      	bne.n	800443e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004460:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a0f      	ldr	r2, [pc, #60]	; (80044a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800446a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800446c:	f7fe faf8 	bl	8002a60 <HAL_GetTick>
 8004470:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004472:	e009      	b.n	8004488 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004474:	f7fe faf4 	bl	8002a60 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004482:	d901      	bls.n	8004488 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e007      	b.n	8004498 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004488:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004494:	d1ee      	bne.n	8004474 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40023800 	.word	0x40023800
 80044a4:	40007000 	.word	0x40007000

080044a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80044b0:	2300      	movs	r3, #0
 80044b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e29b      	b.n	80049f6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 8087 	beq.w	80045da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044cc:	4b96      	ldr	r3, [pc, #600]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 030c 	and.w	r3, r3, #12
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d00c      	beq.n	80044f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d8:	4b93      	ldr	r3, [pc, #588]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 030c 	and.w	r3, r3, #12
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d112      	bne.n	800450a <HAL_RCC_OscConfig+0x62>
 80044e4:	4b90      	ldr	r3, [pc, #576]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f0:	d10b      	bne.n	800450a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f2:	4b8d      	ldr	r3, [pc, #564]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d06c      	beq.n	80045d8 <HAL_RCC_OscConfig+0x130>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d168      	bne.n	80045d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e275      	b.n	80049f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004512:	d106      	bne.n	8004522 <HAL_RCC_OscConfig+0x7a>
 8004514:	4b84      	ldr	r3, [pc, #528]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a83      	ldr	r2, [pc, #524]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 800451a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	e02e      	b.n	8004580 <HAL_RCC_OscConfig+0xd8>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10c      	bne.n	8004544 <HAL_RCC_OscConfig+0x9c>
 800452a:	4b7f      	ldr	r3, [pc, #508]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a7e      	ldr	r2, [pc, #504]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 8004530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	4b7c      	ldr	r3, [pc, #496]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a7b      	ldr	r2, [pc, #492]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 800453c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	e01d      	b.n	8004580 <HAL_RCC_OscConfig+0xd8>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800454c:	d10c      	bne.n	8004568 <HAL_RCC_OscConfig+0xc0>
 800454e:	4b76      	ldr	r3, [pc, #472]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a75      	ldr	r2, [pc, #468]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 8004554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	4b73      	ldr	r3, [pc, #460]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a72      	ldr	r2, [pc, #456]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 8004560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	e00b      	b.n	8004580 <HAL_RCC_OscConfig+0xd8>
 8004568:	4b6f      	ldr	r3, [pc, #444]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a6e      	ldr	r2, [pc, #440]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 800456e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	4b6c      	ldr	r3, [pc, #432]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a6b      	ldr	r2, [pc, #428]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 800457a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800457e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d013      	beq.n	80045b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fe fa6a 	bl	8002a60 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004590:	f7fe fa66 	bl	8002a60 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b64      	cmp	r3, #100	; 0x64
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e229      	b.n	80049f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	4b61      	ldr	r3, [pc, #388]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0xe8>
 80045ae:	e014      	b.n	80045da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fe fa56 	bl	8002a60 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b8:	f7fe fa52 	bl	8002a60 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	; 0x64
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e215      	b.n	80049f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ca:	4b57      	ldr	r3, [pc, #348]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x110>
 80045d6:	e000      	b.n	80045da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d069      	beq.n	80046ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045e6:	4b50      	ldr	r3, [pc, #320]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 030c 	and.w	r3, r3, #12
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00b      	beq.n	800460a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045f2:	4b4d      	ldr	r3, [pc, #308]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d11c      	bne.n	8004638 <HAL_RCC_OscConfig+0x190>
 80045fe:	4b4a      	ldr	r3, [pc, #296]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d116      	bne.n	8004638 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460a:	4b47      	ldr	r3, [pc, #284]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <HAL_RCC_OscConfig+0x17a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d001      	beq.n	8004622 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e1e9      	b.n	80049f6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004622:	4b41      	ldr	r3, [pc, #260]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	493d      	ldr	r1, [pc, #244]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 8004632:	4313      	orrs	r3, r2
 8004634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004636:	e040      	b.n	80046ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d023      	beq.n	8004688 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004640:	4b39      	ldr	r3, [pc, #228]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a38      	ldr	r2, [pc, #224]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fe fa08 	bl	8002a60 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004654:	f7fe fa04 	bl	8002a60 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e1c7      	b.n	80049f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004666:	4b30      	ldr	r3, [pc, #192]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004672:	4b2d      	ldr	r3, [pc, #180]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4929      	ldr	r1, [pc, #164]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 8004682:	4313      	orrs	r3, r2
 8004684:	600b      	str	r3, [r1, #0]
 8004686:	e018      	b.n	80046ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004688:	4b27      	ldr	r3, [pc, #156]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a26      	ldr	r2, [pc, #152]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 800468e:	f023 0301 	bic.w	r3, r3, #1
 8004692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004694:	f7fe f9e4 	bl	8002a60 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800469c:	f7fe f9e0 	bl	8002a60 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e1a3      	b.n	80049f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ae:	4b1e      	ldr	r3, [pc, #120]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d038      	beq.n	8004738 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d019      	beq.n	8004702 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ce:	4b16      	ldr	r3, [pc, #88]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 80046d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d2:	4a15      	ldr	r2, [pc, #84]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046da:	f7fe f9c1 	bl	8002a60 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e2:	f7fe f9bd 	bl	8002a60 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e180      	b.n	80049f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f4:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 80046f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x23a>
 8004700:	e01a      	b.n	8004738 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004702:	4b09      	ldr	r3, [pc, #36]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 8004704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004706:	4a08      	ldr	r2, [pc, #32]	; (8004728 <HAL_RCC_OscConfig+0x280>)
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470e:	f7fe f9a7 	bl	8002a60 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004714:	e00a      	b.n	800472c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004716:	f7fe f9a3 	bl	8002a60 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d903      	bls.n	800472c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e166      	b.n	80049f6 <HAL_RCC_OscConfig+0x54e>
 8004728:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800472c:	4b92      	ldr	r3, [pc, #584]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 800472e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1ee      	bne.n	8004716 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80a4 	beq.w	800488e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004746:	4b8c      	ldr	r3, [pc, #560]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10d      	bne.n	800476e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004752:	4b89      	ldr	r3, [pc, #548]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	4a88      	ldr	r2, [pc, #544]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 8004758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800475c:	6413      	str	r3, [r2, #64]	; 0x40
 800475e:	4b86      	ldr	r3, [pc, #536]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476a:	2301      	movs	r3, #1
 800476c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800476e:	4b83      	ldr	r3, [pc, #524]	; (800497c <HAL_RCC_OscConfig+0x4d4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d118      	bne.n	80047ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800477a:	4b80      	ldr	r3, [pc, #512]	; (800497c <HAL_RCC_OscConfig+0x4d4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a7f      	ldr	r2, [pc, #508]	; (800497c <HAL_RCC_OscConfig+0x4d4>)
 8004780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004786:	f7fe f96b 	bl	8002a60 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478e:	f7fe f967 	bl	8002a60 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b64      	cmp	r3, #100	; 0x64
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e12a      	b.n	80049f6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047a0:	4b76      	ldr	r3, [pc, #472]	; (800497c <HAL_RCC_OscConfig+0x4d4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0x31a>
 80047b4:	4b70      	ldr	r3, [pc, #448]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b8:	4a6f      	ldr	r2, [pc, #444]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6713      	str	r3, [r2, #112]	; 0x70
 80047c0:	e02d      	b.n	800481e <HAL_RCC_OscConfig+0x376>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCC_OscConfig+0x33c>
 80047ca:	4b6b      	ldr	r3, [pc, #428]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	4a6a      	ldr	r2, [pc, #424]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	6713      	str	r3, [r2, #112]	; 0x70
 80047d6:	4b68      	ldr	r3, [pc, #416]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	4a67      	ldr	r2, [pc, #412]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 80047dc:	f023 0304 	bic.w	r3, r3, #4
 80047e0:	6713      	str	r3, [r2, #112]	; 0x70
 80047e2:	e01c      	b.n	800481e <HAL_RCC_OscConfig+0x376>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b05      	cmp	r3, #5
 80047ea:	d10c      	bne.n	8004806 <HAL_RCC_OscConfig+0x35e>
 80047ec:	4b62      	ldr	r3, [pc, #392]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 80047ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f0:	4a61      	ldr	r2, [pc, #388]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 80047f2:	f043 0304 	orr.w	r3, r3, #4
 80047f6:	6713      	str	r3, [r2, #112]	; 0x70
 80047f8:	4b5f      	ldr	r3, [pc, #380]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 80047fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fc:	4a5e      	ldr	r2, [pc, #376]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 80047fe:	f043 0301 	orr.w	r3, r3, #1
 8004802:	6713      	str	r3, [r2, #112]	; 0x70
 8004804:	e00b      	b.n	800481e <HAL_RCC_OscConfig+0x376>
 8004806:	4b5c      	ldr	r3, [pc, #368]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	4a5b      	ldr	r2, [pc, #364]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	6713      	str	r3, [r2, #112]	; 0x70
 8004812:	4b59      	ldr	r3, [pc, #356]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	4a58      	ldr	r2, [pc, #352]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 8004818:	f023 0304 	bic.w	r3, r3, #4
 800481c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d015      	beq.n	8004852 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004826:	f7fe f91b 	bl	8002a60 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482c:	e00a      	b.n	8004844 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482e:	f7fe f917 	bl	8002a60 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	f241 3288 	movw	r2, #5000	; 0x1388
 800483c:	4293      	cmp	r3, r2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e0d8      	b.n	80049f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004844:	4b4c      	ldr	r3, [pc, #304]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0ee      	beq.n	800482e <HAL_RCC_OscConfig+0x386>
 8004850:	e014      	b.n	800487c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004852:	f7fe f905 	bl	8002a60 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004858:	e00a      	b.n	8004870 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485a:	f7fe f901 	bl	8002a60 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	f241 3288 	movw	r2, #5000	; 0x1388
 8004868:	4293      	cmp	r3, r2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e0c2      	b.n	80049f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004870:	4b41      	ldr	r3, [pc, #260]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 8004872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1ee      	bne.n	800485a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800487c:	7dfb      	ldrb	r3, [r7, #23]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d105      	bne.n	800488e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004882:	4b3d      	ldr	r3, [pc, #244]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	4a3c      	ldr	r2, [pc, #240]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 8004888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800488c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 80ae 	beq.w	80049f4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004898:	4b37      	ldr	r3, [pc, #220]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d06d      	beq.n	8004980 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d14b      	bne.n	8004944 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ac:	4b32      	ldr	r3, [pc, #200]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a31      	ldr	r2, [pc, #196]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 80048b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b8:	f7fe f8d2 	bl	8002a60 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c0:	f7fe f8ce 	bl	8002a60 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e091      	b.n	80049f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d2:	4b29      	ldr	r3, [pc, #164]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69da      	ldr	r2, [r3, #28]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	019b      	lsls	r3, r3, #6
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	085b      	lsrs	r3, r3, #1
 80048f6:	3b01      	subs	r3, #1
 80048f8:	041b      	lsls	r3, r3, #16
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	071b      	lsls	r3, r3, #28
 800490a:	491b      	ldr	r1, [pc, #108]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 800490c:	4313      	orrs	r3, r2
 800490e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a18      	ldr	r2, [pc, #96]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 8004916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800491a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491c:	f7fe f8a0 	bl	8002a60 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004924:	f7fe f89c 	bl	8002a60 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e05f      	b.n	80049f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004936:	4b10      	ldr	r3, [pc, #64]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCC_OscConfig+0x47c>
 8004942:	e057      	b.n	80049f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004944:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a0b      	ldr	r2, [pc, #44]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 800494a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800494e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004950:	f7fe f886 	bl	8002a60 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004958:	f7fe f882 	bl	8002a60 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e045      	b.n	80049f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	4b03      	ldr	r3, [pc, #12]	; (8004978 <HAL_RCC_OscConfig+0x4d0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x4b0>
 8004976:	e03d      	b.n	80049f4 <HAL_RCC_OscConfig+0x54c>
 8004978:	40023800 	.word	0x40023800
 800497c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004980:	4b1f      	ldr	r3, [pc, #124]	; (8004a00 <HAL_RCC_OscConfig+0x558>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d030      	beq.n	80049f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004998:	429a      	cmp	r2, r3
 800499a:	d129      	bne.n	80049f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d122      	bne.n	80049f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049b0:	4013      	ands	r3, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d119      	bne.n	80049f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	3b01      	subs	r3, #1
 80049ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d10f      	bne.n	80049f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d107      	bne.n	80049f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800

08004a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0d0      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a1c:	4b6a      	ldr	r3, [pc, #424]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d910      	bls.n	8004a4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2a:	4b67      	ldr	r3, [pc, #412]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f023 020f 	bic.w	r2, r3, #15
 8004a32:	4965      	ldr	r1, [pc, #404]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3a:	4b63      	ldr	r3, [pc, #396]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d001      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0b8      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d020      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a64:	4b59      	ldr	r3, [pc, #356]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	4a58      	ldr	r2, [pc, #352]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a7c:	4b53      	ldr	r3, [pc, #332]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	4a52      	ldr	r2, [pc, #328]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a88:	4b50      	ldr	r3, [pc, #320]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	494d      	ldr	r1, [pc, #308]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d040      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d107      	bne.n	8004abe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aae:	4b47      	ldr	r3, [pc, #284]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d115      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e07f      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac6:	4b41      	ldr	r3, [pc, #260]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d109      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e073      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad6:	4b3d      	ldr	r3, [pc, #244]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e06b      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae6:	4b39      	ldr	r3, [pc, #228]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f023 0203 	bic.w	r2, r3, #3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	4936      	ldr	r1, [pc, #216]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af8:	f7fd ffb2 	bl	8002a60 <HAL_GetTick>
 8004afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afe:	e00a      	b.n	8004b16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b00:	f7fd ffae 	bl	8002a60 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e053      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b16:	4b2d      	ldr	r3, [pc, #180]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 020c 	and.w	r2, r3, #12
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d1eb      	bne.n	8004b00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b28:	4b27      	ldr	r3, [pc, #156]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d210      	bcs.n	8004b58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b24      	ldr	r3, [pc, #144]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 020f 	bic.w	r2, r3, #15
 8004b3e:	4922      	ldr	r1, [pc, #136]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	4b20      	ldr	r3, [pc, #128]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e032      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b64:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4916      	ldr	r1, [pc, #88]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	490e      	ldr	r1, [pc, #56]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b96:	f000 f821 	bl	8004bdc <HAL_RCC_GetSysClockFreq>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	490a      	ldr	r1, [pc, #40]	; (8004bd0 <HAL_RCC_ClockConfig+0x1cc>)
 8004ba8:	5ccb      	ldrb	r3, [r1, r3]
 8004baa:	fa22 f303 	lsr.w	r3, r2, r3
 8004bae:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <HAL_RCC_ClockConfig+0x1d0>)
 8004bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bb2:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <HAL_RCC_ClockConfig+0x1d4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fd f966 	bl	8001e88 <HAL_InitTick>

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40023c00 	.word	0x40023c00
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	0800dee8 	.word	0x0800dee8
 8004bd4:	20000058 	.word	0x20000058
 8004bd8:	2000005c 	.word	0x2000005c

08004bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be0:	b094      	sub	sp, #80	; 0x50
 8004be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004be4:	2300      	movs	r3, #0
 8004be6:	647b      	str	r3, [r7, #68]	; 0x44
 8004be8:	2300      	movs	r3, #0
 8004bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bec:	2300      	movs	r3, #0
 8004bee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bf4:	4b79      	ldr	r3, [pc, #484]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 030c 	and.w	r3, r3, #12
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d00d      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0x40>
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	f200 80e1 	bhi.w	8004dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <HAL_RCC_GetSysClockFreq+0x34>
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d003      	beq.n	8004c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c0e:	e0db      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c10:	4b73      	ldr	r3, [pc, #460]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c14:	e0db      	b.n	8004dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c16:	4b73      	ldr	r3, [pc, #460]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c1a:	e0d8      	b.n	8004dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c1c:	4b6f      	ldr	r3, [pc, #444]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c24:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c26:	4b6d      	ldr	r3, [pc, #436]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d063      	beq.n	8004cfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c32:	4b6a      	ldr	r3, [pc, #424]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	099b      	lsrs	r3, r3, #6
 8004c38:	2200      	movs	r2, #0
 8004c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c44:	633b      	str	r3, [r7, #48]	; 0x30
 8004c46:	2300      	movs	r3, #0
 8004c48:	637b      	str	r3, [r7, #52]	; 0x34
 8004c4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c4e:	4622      	mov	r2, r4
 8004c50:	462b      	mov	r3, r5
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f04f 0100 	mov.w	r1, #0
 8004c5a:	0159      	lsls	r1, r3, #5
 8004c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c60:	0150      	lsls	r0, r2, #5
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4621      	mov	r1, r4
 8004c68:	1a51      	subs	r1, r2, r1
 8004c6a:	6139      	str	r1, [r7, #16]
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c80:	4659      	mov	r1, fp
 8004c82:	018b      	lsls	r3, r1, #6
 8004c84:	4651      	mov	r1, sl
 8004c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c8a:	4651      	mov	r1, sl
 8004c8c:	018a      	lsls	r2, r1, #6
 8004c8e:	4651      	mov	r1, sl
 8004c90:	ebb2 0801 	subs.w	r8, r2, r1
 8004c94:	4659      	mov	r1, fp
 8004c96:	eb63 0901 	sbc.w	r9, r3, r1
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cae:	4690      	mov	r8, r2
 8004cb0:	4699      	mov	r9, r3
 8004cb2:	4623      	mov	r3, r4
 8004cb4:	eb18 0303 	adds.w	r3, r8, r3
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	462b      	mov	r3, r5
 8004cbc:	eb49 0303 	adc.w	r3, r9, r3
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cce:	4629      	mov	r1, r5
 8004cd0:	024b      	lsls	r3, r1, #9
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cd8:	4621      	mov	r1, r4
 8004cda:	024a      	lsls	r2, r1, #9
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ce6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cec:	f7fb faf8 	bl	80002e0 <__aeabi_uldivmod>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cf8:	e058      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cfa:	4b38      	ldr	r3, [pc, #224]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	099b      	lsrs	r3, r3, #6
 8004d00:	2200      	movs	r2, #0
 8004d02:	4618      	mov	r0, r3
 8004d04:	4611      	mov	r1, r2
 8004d06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d0a:	623b      	str	r3, [r7, #32]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d14:	4642      	mov	r2, r8
 8004d16:	464b      	mov	r3, r9
 8004d18:	f04f 0000 	mov.w	r0, #0
 8004d1c:	f04f 0100 	mov.w	r1, #0
 8004d20:	0159      	lsls	r1, r3, #5
 8004d22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d26:	0150      	lsls	r0, r2, #5
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4641      	mov	r1, r8
 8004d2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d32:	4649      	mov	r1, r9
 8004d34:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d4c:	ebb2 040a 	subs.w	r4, r2, sl
 8004d50:	eb63 050b 	sbc.w	r5, r3, fp
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	00eb      	lsls	r3, r5, #3
 8004d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d62:	00e2      	lsls	r2, r4, #3
 8004d64:	4614      	mov	r4, r2
 8004d66:	461d      	mov	r5, r3
 8004d68:	4643      	mov	r3, r8
 8004d6a:	18e3      	adds	r3, r4, r3
 8004d6c:	603b      	str	r3, [r7, #0]
 8004d6e:	464b      	mov	r3, r9
 8004d70:	eb45 0303 	adc.w	r3, r5, r3
 8004d74:	607b      	str	r3, [r7, #4]
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d82:	4629      	mov	r1, r5
 8004d84:	028b      	lsls	r3, r1, #10
 8004d86:	4621      	mov	r1, r4
 8004d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	028a      	lsls	r2, r1, #10
 8004d90:	4610      	mov	r0, r2
 8004d92:	4619      	mov	r1, r3
 8004d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d96:	2200      	movs	r2, #0
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	61fa      	str	r2, [r7, #28]
 8004d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004da0:	f7fb fa9e 	bl	80002e0 <__aeabi_uldivmod>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4613      	mov	r3, r2
 8004daa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004dac:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	0c1b      	lsrs	r3, r3, #16
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	3301      	adds	r3, #1
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004dbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dc6:	e002      	b.n	8004dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dc8:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3750      	adds	r7, #80	; 0x50
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dda:	bf00      	nop
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	00f42400 	.word	0x00f42400
 8004de4:	007a1200 	.word	0x007a1200

08004de8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dec:	4b03      	ldr	r3, [pc, #12]	; (8004dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8004dee:	681b      	ldr	r3, [r3, #0]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000058 	.word	0x20000058

08004e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e04:	f7ff fff0 	bl	8004de8 <HAL_RCC_GetHCLKFreq>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	0a9b      	lsrs	r3, r3, #10
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	4903      	ldr	r1, [pc, #12]	; (8004e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e16:	5ccb      	ldrb	r3, [r1, r3]
 8004e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40023800 	.word	0x40023800
 8004e24:	0800def8 	.word	0x0800def8

08004e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e2c:	f7ff ffdc 	bl	8004de8 <HAL_RCC_GetHCLKFreq>
 8004e30:	4602      	mov	r2, r0
 8004e32:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	0b5b      	lsrs	r3, r3, #13
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	4903      	ldr	r1, [pc, #12]	; (8004e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e3e:	5ccb      	ldrb	r3, [r1, r3]
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	0800def8 	.word	0x0800def8

08004e50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	220f      	movs	r2, #15
 8004e5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e60:	4b12      	ldr	r3, [pc, #72]	; (8004eac <HAL_RCC_GetClockConfig+0x5c>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 0203 	and.w	r2, r3, #3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <HAL_RCC_GetClockConfig+0x5c>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e78:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <HAL_RCC_GetClockConfig+0x5c>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004e84:	4b09      	ldr	r3, [pc, #36]	; (8004eac <HAL_RCC_GetClockConfig+0x5c>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	08db      	lsrs	r3, r3, #3
 8004e8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e92:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <HAL_RCC_GetClockConfig+0x60>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 020f 	and.w	r2, r3, #15
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	601a      	str	r2, [r3, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	40023c00 	.word	0x40023c00

08004eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d012      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004edc:	4b69      	ldr	r3, [pc, #420]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	4a68      	ldr	r2, [pc, #416]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ee6:	6093      	str	r3, [r2, #8]
 8004ee8:	4b66      	ldr	r3, [pc, #408]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef0:	4964      	ldr	r1, [pc, #400]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004efe:	2301      	movs	r3, #1
 8004f00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d017      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f0e:	4b5d      	ldr	r3, [pc, #372]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1c:	4959      	ldr	r1, [pc, #356]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d017      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f4a:	4b4e      	ldr	r3, [pc, #312]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	494a      	ldr	r1, [pc, #296]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f68:	d101      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004f76:	2301      	movs	r3, #1
 8004f78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004f86:	2301      	movs	r3, #1
 8004f88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 808b 	beq.w	80050ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f98:	4b3a      	ldr	r3, [pc, #232]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	4a39      	ldr	r2, [pc, #228]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8004fa4:	4b37      	ldr	r3, [pc, #220]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fb0:	4b35      	ldr	r3, [pc, #212]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a34      	ldr	r2, [pc, #208]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fbc:	f7fd fd50 	bl	8002a60 <HAL_GetTick>
 8004fc0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc4:	f7fd fd4c 	bl	8002a60 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b64      	cmp	r3, #100	; 0x64
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e38f      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004fd6:	4b2c      	ldr	r3, [pc, #176]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0f0      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fe2:	4b28      	ldr	r3, [pc, #160]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d035      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d02e      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005000:	4b20      	ldr	r3, [pc, #128]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005008:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800500a:	4b1e      	ldr	r3, [pc, #120]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	4a1d      	ldr	r2, [pc, #116]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005014:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005016:	4b1b      	ldr	r3, [pc, #108]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501a:	4a1a      	ldr	r2, [pc, #104]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800501c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005020:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005022:	4a18      	ldr	r2, [pc, #96]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005028:	4b16      	ldr	r3, [pc, #88]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b01      	cmp	r3, #1
 8005032:	d114      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fd fd14 	bl	8002a60 <HAL_GetTick>
 8005038:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800503a:	e00a      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800503c:	f7fd fd10 	bl	8002a60 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	f241 3288 	movw	r2, #5000	; 0x1388
 800504a:	4293      	cmp	r3, r2
 800504c:	d901      	bls.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e351      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005052:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0ee      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800506a:	d111      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800506c:	4b05      	ldr	r3, [pc, #20]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005078:	4b04      	ldr	r3, [pc, #16]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800507a:	400b      	ands	r3, r1
 800507c:	4901      	ldr	r1, [pc, #4]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507e:	4313      	orrs	r3, r2
 8005080:	608b      	str	r3, [r1, #8]
 8005082:	e00b      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005084:	40023800 	.word	0x40023800
 8005088:	40007000 	.word	0x40007000
 800508c:	0ffffcff 	.word	0x0ffffcff
 8005090:	4bac      	ldr	r3, [pc, #688]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	4aab      	ldr	r2, [pc, #684]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005096:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800509a:	6093      	str	r3, [r2, #8]
 800509c:	4ba9      	ldr	r3, [pc, #676]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800509e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050a8:	49a6      	ldr	r1, [pc, #664]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d010      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050ba:	4ba2      	ldr	r3, [pc, #648]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050c0:	4aa0      	ldr	r2, [pc, #640]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80050ca:	4b9e      	ldr	r3, [pc, #632]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	499b      	ldr	r1, [pc, #620]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050e8:	4b96      	ldr	r3, [pc, #600]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f6:	4993      	ldr	r1, [pc, #588]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800510a:	4b8e      	ldr	r3, [pc, #568]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800510c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005110:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005118:	498a      	ldr	r1, [pc, #552]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800512c:	4b85      	ldr	r3, [pc, #532]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800512e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005132:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800513a:	4982      	ldr	r1, [pc, #520]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800514e:	4b7d      	ldr	r3, [pc, #500]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005154:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515c:	4979      	ldr	r1, [pc, #484]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005170:	4b74      	ldr	r3, [pc, #464]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005176:	f023 0203 	bic.w	r2, r3, #3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517e:	4971      	ldr	r1, [pc, #452]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005192:	4b6c      	ldr	r3, [pc, #432]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005198:	f023 020c 	bic.w	r2, r3, #12
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a0:	4968      	ldr	r1, [pc, #416]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051b4:	4b63      	ldr	r3, [pc, #396]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c2:	4960      	ldr	r1, [pc, #384]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051d6:	4b5b      	ldr	r3, [pc, #364]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e4:	4957      	ldr	r1, [pc, #348]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051f8:	4b52      	ldr	r3, [pc, #328]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005206:	494f      	ldr	r1, [pc, #316]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800521a:	4b4a      	ldr	r3, [pc, #296]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800521c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005220:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005228:	4946      	ldr	r1, [pc, #280]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800523c:	4b41      	ldr	r3, [pc, #260]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800523e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005242:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524a:	493e      	ldr	r1, [pc, #248]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800525e:	4b39      	ldr	r3, [pc, #228]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005264:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526c:	4935      	ldr	r1, [pc, #212]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005280:	4b30      	ldr	r3, [pc, #192]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005286:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800528e:	492d      	ldr	r1, [pc, #180]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d011      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80052a2:	4b28      	ldr	r3, [pc, #160]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b0:	4924      	ldr	r1, [pc, #144]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c0:	d101      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80052c2:	2301      	movs	r3, #1
 80052c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80052d2:	2301      	movs	r3, #1
 80052d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052e2:	4b18      	ldr	r3, [pc, #96]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f0:	4914      	ldr	r1, [pc, #80]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00b      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005304:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005314:	490b      	ldr	r1, [pc, #44]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00f      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005328:	4b06      	ldr	r3, [pc, #24]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005338:	4902      	ldr	r1, [pc, #8]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005340:	e002      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005342:	bf00      	nop
 8005344:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00b      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005354:	4b8a      	ldr	r3, [pc, #552]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800535a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005364:	4986      	ldr	r1, [pc, #536]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005366:	4313      	orrs	r3, r2
 8005368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00b      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005378:	4b81      	ldr	r3, [pc, #516]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800537a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800537e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005388:	497d      	ldr	r1, [pc, #500]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d006      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 80d6 	beq.w	8005550 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053a4:	4b76      	ldr	r3, [pc, #472]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a75      	ldr	r2, [pc, #468]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b0:	f7fd fb56 	bl	8002a60 <HAL_GetTick>
 80053b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053b6:	e008      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053b8:	f7fd fb52 	bl	8002a60 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b64      	cmp	r3, #100	; 0x64
 80053c4:	d901      	bls.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e195      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053ca:	4b6d      	ldr	r3, [pc, #436]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1f0      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d021      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d11d      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053ea:	4b65      	ldr	r3, [pc, #404]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f0:	0c1b      	lsrs	r3, r3, #16
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053f8:	4b61      	ldr	r3, [pc, #388]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053fe:	0e1b      	lsrs	r3, r3, #24
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	019a      	lsls	r2, r3, #6
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	041b      	lsls	r3, r3, #16
 8005410:	431a      	orrs	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	061b      	lsls	r3, r3, #24
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	071b      	lsls	r3, r3, #28
 800541e:	4958      	ldr	r1, [pc, #352]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800543a:	d00a      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005444:	2b00      	cmp	r3, #0
 8005446:	d02e      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005450:	d129      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005452:	4b4b      	ldr	r3, [pc, #300]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005458:	0c1b      	lsrs	r3, r3, #16
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005460:	4b47      	ldr	r3, [pc, #284]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005466:	0f1b      	lsrs	r3, r3, #28
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	019a      	lsls	r2, r3, #6
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	041b      	lsls	r3, r3, #16
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	061b      	lsls	r3, r3, #24
 8005480:	431a      	orrs	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	071b      	lsls	r3, r3, #28
 8005486:	493e      	ldr	r1, [pc, #248]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800548e:	4b3c      	ldr	r3, [pc, #240]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005494:	f023 021f 	bic.w	r2, r3, #31
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	3b01      	subs	r3, #1
 800549e:	4938      	ldr	r1, [pc, #224]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01d      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80054b2:	4b33      	ldr	r3, [pc, #204]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054b8:	0e1b      	lsrs	r3, r3, #24
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054c0:	4b2f      	ldr	r3, [pc, #188]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054c6:	0f1b      	lsrs	r3, r3, #28
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	019a      	lsls	r2, r3, #6
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	041b      	lsls	r3, r3, #16
 80054da:	431a      	orrs	r2, r3
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	061b      	lsls	r3, r3, #24
 80054e0:	431a      	orrs	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	071b      	lsls	r3, r3, #28
 80054e6:	4926      	ldr	r1, [pc, #152]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d011      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	019a      	lsls	r2, r3, #6
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	041b      	lsls	r3, r3, #16
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	061b      	lsls	r3, r3, #24
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	071b      	lsls	r3, r3, #28
 8005516:	491a      	ldr	r1, [pc, #104]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800551e:	4b18      	ldr	r3, [pc, #96]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a17      	ldr	r2, [pc, #92]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005524:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800552a:	f7fd fa99 	bl	8002a60 <HAL_GetTick>
 800552e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005530:	e008      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005532:	f7fd fa95 	bl	8002a60 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b64      	cmp	r3, #100	; 0x64
 800553e:	d901      	bls.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e0d8      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005544:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0f0      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2b01      	cmp	r3, #1
 8005554:	f040 80ce 	bne.w	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005558:	4b09      	ldr	r3, [pc, #36]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a08      	ldr	r2, [pc, #32]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800555e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005564:	f7fd fa7c 	bl	8002a60 <HAL_GetTick>
 8005568:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800556a:	e00b      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800556c:	f7fd fa78 	bl	8002a60 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b64      	cmp	r3, #100	; 0x64
 8005578:	d904      	bls.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e0bb      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800557e:	bf00      	nop
 8005580:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005584:	4b5e      	ldr	r3, [pc, #376]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800558c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005590:	d0ec      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d02e      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d12a      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80055ba:	4b51      	ldr	r3, [pc, #324]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c0:	0c1b      	lsrs	r3, r3, #16
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055c8:	4b4d      	ldr	r3, [pc, #308]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ce:	0f1b      	lsrs	r3, r3, #28
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	019a      	lsls	r2, r3, #6
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	041b      	lsls	r3, r3, #16
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	061b      	lsls	r3, r3, #24
 80055e8:	431a      	orrs	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	071b      	lsls	r3, r3, #28
 80055ee:	4944      	ldr	r1, [pc, #272]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055f6:	4b42      	ldr	r3, [pc, #264]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	3b01      	subs	r3, #1
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	493d      	ldr	r1, [pc, #244]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d022      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005624:	d11d      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005626:	4b36      	ldr	r3, [pc, #216]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562c:	0e1b      	lsrs	r3, r3, #24
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005634:	4b32      	ldr	r3, [pc, #200]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563a:	0f1b      	lsrs	r3, r3, #28
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	019a      	lsls	r2, r3, #6
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	041b      	lsls	r3, r3, #16
 800564e:	431a      	orrs	r2, r3
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	061b      	lsls	r3, r3, #24
 8005654:	431a      	orrs	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	071b      	lsls	r3, r3, #28
 800565a:	4929      	ldr	r1, [pc, #164]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d028      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800566e:	4b24      	ldr	r3, [pc, #144]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005674:	0e1b      	lsrs	r3, r3, #24
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800567c:	4b20      	ldr	r3, [pc, #128]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800567e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005682:	0c1b      	lsrs	r3, r3, #16
 8005684:	f003 0303 	and.w	r3, r3, #3
 8005688:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	019a      	lsls	r2, r3, #6
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	041b      	lsls	r3, r3, #16
 8005694:	431a      	orrs	r2, r3
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	061b      	lsls	r3, r3, #24
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	071b      	lsls	r3, r3, #28
 80056a2:	4917      	ldr	r1, [pc, #92]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80056aa:	4b15      	ldr	r3, [pc, #84]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	4911      	ldr	r1, [pc, #68]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80056c0:	4b0f      	ldr	r3, [pc, #60]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a0e      	ldr	r2, [pc, #56]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056cc:	f7fd f9c8 	bl	8002a60 <HAL_GetTick>
 80056d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056d2:	e008      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056d4:	f7fd f9c4 	bl	8002a60 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b64      	cmp	r3, #100	; 0x64
 80056e0:	d901      	bls.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e007      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056e6:	4b06      	ldr	r3, [pc, #24]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056f2:	d1ef      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3720      	adds	r7, #32
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	40023800 	.word	0x40023800

08005704 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e09d      	b.n	8005852 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	2b00      	cmp	r3, #0
 800571c:	d108      	bne.n	8005730 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005726:	d009      	beq.n	800573c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	61da      	str	r2, [r3, #28]
 800572e:	e005      	b.n	800573c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fc f8aa 	bl	80018b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005772:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800577c:	d902      	bls.n	8005784 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	e002      	b.n	800578a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005788:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005792:	d007      	beq.n	80057a4 <HAL_SPI_Init+0xa0>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800579c:	d002      	beq.n	80057a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057b4:	431a      	orrs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e6:	ea42 0103 	orr.w	r1, r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	0c1b      	lsrs	r3, r3, #16
 8005800:	f003 0204 	and.w	r2, r3, #4
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	f003 0310 	and.w	r3, r3, #16
 800580c:	431a      	orrs	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	431a      	orrs	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005820:	ea42 0103 	orr.w	r1, r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69da      	ldr	r2, [r3, #28]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005840:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b088      	sub	sp, #32
 800585e:	af00      	add	r7, sp, #0
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	603b      	str	r3, [r7, #0]
 8005866:	4613      	mov	r3, r2
 8005868:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_SPI_Transmit+0x22>
 8005878:	2302      	movs	r3, #2
 800587a:	e158      	b.n	8005b2e <HAL_SPI_Transmit+0x2d4>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005884:	f7fd f8ec 	bl	8002a60 <HAL_GetTick>
 8005888:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800588a:	88fb      	ldrh	r3, [r7, #6]
 800588c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b01      	cmp	r3, #1
 8005898:	d002      	beq.n	80058a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800589a:	2302      	movs	r3, #2
 800589c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800589e:	e13d      	b.n	8005b1c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_SPI_Transmit+0x52>
 80058a6:	88fb      	ldrh	r3, [r7, #6]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d102      	bne.n	80058b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058b0:	e134      	b.n	8005b1c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2203      	movs	r2, #3
 80058b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	88fa      	ldrh	r2, [r7, #6]
 80058ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	88fa      	ldrh	r2, [r7, #6]
 80058d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058fc:	d10f      	bne.n	800591e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800590c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800591c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005928:	2b40      	cmp	r3, #64	; 0x40
 800592a:	d007      	beq.n	800593c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800593a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005944:	d94b      	bls.n	80059de <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <HAL_SPI_Transmit+0xfa>
 800594e:	8afb      	ldrh	r3, [r7, #22]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d13e      	bne.n	80059d2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	881a      	ldrh	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	1c9a      	adds	r2, r3, #2
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005978:	e02b      	b.n	80059d2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b02      	cmp	r3, #2
 8005986:	d112      	bne.n	80059ae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598c:	881a      	ldrh	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	1c9a      	adds	r2, r3, #2
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059ac:	e011      	b.n	80059d2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ae:	f7fd f857 	bl	8002a60 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d803      	bhi.n	80059c6 <HAL_SPI_Transmit+0x16c>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d102      	bne.n	80059cc <HAL_SPI_Transmit+0x172>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d102      	bne.n	80059d2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059d0:	e0a4      	b.n	8005b1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1ce      	bne.n	800597a <HAL_SPI_Transmit+0x120>
 80059dc:	e07c      	b.n	8005ad8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <HAL_SPI_Transmit+0x192>
 80059e6:	8afb      	ldrh	r3, [r7, #22]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d170      	bne.n	8005ace <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d912      	bls.n	8005a1c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	881a      	ldrh	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	1c9a      	adds	r2, r3, #2
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b02      	subs	r3, #2
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a1a:	e058      	b.n	8005ace <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	330c      	adds	r3, #12
 8005a26:	7812      	ldrb	r2, [r2, #0]
 8005a28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005a42:	e044      	b.n	8005ace <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d12b      	bne.n	8005aaa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d912      	bls.n	8005a82 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	881a      	ldrh	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	1c9a      	adds	r2, r3, #2
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	3b02      	subs	r3, #2
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a80:	e025      	b.n	8005ace <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	7812      	ldrb	r2, [r2, #0]
 8005a8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005aa8:	e011      	b.n	8005ace <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aaa:	f7fc ffd9 	bl	8002a60 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d803      	bhi.n	8005ac2 <HAL_SPI_Transmit+0x268>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d102      	bne.n	8005ac8 <HAL_SPI_Transmit+0x26e>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d102      	bne.n	8005ace <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005acc:	e026      	b.n	8005b1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1b5      	bne.n	8005a44 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	6839      	ldr	r1, [r7, #0]
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 fadd 	bl	800609c <SPI_EndRxTxTransaction>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2220      	movs	r2, #32
 8005aec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10a      	bne.n	8005b0c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005af6:	2300      	movs	r3, #0
 8005af8:	613b      	str	r3, [r7, #16]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	613b      	str	r3, [r7, #16]
 8005b0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e000      	b.n	8005b1c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005b1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3720      	adds	r7, #32
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	4613      	mov	r3, r2
 8005b44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_SPI_Transmit_DMA+0x20>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e0d8      	b.n	8005d0a <HAL_SPI_Transmit_DMA+0x1d2>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d002      	beq.n	8005b72 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b70:	e0c6      	b.n	8005d00 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <HAL_SPI_Transmit_DMA+0x46>
 8005b78:	88fb      	ldrh	r3, [r7, #6]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d102      	bne.n	8005b84 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b82:	e0bd      	b.n	8005d00 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2203      	movs	r2, #3
 8005b88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	88fa      	ldrh	r2, [r7, #6]
 8005b9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	88fa      	ldrh	r2, [r7, #6]
 8005ba2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bce:	d10f      	bne.n	8005bf0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf4:	4a47      	ldr	r2, [pc, #284]	; (8005d14 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005bf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfc:	4a46      	ldr	r2, [pc, #280]	; (8005d18 <HAL_SPI_Transmit_DMA+0x1e0>)
 8005bfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c04:	4a45      	ldr	r2, [pc, #276]	; (8005d1c <HAL_SPI_Transmit_DMA+0x1e4>)
 8005c06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c1e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c28:	d82d      	bhi.n	8005c86 <HAL_SPI_Transmit_DMA+0x14e>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c34:	d127      	bne.n	8005c86 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10f      	bne.n	8005c64 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c52:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	085b      	lsrs	r3, r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c62:	e010      	b.n	8005c86 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c72:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	3301      	adds	r3, #1
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	4619      	mov	r1, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	330c      	adds	r3, #12
 8005c96:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c9c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005c9e:	f7fd f9f5 	bl	800308c <HAL_DMA_Start_IT>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00c      	beq.n	8005cc2 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cac:	f043 0210 	orr.w	r2, r3, #16
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005cc0:	e01e      	b.n	8005d00 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d007      	beq.n	8005ce0 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cde:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0220 	orr.w	r2, r2, #32
 8005cee:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0202 	orr.w	r2, r2, #2
 8005cfe:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	08005e05 	.word	0x08005e05
 8005d18:	08005d5d 	.word	0x08005d5d
 8005d1c:	08005e21 	.word	0x08005e21

08005d20 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d6a:	f7fc fe79 	bl	8002a60 <HAL_GetTick>
 8005d6e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7e:	d03b      	beq.n	8005df8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0220 	bic.w	r2, r2, #32
 8005d8e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0202 	bic.w	r2, r2, #2
 8005d9e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	2164      	movs	r1, #100	; 0x64
 8005da4:	6978      	ldr	r0, [r7, #20]
 8005da6:	f000 f979 	bl	800609c <SPI_EndRxTxTransaction>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db4:	f043 0220 	orr.w	r2, r3, #32
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005df0:	6978      	ldr	r0, [r7, #20]
 8005df2:	f7ff ffa9 	bl	8005d48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005df6:	e002      	b.n	8005dfe <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005df8:	6978      	ldr	r0, [r7, #20]
 8005dfa:	f7ff ff91 	bl	8005d20 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e10:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f7ff ff8e 	bl	8005d34 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e18:	bf00      	nop
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0203 	bic.w	r2, r2, #3
 8005e3c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e42:	f043 0210 	orr.w	r2, r3, #16
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f7ff ff78 	bl	8005d48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	603b      	str	r3, [r7, #0]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e70:	f7fc fdf6 	bl	8002a60 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	1a9b      	subs	r3, r3, r2
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e80:	f7fc fdee 	bl	8002a60 <HAL_GetTick>
 8005e84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e86:	4b39      	ldr	r3, [pc, #228]	; (8005f6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	015b      	lsls	r3, r3, #5
 8005e8c:	0d1b      	lsrs	r3, r3, #20
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	fb02 f303 	mul.w	r3, r2, r3
 8005e94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e96:	e054      	b.n	8005f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9e:	d050      	beq.n	8005f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ea0:	f7fc fdde 	bl	8002a60 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d902      	bls.n	8005eb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d13d      	bne.n	8005f32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ec4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ece:	d111      	bne.n	8005ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed8:	d004      	beq.n	8005ee4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee2:	d107      	bne.n	8005ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005efc:	d10f      	bne.n	8005f1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e017      	b.n	8005f62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	bf0c      	ite	eq
 8005f52:	2301      	moveq	r3, #1
 8005f54:	2300      	movne	r3, #0
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	461a      	mov	r2, r3
 8005f5a:	79fb      	ldrb	r3, [r7, #7]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d19b      	bne.n	8005e98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3720      	adds	r7, #32
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000058 	.word	0x20000058

08005f70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08a      	sub	sp, #40	; 0x28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f82:	f7fc fd6d 	bl	8002a60 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	1a9b      	subs	r3, r3, r2
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	4413      	add	r3, r2
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005f92:	f7fc fd65 	bl	8002a60 <HAL_GetTick>
 8005f96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005fa0:	4b3d      	ldr	r3, [pc, #244]	; (8006098 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	00da      	lsls	r2, r3, #3
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	0d1b      	lsrs	r3, r3, #20
 8005fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb2:	fb02 f303 	mul.w	r3, r2, r3
 8005fb6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005fb8:	e060      	b.n	800607c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005fc0:	d107      	bne.n	8005fd2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d104      	bne.n	8005fd2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005fd0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd8:	d050      	beq.n	800607c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fda:	f7fc fd41 	bl	8002a60 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d902      	bls.n	8005ff0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d13d      	bne.n	800606c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ffe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006008:	d111      	bne.n	800602e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006012:	d004      	beq.n	800601e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800601c:	d107      	bne.n	800602e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800602c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006036:	d10f      	bne.n	8006058 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006056:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e010      	b.n	800608e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	3b01      	subs	r3, #1
 800607a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	4013      	ands	r3, r2
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	429a      	cmp	r2, r3
 800608a:	d196      	bne.n	8005fba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3728      	adds	r7, #40	; 0x28
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000058 	.word	0x20000058

0800609c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f7ff ff5b 	bl	8005f70 <SPI_WaitFifoStateUntilTimeout>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d007      	beq.n	80060d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c4:	f043 0220 	orr.w	r2, r3, #32
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e046      	b.n	800615e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80060d0:	4b25      	ldr	r3, [pc, #148]	; (8006168 <SPI_EndRxTxTransaction+0xcc>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a25      	ldr	r2, [pc, #148]	; (800616c <SPI_EndRxTxTransaction+0xd0>)
 80060d6:	fba2 2303 	umull	r2, r3, r2, r3
 80060da:	0d5b      	lsrs	r3, r3, #21
 80060dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80060e0:	fb02 f303 	mul.w	r3, r2, r3
 80060e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ee:	d112      	bne.n	8006116 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2200      	movs	r2, #0
 80060f8:	2180      	movs	r1, #128	; 0x80
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f7ff feb0 	bl	8005e60 <SPI_WaitFlagStateUntilTimeout>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d016      	beq.n	8006134 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800610a:	f043 0220 	orr.w	r2, r3, #32
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e023      	b.n	800615e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	3b01      	subs	r3, #1
 8006120:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612c:	2b80      	cmp	r3, #128	; 0x80
 800612e:	d0f2      	beq.n	8006116 <SPI_EndRxTxTransaction+0x7a>
 8006130:	e000      	b.n	8006134 <SPI_EndRxTxTransaction+0x98>
        break;
 8006132:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff ff15 	bl	8005f70 <SPI_WaitFifoStateUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006150:	f043 0220 	orr.w	r2, r3, #32
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e000      	b.n	800615e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20000058 	.word	0x20000058
 800616c:	165e9f81 	.word	0x165e9f81

08006170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e049      	b.n	8006216 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d106      	bne.n	800619c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f841 	bl	800621e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3304      	adds	r3, #4
 80061ac:	4619      	mov	r1, r3
 80061ae:	4610      	mov	r0, r2
 80061b0:	f000 fc66 	bl	8006a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
	...

08006234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b01      	cmp	r3, #1
 8006246:	d001      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e054      	b.n	80062f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0201 	orr.w	r2, r2, #1
 8006262:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a26      	ldr	r2, [pc, #152]	; (8006304 <HAL_TIM_Base_Start_IT+0xd0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d022      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x80>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006276:	d01d      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x80>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a22      	ldr	r2, [pc, #136]	; (8006308 <HAL_TIM_Base_Start_IT+0xd4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d018      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x80>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a21      	ldr	r2, [pc, #132]	; (800630c <HAL_TIM_Base_Start_IT+0xd8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d013      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x80>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a1f      	ldr	r2, [pc, #124]	; (8006310 <HAL_TIM_Base_Start_IT+0xdc>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00e      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x80>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a1e      	ldr	r2, [pc, #120]	; (8006314 <HAL_TIM_Base_Start_IT+0xe0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d009      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x80>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1c      	ldr	r2, [pc, #112]	; (8006318 <HAL_TIM_Base_Start_IT+0xe4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d004      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x80>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1b      	ldr	r2, [pc, #108]	; (800631c <HAL_TIM_Base_Start_IT+0xe8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d115      	bne.n	80062e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	4b19      	ldr	r3, [pc, #100]	; (8006320 <HAL_TIM_Base_Start_IT+0xec>)
 80062bc:	4013      	ands	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b06      	cmp	r3, #6
 80062c4:	d015      	beq.n	80062f2 <HAL_TIM_Base_Start_IT+0xbe>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062cc:	d011      	beq.n	80062f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0201 	orr.w	r2, r2, #1
 80062dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062de:	e008      	b.n	80062f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	e000      	b.n	80062f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40010000 	.word	0x40010000
 8006308:	40000400 	.word	0x40000400
 800630c:	40000800 	.word	0x40000800
 8006310:	40000c00 	.word	0x40000c00
 8006314:	40010400 	.word	0x40010400
 8006318:	40014000 	.word	0x40014000
 800631c:	40001800 	.word	0x40001800
 8006320:	00010007 	.word	0x00010007

08006324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e049      	b.n	80063ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7fb ff64 	bl	8002218 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3304      	adds	r3, #4
 8006360:	4619      	mov	r1, r3
 8006362:	4610      	mov	r0, r2
 8006364:	f000 fb8c 	bl	8006a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d109      	bne.n	80063f8 <HAL_TIM_PWM_Start+0x24>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	bf14      	ite	ne
 80063f0:	2301      	movne	r3, #1
 80063f2:	2300      	moveq	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	e03c      	b.n	8006472 <HAL_TIM_PWM_Start+0x9e>
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d109      	bne.n	8006412 <HAL_TIM_PWM_Start+0x3e>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b01      	cmp	r3, #1
 8006408:	bf14      	ite	ne
 800640a:	2301      	movne	r3, #1
 800640c:	2300      	moveq	r3, #0
 800640e:	b2db      	uxtb	r3, r3
 8006410:	e02f      	b.n	8006472 <HAL_TIM_PWM_Start+0x9e>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b08      	cmp	r3, #8
 8006416:	d109      	bne.n	800642c <HAL_TIM_PWM_Start+0x58>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b01      	cmp	r3, #1
 8006422:	bf14      	ite	ne
 8006424:	2301      	movne	r3, #1
 8006426:	2300      	moveq	r3, #0
 8006428:	b2db      	uxtb	r3, r3
 800642a:	e022      	b.n	8006472 <HAL_TIM_PWM_Start+0x9e>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2b0c      	cmp	r3, #12
 8006430:	d109      	bne.n	8006446 <HAL_TIM_PWM_Start+0x72>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b01      	cmp	r3, #1
 800643c:	bf14      	ite	ne
 800643e:	2301      	movne	r3, #1
 8006440:	2300      	moveq	r3, #0
 8006442:	b2db      	uxtb	r3, r3
 8006444:	e015      	b.n	8006472 <HAL_TIM_PWM_Start+0x9e>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b10      	cmp	r3, #16
 800644a:	d109      	bne.n	8006460 <HAL_TIM_PWM_Start+0x8c>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b01      	cmp	r3, #1
 8006456:	bf14      	ite	ne
 8006458:	2301      	movne	r3, #1
 800645a:	2300      	moveq	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	e008      	b.n	8006472 <HAL_TIM_PWM_Start+0x9e>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b01      	cmp	r3, #1
 800646a:	bf14      	ite	ne
 800646c:	2301      	movne	r3, #1
 800646e:	2300      	moveq	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e092      	b.n	80065a0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d104      	bne.n	800648a <HAL_TIM_PWM_Start+0xb6>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006488:	e023      	b.n	80064d2 <HAL_TIM_PWM_Start+0xfe>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b04      	cmp	r3, #4
 800648e:	d104      	bne.n	800649a <HAL_TIM_PWM_Start+0xc6>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006498:	e01b      	b.n	80064d2 <HAL_TIM_PWM_Start+0xfe>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b08      	cmp	r3, #8
 800649e:	d104      	bne.n	80064aa <HAL_TIM_PWM_Start+0xd6>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064a8:	e013      	b.n	80064d2 <HAL_TIM_PWM_Start+0xfe>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b0c      	cmp	r3, #12
 80064ae:	d104      	bne.n	80064ba <HAL_TIM_PWM_Start+0xe6>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064b8:	e00b      	b.n	80064d2 <HAL_TIM_PWM_Start+0xfe>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b10      	cmp	r3, #16
 80064be:	d104      	bne.n	80064ca <HAL_TIM_PWM_Start+0xf6>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064c8:	e003      	b.n	80064d2 <HAL_TIM_PWM_Start+0xfe>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2202      	movs	r2, #2
 80064ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2201      	movs	r2, #1
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fdce 	bl	800707c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a30      	ldr	r2, [pc, #192]	; (80065a8 <HAL_TIM_PWM_Start+0x1d4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d004      	beq.n	80064f4 <HAL_TIM_PWM_Start+0x120>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a2f      	ldr	r2, [pc, #188]	; (80065ac <HAL_TIM_PWM_Start+0x1d8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d101      	bne.n	80064f8 <HAL_TIM_PWM_Start+0x124>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e000      	b.n	80064fa <HAL_TIM_PWM_Start+0x126>
 80064f8:	2300      	movs	r3, #0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d007      	beq.n	800650e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800650c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a25      	ldr	r2, [pc, #148]	; (80065a8 <HAL_TIM_PWM_Start+0x1d4>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d022      	beq.n	800655e <HAL_TIM_PWM_Start+0x18a>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006520:	d01d      	beq.n	800655e <HAL_TIM_PWM_Start+0x18a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a22      	ldr	r2, [pc, #136]	; (80065b0 <HAL_TIM_PWM_Start+0x1dc>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d018      	beq.n	800655e <HAL_TIM_PWM_Start+0x18a>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a20      	ldr	r2, [pc, #128]	; (80065b4 <HAL_TIM_PWM_Start+0x1e0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d013      	beq.n	800655e <HAL_TIM_PWM_Start+0x18a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a1f      	ldr	r2, [pc, #124]	; (80065b8 <HAL_TIM_PWM_Start+0x1e4>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00e      	beq.n	800655e <HAL_TIM_PWM_Start+0x18a>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a19      	ldr	r2, [pc, #100]	; (80065ac <HAL_TIM_PWM_Start+0x1d8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d009      	beq.n	800655e <HAL_TIM_PWM_Start+0x18a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a1b      	ldr	r2, [pc, #108]	; (80065bc <HAL_TIM_PWM_Start+0x1e8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d004      	beq.n	800655e <HAL_TIM_PWM_Start+0x18a>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a19      	ldr	r2, [pc, #100]	; (80065c0 <HAL_TIM_PWM_Start+0x1ec>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d115      	bne.n	800658a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	4b17      	ldr	r3, [pc, #92]	; (80065c4 <HAL_TIM_PWM_Start+0x1f0>)
 8006566:	4013      	ands	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b06      	cmp	r3, #6
 800656e:	d015      	beq.n	800659c <HAL_TIM_PWM_Start+0x1c8>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006576:	d011      	beq.n	800659c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006588:	e008      	b.n	800659c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f042 0201 	orr.w	r2, r2, #1
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	e000      	b.n	800659e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800659c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40010000 	.word	0x40010000
 80065ac:	40010400 	.word	0x40010400
 80065b0:	40000400 	.word	0x40000400
 80065b4:	40000800 	.word	0x40000800
 80065b8:	40000c00 	.word	0x40000c00
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40001800 	.word	0x40001800
 80065c4:	00010007 	.word	0x00010007

080065c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d122      	bne.n	8006624 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d11b      	bne.n	8006624 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f06f 0202 	mvn.w	r2, #2
 80065f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fa1a 	bl	8006a44 <HAL_TIM_IC_CaptureCallback>
 8006610:	e005      	b.n	800661e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fa0c 	bl	8006a30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fa1d 	bl	8006a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f003 0304 	and.w	r3, r3, #4
 800662e:	2b04      	cmp	r3, #4
 8006630:	d122      	bne.n	8006678 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b04      	cmp	r3, #4
 800663e:	d11b      	bne.n	8006678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f06f 0204 	mvn.w	r2, #4
 8006648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2202      	movs	r2, #2
 800664e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f9f0 	bl	8006a44 <HAL_TIM_IC_CaptureCallback>
 8006664:	e005      	b.n	8006672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f9e2 	bl	8006a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f9f3 	bl	8006a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f003 0308 	and.w	r3, r3, #8
 8006682:	2b08      	cmp	r3, #8
 8006684:	d122      	bne.n	80066cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f003 0308 	and.w	r3, r3, #8
 8006690:	2b08      	cmp	r3, #8
 8006692:	d11b      	bne.n	80066cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f06f 0208 	mvn.w	r2, #8
 800669c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2204      	movs	r2, #4
 80066a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	f003 0303 	and.w	r3, r3, #3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f9c6 	bl	8006a44 <HAL_TIM_IC_CaptureCallback>
 80066b8:	e005      	b.n	80066c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f9b8 	bl	8006a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f9c9 	bl	8006a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f003 0310 	and.w	r3, r3, #16
 80066d6:	2b10      	cmp	r3, #16
 80066d8:	d122      	bne.n	8006720 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f003 0310 	and.w	r3, r3, #16
 80066e4:	2b10      	cmp	r3, #16
 80066e6:	d11b      	bne.n	8006720 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f06f 0210 	mvn.w	r2, #16
 80066f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2208      	movs	r2, #8
 80066f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f99c 	bl	8006a44 <HAL_TIM_IC_CaptureCallback>
 800670c:	e005      	b.n	800671a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f98e 	bl	8006a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f99f 	bl	8006a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b01      	cmp	r3, #1
 800672c:	d10e      	bne.n	800674c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b01      	cmp	r3, #1
 800673a:	d107      	bne.n	800674c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f06f 0201 	mvn.w	r2, #1
 8006744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7fb f85c 	bl	8001804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006756:	2b80      	cmp	r3, #128	; 0x80
 8006758:	d10e      	bne.n	8006778 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006764:	2b80      	cmp	r3, #128	; 0x80
 8006766:	d107      	bne.n	8006778 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fd40 	bl	80071f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006786:	d10e      	bne.n	80067a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006792:	2b80      	cmp	r3, #128	; 0x80
 8006794:	d107      	bne.n	80067a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800679e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fd33 	bl	800720c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b0:	2b40      	cmp	r3, #64	; 0x40
 80067b2:	d10e      	bne.n	80067d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067be:	2b40      	cmp	r3, #64	; 0x40
 80067c0:	d107      	bne.n	80067d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f94d 	bl	8006a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b20      	cmp	r3, #32
 80067de:	d10e      	bne.n	80067fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b20      	cmp	r3, #32
 80067ec:	d107      	bne.n	80067fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f06f 0220 	mvn.w	r2, #32
 80067f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fcf3 	bl	80071e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800681e:	2b01      	cmp	r3, #1
 8006820:	d101      	bne.n	8006826 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006822:	2302      	movs	r3, #2
 8006824:	e0ff      	b.n	8006a26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b14      	cmp	r3, #20
 8006832:	f200 80f0 	bhi.w	8006a16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006836:	a201      	add	r2, pc, #4	; (adr r2, 800683c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683c:	08006891 	.word	0x08006891
 8006840:	08006a17 	.word	0x08006a17
 8006844:	08006a17 	.word	0x08006a17
 8006848:	08006a17 	.word	0x08006a17
 800684c:	080068d1 	.word	0x080068d1
 8006850:	08006a17 	.word	0x08006a17
 8006854:	08006a17 	.word	0x08006a17
 8006858:	08006a17 	.word	0x08006a17
 800685c:	08006913 	.word	0x08006913
 8006860:	08006a17 	.word	0x08006a17
 8006864:	08006a17 	.word	0x08006a17
 8006868:	08006a17 	.word	0x08006a17
 800686c:	08006953 	.word	0x08006953
 8006870:	08006a17 	.word	0x08006a17
 8006874:	08006a17 	.word	0x08006a17
 8006878:	08006a17 	.word	0x08006a17
 800687c:	08006995 	.word	0x08006995
 8006880:	08006a17 	.word	0x08006a17
 8006884:	08006a17 	.word	0x08006a17
 8006888:	08006a17 	.word	0x08006a17
 800688c:	080069d5 	.word	0x080069d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	4618      	mov	r0, r3
 8006898:	f000 f992 	bl	8006bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699a      	ldr	r2, [r3, #24]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0208 	orr.w	r2, r2, #8
 80068aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699a      	ldr	r2, [r3, #24]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0204 	bic.w	r2, r2, #4
 80068ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6999      	ldr	r1, [r3, #24]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	619a      	str	r2, [r3, #24]
      break;
 80068ce:	e0a5      	b.n	8006a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 f9e4 	bl	8006ca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6999      	ldr	r1, [r3, #24]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	021a      	lsls	r2, r3, #8
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	619a      	str	r2, [r3, #24]
      break;
 8006910:	e084      	b.n	8006a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fa3b 	bl	8006d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69da      	ldr	r2, [r3, #28]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f042 0208 	orr.w	r2, r2, #8
 800692c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69da      	ldr	r2, [r3, #28]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0204 	bic.w	r2, r2, #4
 800693c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69d9      	ldr	r1, [r3, #28]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	691a      	ldr	r2, [r3, #16]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	61da      	str	r2, [r3, #28]
      break;
 8006950:	e064      	b.n	8006a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fa91 	bl	8006e80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	69da      	ldr	r2, [r3, #28]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800696c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69da      	ldr	r2, [r3, #28]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800697c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69d9      	ldr	r1, [r3, #28]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	021a      	lsls	r2, r3, #8
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	61da      	str	r2, [r3, #28]
      break;
 8006992:	e043      	b.n	8006a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68b9      	ldr	r1, [r7, #8]
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fac8 	bl	8006f30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f042 0208 	orr.w	r2, r2, #8
 80069ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 0204 	bic.w	r2, r2, #4
 80069be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	691a      	ldr	r2, [r3, #16]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069d2:	e023      	b.n	8006a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68b9      	ldr	r1, [r7, #8]
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fafa 	bl	8006fd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	021a      	lsls	r2, r3, #8
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a14:	e002      	b.n	8006a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	75fb      	strb	r3, [r7, #23]
      break;
 8006a1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop

08006a30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a40      	ldr	r2, [pc, #256]	; (8006b94 <TIM_Base_SetConfig+0x114>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <TIM_Base_SetConfig+0x40>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9e:	d00f      	beq.n	8006ac0 <TIM_Base_SetConfig+0x40>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a3d      	ldr	r2, [pc, #244]	; (8006b98 <TIM_Base_SetConfig+0x118>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00b      	beq.n	8006ac0 <TIM_Base_SetConfig+0x40>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a3c      	ldr	r2, [pc, #240]	; (8006b9c <TIM_Base_SetConfig+0x11c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d007      	beq.n	8006ac0 <TIM_Base_SetConfig+0x40>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a3b      	ldr	r2, [pc, #236]	; (8006ba0 <TIM_Base_SetConfig+0x120>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d003      	beq.n	8006ac0 <TIM_Base_SetConfig+0x40>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a3a      	ldr	r2, [pc, #232]	; (8006ba4 <TIM_Base_SetConfig+0x124>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d108      	bne.n	8006ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a2f      	ldr	r2, [pc, #188]	; (8006b94 <TIM_Base_SetConfig+0x114>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d02b      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae0:	d027      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a2c      	ldr	r2, [pc, #176]	; (8006b98 <TIM_Base_SetConfig+0x118>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d023      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a2b      	ldr	r2, [pc, #172]	; (8006b9c <TIM_Base_SetConfig+0x11c>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d01f      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a2a      	ldr	r2, [pc, #168]	; (8006ba0 <TIM_Base_SetConfig+0x120>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d01b      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a29      	ldr	r2, [pc, #164]	; (8006ba4 <TIM_Base_SetConfig+0x124>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d017      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a28      	ldr	r2, [pc, #160]	; (8006ba8 <TIM_Base_SetConfig+0x128>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d013      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a27      	ldr	r2, [pc, #156]	; (8006bac <TIM_Base_SetConfig+0x12c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00f      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a26      	ldr	r2, [pc, #152]	; (8006bb0 <TIM_Base_SetConfig+0x130>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d00b      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a25      	ldr	r2, [pc, #148]	; (8006bb4 <TIM_Base_SetConfig+0x134>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d007      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a24      	ldr	r2, [pc, #144]	; (8006bb8 <TIM_Base_SetConfig+0x138>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d003      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a23      	ldr	r2, [pc, #140]	; (8006bbc <TIM_Base_SetConfig+0x13c>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d108      	bne.n	8006b44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a0a      	ldr	r2, [pc, #40]	; (8006b94 <TIM_Base_SetConfig+0x114>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d003      	beq.n	8006b78 <TIM_Base_SetConfig+0xf8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a0c      	ldr	r2, [pc, #48]	; (8006ba4 <TIM_Base_SetConfig+0x124>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d103      	bne.n	8006b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	691a      	ldr	r2, [r3, #16]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	615a      	str	r2, [r3, #20]
}
 8006b86:	bf00      	nop
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	40010000 	.word	0x40010000
 8006b98:	40000400 	.word	0x40000400
 8006b9c:	40000800 	.word	0x40000800
 8006ba0:	40000c00 	.word	0x40000c00
 8006ba4:	40010400 	.word	0x40010400
 8006ba8:	40014000 	.word	0x40014000
 8006bac:	40014400 	.word	0x40014400
 8006bb0:	40014800 	.word	0x40014800
 8006bb4:	40001800 	.word	0x40001800
 8006bb8:	40001c00 	.word	0x40001c00
 8006bbc:	40002000 	.word	0x40002000

08006bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	f023 0201 	bic.w	r2, r3, #1
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	4b2b      	ldr	r3, [pc, #172]	; (8006c98 <TIM_OC1_SetConfig+0xd8>)
 8006bec:	4013      	ands	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f023 0303 	bic.w	r3, r3, #3
 8006bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f023 0302 	bic.w	r3, r3, #2
 8006c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a21      	ldr	r2, [pc, #132]	; (8006c9c <TIM_OC1_SetConfig+0xdc>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d003      	beq.n	8006c24 <TIM_OC1_SetConfig+0x64>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a20      	ldr	r2, [pc, #128]	; (8006ca0 <TIM_OC1_SetConfig+0xe0>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d10c      	bne.n	8006c3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f023 0308 	bic.w	r3, r3, #8
 8006c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f023 0304 	bic.w	r3, r3, #4
 8006c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a16      	ldr	r2, [pc, #88]	; (8006c9c <TIM_OC1_SetConfig+0xdc>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d003      	beq.n	8006c4e <TIM_OC1_SetConfig+0x8e>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a15      	ldr	r2, [pc, #84]	; (8006ca0 <TIM_OC1_SetConfig+0xe0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d111      	bne.n	8006c72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	621a      	str	r2, [r3, #32]
}
 8006c8c:	bf00      	nop
 8006c8e:	371c      	adds	r7, #28
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	fffeff8f 	.word	0xfffeff8f
 8006c9c:	40010000 	.word	0x40010000
 8006ca0:	40010400 	.word	0x40010400

08006ca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f023 0210 	bic.w	r2, r3, #16
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4b2e      	ldr	r3, [pc, #184]	; (8006d88 <TIM_OC2_SetConfig+0xe4>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f023 0320 	bic.w	r3, r3, #32
 8006cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	011b      	lsls	r3, r3, #4
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a23      	ldr	r2, [pc, #140]	; (8006d8c <TIM_OC2_SetConfig+0xe8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d003      	beq.n	8006d0c <TIM_OC2_SetConfig+0x68>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a22      	ldr	r2, [pc, #136]	; (8006d90 <TIM_OC2_SetConfig+0xec>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d10d      	bne.n	8006d28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	011b      	lsls	r3, r3, #4
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a18      	ldr	r2, [pc, #96]	; (8006d8c <TIM_OC2_SetConfig+0xe8>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d003      	beq.n	8006d38 <TIM_OC2_SetConfig+0x94>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a17      	ldr	r2, [pc, #92]	; (8006d90 <TIM_OC2_SetConfig+0xec>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d113      	bne.n	8006d60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	621a      	str	r2, [r3, #32]
}
 8006d7a:	bf00      	nop
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	feff8fff 	.word	0xfeff8fff
 8006d8c:	40010000 	.word	0x40010000
 8006d90:	40010400 	.word	0x40010400

08006d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	4b2d      	ldr	r3, [pc, #180]	; (8006e74 <TIM_OC3_SetConfig+0xe0>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0303 	bic.w	r3, r3, #3
 8006dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	021b      	lsls	r3, r3, #8
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a22      	ldr	r2, [pc, #136]	; (8006e78 <TIM_OC3_SetConfig+0xe4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d003      	beq.n	8006dfa <TIM_OC3_SetConfig+0x66>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a21      	ldr	r2, [pc, #132]	; (8006e7c <TIM_OC3_SetConfig+0xe8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d10d      	bne.n	8006e16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	021b      	lsls	r3, r3, #8
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a17      	ldr	r2, [pc, #92]	; (8006e78 <TIM_OC3_SetConfig+0xe4>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d003      	beq.n	8006e26 <TIM_OC3_SetConfig+0x92>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a16      	ldr	r2, [pc, #88]	; (8006e7c <TIM_OC3_SetConfig+0xe8>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d113      	bne.n	8006e4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	621a      	str	r2, [r3, #32]
}
 8006e68:	bf00      	nop
 8006e6a:	371c      	adds	r7, #28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr
 8006e74:	fffeff8f 	.word	0xfffeff8f
 8006e78:	40010000 	.word	0x40010000
 8006e7c:	40010400 	.word	0x40010400

08006e80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4b1e      	ldr	r3, [pc, #120]	; (8006f24 <TIM_OC4_SetConfig+0xa4>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	021b      	lsls	r3, r3, #8
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006eca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	031b      	lsls	r3, r3, #12
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a13      	ldr	r2, [pc, #76]	; (8006f28 <TIM_OC4_SetConfig+0xa8>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d003      	beq.n	8006ee8 <TIM_OC4_SetConfig+0x68>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a12      	ldr	r2, [pc, #72]	; (8006f2c <TIM_OC4_SetConfig+0xac>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d109      	bne.n	8006efc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	019b      	lsls	r3, r3, #6
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	621a      	str	r2, [r3, #32]
}
 8006f16:	bf00      	nop
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	feff8fff 	.word	0xfeff8fff
 8006f28:	40010000 	.word	0x40010000
 8006f2c:	40010400 	.word	0x40010400

08006f30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4b1b      	ldr	r3, [pc, #108]	; (8006fc8 <TIM_OC5_SetConfig+0x98>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	041b      	lsls	r3, r3, #16
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a12      	ldr	r2, [pc, #72]	; (8006fcc <TIM_OC5_SetConfig+0x9c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d003      	beq.n	8006f8e <TIM_OC5_SetConfig+0x5e>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a11      	ldr	r2, [pc, #68]	; (8006fd0 <TIM_OC5_SetConfig+0xa0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d109      	bne.n	8006fa2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	021b      	lsls	r3, r3, #8
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	621a      	str	r2, [r3, #32]
}
 8006fbc:	bf00      	nop
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	fffeff8f 	.word	0xfffeff8f
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40010400 	.word	0x40010400

08006fd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	4b1c      	ldr	r3, [pc, #112]	; (8007070 <TIM_OC6_SetConfig+0x9c>)
 8007000:	4013      	ands	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	4313      	orrs	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	051b      	lsls	r3, r3, #20
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4313      	orrs	r3, r2
 8007022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a13      	ldr	r2, [pc, #76]	; (8007074 <TIM_OC6_SetConfig+0xa0>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d003      	beq.n	8007034 <TIM_OC6_SetConfig+0x60>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a12      	ldr	r2, [pc, #72]	; (8007078 <TIM_OC6_SetConfig+0xa4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d109      	bne.n	8007048 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800703a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	029b      	lsls	r3, r3, #10
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	4313      	orrs	r3, r2
 8007046:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	621a      	str	r2, [r3, #32]
}
 8007062:	bf00      	nop
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	feff8fff 	.word	0xfeff8fff
 8007074:	40010000 	.word	0x40010000
 8007078:	40010400 	.word	0x40010400

0800707c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f003 031f 	and.w	r3, r3, #31
 800708e:	2201      	movs	r2, #1
 8007090:	fa02 f303 	lsl.w	r3, r2, r3
 8007094:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6a1a      	ldr	r2, [r3, #32]
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	43db      	mvns	r3, r3
 800709e:	401a      	ands	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6a1a      	ldr	r2, [r3, #32]
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f003 031f 	and.w	r3, r3, #31
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	fa01 f303 	lsl.w	r3, r1, r3
 80070b4:	431a      	orrs	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	621a      	str	r2, [r3, #32]
}
 80070ba:	bf00      	nop
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
	...

080070c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d101      	bne.n	80070e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070dc:	2302      	movs	r3, #2
 80070de:	e06d      	b.n	80071bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a30      	ldr	r2, [pc, #192]	; (80071c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d004      	beq.n	8007114 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a2f      	ldr	r2, [pc, #188]	; (80071cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d108      	bne.n	8007126 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800711a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	4313      	orrs	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a20      	ldr	r2, [pc, #128]	; (80071c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d022      	beq.n	8007190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007152:	d01d      	beq.n	8007190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a1d      	ldr	r2, [pc, #116]	; (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d018      	beq.n	8007190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a1c      	ldr	r2, [pc, #112]	; (80071d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d013      	beq.n	8007190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a1a      	ldr	r2, [pc, #104]	; (80071d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d00e      	beq.n	8007190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a15      	ldr	r2, [pc, #84]	; (80071cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d009      	beq.n	8007190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a16      	ldr	r2, [pc, #88]	; (80071dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d004      	beq.n	8007190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a15      	ldr	r2, [pc, #84]	; (80071e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d10c      	bne.n	80071aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007196:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	4313      	orrs	r3, r2
 80071a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	40010000 	.word	0x40010000
 80071cc:	40010400 	.word	0x40010400
 80071d0:	40000400 	.word	0x40000400
 80071d4:	40000800 	.word	0x40000800
 80071d8:	40000c00 	.word	0x40000c00
 80071dc:	40014000 	.word	0x40014000
 80071e0:	40001800 	.word	0x40001800

080071e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e040      	b.n	80072b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007236:	2b00      	cmp	r3, #0
 8007238:	d106      	bne.n	8007248 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7fb f870 	bl	8002328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2224      	movs	r2, #36	; 0x24
 800724c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0201 	bic.w	r2, r2, #1
 800725c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fb82 	bl	8007968 <UART_SetConfig>
 8007264:	4603      	mov	r3, r0
 8007266:	2b01      	cmp	r3, #1
 8007268:	d101      	bne.n	800726e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e022      	b.n	80072b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fdda 	bl	8007e30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800728a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800729a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0201 	orr.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fe61 	bl	8007f74 <UART_CheckIdleState>
 80072b2:	4603      	mov	r3, r0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08a      	sub	sp, #40	; 0x28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	4613      	mov	r3, r2
 80072c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072d0:	2b20      	cmp	r3, #32
 80072d2:	d132      	bne.n	800733a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <HAL_UART_Receive_IT+0x24>
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e02b      	b.n	800733c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d018      	beq.n	800732a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	e853 3f00 	ldrex	r3, [r3]
 8007304:	613b      	str	r3, [r7, #16]
   return(result);
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	623b      	str	r3, [r7, #32]
 8007318:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	69f9      	ldr	r1, [r7, #28]
 800731c:	6a3a      	ldr	r2, [r7, #32]
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	61bb      	str	r3, [r7, #24]
   return(result);
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e6      	bne.n	80072f8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800732a:	88fb      	ldrh	r3, [r7, #6]
 800732c:	461a      	mov	r2, r3
 800732e:	68b9      	ldr	r1, [r7, #8]
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 ff33 	bl	800819c <UART_Start_Receive_IT>
 8007336:	4603      	mov	r3, r0
 8007338:	e000      	b.n	800733c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800733a:	2302      	movs	r3, #2
  }
}
 800733c:	4618      	mov	r0, r3
 800733e:	3728      	adds	r7, #40	; 0x28
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b0ba      	sub	sp, #232	; 0xe8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800736a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800736e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007372:	4013      	ands	r3, r2
 8007374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800737c:	2b00      	cmp	r3, #0
 800737e:	d115      	bne.n	80073ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00f      	beq.n	80073ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800738c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007390:	f003 0320 	and.w	r3, r3, #32
 8007394:	2b00      	cmp	r3, #0
 8007396:	d009      	beq.n	80073ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 82ac 	beq.w	80078fa <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	4798      	blx	r3
      }
      return;
 80073aa:	e2a6      	b.n	80078fa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 8117 	beq.w	80075e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80073b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d106      	bne.n	80073d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80073c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80073c6:	4b85      	ldr	r3, [pc, #532]	; (80075dc <HAL_UART_IRQHandler+0x298>)
 80073c8:	4013      	ands	r3, r2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 810a 	beq.w	80075e4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d011      	beq.n	8007400 <HAL_UART_IRQHandler+0xbc>
 80073dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00b      	beq.n	8007400 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2201      	movs	r2, #1
 80073ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f6:	f043 0201 	orr.w	r2, r3, #1
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b00      	cmp	r3, #0
 800740a:	d011      	beq.n	8007430 <HAL_UART_IRQHandler+0xec>
 800740c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00b      	beq.n	8007430 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2202      	movs	r2, #2
 800741e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007426:	f043 0204 	orr.w	r2, r3, #4
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007434:	f003 0304 	and.w	r3, r3, #4
 8007438:	2b00      	cmp	r3, #0
 800743a:	d011      	beq.n	8007460 <HAL_UART_IRQHandler+0x11c>
 800743c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00b      	beq.n	8007460 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2204      	movs	r2, #4
 800744e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007456:	f043 0202 	orr.w	r2, r3, #2
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007464:	f003 0308 	and.w	r3, r3, #8
 8007468:	2b00      	cmp	r3, #0
 800746a:	d017      	beq.n	800749c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800746c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007470:	f003 0320 	and.w	r3, r3, #32
 8007474:	2b00      	cmp	r3, #0
 8007476:	d105      	bne.n	8007484 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800747c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00b      	beq.n	800749c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2208      	movs	r2, #8
 800748a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007492:	f043 0208 	orr.w	r2, r3, #8
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800749c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d012      	beq.n	80074ce <HAL_UART_IRQHandler+0x18a>
 80074a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00c      	beq.n	80074ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074c4:	f043 0220 	orr.w	r2, r3, #32
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 8212 	beq.w	80078fe <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80074da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074de:	f003 0320 	and.w	r3, r3, #32
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00d      	beq.n	8007502 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80074e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ea:	f003 0320 	and.w	r3, r3, #32
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007508:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007516:	2b40      	cmp	r3, #64	; 0x40
 8007518:	d005      	beq.n	8007526 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800751a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800751e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007522:	2b00      	cmp	r3, #0
 8007524:	d04f      	beq.n	80075c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fefe 	bl	8008328 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007536:	2b40      	cmp	r3, #64	; 0x40
 8007538:	d141      	bne.n	80075be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3308      	adds	r3, #8
 8007540:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007558:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3308      	adds	r3, #8
 8007562:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007566:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800756a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800757e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1d9      	bne.n	800753a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800758a:	2b00      	cmp	r3, #0
 800758c:	d013      	beq.n	80075b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007592:	4a13      	ldr	r2, [pc, #76]	; (80075e0 <HAL_UART_IRQHandler+0x29c>)
 8007594:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800759a:	4618      	mov	r0, r3
 800759c:	f7fb fe46 	bl	800322c <HAL_DMA_Abort_IT>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d017      	beq.n	80075d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80075b0:	4610      	mov	r0, r2
 80075b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b4:	e00f      	b.n	80075d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f9b6 	bl	8007928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075bc:	e00b      	b.n	80075d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f9b2 	bl	8007928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c4:	e007      	b.n	80075d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f9ae 	bl	8007928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80075d4:	e193      	b.n	80078fe <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d6:	bf00      	nop
    return;
 80075d8:	e191      	b.n	80078fe <HAL_UART_IRQHandler+0x5ba>
 80075da:	bf00      	nop
 80075dc:	04000120 	.word	0x04000120
 80075e0:	080083f1 	.word	0x080083f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	f040 814c 	bne.w	8007886 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f2:	f003 0310 	and.w	r3, r3, #16
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 8145 	beq.w	8007886 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80075fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007600:	f003 0310 	and.w	r3, r3, #16
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 813e 	beq.w	8007886 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2210      	movs	r2, #16
 8007610:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761c:	2b40      	cmp	r3, #64	; 0x40
 800761e:	f040 80b6 	bne.w	800778e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800762e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 8165 	beq.w	8007902 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800763e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007642:	429a      	cmp	r2, r3
 8007644:	f080 815d 	bcs.w	8007902 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800764e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800765c:	f000 8086 	beq.w	800776c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007668:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800766c:	e853 3f00 	ldrex	r3, [r3]
 8007670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007674:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800767c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	461a      	mov	r2, r3
 8007686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800768a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800768e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007696:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80076a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1da      	bne.n	8007660 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3308      	adds	r3, #8
 80076b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076b4:	e853 3f00 	ldrex	r3, [r3]
 80076b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80076ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076bc:	f023 0301 	bic.w	r3, r3, #1
 80076c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3308      	adds	r3, #8
 80076ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80076d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80076d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80076e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e1      	bne.n	80076aa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3308      	adds	r3, #8
 80076ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3308      	adds	r3, #8
 8007706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800770a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800770c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007710:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e3      	bne.n	80076e6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2220      	movs	r2, #32
 8007722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007734:	e853 3f00 	ldrex	r3, [r3]
 8007738:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800773a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800773c:	f023 0310 	bic.w	r3, r3, #16
 8007740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800774e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007750:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007754:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800775c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e4      	bne.n	800772c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007766:	4618      	mov	r0, r3
 8007768:	f7fb fcf0 	bl	800314c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800777e:	b29b      	uxth	r3, r3
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	b29b      	uxth	r3, r3
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f8d8 	bl	800793c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800778c:	e0b9      	b.n	8007902 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800779a:	b29b      	uxth	r3, r3
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 80ab 	beq.w	8007906 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80077b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 80a6 	beq.w	8007906 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c2:	e853 3f00 	ldrex	r3, [r3]
 80077c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077dc:	647b      	str	r3, [r7, #68]	; 0x44
 80077de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077e4:	e841 2300 	strex	r3, r2, [r1]
 80077e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1e4      	bne.n	80077ba <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3308      	adds	r3, #8
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	e853 3f00 	ldrex	r3, [r3]
 80077fe:	623b      	str	r3, [r7, #32]
   return(result);
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	f023 0301 	bic.w	r3, r3, #1
 8007806:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3308      	adds	r3, #8
 8007810:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007814:	633a      	str	r2, [r7, #48]	; 0x30
 8007816:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007818:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800781a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800781c:	e841 2300 	strex	r3, r2, [r1]
 8007820:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1e3      	bne.n	80077f0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2220      	movs	r2, #32
 800782c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	60fb      	str	r3, [r7, #12]
   return(result);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f023 0310 	bic.w	r3, r3, #16
 8007850:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800785e:	61fb      	str	r3, [r7, #28]
 8007860:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	69b9      	ldr	r1, [r7, #24]
 8007864:	69fa      	ldr	r2, [r7, #28]
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	617b      	str	r3, [r7, #20]
   return(result);
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e4      	bne.n	800783c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2202      	movs	r2, #2
 8007876:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007878:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f85c 	bl	800793c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007884:	e03f      	b.n	8007906 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800788a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00e      	beq.n	80078b0 <HAL_UART_IRQHandler+0x56c>
 8007892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d008      	beq.n	80078b0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80078a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f853 	bl	8007954 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078ae:	e02d      	b.n	800790c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80078b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00e      	beq.n	80078da <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80078bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d008      	beq.n	80078da <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01c      	beq.n	800790a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	4798      	blx	r3
    }
    return;
 80078d8:	e017      	b.n	800790a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80078da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d012      	beq.n	800790c <HAL_UART_IRQHandler+0x5c8>
 80078e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00c      	beq.n	800790c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fd92 	bl	800841c <UART_EndTransmit_IT>
    return;
 80078f8:	e008      	b.n	800790c <HAL_UART_IRQHandler+0x5c8>
      return;
 80078fa:	bf00      	nop
 80078fc:	e006      	b.n	800790c <HAL_UART_IRQHandler+0x5c8>
    return;
 80078fe:	bf00      	nop
 8007900:	e004      	b.n	800790c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007902:	bf00      	nop
 8007904:	e002      	b.n	800790c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007906:	bf00      	nop
 8007908:	e000      	b.n	800790c <HAL_UART_IRQHandler+0x5c8>
    return;
 800790a:	bf00      	nop
  }

}
 800790c:	37e8      	adds	r7, #232	; 0xe8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop

08007914 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	431a      	orrs	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	431a      	orrs	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	4313      	orrs	r3, r2
 800798a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4ba6      	ldr	r3, [pc, #664]	; (8007c2c <UART_SetConfig+0x2c4>)
 8007994:	4013      	ands	r3, r2
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6812      	ldr	r2, [r2, #0]
 800799a:	6979      	ldr	r1, [r7, #20]
 800799c:	430b      	orrs	r3, r1
 800799e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68da      	ldr	r2, [r3, #12]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a94      	ldr	r2, [pc, #592]	; (8007c30 <UART_SetConfig+0x2c8>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d120      	bne.n	8007a26 <UART_SetConfig+0xbe>
 80079e4:	4b93      	ldr	r3, [pc, #588]	; (8007c34 <UART_SetConfig+0x2cc>)
 80079e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ea:	f003 0303 	and.w	r3, r3, #3
 80079ee:	2b03      	cmp	r3, #3
 80079f0:	d816      	bhi.n	8007a20 <UART_SetConfig+0xb8>
 80079f2:	a201      	add	r2, pc, #4	; (adr r2, 80079f8 <UART_SetConfig+0x90>)
 80079f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f8:	08007a09 	.word	0x08007a09
 80079fc:	08007a15 	.word	0x08007a15
 8007a00:	08007a0f 	.word	0x08007a0f
 8007a04:	08007a1b 	.word	0x08007a1b
 8007a08:	2301      	movs	r3, #1
 8007a0a:	77fb      	strb	r3, [r7, #31]
 8007a0c:	e150      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a0e:	2302      	movs	r3, #2
 8007a10:	77fb      	strb	r3, [r7, #31]
 8007a12:	e14d      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a14:	2304      	movs	r3, #4
 8007a16:	77fb      	strb	r3, [r7, #31]
 8007a18:	e14a      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a1a:	2308      	movs	r3, #8
 8007a1c:	77fb      	strb	r3, [r7, #31]
 8007a1e:	e147      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a20:	2310      	movs	r3, #16
 8007a22:	77fb      	strb	r3, [r7, #31]
 8007a24:	e144      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a83      	ldr	r2, [pc, #524]	; (8007c38 <UART_SetConfig+0x2d0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d132      	bne.n	8007a96 <UART_SetConfig+0x12e>
 8007a30:	4b80      	ldr	r3, [pc, #512]	; (8007c34 <UART_SetConfig+0x2cc>)
 8007a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a36:	f003 030c 	and.w	r3, r3, #12
 8007a3a:	2b0c      	cmp	r3, #12
 8007a3c:	d828      	bhi.n	8007a90 <UART_SetConfig+0x128>
 8007a3e:	a201      	add	r2, pc, #4	; (adr r2, 8007a44 <UART_SetConfig+0xdc>)
 8007a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a44:	08007a79 	.word	0x08007a79
 8007a48:	08007a91 	.word	0x08007a91
 8007a4c:	08007a91 	.word	0x08007a91
 8007a50:	08007a91 	.word	0x08007a91
 8007a54:	08007a85 	.word	0x08007a85
 8007a58:	08007a91 	.word	0x08007a91
 8007a5c:	08007a91 	.word	0x08007a91
 8007a60:	08007a91 	.word	0x08007a91
 8007a64:	08007a7f 	.word	0x08007a7f
 8007a68:	08007a91 	.word	0x08007a91
 8007a6c:	08007a91 	.word	0x08007a91
 8007a70:	08007a91 	.word	0x08007a91
 8007a74:	08007a8b 	.word	0x08007a8b
 8007a78:	2300      	movs	r3, #0
 8007a7a:	77fb      	strb	r3, [r7, #31]
 8007a7c:	e118      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a7e:	2302      	movs	r3, #2
 8007a80:	77fb      	strb	r3, [r7, #31]
 8007a82:	e115      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a84:	2304      	movs	r3, #4
 8007a86:	77fb      	strb	r3, [r7, #31]
 8007a88:	e112      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a8a:	2308      	movs	r3, #8
 8007a8c:	77fb      	strb	r3, [r7, #31]
 8007a8e:	e10f      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a90:	2310      	movs	r3, #16
 8007a92:	77fb      	strb	r3, [r7, #31]
 8007a94:	e10c      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a68      	ldr	r2, [pc, #416]	; (8007c3c <UART_SetConfig+0x2d4>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d120      	bne.n	8007ae2 <UART_SetConfig+0x17a>
 8007aa0:	4b64      	ldr	r3, [pc, #400]	; (8007c34 <UART_SetConfig+0x2cc>)
 8007aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007aaa:	2b30      	cmp	r3, #48	; 0x30
 8007aac:	d013      	beq.n	8007ad6 <UART_SetConfig+0x16e>
 8007aae:	2b30      	cmp	r3, #48	; 0x30
 8007ab0:	d814      	bhi.n	8007adc <UART_SetConfig+0x174>
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	d009      	beq.n	8007aca <UART_SetConfig+0x162>
 8007ab6:	2b20      	cmp	r3, #32
 8007ab8:	d810      	bhi.n	8007adc <UART_SetConfig+0x174>
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <UART_SetConfig+0x15c>
 8007abe:	2b10      	cmp	r3, #16
 8007ac0:	d006      	beq.n	8007ad0 <UART_SetConfig+0x168>
 8007ac2:	e00b      	b.n	8007adc <UART_SetConfig+0x174>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	77fb      	strb	r3, [r7, #31]
 8007ac8:	e0f2      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007aca:	2302      	movs	r3, #2
 8007acc:	77fb      	strb	r3, [r7, #31]
 8007ace:	e0ef      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007ad0:	2304      	movs	r3, #4
 8007ad2:	77fb      	strb	r3, [r7, #31]
 8007ad4:	e0ec      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007ad6:	2308      	movs	r3, #8
 8007ad8:	77fb      	strb	r3, [r7, #31]
 8007ada:	e0e9      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007adc:	2310      	movs	r3, #16
 8007ade:	77fb      	strb	r3, [r7, #31]
 8007ae0:	e0e6      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a56      	ldr	r2, [pc, #344]	; (8007c40 <UART_SetConfig+0x2d8>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d120      	bne.n	8007b2e <UART_SetConfig+0x1c6>
 8007aec:	4b51      	ldr	r3, [pc, #324]	; (8007c34 <UART_SetConfig+0x2cc>)
 8007aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007af6:	2bc0      	cmp	r3, #192	; 0xc0
 8007af8:	d013      	beq.n	8007b22 <UART_SetConfig+0x1ba>
 8007afa:	2bc0      	cmp	r3, #192	; 0xc0
 8007afc:	d814      	bhi.n	8007b28 <UART_SetConfig+0x1c0>
 8007afe:	2b80      	cmp	r3, #128	; 0x80
 8007b00:	d009      	beq.n	8007b16 <UART_SetConfig+0x1ae>
 8007b02:	2b80      	cmp	r3, #128	; 0x80
 8007b04:	d810      	bhi.n	8007b28 <UART_SetConfig+0x1c0>
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <UART_SetConfig+0x1a8>
 8007b0a:	2b40      	cmp	r3, #64	; 0x40
 8007b0c:	d006      	beq.n	8007b1c <UART_SetConfig+0x1b4>
 8007b0e:	e00b      	b.n	8007b28 <UART_SetConfig+0x1c0>
 8007b10:	2300      	movs	r3, #0
 8007b12:	77fb      	strb	r3, [r7, #31]
 8007b14:	e0cc      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b16:	2302      	movs	r3, #2
 8007b18:	77fb      	strb	r3, [r7, #31]
 8007b1a:	e0c9      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b1c:	2304      	movs	r3, #4
 8007b1e:	77fb      	strb	r3, [r7, #31]
 8007b20:	e0c6      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b22:	2308      	movs	r3, #8
 8007b24:	77fb      	strb	r3, [r7, #31]
 8007b26:	e0c3      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b28:	2310      	movs	r3, #16
 8007b2a:	77fb      	strb	r3, [r7, #31]
 8007b2c:	e0c0      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a44      	ldr	r2, [pc, #272]	; (8007c44 <UART_SetConfig+0x2dc>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d125      	bne.n	8007b84 <UART_SetConfig+0x21c>
 8007b38:	4b3e      	ldr	r3, [pc, #248]	; (8007c34 <UART_SetConfig+0x2cc>)
 8007b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b46:	d017      	beq.n	8007b78 <UART_SetConfig+0x210>
 8007b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b4c:	d817      	bhi.n	8007b7e <UART_SetConfig+0x216>
 8007b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b52:	d00b      	beq.n	8007b6c <UART_SetConfig+0x204>
 8007b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b58:	d811      	bhi.n	8007b7e <UART_SetConfig+0x216>
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d003      	beq.n	8007b66 <UART_SetConfig+0x1fe>
 8007b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b62:	d006      	beq.n	8007b72 <UART_SetConfig+0x20a>
 8007b64:	e00b      	b.n	8007b7e <UART_SetConfig+0x216>
 8007b66:	2300      	movs	r3, #0
 8007b68:	77fb      	strb	r3, [r7, #31]
 8007b6a:	e0a1      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	77fb      	strb	r3, [r7, #31]
 8007b70:	e09e      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b72:	2304      	movs	r3, #4
 8007b74:	77fb      	strb	r3, [r7, #31]
 8007b76:	e09b      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b78:	2308      	movs	r3, #8
 8007b7a:	77fb      	strb	r3, [r7, #31]
 8007b7c:	e098      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b7e:	2310      	movs	r3, #16
 8007b80:	77fb      	strb	r3, [r7, #31]
 8007b82:	e095      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a2f      	ldr	r2, [pc, #188]	; (8007c48 <UART_SetConfig+0x2e0>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d125      	bne.n	8007bda <UART_SetConfig+0x272>
 8007b8e:	4b29      	ldr	r3, [pc, #164]	; (8007c34 <UART_SetConfig+0x2cc>)
 8007b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b9c:	d017      	beq.n	8007bce <UART_SetConfig+0x266>
 8007b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ba2:	d817      	bhi.n	8007bd4 <UART_SetConfig+0x26c>
 8007ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ba8:	d00b      	beq.n	8007bc2 <UART_SetConfig+0x25a>
 8007baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bae:	d811      	bhi.n	8007bd4 <UART_SetConfig+0x26c>
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <UART_SetConfig+0x254>
 8007bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bb8:	d006      	beq.n	8007bc8 <UART_SetConfig+0x260>
 8007bba:	e00b      	b.n	8007bd4 <UART_SetConfig+0x26c>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	77fb      	strb	r3, [r7, #31]
 8007bc0:	e076      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	77fb      	strb	r3, [r7, #31]
 8007bc6:	e073      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007bc8:	2304      	movs	r3, #4
 8007bca:	77fb      	strb	r3, [r7, #31]
 8007bcc:	e070      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007bce:	2308      	movs	r3, #8
 8007bd0:	77fb      	strb	r3, [r7, #31]
 8007bd2:	e06d      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007bd4:	2310      	movs	r3, #16
 8007bd6:	77fb      	strb	r3, [r7, #31]
 8007bd8:	e06a      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a1b      	ldr	r2, [pc, #108]	; (8007c4c <UART_SetConfig+0x2e4>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d138      	bne.n	8007c56 <UART_SetConfig+0x2ee>
 8007be4:	4b13      	ldr	r3, [pc, #76]	; (8007c34 <UART_SetConfig+0x2cc>)
 8007be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007bee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bf2:	d017      	beq.n	8007c24 <UART_SetConfig+0x2bc>
 8007bf4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bf8:	d82a      	bhi.n	8007c50 <UART_SetConfig+0x2e8>
 8007bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bfe:	d00b      	beq.n	8007c18 <UART_SetConfig+0x2b0>
 8007c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c04:	d824      	bhi.n	8007c50 <UART_SetConfig+0x2e8>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <UART_SetConfig+0x2aa>
 8007c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c0e:	d006      	beq.n	8007c1e <UART_SetConfig+0x2b6>
 8007c10:	e01e      	b.n	8007c50 <UART_SetConfig+0x2e8>
 8007c12:	2300      	movs	r3, #0
 8007c14:	77fb      	strb	r3, [r7, #31]
 8007c16:	e04b      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	77fb      	strb	r3, [r7, #31]
 8007c1c:	e048      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007c1e:	2304      	movs	r3, #4
 8007c20:	77fb      	strb	r3, [r7, #31]
 8007c22:	e045      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007c24:	2308      	movs	r3, #8
 8007c26:	77fb      	strb	r3, [r7, #31]
 8007c28:	e042      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007c2a:	bf00      	nop
 8007c2c:	efff69f3 	.word	0xefff69f3
 8007c30:	40011000 	.word	0x40011000
 8007c34:	40023800 	.word	0x40023800
 8007c38:	40004400 	.word	0x40004400
 8007c3c:	40004800 	.word	0x40004800
 8007c40:	40004c00 	.word	0x40004c00
 8007c44:	40005000 	.word	0x40005000
 8007c48:	40011400 	.word	0x40011400
 8007c4c:	40007800 	.word	0x40007800
 8007c50:	2310      	movs	r3, #16
 8007c52:	77fb      	strb	r3, [r7, #31]
 8007c54:	e02c      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a72      	ldr	r2, [pc, #456]	; (8007e24 <UART_SetConfig+0x4bc>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d125      	bne.n	8007cac <UART_SetConfig+0x344>
 8007c60:	4b71      	ldr	r3, [pc, #452]	; (8007e28 <UART_SetConfig+0x4c0>)
 8007c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007c6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007c6e:	d017      	beq.n	8007ca0 <UART_SetConfig+0x338>
 8007c70:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007c74:	d817      	bhi.n	8007ca6 <UART_SetConfig+0x33e>
 8007c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c7a:	d00b      	beq.n	8007c94 <UART_SetConfig+0x32c>
 8007c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c80:	d811      	bhi.n	8007ca6 <UART_SetConfig+0x33e>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <UART_SetConfig+0x326>
 8007c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c8a:	d006      	beq.n	8007c9a <UART_SetConfig+0x332>
 8007c8c:	e00b      	b.n	8007ca6 <UART_SetConfig+0x33e>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	77fb      	strb	r3, [r7, #31]
 8007c92:	e00d      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007c94:	2302      	movs	r3, #2
 8007c96:	77fb      	strb	r3, [r7, #31]
 8007c98:	e00a      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007c9a:	2304      	movs	r3, #4
 8007c9c:	77fb      	strb	r3, [r7, #31]
 8007c9e:	e007      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007ca0:	2308      	movs	r3, #8
 8007ca2:	77fb      	strb	r3, [r7, #31]
 8007ca4:	e004      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007ca6:	2310      	movs	r3, #16
 8007ca8:	77fb      	strb	r3, [r7, #31]
 8007caa:	e001      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007cac:	2310      	movs	r3, #16
 8007cae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb8:	d15b      	bne.n	8007d72 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007cba:	7ffb      	ldrb	r3, [r7, #31]
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d828      	bhi.n	8007d12 <UART_SetConfig+0x3aa>
 8007cc0:	a201      	add	r2, pc, #4	; (adr r2, 8007cc8 <UART_SetConfig+0x360>)
 8007cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc6:	bf00      	nop
 8007cc8:	08007ced 	.word	0x08007ced
 8007ccc:	08007cf5 	.word	0x08007cf5
 8007cd0:	08007cfd 	.word	0x08007cfd
 8007cd4:	08007d13 	.word	0x08007d13
 8007cd8:	08007d03 	.word	0x08007d03
 8007cdc:	08007d13 	.word	0x08007d13
 8007ce0:	08007d13 	.word	0x08007d13
 8007ce4:	08007d13 	.word	0x08007d13
 8007ce8:	08007d0b 	.word	0x08007d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cec:	f7fd f888 	bl	8004e00 <HAL_RCC_GetPCLK1Freq>
 8007cf0:	61b8      	str	r0, [r7, #24]
        break;
 8007cf2:	e013      	b.n	8007d1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cf4:	f7fd f898 	bl	8004e28 <HAL_RCC_GetPCLK2Freq>
 8007cf8:	61b8      	str	r0, [r7, #24]
        break;
 8007cfa:	e00f      	b.n	8007d1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cfc:	4b4b      	ldr	r3, [pc, #300]	; (8007e2c <UART_SetConfig+0x4c4>)
 8007cfe:	61bb      	str	r3, [r7, #24]
        break;
 8007d00:	e00c      	b.n	8007d1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d02:	f7fc ff6b 	bl	8004bdc <HAL_RCC_GetSysClockFreq>
 8007d06:	61b8      	str	r0, [r7, #24]
        break;
 8007d08:	e008      	b.n	8007d1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d0e:	61bb      	str	r3, [r7, #24]
        break;
 8007d10:	e004      	b.n	8007d1c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	77bb      	strb	r3, [r7, #30]
        break;
 8007d1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d074      	beq.n	8007e0c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	005a      	lsls	r2, r3, #1
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	085b      	lsrs	r3, r3, #1
 8007d2c:	441a      	add	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b0f      	cmp	r3, #15
 8007d3c:	d916      	bls.n	8007d6c <UART_SetConfig+0x404>
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d44:	d212      	bcs.n	8007d6c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	f023 030f 	bic.w	r3, r3, #15
 8007d4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	085b      	lsrs	r3, r3, #1
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	89fb      	ldrh	r3, [r7, #14]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	89fa      	ldrh	r2, [r7, #14]
 8007d68:	60da      	str	r2, [r3, #12]
 8007d6a:	e04f      	b.n	8007e0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	77bb      	strb	r3, [r7, #30]
 8007d70:	e04c      	b.n	8007e0c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d72:	7ffb      	ldrb	r3, [r7, #31]
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d828      	bhi.n	8007dca <UART_SetConfig+0x462>
 8007d78:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <UART_SetConfig+0x418>)
 8007d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7e:	bf00      	nop
 8007d80:	08007da5 	.word	0x08007da5
 8007d84:	08007dad 	.word	0x08007dad
 8007d88:	08007db5 	.word	0x08007db5
 8007d8c:	08007dcb 	.word	0x08007dcb
 8007d90:	08007dbb 	.word	0x08007dbb
 8007d94:	08007dcb 	.word	0x08007dcb
 8007d98:	08007dcb 	.word	0x08007dcb
 8007d9c:	08007dcb 	.word	0x08007dcb
 8007da0:	08007dc3 	.word	0x08007dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007da4:	f7fd f82c 	bl	8004e00 <HAL_RCC_GetPCLK1Freq>
 8007da8:	61b8      	str	r0, [r7, #24]
        break;
 8007daa:	e013      	b.n	8007dd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dac:	f7fd f83c 	bl	8004e28 <HAL_RCC_GetPCLK2Freq>
 8007db0:	61b8      	str	r0, [r7, #24]
        break;
 8007db2:	e00f      	b.n	8007dd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007db4:	4b1d      	ldr	r3, [pc, #116]	; (8007e2c <UART_SetConfig+0x4c4>)
 8007db6:	61bb      	str	r3, [r7, #24]
        break;
 8007db8:	e00c      	b.n	8007dd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dba:	f7fc ff0f 	bl	8004bdc <HAL_RCC_GetSysClockFreq>
 8007dbe:	61b8      	str	r0, [r7, #24]
        break;
 8007dc0:	e008      	b.n	8007dd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dc6:	61bb      	str	r3, [r7, #24]
        break;
 8007dc8:	e004      	b.n	8007dd4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	77bb      	strb	r3, [r7, #30]
        break;
 8007dd2:	bf00      	nop
    }

    if (pclk != 0U)
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d018      	beq.n	8007e0c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	085a      	lsrs	r2, r3, #1
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	441a      	add	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	2b0f      	cmp	r3, #15
 8007df2:	d909      	bls.n	8007e08 <UART_SetConfig+0x4a0>
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dfa:	d205      	bcs.n	8007e08 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	60da      	str	r2, [r3, #12]
 8007e06:	e001      	b.n	8007e0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007e18:	7fbb      	ldrb	r3, [r7, #30]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3720      	adds	r7, #32
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	40007c00 	.word	0x40007c00
 8007e28:	40023800 	.word	0x40023800
 8007e2c:	00f42400 	.word	0x00f42400

08007e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00a      	beq.n	8007e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5e:	f003 0302 	and.w	r3, r3, #2
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00a      	beq.n	8007e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	f003 0304 	and.w	r3, r3, #4
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00a      	beq.n	8007e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	f003 0308 	and.w	r3, r3, #8
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00a      	beq.n	8007ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec4:	f003 0310 	and.w	r3, r3, #16
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00a      	beq.n	8007ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	f003 0320 	and.w	r3, r3, #32
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00a      	beq.n	8007f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	430a      	orrs	r2, r1
 8007f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01a      	beq.n	8007f46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	430a      	orrs	r2, r1
 8007f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f2e:	d10a      	bne.n	8007f46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	430a      	orrs	r2, r1
 8007f66:	605a      	str	r2, [r3, #4]
  }
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af02      	add	r7, sp, #8
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f84:	f7fa fd6c 	bl	8002a60 <HAL_GetTick>
 8007f88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0308 	and.w	r3, r3, #8
 8007f94:	2b08      	cmp	r3, #8
 8007f96:	d10e      	bne.n	8007fb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f831 	bl	800800e <UART_WaitOnFlagUntilTimeout>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e027      	b.n	8008006 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0304 	and.w	r3, r3, #4
 8007fc0:	2b04      	cmp	r3, #4
 8007fc2:	d10e      	bne.n	8007fe2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f81b 	bl	800800e <UART_WaitOnFlagUntilTimeout>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e011      	b.n	8008006 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b09c      	sub	sp, #112	; 0x70
 8008012:	af00      	add	r7, sp, #0
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	60b9      	str	r1, [r7, #8]
 8008018:	603b      	str	r3, [r7, #0]
 800801a:	4613      	mov	r3, r2
 800801c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800801e:	e0a7      	b.n	8008170 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008026:	f000 80a3 	beq.w	8008170 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800802a:	f7fa fd19 	bl	8002a60 <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008036:	429a      	cmp	r2, r3
 8008038:	d302      	bcc.n	8008040 <UART_WaitOnFlagUntilTimeout+0x32>
 800803a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800803c:	2b00      	cmp	r3, #0
 800803e:	d13f      	bne.n	80080c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008048:	e853 3f00 	ldrex	r3, [r3]
 800804c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800804e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008050:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008054:	667b      	str	r3, [r7, #100]	; 0x64
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	461a      	mov	r2, r3
 800805c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800805e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008060:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008062:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008064:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008066:	e841 2300 	strex	r3, r2, [r1]
 800806a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800806c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1e6      	bne.n	8008040 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3308      	adds	r3, #8
 8008078:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008084:	f023 0301 	bic.w	r3, r3, #1
 8008088:	663b      	str	r3, [r7, #96]	; 0x60
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3308      	adds	r3, #8
 8008090:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008092:	64ba      	str	r2, [r7, #72]	; 0x48
 8008094:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1e5      	bne.n	8008072 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2220      	movs	r2, #32
 80080aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2220      	movs	r2, #32
 80080b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e068      	b.n	8008192 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0304 	and.w	r3, r3, #4
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d050      	beq.n	8008170 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080dc:	d148      	bne.n	8008170 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	e853 3f00 	ldrex	r3, [r3]
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008106:	637b      	str	r3, [r7, #52]	; 0x34
 8008108:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800810c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800810e:	e841 2300 	strex	r3, r2, [r1]
 8008112:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1e6      	bne.n	80080e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3308      	adds	r3, #8
 8008120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	e853 3f00 	ldrex	r3, [r3]
 8008128:	613b      	str	r3, [r7, #16]
   return(result);
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f023 0301 	bic.w	r3, r3, #1
 8008130:	66bb      	str	r3, [r7, #104]	; 0x68
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3308      	adds	r3, #8
 8008138:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800813a:	623a      	str	r2, [r7, #32]
 800813c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813e:	69f9      	ldr	r1, [r7, #28]
 8008140:	6a3a      	ldr	r2, [r7, #32]
 8008142:	e841 2300 	strex	r3, r2, [r1]
 8008146:	61bb      	str	r3, [r7, #24]
   return(result);
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e5      	bne.n	800811a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2220      	movs	r2, #32
 8008152:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2220      	movs	r2, #32
 8008158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2220      	movs	r2, #32
 8008160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	e010      	b.n	8008192 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	69da      	ldr	r2, [r3, #28]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	4013      	ands	r3, r2
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	429a      	cmp	r2, r3
 800817e:	bf0c      	ite	eq
 8008180:	2301      	moveq	r3, #1
 8008182:	2300      	movne	r3, #0
 8008184:	b2db      	uxtb	r3, r3
 8008186:	461a      	mov	r2, r3
 8008188:	79fb      	ldrb	r3, [r7, #7]
 800818a:	429a      	cmp	r2, r3
 800818c:	f43f af48 	beq.w	8008020 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3770      	adds	r7, #112	; 0x70
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
	...

0800819c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800819c:	b480      	push	{r7}
 800819e:	b097      	sub	sp, #92	; 0x5c
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	4613      	mov	r3, r2
 80081a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	88fa      	ldrh	r2, [r7, #6]
 80081b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	88fa      	ldrh	r2, [r7, #6]
 80081bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ce:	d10e      	bne.n	80081ee <UART_Start_Receive_IT+0x52>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d105      	bne.n	80081e4 <UART_Start_Receive_IT+0x48>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80081de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081e2:	e02d      	b.n	8008240 <UART_Start_Receive_IT+0xa4>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	22ff      	movs	r2, #255	; 0xff
 80081e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081ec:	e028      	b.n	8008240 <UART_Start_Receive_IT+0xa4>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10d      	bne.n	8008212 <UART_Start_Receive_IT+0x76>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d104      	bne.n	8008208 <UART_Start_Receive_IT+0x6c>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	22ff      	movs	r2, #255	; 0xff
 8008202:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008206:	e01b      	b.n	8008240 <UART_Start_Receive_IT+0xa4>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	227f      	movs	r2, #127	; 0x7f
 800820c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008210:	e016      	b.n	8008240 <UART_Start_Receive_IT+0xa4>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800821a:	d10d      	bne.n	8008238 <UART_Start_Receive_IT+0x9c>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d104      	bne.n	800822e <UART_Start_Receive_IT+0x92>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	227f      	movs	r2, #127	; 0x7f
 8008228:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800822c:	e008      	b.n	8008240 <UART_Start_Receive_IT+0xa4>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	223f      	movs	r2, #63	; 0x3f
 8008232:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008236:	e003      	b.n	8008240 <UART_Start_Receive_IT+0xa4>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2222      	movs	r2, #34	; 0x22
 800824c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3308      	adds	r3, #8
 8008256:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800825a:	e853 3f00 	ldrex	r3, [r3]
 800825e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008262:	f043 0301 	orr.w	r3, r3, #1
 8008266:	657b      	str	r3, [r7, #84]	; 0x54
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	3308      	adds	r3, #8
 800826e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008270:	64ba      	str	r2, [r7, #72]	; 0x48
 8008272:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008274:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008278:	e841 2300 	strex	r3, r2, [r1]
 800827c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800827e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1e5      	bne.n	8008250 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800828c:	d107      	bne.n	800829e <UART_Start_Receive_IT+0x102>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d103      	bne.n	800829e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	4a21      	ldr	r2, [pc, #132]	; (8008320 <UART_Start_Receive_IT+0x184>)
 800829a:	669a      	str	r2, [r3, #104]	; 0x68
 800829c:	e002      	b.n	80082a4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4a20      	ldr	r2, [pc, #128]	; (8008324 <UART_Start_Receive_IT+0x188>)
 80082a2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d019      	beq.n	80082e0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80082c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	461a      	mov	r2, r3
 80082c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ca:	637b      	str	r3, [r7, #52]	; 0x34
 80082cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e6      	bne.n	80082ac <UART_Start_Receive_IT+0x110>
 80082de:	e018      	b.n	8008312 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	613b      	str	r3, [r7, #16]
   return(result);
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f043 0320 	orr.w	r3, r3, #32
 80082f4:	653b      	str	r3, [r7, #80]	; 0x50
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082fe:	623b      	str	r3, [r7, #32]
 8008300:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	69f9      	ldr	r1, [r7, #28]
 8008304:	6a3a      	ldr	r2, [r7, #32]
 8008306:	e841 2300 	strex	r3, r2, [r1]
 800830a:	61bb      	str	r3, [r7, #24]
   return(result);
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e6      	bne.n	80082e0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	375c      	adds	r7, #92	; 0x5c
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	080085d7 	.word	0x080085d7
 8008324:	08008471 	.word	0x08008471

08008328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008328:	b480      	push	{r7}
 800832a:	b095      	sub	sp, #84	; 0x54
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008338:	e853 3f00 	ldrex	r3, [r3]
 800833c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008344:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	461a      	mov	r2, r3
 800834c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800834e:	643b      	str	r3, [r7, #64]	; 0x40
 8008350:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008352:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008354:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008356:	e841 2300 	strex	r3, r2, [r1]
 800835a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1e6      	bne.n	8008330 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3308      	adds	r3, #8
 8008368:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	e853 3f00 	ldrex	r3, [r3]
 8008370:	61fb      	str	r3, [r7, #28]
   return(result);
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	f023 0301 	bic.w	r3, r3, #1
 8008378:	64bb      	str	r3, [r7, #72]	; 0x48
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	3308      	adds	r3, #8
 8008380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008382:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008384:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800838a:	e841 2300 	strex	r3, r2, [r1]
 800838e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1e5      	bne.n	8008362 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800839a:	2b01      	cmp	r3, #1
 800839c:	d118      	bne.n	80083d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	e853 3f00 	ldrex	r3, [r3]
 80083aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f023 0310 	bic.w	r3, r3, #16
 80083b2:	647b      	str	r3, [r7, #68]	; 0x44
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	461a      	mov	r2, r3
 80083ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083bc:	61bb      	str	r3, [r7, #24]
 80083be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c0:	6979      	ldr	r1, [r7, #20]
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	e841 2300 	strex	r3, r2, [r1]
 80083c8:	613b      	str	r3, [r7, #16]
   return(result);
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1e6      	bne.n	800839e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2220      	movs	r2, #32
 80083d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80083e4:	bf00      	nop
 80083e6:	3754      	adds	r7, #84	; 0x54
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f7ff fa8a 	bl	8007928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008414:	bf00      	nop
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	60bb      	str	r3, [r7, #8]
   return(result);
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008438:	61fb      	str	r3, [r7, #28]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	61bb      	str	r3, [r7, #24]
 8008444:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	6979      	ldr	r1, [r7, #20]
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	613b      	str	r3, [r7, #16]
   return(result);
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e6      	bne.n	8008424 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7ff fa56 	bl	8007914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008468:	bf00      	nop
 800846a:	3720      	adds	r7, #32
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b096      	sub	sp, #88	; 0x58
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800847e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008488:	2b22      	cmp	r3, #34	; 0x22
 800848a:	f040 8098 	bne.w	80085be <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008494:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008498:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800849c:	b2d9      	uxtb	r1, r3
 800849e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a8:	400a      	ands	r2, r1
 80084aa:	b2d2      	uxtb	r2, r2
 80084ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b2:	1c5a      	adds	r2, r3, #1
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084be:	b29b      	uxth	r3, r3
 80084c0:	3b01      	subs	r3, #1
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d17b      	bne.n	80085ce <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084ea:	653b      	str	r3, [r7, #80]	; 0x50
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	461a      	mov	r2, r3
 80084f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f4:	647b      	str	r3, [r7, #68]	; 0x44
 80084f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084fc:	e841 2300 	strex	r3, r2, [r1]
 8008500:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e6      	bne.n	80084d6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3308      	adds	r3, #8
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	e853 3f00 	ldrex	r3, [r3]
 8008516:	623b      	str	r3, [r7, #32]
   return(result);
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	f023 0301 	bic.w	r3, r3, #1
 800851e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3308      	adds	r3, #8
 8008526:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008528:	633a      	str	r2, [r7, #48]	; 0x30
 800852a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800852e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008530:	e841 2300 	strex	r3, r2, [r1]
 8008534:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1e5      	bne.n	8008508 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2220      	movs	r2, #32
 8008540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008554:	2b01      	cmp	r3, #1
 8008556:	d12e      	bne.n	80085b6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	e853 3f00 	ldrex	r3, [r3]
 800856a:	60fb      	str	r3, [r7, #12]
   return(result);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f023 0310 	bic.w	r3, r3, #16
 8008572:	64bb      	str	r3, [r7, #72]	; 0x48
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	461a      	mov	r2, r3
 800857a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800857c:	61fb      	str	r3, [r7, #28]
 800857e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008580:	69b9      	ldr	r1, [r7, #24]
 8008582:	69fa      	ldr	r2, [r7, #28]
 8008584:	e841 2300 	strex	r3, r2, [r1]
 8008588:	617b      	str	r3, [r7, #20]
   return(result);
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1e6      	bne.n	800855e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	f003 0310 	and.w	r3, r3, #16
 800859a:	2b10      	cmp	r3, #16
 800859c:	d103      	bne.n	80085a6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2210      	movs	r2, #16
 80085a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7ff f9c4 	bl	800793c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085b4:	e00b      	b.n	80085ce <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7f9 f8fe 	bl	80017b8 <HAL_UART_RxCpltCallback>
}
 80085bc:	e007      	b.n	80085ce <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	699a      	ldr	r2, [r3, #24]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f042 0208 	orr.w	r2, r2, #8
 80085cc:	619a      	str	r2, [r3, #24]
}
 80085ce:	bf00      	nop
 80085d0:	3758      	adds	r7, #88	; 0x58
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b096      	sub	sp, #88	; 0x58
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085ee:	2b22      	cmp	r3, #34	; 0x22
 80085f0:	f040 8098 	bne.w	8008724 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008602:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008604:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008608:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800860c:	4013      	ands	r3, r2
 800860e:	b29a      	uxth	r2, r3
 8008610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008612:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008618:	1c9a      	adds	r2, r3, #2
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008624:	b29b      	uxth	r3, r3
 8008626:	3b01      	subs	r3, #1
 8008628:	b29a      	uxth	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008636:	b29b      	uxth	r3, r3
 8008638:	2b00      	cmp	r3, #0
 800863a:	d17b      	bne.n	8008734 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008644:	e853 3f00 	ldrex	r3, [r3]
 8008648:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008650:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800865a:	643b      	str	r3, [r7, #64]	; 0x40
 800865c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008660:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008662:	e841 2300 	strex	r3, r2, [r1]
 8008666:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e6      	bne.n	800863c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3308      	adds	r3, #8
 8008674:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	e853 3f00 	ldrex	r3, [r3]
 800867c:	61fb      	str	r3, [r7, #28]
   return(result);
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	f023 0301 	bic.w	r3, r3, #1
 8008684:	64bb      	str	r3, [r7, #72]	; 0x48
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3308      	adds	r3, #8
 800868c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800868e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008690:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008696:	e841 2300 	strex	r3, r2, [r1]
 800869a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1e5      	bne.n	800866e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2220      	movs	r2, #32
 80086a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d12e      	bne.n	800871c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	e853 3f00 	ldrex	r3, [r3]
 80086d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	f023 0310 	bic.w	r3, r3, #16
 80086d8:	647b      	str	r3, [r7, #68]	; 0x44
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086e2:	61bb      	str	r3, [r7, #24]
 80086e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e6:	6979      	ldr	r1, [r7, #20]
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	e841 2300 	strex	r3, r2, [r1]
 80086ee:	613b      	str	r3, [r7, #16]
   return(result);
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1e6      	bne.n	80086c4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	f003 0310 	and.w	r3, r3, #16
 8008700:	2b10      	cmp	r3, #16
 8008702:	d103      	bne.n	800870c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2210      	movs	r2, #16
 800870a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7ff f911 	bl	800793c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800871a:	e00b      	b.n	8008734 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7f9 f84b 	bl	80017b8 <HAL_UART_RxCpltCallback>
}
 8008722:	e007      	b.n	8008734 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	699a      	ldr	r2, [r3, #24]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f042 0208 	orr.w	r2, r2, #8
 8008732:	619a      	str	r2, [r3, #24]
}
 8008734:	bf00      	nop
 8008736:	3758      	adds	r7, #88	; 0x58
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008740:	bf00      	nop
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
	...

0800874c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008752:	f3ef 8305 	mrs	r3, IPSR
 8008756:	60bb      	str	r3, [r7, #8]
  return(result);
 8008758:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10f      	bne.n	800877e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800875e:	f3ef 8310 	mrs	r3, PRIMASK
 8008762:	607b      	str	r3, [r7, #4]
  return(result);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d105      	bne.n	8008776 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800876a:	f3ef 8311 	mrs	r3, BASEPRI
 800876e:	603b      	str	r3, [r7, #0]
  return(result);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d007      	beq.n	8008786 <osKernelInitialize+0x3a>
 8008776:	4b0e      	ldr	r3, [pc, #56]	; (80087b0 <osKernelInitialize+0x64>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b02      	cmp	r3, #2
 800877c:	d103      	bne.n	8008786 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800877e:	f06f 0305 	mvn.w	r3, #5
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	e00c      	b.n	80087a0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008786:	4b0a      	ldr	r3, [pc, #40]	; (80087b0 <osKernelInitialize+0x64>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d105      	bne.n	800879a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800878e:	4b08      	ldr	r3, [pc, #32]	; (80087b0 <osKernelInitialize+0x64>)
 8008790:	2201      	movs	r2, #1
 8008792:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008794:	2300      	movs	r3, #0
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	e002      	b.n	80087a0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800879a:	f04f 33ff 	mov.w	r3, #4294967295
 800879e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80087a0:	68fb      	ldr	r3, [r7, #12]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	200007e4 	.word	0x200007e4

080087b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087ba:	f3ef 8305 	mrs	r3, IPSR
 80087be:	60bb      	str	r3, [r7, #8]
  return(result);
 80087c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10f      	bne.n	80087e6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087c6:	f3ef 8310 	mrs	r3, PRIMASK
 80087ca:	607b      	str	r3, [r7, #4]
  return(result);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d105      	bne.n	80087de <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087d2:	f3ef 8311 	mrs	r3, BASEPRI
 80087d6:	603b      	str	r3, [r7, #0]
  return(result);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d007      	beq.n	80087ee <osKernelStart+0x3a>
 80087de:	4b0f      	ldr	r3, [pc, #60]	; (800881c <osKernelStart+0x68>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d103      	bne.n	80087ee <osKernelStart+0x3a>
    stat = osErrorISR;
 80087e6:	f06f 0305 	mvn.w	r3, #5
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	e010      	b.n	8008810 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80087ee:	4b0b      	ldr	r3, [pc, #44]	; (800881c <osKernelStart+0x68>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d109      	bne.n	800880a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80087f6:	f7ff ffa1 	bl	800873c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80087fa:	4b08      	ldr	r3, [pc, #32]	; (800881c <osKernelStart+0x68>)
 80087fc:	2202      	movs	r2, #2
 80087fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008800:	f001 fa4c 	bl	8009c9c <vTaskStartScheduler>
      stat = osOK;
 8008804:	2300      	movs	r3, #0
 8008806:	60fb      	str	r3, [r7, #12]
 8008808:	e002      	b.n	8008810 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800880a:	f04f 33ff 	mov.w	r3, #4294967295
 800880e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008810:	68fb      	ldr	r3, [r7, #12]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	200007e4 	.word	0x200007e4

08008820 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008820:	b580      	push	{r7, lr}
 8008822:	b090      	sub	sp, #64	; 0x40
 8008824:	af04      	add	r7, sp, #16
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800882c:	2300      	movs	r3, #0
 800882e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008830:	f3ef 8305 	mrs	r3, IPSR
 8008834:	61fb      	str	r3, [r7, #28]
  return(result);
 8008836:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008838:	2b00      	cmp	r3, #0
 800883a:	f040 808f 	bne.w	800895c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800883e:	f3ef 8310 	mrs	r3, PRIMASK
 8008842:	61bb      	str	r3, [r7, #24]
  return(result);
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d105      	bne.n	8008856 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800884a:	f3ef 8311 	mrs	r3, BASEPRI
 800884e:	617b      	str	r3, [r7, #20]
  return(result);
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d003      	beq.n	800885e <osThreadNew+0x3e>
 8008856:	4b44      	ldr	r3, [pc, #272]	; (8008968 <osThreadNew+0x148>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b02      	cmp	r3, #2
 800885c:	d07e      	beq.n	800895c <osThreadNew+0x13c>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d07b      	beq.n	800895c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008864:	2380      	movs	r3, #128	; 0x80
 8008866:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008868:	2318      	movs	r3, #24
 800886a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800886c:	2300      	movs	r3, #0
 800886e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008870:	f04f 33ff 	mov.w	r3, #4294967295
 8008874:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d045      	beq.n	8008908 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <osThreadNew+0x6a>
        name = attr->name;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d002      	beq.n	8008898 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	2b00      	cmp	r3, #0
 800889c:	d008      	beq.n	80088b0 <osThreadNew+0x90>
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	2b38      	cmp	r3, #56	; 0x38
 80088a2:	d805      	bhi.n	80088b0 <osThreadNew+0x90>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f003 0301 	and.w	r3, r3, #1
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <osThreadNew+0x94>
        return (NULL);
 80088b0:	2300      	movs	r3, #0
 80088b2:	e054      	b.n	800895e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d003      	beq.n	80088c4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	089b      	lsrs	r3, r3, #2
 80088c2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00e      	beq.n	80088ea <osThreadNew+0xca>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	2ba7      	cmp	r3, #167	; 0xa7
 80088d2:	d90a      	bls.n	80088ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d006      	beq.n	80088ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d002      	beq.n	80088ea <osThreadNew+0xca>
        mem = 1;
 80088e4:	2301      	movs	r3, #1
 80088e6:	623b      	str	r3, [r7, #32]
 80088e8:	e010      	b.n	800890c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10c      	bne.n	800890c <osThreadNew+0xec>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d108      	bne.n	800890c <osThreadNew+0xec>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d104      	bne.n	800890c <osThreadNew+0xec>
          mem = 0;
 8008902:	2300      	movs	r3, #0
 8008904:	623b      	str	r3, [r7, #32]
 8008906:	e001      	b.n	800890c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008908:	2300      	movs	r3, #0
 800890a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800890c:	6a3b      	ldr	r3, [r7, #32]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d110      	bne.n	8008934 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800891a:	9202      	str	r2, [sp, #8]
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 fe3f 	bl	80095ac <xTaskCreateStatic>
 800892e:	4603      	mov	r3, r0
 8008930:	613b      	str	r3, [r7, #16]
 8008932:	e013      	b.n	800895c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008934:	6a3b      	ldr	r3, [r7, #32]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d110      	bne.n	800895c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800893a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893c:	b29a      	uxth	r2, r3
 800893e:	f107 0310 	add.w	r3, r7, #16
 8008942:	9301      	str	r3, [sp, #4]
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 fe90 	bl	8009672 <xTaskCreate>
 8008952:	4603      	mov	r3, r0
 8008954:	2b01      	cmp	r3, #1
 8008956:	d001      	beq.n	800895c <osThreadNew+0x13c>
          hTask = NULL;
 8008958:	2300      	movs	r3, #0
 800895a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800895c:	693b      	ldr	r3, [r7, #16]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3730      	adds	r7, #48	; 0x30
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	200007e4 	.word	0x200007e4

0800896c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008974:	f3ef 8305 	mrs	r3, IPSR
 8008978:	613b      	str	r3, [r7, #16]
  return(result);
 800897a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10f      	bne.n	80089a0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008980:	f3ef 8310 	mrs	r3, PRIMASK
 8008984:	60fb      	str	r3, [r7, #12]
  return(result);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d105      	bne.n	8008998 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800898c:	f3ef 8311 	mrs	r3, BASEPRI
 8008990:	60bb      	str	r3, [r7, #8]
  return(result);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d007      	beq.n	80089a8 <osDelay+0x3c>
 8008998:	4b0a      	ldr	r3, [pc, #40]	; (80089c4 <osDelay+0x58>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b02      	cmp	r3, #2
 800899e:	d103      	bne.n	80089a8 <osDelay+0x3c>
    stat = osErrorISR;
 80089a0:	f06f 0305 	mvn.w	r3, #5
 80089a4:	617b      	str	r3, [r7, #20]
 80089a6:	e007      	b.n	80089b8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d002      	beq.n	80089b8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 ffba 	bl	800992c <vTaskDelay>
    }
  }

  return (stat);
 80089b8:	697b      	ldr	r3, [r7, #20]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	200007e4 	.word	0x200007e4

080089c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	4a07      	ldr	r2, [pc, #28]	; (80089f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80089d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	4a06      	ldr	r2, [pc, #24]	; (80089f8 <vApplicationGetIdleTaskMemory+0x30>)
 80089de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2280      	movs	r2, #128	; 0x80
 80089e4:	601a      	str	r2, [r3, #0]
}
 80089e6:	bf00      	nop
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	200007e8 	.word	0x200007e8
 80089f8:	20000890 	.word	0x20000890

080089fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	4a07      	ldr	r2, [pc, #28]	; (8008a28 <vApplicationGetTimerTaskMemory+0x2c>)
 8008a0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	4a06      	ldr	r2, [pc, #24]	; (8008a2c <vApplicationGetTimerTaskMemory+0x30>)
 8008a12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a1a:	601a      	str	r2, [r3, #0]
}
 8008a1c:	bf00      	nop
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	20000a90 	.word	0x20000a90
 8008a2c:	20000b38 	.word	0x20000b38

08008a30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f103 0208 	add.w	r2, r3, #8
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f04f 32ff 	mov.w	r2, #4294967295
 8008a48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f103 0208 	add.w	r2, r3, #8
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f103 0208 	add.w	r2, r3, #8
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a7e:	bf00      	nop
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b085      	sub	sp, #20
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	601a      	str	r2, [r3, #0]
}
 8008ac6:	bf00      	nop
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b085      	sub	sp, #20
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae8:	d103      	bne.n	8008af2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	e00c      	b.n	8008b0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	3308      	adds	r3, #8
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	e002      	b.n	8008b00 <vListInsert+0x2e>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d2f6      	bcs.n	8008afa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	1c5a      	adds	r2, r3, #1
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	601a      	str	r2, [r3, #0]
}
 8008b38:	bf00      	nop
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	6892      	ldr	r2, [r2, #8]
 8008b5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	6852      	ldr	r2, [r2, #4]
 8008b64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d103      	bne.n	8008b78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	689a      	ldr	r2, [r3, #8]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	1e5a      	subs	r2, r3, #1
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10c      	bne.n	8008bc6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb0:	b672      	cpsid	i
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	b662      	cpsie	i
 8008bc0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008bc2:	bf00      	nop
 8008bc4:	e7fe      	b.n	8008bc4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008bc6:	f002 fa29 	bl	800b01c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bd2:	68f9      	ldr	r1, [r7, #12]
 8008bd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008bd6:	fb01 f303 	mul.w	r3, r1, r3
 8008bda:	441a      	add	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	68f9      	ldr	r1, [r7, #12]
 8008bfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008bfc:	fb01 f303 	mul.w	r3, r1, r3
 8008c00:	441a      	add	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	22ff      	movs	r2, #255	; 0xff
 8008c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	22ff      	movs	r2, #255	; 0xff
 8008c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d114      	bne.n	8008c46 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d01a      	beq.n	8008c5a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	3310      	adds	r3, #16
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f001 fadf 	bl	800a1ec <xTaskRemoveFromEventList>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d012      	beq.n	8008c5a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008c34:	4b0c      	ldr	r3, [pc, #48]	; (8008c68 <xQueueGenericReset+0xd0>)
 8008c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c3a:	601a      	str	r2, [r3, #0]
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	e009      	b.n	8008c5a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	3310      	adds	r3, #16
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7ff fef0 	bl	8008a30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	3324      	adds	r3, #36	; 0x24
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7ff feeb 	bl	8008a30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c5a:	f002 fa13 	bl	800b084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c5e:	2301      	movs	r3, #1
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	e000ed04 	.word	0xe000ed04

08008c6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08e      	sub	sp, #56	; 0x38
 8008c70:	af02      	add	r7, sp, #8
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
 8008c78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10c      	bne.n	8008c9a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8008c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c84:	b672      	cpsid	i
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	b662      	cpsie	i
 8008c94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c96:	bf00      	nop
 8008c98:	e7fe      	b.n	8008c98 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10c      	bne.n	8008cba <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8008ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca4:	b672      	cpsid	i
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	b662      	cpsie	i
 8008cb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008cb6:	bf00      	nop
 8008cb8:	e7fe      	b.n	8008cb8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <xQueueGenericCreateStatic+0x5a>
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d001      	beq.n	8008cca <xQueueGenericCreateStatic+0x5e>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e000      	b.n	8008ccc <xQueueGenericCreateStatic+0x60>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10c      	bne.n	8008cea <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	b672      	cpsid	i
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	b662      	cpsie	i
 8008ce4:	623b      	str	r3, [r7, #32]
}
 8008ce6:	bf00      	nop
 8008ce8:	e7fe      	b.n	8008ce8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d102      	bne.n	8008cf6 <xQueueGenericCreateStatic+0x8a>
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <xQueueGenericCreateStatic+0x8e>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e000      	b.n	8008cfc <xQueueGenericCreateStatic+0x90>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10c      	bne.n	8008d1a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d04:	b672      	cpsid	i
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	b662      	cpsie	i
 8008d14:	61fb      	str	r3, [r7, #28]
}
 8008d16:	bf00      	nop
 8008d18:	e7fe      	b.n	8008d18 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008d1a:	2350      	movs	r3, #80	; 0x50
 8008d1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2b50      	cmp	r3, #80	; 0x50
 8008d22:	d00c      	beq.n	8008d3e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	b672      	cpsid	i
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	b662      	cpsie	i
 8008d38:	61bb      	str	r3, [r7, #24]
}
 8008d3a:	bf00      	nop
 8008d3c:	e7fe      	b.n	8008d3c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008d3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00d      	beq.n	8008d66 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d58:	9300      	str	r3, [sp, #0]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	68b9      	ldr	r1, [r7, #8]
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f000 f805 	bl	8008d70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3730      	adds	r7, #48	; 0x30
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
 8008d7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d103      	bne.n	8008d8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	69ba      	ldr	r2, [r7, #24]
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	e002      	b.n	8008d92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d9e:	2101      	movs	r1, #1
 8008da0:	69b8      	ldr	r0, [r7, #24]
 8008da2:	f7ff fef9 	bl	8008b98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	78fa      	ldrb	r2, [r7, #3]
 8008daa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008dae:	bf00      	nop
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08e      	sub	sp, #56	; 0x38
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
 8008dc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10c      	bne.n	8008dee <xQueueGenericSend+0x36>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	b672      	cpsid	i
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	b662      	cpsie	i
 8008de8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008dea:	bf00      	nop
 8008dec:	e7fe      	b.n	8008dec <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d103      	bne.n	8008dfc <xQueueGenericSend+0x44>
 8008df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d101      	bne.n	8008e00 <xQueueGenericSend+0x48>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e000      	b.n	8008e02 <xQueueGenericSend+0x4a>
 8008e00:	2300      	movs	r3, #0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10c      	bne.n	8008e20 <xQueueGenericSend+0x68>
	__asm volatile
 8008e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0a:	b672      	cpsid	i
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	b662      	cpsie	i
 8008e1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e1c:	bf00      	nop
 8008e1e:	e7fe      	b.n	8008e1e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d103      	bne.n	8008e2e <xQueueGenericSend+0x76>
 8008e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d101      	bne.n	8008e32 <xQueueGenericSend+0x7a>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e000      	b.n	8008e34 <xQueueGenericSend+0x7c>
 8008e32:	2300      	movs	r3, #0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10c      	bne.n	8008e52 <xQueueGenericSend+0x9a>
	__asm volatile
 8008e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3c:	b672      	cpsid	i
 8008e3e:	f383 8811 	msr	BASEPRI, r3
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	b662      	cpsie	i
 8008e4c:	623b      	str	r3, [r7, #32]
}
 8008e4e:	bf00      	nop
 8008e50:	e7fe      	b.n	8008e50 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e52:	f001 fb95 	bl	800a580 <xTaskGetSchedulerState>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d102      	bne.n	8008e62 <xQueueGenericSend+0xaa>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <xQueueGenericSend+0xae>
 8008e62:	2301      	movs	r3, #1
 8008e64:	e000      	b.n	8008e68 <xQueueGenericSend+0xb0>
 8008e66:	2300      	movs	r3, #0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10c      	bne.n	8008e86 <xQueueGenericSend+0xce>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	b672      	cpsid	i
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	b662      	cpsie	i
 8008e80:	61fb      	str	r3, [r7, #28]
}
 8008e82:	bf00      	nop
 8008e84:	e7fe      	b.n	8008e84 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e86:	f002 f8c9 	bl	800b01c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d302      	bcc.n	8008e9c <xQueueGenericSend+0xe4>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d129      	bne.n	8008ef0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e9c:	683a      	ldr	r2, [r7, #0]
 8008e9e:	68b9      	ldr	r1, [r7, #8]
 8008ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ea2:	f000 fa15 	bl	80092d0 <prvCopyDataToQueue>
 8008ea6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d010      	beq.n	8008ed2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb2:	3324      	adds	r3, #36	; 0x24
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f001 f999 	bl	800a1ec <xTaskRemoveFromEventList>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d013      	beq.n	8008ee8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ec0:	4b3f      	ldr	r3, [pc, #252]	; (8008fc0 <xQueueGenericSend+0x208>)
 8008ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	e00a      	b.n	8008ee8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d007      	beq.n	8008ee8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ed8:	4b39      	ldr	r3, [pc, #228]	; (8008fc0 <xQueueGenericSend+0x208>)
 8008eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ee8:	f002 f8cc 	bl	800b084 <vPortExitCritical>
				return pdPASS;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e063      	b.n	8008fb8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d103      	bne.n	8008efe <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ef6:	f002 f8c5 	bl	800b084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	e05c      	b.n	8008fb8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d106      	bne.n	8008f12 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f04:	f107 0314 	add.w	r3, r7, #20
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f001 f9d5 	bl	800a2b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f12:	f002 f8b7 	bl	800b084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f16:	f000 ff35 	bl	8009d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f1a:	f002 f87f 	bl	800b01c <vPortEnterCritical>
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f24:	b25b      	sxtb	r3, r3
 8008f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2a:	d103      	bne.n	8008f34 <xQueueGenericSend+0x17c>
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f3a:	b25b      	sxtb	r3, r3
 8008f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f40:	d103      	bne.n	8008f4a <xQueueGenericSend+0x192>
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f4a:	f002 f89b 	bl	800b084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f4e:	1d3a      	adds	r2, r7, #4
 8008f50:	f107 0314 	add.w	r3, r7, #20
 8008f54:	4611      	mov	r1, r2
 8008f56:	4618      	mov	r0, r3
 8008f58:	f001 f9c4 	bl	800a2e4 <xTaskCheckForTimeOut>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d124      	bne.n	8008fac <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f64:	f000 faac 	bl	80094c0 <prvIsQueueFull>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d018      	beq.n	8008fa0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	3310      	adds	r3, #16
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	4611      	mov	r1, r2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f001 f8e4 	bl	800a144 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f7e:	f000 fa37 	bl	80093f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f82:	f000 ff0d 	bl	8009da0 <xTaskResumeAll>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f47f af7c 	bne.w	8008e86 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <xQueueGenericSend+0x208>)
 8008f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	e772      	b.n	8008e86 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fa2:	f000 fa25 	bl	80093f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fa6:	f000 fefb 	bl	8009da0 <xTaskResumeAll>
 8008faa:	e76c      	b.n	8008e86 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fae:	f000 fa1f 	bl	80093f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fb2:	f000 fef5 	bl	8009da0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008fb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3738      	adds	r7, #56	; 0x38
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	e000ed04 	.word	0xe000ed04

08008fc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b08e      	sub	sp, #56	; 0x38
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10c      	bne.n	8008ff6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe0:	b672      	cpsid	i
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	b662      	cpsie	i
 8008ff0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ff2:	bf00      	nop
 8008ff4:	e7fe      	b.n	8008ff4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d103      	bne.n	8009004 <xQueueGenericSendFromISR+0x40>
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <xQueueGenericSendFromISR+0x44>
 8009004:	2301      	movs	r3, #1
 8009006:	e000      	b.n	800900a <xQueueGenericSendFromISR+0x46>
 8009008:	2300      	movs	r3, #0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10c      	bne.n	8009028 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009012:	b672      	cpsid	i
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	b662      	cpsie	i
 8009022:	623b      	str	r3, [r7, #32]
}
 8009024:	bf00      	nop
 8009026:	e7fe      	b.n	8009026 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	2b02      	cmp	r3, #2
 800902c:	d103      	bne.n	8009036 <xQueueGenericSendFromISR+0x72>
 800902e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009032:	2b01      	cmp	r3, #1
 8009034:	d101      	bne.n	800903a <xQueueGenericSendFromISR+0x76>
 8009036:	2301      	movs	r3, #1
 8009038:	e000      	b.n	800903c <xQueueGenericSendFromISR+0x78>
 800903a:	2300      	movs	r3, #0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10c      	bne.n	800905a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8009040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009044:	b672      	cpsid	i
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	b662      	cpsie	i
 8009054:	61fb      	str	r3, [r7, #28]
}
 8009056:	bf00      	nop
 8009058:	e7fe      	b.n	8009058 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800905a:	f002 f8c7 	bl	800b1ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800905e:	f3ef 8211 	mrs	r2, BASEPRI
 8009062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009066:	b672      	cpsid	i
 8009068:	f383 8811 	msr	BASEPRI, r3
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	b662      	cpsie	i
 8009076:	61ba      	str	r2, [r7, #24]
 8009078:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800907a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800907c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009086:	429a      	cmp	r2, r3
 8009088:	d302      	bcc.n	8009090 <xQueueGenericSendFromISR+0xcc>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b02      	cmp	r3, #2
 800908e:	d12c      	bne.n	80090ea <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	68b9      	ldr	r1, [r7, #8]
 800909e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090a0:	f000 f916 	bl	80092d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80090a4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80090a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ac:	d112      	bne.n	80090d4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d016      	beq.n	80090e4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	3324      	adds	r3, #36	; 0x24
 80090ba:	4618      	mov	r0, r3
 80090bc:	f001 f896 	bl	800a1ec <xTaskRemoveFromEventList>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00e      	beq.n	80090e4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00b      	beq.n	80090e4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	601a      	str	r2, [r3, #0]
 80090d2:	e007      	b.n	80090e4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090d8:	3301      	adds	r3, #1
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	b25a      	sxtb	r2, r3
 80090de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80090e4:	2301      	movs	r3, #1
 80090e6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80090e8:	e001      	b.n	80090ee <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090ea:	2300      	movs	r3, #0
 80090ec:	637b      	str	r3, [r7, #52]	; 0x34
 80090ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80090f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3738      	adds	r7, #56	; 0x38
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08c      	sub	sp, #48	; 0x30
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009110:	2300      	movs	r3, #0
 8009112:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10c      	bne.n	8009138 <xQueueReceive+0x34>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	b672      	cpsid	i
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	b662      	cpsie	i
 8009132:	623b      	str	r3, [r7, #32]
}
 8009134:	bf00      	nop
 8009136:	e7fe      	b.n	8009136 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d103      	bne.n	8009146 <xQueueReceive+0x42>
 800913e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009142:	2b00      	cmp	r3, #0
 8009144:	d101      	bne.n	800914a <xQueueReceive+0x46>
 8009146:	2301      	movs	r3, #1
 8009148:	e000      	b.n	800914c <xQueueReceive+0x48>
 800914a:	2300      	movs	r3, #0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10c      	bne.n	800916a <xQueueReceive+0x66>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	b672      	cpsid	i
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	b662      	cpsie	i
 8009164:	61fb      	str	r3, [r7, #28]
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800916a:	f001 fa09 	bl	800a580 <xTaskGetSchedulerState>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d102      	bne.n	800917a <xQueueReceive+0x76>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <xQueueReceive+0x7a>
 800917a:	2301      	movs	r3, #1
 800917c:	e000      	b.n	8009180 <xQueueReceive+0x7c>
 800917e:	2300      	movs	r3, #0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10c      	bne.n	800919e <xQueueReceive+0x9a>
	__asm volatile
 8009184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009188:	b672      	cpsid	i
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	b662      	cpsie	i
 8009198:	61bb      	str	r3, [r7, #24]
}
 800919a:	bf00      	nop
 800919c:	e7fe      	b.n	800919c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800919e:	f001 ff3d 	bl	800b01c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d01f      	beq.n	80091ee <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091ae:	68b9      	ldr	r1, [r7, #8]
 80091b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091b2:	f000 f8f7 	bl	80093a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b8:	1e5a      	subs	r2, r3, #1
 80091ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00f      	beq.n	80091e6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c8:	3310      	adds	r3, #16
 80091ca:	4618      	mov	r0, r3
 80091cc:	f001 f80e 	bl	800a1ec <xTaskRemoveFromEventList>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d007      	beq.n	80091e6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80091d6:	4b3d      	ldr	r3, [pc, #244]	; (80092cc <xQueueReceive+0x1c8>)
 80091d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80091e6:	f001 ff4d 	bl	800b084 <vPortExitCritical>
				return pdPASS;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e069      	b.n	80092c2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d103      	bne.n	80091fc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091f4:	f001 ff46 	bl	800b084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091f8:	2300      	movs	r3, #0
 80091fa:	e062      	b.n	80092c2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d106      	bne.n	8009210 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009202:	f107 0310 	add.w	r3, r7, #16
 8009206:	4618      	mov	r0, r3
 8009208:	f001 f856 	bl	800a2b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800920c:	2301      	movs	r3, #1
 800920e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009210:	f001 ff38 	bl	800b084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009214:	f000 fdb6 	bl	8009d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009218:	f001 ff00 	bl	800b01c <vPortEnterCritical>
 800921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009222:	b25b      	sxtb	r3, r3
 8009224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009228:	d103      	bne.n	8009232 <xQueueReceive+0x12e>
 800922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922c:	2200      	movs	r2, #0
 800922e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009238:	b25b      	sxtb	r3, r3
 800923a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923e:	d103      	bne.n	8009248 <xQueueReceive+0x144>
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009248:	f001 ff1c 	bl	800b084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800924c:	1d3a      	adds	r2, r7, #4
 800924e:	f107 0310 	add.w	r3, r7, #16
 8009252:	4611      	mov	r1, r2
 8009254:	4618      	mov	r0, r3
 8009256:	f001 f845 	bl	800a2e4 <xTaskCheckForTimeOut>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d123      	bne.n	80092a8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009262:	f000 f917 	bl	8009494 <prvIsQueueEmpty>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d017      	beq.n	800929c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	3324      	adds	r3, #36	; 0x24
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	4611      	mov	r1, r2
 8009274:	4618      	mov	r0, r3
 8009276:	f000 ff65 	bl	800a144 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800927a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800927c:	f000 f8b8 	bl	80093f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009280:	f000 fd8e 	bl	8009da0 <xTaskResumeAll>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d189      	bne.n	800919e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800928a:	4b10      	ldr	r3, [pc, #64]	; (80092cc <xQueueReceive+0x1c8>)
 800928c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	e780      	b.n	800919e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800929c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800929e:	f000 f8a7 	bl	80093f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092a2:	f000 fd7d 	bl	8009da0 <xTaskResumeAll>
 80092a6:	e77a      	b.n	800919e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80092a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092aa:	f000 f8a1 	bl	80093f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092ae:	f000 fd77 	bl	8009da0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092b4:	f000 f8ee 	bl	8009494 <prvIsQueueEmpty>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f43f af6f 	beq.w	800919e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80092c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3730      	adds	r7, #48	; 0x30
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	e000ed04 	.word	0xe000ed04

080092d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80092dc:	2300      	movs	r3, #0
 80092de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10d      	bne.n	800930a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d14d      	bne.n	8009392 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f001 f95e 	bl	800a5bc <xTaskPriorityDisinherit>
 8009300:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	609a      	str	r2, [r3, #8]
 8009308:	e043      	b.n	8009392 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d119      	bne.n	8009344 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6858      	ldr	r0, [r3, #4]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009318:	461a      	mov	r2, r3
 800931a:	68b9      	ldr	r1, [r7, #8]
 800931c:	f002 fb72 	bl	800ba04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009328:	441a      	add	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	685a      	ldr	r2, [r3, #4]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	429a      	cmp	r2, r3
 8009338:	d32b      	bcc.n	8009392 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	605a      	str	r2, [r3, #4]
 8009342:	e026      	b.n	8009392 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	68d8      	ldr	r0, [r3, #12]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934c:	461a      	mov	r2, r3
 800934e:	68b9      	ldr	r1, [r7, #8]
 8009350:	f002 fb58 	bl	800ba04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	68da      	ldr	r2, [r3, #12]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935c:	425b      	negs	r3, r3
 800935e:	441a      	add	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	68da      	ldr	r2, [r3, #12]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	429a      	cmp	r2, r3
 800936e:	d207      	bcs.n	8009380 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	689a      	ldr	r2, [r3, #8]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009378:	425b      	negs	r3, r3
 800937a:	441a      	add	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b02      	cmp	r3, #2
 8009384:	d105      	bne.n	8009392 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	3b01      	subs	r3, #1
 8009390:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	1c5a      	adds	r2, r3, #1
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800939a:	697b      	ldr	r3, [r7, #20]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3718      	adds	r7, #24
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d018      	beq.n	80093e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	68da      	ldr	r2, [r3, #12]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093be:	441a      	add	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	68da      	ldr	r2, [r3, #12]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d303      	bcc.n	80093d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68d9      	ldr	r1, [r3, #12]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e0:	461a      	mov	r2, r3
 80093e2:	6838      	ldr	r0, [r7, #0]
 80093e4:	f002 fb0e 	bl	800ba04 <memcpy>
	}
}
 80093e8:	bf00      	nop
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093f8:	f001 fe10 	bl	800b01c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009402:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009404:	e011      	b.n	800942a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940a:	2b00      	cmp	r3, #0
 800940c:	d012      	beq.n	8009434 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	3324      	adds	r3, #36	; 0x24
 8009412:	4618      	mov	r0, r3
 8009414:	f000 feea 	bl	800a1ec <xTaskRemoveFromEventList>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800941e:	f000 ffc7 	bl	800a3b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009422:	7bfb      	ldrb	r3, [r7, #15]
 8009424:	3b01      	subs	r3, #1
 8009426:	b2db      	uxtb	r3, r3
 8009428:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800942a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800942e:	2b00      	cmp	r3, #0
 8009430:	dce9      	bgt.n	8009406 <prvUnlockQueue+0x16>
 8009432:	e000      	b.n	8009436 <prvUnlockQueue+0x46>
					break;
 8009434:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	22ff      	movs	r2, #255	; 0xff
 800943a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800943e:	f001 fe21 	bl	800b084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009442:	f001 fdeb 	bl	800b01c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800944c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800944e:	e011      	b.n	8009474 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d012      	beq.n	800947e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3310      	adds	r3, #16
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fec5 	bl	800a1ec <xTaskRemoveFromEventList>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009468:	f000 ffa2 	bl	800a3b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800946c:	7bbb      	ldrb	r3, [r7, #14]
 800946e:	3b01      	subs	r3, #1
 8009470:	b2db      	uxtb	r3, r3
 8009472:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009474:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009478:	2b00      	cmp	r3, #0
 800947a:	dce9      	bgt.n	8009450 <prvUnlockQueue+0x60>
 800947c:	e000      	b.n	8009480 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800947e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	22ff      	movs	r2, #255	; 0xff
 8009484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009488:	f001 fdfc 	bl	800b084 <vPortExitCritical>
}
 800948c:	bf00      	nop
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800949c:	f001 fdbe 	bl	800b01c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d102      	bne.n	80094ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80094a8:	2301      	movs	r3, #1
 80094aa:	60fb      	str	r3, [r7, #12]
 80094ac:	e001      	b.n	80094b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80094ae:	2300      	movs	r3, #0
 80094b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094b2:	f001 fde7 	bl	800b084 <vPortExitCritical>

	return xReturn;
 80094b6:	68fb      	ldr	r3, [r7, #12]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094c8:	f001 fda8 	bl	800b01c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d102      	bne.n	80094de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80094d8:	2301      	movs	r3, #1
 80094da:	60fb      	str	r3, [r7, #12]
 80094dc:	e001      	b.n	80094e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80094de:	2300      	movs	r3, #0
 80094e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094e2:	f001 fdcf 	bl	800b084 <vPortExitCritical>

	return xReturn;
 80094e6:	68fb      	ldr	r3, [r7, #12]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094fa:	2300      	movs	r3, #0
 80094fc:	60fb      	str	r3, [r7, #12]
 80094fe:	e014      	b.n	800952a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009500:	4a0f      	ldr	r2, [pc, #60]	; (8009540 <vQueueAddToRegistry+0x50>)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10b      	bne.n	8009524 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800950c:	490c      	ldr	r1, [pc, #48]	; (8009540 <vQueueAddToRegistry+0x50>)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009516:	4a0a      	ldr	r2, [pc, #40]	; (8009540 <vQueueAddToRegistry+0x50>)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	00db      	lsls	r3, r3, #3
 800951c:	4413      	add	r3, r2
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009522:	e006      	b.n	8009532 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	3301      	adds	r3, #1
 8009528:	60fb      	str	r3, [r7, #12]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2b07      	cmp	r3, #7
 800952e:	d9e7      	bls.n	8009500 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009530:	bf00      	nop
 8009532:	bf00      	nop
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	20000f38 	.word	0x20000f38

08009544 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009554:	f001 fd62 	bl	800b01c <vPortEnterCritical>
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800955e:	b25b      	sxtb	r3, r3
 8009560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009564:	d103      	bne.n	800956e <vQueueWaitForMessageRestricted+0x2a>
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009574:	b25b      	sxtb	r3, r3
 8009576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957a:	d103      	bne.n	8009584 <vQueueWaitForMessageRestricted+0x40>
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009584:	f001 fd7e 	bl	800b084 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800958c:	2b00      	cmp	r3, #0
 800958e:	d106      	bne.n	800959e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	3324      	adds	r3, #36	; 0x24
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	68b9      	ldr	r1, [r7, #8]
 8009598:	4618      	mov	r0, r3
 800959a:	f000 fdf9 	bl	800a190 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800959e:	6978      	ldr	r0, [r7, #20]
 80095a0:	f7ff ff26 	bl	80093f0 <prvUnlockQueue>
	}
 80095a4:	bf00      	nop
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b08e      	sub	sp, #56	; 0x38
 80095b0:	af04      	add	r7, sp, #16
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
 80095b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80095ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10c      	bne.n	80095da <xTaskCreateStatic+0x2e>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	b672      	cpsid	i
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	b662      	cpsie	i
 80095d4:	623b      	str	r3, [r7, #32]
}
 80095d6:	bf00      	nop
 80095d8:	e7fe      	b.n	80095d8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80095da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10c      	bne.n	80095fa <xTaskCreateStatic+0x4e>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e4:	b672      	cpsid	i
 80095e6:	f383 8811 	msr	BASEPRI, r3
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	b662      	cpsie	i
 80095f4:	61fb      	str	r3, [r7, #28]
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80095fa:	23a8      	movs	r3, #168	; 0xa8
 80095fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	2ba8      	cmp	r3, #168	; 0xa8
 8009602:	d00c      	beq.n	800961e <xTaskCreateStatic+0x72>
	__asm volatile
 8009604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009608:	b672      	cpsid	i
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	b662      	cpsie	i
 8009618:	61bb      	str	r3, [r7, #24]
}
 800961a:	bf00      	nop
 800961c:	e7fe      	b.n	800961c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800961e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	2b00      	cmp	r3, #0
 8009624:	d01e      	beq.n	8009664 <xTaskCreateStatic+0xb8>
 8009626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009628:	2b00      	cmp	r3, #0
 800962a:	d01b      	beq.n	8009664 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800962c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009634:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	2202      	movs	r2, #2
 800963a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800963e:	2300      	movs	r3, #0
 8009640:	9303      	str	r3, [sp, #12]
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009644:	9302      	str	r3, [sp, #8]
 8009646:	f107 0314 	add.w	r3, r7, #20
 800964a:	9301      	str	r3, [sp, #4]
 800964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	68b9      	ldr	r1, [r7, #8]
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f000 f850 	bl	80096fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800965c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800965e:	f000 f8f5 	bl	800984c <prvAddNewTaskToReadyList>
 8009662:	e001      	b.n	8009668 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009664:	2300      	movs	r3, #0
 8009666:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009668:	697b      	ldr	r3, [r7, #20]
	}
 800966a:	4618      	mov	r0, r3
 800966c:	3728      	adds	r7, #40	; 0x28
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009672:	b580      	push	{r7, lr}
 8009674:	b08c      	sub	sp, #48	; 0x30
 8009676:	af04      	add	r7, sp, #16
 8009678:	60f8      	str	r0, [r7, #12]
 800967a:	60b9      	str	r1, [r7, #8]
 800967c:	603b      	str	r3, [r7, #0]
 800967e:	4613      	mov	r3, r2
 8009680:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009682:	88fb      	ldrh	r3, [r7, #6]
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4618      	mov	r0, r3
 8009688:	f001 fdf4 	bl	800b274 <pvPortMalloc>
 800968c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00e      	beq.n	80096b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009694:	20a8      	movs	r0, #168	; 0xa8
 8009696:	f001 fded 	bl	800b274 <pvPortMalloc>
 800969a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	631a      	str	r2, [r3, #48]	; 0x30
 80096a8:	e005      	b.n	80096b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80096aa:	6978      	ldr	r0, [r7, #20]
 80096ac:	f001 feac 	bl	800b408 <vPortFree>
 80096b0:	e001      	b.n	80096b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80096b2:	2300      	movs	r3, #0
 80096b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d017      	beq.n	80096ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096c4:	88fa      	ldrh	r2, [r7, #6]
 80096c6:	2300      	movs	r3, #0
 80096c8:	9303      	str	r3, [sp, #12]
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	9302      	str	r3, [sp, #8]
 80096ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d0:	9301      	str	r3, [sp, #4]
 80096d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	68b9      	ldr	r1, [r7, #8]
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f000 f80e 	bl	80096fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096e0:	69f8      	ldr	r0, [r7, #28]
 80096e2:	f000 f8b3 	bl	800984c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80096e6:	2301      	movs	r3, #1
 80096e8:	61bb      	str	r3, [r7, #24]
 80096ea:	e002      	b.n	80096f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096ec:	f04f 33ff 	mov.w	r3, #4294967295
 80096f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096f2:	69bb      	ldr	r3, [r7, #24]
	}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3720      	adds	r7, #32
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b088      	sub	sp, #32
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
 8009708:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	461a      	mov	r2, r3
 8009714:	21a5      	movs	r1, #165	; 0xa5
 8009716:	f002 f896 	bl	800b846 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800971a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800971e:	6879      	ldr	r1, [r7, #4]
 8009720:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009724:	440b      	add	r3, r1
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	f023 0307 	bic.w	r3, r3, #7
 8009732:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	f003 0307 	and.w	r3, r3, #7
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00c      	beq.n	8009758 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	b672      	cpsid	i
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	b662      	cpsie	i
 8009752:	617b      	str	r3, [r7, #20]
}
 8009754:	bf00      	nop
 8009756:	e7fe      	b.n	8009756 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d01f      	beq.n	800979e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800975e:	2300      	movs	r3, #0
 8009760:	61fb      	str	r3, [r7, #28]
 8009762:	e012      	b.n	800978a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	4413      	add	r3, r2
 800976a:	7819      	ldrb	r1, [r3, #0]
 800976c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	4413      	add	r3, r2
 8009772:	3334      	adds	r3, #52	; 0x34
 8009774:	460a      	mov	r2, r1
 8009776:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	4413      	add	r3, r2
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d006      	beq.n	8009792 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	3301      	adds	r3, #1
 8009788:	61fb      	str	r3, [r7, #28]
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	2b0f      	cmp	r3, #15
 800978e:	d9e9      	bls.n	8009764 <prvInitialiseNewTask+0x68>
 8009790:	e000      	b.n	8009794 <prvInitialiseNewTask+0x98>
			{
				break;
 8009792:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009796:	2200      	movs	r2, #0
 8009798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800979c:	e003      	b.n	80097a6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80097a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a8:	2b37      	cmp	r3, #55	; 0x37
 80097aa:	d901      	bls.n	80097b0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80097ac:	2337      	movs	r3, #55	; 0x37
 80097ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80097b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80097b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80097bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097be:	2200      	movs	r2, #0
 80097c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c4:	3304      	adds	r3, #4
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7ff f952 	bl	8008a70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ce:	3318      	adds	r3, #24
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7ff f94d 	bl	8008a70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ee:	2200      	movs	r2, #0
 80097f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f6:	2200      	movs	r2, #0
 80097f8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80097fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fe:	3354      	adds	r3, #84	; 0x54
 8009800:	224c      	movs	r2, #76	; 0x4c
 8009802:	2100      	movs	r1, #0
 8009804:	4618      	mov	r0, r3
 8009806:	f002 f81e 	bl	800b846 <memset>
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	4a0c      	ldr	r2, [pc, #48]	; (8009840 <prvInitialiseNewTask+0x144>)
 800980e:	659a      	str	r2, [r3, #88]	; 0x58
 8009810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009812:	4a0c      	ldr	r2, [pc, #48]	; (8009844 <prvInitialiseNewTask+0x148>)
 8009814:	65da      	str	r2, [r3, #92]	; 0x5c
 8009816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009818:	4a0b      	ldr	r2, [pc, #44]	; (8009848 <prvInitialiseNewTask+0x14c>)
 800981a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800981c:	683a      	ldr	r2, [r7, #0]
 800981e:	68f9      	ldr	r1, [r7, #12]
 8009820:	69b8      	ldr	r0, [r7, #24]
 8009822:	f001 faed 	bl	800ae00 <pxPortInitialiseStack>
 8009826:	4602      	mov	r2, r0
 8009828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800982c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982e:	2b00      	cmp	r3, #0
 8009830:	d002      	beq.n	8009838 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009836:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009838:	bf00      	nop
 800983a:	3720      	adds	r7, #32
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	200051c4 	.word	0x200051c4
 8009844:	2000522c 	.word	0x2000522c
 8009848:	20005294 	.word	0x20005294

0800984c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009854:	f001 fbe2 	bl	800b01c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009858:	4b2d      	ldr	r3, [pc, #180]	; (8009910 <prvAddNewTaskToReadyList+0xc4>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	3301      	adds	r3, #1
 800985e:	4a2c      	ldr	r2, [pc, #176]	; (8009910 <prvAddNewTaskToReadyList+0xc4>)
 8009860:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009862:	4b2c      	ldr	r3, [pc, #176]	; (8009914 <prvAddNewTaskToReadyList+0xc8>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d109      	bne.n	800987e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800986a:	4a2a      	ldr	r2, [pc, #168]	; (8009914 <prvAddNewTaskToReadyList+0xc8>)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009870:	4b27      	ldr	r3, [pc, #156]	; (8009910 <prvAddNewTaskToReadyList+0xc4>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d110      	bne.n	800989a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009878:	f000 fdbe 	bl	800a3f8 <prvInitialiseTaskLists>
 800987c:	e00d      	b.n	800989a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800987e:	4b26      	ldr	r3, [pc, #152]	; (8009918 <prvAddNewTaskToReadyList+0xcc>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d109      	bne.n	800989a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009886:	4b23      	ldr	r3, [pc, #140]	; (8009914 <prvAddNewTaskToReadyList+0xc8>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009890:	429a      	cmp	r2, r3
 8009892:	d802      	bhi.n	800989a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009894:	4a1f      	ldr	r2, [pc, #124]	; (8009914 <prvAddNewTaskToReadyList+0xc8>)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800989a:	4b20      	ldr	r3, [pc, #128]	; (800991c <prvAddNewTaskToReadyList+0xd0>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3301      	adds	r3, #1
 80098a0:	4a1e      	ldr	r2, [pc, #120]	; (800991c <prvAddNewTaskToReadyList+0xd0>)
 80098a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80098a4:	4b1d      	ldr	r3, [pc, #116]	; (800991c <prvAddNewTaskToReadyList+0xd0>)
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b0:	4b1b      	ldr	r3, [pc, #108]	; (8009920 <prvAddNewTaskToReadyList+0xd4>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d903      	bls.n	80098c0 <prvAddNewTaskToReadyList+0x74>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098bc:	4a18      	ldr	r2, [pc, #96]	; (8009920 <prvAddNewTaskToReadyList+0xd4>)
 80098be:	6013      	str	r3, [r2, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c4:	4613      	mov	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4a15      	ldr	r2, [pc, #84]	; (8009924 <prvAddNewTaskToReadyList+0xd8>)
 80098ce:	441a      	add	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	3304      	adds	r3, #4
 80098d4:	4619      	mov	r1, r3
 80098d6:	4610      	mov	r0, r2
 80098d8:	f7ff f8d7 	bl	8008a8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098dc:	f001 fbd2 	bl	800b084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80098e0:	4b0d      	ldr	r3, [pc, #52]	; (8009918 <prvAddNewTaskToReadyList+0xcc>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00e      	beq.n	8009906 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098e8:	4b0a      	ldr	r3, [pc, #40]	; (8009914 <prvAddNewTaskToReadyList+0xc8>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d207      	bcs.n	8009906 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098f6:	4b0c      	ldr	r3, [pc, #48]	; (8009928 <prvAddNewTaskToReadyList+0xdc>)
 80098f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009906:	bf00      	nop
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	2000144c 	.word	0x2000144c
 8009914:	20000f78 	.word	0x20000f78
 8009918:	20001458 	.word	0x20001458
 800991c:	20001468 	.word	0x20001468
 8009920:	20001454 	.word	0x20001454
 8009924:	20000f7c 	.word	0x20000f7c
 8009928:	e000ed04 	.word	0xe000ed04

0800992c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009934:	2300      	movs	r3, #0
 8009936:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d019      	beq.n	8009972 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800993e:	4b14      	ldr	r3, [pc, #80]	; (8009990 <vTaskDelay+0x64>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00c      	beq.n	8009960 <vTaskDelay+0x34>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994a:	b672      	cpsid	i
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	b662      	cpsie	i
 800995a:	60bb      	str	r3, [r7, #8]
}
 800995c:	bf00      	nop
 800995e:	e7fe      	b.n	800995e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009960:	f000 fa10 	bl	8009d84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009964:	2100      	movs	r1, #0
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fe9a 	bl	800a6a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800996c:	f000 fa18 	bl	8009da0 <xTaskResumeAll>
 8009970:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d107      	bne.n	8009988 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009978:	4b06      	ldr	r3, [pc, #24]	; (8009994 <vTaskDelay+0x68>)
 800997a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009988:	bf00      	nop
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	20001474 	.word	0x20001474
 8009994:	e000ed04 	.word	0xe000ed04

08009998 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80099a0:	f001 fb3c 	bl	800b01c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d102      	bne.n	80099b0 <vTaskSuspend+0x18>
 80099aa:	4b31      	ldr	r3, [pc, #196]	; (8009a70 <vTaskSuspend+0xd8>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	e000      	b.n	80099b2 <vTaskSuspend+0x1a>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	3304      	adds	r3, #4
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7ff f8c3 	bl	8008b44 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d004      	beq.n	80099d0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	3318      	adds	r3, #24
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7ff f8ba 	bl	8008b44 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	3304      	adds	r3, #4
 80099d4:	4619      	mov	r1, r3
 80099d6:	4827      	ldr	r0, [pc, #156]	; (8009a74 <vTaskSuspend+0xdc>)
 80099d8:	f7ff f857 	bl	8008a8a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d103      	bne.n	80099f0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80099f0:	f001 fb48 	bl	800b084 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80099f4:	4b20      	ldr	r3, [pc, #128]	; (8009a78 <vTaskSuspend+0xe0>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d005      	beq.n	8009a08 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80099fc:	f001 fb0e 	bl	800b01c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009a00:	f000 fd9e 	bl	800a540 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009a04:	f001 fb3e 	bl	800b084 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009a08:	4b19      	ldr	r3, [pc, #100]	; (8009a70 <vTaskSuspend+0xd8>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d129      	bne.n	8009a66 <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 8009a12:	4b19      	ldr	r3, [pc, #100]	; (8009a78 <vTaskSuspend+0xe0>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d019      	beq.n	8009a4e <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009a1a:	4b18      	ldr	r3, [pc, #96]	; (8009a7c <vTaskSuspend+0xe4>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00c      	beq.n	8009a3c <vTaskSuspend+0xa4>
	__asm volatile
 8009a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a26:	b672      	cpsid	i
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	b662      	cpsie	i
 8009a36:	60bb      	str	r3, [r7, #8]
}
 8009a38:	bf00      	nop
 8009a3a:	e7fe      	b.n	8009a3a <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8009a3c:	4b10      	ldr	r3, [pc, #64]	; (8009a80 <vTaskSuspend+0xe8>)
 8009a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a4c:	e00b      	b.n	8009a66 <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009a4e:	4b09      	ldr	r3, [pc, #36]	; (8009a74 <vTaskSuspend+0xdc>)
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	4b0c      	ldr	r3, [pc, #48]	; (8009a84 <vTaskSuspend+0xec>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d103      	bne.n	8009a62 <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8009a5a:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <vTaskSuspend+0xd8>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	601a      	str	r2, [r3, #0]
	}
 8009a60:	e001      	b.n	8009a66 <vTaskSuspend+0xce>
					vTaskSwitchContext();
 8009a62:	f000 fb09 	bl	800a078 <vTaskSwitchContext>
	}
 8009a66:	bf00      	nop
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	20000f78 	.word	0x20000f78
 8009a74:	20001438 	.word	0x20001438
 8009a78:	20001458 	.word	0x20001458
 8009a7c:	20001474 	.word	0x20001474
 8009a80:	e000ed04 	.word	0xe000ed04
 8009a84:	2000144c 	.word	0x2000144c

08009a88 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009a90:	2300      	movs	r3, #0
 8009a92:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10c      	bne.n	8009ab8 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa2:	b672      	cpsid	i
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	b662      	cpsie	i
 8009ab2:	60fb      	str	r3, [r7, #12]
}
 8009ab4:	bf00      	nop
 8009ab6:	e7fe      	b.n	8009ab6 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	4a0a      	ldr	r2, [pc, #40]	; (8009ae8 <prvTaskIsTaskSuspended+0x60>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d10a      	bne.n	8009ad8 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac6:	4a09      	ldr	r2, [pc, #36]	; (8009aec <prvTaskIsTaskSuspended+0x64>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d005      	beq.n	8009ad8 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d101      	bne.n	8009ad8 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ad8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009ada:	4618      	mov	r0, r3
 8009adc:	371c      	adds	r7, #28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	20001438 	.word	0x20001438
 8009aec:	2000140c 	.word	0x2000140c

08009af0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10c      	bne.n	8009b1c <vTaskResume+0x2c>
	__asm volatile
 8009b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b06:	b672      	cpsid	i
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	b662      	cpsie	i
 8009b16:	60bb      	str	r3, [r7, #8]
}
 8009b18:	bf00      	nop
 8009b1a:	e7fe      	b.n	8009b1a <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8009b1c:	4b20      	ldr	r3, [pc, #128]	; (8009ba0 <vTaskResume+0xb0>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d038      	beq.n	8009b98 <vTaskResume+0xa8>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d035      	beq.n	8009b98 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8009b2c:	f001 fa76 	bl	800b01c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f7ff ffa9 	bl	8009a88 <prvTaskIsTaskSuspended>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d02b      	beq.n	8009b94 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	3304      	adds	r3, #4
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe ffff 	bl	8008b44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b4a:	4b16      	ldr	r3, [pc, #88]	; (8009ba4 <vTaskResume+0xb4>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d903      	bls.n	8009b5a <vTaskResume+0x6a>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b56:	4a13      	ldr	r2, [pc, #76]	; (8009ba4 <vTaskResume+0xb4>)
 8009b58:	6013      	str	r3, [r2, #0]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b5e:	4613      	mov	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4413      	add	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4a10      	ldr	r2, [pc, #64]	; (8009ba8 <vTaskResume+0xb8>)
 8009b68:	441a      	add	r2, r3
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	3304      	adds	r3, #4
 8009b6e:	4619      	mov	r1, r3
 8009b70:	4610      	mov	r0, r2
 8009b72:	f7fe ff8a 	bl	8008a8a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7a:	4b09      	ldr	r3, [pc, #36]	; (8009ba0 <vTaskResume+0xb0>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d307      	bcc.n	8009b94 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8009b84:	4b09      	ldr	r3, [pc, #36]	; (8009bac <vTaskResume+0xbc>)
 8009b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8009b94:	f001 fa76 	bl	800b084 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b98:	bf00      	nop
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20000f78 	.word	0x20000f78
 8009ba4:	20001454 	.word	0x20001454
 8009ba8:	20000f7c 	.word	0x20000f7c
 8009bac:	e000ed04 	.word	0xe000ed04

08009bb0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b08a      	sub	sp, #40	; 0x28
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d10c      	bne.n	8009be0 <xTaskResumeFromISR+0x30>
	__asm volatile
 8009bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bca:	b672      	cpsid	i
 8009bcc:	f383 8811 	msr	BASEPRI, r3
 8009bd0:	f3bf 8f6f 	isb	sy
 8009bd4:	f3bf 8f4f 	dsb	sy
 8009bd8:	b662      	cpsie	i
 8009bda:	61bb      	str	r3, [r7, #24]
}
 8009bdc:	bf00      	nop
 8009bde:	e7fe      	b.n	8009bde <xTaskResumeFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009be0:	f001 fb04 	bl	800b1ec <vPortValidateInterruptPriority>
	__asm volatile
 8009be4:	f3ef 8211 	mrs	r2, BASEPRI
 8009be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bec:	b672      	cpsid	i
 8009bee:	f383 8811 	msr	BASEPRI, r3
 8009bf2:	f3bf 8f6f 	isb	sy
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	b662      	cpsie	i
 8009bfc:	617a      	str	r2, [r7, #20]
 8009bfe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009c00:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c02:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009c04:	6a38      	ldr	r0, [r7, #32]
 8009c06:	f7ff ff3f 	bl	8009a88 <prvTaskIsTaskSuspended>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d030      	beq.n	8009c72 <xTaskResumeFromISR+0xc2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c10:	4b1d      	ldr	r3, [pc, #116]	; (8009c88 <xTaskResumeFromISR+0xd8>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d126      	bne.n	8009c66 <xTaskResumeFromISR+0xb6>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c1c:	4b1b      	ldr	r3, [pc, #108]	; (8009c8c <xTaskResumeFromISR+0xdc>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d301      	bcc.n	8009c2a <xTaskResumeFromISR+0x7a>
					{
						xYieldRequired = pdTRUE;
 8009c26:	2301      	movs	r3, #1
 8009c28:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fe ff88 	bl	8008b44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c34:	6a3b      	ldr	r3, [r7, #32]
 8009c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c38:	4b15      	ldr	r3, [pc, #84]	; (8009c90 <xTaskResumeFromISR+0xe0>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d903      	bls.n	8009c48 <xTaskResumeFromISR+0x98>
 8009c40:	6a3b      	ldr	r3, [r7, #32]
 8009c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c44:	4a12      	ldr	r2, [pc, #72]	; (8009c90 <xTaskResumeFromISR+0xe0>)
 8009c46:	6013      	str	r3, [r2, #0]
 8009c48:	6a3b      	ldr	r3, [r7, #32]
 8009c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4a0f      	ldr	r2, [pc, #60]	; (8009c94 <xTaskResumeFromISR+0xe4>)
 8009c56:	441a      	add	r2, r3
 8009c58:	6a3b      	ldr	r3, [r7, #32]
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	4610      	mov	r0, r2
 8009c60:	f7fe ff13 	bl	8008a8a <vListInsertEnd>
 8009c64:	e005      	b.n	8009c72 <xTaskResumeFromISR+0xc2>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009c66:	6a3b      	ldr	r3, [r7, #32]
 8009c68:	3318      	adds	r3, #24
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	480a      	ldr	r0, [pc, #40]	; (8009c98 <xTaskResumeFromISR+0xe8>)
 8009c6e:	f7fe ff0c 	bl	8008a8a <vListInsertEnd>
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f383 8811 	msr	BASEPRI, r3
}
 8009c7c:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3728      	adds	r7, #40	; 0x28
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	20001474 	.word	0x20001474
 8009c8c:	20000f78 	.word	0x20000f78
 8009c90:	20001454 	.word	0x20001454
 8009c94:	20000f7c 	.word	0x20000f7c
 8009c98:	2000140c 	.word	0x2000140c

08009c9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08a      	sub	sp, #40	; 0x28
 8009ca0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009caa:	463a      	mov	r2, r7
 8009cac:	1d39      	adds	r1, r7, #4
 8009cae:	f107 0308 	add.w	r3, r7, #8
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7fe fe88 	bl	80089c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009cb8:	6839      	ldr	r1, [r7, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	9202      	str	r2, [sp, #8]
 8009cc0:	9301      	str	r3, [sp, #4]
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	460a      	mov	r2, r1
 8009cca:	4926      	ldr	r1, [pc, #152]	; (8009d64 <vTaskStartScheduler+0xc8>)
 8009ccc:	4826      	ldr	r0, [pc, #152]	; (8009d68 <vTaskStartScheduler+0xcc>)
 8009cce:	f7ff fc6d 	bl	80095ac <xTaskCreateStatic>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	4a25      	ldr	r2, [pc, #148]	; (8009d6c <vTaskStartScheduler+0xd0>)
 8009cd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009cd8:	4b24      	ldr	r3, [pc, #144]	; (8009d6c <vTaskStartScheduler+0xd0>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d002      	beq.n	8009ce6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	617b      	str	r3, [r7, #20]
 8009ce4:	e001      	b.n	8009cea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d102      	bne.n	8009cf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009cf0:	f000 fd2a 	bl	800a748 <xTimerCreateTimerTask>
 8009cf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d11d      	bne.n	8009d38 <vTaskStartScheduler+0x9c>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	b672      	cpsid	i
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	b662      	cpsie	i
 8009d10:	613b      	str	r3, [r7, #16]
}
 8009d12:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d14:	4b16      	ldr	r3, [pc, #88]	; (8009d70 <vTaskStartScheduler+0xd4>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3354      	adds	r3, #84	; 0x54
 8009d1a:	4a16      	ldr	r2, [pc, #88]	; (8009d74 <vTaskStartScheduler+0xd8>)
 8009d1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009d1e:	4b16      	ldr	r3, [pc, #88]	; (8009d78 <vTaskStartScheduler+0xdc>)
 8009d20:	f04f 32ff 	mov.w	r2, #4294967295
 8009d24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009d26:	4b15      	ldr	r3, [pc, #84]	; (8009d7c <vTaskStartScheduler+0xe0>)
 8009d28:	2201      	movs	r2, #1
 8009d2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009d2c:	4b14      	ldr	r3, [pc, #80]	; (8009d80 <vTaskStartScheduler+0xe4>)
 8009d2e:	2200      	movs	r2, #0
 8009d30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009d32:	f001 f8f5 	bl	800af20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009d36:	e010      	b.n	8009d5a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3e:	d10c      	bne.n	8009d5a <vTaskStartScheduler+0xbe>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d44:	b672      	cpsid	i
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	b662      	cpsie	i
 8009d54:	60fb      	str	r3, [r7, #12]
}
 8009d56:	bf00      	nop
 8009d58:	e7fe      	b.n	8009d58 <vTaskStartScheduler+0xbc>
}
 8009d5a:	bf00      	nop
 8009d5c:	3718      	adds	r7, #24
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	0800c7c4 	.word	0x0800c7c4
 8009d68:	0800a3c9 	.word	0x0800a3c9
 8009d6c:	20001470 	.word	0x20001470
 8009d70:	20000f78 	.word	0x20000f78
 8009d74:	200000c0 	.word	0x200000c0
 8009d78:	2000146c 	.word	0x2000146c
 8009d7c:	20001458 	.word	0x20001458
 8009d80:	20001450 	.word	0x20001450

08009d84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d84:	b480      	push	{r7}
 8009d86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009d88:	4b04      	ldr	r3, [pc, #16]	; (8009d9c <vTaskSuspendAll+0x18>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	4a03      	ldr	r2, [pc, #12]	; (8009d9c <vTaskSuspendAll+0x18>)
 8009d90:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009d92:	bf00      	nop
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	20001474 	.word	0x20001474

08009da0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009daa:	2300      	movs	r3, #0
 8009dac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009dae:	4b43      	ldr	r3, [pc, #268]	; (8009ebc <xTaskResumeAll+0x11c>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10c      	bne.n	8009dd0 <xTaskResumeAll+0x30>
	__asm volatile
 8009db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dba:	b672      	cpsid	i
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	b662      	cpsie	i
 8009dca:	603b      	str	r3, [r7, #0]
}
 8009dcc:	bf00      	nop
 8009dce:	e7fe      	b.n	8009dce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009dd0:	f001 f924 	bl	800b01c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009dd4:	4b39      	ldr	r3, [pc, #228]	; (8009ebc <xTaskResumeAll+0x11c>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	4a38      	ldr	r2, [pc, #224]	; (8009ebc <xTaskResumeAll+0x11c>)
 8009ddc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dde:	4b37      	ldr	r3, [pc, #220]	; (8009ebc <xTaskResumeAll+0x11c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d162      	bne.n	8009eac <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009de6:	4b36      	ldr	r3, [pc, #216]	; (8009ec0 <xTaskResumeAll+0x120>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d05e      	beq.n	8009eac <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009dee:	e02f      	b.n	8009e50 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009df0:	4b34      	ldr	r3, [pc, #208]	; (8009ec4 <xTaskResumeAll+0x124>)
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	3318      	adds	r3, #24
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fe fea1 	bl	8008b44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3304      	adds	r3, #4
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fe fe9c 	bl	8008b44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e10:	4b2d      	ldr	r3, [pc, #180]	; (8009ec8 <xTaskResumeAll+0x128>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d903      	bls.n	8009e20 <xTaskResumeAll+0x80>
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1c:	4a2a      	ldr	r2, [pc, #168]	; (8009ec8 <xTaskResumeAll+0x128>)
 8009e1e:	6013      	str	r3, [r2, #0]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e24:	4613      	mov	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4a27      	ldr	r2, [pc, #156]	; (8009ecc <xTaskResumeAll+0x12c>)
 8009e2e:	441a      	add	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	3304      	adds	r3, #4
 8009e34:	4619      	mov	r1, r3
 8009e36:	4610      	mov	r0, r2
 8009e38:	f7fe fe27 	bl	8008a8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e40:	4b23      	ldr	r3, [pc, #140]	; (8009ed0 <xTaskResumeAll+0x130>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d302      	bcc.n	8009e50 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8009e4a:	4b22      	ldr	r3, [pc, #136]	; (8009ed4 <xTaskResumeAll+0x134>)
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e50:	4b1c      	ldr	r3, [pc, #112]	; (8009ec4 <xTaskResumeAll+0x124>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1cb      	bne.n	8009df0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009e5e:	f000 fb6f 	bl	800a540 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009e62:	4b1d      	ldr	r3, [pc, #116]	; (8009ed8 <xTaskResumeAll+0x138>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d010      	beq.n	8009e90 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009e6e:	f000 f847 	bl	8009f00 <xTaskIncrementTick>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d002      	beq.n	8009e7e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8009e78:	4b16      	ldr	r3, [pc, #88]	; (8009ed4 <xTaskResumeAll+0x134>)
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	3b01      	subs	r3, #1
 8009e82:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1f1      	bne.n	8009e6e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8009e8a:	4b13      	ldr	r3, [pc, #76]	; (8009ed8 <xTaskResumeAll+0x138>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009e90:	4b10      	ldr	r3, [pc, #64]	; (8009ed4 <xTaskResumeAll+0x134>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d009      	beq.n	8009eac <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e9c:	4b0f      	ldr	r3, [pc, #60]	; (8009edc <xTaskResumeAll+0x13c>)
 8009e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ea2:	601a      	str	r2, [r3, #0]
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009eac:	f001 f8ea 	bl	800b084 <vPortExitCritical>

	return xAlreadyYielded;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20001474 	.word	0x20001474
 8009ec0:	2000144c 	.word	0x2000144c
 8009ec4:	2000140c 	.word	0x2000140c
 8009ec8:	20001454 	.word	0x20001454
 8009ecc:	20000f7c 	.word	0x20000f7c
 8009ed0:	20000f78 	.word	0x20000f78
 8009ed4:	20001460 	.word	0x20001460
 8009ed8:	2000145c 	.word	0x2000145c
 8009edc:	e000ed04 	.word	0xe000ed04

08009ee0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009ee6:	4b05      	ldr	r3, [pc, #20]	; (8009efc <xTaskGetTickCount+0x1c>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009eec:	687b      	ldr	r3, [r7, #4]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	20001450 	.word	0x20001450

08009f00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f06:	2300      	movs	r3, #0
 8009f08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f0a:	4b50      	ldr	r3, [pc, #320]	; (800a04c <xTaskIncrementTick+0x14c>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f040 808b 	bne.w	800a02a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f14:	4b4e      	ldr	r3, [pc, #312]	; (800a050 <xTaskIncrementTick+0x150>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f1c:	4a4c      	ldr	r2, [pc, #304]	; (800a050 <xTaskIncrementTick+0x150>)
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d122      	bne.n	8009f6e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009f28:	4b4a      	ldr	r3, [pc, #296]	; (800a054 <xTaskIncrementTick+0x154>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00c      	beq.n	8009f4c <xTaskIncrementTick+0x4c>
	__asm volatile
 8009f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f36:	b672      	cpsid	i
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	b662      	cpsie	i
 8009f46:	603b      	str	r3, [r7, #0]
}
 8009f48:	bf00      	nop
 8009f4a:	e7fe      	b.n	8009f4a <xTaskIncrementTick+0x4a>
 8009f4c:	4b41      	ldr	r3, [pc, #260]	; (800a054 <xTaskIncrementTick+0x154>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	60fb      	str	r3, [r7, #12]
 8009f52:	4b41      	ldr	r3, [pc, #260]	; (800a058 <xTaskIncrementTick+0x158>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a3f      	ldr	r2, [pc, #252]	; (800a054 <xTaskIncrementTick+0x154>)
 8009f58:	6013      	str	r3, [r2, #0]
 8009f5a:	4a3f      	ldr	r2, [pc, #252]	; (800a058 <xTaskIncrementTick+0x158>)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	4b3e      	ldr	r3, [pc, #248]	; (800a05c <xTaskIncrementTick+0x15c>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	3301      	adds	r3, #1
 8009f66:	4a3d      	ldr	r2, [pc, #244]	; (800a05c <xTaskIncrementTick+0x15c>)
 8009f68:	6013      	str	r3, [r2, #0]
 8009f6a:	f000 fae9 	bl	800a540 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009f6e:	4b3c      	ldr	r3, [pc, #240]	; (800a060 <xTaskIncrementTick+0x160>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d349      	bcc.n	800a00c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f78:	4b36      	ldr	r3, [pc, #216]	; (800a054 <xTaskIncrementTick+0x154>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d104      	bne.n	8009f8c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f82:	4b37      	ldr	r3, [pc, #220]	; (800a060 <xTaskIncrementTick+0x160>)
 8009f84:	f04f 32ff 	mov.w	r2, #4294967295
 8009f88:	601a      	str	r2, [r3, #0]
					break;
 8009f8a:	e03f      	b.n	800a00c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f8c:	4b31      	ldr	r3, [pc, #196]	; (800a054 <xTaskIncrementTick+0x154>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d203      	bcs.n	8009fac <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009fa4:	4a2e      	ldr	r2, [pc, #184]	; (800a060 <xTaskIncrementTick+0x160>)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009faa:	e02f      	b.n	800a00c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	3304      	adds	r3, #4
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7fe fdc7 	bl	8008b44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d004      	beq.n	8009fc8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	3318      	adds	r3, #24
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fe fdbe 	bl	8008b44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fcc:	4b25      	ldr	r3, [pc, #148]	; (800a064 <xTaskIncrementTick+0x164>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d903      	bls.n	8009fdc <xTaskIncrementTick+0xdc>
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd8:	4a22      	ldr	r2, [pc, #136]	; (800a064 <xTaskIncrementTick+0x164>)
 8009fda:	6013      	str	r3, [r2, #0]
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4413      	add	r3, r2
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4a1f      	ldr	r2, [pc, #124]	; (800a068 <xTaskIncrementTick+0x168>)
 8009fea:	441a      	add	r2, r3
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	3304      	adds	r3, #4
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	4610      	mov	r0, r2
 8009ff4:	f7fe fd49 	bl	8008a8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ffc:	4b1b      	ldr	r3, [pc, #108]	; (800a06c <xTaskIncrementTick+0x16c>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a002:	429a      	cmp	r2, r3
 800a004:	d3b8      	bcc.n	8009f78 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a006:	2301      	movs	r3, #1
 800a008:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a00a:	e7b5      	b.n	8009f78 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a00c:	4b17      	ldr	r3, [pc, #92]	; (800a06c <xTaskIncrementTick+0x16c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a012:	4915      	ldr	r1, [pc, #84]	; (800a068 <xTaskIncrementTick+0x168>)
 800a014:	4613      	mov	r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	4413      	add	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	440b      	add	r3, r1
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d907      	bls.n	800a034 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800a024:	2301      	movs	r3, #1
 800a026:	617b      	str	r3, [r7, #20]
 800a028:	e004      	b.n	800a034 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a02a:	4b11      	ldr	r3, [pc, #68]	; (800a070 <xTaskIncrementTick+0x170>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	3301      	adds	r3, #1
 800a030:	4a0f      	ldr	r2, [pc, #60]	; (800a070 <xTaskIncrementTick+0x170>)
 800a032:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a034:	4b0f      	ldr	r3, [pc, #60]	; (800a074 <xTaskIncrementTick+0x174>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d001      	beq.n	800a040 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800a03c:	2301      	movs	r3, #1
 800a03e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a040:	697b      	ldr	r3, [r7, #20]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3718      	adds	r7, #24
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	20001474 	.word	0x20001474
 800a050:	20001450 	.word	0x20001450
 800a054:	20001404 	.word	0x20001404
 800a058:	20001408 	.word	0x20001408
 800a05c:	20001464 	.word	0x20001464
 800a060:	2000146c 	.word	0x2000146c
 800a064:	20001454 	.word	0x20001454
 800a068:	20000f7c 	.word	0x20000f7c
 800a06c:	20000f78 	.word	0x20000f78
 800a070:	2000145c 	.word	0x2000145c
 800a074:	20001460 	.word	0x20001460

0800a078 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a07e:	4b2b      	ldr	r3, [pc, #172]	; (800a12c <vTaskSwitchContext+0xb4>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d003      	beq.n	800a08e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a086:	4b2a      	ldr	r3, [pc, #168]	; (800a130 <vTaskSwitchContext+0xb8>)
 800a088:	2201      	movs	r2, #1
 800a08a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a08c:	e048      	b.n	800a120 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800a08e:	4b28      	ldr	r3, [pc, #160]	; (800a130 <vTaskSwitchContext+0xb8>)
 800a090:	2200      	movs	r2, #0
 800a092:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a094:	4b27      	ldr	r3, [pc, #156]	; (800a134 <vTaskSwitchContext+0xbc>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	60fb      	str	r3, [r7, #12]
 800a09a:	e012      	b.n	800a0c2 <vTaskSwitchContext+0x4a>
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d10c      	bne.n	800a0bc <vTaskSwitchContext+0x44>
	__asm volatile
 800a0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a6:	b672      	cpsid	i
 800a0a8:	f383 8811 	msr	BASEPRI, r3
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	b662      	cpsie	i
 800a0b6:	607b      	str	r3, [r7, #4]
}
 800a0b8:	bf00      	nop
 800a0ba:	e7fe      	b.n	800a0ba <vTaskSwitchContext+0x42>
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	60fb      	str	r3, [r7, #12]
 800a0c2:	491d      	ldr	r1, [pc, #116]	; (800a138 <vTaskSwitchContext+0xc0>)
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4413      	add	r3, r2
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	440b      	add	r3, r1
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0e2      	beq.n	800a09c <vTaskSwitchContext+0x24>
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4413      	add	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4a15      	ldr	r2, [pc, #84]	; (800a138 <vTaskSwitchContext+0xc0>)
 800a0e2:	4413      	add	r3, r2
 800a0e4:	60bb      	str	r3, [r7, #8]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	605a      	str	r2, [r3, #4]
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	685a      	ldr	r2, [r3, #4]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	3308      	adds	r3, #8
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d104      	bne.n	800a106 <vTaskSwitchContext+0x8e>
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	605a      	str	r2, [r3, #4]
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	4a0b      	ldr	r2, [pc, #44]	; (800a13c <vTaskSwitchContext+0xc4>)
 800a10e:	6013      	str	r3, [r2, #0]
 800a110:	4a08      	ldr	r2, [pc, #32]	; (800a134 <vTaskSwitchContext+0xbc>)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a116:	4b09      	ldr	r3, [pc, #36]	; (800a13c <vTaskSwitchContext+0xc4>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3354      	adds	r3, #84	; 0x54
 800a11c:	4a08      	ldr	r2, [pc, #32]	; (800a140 <vTaskSwitchContext+0xc8>)
 800a11e:	6013      	str	r3, [r2, #0]
}
 800a120:	bf00      	nop
 800a122:	3714      	adds	r7, #20
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	20001474 	.word	0x20001474
 800a130:	20001460 	.word	0x20001460
 800a134:	20001454 	.word	0x20001454
 800a138:	20000f7c 	.word	0x20000f7c
 800a13c:	20000f78 	.word	0x20000f78
 800a140:	200000c0 	.word	0x200000c0

0800a144 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10c      	bne.n	800a16e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a158:	b672      	cpsid	i
 800a15a:	f383 8811 	msr	BASEPRI, r3
 800a15e:	f3bf 8f6f 	isb	sy
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	b662      	cpsie	i
 800a168:	60fb      	str	r3, [r7, #12]
}
 800a16a:	bf00      	nop
 800a16c:	e7fe      	b.n	800a16c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a16e:	4b07      	ldr	r3, [pc, #28]	; (800a18c <vTaskPlaceOnEventList+0x48>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3318      	adds	r3, #24
 800a174:	4619      	mov	r1, r3
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f7fe fcab 	bl	8008ad2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a17c:	2101      	movs	r1, #1
 800a17e:	6838      	ldr	r0, [r7, #0]
 800a180:	f000 fa8e 	bl	800a6a0 <prvAddCurrentTaskToDelayedList>
}
 800a184:	bf00      	nop
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	20000f78 	.word	0x20000f78

0800a190 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10c      	bne.n	800a1bc <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	b672      	cpsid	i
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	b662      	cpsie	i
 800a1b6:	617b      	str	r3, [r7, #20]
}
 800a1b8:	bf00      	nop
 800a1ba:	e7fe      	b.n	800a1ba <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1bc:	4b0a      	ldr	r3, [pc, #40]	; (800a1e8 <vTaskPlaceOnEventListRestricted+0x58>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3318      	adds	r3, #24
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f7fe fc60 	bl	8008a8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d002      	beq.n	800a1d6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800a1d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	68b8      	ldr	r0, [r7, #8]
 800a1da:	f000 fa61 	bl	800a6a0 <prvAddCurrentTaskToDelayedList>
	}
 800a1de:	bf00      	nop
 800a1e0:	3718      	adds	r7, #24
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	20000f78 	.word	0x20000f78

0800a1ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10c      	bne.n	800a21c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a206:	b672      	cpsid	i
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	b662      	cpsie	i
 800a216:	60fb      	str	r3, [r7, #12]
}
 800a218:	bf00      	nop
 800a21a:	e7fe      	b.n	800a21a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	3318      	adds	r3, #24
 800a220:	4618      	mov	r0, r3
 800a222:	f7fe fc8f 	bl	8008b44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a226:	4b1e      	ldr	r3, [pc, #120]	; (800a2a0 <xTaskRemoveFromEventList+0xb4>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d11d      	bne.n	800a26a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	3304      	adds	r3, #4
 800a232:	4618      	mov	r0, r3
 800a234:	f7fe fc86 	bl	8008b44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a23c:	4b19      	ldr	r3, [pc, #100]	; (800a2a4 <xTaskRemoveFromEventList+0xb8>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	429a      	cmp	r2, r3
 800a242:	d903      	bls.n	800a24c <xTaskRemoveFromEventList+0x60>
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a248:	4a16      	ldr	r2, [pc, #88]	; (800a2a4 <xTaskRemoveFromEventList+0xb8>)
 800a24a:	6013      	str	r3, [r2, #0]
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a250:	4613      	mov	r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	4413      	add	r3, r2
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4a13      	ldr	r2, [pc, #76]	; (800a2a8 <xTaskRemoveFromEventList+0xbc>)
 800a25a:	441a      	add	r2, r3
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	3304      	adds	r3, #4
 800a260:	4619      	mov	r1, r3
 800a262:	4610      	mov	r0, r2
 800a264:	f7fe fc11 	bl	8008a8a <vListInsertEnd>
 800a268:	e005      	b.n	800a276 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	3318      	adds	r3, #24
 800a26e:	4619      	mov	r1, r3
 800a270:	480e      	ldr	r0, [pc, #56]	; (800a2ac <xTaskRemoveFromEventList+0xc0>)
 800a272:	f7fe fc0a 	bl	8008a8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a27a:	4b0d      	ldr	r3, [pc, #52]	; (800a2b0 <xTaskRemoveFromEventList+0xc4>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a280:	429a      	cmp	r2, r3
 800a282:	d905      	bls.n	800a290 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a284:	2301      	movs	r3, #1
 800a286:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a288:	4b0a      	ldr	r3, [pc, #40]	; (800a2b4 <xTaskRemoveFromEventList+0xc8>)
 800a28a:	2201      	movs	r2, #1
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	e001      	b.n	800a294 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800a290:	2300      	movs	r3, #0
 800a292:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a294:	697b      	ldr	r3, [r7, #20]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3718      	adds	r7, #24
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20001474 	.word	0x20001474
 800a2a4:	20001454 	.word	0x20001454
 800a2a8:	20000f7c 	.word	0x20000f7c
 800a2ac:	2000140c 	.word	0x2000140c
 800a2b0:	20000f78 	.word	0x20000f78
 800a2b4:	20001460 	.word	0x20001460

0800a2b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a2c0:	4b06      	ldr	r3, [pc, #24]	; (800a2dc <vTaskInternalSetTimeOutState+0x24>)
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a2c8:	4b05      	ldr	r3, [pc, #20]	; (800a2e0 <vTaskInternalSetTimeOutState+0x28>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	605a      	str	r2, [r3, #4]
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	20001464 	.word	0x20001464
 800a2e0:	20001450 	.word	0x20001450

0800a2e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b088      	sub	sp, #32
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10c      	bne.n	800a30e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	b672      	cpsid	i
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	b662      	cpsie	i
 800a308:	613b      	str	r3, [r7, #16]
}
 800a30a:	bf00      	nop
 800a30c:	e7fe      	b.n	800a30c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10c      	bne.n	800a32e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a318:	b672      	cpsid	i
 800a31a:	f383 8811 	msr	BASEPRI, r3
 800a31e:	f3bf 8f6f 	isb	sy
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	b662      	cpsie	i
 800a328:	60fb      	str	r3, [r7, #12]
}
 800a32a:	bf00      	nop
 800a32c:	e7fe      	b.n	800a32c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a32e:	f000 fe75 	bl	800b01c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a332:	4b1d      	ldr	r3, [pc, #116]	; (800a3a8 <xTaskCheckForTimeOut+0xc4>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	69ba      	ldr	r2, [r7, #24]
 800a33e:	1ad3      	subs	r3, r2, r3
 800a340:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34a:	d102      	bne.n	800a352 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a34c:	2300      	movs	r3, #0
 800a34e:	61fb      	str	r3, [r7, #28]
 800a350:	e023      	b.n	800a39a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	4b15      	ldr	r3, [pc, #84]	; (800a3ac <xTaskCheckForTimeOut+0xc8>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d007      	beq.n	800a36e <xTaskCheckForTimeOut+0x8a>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	69ba      	ldr	r2, [r7, #24]
 800a364:	429a      	cmp	r2, r3
 800a366:	d302      	bcc.n	800a36e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a368:	2301      	movs	r3, #1
 800a36a:	61fb      	str	r3, [r7, #28]
 800a36c:	e015      	b.n	800a39a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	697a      	ldr	r2, [r7, #20]
 800a374:	429a      	cmp	r2, r3
 800a376:	d20b      	bcs.n	800a390 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	1ad2      	subs	r2, r2, r3
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f7ff ff97 	bl	800a2b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a38a:	2300      	movs	r3, #0
 800a38c:	61fb      	str	r3, [r7, #28]
 800a38e:	e004      	b.n	800a39a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a396:	2301      	movs	r3, #1
 800a398:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a39a:	f000 fe73 	bl	800b084 <vPortExitCritical>

	return xReturn;
 800a39e:	69fb      	ldr	r3, [r7, #28]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3720      	adds	r7, #32
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	20001450 	.word	0x20001450
 800a3ac:	20001464 	.word	0x20001464

0800a3b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a3b4:	4b03      	ldr	r3, [pc, #12]	; (800a3c4 <vTaskMissedYield+0x14>)
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	601a      	str	r2, [r3, #0]
}
 800a3ba:	bf00      	nop
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr
 800a3c4:	20001460 	.word	0x20001460

0800a3c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a3d0:	f000 f852 	bl	800a478 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a3d4:	4b06      	ldr	r3, [pc, #24]	; (800a3f0 <prvIdleTask+0x28>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d9f9      	bls.n	800a3d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a3dc:	4b05      	ldr	r3, [pc, #20]	; (800a3f4 <prvIdleTask+0x2c>)
 800a3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e2:	601a      	str	r2, [r3, #0]
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a3ec:	e7f0      	b.n	800a3d0 <prvIdleTask+0x8>
 800a3ee:	bf00      	nop
 800a3f0:	20000f7c 	.word	0x20000f7c
 800a3f4:	e000ed04 	.word	0xe000ed04

0800a3f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3fe:	2300      	movs	r3, #0
 800a400:	607b      	str	r3, [r7, #4]
 800a402:	e00c      	b.n	800a41e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	4613      	mov	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	4413      	add	r3, r2
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	4a12      	ldr	r2, [pc, #72]	; (800a458 <prvInitialiseTaskLists+0x60>)
 800a410:	4413      	add	r3, r2
 800a412:	4618      	mov	r0, r3
 800a414:	f7fe fb0c 	bl	8008a30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	3301      	adds	r3, #1
 800a41c:	607b      	str	r3, [r7, #4]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2b37      	cmp	r3, #55	; 0x37
 800a422:	d9ef      	bls.n	800a404 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a424:	480d      	ldr	r0, [pc, #52]	; (800a45c <prvInitialiseTaskLists+0x64>)
 800a426:	f7fe fb03 	bl	8008a30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a42a:	480d      	ldr	r0, [pc, #52]	; (800a460 <prvInitialiseTaskLists+0x68>)
 800a42c:	f7fe fb00 	bl	8008a30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a430:	480c      	ldr	r0, [pc, #48]	; (800a464 <prvInitialiseTaskLists+0x6c>)
 800a432:	f7fe fafd 	bl	8008a30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a436:	480c      	ldr	r0, [pc, #48]	; (800a468 <prvInitialiseTaskLists+0x70>)
 800a438:	f7fe fafa 	bl	8008a30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a43c:	480b      	ldr	r0, [pc, #44]	; (800a46c <prvInitialiseTaskLists+0x74>)
 800a43e:	f7fe faf7 	bl	8008a30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a442:	4b0b      	ldr	r3, [pc, #44]	; (800a470 <prvInitialiseTaskLists+0x78>)
 800a444:	4a05      	ldr	r2, [pc, #20]	; (800a45c <prvInitialiseTaskLists+0x64>)
 800a446:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a448:	4b0a      	ldr	r3, [pc, #40]	; (800a474 <prvInitialiseTaskLists+0x7c>)
 800a44a:	4a05      	ldr	r2, [pc, #20]	; (800a460 <prvInitialiseTaskLists+0x68>)
 800a44c:	601a      	str	r2, [r3, #0]
}
 800a44e:	bf00      	nop
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	20000f7c 	.word	0x20000f7c
 800a45c:	200013dc 	.word	0x200013dc
 800a460:	200013f0 	.word	0x200013f0
 800a464:	2000140c 	.word	0x2000140c
 800a468:	20001420 	.word	0x20001420
 800a46c:	20001438 	.word	0x20001438
 800a470:	20001404 	.word	0x20001404
 800a474:	20001408 	.word	0x20001408

0800a478 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a47e:	e019      	b.n	800a4b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a480:	f000 fdcc 	bl	800b01c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a484:	4b10      	ldr	r3, [pc, #64]	; (800a4c8 <prvCheckTasksWaitingTermination+0x50>)
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	3304      	adds	r3, #4
 800a490:	4618      	mov	r0, r3
 800a492:	f7fe fb57 	bl	8008b44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a496:	4b0d      	ldr	r3, [pc, #52]	; (800a4cc <prvCheckTasksWaitingTermination+0x54>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	3b01      	subs	r3, #1
 800a49c:	4a0b      	ldr	r2, [pc, #44]	; (800a4cc <prvCheckTasksWaitingTermination+0x54>)
 800a49e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a4a0:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <prvCheckTasksWaitingTermination+0x58>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	4a0a      	ldr	r2, [pc, #40]	; (800a4d0 <prvCheckTasksWaitingTermination+0x58>)
 800a4a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a4aa:	f000 fdeb 	bl	800b084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f810 	bl	800a4d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a4b4:	4b06      	ldr	r3, [pc, #24]	; (800a4d0 <prvCheckTasksWaitingTermination+0x58>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1e1      	bne.n	800a480 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a4bc:	bf00      	nop
 800a4be:	bf00      	nop
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	20001420 	.word	0x20001420
 800a4cc:	2000144c 	.word	0x2000144c
 800a4d0:	20001434 	.word	0x20001434

0800a4d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	3354      	adds	r3, #84	; 0x54
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f001 f9d7 	bl	800b894 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d108      	bne.n	800a502 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f000 ff87 	bl	800b408 <vPortFree>
				vPortFree( pxTCB );
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 ff84 	bl	800b408 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a500:	e01a      	b.n	800a538 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d103      	bne.n	800a514 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 ff7b 	bl	800b408 <vPortFree>
	}
 800a512:	e011      	b.n	800a538 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d00c      	beq.n	800a538 <prvDeleteTCB+0x64>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	b672      	cpsid	i
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	b662      	cpsie	i
 800a532:	60fb      	str	r3, [r7, #12]
}
 800a534:	bf00      	nop
 800a536:	e7fe      	b.n	800a536 <prvDeleteTCB+0x62>
	}
 800a538:	bf00      	nop
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a546:	4b0c      	ldr	r3, [pc, #48]	; (800a578 <prvResetNextTaskUnblockTime+0x38>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d104      	bne.n	800a55a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a550:	4b0a      	ldr	r3, [pc, #40]	; (800a57c <prvResetNextTaskUnblockTime+0x3c>)
 800a552:	f04f 32ff 	mov.w	r2, #4294967295
 800a556:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a558:	e008      	b.n	800a56c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a55a:	4b07      	ldr	r3, [pc, #28]	; (800a578 <prvResetNextTaskUnblockTime+0x38>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	4a04      	ldr	r2, [pc, #16]	; (800a57c <prvResetNextTaskUnblockTime+0x3c>)
 800a56a:	6013      	str	r3, [r2, #0]
}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	20001404 	.word	0x20001404
 800a57c:	2000146c 	.word	0x2000146c

0800a580 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a586:	4b0b      	ldr	r3, [pc, #44]	; (800a5b4 <xTaskGetSchedulerState+0x34>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d102      	bne.n	800a594 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a58e:	2301      	movs	r3, #1
 800a590:	607b      	str	r3, [r7, #4]
 800a592:	e008      	b.n	800a5a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a594:	4b08      	ldr	r3, [pc, #32]	; (800a5b8 <xTaskGetSchedulerState+0x38>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d102      	bne.n	800a5a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a59c:	2302      	movs	r3, #2
 800a59e:	607b      	str	r3, [r7, #4]
 800a5a0:	e001      	b.n	800a5a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a5a6:	687b      	ldr	r3, [r7, #4]
	}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr
 800a5b4:	20001458 	.word	0x20001458
 800a5b8:	20001474 	.word	0x20001474

0800a5bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b086      	sub	sp, #24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d05a      	beq.n	800a688 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a5d2:	4b30      	ldr	r3, [pc, #192]	; (800a694 <xTaskPriorityDisinherit+0xd8>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	693a      	ldr	r2, [r7, #16]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d00c      	beq.n	800a5f6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	b672      	cpsid	i
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	b662      	cpsie	i
 800a5f0:	60fb      	str	r3, [r7, #12]
}
 800a5f2:	bf00      	nop
 800a5f4:	e7fe      	b.n	800a5f4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10c      	bne.n	800a618 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a602:	b672      	cpsid	i
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	b662      	cpsie	i
 800a612:	60bb      	str	r3, [r7, #8]
}
 800a614:	bf00      	nop
 800a616:	e7fe      	b.n	800a616 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a61c:	1e5a      	subs	r2, r3, #1
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d02c      	beq.n	800a688 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a632:	2b00      	cmp	r3, #0
 800a634:	d128      	bne.n	800a688 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	3304      	adds	r3, #4
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7fe fa82 	bl	8008b44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a658:	4b0f      	ldr	r3, [pc, #60]	; (800a698 <xTaskPriorityDisinherit+0xdc>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d903      	bls.n	800a668 <xTaskPriorityDisinherit+0xac>
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a664:	4a0c      	ldr	r2, [pc, #48]	; (800a698 <xTaskPriorityDisinherit+0xdc>)
 800a666:	6013      	str	r3, [r2, #0]
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66c:	4613      	mov	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4413      	add	r3, r2
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	4a09      	ldr	r2, [pc, #36]	; (800a69c <xTaskPriorityDisinherit+0xe0>)
 800a676:	441a      	add	r2, r3
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	3304      	adds	r3, #4
 800a67c:	4619      	mov	r1, r3
 800a67e:	4610      	mov	r0, r2
 800a680:	f7fe fa03 	bl	8008a8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a684:	2301      	movs	r3, #1
 800a686:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a688:	697b      	ldr	r3, [r7, #20]
	}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3718      	adds	r7, #24
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	20000f78 	.word	0x20000f78
 800a698:	20001454 	.word	0x20001454
 800a69c:	20000f7c 	.word	0x20000f7c

0800a6a0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a6aa:	4b21      	ldr	r3, [pc, #132]	; (800a730 <prvAddCurrentTaskToDelayedList+0x90>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6b0:	4b20      	ldr	r3, [pc, #128]	; (800a734 <prvAddCurrentTaskToDelayedList+0x94>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7fe fa44 	bl	8008b44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c2:	d10a      	bne.n	800a6da <prvAddCurrentTaskToDelayedList+0x3a>
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d007      	beq.n	800a6da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6ca:	4b1a      	ldr	r3, [pc, #104]	; (800a734 <prvAddCurrentTaskToDelayedList+0x94>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	4819      	ldr	r0, [pc, #100]	; (800a738 <prvAddCurrentTaskToDelayedList+0x98>)
 800a6d4:	f7fe f9d9 	bl	8008a8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a6d8:	e026      	b.n	800a728 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4413      	add	r3, r2
 800a6e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a6e2:	4b14      	ldr	r3, [pc, #80]	; (800a734 <prvAddCurrentTaskToDelayedList+0x94>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d209      	bcs.n	800a706 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6f2:	4b12      	ldr	r3, [pc, #72]	; (800a73c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	4b0f      	ldr	r3, [pc, #60]	; (800a734 <prvAddCurrentTaskToDelayedList+0x94>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	4610      	mov	r0, r2
 800a700:	f7fe f9e7 	bl	8008ad2 <vListInsert>
}
 800a704:	e010      	b.n	800a728 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a706:	4b0e      	ldr	r3, [pc, #56]	; (800a740 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	4b0a      	ldr	r3, [pc, #40]	; (800a734 <prvAddCurrentTaskToDelayedList+0x94>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3304      	adds	r3, #4
 800a710:	4619      	mov	r1, r3
 800a712:	4610      	mov	r0, r2
 800a714:	f7fe f9dd 	bl	8008ad2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a718:	4b0a      	ldr	r3, [pc, #40]	; (800a744 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	68ba      	ldr	r2, [r7, #8]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d202      	bcs.n	800a728 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a722:	4a08      	ldr	r2, [pc, #32]	; (800a744 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	6013      	str	r3, [r2, #0]
}
 800a728:	bf00      	nop
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	20001450 	.word	0x20001450
 800a734:	20000f78 	.word	0x20000f78
 800a738:	20001438 	.word	0x20001438
 800a73c:	20001408 	.word	0x20001408
 800a740:	20001404 	.word	0x20001404
 800a744:	2000146c 	.word	0x2000146c

0800a748 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b08a      	sub	sp, #40	; 0x28
 800a74c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a74e:	2300      	movs	r3, #0
 800a750:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a752:	f000 fb15 	bl	800ad80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a756:	4b1d      	ldr	r3, [pc, #116]	; (800a7cc <xTimerCreateTimerTask+0x84>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d021      	beq.n	800a7a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a75e:	2300      	movs	r3, #0
 800a760:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a762:	2300      	movs	r3, #0
 800a764:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a766:	1d3a      	adds	r2, r7, #4
 800a768:	f107 0108 	add.w	r1, r7, #8
 800a76c:	f107 030c 	add.w	r3, r7, #12
 800a770:	4618      	mov	r0, r3
 800a772:	f7fe f943 	bl	80089fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a776:	6879      	ldr	r1, [r7, #4]
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	9202      	str	r2, [sp, #8]
 800a77e:	9301      	str	r3, [sp, #4]
 800a780:	2302      	movs	r3, #2
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	2300      	movs	r3, #0
 800a786:	460a      	mov	r2, r1
 800a788:	4911      	ldr	r1, [pc, #68]	; (800a7d0 <xTimerCreateTimerTask+0x88>)
 800a78a:	4812      	ldr	r0, [pc, #72]	; (800a7d4 <xTimerCreateTimerTask+0x8c>)
 800a78c:	f7fe ff0e 	bl	80095ac <xTaskCreateStatic>
 800a790:	4603      	mov	r3, r0
 800a792:	4a11      	ldr	r2, [pc, #68]	; (800a7d8 <xTimerCreateTimerTask+0x90>)
 800a794:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a796:	4b10      	ldr	r3, [pc, #64]	; (800a7d8 <xTimerCreateTimerTask+0x90>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10c      	bne.n	800a7c2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800a7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ac:	b672      	cpsid	i
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
 800a7ba:	b662      	cpsie	i
 800a7bc:	613b      	str	r3, [r7, #16]
}
 800a7be:	bf00      	nop
 800a7c0:	e7fe      	b.n	800a7c0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a7c2:	697b      	ldr	r3, [r7, #20]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	200014a8 	.word	0x200014a8
 800a7d0:	0800c7cc 	.word	0x0800c7cc
 800a7d4:	0800a919 	.word	0x0800a919
 800a7d8:	200014ac 	.word	0x200014ac

0800a7dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b08a      	sub	sp, #40	; 0x28
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
 800a7e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d10c      	bne.n	800a80e <xTimerGenericCommand+0x32>
	__asm volatile
 800a7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f8:	b672      	cpsid	i
 800a7fa:	f383 8811 	msr	BASEPRI, r3
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f3bf 8f4f 	dsb	sy
 800a806:	b662      	cpsie	i
 800a808:	623b      	str	r3, [r7, #32]
}
 800a80a:	bf00      	nop
 800a80c:	e7fe      	b.n	800a80c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a80e:	4b1a      	ldr	r3, [pc, #104]	; (800a878 <xTimerGenericCommand+0x9c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d02a      	beq.n	800a86c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2b05      	cmp	r3, #5
 800a826:	dc18      	bgt.n	800a85a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a828:	f7ff feaa 	bl	800a580 <xTaskGetSchedulerState>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d109      	bne.n	800a846 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a832:	4b11      	ldr	r3, [pc, #68]	; (800a878 <xTimerGenericCommand+0x9c>)
 800a834:	6818      	ldr	r0, [r3, #0]
 800a836:	f107 0110 	add.w	r1, r7, #16
 800a83a:	2300      	movs	r3, #0
 800a83c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a83e:	f7fe fabb 	bl	8008db8 <xQueueGenericSend>
 800a842:	6278      	str	r0, [r7, #36]	; 0x24
 800a844:	e012      	b.n	800a86c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a846:	4b0c      	ldr	r3, [pc, #48]	; (800a878 <xTimerGenericCommand+0x9c>)
 800a848:	6818      	ldr	r0, [r3, #0]
 800a84a:	f107 0110 	add.w	r1, r7, #16
 800a84e:	2300      	movs	r3, #0
 800a850:	2200      	movs	r2, #0
 800a852:	f7fe fab1 	bl	8008db8 <xQueueGenericSend>
 800a856:	6278      	str	r0, [r7, #36]	; 0x24
 800a858:	e008      	b.n	800a86c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a85a:	4b07      	ldr	r3, [pc, #28]	; (800a878 <xTimerGenericCommand+0x9c>)
 800a85c:	6818      	ldr	r0, [r3, #0]
 800a85e:	f107 0110 	add.w	r1, r7, #16
 800a862:	2300      	movs	r3, #0
 800a864:	683a      	ldr	r2, [r7, #0]
 800a866:	f7fe fbad 	bl	8008fc4 <xQueueGenericSendFromISR>
 800a86a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3728      	adds	r7, #40	; 0x28
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	200014a8 	.word	0x200014a8

0800a87c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b088      	sub	sp, #32
 800a880:	af02      	add	r7, sp, #8
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a886:	4b23      	ldr	r3, [pc, #140]	; (800a914 <prvProcessExpiredTimer+0x98>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	3304      	adds	r3, #4
 800a894:	4618      	mov	r0, r3
 800a896:	f7fe f955 	bl	8008b44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8a0:	f003 0304 	and.w	r3, r3, #4
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d024      	beq.n	800a8f2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	699a      	ldr	r2, [r3, #24]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	18d1      	adds	r1, r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	6978      	ldr	r0, [r7, #20]
 800a8b6:	f000 f8d3 	bl	800aa60 <prvInsertTimerInActiveList>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d021      	beq.n	800a904 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	6978      	ldr	r0, [r7, #20]
 800a8cc:	f7ff ff86 	bl	800a7dc <xTimerGenericCommand>
 800a8d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d115      	bne.n	800a904 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800a8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8dc:	b672      	cpsid	i
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	b662      	cpsie	i
 800a8ec:	60fb      	str	r3, [r7, #12]
}
 800a8ee:	bf00      	nop
 800a8f0:	e7fe      	b.n	800a8f0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8f8:	f023 0301 	bic.w	r3, r3, #1
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	6a1b      	ldr	r3, [r3, #32]
 800a908:	6978      	ldr	r0, [r7, #20]
 800a90a:	4798      	blx	r3
}
 800a90c:	bf00      	nop
 800a90e:	3718      	adds	r7, #24
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	200014a0 	.word	0x200014a0

0800a918 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a920:	f107 0308 	add.w	r3, r7, #8
 800a924:	4618      	mov	r0, r3
 800a926:	f000 f857 	bl	800a9d8 <prvGetNextExpireTime>
 800a92a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	4619      	mov	r1, r3
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f000 f803 	bl	800a93c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a936:	f000 f8d5 	bl	800aae4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a93a:	e7f1      	b.n	800a920 <prvTimerTask+0x8>

0800a93c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a946:	f7ff fa1d 	bl	8009d84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a94a:	f107 0308 	add.w	r3, r7, #8
 800a94e:	4618      	mov	r0, r3
 800a950:	f000 f866 	bl	800aa20 <prvSampleTimeNow>
 800a954:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d130      	bne.n	800a9be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10a      	bne.n	800a978 <prvProcessTimerOrBlockTask+0x3c>
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	429a      	cmp	r2, r3
 800a968:	d806      	bhi.n	800a978 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a96a:	f7ff fa19 	bl	8009da0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a96e:	68f9      	ldr	r1, [r7, #12]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f7ff ff83 	bl	800a87c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a976:	e024      	b.n	800a9c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d008      	beq.n	800a990 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a97e:	4b13      	ldr	r3, [pc, #76]	; (800a9cc <prvProcessTimerOrBlockTask+0x90>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d101      	bne.n	800a98c <prvProcessTimerOrBlockTask+0x50>
 800a988:	2301      	movs	r3, #1
 800a98a:	e000      	b.n	800a98e <prvProcessTimerOrBlockTask+0x52>
 800a98c:	2300      	movs	r3, #0
 800a98e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a990:	4b0f      	ldr	r3, [pc, #60]	; (800a9d0 <prvProcessTimerOrBlockTask+0x94>)
 800a992:	6818      	ldr	r0, [r3, #0]
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	683a      	ldr	r2, [r7, #0]
 800a99c:	4619      	mov	r1, r3
 800a99e:	f7fe fdd1 	bl	8009544 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a9a2:	f7ff f9fd 	bl	8009da0 <xTaskResumeAll>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10a      	bne.n	800a9c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a9ac:	4b09      	ldr	r3, [pc, #36]	; (800a9d4 <prvProcessTimerOrBlockTask+0x98>)
 800a9ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9b2:	601a      	str	r2, [r3, #0]
 800a9b4:	f3bf 8f4f 	dsb	sy
 800a9b8:	f3bf 8f6f 	isb	sy
}
 800a9bc:	e001      	b.n	800a9c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a9be:	f7ff f9ef 	bl	8009da0 <xTaskResumeAll>
}
 800a9c2:	bf00      	nop
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	200014a4 	.word	0x200014a4
 800a9d0:	200014a8 	.word	0x200014a8
 800a9d4:	e000ed04 	.word	0xe000ed04

0800a9d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a9e0:	4b0e      	ldr	r3, [pc, #56]	; (800aa1c <prvGetNextExpireTime+0x44>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d101      	bne.n	800a9ee <prvGetNextExpireTime+0x16>
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	e000      	b.n	800a9f0 <prvGetNextExpireTime+0x18>
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d105      	bne.n	800aa08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a9fc:	4b07      	ldr	r3, [pc, #28]	; (800aa1c <prvGetNextExpireTime+0x44>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	60fb      	str	r3, [r7, #12]
 800aa06:	e001      	b.n	800aa0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	200014a0 	.word	0x200014a0

0800aa20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aa28:	f7ff fa5a 	bl	8009ee0 <xTaskGetTickCount>
 800aa2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aa2e:	4b0b      	ldr	r3, [pc, #44]	; (800aa5c <prvSampleTimeNow+0x3c>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d205      	bcs.n	800aa44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aa38:	f000 f93c 	bl	800acb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	601a      	str	r2, [r3, #0]
 800aa42:	e002      	b.n	800aa4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aa4a:	4a04      	ldr	r2, [pc, #16]	; (800aa5c <prvSampleTimeNow+0x3c>)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aa50:	68fb      	ldr	r3, [r7, #12]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	200014b0 	.word	0x200014b0

0800aa60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
 800aa6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aa7e:	68ba      	ldr	r2, [r7, #8]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d812      	bhi.n	800aaac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	1ad2      	subs	r2, r2, r3
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	699b      	ldr	r3, [r3, #24]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d302      	bcc.n	800aa9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aa94:	2301      	movs	r3, #1
 800aa96:	617b      	str	r3, [r7, #20]
 800aa98:	e01b      	b.n	800aad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aa9a:	4b10      	ldr	r3, [pc, #64]	; (800aadc <prvInsertTimerInActiveList+0x7c>)
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	4610      	mov	r0, r2
 800aaa6:	f7fe f814 	bl	8008ad2 <vListInsert>
 800aaaa:	e012      	b.n	800aad2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d206      	bcs.n	800aac2 <prvInsertTimerInActiveList+0x62>
 800aab4:	68ba      	ldr	r2, [r7, #8]
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d302      	bcc.n	800aac2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aabc:	2301      	movs	r3, #1
 800aabe:	617b      	str	r3, [r7, #20]
 800aac0:	e007      	b.n	800aad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aac2:	4b07      	ldr	r3, [pc, #28]	; (800aae0 <prvInsertTimerInActiveList+0x80>)
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	3304      	adds	r3, #4
 800aaca:	4619      	mov	r1, r3
 800aacc:	4610      	mov	r0, r2
 800aace:	f7fe f800 	bl	8008ad2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aad2:	697b      	ldr	r3, [r7, #20]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3718      	adds	r7, #24
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	200014a4 	.word	0x200014a4
 800aae0:	200014a0 	.word	0x200014a0

0800aae4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b08e      	sub	sp, #56	; 0x38
 800aae8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aaea:	e0d0      	b.n	800ac8e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	da1a      	bge.n	800ab28 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aaf2:	1d3b      	adds	r3, r7, #4
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aaf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d10c      	bne.n	800ab18 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab02:	b672      	cpsid	i
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	b662      	cpsie	i
 800ab12:	61fb      	str	r3, [r7, #28]
}
 800ab14:	bf00      	nop
 800ab16:	e7fe      	b.n	800ab16 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ab18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab1e:	6850      	ldr	r0, [r2, #4]
 800ab20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab22:	6892      	ldr	r2, [r2, #8]
 800ab24:	4611      	mov	r1, r2
 800ab26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f2c0 80af 	blt.w	800ac8e <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ab34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab36:	695b      	ldr	r3, [r3, #20]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d004      	beq.n	800ab46 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3e:	3304      	adds	r3, #4
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7fd ffff 	bl	8008b44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab46:	463b      	mov	r3, r7
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7ff ff69 	bl	800aa20 <prvSampleTimeNow>
 800ab4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b09      	cmp	r3, #9
 800ab54:	f200 809a 	bhi.w	800ac8c <prvProcessReceivedCommands+0x1a8>
 800ab58:	a201      	add	r2, pc, #4	; (adr r2, 800ab60 <prvProcessReceivedCommands+0x7c>)
 800ab5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab5e:	bf00      	nop
 800ab60:	0800ab89 	.word	0x0800ab89
 800ab64:	0800ab89 	.word	0x0800ab89
 800ab68:	0800ab89 	.word	0x0800ab89
 800ab6c:	0800ac01 	.word	0x0800ac01
 800ab70:	0800ac15 	.word	0x0800ac15
 800ab74:	0800ac63 	.word	0x0800ac63
 800ab78:	0800ab89 	.word	0x0800ab89
 800ab7c:	0800ab89 	.word	0x0800ab89
 800ab80:	0800ac01 	.word	0x0800ac01
 800ab84:	0800ac15 	.word	0x0800ac15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab8e:	f043 0301 	orr.w	r3, r3, #1
 800ab92:	b2da      	uxtb	r2, r3
 800ab94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	18d1      	adds	r1, r2, r3
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aba8:	f7ff ff5a 	bl	800aa60 <prvInsertTimerInActiveList>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d06d      	beq.n	800ac8e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abb8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abc0:	f003 0304 	and.w	r3, r3, #4
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d062      	beq.n	800ac8e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800abc8:	68ba      	ldr	r2, [r7, #8]
 800abca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abcc:	699b      	ldr	r3, [r3, #24]
 800abce:	441a      	add	r2, r3
 800abd0:	2300      	movs	r3, #0
 800abd2:	9300      	str	r3, [sp, #0]
 800abd4:	2300      	movs	r3, #0
 800abd6:	2100      	movs	r1, #0
 800abd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abda:	f7ff fdff 	bl	800a7dc <xTimerGenericCommand>
 800abde:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800abe0:	6a3b      	ldr	r3, [r7, #32]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d153      	bne.n	800ac8e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abea:	b672      	cpsid	i
 800abec:	f383 8811 	msr	BASEPRI, r3
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	f3bf 8f4f 	dsb	sy
 800abf8:	b662      	cpsie	i
 800abfa:	61bb      	str	r3, [r7, #24]
}
 800abfc:	bf00      	nop
 800abfe:	e7fe      	b.n	800abfe <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac06:	f023 0301 	bic.w	r3, r3, #1
 800ac0a:	b2da      	uxtb	r2, r3
 800ac0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ac12:	e03c      	b.n	800ac8e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac1a:	f043 0301 	orr.w	r3, r3, #1
 800ac1e:	b2da      	uxtb	r2, r3
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac26:	68ba      	ldr	r2, [r7, #8]
 800ac28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2e:	699b      	ldr	r3, [r3, #24]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d10c      	bne.n	800ac4e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800ac34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac38:	b672      	cpsid	i
 800ac3a:	f383 8811 	msr	BASEPRI, r3
 800ac3e:	f3bf 8f6f 	isb	sy
 800ac42:	f3bf 8f4f 	dsb	sy
 800ac46:	b662      	cpsie	i
 800ac48:	617b      	str	r3, [r7, #20]
}
 800ac4a:	bf00      	nop
 800ac4c:	e7fe      	b.n	800ac4c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ac4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac50:	699a      	ldr	r2, [r3, #24]
 800ac52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac54:	18d1      	adds	r1, r2, r3
 800ac56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac5c:	f7ff ff00 	bl	800aa60 <prvInsertTimerInActiveList>
					break;
 800ac60:	e015      	b.n	800ac8e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ac62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac68:	f003 0302 	and.w	r3, r3, #2
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d103      	bne.n	800ac78 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800ac70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac72:	f000 fbc9 	bl	800b408 <vPortFree>
 800ac76:	e00a      	b.n	800ac8e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac7e:	f023 0301 	bic.w	r3, r3, #1
 800ac82:	b2da      	uxtb	r2, r3
 800ac84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ac8a:	e000      	b.n	800ac8e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800ac8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac8e:	4b08      	ldr	r3, [pc, #32]	; (800acb0 <prvProcessReceivedCommands+0x1cc>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	1d39      	adds	r1, r7, #4
 800ac94:	2200      	movs	r2, #0
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7fe fa34 	bl	8009104 <xQueueReceive>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f47f af24 	bne.w	800aaec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800aca4:	bf00      	nop
 800aca6:	bf00      	nop
 800aca8:	3730      	adds	r7, #48	; 0x30
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	200014a8 	.word	0x200014a8

0800acb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b088      	sub	sp, #32
 800acb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800acba:	e04a      	b.n	800ad52 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acbc:	4b2e      	ldr	r3, [pc, #184]	; (800ad78 <prvSwitchTimerLists+0xc4>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acc6:	4b2c      	ldr	r3, [pc, #176]	; (800ad78 <prvSwitchTimerLists+0xc4>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	3304      	adds	r3, #4
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7fd ff35 	bl	8008b44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6a1b      	ldr	r3, [r3, #32]
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ace8:	f003 0304 	and.w	r3, r3, #4
 800acec:	2b00      	cmp	r3, #0
 800acee:	d030      	beq.n	800ad52 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	699b      	ldr	r3, [r3, #24]
 800acf4:	693a      	ldr	r2, [r7, #16]
 800acf6:	4413      	add	r3, r2
 800acf8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d90e      	bls.n	800ad20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	68ba      	ldr	r2, [r7, #8]
 800ad06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad0e:	4b1a      	ldr	r3, [pc, #104]	; (800ad78 <prvSwitchTimerLists+0xc4>)
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	3304      	adds	r3, #4
 800ad16:	4619      	mov	r1, r3
 800ad18:	4610      	mov	r0, r2
 800ad1a:	f7fd feda 	bl	8008ad2 <vListInsert>
 800ad1e:	e018      	b.n	800ad52 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad20:	2300      	movs	r3, #0
 800ad22:	9300      	str	r3, [sp, #0]
 800ad24:	2300      	movs	r3, #0
 800ad26:	693a      	ldr	r2, [r7, #16]
 800ad28:	2100      	movs	r1, #0
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f7ff fd56 	bl	800a7dc <xTimerGenericCommand>
 800ad30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d10c      	bne.n	800ad52 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800ad38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3c:	b672      	cpsid	i
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	b662      	cpsie	i
 800ad4c:	603b      	str	r3, [r7, #0]
}
 800ad4e:	bf00      	nop
 800ad50:	e7fe      	b.n	800ad50 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad52:	4b09      	ldr	r3, [pc, #36]	; (800ad78 <prvSwitchTimerLists+0xc4>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d1af      	bne.n	800acbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ad5c:	4b06      	ldr	r3, [pc, #24]	; (800ad78 <prvSwitchTimerLists+0xc4>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ad62:	4b06      	ldr	r3, [pc, #24]	; (800ad7c <prvSwitchTimerLists+0xc8>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a04      	ldr	r2, [pc, #16]	; (800ad78 <prvSwitchTimerLists+0xc4>)
 800ad68:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ad6a:	4a04      	ldr	r2, [pc, #16]	; (800ad7c <prvSwitchTimerLists+0xc8>)
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	6013      	str	r3, [r2, #0]
}
 800ad70:	bf00      	nop
 800ad72:	3718      	adds	r7, #24
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	200014a0 	.word	0x200014a0
 800ad7c:	200014a4 	.word	0x200014a4

0800ad80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ad86:	f000 f949 	bl	800b01c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ad8a:	4b15      	ldr	r3, [pc, #84]	; (800ade0 <prvCheckForValidListAndQueue+0x60>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d120      	bne.n	800add4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ad92:	4814      	ldr	r0, [pc, #80]	; (800ade4 <prvCheckForValidListAndQueue+0x64>)
 800ad94:	f7fd fe4c 	bl	8008a30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ad98:	4813      	ldr	r0, [pc, #76]	; (800ade8 <prvCheckForValidListAndQueue+0x68>)
 800ad9a:	f7fd fe49 	bl	8008a30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ad9e:	4b13      	ldr	r3, [pc, #76]	; (800adec <prvCheckForValidListAndQueue+0x6c>)
 800ada0:	4a10      	ldr	r2, [pc, #64]	; (800ade4 <prvCheckForValidListAndQueue+0x64>)
 800ada2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ada4:	4b12      	ldr	r3, [pc, #72]	; (800adf0 <prvCheckForValidListAndQueue+0x70>)
 800ada6:	4a10      	ldr	r2, [pc, #64]	; (800ade8 <prvCheckForValidListAndQueue+0x68>)
 800ada8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800adaa:	2300      	movs	r3, #0
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	4b11      	ldr	r3, [pc, #68]	; (800adf4 <prvCheckForValidListAndQueue+0x74>)
 800adb0:	4a11      	ldr	r2, [pc, #68]	; (800adf8 <prvCheckForValidListAndQueue+0x78>)
 800adb2:	2110      	movs	r1, #16
 800adb4:	200a      	movs	r0, #10
 800adb6:	f7fd ff59 	bl	8008c6c <xQueueGenericCreateStatic>
 800adba:	4603      	mov	r3, r0
 800adbc:	4a08      	ldr	r2, [pc, #32]	; (800ade0 <prvCheckForValidListAndQueue+0x60>)
 800adbe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800adc0:	4b07      	ldr	r3, [pc, #28]	; (800ade0 <prvCheckForValidListAndQueue+0x60>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d005      	beq.n	800add4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800adc8:	4b05      	ldr	r3, [pc, #20]	; (800ade0 <prvCheckForValidListAndQueue+0x60>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	490b      	ldr	r1, [pc, #44]	; (800adfc <prvCheckForValidListAndQueue+0x7c>)
 800adce:	4618      	mov	r0, r3
 800add0:	f7fe fb8e 	bl	80094f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800add4:	f000 f956 	bl	800b084 <vPortExitCritical>
}
 800add8:	bf00      	nop
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	200014a8 	.word	0x200014a8
 800ade4:	20001478 	.word	0x20001478
 800ade8:	2000148c 	.word	0x2000148c
 800adec:	200014a0 	.word	0x200014a0
 800adf0:	200014a4 	.word	0x200014a4
 800adf4:	20001554 	.word	0x20001554
 800adf8:	200014b4 	.word	0x200014b4
 800adfc:	0800c7d4 	.word	0x0800c7d4

0800ae00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	3b04      	subs	r3, #4
 800ae10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ae18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	3b04      	subs	r3, #4
 800ae1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	f023 0201 	bic.w	r2, r3, #1
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	3b04      	subs	r3, #4
 800ae2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ae30:	4a0c      	ldr	r2, [pc, #48]	; (800ae64 <pxPortInitialiseStack+0x64>)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	3b14      	subs	r3, #20
 800ae3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3b04      	subs	r3, #4
 800ae46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f06f 0202 	mvn.w	r2, #2
 800ae4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	3b20      	subs	r3, #32
 800ae54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ae56:	68fb      	ldr	r3, [r7, #12]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3714      	adds	r7, #20
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr
 800ae64:	0800ae69 	.word	0x0800ae69

0800ae68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ae72:	4b14      	ldr	r3, [pc, #80]	; (800aec4 <prvTaskExitError+0x5c>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7a:	d00c      	beq.n	800ae96 <prvTaskExitError+0x2e>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae80:	b672      	cpsid	i
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	b662      	cpsie	i
 800ae90:	60fb      	str	r3, [r7, #12]
}
 800ae92:	bf00      	nop
 800ae94:	e7fe      	b.n	800ae94 <prvTaskExitError+0x2c>
	__asm volatile
 800ae96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9a:	b672      	cpsid	i
 800ae9c:	f383 8811 	msr	BASEPRI, r3
 800aea0:	f3bf 8f6f 	isb	sy
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	b662      	cpsie	i
 800aeaa:	60bb      	str	r3, [r7, #8]
}
 800aeac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aeae:	bf00      	nop
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d0fc      	beq.n	800aeb0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aeb6:	bf00      	nop
 800aeb8:	bf00      	nop
 800aeba:	3714      	adds	r7, #20
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr
 800aec4:	20000064 	.word	0x20000064
	...

0800aed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aed0:	4b07      	ldr	r3, [pc, #28]	; (800aef0 <pxCurrentTCBConst2>)
 800aed2:	6819      	ldr	r1, [r3, #0]
 800aed4:	6808      	ldr	r0, [r1, #0]
 800aed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeda:	f380 8809 	msr	PSP, r0
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f04f 0000 	mov.w	r0, #0
 800aee6:	f380 8811 	msr	BASEPRI, r0
 800aeea:	4770      	bx	lr
 800aeec:	f3af 8000 	nop.w

0800aef0 <pxCurrentTCBConst2>:
 800aef0:	20000f78 	.word	0x20000f78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aef4:	bf00      	nop
 800aef6:	bf00      	nop

0800aef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aef8:	4808      	ldr	r0, [pc, #32]	; (800af1c <prvPortStartFirstTask+0x24>)
 800aefa:	6800      	ldr	r0, [r0, #0]
 800aefc:	6800      	ldr	r0, [r0, #0]
 800aefe:	f380 8808 	msr	MSP, r0
 800af02:	f04f 0000 	mov.w	r0, #0
 800af06:	f380 8814 	msr	CONTROL, r0
 800af0a:	b662      	cpsie	i
 800af0c:	b661      	cpsie	f
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	df00      	svc	0
 800af18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af1a:	bf00      	nop
 800af1c:	e000ed08 	.word	0xe000ed08

0800af20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800af26:	4b37      	ldr	r3, [pc, #220]	; (800b004 <xPortStartScheduler+0xe4>)
 800af28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	22ff      	movs	r2, #255	; 0xff
 800af36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af40:	78fb      	ldrb	r3, [r7, #3]
 800af42:	b2db      	uxtb	r3, r3
 800af44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800af48:	b2da      	uxtb	r2, r3
 800af4a:	4b2f      	ldr	r3, [pc, #188]	; (800b008 <xPortStartScheduler+0xe8>)
 800af4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800af4e:	4b2f      	ldr	r3, [pc, #188]	; (800b00c <xPortStartScheduler+0xec>)
 800af50:	2207      	movs	r2, #7
 800af52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af54:	e009      	b.n	800af6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800af56:	4b2d      	ldr	r3, [pc, #180]	; (800b00c <xPortStartScheduler+0xec>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	3b01      	subs	r3, #1
 800af5c:	4a2b      	ldr	r2, [pc, #172]	; (800b00c <xPortStartScheduler+0xec>)
 800af5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800af60:	78fb      	ldrb	r3, [r7, #3]
 800af62:	b2db      	uxtb	r3, r3
 800af64:	005b      	lsls	r3, r3, #1
 800af66:	b2db      	uxtb	r3, r3
 800af68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af6a:	78fb      	ldrb	r3, [r7, #3]
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af72:	2b80      	cmp	r3, #128	; 0x80
 800af74:	d0ef      	beq.n	800af56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800af76:	4b25      	ldr	r3, [pc, #148]	; (800b00c <xPortStartScheduler+0xec>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f1c3 0307 	rsb	r3, r3, #7
 800af7e:	2b04      	cmp	r3, #4
 800af80:	d00c      	beq.n	800af9c <xPortStartScheduler+0x7c>
	__asm volatile
 800af82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af86:	b672      	cpsid	i
 800af88:	f383 8811 	msr	BASEPRI, r3
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	b662      	cpsie	i
 800af96:	60bb      	str	r3, [r7, #8]
}
 800af98:	bf00      	nop
 800af9a:	e7fe      	b.n	800af9a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800af9c:	4b1b      	ldr	r3, [pc, #108]	; (800b00c <xPortStartScheduler+0xec>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	021b      	lsls	r3, r3, #8
 800afa2:	4a1a      	ldr	r2, [pc, #104]	; (800b00c <xPortStartScheduler+0xec>)
 800afa4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800afa6:	4b19      	ldr	r3, [pc, #100]	; (800b00c <xPortStartScheduler+0xec>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800afae:	4a17      	ldr	r2, [pc, #92]	; (800b00c <xPortStartScheduler+0xec>)
 800afb0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	b2da      	uxtb	r2, r3
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800afba:	4b15      	ldr	r3, [pc, #84]	; (800b010 <xPortStartScheduler+0xf0>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4a14      	ldr	r2, [pc, #80]	; (800b010 <xPortStartScheduler+0xf0>)
 800afc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800afc4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800afc6:	4b12      	ldr	r3, [pc, #72]	; (800b010 <xPortStartScheduler+0xf0>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a11      	ldr	r2, [pc, #68]	; (800b010 <xPortStartScheduler+0xf0>)
 800afcc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800afd0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800afd2:	f000 f8dd 	bl	800b190 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800afd6:	4b0f      	ldr	r3, [pc, #60]	; (800b014 <xPortStartScheduler+0xf4>)
 800afd8:	2200      	movs	r2, #0
 800afda:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800afdc:	f000 f8fc 	bl	800b1d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800afe0:	4b0d      	ldr	r3, [pc, #52]	; (800b018 <xPortStartScheduler+0xf8>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a0c      	ldr	r2, [pc, #48]	; (800b018 <xPortStartScheduler+0xf8>)
 800afe6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800afea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800afec:	f7ff ff84 	bl	800aef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aff0:	f7ff f842 	bl	800a078 <vTaskSwitchContext>
	prvTaskExitError();
 800aff4:	f7ff ff38 	bl	800ae68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	e000e400 	.word	0xe000e400
 800b008:	200015a4 	.word	0x200015a4
 800b00c:	200015a8 	.word	0x200015a8
 800b010:	e000ed20 	.word	0xe000ed20
 800b014:	20000064 	.word	0x20000064
 800b018:	e000ef34 	.word	0xe000ef34

0800b01c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
	__asm volatile
 800b022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b026:	b672      	cpsid	i
 800b028:	f383 8811 	msr	BASEPRI, r3
 800b02c:	f3bf 8f6f 	isb	sy
 800b030:	f3bf 8f4f 	dsb	sy
 800b034:	b662      	cpsie	i
 800b036:	607b      	str	r3, [r7, #4]
}
 800b038:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b03a:	4b10      	ldr	r3, [pc, #64]	; (800b07c <vPortEnterCritical+0x60>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	3301      	adds	r3, #1
 800b040:	4a0e      	ldr	r2, [pc, #56]	; (800b07c <vPortEnterCritical+0x60>)
 800b042:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b044:	4b0d      	ldr	r3, [pc, #52]	; (800b07c <vPortEnterCritical+0x60>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d111      	bne.n	800b070 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b04c:	4b0c      	ldr	r3, [pc, #48]	; (800b080 <vPortEnterCritical+0x64>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	b2db      	uxtb	r3, r3
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00c      	beq.n	800b070 <vPortEnterCritical+0x54>
	__asm volatile
 800b056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05a:	b672      	cpsid	i
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	b662      	cpsie	i
 800b06a:	603b      	str	r3, [r7, #0]
}
 800b06c:	bf00      	nop
 800b06e:	e7fe      	b.n	800b06e <vPortEnterCritical+0x52>
	}
}
 800b070:	bf00      	nop
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr
 800b07c:	20000064 	.word	0x20000064
 800b080:	e000ed04 	.word	0xe000ed04

0800b084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b08a:	4b13      	ldr	r3, [pc, #76]	; (800b0d8 <vPortExitCritical+0x54>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10c      	bne.n	800b0ac <vPortExitCritical+0x28>
	__asm volatile
 800b092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b096:	b672      	cpsid	i
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	b662      	cpsie	i
 800b0a6:	607b      	str	r3, [r7, #4]
}
 800b0a8:	bf00      	nop
 800b0aa:	e7fe      	b.n	800b0aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b0ac:	4b0a      	ldr	r3, [pc, #40]	; (800b0d8 <vPortExitCritical+0x54>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	4a09      	ldr	r2, [pc, #36]	; (800b0d8 <vPortExitCritical+0x54>)
 800b0b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b0b6:	4b08      	ldr	r3, [pc, #32]	; (800b0d8 <vPortExitCritical+0x54>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d105      	bne.n	800b0ca <vPortExitCritical+0x46>
 800b0be:	2300      	movs	r3, #0
 800b0c0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	f383 8811 	msr	BASEPRI, r3
}
 800b0c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b0ca:	bf00      	nop
 800b0cc:	370c      	adds	r7, #12
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	20000064 	.word	0x20000064
 800b0dc:	00000000 	.word	0x00000000

0800b0e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b0e0:	f3ef 8009 	mrs	r0, PSP
 800b0e4:	f3bf 8f6f 	isb	sy
 800b0e8:	4b15      	ldr	r3, [pc, #84]	; (800b140 <pxCurrentTCBConst>)
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	f01e 0f10 	tst.w	lr, #16
 800b0f0:	bf08      	it	eq
 800b0f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b0f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fa:	6010      	str	r0, [r2, #0]
 800b0fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b100:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b104:	b672      	cpsid	i
 800b106:	f380 8811 	msr	BASEPRI, r0
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	b662      	cpsie	i
 800b114:	f7fe ffb0 	bl	800a078 <vTaskSwitchContext>
 800b118:	f04f 0000 	mov.w	r0, #0
 800b11c:	f380 8811 	msr	BASEPRI, r0
 800b120:	bc09      	pop	{r0, r3}
 800b122:	6819      	ldr	r1, [r3, #0]
 800b124:	6808      	ldr	r0, [r1, #0]
 800b126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12a:	f01e 0f10 	tst.w	lr, #16
 800b12e:	bf08      	it	eq
 800b130:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b134:	f380 8809 	msr	PSP, r0
 800b138:	f3bf 8f6f 	isb	sy
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop

0800b140 <pxCurrentTCBConst>:
 800b140:	20000f78 	.word	0x20000f78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b144:	bf00      	nop
 800b146:	bf00      	nop

0800b148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b152:	b672      	cpsid	i
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	b662      	cpsie	i
 800b162:	607b      	str	r3, [r7, #4]
}
 800b164:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b166:	f7fe fecb 	bl	8009f00 <xTaskIncrementTick>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d003      	beq.n	800b178 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b170:	4b06      	ldr	r3, [pc, #24]	; (800b18c <SysTick_Handler+0x44>)
 800b172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b176:	601a      	str	r2, [r3, #0]
 800b178:	2300      	movs	r3, #0
 800b17a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	f383 8811 	msr	BASEPRI, r3
}
 800b182:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b184:	bf00      	nop
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	e000ed04 	.word	0xe000ed04

0800b190 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b190:	b480      	push	{r7}
 800b192:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b194:	4b0b      	ldr	r3, [pc, #44]	; (800b1c4 <vPortSetupTimerInterrupt+0x34>)
 800b196:	2200      	movs	r2, #0
 800b198:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b19a:	4b0b      	ldr	r3, [pc, #44]	; (800b1c8 <vPortSetupTimerInterrupt+0x38>)
 800b19c:	2200      	movs	r2, #0
 800b19e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b1a0:	4b0a      	ldr	r3, [pc, #40]	; (800b1cc <vPortSetupTimerInterrupt+0x3c>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a0a      	ldr	r2, [pc, #40]	; (800b1d0 <vPortSetupTimerInterrupt+0x40>)
 800b1a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1aa:	099b      	lsrs	r3, r3, #6
 800b1ac:	4a09      	ldr	r2, [pc, #36]	; (800b1d4 <vPortSetupTimerInterrupt+0x44>)
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b1b2:	4b04      	ldr	r3, [pc, #16]	; (800b1c4 <vPortSetupTimerInterrupt+0x34>)
 800b1b4:	2207      	movs	r2, #7
 800b1b6:	601a      	str	r2, [r3, #0]
}
 800b1b8:	bf00      	nop
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop
 800b1c4:	e000e010 	.word	0xe000e010
 800b1c8:	e000e018 	.word	0xe000e018
 800b1cc:	20000058 	.word	0x20000058
 800b1d0:	10624dd3 	.word	0x10624dd3
 800b1d4:	e000e014 	.word	0xe000e014

0800b1d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b1d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b1e8 <vPortEnableVFP+0x10>
 800b1dc:	6801      	ldr	r1, [r0, #0]
 800b1de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b1e2:	6001      	str	r1, [r0, #0]
 800b1e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b1e6:	bf00      	nop
 800b1e8:	e000ed88 	.word	0xe000ed88

0800b1ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b1f2:	f3ef 8305 	mrs	r3, IPSR
 800b1f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2b0f      	cmp	r3, #15
 800b1fc:	d916      	bls.n	800b22c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b1fe:	4a19      	ldr	r2, [pc, #100]	; (800b264 <vPortValidateInterruptPriority+0x78>)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	4413      	add	r3, r2
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b208:	4b17      	ldr	r3, [pc, #92]	; (800b268 <vPortValidateInterruptPriority+0x7c>)
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	7afa      	ldrb	r2, [r7, #11]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d20c      	bcs.n	800b22c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800b212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b216:	b672      	cpsid	i
 800b218:	f383 8811 	msr	BASEPRI, r3
 800b21c:	f3bf 8f6f 	isb	sy
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	b662      	cpsie	i
 800b226:	607b      	str	r3, [r7, #4]
}
 800b228:	bf00      	nop
 800b22a:	e7fe      	b.n	800b22a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b22c:	4b0f      	ldr	r3, [pc, #60]	; (800b26c <vPortValidateInterruptPriority+0x80>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b234:	4b0e      	ldr	r3, [pc, #56]	; (800b270 <vPortValidateInterruptPriority+0x84>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	429a      	cmp	r2, r3
 800b23a:	d90c      	bls.n	800b256 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800b23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b240:	b672      	cpsid	i
 800b242:	f383 8811 	msr	BASEPRI, r3
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	b662      	cpsie	i
 800b250:	603b      	str	r3, [r7, #0]
}
 800b252:	bf00      	nop
 800b254:	e7fe      	b.n	800b254 <vPortValidateInterruptPriority+0x68>
	}
 800b256:	bf00      	nop
 800b258:	3714      	adds	r7, #20
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	e000e3f0 	.word	0xe000e3f0
 800b268:	200015a4 	.word	0x200015a4
 800b26c:	e000ed0c 	.word	0xe000ed0c
 800b270:	200015a8 	.word	0x200015a8

0800b274 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b08a      	sub	sp, #40	; 0x28
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b27c:	2300      	movs	r3, #0
 800b27e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b280:	f7fe fd80 	bl	8009d84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b284:	4b5b      	ldr	r3, [pc, #364]	; (800b3f4 <pvPortMalloc+0x180>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d101      	bne.n	800b290 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b28c:	f000 f91a 	bl	800b4c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b290:	4b59      	ldr	r3, [pc, #356]	; (800b3f8 <pvPortMalloc+0x184>)
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4013      	ands	r3, r2
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f040 8092 	bne.w	800b3c2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d01f      	beq.n	800b2e4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800b2a4:	2208      	movs	r2, #8
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f003 0307 	and.w	r3, r3, #7
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d016      	beq.n	800b2e4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f023 0307 	bic.w	r3, r3, #7
 800b2bc:	3308      	adds	r3, #8
 800b2be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f003 0307 	and.w	r3, r3, #7
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00c      	beq.n	800b2e4 <pvPortMalloc+0x70>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ce:	b672      	cpsid	i
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	b662      	cpsie	i
 800b2de:	617b      	str	r3, [r7, #20]
}
 800b2e0:	bf00      	nop
 800b2e2:	e7fe      	b.n	800b2e2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d06b      	beq.n	800b3c2 <pvPortMalloc+0x14e>
 800b2ea:	4b44      	ldr	r3, [pc, #272]	; (800b3fc <pvPortMalloc+0x188>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d866      	bhi.n	800b3c2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b2f4:	4b42      	ldr	r3, [pc, #264]	; (800b400 <pvPortMalloc+0x18c>)
 800b2f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b2f8:	4b41      	ldr	r3, [pc, #260]	; (800b400 <pvPortMalloc+0x18c>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b2fe:	e004      	b.n	800b30a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b302:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	429a      	cmp	r2, r3
 800b312:	d903      	bls.n	800b31c <pvPortMalloc+0xa8>
 800b314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1f1      	bne.n	800b300 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b31c:	4b35      	ldr	r3, [pc, #212]	; (800b3f4 <pvPortMalloc+0x180>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b322:	429a      	cmp	r2, r3
 800b324:	d04d      	beq.n	800b3c2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b326:	6a3b      	ldr	r3, [r7, #32]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2208      	movs	r2, #8
 800b32c:	4413      	add	r3, r2
 800b32e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	6a3b      	ldr	r3, [r7, #32]
 800b336:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	685a      	ldr	r2, [r3, #4]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	1ad2      	subs	r2, r2, r3
 800b340:	2308      	movs	r3, #8
 800b342:	005b      	lsls	r3, r3, #1
 800b344:	429a      	cmp	r2, r3
 800b346:	d921      	bls.n	800b38c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4413      	add	r3, r2
 800b34e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	f003 0307 	and.w	r3, r3, #7
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00c      	beq.n	800b374 <pvPortMalloc+0x100>
	__asm volatile
 800b35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35e:	b672      	cpsid	i
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	b662      	cpsie	i
 800b36e:	613b      	str	r3, [r7, #16]
}
 800b370:	bf00      	nop
 800b372:	e7fe      	b.n	800b372 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b376:	685a      	ldr	r2, [r3, #4]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	1ad2      	subs	r2, r2, r3
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b386:	69b8      	ldr	r0, [r7, #24]
 800b388:	f000 f8fe 	bl	800b588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b38c:	4b1b      	ldr	r3, [pc, #108]	; (800b3fc <pvPortMalloc+0x188>)
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	4a19      	ldr	r2, [pc, #100]	; (800b3fc <pvPortMalloc+0x188>)
 800b398:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b39a:	4b18      	ldr	r3, [pc, #96]	; (800b3fc <pvPortMalloc+0x188>)
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	4b19      	ldr	r3, [pc, #100]	; (800b404 <pvPortMalloc+0x190>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d203      	bcs.n	800b3ae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b3a6:	4b15      	ldr	r3, [pc, #84]	; (800b3fc <pvPortMalloc+0x188>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a16      	ldr	r2, [pc, #88]	; (800b404 <pvPortMalloc+0x190>)
 800b3ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	4b11      	ldr	r3, [pc, #68]	; (800b3f8 <pvPortMalloc+0x184>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	431a      	orrs	r2, r3
 800b3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3be:	2200      	movs	r2, #0
 800b3c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b3c2:	f7fe fced 	bl	8009da0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	f003 0307 	and.w	r3, r3, #7
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d00c      	beq.n	800b3ea <pvPortMalloc+0x176>
	__asm volatile
 800b3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d4:	b672      	cpsid	i
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	b662      	cpsie	i
 800b3e4:	60fb      	str	r3, [r7, #12]
}
 800b3e6:	bf00      	nop
 800b3e8:	e7fe      	b.n	800b3e8 <pvPortMalloc+0x174>
	return pvReturn;
 800b3ea:	69fb      	ldr	r3, [r7, #28]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3728      	adds	r7, #40	; 0x28
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	200051b4 	.word	0x200051b4
 800b3f8:	200051c0 	.word	0x200051c0
 800b3fc:	200051b8 	.word	0x200051b8
 800b400:	200051ac 	.word	0x200051ac
 800b404:	200051bc 	.word	0x200051bc

0800b408 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d04c      	beq.n	800b4b4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b41a:	2308      	movs	r3, #8
 800b41c:	425b      	negs	r3, r3
 800b41e:	697a      	ldr	r2, [r7, #20]
 800b420:	4413      	add	r3, r2
 800b422:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	685a      	ldr	r2, [r3, #4]
 800b42c:	4b23      	ldr	r3, [pc, #140]	; (800b4bc <vPortFree+0xb4>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4013      	ands	r3, r2
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10c      	bne.n	800b450 <vPortFree+0x48>
	__asm volatile
 800b436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43a:	b672      	cpsid	i
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	b662      	cpsie	i
 800b44a:	60fb      	str	r3, [r7, #12]
}
 800b44c:	bf00      	nop
 800b44e:	e7fe      	b.n	800b44e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00c      	beq.n	800b472 <vPortFree+0x6a>
	__asm volatile
 800b458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45c:	b672      	cpsid	i
 800b45e:	f383 8811 	msr	BASEPRI, r3
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	b662      	cpsie	i
 800b46c:	60bb      	str	r3, [r7, #8]
}
 800b46e:	bf00      	nop
 800b470:	e7fe      	b.n	800b470 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	685a      	ldr	r2, [r3, #4]
 800b476:	4b11      	ldr	r3, [pc, #68]	; (800b4bc <vPortFree+0xb4>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4013      	ands	r3, r2
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d019      	beq.n	800b4b4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d115      	bne.n	800b4b4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	685a      	ldr	r2, [r3, #4]
 800b48c:	4b0b      	ldr	r3, [pc, #44]	; (800b4bc <vPortFree+0xb4>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	43db      	mvns	r3, r3
 800b492:	401a      	ands	r2, r3
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b498:	f7fe fc74 	bl	8009d84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	685a      	ldr	r2, [r3, #4]
 800b4a0:	4b07      	ldr	r3, [pc, #28]	; (800b4c0 <vPortFree+0xb8>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	4a06      	ldr	r2, [pc, #24]	; (800b4c0 <vPortFree+0xb8>)
 800b4a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b4aa:	6938      	ldr	r0, [r7, #16]
 800b4ac:	f000 f86c 	bl	800b588 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b4b0:	f7fe fc76 	bl	8009da0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b4b4:	bf00      	nop
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	200051c0 	.word	0x200051c0
 800b4c0:	200051b8 	.word	0x200051b8

0800b4c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b4ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b4ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b4d0:	4b27      	ldr	r3, [pc, #156]	; (800b570 <prvHeapInit+0xac>)
 800b4d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f003 0307 	and.w	r3, r3, #7
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00c      	beq.n	800b4f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	3307      	adds	r3, #7
 800b4e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f023 0307 	bic.w	r3, r3, #7
 800b4ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	1ad3      	subs	r3, r2, r3
 800b4f2:	4a1f      	ldr	r2, [pc, #124]	; (800b570 <prvHeapInit+0xac>)
 800b4f4:	4413      	add	r3, r2
 800b4f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b4fc:	4a1d      	ldr	r2, [pc, #116]	; (800b574 <prvHeapInit+0xb0>)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b502:	4b1c      	ldr	r3, [pc, #112]	; (800b574 <prvHeapInit+0xb0>)
 800b504:	2200      	movs	r2, #0
 800b506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	68ba      	ldr	r2, [r7, #8]
 800b50c:	4413      	add	r3, r2
 800b50e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b510:	2208      	movs	r2, #8
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	1a9b      	subs	r3, r3, r2
 800b516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f023 0307 	bic.w	r3, r3, #7
 800b51e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	4a15      	ldr	r2, [pc, #84]	; (800b578 <prvHeapInit+0xb4>)
 800b524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b526:	4b14      	ldr	r3, [pc, #80]	; (800b578 <prvHeapInit+0xb4>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2200      	movs	r2, #0
 800b52c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b52e:	4b12      	ldr	r3, [pc, #72]	; (800b578 <prvHeapInit+0xb4>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2200      	movs	r2, #0
 800b534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	1ad2      	subs	r2, r2, r3
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b544:	4b0c      	ldr	r3, [pc, #48]	; (800b578 <prvHeapInit+0xb4>)
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	4a0a      	ldr	r2, [pc, #40]	; (800b57c <prvHeapInit+0xb8>)
 800b552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	4a09      	ldr	r2, [pc, #36]	; (800b580 <prvHeapInit+0xbc>)
 800b55a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b55c:	4b09      	ldr	r3, [pc, #36]	; (800b584 <prvHeapInit+0xc0>)
 800b55e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b562:	601a      	str	r2, [r3, #0]
}
 800b564:	bf00      	nop
 800b566:	3714      	adds	r7, #20
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr
 800b570:	200015ac 	.word	0x200015ac
 800b574:	200051ac 	.word	0x200051ac
 800b578:	200051b4 	.word	0x200051b4
 800b57c:	200051bc 	.word	0x200051bc
 800b580:	200051b8 	.word	0x200051b8
 800b584:	200051c0 	.word	0x200051c0

0800b588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b590:	4b28      	ldr	r3, [pc, #160]	; (800b634 <prvInsertBlockIntoFreeList+0xac>)
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	e002      	b.n	800b59c <prvInsertBlockIntoFreeList+0x14>
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	60fb      	str	r3, [r7, #12]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d8f7      	bhi.n	800b596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	68ba      	ldr	r2, [r7, #8]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d108      	bne.n	800b5ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	685a      	ldr	r2, [r3, #4]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	441a      	add	r2, r3
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	68ba      	ldr	r2, [r7, #8]
 800b5d4:	441a      	add	r2, r3
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d118      	bne.n	800b610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	4b15      	ldr	r3, [pc, #84]	; (800b638 <prvInsertBlockIntoFreeList+0xb0>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d00d      	beq.n	800b606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	685a      	ldr	r2, [r3, #4]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	441a      	add	r2, r3
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	601a      	str	r2, [r3, #0]
 800b604:	e008      	b.n	800b618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b606:	4b0c      	ldr	r3, [pc, #48]	; (800b638 <prvInsertBlockIntoFreeList+0xb0>)
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	601a      	str	r2, [r3, #0]
 800b60e:	e003      	b.n	800b618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d002      	beq.n	800b626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b626:	bf00      	nop
 800b628:	3714      	adds	r7, #20
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	200051ac 	.word	0x200051ac
 800b638:	200051b4 	.word	0x200051b4

0800b63c <std>:
 800b63c:	2300      	movs	r3, #0
 800b63e:	b510      	push	{r4, lr}
 800b640:	4604      	mov	r4, r0
 800b642:	e9c0 3300 	strd	r3, r3, [r0]
 800b646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b64a:	6083      	str	r3, [r0, #8]
 800b64c:	8181      	strh	r1, [r0, #12]
 800b64e:	6643      	str	r3, [r0, #100]	; 0x64
 800b650:	81c2      	strh	r2, [r0, #14]
 800b652:	6183      	str	r3, [r0, #24]
 800b654:	4619      	mov	r1, r3
 800b656:	2208      	movs	r2, #8
 800b658:	305c      	adds	r0, #92	; 0x5c
 800b65a:	f000 f8f4 	bl	800b846 <memset>
 800b65e:	4b05      	ldr	r3, [pc, #20]	; (800b674 <std+0x38>)
 800b660:	6263      	str	r3, [r4, #36]	; 0x24
 800b662:	4b05      	ldr	r3, [pc, #20]	; (800b678 <std+0x3c>)
 800b664:	62a3      	str	r3, [r4, #40]	; 0x28
 800b666:	4b05      	ldr	r3, [pc, #20]	; (800b67c <std+0x40>)
 800b668:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b66a:	4b05      	ldr	r3, [pc, #20]	; (800b680 <std+0x44>)
 800b66c:	6224      	str	r4, [r4, #32]
 800b66e:	6323      	str	r3, [r4, #48]	; 0x30
 800b670:	bd10      	pop	{r4, pc}
 800b672:	bf00      	nop
 800b674:	0800b7c1 	.word	0x0800b7c1
 800b678:	0800b7e3 	.word	0x0800b7e3
 800b67c:	0800b81b 	.word	0x0800b81b
 800b680:	0800b83f 	.word	0x0800b83f

0800b684 <stdio_exit_handler>:
 800b684:	4a02      	ldr	r2, [pc, #8]	; (800b690 <stdio_exit_handler+0xc>)
 800b686:	4903      	ldr	r1, [pc, #12]	; (800b694 <stdio_exit_handler+0x10>)
 800b688:	4803      	ldr	r0, [pc, #12]	; (800b698 <stdio_exit_handler+0x14>)
 800b68a:	f000 b869 	b.w	800b760 <_fwalk_sglue>
 800b68e:	bf00      	nop
 800b690:	20000068 	.word	0x20000068
 800b694:	0800c2c5 	.word	0x0800c2c5
 800b698:	20000074 	.word	0x20000074

0800b69c <cleanup_stdio>:
 800b69c:	6841      	ldr	r1, [r0, #4]
 800b69e:	4b0c      	ldr	r3, [pc, #48]	; (800b6d0 <cleanup_stdio+0x34>)
 800b6a0:	4299      	cmp	r1, r3
 800b6a2:	b510      	push	{r4, lr}
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	d001      	beq.n	800b6ac <cleanup_stdio+0x10>
 800b6a8:	f000 fe0c 	bl	800c2c4 <_fflush_r>
 800b6ac:	68a1      	ldr	r1, [r4, #8]
 800b6ae:	4b09      	ldr	r3, [pc, #36]	; (800b6d4 <cleanup_stdio+0x38>)
 800b6b0:	4299      	cmp	r1, r3
 800b6b2:	d002      	beq.n	800b6ba <cleanup_stdio+0x1e>
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	f000 fe05 	bl	800c2c4 <_fflush_r>
 800b6ba:	68e1      	ldr	r1, [r4, #12]
 800b6bc:	4b06      	ldr	r3, [pc, #24]	; (800b6d8 <cleanup_stdio+0x3c>)
 800b6be:	4299      	cmp	r1, r3
 800b6c0:	d004      	beq.n	800b6cc <cleanup_stdio+0x30>
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6c8:	f000 bdfc 	b.w	800c2c4 <_fflush_r>
 800b6cc:	bd10      	pop	{r4, pc}
 800b6ce:	bf00      	nop
 800b6d0:	200051c4 	.word	0x200051c4
 800b6d4:	2000522c 	.word	0x2000522c
 800b6d8:	20005294 	.word	0x20005294

0800b6dc <global_stdio_init.part.0>:
 800b6dc:	b510      	push	{r4, lr}
 800b6de:	4b0b      	ldr	r3, [pc, #44]	; (800b70c <global_stdio_init.part.0+0x30>)
 800b6e0:	4c0b      	ldr	r4, [pc, #44]	; (800b710 <global_stdio_init.part.0+0x34>)
 800b6e2:	4a0c      	ldr	r2, [pc, #48]	; (800b714 <global_stdio_init.part.0+0x38>)
 800b6e4:	601a      	str	r2, [r3, #0]
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	2104      	movs	r1, #4
 800b6ec:	f7ff ffa6 	bl	800b63c <std>
 800b6f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	2109      	movs	r1, #9
 800b6f8:	f7ff ffa0 	bl	800b63c <std>
 800b6fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b700:	2202      	movs	r2, #2
 800b702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b706:	2112      	movs	r1, #18
 800b708:	f7ff bf98 	b.w	800b63c <std>
 800b70c:	200052fc 	.word	0x200052fc
 800b710:	200051c4 	.word	0x200051c4
 800b714:	0800b685 	.word	0x0800b685

0800b718 <__sfp_lock_acquire>:
 800b718:	4801      	ldr	r0, [pc, #4]	; (800b720 <__sfp_lock_acquire+0x8>)
 800b71a:	f000 b971 	b.w	800ba00 <__retarget_lock_acquire_recursive>
 800b71e:	bf00      	nop
 800b720:	20005305 	.word	0x20005305

0800b724 <__sfp_lock_release>:
 800b724:	4801      	ldr	r0, [pc, #4]	; (800b72c <__sfp_lock_release+0x8>)
 800b726:	f000 b96c 	b.w	800ba02 <__retarget_lock_release_recursive>
 800b72a:	bf00      	nop
 800b72c:	20005305 	.word	0x20005305

0800b730 <__sinit>:
 800b730:	b510      	push	{r4, lr}
 800b732:	4604      	mov	r4, r0
 800b734:	f7ff fff0 	bl	800b718 <__sfp_lock_acquire>
 800b738:	6a23      	ldr	r3, [r4, #32]
 800b73a:	b11b      	cbz	r3, 800b744 <__sinit+0x14>
 800b73c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b740:	f7ff bff0 	b.w	800b724 <__sfp_lock_release>
 800b744:	4b04      	ldr	r3, [pc, #16]	; (800b758 <__sinit+0x28>)
 800b746:	6223      	str	r3, [r4, #32]
 800b748:	4b04      	ldr	r3, [pc, #16]	; (800b75c <__sinit+0x2c>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d1f5      	bne.n	800b73c <__sinit+0xc>
 800b750:	f7ff ffc4 	bl	800b6dc <global_stdio_init.part.0>
 800b754:	e7f2      	b.n	800b73c <__sinit+0xc>
 800b756:	bf00      	nop
 800b758:	0800b69d 	.word	0x0800b69d
 800b75c:	200052fc 	.word	0x200052fc

0800b760 <_fwalk_sglue>:
 800b760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b764:	4607      	mov	r7, r0
 800b766:	4688      	mov	r8, r1
 800b768:	4614      	mov	r4, r2
 800b76a:	2600      	movs	r6, #0
 800b76c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b770:	f1b9 0901 	subs.w	r9, r9, #1
 800b774:	d505      	bpl.n	800b782 <_fwalk_sglue+0x22>
 800b776:	6824      	ldr	r4, [r4, #0]
 800b778:	2c00      	cmp	r4, #0
 800b77a:	d1f7      	bne.n	800b76c <_fwalk_sglue+0xc>
 800b77c:	4630      	mov	r0, r6
 800b77e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b782:	89ab      	ldrh	r3, [r5, #12]
 800b784:	2b01      	cmp	r3, #1
 800b786:	d907      	bls.n	800b798 <_fwalk_sglue+0x38>
 800b788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b78c:	3301      	adds	r3, #1
 800b78e:	d003      	beq.n	800b798 <_fwalk_sglue+0x38>
 800b790:	4629      	mov	r1, r5
 800b792:	4638      	mov	r0, r7
 800b794:	47c0      	blx	r8
 800b796:	4306      	orrs	r6, r0
 800b798:	3568      	adds	r5, #104	; 0x68
 800b79a:	e7e9      	b.n	800b770 <_fwalk_sglue+0x10>

0800b79c <iprintf>:
 800b79c:	b40f      	push	{r0, r1, r2, r3}
 800b79e:	b507      	push	{r0, r1, r2, lr}
 800b7a0:	4906      	ldr	r1, [pc, #24]	; (800b7bc <iprintf+0x20>)
 800b7a2:	ab04      	add	r3, sp, #16
 800b7a4:	6808      	ldr	r0, [r1, #0]
 800b7a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7aa:	6881      	ldr	r1, [r0, #8]
 800b7ac:	9301      	str	r3, [sp, #4]
 800b7ae:	f000 fa59 	bl	800bc64 <_vfiprintf_r>
 800b7b2:	b003      	add	sp, #12
 800b7b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7b8:	b004      	add	sp, #16
 800b7ba:	4770      	bx	lr
 800b7bc:	200000c0 	.word	0x200000c0

0800b7c0 <__sread>:
 800b7c0:	b510      	push	{r4, lr}
 800b7c2:	460c      	mov	r4, r1
 800b7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c8:	f000 f8cc 	bl	800b964 <_read_r>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	bfab      	itete	ge
 800b7d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b7d2:	89a3      	ldrhlt	r3, [r4, #12]
 800b7d4:	181b      	addge	r3, r3, r0
 800b7d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b7da:	bfac      	ite	ge
 800b7dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b7de:	81a3      	strhlt	r3, [r4, #12]
 800b7e0:	bd10      	pop	{r4, pc}

0800b7e2 <__swrite>:
 800b7e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e6:	461f      	mov	r7, r3
 800b7e8:	898b      	ldrh	r3, [r1, #12]
 800b7ea:	05db      	lsls	r3, r3, #23
 800b7ec:	4605      	mov	r5, r0
 800b7ee:	460c      	mov	r4, r1
 800b7f0:	4616      	mov	r6, r2
 800b7f2:	d505      	bpl.n	800b800 <__swrite+0x1e>
 800b7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7f8:	2302      	movs	r3, #2
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f000 f8a0 	bl	800b940 <_lseek_r>
 800b800:	89a3      	ldrh	r3, [r4, #12]
 800b802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b806:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b80a:	81a3      	strh	r3, [r4, #12]
 800b80c:	4632      	mov	r2, r6
 800b80e:	463b      	mov	r3, r7
 800b810:	4628      	mov	r0, r5
 800b812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b816:	f000 b8b7 	b.w	800b988 <_write_r>

0800b81a <__sseek>:
 800b81a:	b510      	push	{r4, lr}
 800b81c:	460c      	mov	r4, r1
 800b81e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b822:	f000 f88d 	bl	800b940 <_lseek_r>
 800b826:	1c43      	adds	r3, r0, #1
 800b828:	89a3      	ldrh	r3, [r4, #12]
 800b82a:	bf15      	itete	ne
 800b82c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b82e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b832:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b836:	81a3      	strheq	r3, [r4, #12]
 800b838:	bf18      	it	ne
 800b83a:	81a3      	strhne	r3, [r4, #12]
 800b83c:	bd10      	pop	{r4, pc}

0800b83e <__sclose>:
 800b83e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b842:	f000 b817 	b.w	800b874 <_close_r>

0800b846 <memset>:
 800b846:	4402      	add	r2, r0
 800b848:	4603      	mov	r3, r0
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d100      	bne.n	800b850 <memset+0xa>
 800b84e:	4770      	bx	lr
 800b850:	f803 1b01 	strb.w	r1, [r3], #1
 800b854:	e7f9      	b.n	800b84a <memset+0x4>

0800b856 <strcat>:
 800b856:	b510      	push	{r4, lr}
 800b858:	4602      	mov	r2, r0
 800b85a:	7814      	ldrb	r4, [r2, #0]
 800b85c:	4613      	mov	r3, r2
 800b85e:	3201      	adds	r2, #1
 800b860:	2c00      	cmp	r4, #0
 800b862:	d1fa      	bne.n	800b85a <strcat+0x4>
 800b864:	3b01      	subs	r3, #1
 800b866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b86a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b86e:	2a00      	cmp	r2, #0
 800b870:	d1f9      	bne.n	800b866 <strcat+0x10>
 800b872:	bd10      	pop	{r4, pc}

0800b874 <_close_r>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	4d06      	ldr	r5, [pc, #24]	; (800b890 <_close_r+0x1c>)
 800b878:	2300      	movs	r3, #0
 800b87a:	4604      	mov	r4, r0
 800b87c:	4608      	mov	r0, r1
 800b87e:	602b      	str	r3, [r5, #0]
 800b880:	f7f6 fbf3 	bl	800206a <_close>
 800b884:	1c43      	adds	r3, r0, #1
 800b886:	d102      	bne.n	800b88e <_close_r+0x1a>
 800b888:	682b      	ldr	r3, [r5, #0]
 800b88a:	b103      	cbz	r3, 800b88e <_close_r+0x1a>
 800b88c:	6023      	str	r3, [r4, #0]
 800b88e:	bd38      	pop	{r3, r4, r5, pc}
 800b890:	20005300 	.word	0x20005300

0800b894 <_reclaim_reent>:
 800b894:	4b29      	ldr	r3, [pc, #164]	; (800b93c <_reclaim_reent+0xa8>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4283      	cmp	r3, r0
 800b89a:	b570      	push	{r4, r5, r6, lr}
 800b89c:	4604      	mov	r4, r0
 800b89e:	d04b      	beq.n	800b938 <_reclaim_reent+0xa4>
 800b8a0:	69c3      	ldr	r3, [r0, #28]
 800b8a2:	b143      	cbz	r3, 800b8b6 <_reclaim_reent+0x22>
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d144      	bne.n	800b934 <_reclaim_reent+0xa0>
 800b8aa:	69e3      	ldr	r3, [r4, #28]
 800b8ac:	6819      	ldr	r1, [r3, #0]
 800b8ae:	b111      	cbz	r1, 800b8b6 <_reclaim_reent+0x22>
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f000 f8b5 	bl	800ba20 <_free_r>
 800b8b6:	6961      	ldr	r1, [r4, #20]
 800b8b8:	b111      	cbz	r1, 800b8c0 <_reclaim_reent+0x2c>
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f000 f8b0 	bl	800ba20 <_free_r>
 800b8c0:	69e1      	ldr	r1, [r4, #28]
 800b8c2:	b111      	cbz	r1, 800b8ca <_reclaim_reent+0x36>
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f000 f8ab 	bl	800ba20 <_free_r>
 800b8ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b8cc:	b111      	cbz	r1, 800b8d4 <_reclaim_reent+0x40>
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f000 f8a6 	bl	800ba20 <_free_r>
 800b8d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8d6:	b111      	cbz	r1, 800b8de <_reclaim_reent+0x4a>
 800b8d8:	4620      	mov	r0, r4
 800b8da:	f000 f8a1 	bl	800ba20 <_free_r>
 800b8de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b8e0:	b111      	cbz	r1, 800b8e8 <_reclaim_reent+0x54>
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f000 f89c 	bl	800ba20 <_free_r>
 800b8e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b8ea:	b111      	cbz	r1, 800b8f2 <_reclaim_reent+0x5e>
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 f897 	bl	800ba20 <_free_r>
 800b8f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b8f4:	b111      	cbz	r1, 800b8fc <_reclaim_reent+0x68>
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f000 f892 	bl	800ba20 <_free_r>
 800b8fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b8fe:	b111      	cbz	r1, 800b906 <_reclaim_reent+0x72>
 800b900:	4620      	mov	r0, r4
 800b902:	f000 f88d 	bl	800ba20 <_free_r>
 800b906:	6a23      	ldr	r3, [r4, #32]
 800b908:	b1b3      	cbz	r3, 800b938 <_reclaim_reent+0xa4>
 800b90a:	4620      	mov	r0, r4
 800b90c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b910:	4718      	bx	r3
 800b912:	5949      	ldr	r1, [r1, r5]
 800b914:	b941      	cbnz	r1, 800b928 <_reclaim_reent+0x94>
 800b916:	3504      	adds	r5, #4
 800b918:	69e3      	ldr	r3, [r4, #28]
 800b91a:	2d80      	cmp	r5, #128	; 0x80
 800b91c:	68d9      	ldr	r1, [r3, #12]
 800b91e:	d1f8      	bne.n	800b912 <_reclaim_reent+0x7e>
 800b920:	4620      	mov	r0, r4
 800b922:	f000 f87d 	bl	800ba20 <_free_r>
 800b926:	e7c0      	b.n	800b8aa <_reclaim_reent+0x16>
 800b928:	680e      	ldr	r6, [r1, #0]
 800b92a:	4620      	mov	r0, r4
 800b92c:	f000 f878 	bl	800ba20 <_free_r>
 800b930:	4631      	mov	r1, r6
 800b932:	e7ef      	b.n	800b914 <_reclaim_reent+0x80>
 800b934:	2500      	movs	r5, #0
 800b936:	e7ef      	b.n	800b918 <_reclaim_reent+0x84>
 800b938:	bd70      	pop	{r4, r5, r6, pc}
 800b93a:	bf00      	nop
 800b93c:	200000c0 	.word	0x200000c0

0800b940 <_lseek_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	4d07      	ldr	r5, [pc, #28]	; (800b960 <_lseek_r+0x20>)
 800b944:	4604      	mov	r4, r0
 800b946:	4608      	mov	r0, r1
 800b948:	4611      	mov	r1, r2
 800b94a:	2200      	movs	r2, #0
 800b94c:	602a      	str	r2, [r5, #0]
 800b94e:	461a      	mov	r2, r3
 800b950:	f7f6 fbb2 	bl	80020b8 <_lseek>
 800b954:	1c43      	adds	r3, r0, #1
 800b956:	d102      	bne.n	800b95e <_lseek_r+0x1e>
 800b958:	682b      	ldr	r3, [r5, #0]
 800b95a:	b103      	cbz	r3, 800b95e <_lseek_r+0x1e>
 800b95c:	6023      	str	r3, [r4, #0]
 800b95e:	bd38      	pop	{r3, r4, r5, pc}
 800b960:	20005300 	.word	0x20005300

0800b964 <_read_r>:
 800b964:	b538      	push	{r3, r4, r5, lr}
 800b966:	4d07      	ldr	r5, [pc, #28]	; (800b984 <_read_r+0x20>)
 800b968:	4604      	mov	r4, r0
 800b96a:	4608      	mov	r0, r1
 800b96c:	4611      	mov	r1, r2
 800b96e:	2200      	movs	r2, #0
 800b970:	602a      	str	r2, [r5, #0]
 800b972:	461a      	mov	r2, r3
 800b974:	f7f6 fb40 	bl	8001ff8 <_read>
 800b978:	1c43      	adds	r3, r0, #1
 800b97a:	d102      	bne.n	800b982 <_read_r+0x1e>
 800b97c:	682b      	ldr	r3, [r5, #0]
 800b97e:	b103      	cbz	r3, 800b982 <_read_r+0x1e>
 800b980:	6023      	str	r3, [r4, #0]
 800b982:	bd38      	pop	{r3, r4, r5, pc}
 800b984:	20005300 	.word	0x20005300

0800b988 <_write_r>:
 800b988:	b538      	push	{r3, r4, r5, lr}
 800b98a:	4d07      	ldr	r5, [pc, #28]	; (800b9a8 <_write_r+0x20>)
 800b98c:	4604      	mov	r4, r0
 800b98e:	4608      	mov	r0, r1
 800b990:	4611      	mov	r1, r2
 800b992:	2200      	movs	r2, #0
 800b994:	602a      	str	r2, [r5, #0]
 800b996:	461a      	mov	r2, r3
 800b998:	f7f6 fb4b 	bl	8002032 <_write>
 800b99c:	1c43      	adds	r3, r0, #1
 800b99e:	d102      	bne.n	800b9a6 <_write_r+0x1e>
 800b9a0:	682b      	ldr	r3, [r5, #0]
 800b9a2:	b103      	cbz	r3, 800b9a6 <_write_r+0x1e>
 800b9a4:	6023      	str	r3, [r4, #0]
 800b9a6:	bd38      	pop	{r3, r4, r5, pc}
 800b9a8:	20005300 	.word	0x20005300

0800b9ac <__errno>:
 800b9ac:	4b01      	ldr	r3, [pc, #4]	; (800b9b4 <__errno+0x8>)
 800b9ae:	6818      	ldr	r0, [r3, #0]
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	200000c0 	.word	0x200000c0

0800b9b8 <__libc_init_array>:
 800b9b8:	b570      	push	{r4, r5, r6, lr}
 800b9ba:	4d0d      	ldr	r5, [pc, #52]	; (800b9f0 <__libc_init_array+0x38>)
 800b9bc:	4c0d      	ldr	r4, [pc, #52]	; (800b9f4 <__libc_init_array+0x3c>)
 800b9be:	1b64      	subs	r4, r4, r5
 800b9c0:	10a4      	asrs	r4, r4, #2
 800b9c2:	2600      	movs	r6, #0
 800b9c4:	42a6      	cmp	r6, r4
 800b9c6:	d109      	bne.n	800b9dc <__libc_init_array+0x24>
 800b9c8:	4d0b      	ldr	r5, [pc, #44]	; (800b9f8 <__libc_init_array+0x40>)
 800b9ca:	4c0c      	ldr	r4, [pc, #48]	; (800b9fc <__libc_init_array+0x44>)
 800b9cc:	f000 fdcc 	bl	800c568 <_init>
 800b9d0:	1b64      	subs	r4, r4, r5
 800b9d2:	10a4      	asrs	r4, r4, #2
 800b9d4:	2600      	movs	r6, #0
 800b9d6:	42a6      	cmp	r6, r4
 800b9d8:	d105      	bne.n	800b9e6 <__libc_init_array+0x2e>
 800b9da:	bd70      	pop	{r4, r5, r6, pc}
 800b9dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9e0:	4798      	blx	r3
 800b9e2:	3601      	adds	r6, #1
 800b9e4:	e7ee      	b.n	800b9c4 <__libc_init_array+0xc>
 800b9e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ea:	4798      	blx	r3
 800b9ec:	3601      	adds	r6, #1
 800b9ee:	e7f2      	b.n	800b9d6 <__libc_init_array+0x1e>
 800b9f0:	0800df44 	.word	0x0800df44
 800b9f4:	0800df44 	.word	0x0800df44
 800b9f8:	0800df44 	.word	0x0800df44
 800b9fc:	0800df48 	.word	0x0800df48

0800ba00 <__retarget_lock_acquire_recursive>:
 800ba00:	4770      	bx	lr

0800ba02 <__retarget_lock_release_recursive>:
 800ba02:	4770      	bx	lr

0800ba04 <memcpy>:
 800ba04:	440a      	add	r2, r1
 800ba06:	4291      	cmp	r1, r2
 800ba08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba0c:	d100      	bne.n	800ba10 <memcpy+0xc>
 800ba0e:	4770      	bx	lr
 800ba10:	b510      	push	{r4, lr}
 800ba12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba1a:	4291      	cmp	r1, r2
 800ba1c:	d1f9      	bne.n	800ba12 <memcpy+0xe>
 800ba1e:	bd10      	pop	{r4, pc}

0800ba20 <_free_r>:
 800ba20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba22:	2900      	cmp	r1, #0
 800ba24:	d044      	beq.n	800bab0 <_free_r+0x90>
 800ba26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba2a:	9001      	str	r0, [sp, #4]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f1a1 0404 	sub.w	r4, r1, #4
 800ba32:	bfb8      	it	lt
 800ba34:	18e4      	addlt	r4, r4, r3
 800ba36:	f000 f8df 	bl	800bbf8 <__malloc_lock>
 800ba3a:	4a1e      	ldr	r2, [pc, #120]	; (800bab4 <_free_r+0x94>)
 800ba3c:	9801      	ldr	r0, [sp, #4]
 800ba3e:	6813      	ldr	r3, [r2, #0]
 800ba40:	b933      	cbnz	r3, 800ba50 <_free_r+0x30>
 800ba42:	6063      	str	r3, [r4, #4]
 800ba44:	6014      	str	r4, [r2, #0]
 800ba46:	b003      	add	sp, #12
 800ba48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba4c:	f000 b8da 	b.w	800bc04 <__malloc_unlock>
 800ba50:	42a3      	cmp	r3, r4
 800ba52:	d908      	bls.n	800ba66 <_free_r+0x46>
 800ba54:	6825      	ldr	r5, [r4, #0]
 800ba56:	1961      	adds	r1, r4, r5
 800ba58:	428b      	cmp	r3, r1
 800ba5a:	bf01      	itttt	eq
 800ba5c:	6819      	ldreq	r1, [r3, #0]
 800ba5e:	685b      	ldreq	r3, [r3, #4]
 800ba60:	1949      	addeq	r1, r1, r5
 800ba62:	6021      	streq	r1, [r4, #0]
 800ba64:	e7ed      	b.n	800ba42 <_free_r+0x22>
 800ba66:	461a      	mov	r2, r3
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	b10b      	cbz	r3, 800ba70 <_free_r+0x50>
 800ba6c:	42a3      	cmp	r3, r4
 800ba6e:	d9fa      	bls.n	800ba66 <_free_r+0x46>
 800ba70:	6811      	ldr	r1, [r2, #0]
 800ba72:	1855      	adds	r5, r2, r1
 800ba74:	42a5      	cmp	r5, r4
 800ba76:	d10b      	bne.n	800ba90 <_free_r+0x70>
 800ba78:	6824      	ldr	r4, [r4, #0]
 800ba7a:	4421      	add	r1, r4
 800ba7c:	1854      	adds	r4, r2, r1
 800ba7e:	42a3      	cmp	r3, r4
 800ba80:	6011      	str	r1, [r2, #0]
 800ba82:	d1e0      	bne.n	800ba46 <_free_r+0x26>
 800ba84:	681c      	ldr	r4, [r3, #0]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	6053      	str	r3, [r2, #4]
 800ba8a:	440c      	add	r4, r1
 800ba8c:	6014      	str	r4, [r2, #0]
 800ba8e:	e7da      	b.n	800ba46 <_free_r+0x26>
 800ba90:	d902      	bls.n	800ba98 <_free_r+0x78>
 800ba92:	230c      	movs	r3, #12
 800ba94:	6003      	str	r3, [r0, #0]
 800ba96:	e7d6      	b.n	800ba46 <_free_r+0x26>
 800ba98:	6825      	ldr	r5, [r4, #0]
 800ba9a:	1961      	adds	r1, r4, r5
 800ba9c:	428b      	cmp	r3, r1
 800ba9e:	bf04      	itt	eq
 800baa0:	6819      	ldreq	r1, [r3, #0]
 800baa2:	685b      	ldreq	r3, [r3, #4]
 800baa4:	6063      	str	r3, [r4, #4]
 800baa6:	bf04      	itt	eq
 800baa8:	1949      	addeq	r1, r1, r5
 800baaa:	6021      	streq	r1, [r4, #0]
 800baac:	6054      	str	r4, [r2, #4]
 800baae:	e7ca      	b.n	800ba46 <_free_r+0x26>
 800bab0:	b003      	add	sp, #12
 800bab2:	bd30      	pop	{r4, r5, pc}
 800bab4:	20005308 	.word	0x20005308

0800bab8 <sbrk_aligned>:
 800bab8:	b570      	push	{r4, r5, r6, lr}
 800baba:	4e0e      	ldr	r6, [pc, #56]	; (800baf4 <sbrk_aligned+0x3c>)
 800babc:	460c      	mov	r4, r1
 800babe:	6831      	ldr	r1, [r6, #0]
 800bac0:	4605      	mov	r5, r0
 800bac2:	b911      	cbnz	r1, 800baca <sbrk_aligned+0x12>
 800bac4:	f000 fcbc 	bl	800c440 <_sbrk_r>
 800bac8:	6030      	str	r0, [r6, #0]
 800baca:	4621      	mov	r1, r4
 800bacc:	4628      	mov	r0, r5
 800bace:	f000 fcb7 	bl	800c440 <_sbrk_r>
 800bad2:	1c43      	adds	r3, r0, #1
 800bad4:	d00a      	beq.n	800baec <sbrk_aligned+0x34>
 800bad6:	1cc4      	adds	r4, r0, #3
 800bad8:	f024 0403 	bic.w	r4, r4, #3
 800badc:	42a0      	cmp	r0, r4
 800bade:	d007      	beq.n	800baf0 <sbrk_aligned+0x38>
 800bae0:	1a21      	subs	r1, r4, r0
 800bae2:	4628      	mov	r0, r5
 800bae4:	f000 fcac 	bl	800c440 <_sbrk_r>
 800bae8:	3001      	adds	r0, #1
 800baea:	d101      	bne.n	800baf0 <sbrk_aligned+0x38>
 800baec:	f04f 34ff 	mov.w	r4, #4294967295
 800baf0:	4620      	mov	r0, r4
 800baf2:	bd70      	pop	{r4, r5, r6, pc}
 800baf4:	2000530c 	.word	0x2000530c

0800baf8 <_malloc_r>:
 800baf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bafc:	1ccd      	adds	r5, r1, #3
 800bafe:	f025 0503 	bic.w	r5, r5, #3
 800bb02:	3508      	adds	r5, #8
 800bb04:	2d0c      	cmp	r5, #12
 800bb06:	bf38      	it	cc
 800bb08:	250c      	movcc	r5, #12
 800bb0a:	2d00      	cmp	r5, #0
 800bb0c:	4607      	mov	r7, r0
 800bb0e:	db01      	blt.n	800bb14 <_malloc_r+0x1c>
 800bb10:	42a9      	cmp	r1, r5
 800bb12:	d905      	bls.n	800bb20 <_malloc_r+0x28>
 800bb14:	230c      	movs	r3, #12
 800bb16:	603b      	str	r3, [r7, #0]
 800bb18:	2600      	movs	r6, #0
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bbf4 <_malloc_r+0xfc>
 800bb24:	f000 f868 	bl	800bbf8 <__malloc_lock>
 800bb28:	f8d8 3000 	ldr.w	r3, [r8]
 800bb2c:	461c      	mov	r4, r3
 800bb2e:	bb5c      	cbnz	r4, 800bb88 <_malloc_r+0x90>
 800bb30:	4629      	mov	r1, r5
 800bb32:	4638      	mov	r0, r7
 800bb34:	f7ff ffc0 	bl	800bab8 <sbrk_aligned>
 800bb38:	1c43      	adds	r3, r0, #1
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	d155      	bne.n	800bbea <_malloc_r+0xf2>
 800bb3e:	f8d8 4000 	ldr.w	r4, [r8]
 800bb42:	4626      	mov	r6, r4
 800bb44:	2e00      	cmp	r6, #0
 800bb46:	d145      	bne.n	800bbd4 <_malloc_r+0xdc>
 800bb48:	2c00      	cmp	r4, #0
 800bb4a:	d048      	beq.n	800bbde <_malloc_r+0xe6>
 800bb4c:	6823      	ldr	r3, [r4, #0]
 800bb4e:	4631      	mov	r1, r6
 800bb50:	4638      	mov	r0, r7
 800bb52:	eb04 0903 	add.w	r9, r4, r3
 800bb56:	f000 fc73 	bl	800c440 <_sbrk_r>
 800bb5a:	4581      	cmp	r9, r0
 800bb5c:	d13f      	bne.n	800bbde <_malloc_r+0xe6>
 800bb5e:	6821      	ldr	r1, [r4, #0]
 800bb60:	1a6d      	subs	r5, r5, r1
 800bb62:	4629      	mov	r1, r5
 800bb64:	4638      	mov	r0, r7
 800bb66:	f7ff ffa7 	bl	800bab8 <sbrk_aligned>
 800bb6a:	3001      	adds	r0, #1
 800bb6c:	d037      	beq.n	800bbde <_malloc_r+0xe6>
 800bb6e:	6823      	ldr	r3, [r4, #0]
 800bb70:	442b      	add	r3, r5
 800bb72:	6023      	str	r3, [r4, #0]
 800bb74:	f8d8 3000 	ldr.w	r3, [r8]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d038      	beq.n	800bbee <_malloc_r+0xf6>
 800bb7c:	685a      	ldr	r2, [r3, #4]
 800bb7e:	42a2      	cmp	r2, r4
 800bb80:	d12b      	bne.n	800bbda <_malloc_r+0xe2>
 800bb82:	2200      	movs	r2, #0
 800bb84:	605a      	str	r2, [r3, #4]
 800bb86:	e00f      	b.n	800bba8 <_malloc_r+0xb0>
 800bb88:	6822      	ldr	r2, [r4, #0]
 800bb8a:	1b52      	subs	r2, r2, r5
 800bb8c:	d41f      	bmi.n	800bbce <_malloc_r+0xd6>
 800bb8e:	2a0b      	cmp	r2, #11
 800bb90:	d917      	bls.n	800bbc2 <_malloc_r+0xca>
 800bb92:	1961      	adds	r1, r4, r5
 800bb94:	42a3      	cmp	r3, r4
 800bb96:	6025      	str	r5, [r4, #0]
 800bb98:	bf18      	it	ne
 800bb9a:	6059      	strne	r1, [r3, #4]
 800bb9c:	6863      	ldr	r3, [r4, #4]
 800bb9e:	bf08      	it	eq
 800bba0:	f8c8 1000 	streq.w	r1, [r8]
 800bba4:	5162      	str	r2, [r4, r5]
 800bba6:	604b      	str	r3, [r1, #4]
 800bba8:	4638      	mov	r0, r7
 800bbaa:	f104 060b 	add.w	r6, r4, #11
 800bbae:	f000 f829 	bl	800bc04 <__malloc_unlock>
 800bbb2:	f026 0607 	bic.w	r6, r6, #7
 800bbb6:	1d23      	adds	r3, r4, #4
 800bbb8:	1af2      	subs	r2, r6, r3
 800bbba:	d0ae      	beq.n	800bb1a <_malloc_r+0x22>
 800bbbc:	1b9b      	subs	r3, r3, r6
 800bbbe:	50a3      	str	r3, [r4, r2]
 800bbc0:	e7ab      	b.n	800bb1a <_malloc_r+0x22>
 800bbc2:	42a3      	cmp	r3, r4
 800bbc4:	6862      	ldr	r2, [r4, #4]
 800bbc6:	d1dd      	bne.n	800bb84 <_malloc_r+0x8c>
 800bbc8:	f8c8 2000 	str.w	r2, [r8]
 800bbcc:	e7ec      	b.n	800bba8 <_malloc_r+0xb0>
 800bbce:	4623      	mov	r3, r4
 800bbd0:	6864      	ldr	r4, [r4, #4]
 800bbd2:	e7ac      	b.n	800bb2e <_malloc_r+0x36>
 800bbd4:	4634      	mov	r4, r6
 800bbd6:	6876      	ldr	r6, [r6, #4]
 800bbd8:	e7b4      	b.n	800bb44 <_malloc_r+0x4c>
 800bbda:	4613      	mov	r3, r2
 800bbdc:	e7cc      	b.n	800bb78 <_malloc_r+0x80>
 800bbde:	230c      	movs	r3, #12
 800bbe0:	603b      	str	r3, [r7, #0]
 800bbe2:	4638      	mov	r0, r7
 800bbe4:	f000 f80e 	bl	800bc04 <__malloc_unlock>
 800bbe8:	e797      	b.n	800bb1a <_malloc_r+0x22>
 800bbea:	6025      	str	r5, [r4, #0]
 800bbec:	e7dc      	b.n	800bba8 <_malloc_r+0xb0>
 800bbee:	605b      	str	r3, [r3, #4]
 800bbf0:	deff      	udf	#255	; 0xff
 800bbf2:	bf00      	nop
 800bbf4:	20005308 	.word	0x20005308

0800bbf8 <__malloc_lock>:
 800bbf8:	4801      	ldr	r0, [pc, #4]	; (800bc00 <__malloc_lock+0x8>)
 800bbfa:	f7ff bf01 	b.w	800ba00 <__retarget_lock_acquire_recursive>
 800bbfe:	bf00      	nop
 800bc00:	20005304 	.word	0x20005304

0800bc04 <__malloc_unlock>:
 800bc04:	4801      	ldr	r0, [pc, #4]	; (800bc0c <__malloc_unlock+0x8>)
 800bc06:	f7ff befc 	b.w	800ba02 <__retarget_lock_release_recursive>
 800bc0a:	bf00      	nop
 800bc0c:	20005304 	.word	0x20005304

0800bc10 <__sfputc_r>:
 800bc10:	6893      	ldr	r3, [r2, #8]
 800bc12:	3b01      	subs	r3, #1
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	b410      	push	{r4}
 800bc18:	6093      	str	r3, [r2, #8]
 800bc1a:	da08      	bge.n	800bc2e <__sfputc_r+0x1e>
 800bc1c:	6994      	ldr	r4, [r2, #24]
 800bc1e:	42a3      	cmp	r3, r4
 800bc20:	db01      	blt.n	800bc26 <__sfputc_r+0x16>
 800bc22:	290a      	cmp	r1, #10
 800bc24:	d103      	bne.n	800bc2e <__sfputc_r+0x1e>
 800bc26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc2a:	f000 bb73 	b.w	800c314 <__swbuf_r>
 800bc2e:	6813      	ldr	r3, [r2, #0]
 800bc30:	1c58      	adds	r0, r3, #1
 800bc32:	6010      	str	r0, [r2, #0]
 800bc34:	7019      	strb	r1, [r3, #0]
 800bc36:	4608      	mov	r0, r1
 800bc38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <__sfputs_r>:
 800bc3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc40:	4606      	mov	r6, r0
 800bc42:	460f      	mov	r7, r1
 800bc44:	4614      	mov	r4, r2
 800bc46:	18d5      	adds	r5, r2, r3
 800bc48:	42ac      	cmp	r4, r5
 800bc4a:	d101      	bne.n	800bc50 <__sfputs_r+0x12>
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	e007      	b.n	800bc60 <__sfputs_r+0x22>
 800bc50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc54:	463a      	mov	r2, r7
 800bc56:	4630      	mov	r0, r6
 800bc58:	f7ff ffda 	bl	800bc10 <__sfputc_r>
 800bc5c:	1c43      	adds	r3, r0, #1
 800bc5e:	d1f3      	bne.n	800bc48 <__sfputs_r+0xa>
 800bc60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc64 <_vfiprintf_r>:
 800bc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc68:	460d      	mov	r5, r1
 800bc6a:	b09d      	sub	sp, #116	; 0x74
 800bc6c:	4614      	mov	r4, r2
 800bc6e:	4698      	mov	r8, r3
 800bc70:	4606      	mov	r6, r0
 800bc72:	b118      	cbz	r0, 800bc7c <_vfiprintf_r+0x18>
 800bc74:	6a03      	ldr	r3, [r0, #32]
 800bc76:	b90b      	cbnz	r3, 800bc7c <_vfiprintf_r+0x18>
 800bc78:	f7ff fd5a 	bl	800b730 <__sinit>
 800bc7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc7e:	07d9      	lsls	r1, r3, #31
 800bc80:	d405      	bmi.n	800bc8e <_vfiprintf_r+0x2a>
 800bc82:	89ab      	ldrh	r3, [r5, #12]
 800bc84:	059a      	lsls	r2, r3, #22
 800bc86:	d402      	bmi.n	800bc8e <_vfiprintf_r+0x2a>
 800bc88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc8a:	f7ff feb9 	bl	800ba00 <__retarget_lock_acquire_recursive>
 800bc8e:	89ab      	ldrh	r3, [r5, #12]
 800bc90:	071b      	lsls	r3, r3, #28
 800bc92:	d501      	bpl.n	800bc98 <_vfiprintf_r+0x34>
 800bc94:	692b      	ldr	r3, [r5, #16]
 800bc96:	b99b      	cbnz	r3, 800bcc0 <_vfiprintf_r+0x5c>
 800bc98:	4629      	mov	r1, r5
 800bc9a:	4630      	mov	r0, r6
 800bc9c:	f000 fb78 	bl	800c390 <__swsetup_r>
 800bca0:	b170      	cbz	r0, 800bcc0 <_vfiprintf_r+0x5c>
 800bca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bca4:	07dc      	lsls	r4, r3, #31
 800bca6:	d504      	bpl.n	800bcb2 <_vfiprintf_r+0x4e>
 800bca8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcac:	b01d      	add	sp, #116	; 0x74
 800bcae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb2:	89ab      	ldrh	r3, [r5, #12]
 800bcb4:	0598      	lsls	r0, r3, #22
 800bcb6:	d4f7      	bmi.n	800bca8 <_vfiprintf_r+0x44>
 800bcb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcba:	f7ff fea2 	bl	800ba02 <__retarget_lock_release_recursive>
 800bcbe:	e7f3      	b.n	800bca8 <_vfiprintf_r+0x44>
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	9309      	str	r3, [sp, #36]	; 0x24
 800bcc4:	2320      	movs	r3, #32
 800bcc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcca:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcce:	2330      	movs	r3, #48	; 0x30
 800bcd0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800be84 <_vfiprintf_r+0x220>
 800bcd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcd8:	f04f 0901 	mov.w	r9, #1
 800bcdc:	4623      	mov	r3, r4
 800bcde:	469a      	mov	sl, r3
 800bce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bce4:	b10a      	cbz	r2, 800bcea <_vfiprintf_r+0x86>
 800bce6:	2a25      	cmp	r2, #37	; 0x25
 800bce8:	d1f9      	bne.n	800bcde <_vfiprintf_r+0x7a>
 800bcea:	ebba 0b04 	subs.w	fp, sl, r4
 800bcee:	d00b      	beq.n	800bd08 <_vfiprintf_r+0xa4>
 800bcf0:	465b      	mov	r3, fp
 800bcf2:	4622      	mov	r2, r4
 800bcf4:	4629      	mov	r1, r5
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	f7ff ffa1 	bl	800bc3e <__sfputs_r>
 800bcfc:	3001      	adds	r0, #1
 800bcfe:	f000 80a9 	beq.w	800be54 <_vfiprintf_r+0x1f0>
 800bd02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd04:	445a      	add	r2, fp
 800bd06:	9209      	str	r2, [sp, #36]	; 0x24
 800bd08:	f89a 3000 	ldrb.w	r3, [sl]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f000 80a1 	beq.w	800be54 <_vfiprintf_r+0x1f0>
 800bd12:	2300      	movs	r3, #0
 800bd14:	f04f 32ff 	mov.w	r2, #4294967295
 800bd18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd1c:	f10a 0a01 	add.w	sl, sl, #1
 800bd20:	9304      	str	r3, [sp, #16]
 800bd22:	9307      	str	r3, [sp, #28]
 800bd24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd28:	931a      	str	r3, [sp, #104]	; 0x68
 800bd2a:	4654      	mov	r4, sl
 800bd2c:	2205      	movs	r2, #5
 800bd2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd32:	4854      	ldr	r0, [pc, #336]	; (800be84 <_vfiprintf_r+0x220>)
 800bd34:	f7f4 fa84 	bl	8000240 <memchr>
 800bd38:	9a04      	ldr	r2, [sp, #16]
 800bd3a:	b9d8      	cbnz	r0, 800bd74 <_vfiprintf_r+0x110>
 800bd3c:	06d1      	lsls	r1, r2, #27
 800bd3e:	bf44      	itt	mi
 800bd40:	2320      	movmi	r3, #32
 800bd42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd46:	0713      	lsls	r3, r2, #28
 800bd48:	bf44      	itt	mi
 800bd4a:	232b      	movmi	r3, #43	; 0x2b
 800bd4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd50:	f89a 3000 	ldrb.w	r3, [sl]
 800bd54:	2b2a      	cmp	r3, #42	; 0x2a
 800bd56:	d015      	beq.n	800bd84 <_vfiprintf_r+0x120>
 800bd58:	9a07      	ldr	r2, [sp, #28]
 800bd5a:	4654      	mov	r4, sl
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	f04f 0c0a 	mov.w	ip, #10
 800bd62:	4621      	mov	r1, r4
 800bd64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd68:	3b30      	subs	r3, #48	; 0x30
 800bd6a:	2b09      	cmp	r3, #9
 800bd6c:	d94d      	bls.n	800be0a <_vfiprintf_r+0x1a6>
 800bd6e:	b1b0      	cbz	r0, 800bd9e <_vfiprintf_r+0x13a>
 800bd70:	9207      	str	r2, [sp, #28]
 800bd72:	e014      	b.n	800bd9e <_vfiprintf_r+0x13a>
 800bd74:	eba0 0308 	sub.w	r3, r0, r8
 800bd78:	fa09 f303 	lsl.w	r3, r9, r3
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	9304      	str	r3, [sp, #16]
 800bd80:	46a2      	mov	sl, r4
 800bd82:	e7d2      	b.n	800bd2a <_vfiprintf_r+0xc6>
 800bd84:	9b03      	ldr	r3, [sp, #12]
 800bd86:	1d19      	adds	r1, r3, #4
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	9103      	str	r1, [sp, #12]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	bfbb      	ittet	lt
 800bd90:	425b      	neglt	r3, r3
 800bd92:	f042 0202 	orrlt.w	r2, r2, #2
 800bd96:	9307      	strge	r3, [sp, #28]
 800bd98:	9307      	strlt	r3, [sp, #28]
 800bd9a:	bfb8      	it	lt
 800bd9c:	9204      	strlt	r2, [sp, #16]
 800bd9e:	7823      	ldrb	r3, [r4, #0]
 800bda0:	2b2e      	cmp	r3, #46	; 0x2e
 800bda2:	d10c      	bne.n	800bdbe <_vfiprintf_r+0x15a>
 800bda4:	7863      	ldrb	r3, [r4, #1]
 800bda6:	2b2a      	cmp	r3, #42	; 0x2a
 800bda8:	d134      	bne.n	800be14 <_vfiprintf_r+0x1b0>
 800bdaa:	9b03      	ldr	r3, [sp, #12]
 800bdac:	1d1a      	adds	r2, r3, #4
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	9203      	str	r2, [sp, #12]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	bfb8      	it	lt
 800bdb6:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdba:	3402      	adds	r4, #2
 800bdbc:	9305      	str	r3, [sp, #20]
 800bdbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800be94 <_vfiprintf_r+0x230>
 800bdc2:	7821      	ldrb	r1, [r4, #0]
 800bdc4:	2203      	movs	r2, #3
 800bdc6:	4650      	mov	r0, sl
 800bdc8:	f7f4 fa3a 	bl	8000240 <memchr>
 800bdcc:	b138      	cbz	r0, 800bdde <_vfiprintf_r+0x17a>
 800bdce:	9b04      	ldr	r3, [sp, #16]
 800bdd0:	eba0 000a 	sub.w	r0, r0, sl
 800bdd4:	2240      	movs	r2, #64	; 0x40
 800bdd6:	4082      	lsls	r2, r0
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	3401      	adds	r4, #1
 800bddc:	9304      	str	r3, [sp, #16]
 800bdde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bde2:	4829      	ldr	r0, [pc, #164]	; (800be88 <_vfiprintf_r+0x224>)
 800bde4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bde8:	2206      	movs	r2, #6
 800bdea:	f7f4 fa29 	bl	8000240 <memchr>
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	d03f      	beq.n	800be72 <_vfiprintf_r+0x20e>
 800bdf2:	4b26      	ldr	r3, [pc, #152]	; (800be8c <_vfiprintf_r+0x228>)
 800bdf4:	bb1b      	cbnz	r3, 800be3e <_vfiprintf_r+0x1da>
 800bdf6:	9b03      	ldr	r3, [sp, #12]
 800bdf8:	3307      	adds	r3, #7
 800bdfa:	f023 0307 	bic.w	r3, r3, #7
 800bdfe:	3308      	adds	r3, #8
 800be00:	9303      	str	r3, [sp, #12]
 800be02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be04:	443b      	add	r3, r7
 800be06:	9309      	str	r3, [sp, #36]	; 0x24
 800be08:	e768      	b.n	800bcdc <_vfiprintf_r+0x78>
 800be0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800be0e:	460c      	mov	r4, r1
 800be10:	2001      	movs	r0, #1
 800be12:	e7a6      	b.n	800bd62 <_vfiprintf_r+0xfe>
 800be14:	2300      	movs	r3, #0
 800be16:	3401      	adds	r4, #1
 800be18:	9305      	str	r3, [sp, #20]
 800be1a:	4619      	mov	r1, r3
 800be1c:	f04f 0c0a 	mov.w	ip, #10
 800be20:	4620      	mov	r0, r4
 800be22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be26:	3a30      	subs	r2, #48	; 0x30
 800be28:	2a09      	cmp	r2, #9
 800be2a:	d903      	bls.n	800be34 <_vfiprintf_r+0x1d0>
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d0c6      	beq.n	800bdbe <_vfiprintf_r+0x15a>
 800be30:	9105      	str	r1, [sp, #20]
 800be32:	e7c4      	b.n	800bdbe <_vfiprintf_r+0x15a>
 800be34:	fb0c 2101 	mla	r1, ip, r1, r2
 800be38:	4604      	mov	r4, r0
 800be3a:	2301      	movs	r3, #1
 800be3c:	e7f0      	b.n	800be20 <_vfiprintf_r+0x1bc>
 800be3e:	ab03      	add	r3, sp, #12
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	462a      	mov	r2, r5
 800be44:	4b12      	ldr	r3, [pc, #72]	; (800be90 <_vfiprintf_r+0x22c>)
 800be46:	a904      	add	r1, sp, #16
 800be48:	4630      	mov	r0, r6
 800be4a:	f3af 8000 	nop.w
 800be4e:	4607      	mov	r7, r0
 800be50:	1c78      	adds	r0, r7, #1
 800be52:	d1d6      	bne.n	800be02 <_vfiprintf_r+0x19e>
 800be54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be56:	07d9      	lsls	r1, r3, #31
 800be58:	d405      	bmi.n	800be66 <_vfiprintf_r+0x202>
 800be5a:	89ab      	ldrh	r3, [r5, #12]
 800be5c:	059a      	lsls	r2, r3, #22
 800be5e:	d402      	bmi.n	800be66 <_vfiprintf_r+0x202>
 800be60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be62:	f7ff fdce 	bl	800ba02 <__retarget_lock_release_recursive>
 800be66:	89ab      	ldrh	r3, [r5, #12]
 800be68:	065b      	lsls	r3, r3, #25
 800be6a:	f53f af1d 	bmi.w	800bca8 <_vfiprintf_r+0x44>
 800be6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be70:	e71c      	b.n	800bcac <_vfiprintf_r+0x48>
 800be72:	ab03      	add	r3, sp, #12
 800be74:	9300      	str	r3, [sp, #0]
 800be76:	462a      	mov	r2, r5
 800be78:	4b05      	ldr	r3, [pc, #20]	; (800be90 <_vfiprintf_r+0x22c>)
 800be7a:	a904      	add	r1, sp, #16
 800be7c:	4630      	mov	r0, r6
 800be7e:	f000 f879 	bl	800bf74 <_printf_i>
 800be82:	e7e4      	b.n	800be4e <_vfiprintf_r+0x1ea>
 800be84:	0800df08 	.word	0x0800df08
 800be88:	0800df12 	.word	0x0800df12
 800be8c:	00000000 	.word	0x00000000
 800be90:	0800bc3f 	.word	0x0800bc3f
 800be94:	0800df0e 	.word	0x0800df0e

0800be98 <_printf_common>:
 800be98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be9c:	4616      	mov	r6, r2
 800be9e:	4699      	mov	r9, r3
 800bea0:	688a      	ldr	r2, [r1, #8]
 800bea2:	690b      	ldr	r3, [r1, #16]
 800bea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bea8:	4293      	cmp	r3, r2
 800beaa:	bfb8      	it	lt
 800beac:	4613      	movlt	r3, r2
 800beae:	6033      	str	r3, [r6, #0]
 800beb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800beb4:	4607      	mov	r7, r0
 800beb6:	460c      	mov	r4, r1
 800beb8:	b10a      	cbz	r2, 800bebe <_printf_common+0x26>
 800beba:	3301      	adds	r3, #1
 800bebc:	6033      	str	r3, [r6, #0]
 800bebe:	6823      	ldr	r3, [r4, #0]
 800bec0:	0699      	lsls	r1, r3, #26
 800bec2:	bf42      	ittt	mi
 800bec4:	6833      	ldrmi	r3, [r6, #0]
 800bec6:	3302      	addmi	r3, #2
 800bec8:	6033      	strmi	r3, [r6, #0]
 800beca:	6825      	ldr	r5, [r4, #0]
 800becc:	f015 0506 	ands.w	r5, r5, #6
 800bed0:	d106      	bne.n	800bee0 <_printf_common+0x48>
 800bed2:	f104 0a19 	add.w	sl, r4, #25
 800bed6:	68e3      	ldr	r3, [r4, #12]
 800bed8:	6832      	ldr	r2, [r6, #0]
 800beda:	1a9b      	subs	r3, r3, r2
 800bedc:	42ab      	cmp	r3, r5
 800bede:	dc26      	bgt.n	800bf2e <_printf_common+0x96>
 800bee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bee4:	1e13      	subs	r3, r2, #0
 800bee6:	6822      	ldr	r2, [r4, #0]
 800bee8:	bf18      	it	ne
 800beea:	2301      	movne	r3, #1
 800beec:	0692      	lsls	r2, r2, #26
 800beee:	d42b      	bmi.n	800bf48 <_printf_common+0xb0>
 800bef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bef4:	4649      	mov	r1, r9
 800bef6:	4638      	mov	r0, r7
 800bef8:	47c0      	blx	r8
 800befa:	3001      	adds	r0, #1
 800befc:	d01e      	beq.n	800bf3c <_printf_common+0xa4>
 800befe:	6823      	ldr	r3, [r4, #0]
 800bf00:	6922      	ldr	r2, [r4, #16]
 800bf02:	f003 0306 	and.w	r3, r3, #6
 800bf06:	2b04      	cmp	r3, #4
 800bf08:	bf02      	ittt	eq
 800bf0a:	68e5      	ldreq	r5, [r4, #12]
 800bf0c:	6833      	ldreq	r3, [r6, #0]
 800bf0e:	1aed      	subeq	r5, r5, r3
 800bf10:	68a3      	ldr	r3, [r4, #8]
 800bf12:	bf0c      	ite	eq
 800bf14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf18:	2500      	movne	r5, #0
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	bfc4      	itt	gt
 800bf1e:	1a9b      	subgt	r3, r3, r2
 800bf20:	18ed      	addgt	r5, r5, r3
 800bf22:	2600      	movs	r6, #0
 800bf24:	341a      	adds	r4, #26
 800bf26:	42b5      	cmp	r5, r6
 800bf28:	d11a      	bne.n	800bf60 <_printf_common+0xc8>
 800bf2a:	2000      	movs	r0, #0
 800bf2c:	e008      	b.n	800bf40 <_printf_common+0xa8>
 800bf2e:	2301      	movs	r3, #1
 800bf30:	4652      	mov	r2, sl
 800bf32:	4649      	mov	r1, r9
 800bf34:	4638      	mov	r0, r7
 800bf36:	47c0      	blx	r8
 800bf38:	3001      	adds	r0, #1
 800bf3a:	d103      	bne.n	800bf44 <_printf_common+0xac>
 800bf3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf44:	3501      	adds	r5, #1
 800bf46:	e7c6      	b.n	800bed6 <_printf_common+0x3e>
 800bf48:	18e1      	adds	r1, r4, r3
 800bf4a:	1c5a      	adds	r2, r3, #1
 800bf4c:	2030      	movs	r0, #48	; 0x30
 800bf4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf52:	4422      	add	r2, r4
 800bf54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf5c:	3302      	adds	r3, #2
 800bf5e:	e7c7      	b.n	800bef0 <_printf_common+0x58>
 800bf60:	2301      	movs	r3, #1
 800bf62:	4622      	mov	r2, r4
 800bf64:	4649      	mov	r1, r9
 800bf66:	4638      	mov	r0, r7
 800bf68:	47c0      	blx	r8
 800bf6a:	3001      	adds	r0, #1
 800bf6c:	d0e6      	beq.n	800bf3c <_printf_common+0xa4>
 800bf6e:	3601      	adds	r6, #1
 800bf70:	e7d9      	b.n	800bf26 <_printf_common+0x8e>
	...

0800bf74 <_printf_i>:
 800bf74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf78:	7e0f      	ldrb	r7, [r1, #24]
 800bf7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf7c:	2f78      	cmp	r7, #120	; 0x78
 800bf7e:	4691      	mov	r9, r2
 800bf80:	4680      	mov	r8, r0
 800bf82:	460c      	mov	r4, r1
 800bf84:	469a      	mov	sl, r3
 800bf86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf8a:	d807      	bhi.n	800bf9c <_printf_i+0x28>
 800bf8c:	2f62      	cmp	r7, #98	; 0x62
 800bf8e:	d80a      	bhi.n	800bfa6 <_printf_i+0x32>
 800bf90:	2f00      	cmp	r7, #0
 800bf92:	f000 80d4 	beq.w	800c13e <_printf_i+0x1ca>
 800bf96:	2f58      	cmp	r7, #88	; 0x58
 800bf98:	f000 80c0 	beq.w	800c11c <_printf_i+0x1a8>
 800bf9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfa4:	e03a      	b.n	800c01c <_printf_i+0xa8>
 800bfa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bfaa:	2b15      	cmp	r3, #21
 800bfac:	d8f6      	bhi.n	800bf9c <_printf_i+0x28>
 800bfae:	a101      	add	r1, pc, #4	; (adr r1, 800bfb4 <_printf_i+0x40>)
 800bfb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfb4:	0800c00d 	.word	0x0800c00d
 800bfb8:	0800c021 	.word	0x0800c021
 800bfbc:	0800bf9d 	.word	0x0800bf9d
 800bfc0:	0800bf9d 	.word	0x0800bf9d
 800bfc4:	0800bf9d 	.word	0x0800bf9d
 800bfc8:	0800bf9d 	.word	0x0800bf9d
 800bfcc:	0800c021 	.word	0x0800c021
 800bfd0:	0800bf9d 	.word	0x0800bf9d
 800bfd4:	0800bf9d 	.word	0x0800bf9d
 800bfd8:	0800bf9d 	.word	0x0800bf9d
 800bfdc:	0800bf9d 	.word	0x0800bf9d
 800bfe0:	0800c125 	.word	0x0800c125
 800bfe4:	0800c04d 	.word	0x0800c04d
 800bfe8:	0800c0df 	.word	0x0800c0df
 800bfec:	0800bf9d 	.word	0x0800bf9d
 800bff0:	0800bf9d 	.word	0x0800bf9d
 800bff4:	0800c147 	.word	0x0800c147
 800bff8:	0800bf9d 	.word	0x0800bf9d
 800bffc:	0800c04d 	.word	0x0800c04d
 800c000:	0800bf9d 	.word	0x0800bf9d
 800c004:	0800bf9d 	.word	0x0800bf9d
 800c008:	0800c0e7 	.word	0x0800c0e7
 800c00c:	682b      	ldr	r3, [r5, #0]
 800c00e:	1d1a      	adds	r2, r3, #4
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	602a      	str	r2, [r5, #0]
 800c014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c01c:	2301      	movs	r3, #1
 800c01e:	e09f      	b.n	800c160 <_printf_i+0x1ec>
 800c020:	6820      	ldr	r0, [r4, #0]
 800c022:	682b      	ldr	r3, [r5, #0]
 800c024:	0607      	lsls	r7, r0, #24
 800c026:	f103 0104 	add.w	r1, r3, #4
 800c02a:	6029      	str	r1, [r5, #0]
 800c02c:	d501      	bpl.n	800c032 <_printf_i+0xbe>
 800c02e:	681e      	ldr	r6, [r3, #0]
 800c030:	e003      	b.n	800c03a <_printf_i+0xc6>
 800c032:	0646      	lsls	r6, r0, #25
 800c034:	d5fb      	bpl.n	800c02e <_printf_i+0xba>
 800c036:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c03a:	2e00      	cmp	r6, #0
 800c03c:	da03      	bge.n	800c046 <_printf_i+0xd2>
 800c03e:	232d      	movs	r3, #45	; 0x2d
 800c040:	4276      	negs	r6, r6
 800c042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c046:	485a      	ldr	r0, [pc, #360]	; (800c1b0 <_printf_i+0x23c>)
 800c048:	230a      	movs	r3, #10
 800c04a:	e012      	b.n	800c072 <_printf_i+0xfe>
 800c04c:	682b      	ldr	r3, [r5, #0]
 800c04e:	6820      	ldr	r0, [r4, #0]
 800c050:	1d19      	adds	r1, r3, #4
 800c052:	6029      	str	r1, [r5, #0]
 800c054:	0605      	lsls	r5, r0, #24
 800c056:	d501      	bpl.n	800c05c <_printf_i+0xe8>
 800c058:	681e      	ldr	r6, [r3, #0]
 800c05a:	e002      	b.n	800c062 <_printf_i+0xee>
 800c05c:	0641      	lsls	r1, r0, #25
 800c05e:	d5fb      	bpl.n	800c058 <_printf_i+0xe4>
 800c060:	881e      	ldrh	r6, [r3, #0]
 800c062:	4853      	ldr	r0, [pc, #332]	; (800c1b0 <_printf_i+0x23c>)
 800c064:	2f6f      	cmp	r7, #111	; 0x6f
 800c066:	bf0c      	ite	eq
 800c068:	2308      	moveq	r3, #8
 800c06a:	230a      	movne	r3, #10
 800c06c:	2100      	movs	r1, #0
 800c06e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c072:	6865      	ldr	r5, [r4, #4]
 800c074:	60a5      	str	r5, [r4, #8]
 800c076:	2d00      	cmp	r5, #0
 800c078:	bfa2      	ittt	ge
 800c07a:	6821      	ldrge	r1, [r4, #0]
 800c07c:	f021 0104 	bicge.w	r1, r1, #4
 800c080:	6021      	strge	r1, [r4, #0]
 800c082:	b90e      	cbnz	r6, 800c088 <_printf_i+0x114>
 800c084:	2d00      	cmp	r5, #0
 800c086:	d04b      	beq.n	800c120 <_printf_i+0x1ac>
 800c088:	4615      	mov	r5, r2
 800c08a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c08e:	fb03 6711 	mls	r7, r3, r1, r6
 800c092:	5dc7      	ldrb	r7, [r0, r7]
 800c094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c098:	4637      	mov	r7, r6
 800c09a:	42bb      	cmp	r3, r7
 800c09c:	460e      	mov	r6, r1
 800c09e:	d9f4      	bls.n	800c08a <_printf_i+0x116>
 800c0a0:	2b08      	cmp	r3, #8
 800c0a2:	d10b      	bne.n	800c0bc <_printf_i+0x148>
 800c0a4:	6823      	ldr	r3, [r4, #0]
 800c0a6:	07de      	lsls	r6, r3, #31
 800c0a8:	d508      	bpl.n	800c0bc <_printf_i+0x148>
 800c0aa:	6923      	ldr	r3, [r4, #16]
 800c0ac:	6861      	ldr	r1, [r4, #4]
 800c0ae:	4299      	cmp	r1, r3
 800c0b0:	bfde      	ittt	le
 800c0b2:	2330      	movle	r3, #48	; 0x30
 800c0b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c0bc:	1b52      	subs	r2, r2, r5
 800c0be:	6122      	str	r2, [r4, #16]
 800c0c0:	f8cd a000 	str.w	sl, [sp]
 800c0c4:	464b      	mov	r3, r9
 800c0c6:	aa03      	add	r2, sp, #12
 800c0c8:	4621      	mov	r1, r4
 800c0ca:	4640      	mov	r0, r8
 800c0cc:	f7ff fee4 	bl	800be98 <_printf_common>
 800c0d0:	3001      	adds	r0, #1
 800c0d2:	d14a      	bne.n	800c16a <_printf_i+0x1f6>
 800c0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d8:	b004      	add	sp, #16
 800c0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0de:	6823      	ldr	r3, [r4, #0]
 800c0e0:	f043 0320 	orr.w	r3, r3, #32
 800c0e4:	6023      	str	r3, [r4, #0]
 800c0e6:	4833      	ldr	r0, [pc, #204]	; (800c1b4 <_printf_i+0x240>)
 800c0e8:	2778      	movs	r7, #120	; 0x78
 800c0ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c0ee:	6823      	ldr	r3, [r4, #0]
 800c0f0:	6829      	ldr	r1, [r5, #0]
 800c0f2:	061f      	lsls	r7, r3, #24
 800c0f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c0f8:	d402      	bmi.n	800c100 <_printf_i+0x18c>
 800c0fa:	065f      	lsls	r7, r3, #25
 800c0fc:	bf48      	it	mi
 800c0fe:	b2b6      	uxthmi	r6, r6
 800c100:	07df      	lsls	r7, r3, #31
 800c102:	bf48      	it	mi
 800c104:	f043 0320 	orrmi.w	r3, r3, #32
 800c108:	6029      	str	r1, [r5, #0]
 800c10a:	bf48      	it	mi
 800c10c:	6023      	strmi	r3, [r4, #0]
 800c10e:	b91e      	cbnz	r6, 800c118 <_printf_i+0x1a4>
 800c110:	6823      	ldr	r3, [r4, #0]
 800c112:	f023 0320 	bic.w	r3, r3, #32
 800c116:	6023      	str	r3, [r4, #0]
 800c118:	2310      	movs	r3, #16
 800c11a:	e7a7      	b.n	800c06c <_printf_i+0xf8>
 800c11c:	4824      	ldr	r0, [pc, #144]	; (800c1b0 <_printf_i+0x23c>)
 800c11e:	e7e4      	b.n	800c0ea <_printf_i+0x176>
 800c120:	4615      	mov	r5, r2
 800c122:	e7bd      	b.n	800c0a0 <_printf_i+0x12c>
 800c124:	682b      	ldr	r3, [r5, #0]
 800c126:	6826      	ldr	r6, [r4, #0]
 800c128:	6961      	ldr	r1, [r4, #20]
 800c12a:	1d18      	adds	r0, r3, #4
 800c12c:	6028      	str	r0, [r5, #0]
 800c12e:	0635      	lsls	r5, r6, #24
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	d501      	bpl.n	800c138 <_printf_i+0x1c4>
 800c134:	6019      	str	r1, [r3, #0]
 800c136:	e002      	b.n	800c13e <_printf_i+0x1ca>
 800c138:	0670      	lsls	r0, r6, #25
 800c13a:	d5fb      	bpl.n	800c134 <_printf_i+0x1c0>
 800c13c:	8019      	strh	r1, [r3, #0]
 800c13e:	2300      	movs	r3, #0
 800c140:	6123      	str	r3, [r4, #16]
 800c142:	4615      	mov	r5, r2
 800c144:	e7bc      	b.n	800c0c0 <_printf_i+0x14c>
 800c146:	682b      	ldr	r3, [r5, #0]
 800c148:	1d1a      	adds	r2, r3, #4
 800c14a:	602a      	str	r2, [r5, #0]
 800c14c:	681d      	ldr	r5, [r3, #0]
 800c14e:	6862      	ldr	r2, [r4, #4]
 800c150:	2100      	movs	r1, #0
 800c152:	4628      	mov	r0, r5
 800c154:	f7f4 f874 	bl	8000240 <memchr>
 800c158:	b108      	cbz	r0, 800c15e <_printf_i+0x1ea>
 800c15a:	1b40      	subs	r0, r0, r5
 800c15c:	6060      	str	r0, [r4, #4]
 800c15e:	6863      	ldr	r3, [r4, #4]
 800c160:	6123      	str	r3, [r4, #16]
 800c162:	2300      	movs	r3, #0
 800c164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c168:	e7aa      	b.n	800c0c0 <_printf_i+0x14c>
 800c16a:	6923      	ldr	r3, [r4, #16]
 800c16c:	462a      	mov	r2, r5
 800c16e:	4649      	mov	r1, r9
 800c170:	4640      	mov	r0, r8
 800c172:	47d0      	blx	sl
 800c174:	3001      	adds	r0, #1
 800c176:	d0ad      	beq.n	800c0d4 <_printf_i+0x160>
 800c178:	6823      	ldr	r3, [r4, #0]
 800c17a:	079b      	lsls	r3, r3, #30
 800c17c:	d413      	bmi.n	800c1a6 <_printf_i+0x232>
 800c17e:	68e0      	ldr	r0, [r4, #12]
 800c180:	9b03      	ldr	r3, [sp, #12]
 800c182:	4298      	cmp	r0, r3
 800c184:	bfb8      	it	lt
 800c186:	4618      	movlt	r0, r3
 800c188:	e7a6      	b.n	800c0d8 <_printf_i+0x164>
 800c18a:	2301      	movs	r3, #1
 800c18c:	4632      	mov	r2, r6
 800c18e:	4649      	mov	r1, r9
 800c190:	4640      	mov	r0, r8
 800c192:	47d0      	blx	sl
 800c194:	3001      	adds	r0, #1
 800c196:	d09d      	beq.n	800c0d4 <_printf_i+0x160>
 800c198:	3501      	adds	r5, #1
 800c19a:	68e3      	ldr	r3, [r4, #12]
 800c19c:	9903      	ldr	r1, [sp, #12]
 800c19e:	1a5b      	subs	r3, r3, r1
 800c1a0:	42ab      	cmp	r3, r5
 800c1a2:	dcf2      	bgt.n	800c18a <_printf_i+0x216>
 800c1a4:	e7eb      	b.n	800c17e <_printf_i+0x20a>
 800c1a6:	2500      	movs	r5, #0
 800c1a8:	f104 0619 	add.w	r6, r4, #25
 800c1ac:	e7f5      	b.n	800c19a <_printf_i+0x226>
 800c1ae:	bf00      	nop
 800c1b0:	0800df19 	.word	0x0800df19
 800c1b4:	0800df2a 	.word	0x0800df2a

0800c1b8 <__sflush_r>:
 800c1b8:	898a      	ldrh	r2, [r1, #12]
 800c1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1be:	4605      	mov	r5, r0
 800c1c0:	0710      	lsls	r0, r2, #28
 800c1c2:	460c      	mov	r4, r1
 800c1c4:	d458      	bmi.n	800c278 <__sflush_r+0xc0>
 800c1c6:	684b      	ldr	r3, [r1, #4]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	dc05      	bgt.n	800c1d8 <__sflush_r+0x20>
 800c1cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	dc02      	bgt.n	800c1d8 <__sflush_r+0x20>
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1da:	2e00      	cmp	r6, #0
 800c1dc:	d0f9      	beq.n	800c1d2 <__sflush_r+0x1a>
 800c1de:	2300      	movs	r3, #0
 800c1e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1e4:	682f      	ldr	r7, [r5, #0]
 800c1e6:	6a21      	ldr	r1, [r4, #32]
 800c1e8:	602b      	str	r3, [r5, #0]
 800c1ea:	d032      	beq.n	800c252 <__sflush_r+0x9a>
 800c1ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1ee:	89a3      	ldrh	r3, [r4, #12]
 800c1f0:	075a      	lsls	r2, r3, #29
 800c1f2:	d505      	bpl.n	800c200 <__sflush_r+0x48>
 800c1f4:	6863      	ldr	r3, [r4, #4]
 800c1f6:	1ac0      	subs	r0, r0, r3
 800c1f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1fa:	b10b      	cbz	r3, 800c200 <__sflush_r+0x48>
 800c1fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1fe:	1ac0      	subs	r0, r0, r3
 800c200:	2300      	movs	r3, #0
 800c202:	4602      	mov	r2, r0
 800c204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c206:	6a21      	ldr	r1, [r4, #32]
 800c208:	4628      	mov	r0, r5
 800c20a:	47b0      	blx	r6
 800c20c:	1c43      	adds	r3, r0, #1
 800c20e:	89a3      	ldrh	r3, [r4, #12]
 800c210:	d106      	bne.n	800c220 <__sflush_r+0x68>
 800c212:	6829      	ldr	r1, [r5, #0]
 800c214:	291d      	cmp	r1, #29
 800c216:	d82b      	bhi.n	800c270 <__sflush_r+0xb8>
 800c218:	4a29      	ldr	r2, [pc, #164]	; (800c2c0 <__sflush_r+0x108>)
 800c21a:	410a      	asrs	r2, r1
 800c21c:	07d6      	lsls	r6, r2, #31
 800c21e:	d427      	bmi.n	800c270 <__sflush_r+0xb8>
 800c220:	2200      	movs	r2, #0
 800c222:	6062      	str	r2, [r4, #4]
 800c224:	04d9      	lsls	r1, r3, #19
 800c226:	6922      	ldr	r2, [r4, #16]
 800c228:	6022      	str	r2, [r4, #0]
 800c22a:	d504      	bpl.n	800c236 <__sflush_r+0x7e>
 800c22c:	1c42      	adds	r2, r0, #1
 800c22e:	d101      	bne.n	800c234 <__sflush_r+0x7c>
 800c230:	682b      	ldr	r3, [r5, #0]
 800c232:	b903      	cbnz	r3, 800c236 <__sflush_r+0x7e>
 800c234:	6560      	str	r0, [r4, #84]	; 0x54
 800c236:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c238:	602f      	str	r7, [r5, #0]
 800c23a:	2900      	cmp	r1, #0
 800c23c:	d0c9      	beq.n	800c1d2 <__sflush_r+0x1a>
 800c23e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c242:	4299      	cmp	r1, r3
 800c244:	d002      	beq.n	800c24c <__sflush_r+0x94>
 800c246:	4628      	mov	r0, r5
 800c248:	f7ff fbea 	bl	800ba20 <_free_r>
 800c24c:	2000      	movs	r0, #0
 800c24e:	6360      	str	r0, [r4, #52]	; 0x34
 800c250:	e7c0      	b.n	800c1d4 <__sflush_r+0x1c>
 800c252:	2301      	movs	r3, #1
 800c254:	4628      	mov	r0, r5
 800c256:	47b0      	blx	r6
 800c258:	1c41      	adds	r1, r0, #1
 800c25a:	d1c8      	bne.n	800c1ee <__sflush_r+0x36>
 800c25c:	682b      	ldr	r3, [r5, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d0c5      	beq.n	800c1ee <__sflush_r+0x36>
 800c262:	2b1d      	cmp	r3, #29
 800c264:	d001      	beq.n	800c26a <__sflush_r+0xb2>
 800c266:	2b16      	cmp	r3, #22
 800c268:	d101      	bne.n	800c26e <__sflush_r+0xb6>
 800c26a:	602f      	str	r7, [r5, #0]
 800c26c:	e7b1      	b.n	800c1d2 <__sflush_r+0x1a>
 800c26e:	89a3      	ldrh	r3, [r4, #12]
 800c270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c274:	81a3      	strh	r3, [r4, #12]
 800c276:	e7ad      	b.n	800c1d4 <__sflush_r+0x1c>
 800c278:	690f      	ldr	r7, [r1, #16]
 800c27a:	2f00      	cmp	r7, #0
 800c27c:	d0a9      	beq.n	800c1d2 <__sflush_r+0x1a>
 800c27e:	0793      	lsls	r3, r2, #30
 800c280:	680e      	ldr	r6, [r1, #0]
 800c282:	bf08      	it	eq
 800c284:	694b      	ldreq	r3, [r1, #20]
 800c286:	600f      	str	r7, [r1, #0]
 800c288:	bf18      	it	ne
 800c28a:	2300      	movne	r3, #0
 800c28c:	eba6 0807 	sub.w	r8, r6, r7
 800c290:	608b      	str	r3, [r1, #8]
 800c292:	f1b8 0f00 	cmp.w	r8, #0
 800c296:	dd9c      	ble.n	800c1d2 <__sflush_r+0x1a>
 800c298:	6a21      	ldr	r1, [r4, #32]
 800c29a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c29c:	4643      	mov	r3, r8
 800c29e:	463a      	mov	r2, r7
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	47b0      	blx	r6
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	dc06      	bgt.n	800c2b6 <__sflush_r+0xfe>
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ae:	81a3      	strh	r3, [r4, #12]
 800c2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b4:	e78e      	b.n	800c1d4 <__sflush_r+0x1c>
 800c2b6:	4407      	add	r7, r0
 800c2b8:	eba8 0800 	sub.w	r8, r8, r0
 800c2bc:	e7e9      	b.n	800c292 <__sflush_r+0xda>
 800c2be:	bf00      	nop
 800c2c0:	dfbffffe 	.word	0xdfbffffe

0800c2c4 <_fflush_r>:
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	690b      	ldr	r3, [r1, #16]
 800c2c8:	4605      	mov	r5, r0
 800c2ca:	460c      	mov	r4, r1
 800c2cc:	b913      	cbnz	r3, 800c2d4 <_fflush_r+0x10>
 800c2ce:	2500      	movs	r5, #0
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	bd38      	pop	{r3, r4, r5, pc}
 800c2d4:	b118      	cbz	r0, 800c2de <_fflush_r+0x1a>
 800c2d6:	6a03      	ldr	r3, [r0, #32]
 800c2d8:	b90b      	cbnz	r3, 800c2de <_fflush_r+0x1a>
 800c2da:	f7ff fa29 	bl	800b730 <__sinit>
 800c2de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d0f3      	beq.n	800c2ce <_fflush_r+0xa>
 800c2e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2e8:	07d0      	lsls	r0, r2, #31
 800c2ea:	d404      	bmi.n	800c2f6 <_fflush_r+0x32>
 800c2ec:	0599      	lsls	r1, r3, #22
 800c2ee:	d402      	bmi.n	800c2f6 <_fflush_r+0x32>
 800c2f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2f2:	f7ff fb85 	bl	800ba00 <__retarget_lock_acquire_recursive>
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	f7ff ff5d 	bl	800c1b8 <__sflush_r>
 800c2fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c300:	07da      	lsls	r2, r3, #31
 800c302:	4605      	mov	r5, r0
 800c304:	d4e4      	bmi.n	800c2d0 <_fflush_r+0xc>
 800c306:	89a3      	ldrh	r3, [r4, #12]
 800c308:	059b      	lsls	r3, r3, #22
 800c30a:	d4e1      	bmi.n	800c2d0 <_fflush_r+0xc>
 800c30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c30e:	f7ff fb78 	bl	800ba02 <__retarget_lock_release_recursive>
 800c312:	e7dd      	b.n	800c2d0 <_fflush_r+0xc>

0800c314 <__swbuf_r>:
 800c314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c316:	460e      	mov	r6, r1
 800c318:	4614      	mov	r4, r2
 800c31a:	4605      	mov	r5, r0
 800c31c:	b118      	cbz	r0, 800c326 <__swbuf_r+0x12>
 800c31e:	6a03      	ldr	r3, [r0, #32]
 800c320:	b90b      	cbnz	r3, 800c326 <__swbuf_r+0x12>
 800c322:	f7ff fa05 	bl	800b730 <__sinit>
 800c326:	69a3      	ldr	r3, [r4, #24]
 800c328:	60a3      	str	r3, [r4, #8]
 800c32a:	89a3      	ldrh	r3, [r4, #12]
 800c32c:	071a      	lsls	r2, r3, #28
 800c32e:	d525      	bpl.n	800c37c <__swbuf_r+0x68>
 800c330:	6923      	ldr	r3, [r4, #16]
 800c332:	b31b      	cbz	r3, 800c37c <__swbuf_r+0x68>
 800c334:	6823      	ldr	r3, [r4, #0]
 800c336:	6922      	ldr	r2, [r4, #16]
 800c338:	1a98      	subs	r0, r3, r2
 800c33a:	6963      	ldr	r3, [r4, #20]
 800c33c:	b2f6      	uxtb	r6, r6
 800c33e:	4283      	cmp	r3, r0
 800c340:	4637      	mov	r7, r6
 800c342:	dc04      	bgt.n	800c34e <__swbuf_r+0x3a>
 800c344:	4621      	mov	r1, r4
 800c346:	4628      	mov	r0, r5
 800c348:	f7ff ffbc 	bl	800c2c4 <_fflush_r>
 800c34c:	b9e0      	cbnz	r0, 800c388 <__swbuf_r+0x74>
 800c34e:	68a3      	ldr	r3, [r4, #8]
 800c350:	3b01      	subs	r3, #1
 800c352:	60a3      	str	r3, [r4, #8]
 800c354:	6823      	ldr	r3, [r4, #0]
 800c356:	1c5a      	adds	r2, r3, #1
 800c358:	6022      	str	r2, [r4, #0]
 800c35a:	701e      	strb	r6, [r3, #0]
 800c35c:	6962      	ldr	r2, [r4, #20]
 800c35e:	1c43      	adds	r3, r0, #1
 800c360:	429a      	cmp	r2, r3
 800c362:	d004      	beq.n	800c36e <__swbuf_r+0x5a>
 800c364:	89a3      	ldrh	r3, [r4, #12]
 800c366:	07db      	lsls	r3, r3, #31
 800c368:	d506      	bpl.n	800c378 <__swbuf_r+0x64>
 800c36a:	2e0a      	cmp	r6, #10
 800c36c:	d104      	bne.n	800c378 <__swbuf_r+0x64>
 800c36e:	4621      	mov	r1, r4
 800c370:	4628      	mov	r0, r5
 800c372:	f7ff ffa7 	bl	800c2c4 <_fflush_r>
 800c376:	b938      	cbnz	r0, 800c388 <__swbuf_r+0x74>
 800c378:	4638      	mov	r0, r7
 800c37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c37c:	4621      	mov	r1, r4
 800c37e:	4628      	mov	r0, r5
 800c380:	f000 f806 	bl	800c390 <__swsetup_r>
 800c384:	2800      	cmp	r0, #0
 800c386:	d0d5      	beq.n	800c334 <__swbuf_r+0x20>
 800c388:	f04f 37ff 	mov.w	r7, #4294967295
 800c38c:	e7f4      	b.n	800c378 <__swbuf_r+0x64>
	...

0800c390 <__swsetup_r>:
 800c390:	b538      	push	{r3, r4, r5, lr}
 800c392:	4b2a      	ldr	r3, [pc, #168]	; (800c43c <__swsetup_r+0xac>)
 800c394:	4605      	mov	r5, r0
 800c396:	6818      	ldr	r0, [r3, #0]
 800c398:	460c      	mov	r4, r1
 800c39a:	b118      	cbz	r0, 800c3a4 <__swsetup_r+0x14>
 800c39c:	6a03      	ldr	r3, [r0, #32]
 800c39e:	b90b      	cbnz	r3, 800c3a4 <__swsetup_r+0x14>
 800c3a0:	f7ff f9c6 	bl	800b730 <__sinit>
 800c3a4:	89a3      	ldrh	r3, [r4, #12]
 800c3a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3aa:	0718      	lsls	r0, r3, #28
 800c3ac:	d422      	bmi.n	800c3f4 <__swsetup_r+0x64>
 800c3ae:	06d9      	lsls	r1, r3, #27
 800c3b0:	d407      	bmi.n	800c3c2 <__swsetup_r+0x32>
 800c3b2:	2309      	movs	r3, #9
 800c3b4:	602b      	str	r3, [r5, #0]
 800c3b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c3ba:	81a3      	strh	r3, [r4, #12]
 800c3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c0:	e034      	b.n	800c42c <__swsetup_r+0x9c>
 800c3c2:	0758      	lsls	r0, r3, #29
 800c3c4:	d512      	bpl.n	800c3ec <__swsetup_r+0x5c>
 800c3c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3c8:	b141      	cbz	r1, 800c3dc <__swsetup_r+0x4c>
 800c3ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3ce:	4299      	cmp	r1, r3
 800c3d0:	d002      	beq.n	800c3d8 <__swsetup_r+0x48>
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	f7ff fb24 	bl	800ba20 <_free_r>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	6363      	str	r3, [r4, #52]	; 0x34
 800c3dc:	89a3      	ldrh	r3, [r4, #12]
 800c3de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c3e2:	81a3      	strh	r3, [r4, #12]
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	6063      	str	r3, [r4, #4]
 800c3e8:	6923      	ldr	r3, [r4, #16]
 800c3ea:	6023      	str	r3, [r4, #0]
 800c3ec:	89a3      	ldrh	r3, [r4, #12]
 800c3ee:	f043 0308 	orr.w	r3, r3, #8
 800c3f2:	81a3      	strh	r3, [r4, #12]
 800c3f4:	6923      	ldr	r3, [r4, #16]
 800c3f6:	b94b      	cbnz	r3, 800c40c <__swsetup_r+0x7c>
 800c3f8:	89a3      	ldrh	r3, [r4, #12]
 800c3fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c402:	d003      	beq.n	800c40c <__swsetup_r+0x7c>
 800c404:	4621      	mov	r1, r4
 800c406:	4628      	mov	r0, r5
 800c408:	f000 f850 	bl	800c4ac <__smakebuf_r>
 800c40c:	89a0      	ldrh	r0, [r4, #12]
 800c40e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c412:	f010 0301 	ands.w	r3, r0, #1
 800c416:	d00a      	beq.n	800c42e <__swsetup_r+0x9e>
 800c418:	2300      	movs	r3, #0
 800c41a:	60a3      	str	r3, [r4, #8]
 800c41c:	6963      	ldr	r3, [r4, #20]
 800c41e:	425b      	negs	r3, r3
 800c420:	61a3      	str	r3, [r4, #24]
 800c422:	6923      	ldr	r3, [r4, #16]
 800c424:	b943      	cbnz	r3, 800c438 <__swsetup_r+0xa8>
 800c426:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c42a:	d1c4      	bne.n	800c3b6 <__swsetup_r+0x26>
 800c42c:	bd38      	pop	{r3, r4, r5, pc}
 800c42e:	0781      	lsls	r1, r0, #30
 800c430:	bf58      	it	pl
 800c432:	6963      	ldrpl	r3, [r4, #20]
 800c434:	60a3      	str	r3, [r4, #8]
 800c436:	e7f4      	b.n	800c422 <__swsetup_r+0x92>
 800c438:	2000      	movs	r0, #0
 800c43a:	e7f7      	b.n	800c42c <__swsetup_r+0x9c>
 800c43c:	200000c0 	.word	0x200000c0

0800c440 <_sbrk_r>:
 800c440:	b538      	push	{r3, r4, r5, lr}
 800c442:	4d06      	ldr	r5, [pc, #24]	; (800c45c <_sbrk_r+0x1c>)
 800c444:	2300      	movs	r3, #0
 800c446:	4604      	mov	r4, r0
 800c448:	4608      	mov	r0, r1
 800c44a:	602b      	str	r3, [r5, #0]
 800c44c:	f7f5 fe42 	bl	80020d4 <_sbrk>
 800c450:	1c43      	adds	r3, r0, #1
 800c452:	d102      	bne.n	800c45a <_sbrk_r+0x1a>
 800c454:	682b      	ldr	r3, [r5, #0]
 800c456:	b103      	cbz	r3, 800c45a <_sbrk_r+0x1a>
 800c458:	6023      	str	r3, [r4, #0]
 800c45a:	bd38      	pop	{r3, r4, r5, pc}
 800c45c:	20005300 	.word	0x20005300

0800c460 <__swhatbuf_r>:
 800c460:	b570      	push	{r4, r5, r6, lr}
 800c462:	460c      	mov	r4, r1
 800c464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c468:	2900      	cmp	r1, #0
 800c46a:	b096      	sub	sp, #88	; 0x58
 800c46c:	4615      	mov	r5, r2
 800c46e:	461e      	mov	r6, r3
 800c470:	da0d      	bge.n	800c48e <__swhatbuf_r+0x2e>
 800c472:	89a3      	ldrh	r3, [r4, #12]
 800c474:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c478:	f04f 0100 	mov.w	r1, #0
 800c47c:	bf0c      	ite	eq
 800c47e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c482:	2340      	movne	r3, #64	; 0x40
 800c484:	2000      	movs	r0, #0
 800c486:	6031      	str	r1, [r6, #0]
 800c488:	602b      	str	r3, [r5, #0]
 800c48a:	b016      	add	sp, #88	; 0x58
 800c48c:	bd70      	pop	{r4, r5, r6, pc}
 800c48e:	466a      	mov	r2, sp
 800c490:	f000 f848 	bl	800c524 <_fstat_r>
 800c494:	2800      	cmp	r0, #0
 800c496:	dbec      	blt.n	800c472 <__swhatbuf_r+0x12>
 800c498:	9901      	ldr	r1, [sp, #4]
 800c49a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c49e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c4a2:	4259      	negs	r1, r3
 800c4a4:	4159      	adcs	r1, r3
 800c4a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4aa:	e7eb      	b.n	800c484 <__swhatbuf_r+0x24>

0800c4ac <__smakebuf_r>:
 800c4ac:	898b      	ldrh	r3, [r1, #12]
 800c4ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4b0:	079d      	lsls	r5, r3, #30
 800c4b2:	4606      	mov	r6, r0
 800c4b4:	460c      	mov	r4, r1
 800c4b6:	d507      	bpl.n	800c4c8 <__smakebuf_r+0x1c>
 800c4b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4bc:	6023      	str	r3, [r4, #0]
 800c4be:	6123      	str	r3, [r4, #16]
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	6163      	str	r3, [r4, #20]
 800c4c4:	b002      	add	sp, #8
 800c4c6:	bd70      	pop	{r4, r5, r6, pc}
 800c4c8:	ab01      	add	r3, sp, #4
 800c4ca:	466a      	mov	r2, sp
 800c4cc:	f7ff ffc8 	bl	800c460 <__swhatbuf_r>
 800c4d0:	9900      	ldr	r1, [sp, #0]
 800c4d2:	4605      	mov	r5, r0
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	f7ff fb0f 	bl	800baf8 <_malloc_r>
 800c4da:	b948      	cbnz	r0, 800c4f0 <__smakebuf_r+0x44>
 800c4dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4e0:	059a      	lsls	r2, r3, #22
 800c4e2:	d4ef      	bmi.n	800c4c4 <__smakebuf_r+0x18>
 800c4e4:	f023 0303 	bic.w	r3, r3, #3
 800c4e8:	f043 0302 	orr.w	r3, r3, #2
 800c4ec:	81a3      	strh	r3, [r4, #12]
 800c4ee:	e7e3      	b.n	800c4b8 <__smakebuf_r+0xc>
 800c4f0:	89a3      	ldrh	r3, [r4, #12]
 800c4f2:	6020      	str	r0, [r4, #0]
 800c4f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4f8:	81a3      	strh	r3, [r4, #12]
 800c4fa:	9b00      	ldr	r3, [sp, #0]
 800c4fc:	6163      	str	r3, [r4, #20]
 800c4fe:	9b01      	ldr	r3, [sp, #4]
 800c500:	6120      	str	r0, [r4, #16]
 800c502:	b15b      	cbz	r3, 800c51c <__smakebuf_r+0x70>
 800c504:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c508:	4630      	mov	r0, r6
 800c50a:	f000 f81d 	bl	800c548 <_isatty_r>
 800c50e:	b128      	cbz	r0, 800c51c <__smakebuf_r+0x70>
 800c510:	89a3      	ldrh	r3, [r4, #12]
 800c512:	f023 0303 	bic.w	r3, r3, #3
 800c516:	f043 0301 	orr.w	r3, r3, #1
 800c51a:	81a3      	strh	r3, [r4, #12]
 800c51c:	89a3      	ldrh	r3, [r4, #12]
 800c51e:	431d      	orrs	r5, r3
 800c520:	81a5      	strh	r5, [r4, #12]
 800c522:	e7cf      	b.n	800c4c4 <__smakebuf_r+0x18>

0800c524 <_fstat_r>:
 800c524:	b538      	push	{r3, r4, r5, lr}
 800c526:	4d07      	ldr	r5, [pc, #28]	; (800c544 <_fstat_r+0x20>)
 800c528:	2300      	movs	r3, #0
 800c52a:	4604      	mov	r4, r0
 800c52c:	4608      	mov	r0, r1
 800c52e:	4611      	mov	r1, r2
 800c530:	602b      	str	r3, [r5, #0]
 800c532:	f7f5 fda6 	bl	8002082 <_fstat>
 800c536:	1c43      	adds	r3, r0, #1
 800c538:	d102      	bne.n	800c540 <_fstat_r+0x1c>
 800c53a:	682b      	ldr	r3, [r5, #0]
 800c53c:	b103      	cbz	r3, 800c540 <_fstat_r+0x1c>
 800c53e:	6023      	str	r3, [r4, #0]
 800c540:	bd38      	pop	{r3, r4, r5, pc}
 800c542:	bf00      	nop
 800c544:	20005300 	.word	0x20005300

0800c548 <_isatty_r>:
 800c548:	b538      	push	{r3, r4, r5, lr}
 800c54a:	4d06      	ldr	r5, [pc, #24]	; (800c564 <_isatty_r+0x1c>)
 800c54c:	2300      	movs	r3, #0
 800c54e:	4604      	mov	r4, r0
 800c550:	4608      	mov	r0, r1
 800c552:	602b      	str	r3, [r5, #0]
 800c554:	f7f5 fda5 	bl	80020a2 <_isatty>
 800c558:	1c43      	adds	r3, r0, #1
 800c55a:	d102      	bne.n	800c562 <_isatty_r+0x1a>
 800c55c:	682b      	ldr	r3, [r5, #0]
 800c55e:	b103      	cbz	r3, 800c562 <_isatty_r+0x1a>
 800c560:	6023      	str	r3, [r4, #0]
 800c562:	bd38      	pop	{r3, r4, r5, pc}
 800c564:	20005300 	.word	0x20005300

0800c568 <_init>:
 800c568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56a:	bf00      	nop
 800c56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c56e:	bc08      	pop	{r3}
 800c570:	469e      	mov	lr, r3
 800c572:	4770      	bx	lr

0800c574 <_fini>:
 800c574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c576:	bf00      	nop
 800c578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c57a:	bc08      	pop	{r3}
 800c57c:	469e      	mov	lr, r3
 800c57e:	4770      	bx	lr
