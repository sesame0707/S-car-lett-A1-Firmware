
ScarlettA1Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd40  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a14  0800cf40  0800cf40  0001cf40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e954  0800e954  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e954  0800e954  0001e954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e95c  0800e95c  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e95c  0800e95c  0001e95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e960  0800e960  0001e960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800e964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000525c  200000c0  0800ea24  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000531c  0800ea24  0002531c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ee  2**0
                  CONTENTS, READONLY
 13 .debug_info   000281ac  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b0c  00000000  00000000  000482dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f18  00000000  00000000  0004ddf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017e2  00000000  00000000  0004fd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002df02  00000000  00000000  000514ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029959  00000000  00000000  0007f3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e9f9  00000000  00000000  000a8d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008758  00000000  00000000  001b7740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001bfe98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000c0 	.word	0x200000c0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cf28 	.word	0x0800cf28

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000c4 	.word	0x200000c4
 800023c:	0800cf28 	.word	0x0800cf28

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <setLEDStripesEffect>:
 */

#include "commonFunctions.h"

/* LED stripes */
void setLEDStripesEffect(enum StripesEffect stripesEffect, struct DesiredStripesColor *desiredStripesColor) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	switch (stripesEffect) {
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	2b03      	cmp	r3, #3
 80005ec:	d832      	bhi.n	8000654 <setLEDStripesEffect+0x78>
 80005ee:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <setLEDStripesEffect+0x18>)
 80005f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f4:	08000605 	.word	0x08000605
 80005f8:	08000619 	.word	0x08000619
 80005fc:	0800062d 	.word	0x0800062d
 8000600:	08000641 	.word	0x08000641
	case 0:
		desiredStripesColor->red = 0x00;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	709a      	strb	r2, [r3, #2]
		break;
 8000616:	e01d      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 1:
		desiredStripesColor->red = 0x40;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2240      	movs	r2, #64	; 0x40
 800061c:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x20;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2220      	movs	r2, #32
 8000622:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	2200      	movs	r2, #0
 8000628:	709a      	strb	r2, [r3, #2]
		break;
 800062a:	e013      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 2:
		desiredStripesColor->red = 0x40;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	2240      	movs	r2, #64	; 0x40
 8000630:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x40;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	2240      	movs	r2, #64	; 0x40
 8000636:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x40;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	2240      	movs	r2, #64	; 0x40
 800063c:	709a      	strb	r2, [r3, #2]
		break;
 800063e:	e009      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 3:
		desiredStripesColor->red = 0x00;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	2200      	movs	r2, #0
 800064a:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x40;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	2240      	movs	r2, #64	; 0x40
 8000650:	709a      	strb	r2, [r3, #2]
		break;
 8000652:	bf00      	nop
	}
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <setBLDCMotorSpeed>:

/* BLDC motor */
void setBLDCMotorSpeed(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	switch(sliderAccelerateDecelerateCurrentValue) {
 8000664:	4b3a      	ldr	r3, [pc, #232]	; (8000750 <setBLDCMotorSpeed+0xf0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	3302      	adds	r3, #2
 800066a:	2b06      	cmp	r3, #6
 800066c:	d84d      	bhi.n	800070a <setBLDCMotorSpeed+0xaa>
 800066e:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <setBLDCMotorSpeed+0x14>)
 8000670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000674:	08000691 	.word	0x08000691
 8000678:	080006a5 	.word	0x080006a5
 800067c:	080006b7 	.word	0x080006b7
 8000680:	080006c1 	.word	0x080006c1
 8000684:	080006d3 	.word	0x080006d3
 8000688:	080006e7 	.word	0x080006e7
 800068c:	080006f9 	.word	0x080006f9
	case -2:
	  BLDCMotorSpeedVoltage = 0.5;
 8000690:	4b30      	ldr	r3, [pc, #192]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 8000692:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000696:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2110      	movs	r1, #16
 800069c:	482e      	ldr	r0, [pc, #184]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 800069e:	f003 fccf 	bl	8004040 <HAL_GPIO_WritePin>
	  break;
 80006a2:	e032      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case -1:
	  BLDCMotorSpeedVoltage = 0.4;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006a6:	4a2d      	ldr	r2, [pc, #180]	; (800075c <setBLDCMotorSpeed+0xfc>)
 80006a8:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2110      	movs	r1, #16
 80006ae:	482a      	ldr	r0, [pc, #168]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006b0:	f003 fcc6 	bl	8004040 <HAL_GPIO_WritePin>
	  break;
 80006b4:	e029      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 0:
	  BLDCMotorSpeedVoltage = 0.0;
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006b8:	f04f 0200 	mov.w	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
	  break;
 80006be:	e024      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 1:
	  BLDCMotorSpeedVoltage = 0.4;
 80006c0:	4b24      	ldr	r3, [pc, #144]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006c2:	4a26      	ldr	r2, [pc, #152]	; (800075c <setBLDCMotorSpeed+0xfc>)
 80006c4:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2110      	movs	r1, #16
 80006ca:	4823      	ldr	r0, [pc, #140]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006cc:	f003 fcb8 	bl	8004040 <HAL_GPIO_WritePin>
	  break;
 80006d0:	e01b      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 2:
	  BLDCMotorSpeedVoltage = 0.5;
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006d4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80006d8:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2110      	movs	r1, #16
 80006de:	481e      	ldr	r0, [pc, #120]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006e0:	f003 fcae 	bl	8004040 <HAL_GPIO_WritePin>
	  break;
 80006e4:	e011      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 3:
	  BLDCMotorSpeedVoltage = 0.6;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006e8:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <setBLDCMotorSpeed+0x100>)
 80006ea:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2110      	movs	r1, #16
 80006f0:	4819      	ldr	r0, [pc, #100]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006f2:	f003 fca5 	bl	8004040 <HAL_GPIO_WritePin>
	  break;
 80006f6:	e008      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 4:
	  BLDCMotorSpeedVoltage = 0.7;
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006fa:	4a1a      	ldr	r2, [pc, #104]	; (8000764 <setBLDCMotorSpeed+0x104>)
 80006fc:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2110      	movs	r1, #16
 8000702:	4815      	ldr	r0, [pc, #84]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 8000704:	f003 fc9c 	bl	8004040 <HAL_GPIO_WritePin>
	  break;
 8000708:	bf00      	nop
	}

	BLDCMotorSpeedValue = BLDCMotorSpeedVoltage * (0xfff + 1) / 3.3;
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 800070c:	edd3 7a00 	vldr	s15, [r3]
 8000710:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000768 <setBLDCMotorSpeed+0x108>
 8000714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000718:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800071c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000748 <setBLDCMotorSpeed+0xe8>
 8000720:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000724:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000728:	ee17 2a90 	vmov	r2, s15
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <setBLDCMotorSpeed+0x10c>)
 800072e:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, BLDCMotorSpeedValue);
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <setBLDCMotorSpeed+0x10c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <setBLDCMotorSpeed+0x110>)
 800073a:	f002 fe43 	bl	80033c4 <HAL_DAC_SetValue>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	f3af 8000 	nop.w
 8000748:	66666666 	.word	0x66666666
 800074c:	400a6666 	.word	0x400a6666
 8000750:	200000e8 	.word	0x200000e8
 8000754:	200000f0 	.word	0x200000f0
 8000758:	40020400 	.word	0x40020400
 800075c:	3ecccccd 	.word	0x3ecccccd
 8000760:	3f19999a 	.word	0x3f19999a
 8000764:	3f333333 	.word	0x3f333333
 8000768:	45800000 	.word	0x45800000
 800076c:	200000f4 	.word	0x200000f4
 8000770:	2000010c 	.word	0x2000010c

08000774 <moveStepperMotor>:

/* Stepper motor */
void moveStepperMotor(enum Direction direction) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(StepperMotorEn_GPIO_Port, StepperMotorEn_Pin, RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000784:	4813      	ldr	r0, [pc, #76]	; (80007d4 <moveStepperMotor+0x60>)
 8000786:	f003 fc5b 	bl	8004040 <HAL_GPIO_WritePin>

	if(direction == LEFT) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d106      	bne.n	800079e <moveStepperMotor+0x2a>
		HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, SET);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000796:	4810      	ldr	r0, [pc, #64]	; (80007d8 <moveStepperMotor+0x64>)
 8000798:	f003 fc52 	bl	8004040 <HAL_GPIO_WritePin>
 800079c:	e005      	b.n	80007aa <moveStepperMotor+0x36>
	} else {
		HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <moveStepperMotor+0x64>)
 80007a6:	f003 fc4b 	bl	8004040 <HAL_GPIO_WritePin>
	}

	TIM4->CCR3 = 500;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <moveStepperMotor+0x68>)
 80007ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007b0:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(35);
 80007b2:	2023      	movs	r0, #35	; 0x23
 80007b4:	f008 fbac 	bl	8008f10 <osDelay>
	TIM4->CCR3 = 0;
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <moveStepperMotor+0x68>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_GPIO_WritePin(StepperMotorEn_GPIO_Port, StepperMotorEn_Pin, SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <moveStepperMotor+0x60>)
 80007c6:	f003 fc3b 	bl	8004040 <HAL_GPIO_WritePin>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40021400 	.word	0x40021400
 80007d8:	40020c00 	.word	0x40020c00
 80007dc:	40000800 	.word	0x40000800

080007e0 <moveStepperMotorUntil>:

void moveStepperMotorUntil(int targetLeftRightPosition) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	if(sliderLeftRightCurrentValue == targetLeftRightPosition) {
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <moveStepperMotorUntil+0x7c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d02f      	beq.n	8000852 <moveStepperMotorUntil+0x72>
		// Do nothing
	} else if(sliderLeftRightCurrentValue > targetLeftRightPosition) {
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <moveStepperMotorUntil+0x7c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	da15      	bge.n	8000828 <moveStepperMotorUntil+0x48>
		// Turn left until target left/right position is reached
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue --) {
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <moveStepperMotorUntil+0x7c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	e00c      	b.n	800081c <moveStepperMotorUntil+0x3c>
			moveStepperMotor(LEFT);
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff ffb6 	bl	8000774 <moveStepperMotor>
			osDelay(LEFT_RIGHT_DURATION);
 8000808:	2032      	movs	r0, #50	; 0x32
 800080a:	f008 fb81 	bl	8008f10 <osDelay>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue --) {
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <moveStepperMotorUntil+0x7c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	1e5a      	subs	r2, r3, #1
 8000814:	4911      	ldr	r1, [pc, #68]	; (800085c <moveStepperMotorUntil+0x7c>)
 8000816:	600a      	str	r2, [r1, #0]
 8000818:	4a11      	ldr	r2, [pc, #68]	; (8000860 <moveStepperMotorUntil+0x80>)
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <moveStepperMotorUntil+0x7c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	429a      	cmp	r2, r3
 8000824:	d1ed      	bne.n	8000802 <moveStepperMotorUntil+0x22>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
			moveStepperMotor(RIGHT);
			osDelay(LEFT_RIGHT_DURATION);
		}
	}
}
 8000826:	e014      	b.n	8000852 <moveStepperMotorUntil+0x72>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <moveStepperMotorUntil+0x7c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	e00c      	b.n	8000848 <moveStepperMotorUntil+0x68>
			moveStepperMotor(RIGHT);
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff ffa0 	bl	8000774 <moveStepperMotor>
			osDelay(LEFT_RIGHT_DURATION);
 8000834:	2032      	movs	r0, #50	; 0x32
 8000836:	f008 fb6b 	bl	8008f10 <osDelay>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <moveStepperMotorUntil+0x7c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	1c5a      	adds	r2, r3, #1
 8000840:	4906      	ldr	r1, [pc, #24]	; (800085c <moveStepperMotorUntil+0x7c>)
 8000842:	600a      	str	r2, [r1, #0]
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <moveStepperMotorUntil+0x80>)
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <moveStepperMotorUntil+0x7c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	429a      	cmp	r2, r3
 8000850:	d1ed      	bne.n	800082e <moveStepperMotorUntil+0x4e>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000fc 	.word	0x200000fc
 8000860:	200000f8 	.word	0x200000f8

08000864 <park>:

/* LiDAR sphere */
void park(enum Direction direction) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	// Private variables
	int targetLeftRightPosition = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]

	// Stop BLDC motor
	sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8000872:	4b3f      	ldr	r3, [pc, #252]	; (8000970 <park+0x10c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a3f      	ldr	r2, [pc, #252]	; (8000974 <park+0x110>)
 8000878:	6013      	str	r3, [r2, #0]
	sliderAccelerateDecelerateCurrentValue = 0;
 800087a:	4b3d      	ldr	r3, [pc, #244]	; (8000970 <park+0x10c>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
	setBLDCMotorSpeed();
 8000880:	f7ff feee 	bl	8000660 <setBLDCMotorSpeed>

	// Set LED stripes
	stripesEffect = PARKING;
 8000884:	4b3c      	ldr	r3, [pc, #240]	; (8000978 <park+0x114>)
 8000886:	2203      	movs	r2, #3
 8000888:	701a      	strb	r2, [r3, #0]
	ommitToggle = true;
 800088a:	4b3c      	ldr	r3, [pc, #240]	; (800097c <park+0x118>)
 800088c:	2201      	movs	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
	internalFunctionCall = true;
 8000890:	4b3b      	ldr	r3, [pc, #236]	; (8000980 <park+0x11c>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
	vTaskResume(LEDStripesTaskHandle);
 8000896:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <park+0x120>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f009 fd48 	bl	800a330 <vTaskResume>

	// Toggle left/right blinkers
	if(direction == LEFT) {
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d108      	bne.n	80008b8 <park+0x54>
		internalFunctionCall = true;
 80008a6:	4b36      	ldr	r3, [pc, #216]	; (8000980 <park+0x11c>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
		vTaskResume(LeftBlinkersTasHandle);
 80008ac:	4b36      	ldr	r3, [pc, #216]	; (8000988 <park+0x124>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f009 fd3d 	bl	800a330 <vTaskResume>
 80008b6:	e007      	b.n	80008c8 <park+0x64>
	} else {
		internalFunctionCall = true;
 80008b8:	4b31      	ldr	r3, [pc, #196]	; (8000980 <park+0x11c>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
		vTaskResume(RightBlinkersTaHandle);
 80008be:	4b33      	ldr	r3, [pc, #204]	; (800098c <park+0x128>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f009 fd34 	bl	800a330 <vTaskResume>
	}

	// Turn left/right to the destination
	if(direction == LEFT) {
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d103      	bne.n	80008d6 <park+0x72>
		targetLeftRightPosition = -3;
 80008ce:	f06f 0302 	mvn.w	r3, #2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	e001      	b.n	80008da <park+0x76>
	} else {
		targetLeftRightPosition = 3;
 80008d6:	2303      	movs	r3, #3
 80008d8:	60fb      	str	r3, [r7, #12]
	}
	moveStepperMotorUntil(targetLeftRightPosition);
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f7ff ff80 	bl	80007e0 <moveStepperMotorUntil>

	// Withdraw a little bit
	internalFunctionCall = true;
 80008e0:	4b27      	ldr	r3, [pc, #156]	; (8000980 <park+0x11c>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
	vTaskResume(DecelerateTaskHandle);
 80008e6:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <park+0x12c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f009 fd20 	bl	800a330 <vTaskResume>
	osDelay(ACCELERATE_DECELERATE_DURATION);
 80008f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f4:	f008 fb0c 	bl	8008f10 <osDelay>
	internalFunctionCall = true;
 80008f8:	4b21      	ldr	r3, [pc, #132]	; (8000980 <park+0x11c>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
	vTaskResume(AccelerateTaskHandle);
 80008fe:	4b25      	ldr	r3, [pc, #148]	; (8000994 <park+0x130>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f009 fd14 	bl	800a330 <vTaskResume>

	// Turn left/right from the destination
	targetLeftRightPosition = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
	moveStepperMotorUntil(targetLeftRightPosition);
 800090c:	68f8      	ldr	r0, [r7, #12]
 800090e:	f7ff ff67 	bl	80007e0 <moveStepperMotorUntil>

	// Drive forward a little bit
	internalFunctionCall = true;
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <park+0x11c>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
	vTaskResume(AccelerateTaskHandle);
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <park+0x130>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f009 fd07 	bl	800a330 <vTaskResume>
	osDelay(ACCELERATE_DECELERATE_DURATION / 2);
 8000922:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000926:	f008 faf3 	bl	8008f10 <osDelay>
	internalFunctionCall = true;
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <park+0x11c>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
	vTaskResume(DecelerateTaskHandle);
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <park+0x12c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f009 fcfb 	bl	800a330 <vTaskResume>

	// Set LED stripes
	if(isOn) {
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <park+0x134>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d003      	beq.n	800094c <park+0xe8>
		stripesEffect = DEFAULT;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <park+0x114>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	e002      	b.n	8000952 <park+0xee>
	} else {
		stripesEffect = NONE;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <park+0x114>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
	}
	ommitToggle = true;
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <park+0x118>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
	internalFunctionCall = true;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <park+0x11c>)
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
	vTaskResume(LEDStripesTaskHandle);
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <park+0x120>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f009 fce4 	bl	800a330 <vTaskResume>
}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200000e8 	.word	0x200000e8
 8000974:	200000e4 	.word	0x200000e4
 8000978:	200000de 	.word	0x200000de
 800097c:	200000e0 	.word	0x200000e0
 8000980:	200000dc 	.word	0x200000dc
 8000984:	20000130 	.word	0x20000130
 8000988:	20000134 	.word	0x20000134
 800098c:	20000138 	.word	0x20000138
 8000990:	20000148 	.word	0x20000148
 8000994:	20000144 	.word	0x20000144
 8000998:	200000df 	.word	0x200000df

0800099c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009a2:	463b      	mov	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_DAC_Init+0x4c>)
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <MX_DAC_Init+0x50>)
 80009ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <MX_DAC_Init+0x4c>)
 80009b2:	f002 fc39 	bl	8003228 <HAL_DAC_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80009bc:	f001 fa06 	bl	8001dcc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <MX_DAC_Init+0x4c>)
 80009d0:	f002 fd27 	bl	8003422 <HAL_DAC_ConfigChannel>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80009da:	f001 f9f7 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000010c 	.word	0x2000010c
 80009ec:	40007400 	.word	0x40007400

080009f0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <HAL_DAC_MspInit+0x84>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d12b      	bne.n	8000a6a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_DAC_MspInit+0x88>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <HAL_DAC_MspInit+0x88>)
 8000a18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_DAC_MspInit+0x88>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <HAL_DAC_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <HAL_DAC_MspInit+0x88>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_DAC_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = BLDCMotorStep_Pin;
 8000a42:	2310      	movs	r3, #16
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a46:	2303      	movs	r3, #3
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLDCMotorStep_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <HAL_DAC_MspInit+0x8c>)
 8000a56:	f003 f947 	bl	8003ce8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2105      	movs	r1, #5
 8000a5e:	2036      	movs	r0, #54	; 0x36
 8000a60:	f002 fbb8 	bl	80031d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a64:	2036      	movs	r0, #54	; 0x36
 8000a66:	f002 fbd1 	bl	800320c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40007400 	.word	0x40007400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000

08000a80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_DMA_Init+0x38>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <MX_DMA_Init+0x38>)
 8000a8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_DMA_Init+0x38>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2105      	movs	r1, #5
 8000aa2:	203b      	movs	r0, #59	; 0x3b
 8000aa4:	f002 fb96 	bl	80031d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000aa8:	203b      	movs	r0, #59	; 0x3b
 8000aaa:	f002 fbaf 	bl	800320c <HAL_NVIC_EnableIRQ>

}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of ConnectionTaskTimer */
  ConnectionTaskTimerHandle = osTimerNew(CallbackConnectionTaskTimer, osTimerOnce, NULL, &ConnectionTaskTimer_attributes);
 8000ac0:	4b49      	ldr	r3, [pc, #292]	; (8000be8 <MX_FREERTOS_Init+0x12c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4849      	ldr	r0, [pc, #292]	; (8000bec <MX_FREERTOS_Init+0x130>)
 8000ac8:	f008 fa66 	bl	8008f98 <osTimerNew>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4a48      	ldr	r2, [pc, #288]	; (8000bf0 <MX_FREERTOS_Init+0x134>)
 8000ad0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8000ad2:	4a48      	ldr	r2, [pc, #288]	; (8000bf4 <MX_FREERTOS_Init+0x138>)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4848      	ldr	r0, [pc, #288]	; (8000bf8 <MX_FREERTOS_Init+0x13c>)
 8000ad8:	f008 f974 	bl	8008dc4 <osThreadNew>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4a47      	ldr	r2, [pc, #284]	; (8000bfc <MX_FREERTOS_Init+0x140>)
 8000ae0:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartDispatcherTask, NULL, &DispatcherTask_attributes);
 8000ae2:	4a47      	ldr	r2, [pc, #284]	; (8000c00 <MX_FREERTOS_Init+0x144>)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4847      	ldr	r0, [pc, #284]	; (8000c04 <MX_FREERTOS_Init+0x148>)
 8000ae8:	f008 f96c 	bl	8008dc4 <osThreadNew>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4a46      	ldr	r2, [pc, #280]	; (8000c08 <MX_FREERTOS_Init+0x14c>)
 8000af0:	6013      	str	r3, [r2, #0]

  /* creation of StopTask */
  StopTaskHandle = osThreadNew(StartStopTask, NULL, &StopTask_attributes);
 8000af2:	4a46      	ldr	r2, [pc, #280]	; (8000c0c <MX_FREERTOS_Init+0x150>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	4846      	ldr	r0, [pc, #280]	; (8000c10 <MX_FREERTOS_Init+0x154>)
 8000af8:	f008 f964 	bl	8008dc4 <osThreadNew>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a45      	ldr	r2, [pc, #276]	; (8000c14 <MX_FREERTOS_Init+0x158>)
 8000b00:	6013      	str	r3, [r2, #0]

  /* creation of DrivingLightsTa */
  DrivingLightsTaHandle = osThreadNew(StartDrivingLightsTask, NULL, &DrivingLightsTa_attributes);
 8000b02:	4a45      	ldr	r2, [pc, #276]	; (8000c18 <MX_FREERTOS_Init+0x15c>)
 8000b04:	2100      	movs	r1, #0
 8000b06:	4845      	ldr	r0, [pc, #276]	; (8000c1c <MX_FREERTOS_Init+0x160>)
 8000b08:	f008 f95c 	bl	8008dc4 <osThreadNew>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a44      	ldr	r2, [pc, #272]	; (8000c20 <MX_FREERTOS_Init+0x164>)
 8000b10:	6013      	str	r3, [r2, #0]

  /* creation of LEDStripesTask */
  LEDStripesTaskHandle = osThreadNew(StartLEDStripesTask, NULL, &LEDStripesTask_attributes);
 8000b12:	4a44      	ldr	r2, [pc, #272]	; (8000c24 <MX_FREERTOS_Init+0x168>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4844      	ldr	r0, [pc, #272]	; (8000c28 <MX_FREERTOS_Init+0x16c>)
 8000b18:	f008 f954 	bl	8008dc4 <osThreadNew>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4a43      	ldr	r2, [pc, #268]	; (8000c2c <MX_FREERTOS_Init+0x170>)
 8000b20:	6013      	str	r3, [r2, #0]

  /* creation of LeftBlinkersTas */
  LeftBlinkersTasHandle = osThreadNew(StartLeftBlinkersTask, NULL, &LeftBlinkersTas_attributes);
 8000b22:	4a43      	ldr	r2, [pc, #268]	; (8000c30 <MX_FREERTOS_Init+0x174>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	4843      	ldr	r0, [pc, #268]	; (8000c34 <MX_FREERTOS_Init+0x178>)
 8000b28:	f008 f94c 	bl	8008dc4 <osThreadNew>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a42      	ldr	r2, [pc, #264]	; (8000c38 <MX_FREERTOS_Init+0x17c>)
 8000b30:	6013      	str	r3, [r2, #0]

  /* creation of RightBlinkersTa */
  RightBlinkersTaHandle = osThreadNew(StartRightBlinkersTask, NULL, &RightBlinkersTa_attributes);
 8000b32:	4a42      	ldr	r2, [pc, #264]	; (8000c3c <MX_FREERTOS_Init+0x180>)
 8000b34:	2100      	movs	r1, #0
 8000b36:	4842      	ldr	r0, [pc, #264]	; (8000c40 <MX_FREERTOS_Init+0x184>)
 8000b38:	f008 f944 	bl	8008dc4 <osThreadNew>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a41      	ldr	r2, [pc, #260]	; (8000c44 <MX_FREERTOS_Init+0x188>)
 8000b40:	6013      	str	r3, [r2, #0]

  /* creation of ParkLeftTask */
  ParkLeftTaskHandle = osThreadNew(StartParkLeftTask, NULL, &ParkLeftTask_attributes);
 8000b42:	4a41      	ldr	r2, [pc, #260]	; (8000c48 <MX_FREERTOS_Init+0x18c>)
 8000b44:	2100      	movs	r1, #0
 8000b46:	4841      	ldr	r0, [pc, #260]	; (8000c4c <MX_FREERTOS_Init+0x190>)
 8000b48:	f008 f93c 	bl	8008dc4 <osThreadNew>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	4a40      	ldr	r2, [pc, #256]	; (8000c50 <MX_FREERTOS_Init+0x194>)
 8000b50:	6013      	str	r3, [r2, #0]

  /* creation of ParkRightTask */
  ParkRightTaskHandle = osThreadNew(StartParkRightTask, NULL, &ParkRightTask_attributes);
 8000b52:	4a40      	ldr	r2, [pc, #256]	; (8000c54 <MX_FREERTOS_Init+0x198>)
 8000b54:	2100      	movs	r1, #0
 8000b56:	4840      	ldr	r0, [pc, #256]	; (8000c58 <MX_FREERTOS_Init+0x19c>)
 8000b58:	f008 f934 	bl	8008dc4 <osThreadNew>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4a3f      	ldr	r2, [pc, #252]	; (8000c5c <MX_FREERTOS_Init+0x1a0>)
 8000b60:	6013      	str	r3, [r2, #0]

  /* creation of AccelerateTask */
  AccelerateTaskHandle = osThreadNew(StartAccelerateTask, NULL, &AccelerateTask_attributes);
 8000b62:	4a3f      	ldr	r2, [pc, #252]	; (8000c60 <MX_FREERTOS_Init+0x1a4>)
 8000b64:	2100      	movs	r1, #0
 8000b66:	483f      	ldr	r0, [pc, #252]	; (8000c64 <MX_FREERTOS_Init+0x1a8>)
 8000b68:	f008 f92c 	bl	8008dc4 <osThreadNew>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4a3e      	ldr	r2, [pc, #248]	; (8000c68 <MX_FREERTOS_Init+0x1ac>)
 8000b70:	6013      	str	r3, [r2, #0]

  /* creation of DecelerateTask */
  DecelerateTaskHandle = osThreadNew(StartDecelerateTask, NULL, &DecelerateTask_attributes);
 8000b72:	4a3e      	ldr	r2, [pc, #248]	; (8000c6c <MX_FREERTOS_Init+0x1b0>)
 8000b74:	2100      	movs	r1, #0
 8000b76:	483e      	ldr	r0, [pc, #248]	; (8000c70 <MX_FREERTOS_Init+0x1b4>)
 8000b78:	f008 f924 	bl	8008dc4 <osThreadNew>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4a3d      	ldr	r2, [pc, #244]	; (8000c74 <MX_FREERTOS_Init+0x1b8>)
 8000b80:	6013      	str	r3, [r2, #0]

  /* creation of TurnLeftTask */
  TurnLeftTaskHandle = osThreadNew(StartTurnLeftTask, NULL, &TurnLeftTask_attributes);
 8000b82:	4a3d      	ldr	r2, [pc, #244]	; (8000c78 <MX_FREERTOS_Init+0x1bc>)
 8000b84:	2100      	movs	r1, #0
 8000b86:	483d      	ldr	r0, [pc, #244]	; (8000c7c <MX_FREERTOS_Init+0x1c0>)
 8000b88:	f008 f91c 	bl	8008dc4 <osThreadNew>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a3c      	ldr	r2, [pc, #240]	; (8000c80 <MX_FREERTOS_Init+0x1c4>)
 8000b90:	6013      	str	r3, [r2, #0]

  /* creation of TurnRightTask */
  TurnRightTaskHandle = osThreadNew(StartTurnRightTask, NULL, &TurnRightTask_attributes);
 8000b92:	4a3c      	ldr	r2, [pc, #240]	; (8000c84 <MX_FREERTOS_Init+0x1c8>)
 8000b94:	2100      	movs	r1, #0
 8000b96:	483c      	ldr	r0, [pc, #240]	; (8000c88 <MX_FREERTOS_Init+0x1cc>)
 8000b98:	f008 f914 	bl	8008dc4 <osThreadNew>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	4a3b      	ldr	r2, [pc, #236]	; (8000c8c <MX_FREERTOS_Init+0x1d0>)
 8000ba0:	6013      	str	r3, [r2, #0]

  /* creation of ConnectionTask */
  ConnectionTaskHandle = osThreadNew(StartConnectionTask, NULL, &ConnectionTask_attributes);
 8000ba2:	4a3b      	ldr	r2, [pc, #236]	; (8000c90 <MX_FREERTOS_Init+0x1d4>)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	483b      	ldr	r0, [pc, #236]	; (8000c94 <MX_FREERTOS_Init+0x1d8>)
 8000ba8:	f008 f90c 	bl	8008dc4 <osThreadNew>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4a3a      	ldr	r2, [pc, #232]	; (8000c98 <MX_FREERTOS_Init+0x1dc>)
 8000bb0:	6013      	str	r3, [r2, #0]

  /* creation of BrakeLightsTask */
  BrakeLightsTaskHandle = osThreadNew(StartBrakeLightsTask, NULL, &BrakeLightsTask_attributes);
 8000bb2:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <MX_FREERTOS_Init+0x1e0>)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	483a      	ldr	r0, [pc, #232]	; (8000ca0 <MX_FREERTOS_Init+0x1e4>)
 8000bb8:	f008 f904 	bl	8008dc4 <osThreadNew>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4a39      	ldr	r2, [pc, #228]	; (8000ca4 <MX_FREERTOS_Init+0x1e8>)
 8000bc0:	6013      	str	r3, [r2, #0]

  /* creation of WithdrawLightsT */
  WithdrawLightsTHandle = osThreadNew(StartWithdrawLightsTask, NULL, &WithdrawLightsT_attributes);
 8000bc2:	4a39      	ldr	r2, [pc, #228]	; (8000ca8 <MX_FREERTOS_Init+0x1ec>)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4839      	ldr	r0, [pc, #228]	; (8000cac <MX_FREERTOS_Init+0x1f0>)
 8000bc8:	f008 f8fc 	bl	8008dc4 <osThreadNew>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4a38      	ldr	r2, [pc, #224]	; (8000cb0 <MX_FREERTOS_Init+0x1f4>)
 8000bd0:	6013      	str	r3, [r2, #0]

  /* creation of ResumeFromStopT */
  ResumeFromStopTHandle = osThreadNew(StartResumeFromStopTask, NULL, &ResumeFromStopT_attributes);
 8000bd2:	4a38      	ldr	r2, [pc, #224]	; (8000cb4 <MX_FREERTOS_Init+0x1f8>)
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4838      	ldr	r0, [pc, #224]	; (8000cb8 <MX_FREERTOS_Init+0x1fc>)
 8000bd8:	f008 f8f4 	bl	8008dc4 <osThreadNew>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4a37      	ldr	r2, [pc, #220]	; (8000cbc <MX_FREERTOS_Init+0x200>)
 8000be0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	0800d428 	.word	0x0800d428
 8000bec:	080017e1 	.word	0x080017e1
 8000bf0:	20000164 	.word	0x20000164
 8000bf4:	0800d1c4 	.word	0x0800d1c4
 8000bf8:	08000cc1 	.word	0x08000cc1
 8000bfc:	20000120 	.word	0x20000120
 8000c00:	0800d1e8 	.word	0x0800d1e8
 8000c04:	08000ddd 	.word	0x08000ddd
 8000c08:	20000124 	.word	0x20000124
 8000c0c:	0800d20c 	.word	0x0800d20c
 8000c10:	08000ef9 	.word	0x08000ef9
 8000c14:	20000128 	.word	0x20000128
 8000c18:	0800d230 	.word	0x0800d230
 8000c1c:	08000ff1 	.word	0x08000ff1
 8000c20:	2000012c 	.word	0x2000012c
 8000c24:	0800d254 	.word	0x0800d254
 8000c28:	08001055 	.word	0x08001055
 8000c2c:	20000130 	.word	0x20000130
 8000c30:	0800d278 	.word	0x0800d278
 8000c34:	080012b9 	.word	0x080012b9
 8000c38:	20000134 	.word	0x20000134
 8000c3c:	0800d29c 	.word	0x0800d29c
 8000c40:	08001335 	.word	0x08001335
 8000c44:	20000138 	.word	0x20000138
 8000c48:	0800d2c0 	.word	0x0800d2c0
 8000c4c:	080013b1 	.word	0x080013b1
 8000c50:	2000013c 	.word	0x2000013c
 8000c54:	0800d2e4 	.word	0x0800d2e4
 8000c58:	08001405 	.word	0x08001405
 8000c5c:	20000140 	.word	0x20000140
 8000c60:	0800d308 	.word	0x0800d308
 8000c64:	08001459 	.word	0x08001459
 8000c68:	20000144 	.word	0x20000144
 8000c6c:	0800d32c 	.word	0x0800d32c
 8000c70:	08001505 	.word	0x08001505
 8000c74:	20000148 	.word	0x20000148
 8000c78:	0800d350 	.word	0x0800d350
 8000c7c:	080015c1 	.word	0x080015c1
 8000c80:	2000014c 	.word	0x2000014c
 8000c84:	0800d374 	.word	0x0800d374
 8000c88:	08001651 	.word	0x08001651
 8000c8c:	20000150 	.word	0x20000150
 8000c90:	0800d398 	.word	0x0800d398
 8000c94:	080016dd 	.word	0x080016dd
 8000c98:	20000154 	.word	0x20000154
 8000c9c:	0800d3bc 	.word	0x0800d3bc
 8000ca0:	08001719 	.word	0x08001719
 8000ca4:	20000158 	.word	0x20000158
 8000ca8:	0800d3e0 	.word	0x0800d3e0
 8000cac:	08001749 	.word	0x08001749
 8000cb0:	2000015c 	.word	0x2000015c
 8000cb4:	0800d404 	.word	0x0800d404
 8000cb8:	08001785 	.word	0x08001785
 8000cbc:	20000160 	.word	0x20000160

08000cc0 <StartOLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
	// Prepare bodyVersion string
	strcat(bodyVersion, versionName);
 8000cc8:	493b      	ldr	r1, [pc, #236]	; (8000db8 <StartOLEDTask+0xf8>)
 8000cca:	483c      	ldr	r0, [pc, #240]	; (8000dbc <StartOLEDTask+0xfc>)
 8000ccc:	f00b faa3 	bl	800c216 <strcat>

	// Initiate display
	ssd1306_Init();
 8000cd0:	f001 f98e 	bl	8001ff0 <ssd1306_Init>
	uint8_t y = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
	ssd1306_Fill(Black);
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f001 f9f3 	bl	80020c4 <ssd1306_Fill>

	// Set header
	ssd1306_SetCursor(2, y);
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	f001 fb30 	bl	8002348 <ssd1306_SetCursor>
	ssd1306_WriteString(headerBootingUp, Font_7x10, White);
 8000ce8:	4a35      	ldr	r2, [pc, #212]	; (8000dc0 <StartOLEDTask+0x100>)
 8000cea:	2301      	movs	r3, #1
 8000cec:	ca06      	ldmia	r2, {r1, r2}
 8000cee:	4835      	ldr	r0, [pc, #212]	; (8000dc4 <StartOLEDTask+0x104>)
 8000cf0:	f001 fb04 	bl	80022fc <ssd1306_WriteString>
	y += 30;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	331e      	adds	r3, #30
 8000cf8:	73fb      	strb	r3, [r7, #15]

	// Set body
	ssd1306_SetCursor(2, y);
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	2002      	movs	r0, #2
 8000d00:	f001 fb22 	bl	8002348 <ssd1306_SetCursor>
	ssd1306_WriteString(bodyVersion, Font_11x18, White);
 8000d04:	4a30      	ldr	r2, [pc, #192]	; (8000dc8 <StartOLEDTask+0x108>)
 8000d06:	2301      	movs	r3, #1
 8000d08:	ca06      	ldmia	r2, {r1, r2}
 8000d0a:	482c      	ldr	r0, [pc, #176]	; (8000dbc <StartOLEDTask+0xfc>)
 8000d0c:	f001 faf6 	bl	80022fc <ssd1306_WriteString>
	y += 36;
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	3324      	adds	r3, #36	; 0x24
 8000d14:	73fb      	strb	r3, [r7, #15]

	// Show content
	ssd1306_UpdateScreen();
 8000d16:	f001 f9ed 	bl	80020f4 <ssd1306_UpdateScreen>
	y = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73fb      	strb	r3, [r7, #15]

	// Delay
	osDelay(STARTUP_DURATION);
 8000d1e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d22:	f008 f8f5 	bl	8008f10 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  // Clear screen
	  ssd1306_Fill(Black);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f001 f9cc 	bl	80020c4 <ssd1306_Fill>

	  if(isConnected) {
 8000d2c:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <StartOLEDTask+0x10c>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d01c      	beq.n	8000d70 <StartOLEDTask+0xb0>
		  // Set header
		  ssd1306_SetCursor(2, y);
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	f001 fb04 	bl	8002348 <ssd1306_SetCursor>
		  ssd1306_WriteString(headerConnected, Font_7x10, White);
 8000d40:	4a1f      	ldr	r2, [pc, #124]	; (8000dc0 <StartOLEDTask+0x100>)
 8000d42:	2301      	movs	r3, #1
 8000d44:	ca06      	ldmia	r2, {r1, r2}
 8000d46:	4822      	ldr	r0, [pc, #136]	; (8000dd0 <StartOLEDTask+0x110>)
 8000d48:	f001 fad8 	bl	80022fc <ssd1306_WriteString>
		  y += 30;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	331e      	adds	r3, #30
 8000d50:	73fb      	strb	r3, [r7, #15]

		  // Set body
		  ssd1306_SetCursor(2, y);
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	4619      	mov	r1, r3
 8000d56:	2002      	movs	r0, #2
 8000d58:	f001 faf6 	bl	8002348 <ssd1306_SetCursor>
		  ssd1306_WriteString(bodyLogotype, Font_11x18, White);
 8000d5c:	4a1a      	ldr	r2, [pc, #104]	; (8000dc8 <StartOLEDTask+0x108>)
 8000d5e:	2301      	movs	r3, #1
 8000d60:	ca06      	ldmia	r2, {r1, r2}
 8000d62:	481c      	ldr	r0, [pc, #112]	; (8000dd4 <StartOLEDTask+0x114>)
 8000d64:	f001 faca 	bl	80022fc <ssd1306_WriteString>
		  y += 36;
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	3324      	adds	r3, #36	; 0x24
 8000d6c:	73fb      	strb	r3, [r7, #15]
 8000d6e:	e01b      	b.n	8000da8 <StartOLEDTask+0xe8>
	  } else {
		  // Set header
		  ssd1306_SetCursor(2, y);
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	4619      	mov	r1, r3
 8000d74:	2002      	movs	r0, #2
 8000d76:	f001 fae7 	bl	8002348 <ssd1306_SetCursor>
		  ssd1306_WriteString(headerDisconnected, Font_7x10, White);
 8000d7a:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <StartOLEDTask+0x100>)
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	ca06      	ldmia	r2, {r1, r2}
 8000d80:	4815      	ldr	r0, [pc, #84]	; (8000dd8 <StartOLEDTask+0x118>)
 8000d82:	f001 fabb 	bl	80022fc <ssd1306_WriteString>
		  y += 30;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	331e      	adds	r3, #30
 8000d8a:	73fb      	strb	r3, [r7, #15]

		  // Set body
		  ssd1306_SetCursor(2, y);
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	2002      	movs	r0, #2
 8000d92:	f001 fad9 	bl	8002348 <ssd1306_SetCursor>
		  ssd1306_WriteString(bodyLogotype, Font_11x18, White);
 8000d96:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <StartOLEDTask+0x108>)
 8000d98:	2301      	movs	r3, #1
 8000d9a:	ca06      	ldmia	r2, {r1, r2}
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <StartOLEDTask+0x114>)
 8000d9e:	f001 faad 	bl	80022fc <ssd1306_WriteString>
		  y += 36;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	3324      	adds	r3, #36	; 0x24
 8000da6:	73fb      	strb	r3, [r7, #15]
	  }

	  // Show content
	  ssd1306_UpdateScreen();
 8000da8:	f001 f9a4 	bl	80020f4 <ssd1306_UpdateScreen>
	  y = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]

	  vTaskSuspend(NULL);
 8000db0:	2000      	movs	r0, #0
 8000db2:	f009 fa11 	bl	800a1d8 <vTaskSuspend>
	  ssd1306_Fill(Black);
 8000db6:	e7b6      	b.n	8000d26 <StartOLEDTask+0x66>
 8000db8:	0800d1c0 	.word	0x0800d1c0
 8000dbc:	2000002c 	.word	0x2000002c
 8000dc0:	20000044 	.word	0x20000044
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	2000004c 	.word	0x2000004c
 8000dcc:	200000dd 	.word	0x200000dd
 8000dd0:	20000020 	.word	0x20000020
 8000dd4:	20000038 	.word	0x20000038
 8000dd8:	20000010 	.word	0x20000010

08000ddc <StartDispatcherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDispatcherTask */
void StartDispatcherTask(void *argument)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDispatcherTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f009 f9f7 	bl	800a1d8 <vTaskSuspend>

	  switch(RxBuffer[0]) {
 8000dea:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <StartDispatcherTask+0xe8>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	3b01      	subs	r3, #1
 8000df2:	2b0d      	cmp	r3, #13
 8000df4:	d860      	bhi.n	8000eb8 <StartDispatcherTask+0xdc>
 8000df6:	a201      	add	r2, pc, #4	; (adr r2, 8000dfc <StartDispatcherTask+0x20>)
 8000df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfc:	08000e35 	.word	0x08000e35
 8000e00:	08000e41 	.word	0x08000e41
 8000e04:	08000e4d 	.word	0x08000e4d
 8000e08:	08000e59 	.word	0x08000e59
 8000e0c:	08000e65 	.word	0x08000e65
 8000e10:	08000e71 	.word	0x08000e71
 8000e14:	08000e7d 	.word	0x08000e7d
 8000e18:	08000eb9 	.word	0x08000eb9
 8000e1c:	08000eb9 	.word	0x08000eb9
 8000e20:	08000eb9 	.word	0x08000eb9
 8000e24:	08000e89 	.word	0x08000e89
 8000e28:	08000e95 	.word	0x08000e95
 8000e2c:	08000ea1 	.word	0x08000ea1
 8000e30:	08000ead 	.word	0x08000ead
		case 0x01:		// Stop vehicle.
			vTaskResume(StopTaskHandle);
 8000e34:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <StartDispatcherTask+0xec>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f009 fa79 	bl	800a330 <vTaskResume>
			break;
 8000e3e:	e040      	b.n	8000ec2 <StartDispatcherTask+0xe6>
		case 0x02:		// Toggle driving lights.
			vTaskResume(DrivingLightsTaHandle);
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <StartDispatcherTask+0xf0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f009 fa73 	bl	800a330 <vTaskResume>
			break;
 8000e4a:	e03a      	b.n	8000ec2 <StartDispatcherTask+0xe6>
		case 0x03:		// Toggle RGB stripe.
			vTaskResume(LEDStripesTaskHandle);
 8000e4c:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <StartDispatcherTask+0xf4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f009 fa6d 	bl	800a330 <vTaskResume>
			break;
 8000e56:	e034      	b.n	8000ec2 <StartDispatcherTask+0xe6>
		case 0x04:		// Turn left blinkers on.
			vTaskResume(LeftBlinkersTasHandle);
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <StartDispatcherTask+0xf8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f009 fa67 	bl	800a330 <vTaskResume>
			break;
 8000e62:	e02e      	b.n	8000ec2 <StartDispatcherTask+0xe6>
		case 0x05:		// Turn right blinkers on.
			vTaskResume(RightBlinkersTaHandle);
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <StartDispatcherTask+0xfc>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f009 fa61 	bl	800a330 <vTaskResume>
			break;
 8000e6e:	e028      	b.n	8000ec2 <StartDispatcherTask+0xe6>
		case 0x06:		// Toggle parking to the left.
			vTaskResume(ParkLeftTaskHandle);
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <StartDispatcherTask+0x100>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f009 fa5b 	bl	800a330 <vTaskResume>
			break;
 8000e7a:	e022      	b.n	8000ec2 <StartDispatcherTask+0xe6>
		case 0x07:		// Toggle parking to the right.
			vTaskResume(ParkRightTaskHandle);
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <StartDispatcherTask+0x104>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f009 fa55 	bl	800a330 <vTaskResume>
			break;
 8000e86:	e01c      	b.n	8000ec2 <StartDispatcherTask+0xe6>
		case 0x0B:		// Accelerate.
			vTaskResume(AccelerateTaskHandle);
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <StartDispatcherTask+0x108>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f009 fa4f 	bl	800a330 <vTaskResume>
			break;
 8000e92:	e016      	b.n	8000ec2 <StartDispatcherTask+0xe6>
		case 0x0C:		// Decelerate.
			vTaskResume(DecelerateTaskHandle);
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <StartDispatcherTask+0x10c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f009 fa49 	bl	800a330 <vTaskResume>
			break;
 8000e9e:	e010      	b.n	8000ec2 <StartDispatcherTask+0xe6>
		case 0x0D:		// Turn left.
			vTaskResume(TurnLeftTaskHandle);
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <StartDispatcherTask+0x110>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f009 fa43 	bl	800a330 <vTaskResume>
			break;
 8000eaa:	e00a      	b.n	8000ec2 <StartDispatcherTask+0xe6>
		case 0x0E:		// Turn right.
			vTaskResume(TurnRightTaskHandle);
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <StartDispatcherTask+0x114>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f009 fa3d 	bl	800a330 <vTaskResume>
			break;
 8000eb6:	e004      	b.n	8000ec2 <StartDispatcherTask+0xe6>
		default:		// Acknowledge connection.
			vTaskResume(ConnectionTaskHandle);
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <StartDispatcherTask+0x118>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f009 fa37 	bl	800a330 <vTaskResume>
	  vTaskSuspend(NULL);
 8000ec2:	e78f      	b.n	8000de4 <StartDispatcherTask+0x8>
 8000ec4:	20000104 	.word	0x20000104
 8000ec8:	20000128 	.word	0x20000128
 8000ecc:	2000012c 	.word	0x2000012c
 8000ed0:	20000130 	.word	0x20000130
 8000ed4:	20000134 	.word	0x20000134
 8000ed8:	20000138 	.word	0x20000138
 8000edc:	2000013c 	.word	0x2000013c
 8000ee0:	20000140 	.word	0x20000140
 8000ee4:	20000144 	.word	0x20000144
 8000ee8:	20000148 	.word	0x20000148
 8000eec:	2000014c 	.word	0x2000014c
 8000ef0:	20000150 	.word	0x20000150
 8000ef4:	20000154 	.word	0x20000154

08000ef8 <StartStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStopTask */
void StartStopTask(void *argument)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000f00:	2000      	movs	r0, #0
 8000f02:	f009 f969 	bl	800a1d8 <vTaskSuspend>

	  // Stop parking if applicable
	  vTaskSuspend(ParkLeftTaskHandle);
 8000f06:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <StartStopTask+0xbc>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f009 f964 	bl	800a1d8 <vTaskSuspend>
	  vTaskSuspend(ParkRightTaskHandle);
 8000f10:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <StartStopTask+0xc0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f009 f95f 	bl	800a1d8 <vTaskSuspend>

	  // Stop BLDC motor
	  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8000f1a:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <StartStopTask+0xc4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a28      	ldr	r2, [pc, #160]	; (8000fc0 <StartStopTask+0xc8>)
 8000f20:	6013      	str	r3, [r2, #0]
	  sliderAccelerateDecelerateCurrentValue = 0;
 8000f22:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <StartStopTask+0xc4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
	  setBLDCMotorSpeed();
 8000f28:	f7ff fb9a 	bl	8000660 <setBLDCMotorSpeed>

	  // Set LED stripes
	  isStopped = true;
 8000f2c:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <StartStopTask+0xcc>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
	  stripesEffect = STOP;
 8000f32:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <StartStopTask+0xd0>)
 8000f34:	2202      	movs	r2, #2
 8000f36:	701a      	strb	r2, [r3, #0]
	  ommitToggle = true;
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <StartStopTask+0xd4>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
	  internalFunctionCall = true;
 8000f3e:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <StartStopTask+0xd8>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
	  vTaskResume(LEDStripesTaskHandle);
 8000f44:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <StartStopTask+0xdc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f009 f9f1 	bl	800a330 <vTaskResume>

	  // Home stepper motor
	  moveStepperMotorUntil(0);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff fc46 	bl	80007e0 <moveStepperMotorUntil>

	  // Reset parking state
	  isParking = false;
 8000f54:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <StartStopTask+0xe0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
	  vTaskDelete(ParkLeftTaskHandle);
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <StartStopTask+0xbc>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f009 f890 	bl	800a084 <vTaskDelete>
	  vTaskDelete(ParkRightTaskHandle);
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <StartStopTask+0xc0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f009 f88b 	bl	800a084 <vTaskDelete>
	  ParkLeftTaskHandle = osThreadNew(StartParkLeftTask, NULL, &ParkLeftTask_attributes);
 8000f6e:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <StartStopTask+0xe4>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	481b      	ldr	r0, [pc, #108]	; (8000fe0 <StartStopTask+0xe8>)
 8000f74:	f007 ff26 	bl	8008dc4 <osThreadNew>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <StartStopTask+0xbc>)
 8000f7c:	6013      	str	r3, [r2, #0]
	  ParkRightTaskHandle = osThreadNew(StartParkRightTask, NULL, &ParkRightTask_attributes);
 8000f7e:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <StartStopTask+0xec>)
 8000f80:	2100      	movs	r1, #0
 8000f82:	4819      	ldr	r0, [pc, #100]	; (8000fe8 <StartStopTask+0xf0>)
 8000f84:	f007 ff1e 	bl	8008dc4 <osThreadNew>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <StartStopTask+0xc0>)
 8000f8c:	6013      	str	r3, [r2, #0]

	  // Turn off all the lights
	  HAL_GPIO_WritePin(DrivingLights_GPIO_Port, DrivingLights_Pin, RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f94:	4815      	ldr	r0, [pc, #84]	; (8000fec <StartStopTask+0xf4>)
 8000f96:	f003 f853 	bl	8004040 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BrakeLights_GPIO_Port, BrakeLights_Pin, RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa0:	4812      	ldr	r0, [pc, #72]	; (8000fec <StartStopTask+0xf4>)
 8000fa2:	f003 f84d 	bl	8004040 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fac:	480f      	ldr	r0, [pc, #60]	; (8000fec <StartStopTask+0xf4>)
 8000fae:	f003 f847 	bl	8004040 <HAL_GPIO_WritePin>
	  vTaskSuspend(NULL);
 8000fb2:	e7a5      	b.n	8000f00 <StartStopTask+0x8>
 8000fb4:	2000013c 	.word	0x2000013c
 8000fb8:	20000140 	.word	0x20000140
 8000fbc:	200000e8 	.word	0x200000e8
 8000fc0:	200000e4 	.word	0x200000e4
 8000fc4:	200000e1 	.word	0x200000e1
 8000fc8:	200000de 	.word	0x200000de
 8000fcc:	200000e0 	.word	0x200000e0
 8000fd0:	200000dc 	.word	0x200000dc
 8000fd4:	20000130 	.word	0x20000130
 8000fd8:	20000100 	.word	0x20000100
 8000fdc:	0800d2c0 	.word	0x0800d2c0
 8000fe0:	080013b1 	.word	0x080013b1
 8000fe4:	0800d2e4 	.word	0x0800d2e4
 8000fe8:	08001405 	.word	0x08001405
 8000fec:	40020800 	.word	0x40020800

08000ff0 <StartDrivingLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDrivingLightsTask */
void StartDrivingLightsTask(void *argument)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDrivingLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f009 f8ed 	bl	800a1d8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <StartDrivingLightsTask+0x50>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	f083 0301 	eor.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d104      	bne.n	8001018 <StartDrivingLightsTask+0x28>
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <StartDrivingLightsTask+0x54>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0ef      	beq.n	8000ff8 <StartDrivingLightsTask+0x8>
		  internalFunctionCall = false;
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <StartDrivingLightsTask+0x54>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <StartDrivingLightsTask+0x58>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d004      	beq.n	8001032 <StartDrivingLightsTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <StartDrivingLightsTask+0x5c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f009 f97f 	bl	800a330 <vTaskResume>
		  }

		  // Driving lights effect
		  HAL_GPIO_TogglePin(DrivingLights_GPIO_Port, DrivingLights_Pin);
 8001032:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <StartDrivingLightsTask+0x60>)
 8001038:	f003 f81b 	bl	8004072 <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 800103c:	e7dc      	b.n	8000ff8 <StartDrivingLightsTask+0x8>
 800103e:	bf00      	nop
 8001040:	20000100 	.word	0x20000100
 8001044:	200000dc 	.word	0x200000dc
 8001048:	200000e1 	.word	0x200000e1
 800104c:	20000160 	.word	0x20000160
 8001050:	40020800 	.word	0x40020800

08001054 <StartLEDStripesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDStripesTask */
void StartLEDStripesTask(void *argument)
{
 8001054:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001058:	b096      	sub	sp, #88	; 0x58
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDStripesTask */
	// Set StripesEffect enum
	stripesEffect = NONE;
 800105e:	4b8e      	ldr	r3, [pc, #568]	; (8001298 <StartLEDStripesTask+0x244>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]

	// Transmit 4 empty bytes to ensure SDO is low
	uint8_t d[4] = {0};
 8001064:	2300      	movs	r3, #0
 8001066:	647b      	str	r3, [r7, #68]	; 0x44
	HAL_SPI_Transmit(&hspi1, d, 4, 100);
 8001068:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800106c:	2364      	movs	r3, #100	; 0x64
 800106e:	2204      	movs	r2, #4
 8001070:	488a      	ldr	r0, [pc, #552]	; (800129c <StartLEDStripesTask+0x248>)
 8001072:	f004 fec4 	bl	8005dfe <HAL_SPI_Transmit>

	// Create handle and configure
	ws2812b_handle_t hws2812b;

	hws2812b.config.packing = PACKING; // See macro above
 8001076:	2301      	movs	r3, #1
 8001078:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hws2812b.config.pulse_len_1 = WS2812B_PULSE_LEN_6b;
 800107c:	233f      	movs	r3, #63	; 0x3f
 800107e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hws2812b.config.pulse_len_0 = WS2812B_PULSE_LEN_2b;
 8001082:	2303      	movs	r3, #3
 8001084:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hws2812b.config.first_bit_0 = WS2812B_FIRST_BIT_0_ENABLED;
 8001088:	2301      	movs	r3, #1
 800108a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hws2812b.config.prefix_len = PREFIX_LEN; // See macro above
 800108e:	2301      	movs	r3, #1
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
	hws2812b.config.suffix_len = SUFFIX_LEN; // See macro above
 8001092:	2304      	movs	r3, #4
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
	hws2812b.config.spi_bit_order = WS2812B_MSB_FIRST;
 8001096:	2300      	movs	r3, #0
 8001098:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	// Create array of LEDs & set LED color
	ws2812b_led_t leds[LED_COUNT];
	struct DesiredStripesColor desiredStripesColor;
	setLEDStripesEffect(stripesEffect, &desiredStripesColor);
 800109c:	4b7e      	ldr	r3, [pc, #504]	; (8001298 <StartLEDStripesTask+0x244>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f107 0208 	add.w	r2, r7, #8
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fa97 	bl	80005dc <setLEDStripesEffect>
	for(int i = 0; i < LED_COUNT; i ++) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	657b      	str	r3, [r7, #84]	; 0x54
 80010b2:	e020      	b.n	80010f6 <StartLEDStripesTask+0xa2>
	  leds[i].red = desiredStripesColor.red;
 80010b4:	7a39      	ldrb	r1, [r7, #8]
 80010b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	3358      	adds	r3, #88	; 0x58
 80010c0:	443b      	add	r3, r7
 80010c2:	3b4c      	subs	r3, #76	; 0x4c
 80010c4:	460a      	mov	r2, r1
 80010c6:	701a      	strb	r2, [r3, #0]
	  leds[i].green = desiredStripesColor.green;
 80010c8:	7a79      	ldrb	r1, [r7, #9]
 80010ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	3358      	adds	r3, #88	; 0x58
 80010d4:	443b      	add	r3, r7
 80010d6:	3b4b      	subs	r3, #75	; 0x4b
 80010d8:	460a      	mov	r2, r1
 80010da:	701a      	strb	r2, [r3, #0]
	  leds[i].blue = desiredStripesColor.blue;
 80010dc:	7ab9      	ldrb	r1, [r7, #10]
 80010de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	3358      	adds	r3, #88	; 0x58
 80010e8:	443b      	add	r3, r7
 80010ea:	3b4a      	subs	r3, #74	; 0x4a
 80010ec:	460a      	mov	r2, r1
 80010ee:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < LED_COUNT; i ++) {
 80010f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010f2:	3301      	adds	r3, #1
 80010f4:	657b      	str	r3, [r7, #84]	; 0x54
 80010f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010f8:	2b06      	cmp	r3, #6
 80010fa:	dddb      	ble.n	80010b4 <StartLEDStripesTask+0x60>
	}

	// Add LEDs and count to handle
	hws2812b.led_count = LED_COUNT;
 80010fc:	2307      	movs	r3, #7
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
	hws2812b.leds = leds;
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38

	// Initialize the driver
	if(ws2812b_init(&hws2812b)) {
 8001106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fc46 	bl	800299c <ws2812b_init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d006      	beq.n	8001124 <StartLEDStripesTask+0xd0>
	  printf("Invalid ws2812b config! (%s)\r\n",ws2812b_error_msg);
 8001116:	4b62      	ldr	r3, [pc, #392]	; (80012a0 <StartLEDStripesTask+0x24c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4619      	mov	r1, r3
 800111c:	4861      	ldr	r0, [pc, #388]	; (80012a4 <StartLEDStripesTask+0x250>)
 800111e:	f00b f81d 	bl	800c15c <iprintf>
	  while(1) {;}
 8001122:	e7fe      	b.n	8001122 <StartLEDStripesTask+0xce>
	}

	// Create buffer
	uint8_t dma_buf[ws2812b_required_buffer_len(&hws2812b)];
 8001124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001128:	4618      	mov	r0, r3
 800112a:	f001 fdd3 	bl	8002cd4 <ws2812b_required_buffer_len>
 800112e:	4601      	mov	r1, r0
 8001130:	460b      	mov	r3, r1
 8001132:	3b01      	subs	r3, #1
 8001134:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001136:	2300      	movs	r3, #0
 8001138:	4688      	mov	r8, r1
 800113a:	4699      	mov	r9, r3
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	f04f 0300 	mov.w	r3, #0
 8001144:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001148:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800114c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001150:	2300      	movs	r3, #0
 8001152:	460c      	mov	r4, r1
 8001154:	461d      	mov	r5, r3
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	00eb      	lsls	r3, r5, #3
 8001160:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001164:	00e2      	lsls	r2, r4, #3
 8001166:	1dcb      	adds	r3, r1, #7
 8001168:	08db      	lsrs	r3, r3, #3
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	ebad 0d03 	sub.w	sp, sp, r3
 8001170:	466b      	mov	r3, sp
 8001172:	3300      	adds	r3, #0
 8001174:	64bb      	str	r3, [r7, #72]	; 0x48

	// Fill buffer
	ws2812b_fill_buffer(&hws2812b, dma_buf);
 8001176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800117c:	4618      	mov	r0, r3
 800117e:	f001 fdc4 	bl	8002d0a <ws2812b_fill_buffer>

	// Transmit
	HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 8001182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fda4 	bl	8002cd4 <ws2812b_required_buffer_len>
 800118c:	4603      	mov	r3, r0
 800118e:	b29b      	uxth	r3, r3
 8001190:	461a      	mov	r2, r3
 8001192:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001194:	4841      	ldr	r0, [pc, #260]	; (800129c <StartLEDStripesTask+0x248>)
 8001196:	f004 ffa1 	bl	80060dc <HAL_SPI_Transmit_DMA>
	HAL_Delay(10); // 10ms delay
 800119a:	200a      	movs	r0, #10
 800119c:	f001 ff3e 	bl	800301c <HAL_Delay>

  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80011a0:	2000      	movs	r0, #0
 80011a2:	f009 f819 	bl	800a1d8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 80011a6:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <StartLEDStripesTask+0x254>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f083 0301 	eor.w	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d104      	bne.n	80011c0 <StartLEDStripesTask+0x16c>
 80011b6:	4b3d      	ldr	r3, [pc, #244]	; (80012ac <StartLEDStripesTask+0x258>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0ef      	beq.n	80011a0 <StartLEDStripesTask+0x14c>
		  internalFunctionCall = false;
 80011c0:	4b3a      	ldr	r3, [pc, #232]	; (80012ac <StartLEDStripesTask+0x258>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]

		  // LED stripes effect
		  if(ommitToggle == false) {
 80011c6:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <StartLEDStripesTask+0x25c>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f083 0301 	eor.w	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d014      	beq.n	8001200 <StartLEDStripesTask+0x1ac>
			  if(isOn == false) {
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <StartLEDStripesTask+0x260>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	f083 0301 	eor.w	r3, r3, #1
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d006      	beq.n	80011f4 <StartLEDStripesTask+0x1a0>
				  isOn = true;
 80011e6:	4b33      	ldr	r3, [pc, #204]	; (80012b4 <StartLEDStripesTask+0x260>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]
				  stripesEffect = DEFAULT;
 80011ec:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <StartLEDStripesTask+0x244>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	e005      	b.n	8001200 <StartLEDStripesTask+0x1ac>
			  } else {
				  isOn = false;
 80011f4:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <StartLEDStripesTask+0x260>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
				  stripesEffect = NONE;
 80011fa:	4b27      	ldr	r3, [pc, #156]	; (8001298 <StartLEDStripesTask+0x244>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  ommitToggle = false;
 8001200:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <StartLEDStripesTask+0x25c>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]

		  // Update LED color
		  setLEDStripesEffect(stripesEffect, &desiredStripesColor);
 8001206:	4b24      	ldr	r3, [pc, #144]	; (8001298 <StartLEDStripesTask+0x244>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f107 0208 	add.w	r2, r7, #8
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f9e2 	bl	80005dc <setLEDStripesEffect>
		  for(int i = 0; i < LED_COUNT; i ++) {
 8001218:	2300      	movs	r3, #0
 800121a:	653b      	str	r3, [r7, #80]	; 0x50
 800121c:	e020      	b.n	8001260 <StartLEDStripesTask+0x20c>
			  leds[i].red = desiredStripesColor.red;
 800121e:	7a39      	ldrb	r1, [r7, #8]
 8001220:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	3358      	adds	r3, #88	; 0x58
 800122a:	443b      	add	r3, r7
 800122c:	3b4c      	subs	r3, #76	; 0x4c
 800122e:	460a      	mov	r2, r1
 8001230:	701a      	strb	r2, [r3, #0]
			  leds[i].green = desiredStripesColor.green;
 8001232:	7a79      	ldrb	r1, [r7, #9]
 8001234:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	3358      	adds	r3, #88	; 0x58
 800123e:	443b      	add	r3, r7
 8001240:	3b4b      	subs	r3, #75	; 0x4b
 8001242:	460a      	mov	r2, r1
 8001244:	701a      	strb	r2, [r3, #0]
			  leds[i].blue = desiredStripesColor.blue;
 8001246:	7ab9      	ldrb	r1, [r7, #10]
 8001248:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	3358      	adds	r3, #88	; 0x58
 8001252:	443b      	add	r3, r7
 8001254:	3b4a      	subs	r3, #74	; 0x4a
 8001256:	460a      	mov	r2, r1
 8001258:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < LED_COUNT; i ++) {
 800125a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800125c:	3301      	adds	r3, #1
 800125e:	653b      	str	r3, [r7, #80]	; 0x50
 8001260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001262:	2b06      	cmp	r3, #6
 8001264:	dddb      	ble.n	800121e <StartLEDStripesTask+0x1ca>
		  }

		  // Add LEDs to handle
		  hws2812b.leds = leds;
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	63bb      	str	r3, [r7, #56]	; 0x38

		  // Fill buffer
		  ws2812b_fill_buffer(&hws2812b, dma_buf);
 800126c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001270:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001272:	4618      	mov	r0, r3
 8001274:	f001 fd49 	bl	8002d0a <ws2812b_fill_buffer>

		  // Transmit
		  HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 8001278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fd29 	bl	8002cd4 <ws2812b_required_buffer_len>
 8001282:	4603      	mov	r3, r0
 8001284:	b29b      	uxth	r3, r3
 8001286:	461a      	mov	r2, r3
 8001288:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800128a:	4804      	ldr	r0, [pc, #16]	; (800129c <StartLEDStripesTask+0x248>)
 800128c:	f004 ff26 	bl	80060dc <HAL_SPI_Transmit_DMA>
		  HAL_Delay(10); // 10ms delay
 8001290:	200a      	movs	r0, #10
 8001292:	f001 fec3 	bl	800301c <HAL_Delay>
	  vTaskSuspend(NULL);
 8001296:	e783      	b.n	80011a0 <StartLEDStripesTask+0x14c>
 8001298:	200000de 	.word	0x200000de
 800129c:	200001bc 	.word	0x200001bc
 80012a0:	200007ac 	.word	0x200007ac
 80012a4:	0800d05c 	.word	0x0800d05c
 80012a8:	20000100 	.word	0x20000100
 80012ac:	200000dc 	.word	0x200000dc
 80012b0:	200000e0 	.word	0x200000e0
 80012b4:	200000df 	.word	0x200000df

080012b8 <StartLeftBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeftBlinkersTask */
void StartLeftBlinkersTask(void *argument)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLeftBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f008 ff89 	bl	800a1d8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <StartLeftBlinkersTask+0x68>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f083 0301 	eor.w	r3, r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d104      	bne.n	80012e0 <StartLeftBlinkersTask+0x28>
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <StartLeftBlinkersTask+0x6c>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0ef      	beq.n	80012c0 <StartLeftBlinkersTask+0x8>
		  internalFunctionCall = false;
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <StartLeftBlinkersTask+0x6c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <StartLeftBlinkersTask+0x70>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d004      	beq.n	80012fa <StartLeftBlinkersTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <StartLeftBlinkersTask+0x74>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f009 f81b 	bl	800a330 <vTaskResume>
		  }

		  // Left blinkers effect
		  for(int i = 0; i < 6; i ++) {
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	e00b      	b.n	8001318 <StartLeftBlinkersTask+0x60>
			  HAL_GPIO_TogglePin(LeftBlinkers_GPIO_Port, LeftBlinkers_Pin);
 8001300:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001304:	480a      	ldr	r0, [pc, #40]	; (8001330 <StartLeftBlinkersTask+0x78>)
 8001306:	f002 feb4 	bl	8004072 <HAL_GPIO_TogglePin>
			  osDelay(BLINKERS_DURATION);
 800130a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800130e:	f007 fdff 	bl	8008f10 <osDelay>
		  for(int i = 0; i < 6; i ++) {
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3301      	adds	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b05      	cmp	r3, #5
 800131c:	ddf0      	ble.n	8001300 <StartLeftBlinkersTask+0x48>
	  vTaskSuspend(NULL);
 800131e:	e7cf      	b.n	80012c0 <StartLeftBlinkersTask+0x8>
 8001320:	20000100 	.word	0x20000100
 8001324:	200000dc 	.word	0x200000dc
 8001328:	200000e1 	.word	0x200000e1
 800132c:	20000160 	.word	0x20000160
 8001330:	40020800 	.word	0x40020800

08001334 <StartRightBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRightBlinkersTask */
void StartRightBlinkersTask(void *argument)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRightBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 800133c:	2000      	movs	r0, #0
 800133e:	f008 ff4b 	bl	800a1d8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <StartRightBlinkersTask+0x68>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	f083 0301 	eor.w	r3, r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d104      	bne.n	800135c <StartRightBlinkersTask+0x28>
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <StartRightBlinkersTask+0x6c>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0ef      	beq.n	800133c <StartRightBlinkersTask+0x8>
		  internalFunctionCall = false;
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <StartRightBlinkersTask+0x6c>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <StartRightBlinkersTask+0x70>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d004      	beq.n	8001376 <StartRightBlinkersTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <StartRightBlinkersTask+0x74>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f008 ffdd 	bl	800a330 <vTaskResume>
		  }

		  // Right blinkers effect
		  for(int i = 0; i < 6; i ++) {
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	e00b      	b.n	8001394 <StartRightBlinkersTask+0x60>
			  HAL_GPIO_TogglePin(RightBlinkers_GPIO_Port, RightBlinkers_Pin);
 800137c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001380:	480a      	ldr	r0, [pc, #40]	; (80013ac <StartRightBlinkersTask+0x78>)
 8001382:	f002 fe76 	bl	8004072 <HAL_GPIO_TogglePin>
			  osDelay(BLINKERS_DURATION);
 8001386:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800138a:	f007 fdc1 	bl	8008f10 <osDelay>
		  for(int i = 0; i < 6; i ++) {
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	3301      	adds	r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b05      	cmp	r3, #5
 8001398:	ddf0      	ble.n	800137c <StartRightBlinkersTask+0x48>
	  vTaskSuspend(NULL);
 800139a:	e7cf      	b.n	800133c <StartRightBlinkersTask+0x8>
 800139c:	20000100 	.word	0x20000100
 80013a0:	200000dc 	.word	0x200000dc
 80013a4:	200000e1 	.word	0x200000e1
 80013a8:	20000160 	.word	0x20000160
 80013ac:	40020800 	.word	0x40020800

080013b0 <StartParkLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkLeftTask */
void StartParkLeftTask(void *argument)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f008 ff0d 	bl	800a1d8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false) {
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <StartParkLeftTask+0x48>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f083 0301 	eor.w	r3, r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f4      	beq.n	80013b8 <StartParkLeftTask+0x8>
		  // Exit stopped state if applicable
		  if(isStopped) {
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <StartParkLeftTask+0x4c>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <StartParkLeftTask+0x32>
			  vTaskResume(ResumeFromStopTHandle);
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <StartParkLeftTask+0x50>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f008 ffa7 	bl	800a330 <vTaskResume>
		  }

		  // Park to the left
		  isParking = true;
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <StartParkLeftTask+0x48>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
		  park(LEFT);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff fa3b 	bl	8000864 <park>
		  isParking = false;
 80013ee:	4b02      	ldr	r3, [pc, #8]	; (80013f8 <StartParkLeftTask+0x48>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
	  vTaskSuspend(NULL);
 80013f4:	e7e0      	b.n	80013b8 <StartParkLeftTask+0x8>
 80013f6:	bf00      	nop
 80013f8:	20000100 	.word	0x20000100
 80013fc:	200000e1 	.word	0x200000e1
 8001400:	20000160 	.word	0x20000160

08001404 <StartParkRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkRightTask */
void StartParkRightTask(void *argument)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 800140c:	2000      	movs	r0, #0
 800140e:	f008 fee3 	bl	800a1d8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false) {
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <StartParkRightTask+0x48>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f083 0301 	eor.w	r3, r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f4      	beq.n	800140c <StartParkRightTask+0x8>
		  // Exit stopped state if applicable
		  if(isStopped) {
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <StartParkRightTask+0x4c>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d004      	beq.n	8001436 <StartParkRightTask+0x32>
			  vTaskResume(ResumeFromStopTHandle);
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <StartParkRightTask+0x50>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f008 ff7d 	bl	800a330 <vTaskResume>
		  }

		  // Park to the right
		  isParking = true;
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <StartParkRightTask+0x48>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
		  park(RIGHT);
 800143c:	2001      	movs	r0, #1
 800143e:	f7ff fa11 	bl	8000864 <park>
		  isParking = false;
 8001442:	4b02      	ldr	r3, [pc, #8]	; (800144c <StartParkRightTask+0x48>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
	  vTaskSuspend(NULL);
 8001448:	e7e0      	b.n	800140c <StartParkRightTask+0x8>
 800144a:	bf00      	nop
 800144c:	20000100 	.word	0x20000100
 8001450:	200000e1 	.word	0x200000e1
 8001454:	20000160 	.word	0x20000160

08001458 <StartAccelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccelerateTask */
void StartAccelerateTask(void *argument)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccelerateTask */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0.0);
 8001460:	2300      	movs	r3, #0
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	481e      	ldr	r0, [pc, #120]	; (80014e0 <StartAccelerateTask+0x88>)
 8001468:	f001 ffac 	bl	80033c4 <HAL_DAC_SetValue>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 800146c:	2000      	movs	r0, #0
 800146e:	f008 feb3 	bl	800a1d8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <StartAccelerateTask+0x8c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f083 0301 	eor.w	r3, r3, #1
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d104      	bne.n	800148c <StartAccelerateTask+0x34>
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <StartAccelerateTask+0x90>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0ef      	beq.n	800146c <StartAccelerateTask+0x14>
		  internalFunctionCall = false;
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <StartAccelerateTask+0x90>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <StartAccelerateTask+0x94>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d004      	beq.n	80014a6 <StartAccelerateTask+0x4e>
			  vTaskResume(ResumeFromStopTHandle);
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <StartAccelerateTask+0x98>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f008 ff45 	bl	800a330 <vTaskResume>
		  }

		  // Accelerate if possible
		  if(sliderAccelerateDecelerateCurrentValue < 4) {
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <StartAccelerateTask+0x9c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	dc08      	bgt.n	80014c0 <StartAccelerateTask+0x68>
			  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <StartAccelerateTask+0x9c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a11      	ldr	r2, [pc, #68]	; (80014f8 <StartAccelerateTask+0xa0>)
 80014b4:	6013      	str	r3, [r2, #0]
			  sliderAccelerateDecelerateCurrentValue ++;
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <StartAccelerateTask+0x9c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <StartAccelerateTask+0x9c>)
 80014be:	6013      	str	r3, [r2, #0]
		  }
		  setBLDCMotorSpeed();
 80014c0:	f7ff f8ce 	bl	8000660 <setBLDCMotorSpeed>

		  // Set withdraw lights appropriately
		  if(sliderAccelerateDecelerateCurrentValue >= 0) {
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <StartAccelerateTask+0x9c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	dbcf      	blt.n	800146c <StartAccelerateTask+0x14>
			  isWithdrawing = false;
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <StartAccelerateTask+0xa4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
			  vTaskResume(WithdrawLightsTHandle);
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <StartAccelerateTask+0xa8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f008 ff2a 	bl	800a330 <vTaskResume>
	  vTaskSuspend(NULL);
 80014dc:	e7c6      	b.n	800146c <StartAccelerateTask+0x14>
 80014de:	bf00      	nop
 80014e0:	2000010c 	.word	0x2000010c
 80014e4:	20000100 	.word	0x20000100
 80014e8:	200000dc 	.word	0x200000dc
 80014ec:	200000e1 	.word	0x200000e1
 80014f0:	20000160 	.word	0x20000160
 80014f4:	200000e8 	.word	0x200000e8
 80014f8:	200000e4 	.word	0x200000e4
 80014fc:	200000ec 	.word	0x200000ec
 8001500:	2000015c 	.word	0x2000015c

08001504 <StartDecelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDecelerateTask */
void StartDecelerateTask(void *argument)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDecelerateTask */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0.0);
 800150c:	2300      	movs	r3, #0
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	4821      	ldr	r0, [pc, #132]	; (8001598 <StartDecelerateTask+0x94>)
 8001514:	f001 ff56 	bl	80033c4 <HAL_DAC_SetValue>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001518:	2000      	movs	r0, #0
 800151a:	f008 fe5d 	bl	800a1d8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 800151e:	4b1f      	ldr	r3, [pc, #124]	; (800159c <StartDecelerateTask+0x98>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	f083 0301 	eor.w	r3, r3, #1
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d104      	bne.n	8001538 <StartDecelerateTask+0x34>
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <StartDecelerateTask+0x9c>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0ef      	beq.n	8001518 <StartDecelerateTask+0x14>
		  internalFunctionCall = false;
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <StartDecelerateTask+0x9c>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <StartDecelerateTask+0xa0>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d004      	beq.n	8001552 <StartDecelerateTask+0x4e>
			  vTaskResume(ResumeFromStopTHandle);
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <StartDecelerateTask+0xa4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f008 feef 	bl	800a330 <vTaskResume>
		  }

		  // Decelerate if possible
		  if(sliderAccelerateDecelerateCurrentValue > -2) {
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <StartDecelerateTask+0xa8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155a:	db08      	blt.n	800156e <StartDecelerateTask+0x6a>
			  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <StartDecelerateTask+0xa8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <StartDecelerateTask+0xac>)
 8001562:	6013      	str	r3, [r2, #0]
			  sliderAccelerateDecelerateCurrentValue --;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <StartDecelerateTask+0xa8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3b01      	subs	r3, #1
 800156a:	4a10      	ldr	r2, [pc, #64]	; (80015ac <StartDecelerateTask+0xa8>)
 800156c:	6013      	str	r3, [r2, #0]
		  }
		  setBLDCMotorSpeed();
 800156e:	f7ff f877 	bl	8000660 <setBLDCMotorSpeed>

		  // Set withdraw lights appropriately
		  if(sliderAccelerateDecelerateCurrentValue >= 0) {
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <StartDecelerateTask+0xa8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	db05      	blt.n	8001586 <StartDecelerateTask+0x82>
			  vTaskResume(BrakeLightsTaskHandle);
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <StartDecelerateTask+0xb0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f008 fed6 	bl	800a330 <vTaskResume>
 8001584:	e7c8      	b.n	8001518 <StartDecelerateTask+0x14>
		  } else {
			  isWithdrawing = true;
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <StartDecelerateTask+0xb4>)
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
			  vTaskResume(WithdrawLightsTHandle);
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <StartDecelerateTask+0xb8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f008 fecd 	bl	800a330 <vTaskResume>
	  vTaskSuspend(NULL);
 8001596:	e7bf      	b.n	8001518 <StartDecelerateTask+0x14>
 8001598:	2000010c 	.word	0x2000010c
 800159c:	20000100 	.word	0x20000100
 80015a0:	200000dc 	.word	0x200000dc
 80015a4:	200000e1 	.word	0x200000e1
 80015a8:	20000160 	.word	0x20000160
 80015ac:	200000e8 	.word	0x200000e8
 80015b0:	200000e4 	.word	0x200000e4
 80015b4:	20000158 	.word	0x20000158
 80015b8:	200000ec 	.word	0x200000ec
 80015bc:	2000015c 	.word	0x2000015c

080015c0 <StartTurnLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnLeftTask */
void StartTurnLeftTask(void *argument)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnLeftTask */
	HAL_GPIO_WritePin(StepperMotorEn_GPIO_Port, StepperMotorEn_Pin, SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ce:	4819      	ldr	r0, [pc, #100]	; (8001634 <StartTurnLeftTask+0x74>)
 80015d0:	f002 fd36 	bl	8004040 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80015d4:	2000      	movs	r0, #0
 80015d6:	f008 fdff 	bl	800a1d8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <StartTurnLeftTask+0x78>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	f083 0301 	eor.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d104      	bne.n	80015f4 <StartTurnLeftTask+0x34>
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <StartTurnLeftTask+0x7c>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0ef      	beq.n	80015d4 <StartTurnLeftTask+0x14>
		  internalFunctionCall = false;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <StartTurnLeftTask+0x7c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <StartTurnLeftTask+0x80>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d004      	beq.n	800160e <StartTurnLeftTask+0x4e>
			  vTaskResume(ResumeFromStopTHandle);
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <StartTurnLeftTask+0x84>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f008 fe91 	bl	800a330 <vTaskResume>
		  }

		  // Turn left if possible
		  if(sliderLeftRightCurrentValue > -3) {
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <StartTurnLeftTask+0x88>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f113 0f02 	cmn.w	r3, #2
 8001616:	dbdd      	blt.n	80015d4 <StartTurnLeftTask+0x14>
			  sliderLeftRightPreviousValue = sliderLeftRightCurrentValue;
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <StartTurnLeftTask+0x88>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0b      	ldr	r2, [pc, #44]	; (800164c <StartTurnLeftTask+0x8c>)
 800161e:	6013      	str	r3, [r2, #0]
			  sliderLeftRightCurrentValue --;
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <StartTurnLeftTask+0x88>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3b01      	subs	r3, #1
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <StartTurnLeftTask+0x88>)
 8001628:	6013      	str	r3, [r2, #0]

			  moveStepperMotor(LEFT);
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff f8a2 	bl	8000774 <moveStepperMotor>
	  vTaskSuspend(NULL);
 8001630:	e7d0      	b.n	80015d4 <StartTurnLeftTask+0x14>
 8001632:	bf00      	nop
 8001634:	40021400 	.word	0x40021400
 8001638:	20000100 	.word	0x20000100
 800163c:	200000dc 	.word	0x200000dc
 8001640:	200000e1 	.word	0x200000e1
 8001644:	20000160 	.word	0x20000160
 8001648:	200000fc 	.word	0x200000fc
 800164c:	200000f8 	.word	0x200000f8

08001650 <StartTurnRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnRightTask */
void StartTurnRightTask(void *argument)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnRightTask */
	HAL_GPIO_WritePin(StepperMotorEn_GPIO_Port, StepperMotorEn_Pin, SET);
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800165e:	4818      	ldr	r0, [pc, #96]	; (80016c0 <StartTurnRightTask+0x70>)
 8001660:	f002 fcee 	bl	8004040 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001664:	2000      	movs	r0, #0
 8001666:	f008 fdb7 	bl	800a1d8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <StartTurnRightTask+0x74>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f083 0301 	eor.w	r3, r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d104      	bne.n	8001684 <StartTurnRightTask+0x34>
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <StartTurnRightTask+0x78>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0ef      	beq.n	8001664 <StartTurnRightTask+0x14>
		  internalFunctionCall = false;
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <StartTurnRightTask+0x78>)
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <StartTurnRightTask+0x7c>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d004      	beq.n	800169e <StartTurnRightTask+0x4e>
			  vTaskResume(ResumeFromStopTHandle);
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <StartTurnRightTask+0x80>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f008 fe49 	bl	800a330 <vTaskResume>
		  }

		  // Turn right if possible
		  if(sliderLeftRightCurrentValue < 3) {
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <StartTurnRightTask+0x84>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	dcde      	bgt.n	8001664 <StartTurnRightTask+0x14>
			  sliderLeftRightPreviousValue = sliderLeftRightCurrentValue;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <StartTurnRightTask+0x84>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <StartTurnRightTask+0x88>)
 80016ac:	6013      	str	r3, [r2, #0]
			  sliderLeftRightCurrentValue ++;
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <StartTurnRightTask+0x84>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <StartTurnRightTask+0x84>)
 80016b6:	6013      	str	r3, [r2, #0]

			  moveStepperMotor(RIGHT);
 80016b8:	2001      	movs	r0, #1
 80016ba:	f7ff f85b 	bl	8000774 <moveStepperMotor>
	  vTaskSuspend(NULL);
 80016be:	e7d1      	b.n	8001664 <StartTurnRightTask+0x14>
 80016c0:	40021400 	.word	0x40021400
 80016c4:	20000100 	.word	0x20000100
 80016c8:	200000dc 	.word	0x200000dc
 80016cc:	200000e1 	.word	0x200000e1
 80016d0:	20000160 	.word	0x20000160
 80016d4:	200000fc 	.word	0x200000fc
 80016d8:	200000f8 	.word	0x200000f8

080016dc <StartConnectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConnectionTask */
void StartConnectionTask(void *argument)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConnectionTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80016e4:	2000      	movs	r0, #0
 80016e6:	f008 fd77 	bl	800a1d8 <vTaskSuspend>

	  // Refresh connection state
	  osTimerStart(ConnectionTaskTimerHandle, (ACKNOWLEDGE_PACKETS_FREQUENCY + TIME_MARGIN));
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <StartConnectionTask+0x30>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f241 517c 	movw	r1, #5500	; 0x157c
 80016f2:	4618      	mov	r0, r3
 80016f4:	f007 fcd4 	bl	80090a0 <osTimerStart>
	  isConnected = true;
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <StartConnectionTask+0x34>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
	  vTaskResume(OLEDTaskHandle);
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <StartConnectionTask+0x38>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f008 fe14 	bl	800a330 <vTaskResume>
	  vTaskSuspend(NULL);
 8001708:	e7ec      	b.n	80016e4 <StartConnectionTask+0x8>
 800170a:	bf00      	nop
 800170c:	20000164 	.word	0x20000164
 8001710:	200000dd 	.word	0x200000dd
 8001714:	20000120 	.word	0x20000120

08001718 <StartBrakeLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBrakeLightsTask */
void StartBrakeLightsTask(void *argument)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBrakeLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001720:	2000      	movs	r0, #0
 8001722:	f008 fd59 	bl	800a1d8 <vTaskSuspend>

	  // Brake lights effect
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 8001726:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800172a:	4806      	ldr	r0, [pc, #24]	; (8001744 <StartBrakeLightsTask+0x2c>)
 800172c:	f002 fca1 	bl	8004072 <HAL_GPIO_TogglePin>
	  osDelay(BRAKE_LIGHTS_DURATION);
 8001730:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001734:	f007 fbec 	bl	8008f10 <osDelay>
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 8001738:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800173c:	4801      	ldr	r0, [pc, #4]	; (8001744 <StartBrakeLightsTask+0x2c>)
 800173e:	f002 fc98 	bl	8004072 <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 8001742:	e7ed      	b.n	8001720 <StartBrakeLightsTask+0x8>
 8001744:	40020800 	.word	0x40020800

08001748 <StartWithdrawLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWithdrawLightsTask */
void StartWithdrawLightsTask(void *argument)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWithdrawLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001750:	2000      	movs	r0, #0
 8001752:	f008 fd41 	bl	800a1d8 <vTaskSuspend>

	  // Withdraw lights effect
	  if(isWithdrawing) {
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <StartWithdrawLightsTask+0x34>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d006      	beq.n	800176e <StartWithdrawLightsTask+0x26>
		  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, SET);
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <StartWithdrawLightsTask+0x38>)
 8001768:	f002 fc6a 	bl	8004040 <HAL_GPIO_WritePin>
 800176c:	e7f0      	b.n	8001750 <StartWithdrawLightsTask+0x8>
	  } else {
		  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <StartWithdrawLightsTask+0x38>)
 8001776:	f002 fc63 	bl	8004040 <HAL_GPIO_WritePin>
	  vTaskSuspend(NULL);
 800177a:	e7e9      	b.n	8001750 <StartWithdrawLightsTask+0x8>
 800177c:	200000ec 	.word	0x200000ec
 8001780:	40020800 	.word	0x40020800

08001784 <StartResumeFromStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResumeFromStopTask */
void StartResumeFromStopTask(void *argument)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResumeFromStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 800178c:	2000      	movs	r0, #0
 800178e:	f008 fd23 	bl	800a1d8 <vTaskSuspend>

	  // Turn off LED stripes' stop effect if present
	  if(isStopped) {
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <StartResumeFromStopTask+0x48>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f7      	beq.n	800178c <StartResumeFromStopTask+0x8>
		  isStopped = false;
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <StartResumeFromStopTask+0x48>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
		  if(isOn) {
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <StartResumeFromStopTask+0x4c>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <StartResumeFromStopTask+0x30>
			  stripesEffect = DEFAULT;
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <StartResumeFromStopTask+0x50>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
 80017b2:	e002      	b.n	80017ba <StartResumeFromStopTask+0x36>
		  } else {
			  stripesEffect = NONE;
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <StartResumeFromStopTask+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
		  }
		  ommitToggle = true;
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <StartResumeFromStopTask+0x54>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
		  vTaskResume(LEDStripesTaskHandle);
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <StartResumeFromStopTask+0x58>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f008 fdb3 	bl	800a330 <vTaskResume>
	  vTaskSuspend(NULL);
 80017ca:	e7df      	b.n	800178c <StartResumeFromStopTask+0x8>
 80017cc:	200000e1 	.word	0x200000e1
 80017d0:	200000df 	.word	0x200000df
 80017d4:	200000de 	.word	0x200000de
 80017d8:	200000e0 	.word	0x200000e0
 80017dc:	20000130 	.word	0x20000130

080017e0 <CallbackConnectionTaskTimer>:
  /* USER CODE END StartResumeFromStopTask */
}

/* CallbackConnectionTaskTimer function */
void CallbackConnectionTaskTimer(void *argument)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackConnectionTaskTimer */
	vTaskResume(StopTaskHandle);
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <CallbackConnectionTaskTimer+0x2c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f008 fd9f 	bl	800a330 <vTaskResume>
	isConnected = false;
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <CallbackConnectionTaskTimer+0x30>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
	vTaskResume(OLEDTaskHandle);
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <CallbackConnectionTaskTimer+0x34>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f008 fd97 	bl	800a330 <vTaskResume>
  /* USER CODE END CallbackConnectionTaskTimer */
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000128 	.word	0x20000128
 8001810:	200000dd 	.word	0x200000dd
 8001814:	20000120 	.word	0x20000120

08001818 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08c      	sub	sp, #48	; 0x30
 800181c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182e:	4ba5      	ldr	r3, [pc, #660]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4aa4      	ldr	r2, [pc, #656]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4ba2      	ldr	r3, [pc, #648]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	61bb      	str	r3, [r7, #24]
 8001844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001846:	4b9f      	ldr	r3, [pc, #636]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a9e      	ldr	r2, [pc, #632]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 800184c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b9c      	ldr	r3, [pc, #624]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	4b99      	ldr	r3, [pc, #612]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a98      	ldr	r2, [pc, #608]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b96      	ldr	r3, [pc, #600]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	4b93      	ldr	r3, [pc, #588]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a92      	ldr	r2, [pc, #584]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b90      	ldr	r3, [pc, #576]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800188e:	4b8d      	ldr	r3, [pc, #564]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a8c      	ldr	r2, [pc, #560]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 8001894:	f043 0320 	orr.w	r3, r3, #32
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b8a      	ldr	r3, [pc, #552]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0320 	and.w	r3, r3, #32
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a6:	4b87      	ldr	r3, [pc, #540]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a86      	ldr	r2, [pc, #536]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 80018ac:	f043 0308 	orr.w	r3, r3, #8
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b84      	ldr	r3, [pc, #528]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018be:	4b81      	ldr	r3, [pc, #516]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a80      	ldr	r2, [pc, #512]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 80018c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b7e      	ldr	r3, [pc, #504]	; (8001ac4 <MX_GPIO_Init+0x2ac>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	f244 0191 	movw	r1, #16529	; 0x4091
 80018dc:	487a      	ldr	r0, [pc, #488]	; (8001ac8 <MX_GPIO_Init+0x2b0>)
 80018de:	f002 fbaf 	bl	8004040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepperMotorEn_GPIO_Port, StepperMotorEn_Pin, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e8:	4878      	ldr	r0, [pc, #480]	; (8001acc <MX_GPIO_Init+0x2b4>)
 80018ea:	f002 fba9 	bl	8004040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f4:	4876      	ldr	r0, [pc, #472]	; (8001ad0 <MX_GPIO_Init+0x2b8>)
 80018f6:	f002 fba3 	bl	8004040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2140      	movs	r1, #64	; 0x40
 80018fe:	4875      	ldr	r0, [pc, #468]	; (8001ad4 <MX_GPIO_Init+0x2bc>)
 8001900:	f002 fb9e 	bl	8004040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 8001904:	2200      	movs	r2, #0
 8001906:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800190a:	4873      	ldr	r0, [pc, #460]	; (8001ad8 <MX_GPIO_Init+0x2c0>)
 800190c:	f002 fb98 	bl	8004040 <HAL_GPIO_WritePin>
                          |WithdrawLights_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001916:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800191a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4619      	mov	r1, r3
 8001926:	486c      	ldr	r0, [pc, #432]	; (8001ad8 <MX_GPIO_Init+0x2c0>)
 8001928:	f002 f9de 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800192c:	2332      	movs	r3, #50	; 0x32
 800192e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800193c:	230b      	movs	r3, #11
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	4619      	mov	r1, r3
 8001946:	4864      	ldr	r0, [pc, #400]	; (8001ad8 <MX_GPIO_Init+0x2c0>)
 8001948:	f002 f9ce 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800194c:	2386      	movs	r3, #134	; 0x86
 800194e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800195c:	230b      	movs	r3, #11
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	485d      	ldr	r0, [pc, #372]	; (8001adc <MX_GPIO_Init+0x2c4>)
 8001968:	f002 f9be 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin;
 800196c:	f244 0391 	movw	r3, #16529	; 0x4091
 8001970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001972:	2301      	movs	r3, #1
 8001974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	4619      	mov	r1, r3
 8001984:	4850      	ldr	r0, [pc, #320]	; (8001ac8 <MX_GPIO_Init+0x2b0>)
 8001986:	f002 f9af 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = StepperMotorEn_Pin;
 800198a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(StepperMotorEn_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	484a      	ldr	r0, [pc, #296]	; (8001acc <MX_GPIO_Init+0x2b4>)
 80019a4:	f002 f9a0 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80019a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b6:	2303      	movs	r3, #3
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019ba:	230b      	movs	r3, #11
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	4840      	ldr	r0, [pc, #256]	; (8001ac8 <MX_GPIO_Init+0x2b0>)
 80019c6:	f002 f98f 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80019ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019dc:	2307      	movs	r3, #7
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	4619      	mov	r1, r3
 80019e6:	483a      	ldr	r0, [pc, #232]	; (8001ad0 <MX_GPIO_Init+0x2b8>)
 80019e8:	f002 f97e 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = StepperMotorDir_Pin;
 80019ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(StepperMotorDir_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	4832      	ldr	r0, [pc, #200]	; (8001ad0 <MX_GPIO_Init+0x2b8>)
 8001a06:	f002 f96f 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a0a:	2340      	movs	r3, #64	; 0x40
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	482c      	ldr	r0, [pc, #176]	; (8001ad4 <MX_GPIO_Init+0x2bc>)
 8001a22:	f002 f961 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	4619      	mov	r1, r3
 8001a38:	4826      	ldr	r0, [pc, #152]	; (8001ad4 <MX_GPIO_Init+0x2bc>)
 8001a3a:	f002 f955 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 8001a3e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a42:	61fb      	str	r3, [r7, #28]
                          |WithdrawLights_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	4820      	ldr	r0, [pc, #128]	; (8001ad8 <MX_GPIO_Init+0x2c0>)
 8001a58:	f002 f946 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a5c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a6e:	230a      	movs	r3, #10
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	4818      	ldr	r0, [pc, #96]	; (8001adc <MX_GPIO_Init+0x2c4>)
 8001a7a:	f002 f935 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	4812      	ldr	r0, [pc, #72]	; (8001adc <MX_GPIO_Init+0x2c4>)
 8001a94:	f002 f928 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aaa:	230b      	movs	r3, #11
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <MX_GPIO_Init+0x2bc>)
 8001ab6:	f002 f917 	bl	8003ce8 <HAL_GPIO_Init>

}
 8001aba:	bf00      	nop
 8001abc:	3730      	adds	r7, #48	; 0x30
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40021400 	.word	0x40021400
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40021800 	.word	0x40021800
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40020000 	.word	0x40020000

08001ae0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <MX_I2C1_Init+0x78>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001aec:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <MX_I2C1_Init+0x7c>)
 8001aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b02:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b1a:	480e      	ldr	r0, [pc, #56]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b1c:	f002 fac4 	bl	80040a8 <HAL_I2C_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b26:	f000 f951 	bl	8001dcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4809      	ldr	r0, [pc, #36]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b2e:	f002 fea5 	bl	800487c <HAL_I2CEx_ConfigAnalogFilter>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b38:	f000 f948 	bl	8001dcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b40:	f002 fee7 	bl	8004912 <HAL_I2CEx_ConfigDigitalFilter>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b4a:	f000 f93f 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000168 	.word	0x20000168
 8001b58:	40005400 	.word	0x40005400
 8001b5c:	20404768 	.word	0x20404768

08001b60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0ae      	sub	sp, #184	; 0xb8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2290      	movs	r2, #144	; 0x90
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f00a fb40 	bl	800c206 <memset>
  if(i2cHandle->Instance==I2C1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a22      	ldr	r2, [pc, #136]	; (8001c14 <HAL_I2C_MspInit+0xb4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d13c      	bne.n	8001c0a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b94:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fc5a 	bl	8005458 <HAL_RCCEx_PeriphCLKConfig>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001baa:	f000 f90f 	bl	8001dcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bae:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <HAL_I2C_MspInit+0xb8>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_I2C_MspInit+0xb8>)
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_I2C_MspInit+0xb8>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8001bc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bce:	2312      	movs	r3, #18
 8001bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be0:	2304      	movs	r3, #4
 8001be2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bea:	4619      	mov	r1, r3
 8001bec:	480b      	ldr	r0, [pc, #44]	; (8001c1c <HAL_I2C_MspInit+0xbc>)
 8001bee:	f002 f87b 	bl	8003ce8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_I2C_MspInit+0xb8>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a08      	ldr	r2, [pc, #32]	; (8001c18 <HAL_I2C_MspInit+0xb8>)
 8001bf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_I2C_MspInit+0xb8>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	37b8      	adds	r7, #184	; 0xb8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40005400 	.word	0x40005400
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020400 	.word	0x40020400

08001c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c24:	f001 f9cd 	bl	8002fc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c28:	f000 f82a 	bl	8001c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c2c:	f7ff fdf4 	bl	8001818 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c30:	f7fe ff26 	bl	8000a80 <MX_DMA_Init>
  MX_SPI1_Init();
 8001c34:	f000 f8d0 	bl	8001dd8 <MX_SPI1_Init>
  MX_DAC_Init();
 8001c38:	f7fe feb0 	bl	800099c <MX_DAC_Init>
  MX_I2C1_Init();
 8001c3c:	f7ff ff50 	bl	8001ae0 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001c40:	f000 fd62 	bl	8002708 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001c44:	f000 fe12 	bl	800286c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, RxBuffer, 1);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4909      	ldr	r1, [pc, #36]	; (8001c70 <main+0x50>)
 8001c4c:	4809      	ldr	r0, [pc, #36]	; (8001c74 <main+0x54>)
 8001c4e:	f005 fe07 	bl	8007860 <HAL_UART_Receive_IT>
  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 8001c52:	2100      	movs	r1, #0
 8001c54:	4808      	ldr	r0, [pc, #32]	; (8001c78 <main+0x58>)
 8001c56:	f001 fb09 	bl	800326c <HAL_DAC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001c5a:	2108      	movs	r1, #8
 8001c5c:	4807      	ldr	r0, [pc, #28]	; (8001c7c <main+0x5c>)
 8001c5e:	f004 fe8b 	bl	8006978 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001c62:	f007 f845 	bl	8008cf0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001c66:	f7fe ff29 	bl	8000abc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001c6a:	f007 f875 	bl	8008d58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <main+0x4e>
 8001c70:	20000104 	.word	0x20000104
 8001c74:	20000724 	.word	0x20000724
 8001c78:	2000010c 	.word	0x2000010c
 8001c7c:	200006d8 	.word	0x200006d8

08001c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b094      	sub	sp, #80	; 0x50
 8001c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c86:	f107 031c 	add.w	r3, r7, #28
 8001c8a:	2234      	movs	r2, #52	; 0x34
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f00a fab9 	bl	800c206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c94:	f107 0308 	add.w	r3, r7, #8
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <SystemClock_Config+0xd4>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	4a2a      	ldr	r2, [pc, #168]	; (8001d54 <SystemClock_Config+0xd4>)
 8001caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cae:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb0:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <SystemClock_Config+0xd4>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cbc:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <SystemClock_Config+0xd8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <SystemClock_Config+0xd8>)
 8001cc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <SystemClock_Config+0xd8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001cd8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001cdc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ce2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ce8:	2304      	movs	r3, #4
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001cec:	23d8      	movs	r3, #216	; 0xd8
 8001cee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 fea3 	bl	8004a4c <HAL_RCC_OscConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001d0c:	f000 f85e 	bl	8001dcc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d10:	f002 fe4c 	bl	80049ac <HAL_PWREx_EnableOverDrive>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001d1a:	f000 f857 	bl	8001dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d1e:	230f      	movs	r3, #15
 8001d20:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d22:	2302      	movs	r3, #2
 8001d24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d2a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d34:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001d36:	f107 0308 	add.w	r3, r7, #8
 8001d3a:	2107      	movs	r1, #7
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 f933 	bl	8004fa8 <HAL_RCC_ClockConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001d48:	f000 f840 	bl	8001dcc <Error_Handler>
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	3750      	adds	r7, #80	; 0x50
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40007000 	.word	0x40007000

08001d5c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart6x) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	portYIELD_FROM_ISR(xTaskResumeFromISR(DispatcherTaskHandle));
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_UART_RxCpltCallback+0x3c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f008 fb41 	bl	800a3f0 <xTaskResumeFromISR>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_UART_RxCpltCallback+0x28>
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_UART_RxCpltCallback+0x40>)
 8001d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	f3bf 8f4f 	dsb	sy
 8001d80:	f3bf 8f6f 	isb	sy
	HAL_UART_Receive_IT(&huart6, RxBuffer, 1);					// Used for "opening" ST MCU for future interrupts on RX
 8001d84:	2201      	movs	r2, #1
 8001d86:	4906      	ldr	r1, [pc, #24]	; (8001da0 <HAL_UART_RxCpltCallback+0x44>)
 8001d88:	4806      	ldr	r0, [pc, #24]	; (8001da4 <HAL_UART_RxCpltCallback+0x48>)
 8001d8a:	f005 fd69 	bl	8007860 <HAL_UART_Receive_IT>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000124 	.word	0x20000124
 8001d9c:	e000ed04 	.word	0xe000ed04
 8001da0:	20000104 	.word	0x20000104
 8001da4:	20000724 	.word	0x20000724

08001da8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d101      	bne.n	8001dbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dba:	f001 f90f 	bl	8002fdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40001000 	.word	0x40001000

08001dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd0:	b672      	cpsid	i
}
 8001dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <Error_Handler+0x8>
	...

08001dd8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001dde:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <MX_SPI1_Init+0x78>)
 8001de0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001de4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001de8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001dec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001df0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001df2:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001df4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001df8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e10:	2218      	movs	r2, #24
 8001e12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e34:	2208      	movs	r2, #8
 8001e36:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <MX_SPI1_Init+0x74>)
 8001e3a:	f003 ff35 	bl	8005ca8 <HAL_SPI_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001e44:	f7ff ffc2 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200001bc 	.word	0x200001bc
 8001e50:	40013000 	.word	0x40013000

08001e54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a3c      	ldr	r2, [pc, #240]	; (8001f64 <HAL_SPI_MspInit+0x110>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d171      	bne.n	8001f5a <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e76:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <HAL_SPI_MspInit+0x114>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	4a3b      	ldr	r2, [pc, #236]	; (8001f68 <HAL_SPI_MspInit+0x114>)
 8001e7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e80:	6453      	str	r3, [r2, #68]	; 0x44
 8001e82:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <HAL_SPI_MspInit+0x114>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <HAL_SPI_MspInit+0x114>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a35      	ldr	r2, [pc, #212]	; (8001f68 <HAL_SPI_MspInit+0x114>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b33      	ldr	r3, [pc, #204]	; (8001f68 <HAL_SPI_MspInit+0x114>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ea6:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <HAL_SPI_MspInit+0x114>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a2f      	ldr	r2, [pc, #188]	; (8001f68 <HAL_SPI_MspInit+0x114>)
 8001eac:	f043 0308 	orr.w	r3, r3, #8
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_SPI_MspInit+0x114>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ece:	2305      	movs	r3, #5
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4824      	ldr	r0, [pc, #144]	; (8001f6c <HAL_SPI_MspInit+0x118>)
 8001eda:	f001 ff05 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEDStripes_Pin;
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eee:	2305      	movs	r3, #5
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEDStripes_GPIO_Port, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	481d      	ldr	r0, [pc, #116]	; (8001f70 <HAL_SPI_MspInit+0x11c>)
 8001efa:	f001 fef5 	bl	8003ce8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <HAL_SPI_MspInit+0x120>)
 8001f00:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <HAL_SPI_MspInit+0x124>)
 8001f02:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <HAL_SPI_MspInit+0x120>)
 8001f06:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f0a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_SPI_MspInit+0x120>)
 8001f0e:	2240      	movs	r2, #64	; 0x40
 8001f10:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_SPI_MspInit+0x120>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f18:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <HAL_SPI_MspInit+0x120>)
 8001f1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f1e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_SPI_MspInit+0x120>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <HAL_SPI_MspInit+0x120>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_SPI_MspInit+0x120>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_SPI_MspInit+0x120>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_SPI_MspInit+0x120>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001f3e:	480d      	ldr	r0, [pc, #52]	; (8001f74 <HAL_SPI_MspInit+0x120>)
 8001f40:	f001 fac8 	bl	80034d4 <HAL_DMA_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8001f4a:	f7ff ff3f 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <HAL_SPI_MspInit+0x120>)
 8001f52:	655a      	str	r2, [r3, #84]	; 0x54
 8001f54:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <HAL_SPI_MspInit+0x120>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	3728      	adds	r7, #40	; 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40013000 	.word	0x40013000
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	40020c00 	.word	0x40020c00
 8001f74:	20000220 	.word	0x20000220
 8001f78:	40026458 	.word	0x40026458

08001f7c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af04      	add	r7, sp, #16
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9a:	9302      	str	r3, [sp, #8]
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	1dfb      	adds	r3, r7, #7
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2178      	movs	r1, #120	; 0x78
 8001faa:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <ssd1306_WriteCommand+0x2c>)
 8001fac:	f002 f90c 	bl	80041c8 <HAL_I2C_Mem_Write>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000168 	.word	0x20000168

08001fbc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af04      	add	r7, sp, #16
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f04f 32ff 	mov.w	r2, #4294967295
 8001fce:	9202      	str	r2, [sp, #8]
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	2240      	movs	r2, #64	; 0x40
 8001fda:	2178      	movs	r1, #120	; 0x78
 8001fdc:	4803      	ldr	r0, [pc, #12]	; (8001fec <ssd1306_WriteData+0x30>)
 8001fde:	f002 f8f3 	bl	80041c8 <HAL_I2C_Mem_Write>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000168 	.word	0x20000168

08001ff0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001ff4:	f7ff ffc2 	bl	8001f7c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001ff8:	2064      	movs	r0, #100	; 0x64
 8001ffa:	f001 f80f 	bl	800301c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 f9ce 	bl	80023a0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002004:	2020      	movs	r0, #32
 8002006:	f7ff ffc1 	bl	8001f8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800200a:	2000      	movs	r0, #0
 800200c:	f7ff ffbe 	bl	8001f8c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002010:	20b0      	movs	r0, #176	; 0xb0
 8002012:	f7ff ffbb 	bl	8001f8c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002016:	20c8      	movs	r0, #200	; 0xc8
 8002018:	f7ff ffb8 	bl	8001f8c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800201c:	2000      	movs	r0, #0
 800201e:	f7ff ffb5 	bl	8001f8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002022:	2010      	movs	r0, #16
 8002024:	f7ff ffb2 	bl	8001f8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002028:	2040      	movs	r0, #64	; 0x40
 800202a:	f7ff ffaf 	bl	8001f8c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800202e:	20ff      	movs	r0, #255	; 0xff
 8002030:	f000 f9a2 	bl	8002378 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002034:	20a1      	movs	r0, #161	; 0xa1
 8002036:	f7ff ffa9 	bl	8001f8c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800203a:	20a6      	movs	r0, #166	; 0xa6
 800203c:	f7ff ffa6 	bl	8001f8c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002040:	20a8      	movs	r0, #168	; 0xa8
 8002042:	f7ff ffa3 	bl	8001f8c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002046:	203f      	movs	r0, #63	; 0x3f
 8002048:	f7ff ffa0 	bl	8001f8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800204c:	20a4      	movs	r0, #164	; 0xa4
 800204e:	f7ff ff9d 	bl	8001f8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002052:	20d3      	movs	r0, #211	; 0xd3
 8002054:	f7ff ff9a 	bl	8001f8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002058:	2000      	movs	r0, #0
 800205a:	f7ff ff97 	bl	8001f8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800205e:	20d5      	movs	r0, #213	; 0xd5
 8002060:	f7ff ff94 	bl	8001f8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002064:	20f0      	movs	r0, #240	; 0xf0
 8002066:	f7ff ff91 	bl	8001f8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800206a:	20d9      	movs	r0, #217	; 0xd9
 800206c:	f7ff ff8e 	bl	8001f8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002070:	2022      	movs	r0, #34	; 0x22
 8002072:	f7ff ff8b 	bl	8001f8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002076:	20da      	movs	r0, #218	; 0xda
 8002078:	f7ff ff88 	bl	8001f8c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800207c:	2012      	movs	r0, #18
 800207e:	f7ff ff85 	bl	8001f8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002082:	20db      	movs	r0, #219	; 0xdb
 8002084:	f7ff ff82 	bl	8001f8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002088:	2020      	movs	r0, #32
 800208a:	f7ff ff7f 	bl	8001f8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800208e:	208d      	movs	r0, #141	; 0x8d
 8002090:	f7ff ff7c 	bl	8001f8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002094:	2014      	movs	r0, #20
 8002096:	f7ff ff79 	bl	8001f8c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800209a:	2001      	movs	r0, #1
 800209c:	f000 f980 	bl	80023a0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80020a0:	2000      	movs	r0, #0
 80020a2:	f000 f80f 	bl	80020c4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80020a6:	f000 f825 	bl	80020f4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <ssd1306_Init+0xd0>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <ssd1306_Init+0xd0>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80020b6:	4b02      	ldr	r3, [pc, #8]	; (80020c0 <ssd1306_Init+0xd0>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	711a      	strb	r2, [r3, #4]
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000680 	.word	0x20000680

080020c4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <ssd1306_Fill+0x14>
 80020d4:	2300      	movs	r3, #0
 80020d6:	e000      	b.n	80020da <ssd1306_Fill+0x16>
 80020d8:	23ff      	movs	r3, #255	; 0xff
 80020da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020de:	4619      	mov	r1, r3
 80020e0:	4803      	ldr	r0, [pc, #12]	; (80020f0 <ssd1306_Fill+0x2c>)
 80020e2:	f00a f890 	bl	800c206 <memset>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000280 	.word	0x20000280

080020f4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80020fa:	2300      	movs	r3, #0
 80020fc:	71fb      	strb	r3, [r7, #7]
 80020fe:	e016      	b.n	800212e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	3b50      	subs	r3, #80	; 0x50
 8002104:	b2db      	uxtb	r3, r3
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff40 	bl	8001f8c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800210c:	2000      	movs	r0, #0
 800210e:	f7ff ff3d 	bl	8001f8c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002112:	2010      	movs	r0, #16
 8002114:	f7ff ff3a 	bl	8001f8c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	01db      	lsls	r3, r3, #7
 800211c:	4a08      	ldr	r2, [pc, #32]	; (8002140 <ssd1306_UpdateScreen+0x4c>)
 800211e:	4413      	add	r3, r2
 8002120:	2180      	movs	r1, #128	; 0x80
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff4a 	bl	8001fbc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	3301      	adds	r3, #1
 800212c:	71fb      	strb	r3, [r7, #7]
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	2b07      	cmp	r3, #7
 8002132:	d9e5      	bls.n	8002100 <ssd1306_UpdateScreen+0xc>
    }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000280 	.word	0x20000280

08002144 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
 800214e:	460b      	mov	r3, r1
 8002150:	71bb      	strb	r3, [r7, #6]
 8002152:	4613      	mov	r3, r2
 8002154:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	2b00      	cmp	r3, #0
 800215c:	db3d      	blt.n	80021da <ssd1306_DrawPixel+0x96>
 800215e:	79bb      	ldrb	r3, [r7, #6]
 8002160:	2b3f      	cmp	r3, #63	; 0x3f
 8002162:	d83a      	bhi.n	80021da <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002164:	797b      	ldrb	r3, [r7, #5]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d11a      	bne.n	80021a0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800216a:	79fa      	ldrb	r2, [r7, #7]
 800216c:	79bb      	ldrb	r3, [r7, #6]
 800216e:	08db      	lsrs	r3, r3, #3
 8002170:	b2d8      	uxtb	r0, r3
 8002172:	4603      	mov	r3, r0
 8002174:	01db      	lsls	r3, r3, #7
 8002176:	4413      	add	r3, r2
 8002178:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <ssd1306_DrawPixel+0xa4>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	b25a      	sxtb	r2, r3
 800217e:	79bb      	ldrb	r3, [r7, #6]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	2101      	movs	r1, #1
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	b25b      	sxtb	r3, r3
 800218c:	4313      	orrs	r3, r2
 800218e:	b259      	sxtb	r1, r3
 8002190:	79fa      	ldrb	r2, [r7, #7]
 8002192:	4603      	mov	r3, r0
 8002194:	01db      	lsls	r3, r3, #7
 8002196:	4413      	add	r3, r2
 8002198:	b2c9      	uxtb	r1, r1
 800219a:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <ssd1306_DrawPixel+0xa4>)
 800219c:	54d1      	strb	r1, [r2, r3]
 800219e:	e01d      	b.n	80021dc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80021a0:	79fa      	ldrb	r2, [r7, #7]
 80021a2:	79bb      	ldrb	r3, [r7, #6]
 80021a4:	08db      	lsrs	r3, r3, #3
 80021a6:	b2d8      	uxtb	r0, r3
 80021a8:	4603      	mov	r3, r0
 80021aa:	01db      	lsls	r3, r3, #7
 80021ac:	4413      	add	r3, r2
 80021ae:	4a0e      	ldr	r2, [pc, #56]	; (80021e8 <ssd1306_DrawPixel+0xa4>)
 80021b0:	5cd3      	ldrb	r3, [r2, r3]
 80021b2:	b25a      	sxtb	r2, r3
 80021b4:	79bb      	ldrb	r3, [r7, #6]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	b25b      	sxtb	r3, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	b25b      	sxtb	r3, r3
 80021c6:	4013      	ands	r3, r2
 80021c8:	b259      	sxtb	r1, r3
 80021ca:	79fa      	ldrb	r2, [r7, #7]
 80021cc:	4603      	mov	r3, r0
 80021ce:	01db      	lsls	r3, r3, #7
 80021d0:	4413      	add	r3, r2
 80021d2:	b2c9      	uxtb	r1, r1
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <ssd1306_DrawPixel+0xa4>)
 80021d6:	54d1      	strb	r1, [r2, r3]
 80021d8:	e000      	b.n	80021dc <ssd1306_DrawPixel+0x98>
        return;
 80021da:	bf00      	nop
    }
}
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000280 	.word	0x20000280

080021ec <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4604      	mov	r4, r0
 80021f4:	1d38      	adds	r0, r7, #4
 80021f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80021fa:	461a      	mov	r2, r3
 80021fc:	4623      	mov	r3, r4
 80021fe:	73fb      	strb	r3, [r7, #15]
 8002200:	4613      	mov	r3, r2
 8002202:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	2b1f      	cmp	r3, #31
 8002208:	d902      	bls.n	8002210 <ssd1306_WriteChar+0x24>
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	2b7e      	cmp	r3, #126	; 0x7e
 800220e:	d901      	bls.n	8002214 <ssd1306_WriteChar+0x28>
        return 0;
 8002210:	2300      	movs	r3, #0
 8002212:	e06d      	b.n	80022f0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002214:	4b38      	ldr	r3, [pc, #224]	; (80022f8 <ssd1306_WriteChar+0x10c>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	793b      	ldrb	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	2b80      	cmp	r3, #128	; 0x80
 8002220:	dc06      	bgt.n	8002230 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002222:	4b35      	ldr	r3, [pc, #212]	; (80022f8 <ssd1306_WriteChar+0x10c>)
 8002224:	885b      	ldrh	r3, [r3, #2]
 8002226:	461a      	mov	r2, r3
 8002228:	797b      	ldrb	r3, [r7, #5]
 800222a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800222c:	2b40      	cmp	r3, #64	; 0x40
 800222e:	dd01      	ble.n	8002234 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002230:	2300      	movs	r3, #0
 8002232:	e05d      	b.n	80022f0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	e04c      	b.n	80022d4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	3b20      	subs	r3, #32
 8002240:	7979      	ldrb	r1, [r7, #5]
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4619      	mov	r1, r3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	440b      	add	r3, r1
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	e034      	b.n	80022c4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d012      	beq.n	8002290 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <ssd1306_WriteChar+0x10c>)
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	4413      	add	r3, r2
 8002276:	b2d8      	uxtb	r0, r3
 8002278:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <ssd1306_WriteChar+0x10c>)
 800227a:	885b      	ldrh	r3, [r3, #2]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	4413      	add	r3, r2
 8002284:	b2db      	uxtb	r3, r3
 8002286:	7bba      	ldrb	r2, [r7, #14]
 8002288:	4619      	mov	r1, r3
 800228a:	f7ff ff5b 	bl	8002144 <ssd1306_DrawPixel>
 800228e:	e016      	b.n	80022be <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <ssd1306_WriteChar+0x10c>)
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	4413      	add	r3, r2
 800229c:	b2d8      	uxtb	r0, r3
 800229e:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <ssd1306_WriteChar+0x10c>)
 80022a0:	885b      	ldrh	r3, [r3, #2]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	b2d9      	uxtb	r1, r3
 80022ac:	7bbb      	ldrb	r3, [r7, #14]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bf0c      	ite	eq
 80022b2:	2301      	moveq	r3, #1
 80022b4:	2300      	movne	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	461a      	mov	r2, r3
 80022ba:	f7ff ff43 	bl	8002144 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	3301      	adds	r3, #1
 80022c2:	61bb      	str	r3, [r7, #24]
 80022c4:	793b      	ldrb	r3, [r7, #4]
 80022c6:	461a      	mov	r2, r3
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d3c5      	bcc.n	800225a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	797b      	ldrb	r3, [r7, #5]
 80022d6:	461a      	mov	r2, r3
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	4293      	cmp	r3, r2
 80022dc:	d3ad      	bcc.n	800223a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <ssd1306_WriteChar+0x10c>)
 80022e0:	881a      	ldrh	r2, [r3, #0]
 80022e2:	793b      	ldrb	r3, [r7, #4]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	4413      	add	r3, r2
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <ssd1306_WriteChar+0x10c>)
 80022ec:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3724      	adds	r7, #36	; 0x24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd90      	pop	{r4, r7, pc}
 80022f8:	20000680 	.word	0x20000680

080022fc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	1d38      	adds	r0, r7, #4
 8002306:	e880 0006 	stmia.w	r0, {r1, r2}
 800230a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800230c:	e012      	b.n	8002334 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	7818      	ldrb	r0, [r3, #0]
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	1d3a      	adds	r2, r7, #4
 8002316:	ca06      	ldmia	r2, {r1, r2}
 8002318:	f7ff ff68 	bl	80021ec <ssd1306_WriteChar>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d002      	beq.n	800232e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	e008      	b.n	8002340 <ssd1306_WriteString+0x44>
        }
        str++;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3301      	adds	r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1e8      	bne.n	800230e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	781b      	ldrb	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	460a      	mov	r2, r1
 8002352:	71fb      	strb	r3, [r7, #7]
 8002354:	4613      	mov	r3, r2
 8002356:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	b29a      	uxth	r2, r3
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <ssd1306_SetCursor+0x2c>)
 800235e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002360:	79bb      	ldrb	r3, [r7, #6]
 8002362:	b29a      	uxth	r2, r3
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <ssd1306_SetCursor+0x2c>)
 8002366:	805a      	strh	r2, [r3, #2]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	20000680 	.word	0x20000680

08002378 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002382:	2381      	movs	r3, #129	; 0x81
 8002384:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fdff 	bl	8001f8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fdfb 	bl	8001f8c <ssd1306_WriteCommand>
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80023b0:	23af      	movs	r3, #175	; 0xaf
 80023b2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <ssd1306_SetDisplayOn+0x38>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	715a      	strb	r2, [r3, #5]
 80023ba:	e004      	b.n	80023c6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80023bc:	23ae      	movs	r3, #174	; 0xae
 80023be:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <ssd1306_SetDisplayOn+0x38>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fddf 	bl	8001f8c <ssd1306_WriteCommand>
}
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000680 	.word	0x20000680

080023dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_MspInit+0x4c>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a10      	ldr	r2, [pc, #64]	; (8002428 <HAL_MspInit+0x4c>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <HAL_MspInit+0x4c>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_MspInit+0x4c>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <HAL_MspInit+0x4c>)
 8002400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002404:	6453      	str	r3, [r2, #68]	; 0x44
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_MspInit+0x4c>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	210f      	movs	r1, #15
 8002416:	f06f 0001 	mvn.w	r0, #1
 800241a:	f000 fedb 	bl	80031d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800

0800242c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08e      	sub	sp, #56	; 0x38
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800243c:	4b33      	ldr	r3, [pc, #204]	; (800250c <HAL_InitTick+0xe0>)
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	4a32      	ldr	r2, [pc, #200]	; (800250c <HAL_InitTick+0xe0>)
 8002442:	f043 0310 	orr.w	r3, r3, #16
 8002446:	6413      	str	r3, [r2, #64]	; 0x40
 8002448:	4b30      	ldr	r3, [pc, #192]	; (800250c <HAL_InitTick+0xe0>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002454:	f107 0210 	add.w	r2, r7, #16
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f002 ffc8 	bl	80053f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800246e:	f002 ff99 	bl	80053a4 <HAL_RCC_GetPCLK1Freq>
 8002472:	6378      	str	r0, [r7, #52]	; 0x34
 8002474:	e004      	b.n	8002480 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002476:	f002 ff95 	bl	80053a4 <HAL_RCC_GetPCLK1Freq>
 800247a:	4603      	mov	r3, r0
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002482:	4a23      	ldr	r2, [pc, #140]	; (8002510 <HAL_InitTick+0xe4>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	0c9b      	lsrs	r3, r3, #18
 800248a:	3b01      	subs	r3, #1
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800248e:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_InitTick+0xe8>)
 8002490:	4a21      	ldr	r2, [pc, #132]	; (8002518 <HAL_InitTick+0xec>)
 8002492:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002494:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <HAL_InitTick+0xe8>)
 8002496:	f240 32e7 	movw	r2, #999	; 0x3e7
 800249a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800249c:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <HAL_InitTick+0xe8>)
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024a2:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <HAL_InitTick+0xe8>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a8:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <HAL_InitTick+0xe8>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ae:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_InitTick+0xe8>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80024b4:	4817      	ldr	r0, [pc, #92]	; (8002514 <HAL_InitTick+0xe8>)
 80024b6:	f004 f92d 	bl	8006714 <HAL_TIM_Base_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80024c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d11b      	bne.n	8002500 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80024c8:	4812      	ldr	r0, [pc, #72]	; (8002514 <HAL_InitTick+0xe8>)
 80024ca:	f004 f985 	bl	80067d8 <HAL_TIM_Base_Start_IT>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80024d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d111      	bne.n	8002500 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024dc:	2036      	movs	r0, #54	; 0x36
 80024de:	f000 fe95 	bl	800320c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b0f      	cmp	r3, #15
 80024e6:	d808      	bhi.n	80024fa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80024e8:	2200      	movs	r2, #0
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	2036      	movs	r0, #54	; 0x36
 80024ee:	f000 fe71 	bl	80031d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <HAL_InitTick+0xf0>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	e002      	b.n	8002500 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002500:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002504:	4618      	mov	r0, r3
 8002506:	3738      	adds	r7, #56	; 0x38
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	431bde83 	.word	0x431bde83
 8002514:	20000688 	.word	0x20000688
 8002518:	40001000 	.word	0x40001000
 800251c:	20000058 	.word	0x20000058

08002520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <NMI_Handler+0x4>

08002526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252a:	e7fe      	b.n	800252a <HardFault_Handler+0x4>

0800252c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <MemManage_Handler+0x4>

08002532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002536:	e7fe      	b.n	8002536 <BusFault_Handler+0x4>

08002538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800253c:	e7fe      	b.n	800253c <UsageFault_Handler+0x4>

0800253e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <TIM6_DAC_IRQHandler+0x20>)
 8002552:	791b      	ldrb	r3, [r3, #4]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800255a:	4804      	ldr	r0, [pc, #16]	; (800256c <TIM6_DAC_IRQHandler+0x20>)
 800255c:	f000 fed8 	bl	8003310 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002560:	4803      	ldr	r0, [pc, #12]	; (8002570 <TIM6_DAC_IRQHandler+0x24>)
 8002562:	f004 fb03 	bl	8006b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	2000010c 	.word	0x2000010c
 8002570:	20000688 	.word	0x20000688

08002574 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <DMA2_Stream3_IRQHandler+0x10>)
 800257a:	f001 f94b 	bl	8003814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000220 	.word	0x20000220

08002588 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800258c:	4802      	ldr	r0, [pc, #8]	; (8002598 <USART6_IRQHandler+0x10>)
 800258e:	f005 f9ab 	bl	80078e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000724 	.word	0x20000724

0800259c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	e00a      	b.n	80025c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025ae:	f3af 8000 	nop.w
 80025b2:	4601      	mov	r1, r0
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	60ba      	str	r2, [r7, #8]
 80025ba:	b2ca      	uxtb	r2, r1
 80025bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	dbf0      	blt.n	80025ae <_read+0x12>
  }

  return len;
 80025cc:	687b      	ldr	r3, [r7, #4]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b086      	sub	sp, #24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	e009      	b.n	80025fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	60ba      	str	r2, [r7, #8]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3301      	adds	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	429a      	cmp	r2, r3
 8002602:	dbf1      	blt.n	80025e8 <_write+0x12>
  }
  return len;
 8002604:	687b      	ldr	r3, [r7, #4]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_close>:

int _close(int file)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002636:	605a      	str	r2, [r3, #4]
  return 0;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <_isatty>:

int _isatty(int file)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800264e:	2301      	movs	r3, #1
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002680:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <_sbrk+0x5c>)
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <_sbrk+0x60>)
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800268c:	4b13      	ldr	r3, [pc, #76]	; (80026dc <_sbrk+0x64>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <_sbrk+0x64>)
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <_sbrk+0x68>)
 8002698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <_sbrk+0x64>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d207      	bcs.n	80026b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a8:	f009 fe60 	bl	800c36c <__errno>
 80026ac:	4603      	mov	r3, r0
 80026ae:	220c      	movs	r2, #12
 80026b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
 80026b6:	e009      	b.n	80026cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026be:	4b07      	ldr	r3, [pc, #28]	; (80026dc <_sbrk+0x64>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <_sbrk+0x64>)
 80026c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ca:	68fb      	ldr	r3, [r7, #12]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20080000 	.word	0x20080000
 80026d8:	00000400 	.word	0x00000400
 80026dc:	200006d4 	.word	0x200006d4
 80026e0:	20005320 	.word	0x20005320

080026e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <SystemInit+0x20>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <SystemInit+0x20>)
 80026f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800270e:	f107 031c 	add.w	r3, r7, #28
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800271a:	463b      	mov	r3, r7
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
 8002728:	615a      	str	r2, [r3, #20]
 800272a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <MX_TIM4_Init+0xac>)
 800272e:	4a22      	ldr	r2, [pc, #136]	; (80027b8 <MX_TIM4_Init+0xb0>)
 8002730:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32-1;
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <MX_TIM4_Init+0xac>)
 8002734:	221f      	movs	r2, #31
 8002736:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002738:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <MX_TIM4_Init+0xac>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <MX_TIM4_Init+0xac>)
 8002740:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002744:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002746:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <MX_TIM4_Init+0xac>)
 8002748:	2200      	movs	r2, #0
 800274a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <MX_TIM4_Init+0xac>)
 800274e:	2200      	movs	r2, #0
 8002750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002752:	4818      	ldr	r0, [pc, #96]	; (80027b4 <MX_TIM4_Init+0xac>)
 8002754:	f004 f8b8 	bl	80068c8 <HAL_TIM_PWM_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800275e:	f7ff fb35 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800276a:	f107 031c 	add.w	r3, r7, #28
 800276e:	4619      	mov	r1, r3
 8002770:	4810      	ldr	r0, [pc, #64]	; (80027b4 <MX_TIM4_Init+0xac>)
 8002772:	f004 ff7b 	bl	800766c <HAL_TIMEx_MasterConfigSynchronization>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800277c:	f7ff fb26 	bl	8001dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002780:	2360      	movs	r3, #96	; 0x60
 8002782:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002790:	463b      	mov	r3, r7
 8002792:	2208      	movs	r2, #8
 8002794:	4619      	mov	r1, r3
 8002796:	4807      	ldr	r0, [pc, #28]	; (80027b4 <MX_TIM4_Init+0xac>)
 8002798:	f004 fb08 	bl	8006dac <HAL_TIM_PWM_ConfigChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80027a2:	f7ff fb13 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80027a6:	4803      	ldr	r0, [pc, #12]	; (80027b4 <MX_TIM4_Init+0xac>)
 80027a8:	f000 f828 	bl	80027fc <HAL_TIM_MspPostInit>

}
 80027ac:	bf00      	nop
 80027ae:	3728      	adds	r7, #40	; 0x28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	200006d8 	.word	0x200006d8
 80027b8:	40000800 	.word	0x40000800

080027bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <HAL_TIM_PWM_MspInit+0x38>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d10b      	bne.n	80027e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	4a09      	ldr	r2, [pc, #36]	; (80027f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	6413      	str	r3, [r2, #64]	; 0x40
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40000800 	.word	0x40000800
 80027f8:	40023800 	.word	0x40023800

080027fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 030c 	add.w	r3, r7, #12
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a11      	ldr	r2, [pc, #68]	; (8002860 <HAL_TIM_MspPostInit+0x64>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d11c      	bne.n	8002858 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <HAL_TIM_MspPostInit+0x68>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a10      	ldr	r2, [pc, #64]	; (8002864 <HAL_TIM_MspPostInit+0x68>)
 8002824:	f043 0308 	orr.w	r3, r3, #8
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
 800282a:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <HAL_TIM_MspPostInit+0x68>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = StepperMotorStep_Pin;
 8002836:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800283a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	2300      	movs	r3, #0
 8002846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002848:	2302      	movs	r3, #2
 800284a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(StepperMotorStep_GPIO_Port, &GPIO_InitStruct);
 800284c:	f107 030c 	add.w	r3, r7, #12
 8002850:	4619      	mov	r1, r3
 8002852:	4805      	ldr	r0, [pc, #20]	; (8002868 <HAL_TIM_MspPostInit+0x6c>)
 8002854:	f001 fa48 	bl	8003ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002858:	bf00      	nop
 800285a:	3720      	adds	r7, #32
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40000800 	.word	0x40000800
 8002864:	40023800 	.word	0x40023800
 8002868:	40020c00 	.word	0x40020c00

0800286c <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <MX_USART6_UART_Init+0x58>)
 8002872:	4a15      	ldr	r2, [pc, #84]	; (80028c8 <MX_USART6_UART_Init+0x5c>)
 8002874:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002876:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <MX_USART6_UART_Init+0x58>)
 8002878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800287c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <MX_USART6_UART_Init+0x58>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <MX_USART6_UART_Init+0x58>)
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800288a:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <MX_USART6_UART_Init+0x58>)
 800288c:	2200      	movs	r2, #0
 800288e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <MX_USART6_UART_Init+0x58>)
 8002892:	220c      	movs	r2, #12
 8002894:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <MX_USART6_UART_Init+0x58>)
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <MX_USART6_UART_Init+0x58>)
 800289e:	2200      	movs	r2, #0
 80028a0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028a2:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <MX_USART6_UART_Init+0x58>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <MX_USART6_UART_Init+0x58>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80028ae:	4805      	ldr	r0, [pc, #20]	; (80028c4 <MX_USART6_UART_Init+0x58>)
 80028b0:	f004 ff88 	bl	80077c4 <HAL_UART_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80028ba:	f7ff fa87 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000724 	.word	0x20000724
 80028c8:	40011400 	.word	0x40011400

080028cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b0ae      	sub	sp, #184	; 0xb8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	2290      	movs	r2, #144	; 0x90
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f009 fc8a 	bl	800c206 <memset>
  if(uartHandle->Instance==USART6)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a26      	ldr	r2, [pc, #152]	; (8002990 <HAL_UART_MspInit+0xc4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d144      	bne.n	8002986 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80028fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002900:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002902:	2300      	movs	r3, #0
 8002904:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002906:	f107 0314 	add.w	r3, r7, #20
 800290a:	4618      	mov	r0, r3
 800290c:	f002 fda4 	bl	8005458 <HAL_RCCEx_PeriphCLKConfig>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002916:	f7ff fa59 	bl	8001dcc <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800291a:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <HAL_UART_MspInit+0xc8>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	4a1d      	ldr	r2, [pc, #116]	; (8002994 <HAL_UART_MspInit+0xc8>)
 8002920:	f043 0320 	orr.w	r3, r3, #32
 8002924:	6453      	str	r3, [r2, #68]	; 0x44
 8002926:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <HAL_UART_MspInit+0xc8>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f003 0320 	and.w	r3, r3, #32
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002932:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_UART_MspInit+0xc8>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a17      	ldr	r2, [pc, #92]	; (8002994 <HAL_UART_MspInit+0xc8>)
 8002938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <HAL_UART_MspInit+0xc8>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = RPiPicoW_TX_Pin|RPiPicoW_RX_Pin;
 800294a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800294e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	2302      	movs	r3, #2
 8002954:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295e:	2303      	movs	r3, #3
 8002960:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002964:	2308      	movs	r3, #8
 8002966:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800296a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800296e:	4619      	mov	r1, r3
 8002970:	4809      	ldr	r0, [pc, #36]	; (8002998 <HAL_UART_MspInit+0xcc>)
 8002972:	f001 f9b9 	bl	8003ce8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	2105      	movs	r1, #5
 800297a:	2047      	movs	r0, #71	; 0x47
 800297c:	f000 fc2a 	bl	80031d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002980:	2047      	movs	r0, #71	; 0x47
 8002982:	f000 fc43 	bl	800320c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002986:	bf00      	nop
 8002988:	37b8      	adds	r7, #184	; 0xb8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40011400 	.word	0x40011400
 8002994:	40023800 	.word	0x40023800
 8002998:	40021800 	.word	0x40021800

0800299c <ws2812b_init>:
static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);
static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);

// ======== Public Functions =======================================================================

int ws2812b_init(ws2812b_handle_t *ws) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  // Point ws2812b_error_msg to error buffer unless error message buffer is disabled.
#ifndef WS2812B_DISABLE_ERROR_MSG
  ws2812b_error_msg = error_msg_buf;
 80029a4:	4b7a      	ldr	r3, [pc, #488]	; (8002b90 <ws2812b_init+0x1f4>)
 80029a6:	4a7b      	ldr	r2, [pc, #492]	; (8002b94 <ws2812b_init+0x1f8>)
 80029a8:	601a      	str	r2, [r3, #0]
  error_msg_buf[0] = '\0';
 80029aa:	4b7a      	ldr	r3, [pc, #488]	; (8002b94 <ws2812b_init+0x1f8>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
#else  /* WS2812B_DISABLE_ERROR_MSG */
  ws2812b_error_msg = 0;
#endif /* WS2812B_DISABLE_ERROR_MSG */

  // Assert packing is valid
  WS2812B_INIT_ASSERT((ws->config.packing == WS2812B_PACKING_DOUBLE) ||
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d009      	beq.n	80029cc <ws2812b_init+0x30>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d005      	beq.n	80029cc <ws2812b_init+0x30>
 80029c0:	4875      	ldr	r0, [pc, #468]	; (8002b98 <ws2812b_init+0x1fc>)
 80029c2:	f000 f9f5 	bl	8002db0 <set_init_error_msg>
 80029c6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ca:	e17f      	b.n	8002ccc <ws2812b_init+0x330>
                          (ws->config.packing == WS2812B_PACKING_SINGLE),
                      "ws2812b: config.packing is invalid!");

  // Assert pulse_len_1 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_1),
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	789b      	ldrb	r3, [r3, #2]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d01d      	beq.n	8002a10 <ws2812b_init+0x74>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	789b      	ldrb	r3, [r3, #2]
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d019      	beq.n	8002a10 <ws2812b_init+0x74>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	789b      	ldrb	r3, [r3, #2]
 80029e0:	2b07      	cmp	r3, #7
 80029e2:	d015      	beq.n	8002a10 <ws2812b_init+0x74>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	789b      	ldrb	r3, [r3, #2]
 80029e8:	2b0f      	cmp	r3, #15
 80029ea:	d011      	beq.n	8002a10 <ws2812b_init+0x74>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	789b      	ldrb	r3, [r3, #2]
 80029f0:	2b3f      	cmp	r3, #63	; 0x3f
 80029f2:	d00d      	beq.n	8002a10 <ws2812b_init+0x74>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	789b      	ldrb	r3, [r3, #2]
 80029f8:	2b1f      	cmp	r3, #31
 80029fa:	d009      	beq.n	8002a10 <ws2812b_init+0x74>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	789b      	ldrb	r3, [r3, #2]
 8002a00:	2b7f      	cmp	r3, #127	; 0x7f
 8002a02:	d005      	beq.n	8002a10 <ws2812b_init+0x74>
 8002a04:	4865      	ldr	r0, [pc, #404]	; (8002b9c <ws2812b_init+0x200>)
 8002a06:	f000 f9d3 	bl	8002db0 <set_init_error_msg>
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0e:	e15d      	b.n	8002ccc <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_1 is invalid!");

  // Asert pulse_len_0 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_0),
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	785b      	ldrb	r3, [r3, #1]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d01d      	beq.n	8002a54 <ws2812b_init+0xb8>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	785b      	ldrb	r3, [r3, #1]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d019      	beq.n	8002a54 <ws2812b_init+0xb8>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	785b      	ldrb	r3, [r3, #1]
 8002a24:	2b07      	cmp	r3, #7
 8002a26:	d015      	beq.n	8002a54 <ws2812b_init+0xb8>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	785b      	ldrb	r3, [r3, #1]
 8002a2c:	2b0f      	cmp	r3, #15
 8002a2e:	d011      	beq.n	8002a54 <ws2812b_init+0xb8>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	785b      	ldrb	r3, [r3, #1]
 8002a34:	2b3f      	cmp	r3, #63	; 0x3f
 8002a36:	d00d      	beq.n	8002a54 <ws2812b_init+0xb8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	785b      	ldrb	r3, [r3, #1]
 8002a3c:	2b1f      	cmp	r3, #31
 8002a3e:	d009      	beq.n	8002a54 <ws2812b_init+0xb8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	785b      	ldrb	r3, [r3, #1]
 8002a44:	2b7f      	cmp	r3, #127	; 0x7f
 8002a46:	d005      	beq.n	8002a54 <ws2812b_init+0xb8>
 8002a48:	4855      	ldr	r0, [pc, #340]	; (8002ba0 <ws2812b_init+0x204>)
 8002a4a:	f000 f9b1 	bl	8002db0 <set_init_error_msg>
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	e13b      	b.n	8002ccc <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_0 is invalid!");

  // Assert first_bit_0 is valid
  WS2812B_INIT_ASSERT((ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_DISABLED) ||
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	78db      	ldrb	r3, [r3, #3]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d009      	beq.n	8002a70 <ws2812b_init+0xd4>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	78db      	ldrb	r3, [r3, #3]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d005      	beq.n	8002a70 <ws2812b_init+0xd4>
 8002a64:	484f      	ldr	r0, [pc, #316]	; (8002ba4 <ws2812b_init+0x208>)
 8002a66:	f000 f9a3 	bl	8002db0 <set_init_error_msg>
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6e:	e12d      	b.n	8002ccc <ws2812b_init+0x330>
                          (ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_ENABLED),
                      "ws2812b: config.first_bit_0 is invalid!");

  // Assert spi_bit_order is valid
  WS2812B_INIT_ASSERT((ws->config.spi_bit_order == WS2812B_LSB_FIRST) ||
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	791b      	ldrb	r3, [r3, #4]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d009      	beq.n	8002a8c <ws2812b_init+0xf0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	791b      	ldrb	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <ws2812b_init+0xf0>
 8002a80:	4849      	ldr	r0, [pc, #292]	; (8002ba8 <ws2812b_init+0x20c>)
 8002a82:	f000 f995 	bl	8002db0 <set_init_error_msg>
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8a:	e11f      	b.n	8002ccc <ws2812b_init+0x330>
                          (ws->config.spi_bit_order == WS2812B_MSB_FIRST),
                      "ws2812b: config.spi_bit_order is invalid!");

  // Assert that the '1' pulse is longer than the '0' pulse:
  WS2812B_INIT_ASSERT(ws->config.pulse_len_1 > ws->config.pulse_len_0,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	789a      	ldrb	r2, [r3, #2]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	785b      	ldrb	r3, [r3, #1]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d805      	bhi.n	8002aa4 <ws2812b_init+0x108>
 8002a98:	4844      	ldr	r0, [pc, #272]	; (8002bac <ws2812b_init+0x210>)
 8002a9a:	f000 f989 	bl	8002db0 <set_init_error_msg>
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa2:	e113      	b.n	8002ccc <ws2812b_init+0x330>
                      "ws2812b: One-pulse must be longer than zero-pulse!");

  // Assert that pulse is not too long if in double packing:
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d109      	bne.n	8002ac0 <ws2812b_init+0x124>
    WS2812B_INIT_ASSERT(ws->config.pulse_len_1 < WS2812B_PULSE_LEN_4b,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	789b      	ldrb	r3, [r3, #2]
 8002ab0:	2b0e      	cmp	r3, #14
 8002ab2:	d905      	bls.n	8002ac0 <ws2812b_init+0x124>
 8002ab4:	483e      	ldr	r0, [pc, #248]	; (8002bb0 <ws2812b_init+0x214>)
 8002ab6:	f000 f97b 	bl	8002db0 <set_init_error_msg>
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
 8002abe:	e105      	b.n	8002ccc <ws2812b_init+0x330>
                        "ws2812b: Pulse is too long for double packing!");
  }

  // Apply 0 prefix to pulse if selected
  ws->state.pulse_0 = ws->config.pulse_len_0 << ws->config.first_bit_0;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	785b      	ldrb	r3, [r3, #1]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	78db      	ldrb	r3, [r3, #3]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	765a      	strb	r2, [r3, #25]
  ws->state.pulse_1 = ws->config.pulse_len_1 << ws->config.first_bit_0;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	789b      	ldrb	r3, [r3, #2]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	78db      	ldrb	r3, [r3, #3]
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	761a      	strb	r2, [r3, #24]

  // Pulse needs to be reverse for MSB-first transmission:
  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	791b      	ldrb	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f040 80e9 	bne.w	8002cc4 <ws2812b_init+0x328>
    if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d15c      	bne.n	8002bb4 <ws2812b_init+0x218>
      ws->state.pulse_0 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_0);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	7e5b      	ldrb	r3, [r3, #25]
 8002afe:	10db      	asrs	r3, r3, #3
 8002b00:	b25b      	sxtb	r3, r3
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	b25a      	sxtb	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7e5b      	ldrb	r3, [r3, #25]
 8002b0c:	105b      	asrs	r3, r3, #1
 8002b0e:	b25b      	sxtb	r3, r3
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	b25b      	sxtb	r3, r3
 8002b16:	4313      	orrs	r3, r2
 8002b18:	b25a      	sxtb	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	7e5b      	ldrb	r3, [r3, #25]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	b25b      	sxtb	r3, r3
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	b25b      	sxtb	r3, r3
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	b25a      	sxtb	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	7e5b      	ldrb	r3, [r3, #25]
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	b25b      	sxtb	r3, r3
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	b25b      	sxtb	r3, r3
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	b25b      	sxtb	r3, r3
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_1);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7e1b      	ldrb	r3, [r3, #24]
 8002b48:	10db      	asrs	r3, r3, #3
 8002b4a:	b25b      	sxtb	r3, r3
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	b25a      	sxtb	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	7e1b      	ldrb	r3, [r3, #24]
 8002b56:	105b      	asrs	r3, r3, #1
 8002b58:	b25b      	sxtb	r3, r3
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	b25b      	sxtb	r3, r3
 8002b60:	4313      	orrs	r3, r2
 8002b62:	b25a      	sxtb	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7e1b      	ldrb	r3, [r3, #24]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	b25b      	sxtb	r3, r3
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	b25b      	sxtb	r3, r3
 8002b72:	4313      	orrs	r3, r2
 8002b74:	b25a      	sxtb	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	7e1b      	ldrb	r3, [r3, #24]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	b25b      	sxtb	r3, r3
 8002b84:	4313      	orrs	r3, r2
 8002b86:	b25b      	sxtb	r3, r3
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	761a      	strb	r2, [r3, #24]
 8002b8e:	e099      	b.n	8002cc4 <ws2812b_init+0x328>
 8002b90:	200007ac 	.word	0x200007ac
 8002b94:	200007b0 	.word	0x200007b0
 8002b98:	0800d07c 	.word	0x0800d07c
 8002b9c:	0800d0a0 	.word	0x0800d0a0
 8002ba0:	0800d0c8 	.word	0x0800d0c8
 8002ba4:	0800d0f0 	.word	0x0800d0f0
 8002ba8:	0800d118 	.word	0x0800d118
 8002bac:	0800d144 	.word	0x0800d144
 8002bb0:	0800d178 	.word	0x0800d178
    } else {
      ws->state.pulse_0 = WS2812B_BYTE_REVERSE(ws->state.pulse_0);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	7e5b      	ldrb	r3, [r3, #25]
 8002bb8:	09db      	lsrs	r3, r3, #7
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	b25a      	sxtb	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	7e5b      	ldrb	r3, [r3, #25]
 8002bc2:	115b      	asrs	r3, r3, #5
 8002bc4:	b25b      	sxtb	r3, r3
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	b25b      	sxtb	r3, r3
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	b25a      	sxtb	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	7e5b      	ldrb	r3, [r3, #25]
 8002bd4:	10db      	asrs	r3, r3, #3
 8002bd6:	b25b      	sxtb	r3, r3
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	b25b      	sxtb	r3, r3
 8002bde:	4313      	orrs	r3, r2
 8002be0:	b25a      	sxtb	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	7e5b      	ldrb	r3, [r3, #25]
 8002be6:	105b      	asrs	r3, r3, #1
 8002be8:	b25b      	sxtb	r3, r3
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	b25b      	sxtb	r3, r3
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	b25a      	sxtb	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7e5b      	ldrb	r3, [r3, #25]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	b25b      	sxtb	r3, r3
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	b25b      	sxtb	r3, r3
 8002c02:	4313      	orrs	r3, r2
 8002c04:	b25a      	sxtb	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	7e5b      	ldrb	r3, [r3, #25]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	b25b      	sxtb	r3, r3
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	b25b      	sxtb	r3, r3
 8002c14:	4313      	orrs	r3, r2
 8002c16:	b25a      	sxtb	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	7e5b      	ldrb	r3, [r3, #25]
 8002c1c:	015b      	lsls	r3, r3, #5
 8002c1e:	b25b      	sxtb	r3, r3
 8002c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c24:	b25b      	sxtb	r3, r3
 8002c26:	4313      	orrs	r3, r2
 8002c28:	b25a      	sxtb	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	7e5b      	ldrb	r3, [r3, #25]
 8002c2e:	01db      	lsls	r3, r3, #7
 8002c30:	b25b      	sxtb	r3, r3
 8002c32:	4313      	orrs	r3, r2
 8002c34:	b25b      	sxtb	r3, r3
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_BYTE_REVERSE(ws->state.pulse_1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7e1b      	ldrb	r3, [r3, #24]
 8002c40:	09db      	lsrs	r3, r3, #7
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	b25a      	sxtb	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7e1b      	ldrb	r3, [r3, #24]
 8002c4a:	115b      	asrs	r3, r3, #5
 8002c4c:	b25b      	sxtb	r3, r3
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	b25b      	sxtb	r3, r3
 8002c54:	4313      	orrs	r3, r2
 8002c56:	b25a      	sxtb	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	7e1b      	ldrb	r3, [r3, #24]
 8002c5c:	10db      	asrs	r3, r3, #3
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	b25b      	sxtb	r3, r3
 8002c66:	4313      	orrs	r3, r2
 8002c68:	b25a      	sxtb	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	7e1b      	ldrb	r3, [r3, #24]
 8002c6e:	105b      	asrs	r3, r3, #1
 8002c70:	b25b      	sxtb	r3, r3
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	b25b      	sxtb	r3, r3
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	b25a      	sxtb	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7e1b      	ldrb	r3, [r3, #24]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	b25b      	sxtb	r3, r3
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	b25a      	sxtb	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7e1b      	ldrb	r3, [r3, #24]
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	b25b      	sxtb	r3, r3
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	b25b      	sxtb	r3, r3
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	b25a      	sxtb	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7e1b      	ldrb	r3, [r3, #24]
 8002ca4:	015b      	lsls	r3, r3, #5
 8002ca6:	b25b      	sxtb	r3, r3
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	b25b      	sxtb	r3, r3
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	b25a      	sxtb	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	7e1b      	ldrb	r3, [r3, #24]
 8002cb6:	01db      	lsls	r3, r3, #7
 8002cb8:	b25b      	sxtb	r3, r3
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	b25b      	sxtb	r3, r3
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	761a      	strb	r2, [r3, #24]
    }
  }

  ws->state.iteration_index = 0;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61da      	str	r2, [r3, #28]

  return 0;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <ws2812b_required_buffer_len>:

uint32_t ws2812b_required_buffer_len(ws2812b_handle_t *ws) {
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  return WS2812B_REQUIRED_BUFFER_LEN(ws->led_count, ws->config.packing, ws->config.prefix_len,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <ws2812b_required_buffer_len+0x18>
 8002ce8:	2318      	movs	r3, #24
 8002cea:	e000      	b.n	8002cee <ws2812b_required_buffer_len+0x1a>
 8002cec:	230c      	movs	r3, #12
 8002cee:	fb03 f202 	mul.w	r2, r3, r2
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	441a      	add	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4413      	add	r3, r2
                                     ws->config.suffix_len);
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <ws2812b_fill_buffer>:

void ws2812b_fill_buffer(ws2812b_handle_t *ws, uint8_t *buffer) {
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b086      	sub	sp, #24
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
  ws2812b_led_t *led = ws->leds;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	617b      	str	r3, [r7, #20]

  // Add 0x00 prefix
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	e008      	b.n	8002d32 <ws2812b_fill_buffer+0x28>
    *buffer = 0x00;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
    buffer++;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d3f1      	bcc.n	8002d20 <ws2812b_fill_buffer+0x16>
  }

  // Fill buffer
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	e01a      	b.n	8002d78 <ws2812b_fill_buffer+0x6e>
    add_byte(ws, led->green, &buffer);
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	785b      	ldrb	r3, [r3, #1]
 8002d46:	463a      	mov	r2, r7
 8002d48:	4619      	mov	r1, r3
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f85a 	bl	8002e04 <add_byte>
    add_byte(ws, led->red, &buffer);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	463a      	mov	r2, r7
 8002d56:	4619      	mov	r1, r3
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f853 	bl	8002e04 <add_byte>
    add_byte(ws, led->blue, &buffer);
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	789b      	ldrb	r3, [r3, #2]
 8002d62:	463a      	mov	r2, r7
 8002d64:	4619      	mov	r1, r3
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f84c 	bl	8002e04 <add_byte>
    led++;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	3303      	adds	r3, #3
 8002d70:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	3301      	adds	r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d3df      	bcc.n	8002d42 <ws2812b_fill_buffer+0x38>
  }

  // Add 0x00 suffix
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	e008      	b.n	8002d9a <ws2812b_fill_buffer+0x90>
    *buffer = 0x00;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
    buffer++;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	3301      	adds	r3, #1
 8002d92:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	3301      	adds	r3, #1
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d3f1      	bcc.n	8002d88 <ws2812b_fill_buffer+0x7e>
  }
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <set_init_error_msg>:
  return 0x00;
}

// ======== Private Functions ======================================================================

static void set_init_error_msg(const char *error_msg) {
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
#ifndef WS2812B_DISABLE_ERROR_MSG
  // If error mesages are enabled, copy over the error message
  int i = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]

  // Copy content
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 8002dbc:	e00b      	b.n	8002dd6 <set_init_error_msg+0x26>
    error_msg_buf[i] = error_msg[i];
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	7819      	ldrb	r1, [r3, #0]
 8002dc6:	4a0e      	ldr	r2, [pc, #56]	; (8002e00 <set_init_error_msg+0x50>)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	460a      	mov	r2, r1
 8002dce:	701a      	strb	r2, [r3, #0]
    i++;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	60fb      	str	r3, [r7, #12]
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b3a      	cmp	r3, #58	; 0x3a
 8002dda:	dc05      	bgt.n	8002de8 <set_init_error_msg+0x38>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ea      	bne.n	8002dbe <set_init_error_msg+0xe>
  }

  // Terminate string
  error_msg_buf[i] = '\0';
 8002de8:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <set_init_error_msg+0x50>)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4413      	add	r3, r2
 8002dee:	2200      	movs	r2, #0
 8002df0:	701a      	strb	r2, [r3, #0]
#else
  // Otherwise avoid the unused-args warning
  (void)(error_msg);
#endif /* WS2812B_DISABLE_ERROR_MSG */
}
 8002df2:	bf00      	nop
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	200007b0 	.word	0x200007b0

08002e04 <add_byte>:

static void add_byte(ws2812b_handle_t *ws, uint8_t value, uint8_t **buffer) {
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	72fb      	strb	r3, [r7, #11]
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d118      	bne.n	8002e4c <add_byte+0x48>

    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	e011      	b.n	8002e44 <add_byte+0x40>
      **buffer = construct_double_pulse(ws, b, value);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681c      	ldr	r4, [r3, #0]
 8002e24:	7afb      	ldrb	r3, [r7, #11]
 8002e26:	461a      	mov	r2, r3
 8002e28:	6979      	ldr	r1, [r7, #20]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 f844 	bl	8002eb8 <construct_double_pulse>
 8002e30:	4603      	mov	r3, r0
 8002e32:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3302      	adds	r3, #2
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2b07      	cmp	r3, #7
 8002e48:	d9ea      	bls.n	8002e20 <add_byte+0x1c>
    for (uint_fast8_t b = 0; b < 8; b++) {
      **buffer = construct_single_pulse(ws, b, value);
      ++*buffer;
    }
  }
}
 8002e4a:	e017      	b.n	8002e7c <add_byte+0x78>
    for (uint_fast8_t b = 0; b < 8; b++) {
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	e011      	b.n	8002e76 <add_byte+0x72>
      **buffer = construct_single_pulse(ws, b, value);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681c      	ldr	r4, [r3, #0]
 8002e56:	7afb      	ldrb	r3, [r7, #11]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	6939      	ldr	r1, [r7, #16]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f811 	bl	8002e84 <construct_single_pulse>
 8002e62:	4603      	mov	r3, r0
 8002e64:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b++) {
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	3301      	adds	r3, #1
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b07      	cmp	r3, #7
 8002e7a:	d9ea      	bls.n	8002e52 <add_byte+0x4e>
}
 8002e7c:	bf00      	nop
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd90      	pop	{r4, r7, pc}

08002e84 <construct_single_pulse>:

static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	71fb      	strb	r3, [r7, #7]
  return (value & ((0x80U) >> b) ? ws->state.pulse_1 : ws->state.pulse_0);
 8002e92:	79fa      	ldrb	r2, [r7, #7]
 8002e94:	2180      	movs	r1, #128	; 0x80
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	fa21 f303 	lsr.w	r3, r1, r3
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <construct_single_pulse+0x24>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	7e1b      	ldrb	r3, [r3, #24]
 8002ea6:	e001      	b.n	8002eac <construct_single_pulse+0x28>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	7e5b      	ldrb	r3, [r3, #25]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <construct_double_pulse>:

static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	71fb      	strb	r3, [r7, #7]
  uint8_t result;
  uint8_t pulse_1 = ws->state.pulse_1;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	7e1b      	ldrb	r3, [r3, #24]
 8002eca:	75bb      	strb	r3, [r7, #22]
  uint8_t pulse_0 = ws->state.pulse_0;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	7e5b      	ldrb	r3, [r3, #25]
 8002ed0:	757b      	strb	r3, [r7, #21]

  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	791b      	ldrb	r3, [r3, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d121      	bne.n	8002f1e <construct_double_pulse+0x66>
    // MSB is first
    result = value & ((0x80U) >> (b + 1)) ? pulse_1 : pulse_0;
 8002eda:	79fa      	ldrb	r2, [r7, #7]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <construct_double_pulse+0x38>
 8002eec:	7dbb      	ldrb	r3, [r7, #22]
 8002eee:	e000      	b.n	8002ef2 <construct_double_pulse+0x3a>
 8002ef0:	7d7b      	ldrb	r3, [r7, #21]
 8002ef2:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8002ef4:	79fa      	ldrb	r2, [r7, #7]
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	fa21 f303 	lsr.w	r3, r1, r3
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <construct_double_pulse+0x54>
 8002f04:	7dbb      	ldrb	r3, [r7, #22]
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	b25b      	sxtb	r3, r3
 8002f0a:	e002      	b.n	8002f12 <construct_double_pulse+0x5a>
 8002f0c:	7d7b      	ldrb	r3, [r7, #21]
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	b25b      	sxtb	r3, r3
 8002f12:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	b25b      	sxtb	r3, r3
 8002f1a:	75fb      	strb	r3, [r7, #23]
 8002f1c:	e020      	b.n	8002f60 <construct_double_pulse+0xa8>
  } else {
    // LSB is first
    result = value & ((0x80U) >> (b)) ? pulse_1 : pulse_0;
 8002f1e:	79fa      	ldrb	r2, [r7, #7]
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	fa21 f303 	lsr.w	r3, r1, r3
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <construct_double_pulse+0x7a>
 8002f2e:	7dbb      	ldrb	r3, [r7, #22]
 8002f30:	e000      	b.n	8002f34 <construct_double_pulse+0x7c>
 8002f32:	7d7b      	ldrb	r3, [r7, #21]
 8002f34:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b + 1)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8002f36:	79fa      	ldrb	r2, [r7, #7]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	2180      	movs	r1, #128	; 0x80
 8002f3e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <construct_double_pulse+0x98>
 8002f48:	7dbb      	ldrb	r3, [r7, #22]
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	b25b      	sxtb	r3, r3
 8002f4e:	e002      	b.n	8002f56 <construct_double_pulse+0x9e>
 8002f50:	7d7b      	ldrb	r3, [r7, #21]
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	b25b      	sxtb	r3, r3
 8002f56:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	b25b      	sxtb	r3, r3
 8002f5e:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8002f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f74:	480d      	ldr	r0, [pc, #52]	; (8002fac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f76:	490e      	ldr	r1, [pc, #56]	; (8002fb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f78:	4a0e      	ldr	r2, [pc, #56]	; (8002fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f7c:	e002      	b.n	8002f84 <LoopCopyDataInit>

08002f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f82:	3304      	adds	r3, #4

08002f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f88:	d3f9      	bcc.n	8002f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f8a:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f8c:	4c0b      	ldr	r4, [pc, #44]	; (8002fbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f90:	e001      	b.n	8002f96 <LoopFillZerobss>

08002f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f94:	3204      	adds	r2, #4

08002f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f98:	d3fb      	bcc.n	8002f92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f9a:	f7ff fba3 	bl	80026e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f9e:	f009 f9eb 	bl	800c378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fa2:	f7fe fe3d 	bl	8001c20 <main>
  bx  lr    
 8002fa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fa8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb0:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8002fb4:	0800e964 	.word	0x0800e964
  ldr r2, =_sbss
 8002fb8:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002fbc:	2000531c 	.word	0x2000531c

08002fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fc0:	e7fe      	b.n	8002fc0 <ADC_IRQHandler>

08002fc2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fc6:	2003      	movs	r0, #3
 8002fc8:	f000 f8f9 	bl	80031be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fcc:	2005      	movs	r0, #5
 8002fce:	f7ff fa2d 	bl	800242c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fd2:	f7ff fa03 	bl	80023dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_IncTick+0x20>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_IncTick+0x24>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4413      	add	r3, r2
 8002fec:	4a04      	ldr	r2, [pc, #16]	; (8003000 <HAL_IncTick+0x24>)
 8002fee:	6013      	str	r3, [r2, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	2000005c 	.word	0x2000005c
 8003000:	200007ec 	.word	0x200007ec

08003004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return uwTick;
 8003008:	4b03      	ldr	r3, [pc, #12]	; (8003018 <HAL_GetTick+0x14>)
 800300a:	681b      	ldr	r3, [r3, #0]
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	200007ec 	.word	0x200007ec

0800301c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003024:	f7ff ffee 	bl	8003004 <HAL_GetTick>
 8003028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d005      	beq.n	8003042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <HAL_Delay+0x44>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4413      	add	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003042:	bf00      	nop
 8003044:	f7ff ffde 	bl	8003004 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	429a      	cmp	r2, r3
 8003052:	d8f7      	bhi.n	8003044 <HAL_Delay+0x28>
  {
  }
}
 8003054:	bf00      	nop
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	2000005c 	.word	0x2000005c

08003064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <__NVIC_SetPriorityGrouping+0x40>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003080:	4013      	ands	r3, r2
 8003082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <__NVIC_SetPriorityGrouping+0x44>)
 800308e:	4313      	orrs	r3, r2
 8003090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003092:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <__NVIC_SetPriorityGrouping+0x40>)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	60d3      	str	r3, [r2, #12]
}
 8003098:	bf00      	nop
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	e000ed00 	.word	0xe000ed00
 80030a8:	05fa0000 	.word	0x05fa0000

080030ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030b0:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <__NVIC_GetPriorityGrouping+0x18>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	0a1b      	lsrs	r3, r3, #8
 80030b6:	f003 0307 	and.w	r3, r3, #7
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	db0b      	blt.n	80030f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	f003 021f 	and.w	r2, r3, #31
 80030e0:	4907      	ldr	r1, [pc, #28]	; (8003100 <__NVIC_EnableIRQ+0x38>)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	2001      	movs	r0, #1
 80030ea:	fa00 f202 	lsl.w	r2, r0, r2
 80030ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	e000e100 	.word	0xe000e100

08003104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	6039      	str	r1, [r7, #0]
 800310e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003114:	2b00      	cmp	r3, #0
 8003116:	db0a      	blt.n	800312e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	b2da      	uxtb	r2, r3
 800311c:	490c      	ldr	r1, [pc, #48]	; (8003150 <__NVIC_SetPriority+0x4c>)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	0112      	lsls	r2, r2, #4
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	440b      	add	r3, r1
 8003128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800312c:	e00a      	b.n	8003144 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	b2da      	uxtb	r2, r3
 8003132:	4908      	ldr	r1, [pc, #32]	; (8003154 <__NVIC_SetPriority+0x50>)
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	3b04      	subs	r3, #4
 800313c:	0112      	lsls	r2, r2, #4
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	440b      	add	r3, r1
 8003142:	761a      	strb	r2, [r3, #24]
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000e100 	.word	0xe000e100
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003158:	b480      	push	{r7}
 800315a:	b089      	sub	sp, #36	; 0x24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f1c3 0307 	rsb	r3, r3, #7
 8003172:	2b04      	cmp	r3, #4
 8003174:	bf28      	it	cs
 8003176:	2304      	movcs	r3, #4
 8003178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	3304      	adds	r3, #4
 800317e:	2b06      	cmp	r3, #6
 8003180:	d902      	bls.n	8003188 <NVIC_EncodePriority+0x30>
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	3b03      	subs	r3, #3
 8003186:	e000      	b.n	800318a <NVIC_EncodePriority+0x32>
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800318c:	f04f 32ff 	mov.w	r2, #4294967295
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43da      	mvns	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	401a      	ands	r2, r3
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031a0:	f04f 31ff 	mov.w	r1, #4294967295
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	fa01 f303 	lsl.w	r3, r1, r3
 80031aa:	43d9      	mvns	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b0:	4313      	orrs	r3, r2
         );
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3724      	adds	r7, #36	; 0x24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ff4c 	bl	8003064 <__NVIC_SetPriorityGrouping>
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e6:	f7ff ff61 	bl	80030ac <__NVIC_GetPriorityGrouping>
 80031ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	6978      	ldr	r0, [r7, #20]
 80031f2:	f7ff ffb1 	bl	8003158 <NVIC_EncodePriority>
 80031f6:	4602      	mov	r2, r0
 80031f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fc:	4611      	mov	r1, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff ff80 	bl	8003104 <__NVIC_SetPriority>
}
 8003204:	bf00      	nop
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff ff54 	bl	80030c8 <__NVIC_EnableIRQ>
}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e014      	b.n	8003264 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	791b      	ldrb	r3, [r3, #4]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d105      	bne.n	8003250 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fd fbd0 	bl	80009f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	795b      	ldrb	r3, [r3, #5]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_DAC_Start+0x16>
 800327e:	2302      	movs	r3, #2
 8003280:	e040      	b.n	8003304 <HAL_DAC_Start+0x98>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6819      	ldr	r1, [r3, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	f003 0310 	and.w	r3, r3, #16
 800329a:	2201      	movs	r2, #1
 800329c:	409a      	lsls	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10f      	bne.n	80032cc <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80032b6:	2b3c      	cmp	r3, #60	; 0x3c
 80032b8:	d11d      	bne.n	80032f6 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0201 	orr.w	r2, r2, #1
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	e014      	b.n	80032f6 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	213c      	movs	r1, #60	; 0x3c
 80032de:	fa01 f303 	lsl.w	r3, r1, r3
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d107      	bne.n	80032f6 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0202 	orr.w	r2, r2, #2
 80032f4:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003326:	d120      	bne.n	800336a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003336:	d118      	bne.n	800336a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2204      	movs	r2, #4
 800333c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003352:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003362:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f852 	bl	800340e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003378:	d120      	bne.n	80033bc <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003388:	d118      	bne.n	80033bc <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2204      	movs	r2, #4
 800338e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f043 0202 	orr.w	r2, r3, #2
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80033a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80033b4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f882 	bl	80034c0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d105      	bne.n	80033ee <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4413      	add	r3, r2
 80033e8:	3308      	adds	r3, #8
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	e004      	b.n	80033f8 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4413      	add	r3, r2
 80033f4:	3314      	adds	r3, #20
 80033f6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	461a      	mov	r2, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003422:	b480      	push	{r7}
 8003424:	b087      	sub	sp, #28
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	795b      	ldrb	r3, [r3, #5]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_DAC_ConfigChannel+0x18>
 8003436:	2302      	movs	r3, #2
 8003438:	e03c      	b.n	80034b4 <HAL_DAC_ConfigChannel+0x92>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2202      	movs	r2, #2
 8003444:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4013      	ands	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6819      	ldr	r1, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	22c0      	movs	r2, #192	; 0xc0
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43da      	mvns	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	400a      	ands	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	371c      	adds	r7, #28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034e0:	f7ff fd90 	bl	8003004 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e099      	b.n	8003624 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0201 	bic.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003510:	e00f      	b.n	8003532 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003512:	f7ff fd77 	bl	8003004 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b05      	cmp	r3, #5
 800351e:	d908      	bls.n	8003532 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2203      	movs	r2, #3
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e078      	b.n	8003624 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e8      	bne.n	8003512 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4b38      	ldr	r3, [pc, #224]	; (800362c <HAL_DMA_Init+0x158>)
 800354c:	4013      	ands	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800355e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003576:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	2b04      	cmp	r3, #4
 800358a:	d107      	bne.n	800359c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	4313      	orrs	r3, r2
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0307 	bic.w	r3, r3, #7
 80035b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d117      	bne.n	80035f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00e      	beq.n	80035f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fb09 	bl	8003bf0 <DMA_CheckFifoParam>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2240      	movs	r2, #64	; 0x40
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035f2:	2301      	movs	r3, #1
 80035f4:	e016      	b.n	8003624 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fac0 	bl	8003b84 <DMA_CalcBaseAndBitshift>
 8003604:	4603      	mov	r3, r0
 8003606:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360c:	223f      	movs	r2, #63	; 0x3f
 800360e:	409a      	lsls	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	e010803f 	.word	0xe010803f

08003630 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003646:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_DMA_Start_IT+0x26>
 8003652:	2302      	movs	r3, #2
 8003654:	e048      	b.n	80036e8 <HAL_DMA_Start_IT+0xb8>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b01      	cmp	r3, #1
 8003668:	d137      	bne.n	80036da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2202      	movs	r2, #2
 800366e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 fa52 	bl	8003b28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003688:	223f      	movs	r2, #63	; 0x3f
 800368a:	409a      	lsls	r2, r3
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0216 	orr.w	r2, r2, #22
 800369e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695a      	ldr	r2, [r3, #20]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036ae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d007      	beq.n	80036c8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0208 	orr.w	r2, r2, #8
 80036c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	e005      	b.n	80036e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
 80036e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036fe:	f7ff fc81 	bl	8003004 <HAL_GetTick>
 8003702:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d008      	beq.n	8003722 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e052      	b.n	80037c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0216 	bic.w	r2, r2, #22
 8003730:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695a      	ldr	r2, [r3, #20]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003740:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d103      	bne.n	8003752 <HAL_DMA_Abort+0x62>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0208 	bic.w	r2, r2, #8
 8003760:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003772:	e013      	b.n	800379c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003774:	f7ff fc46 	bl	8003004 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b05      	cmp	r3, #5
 8003780:	d90c      	bls.n	800379c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2203      	movs	r2, #3
 800378c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e015      	b.n	80037c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1e4      	bne.n	8003774 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ae:	223f      	movs	r2, #63	; 0x3f
 80037b0:	409a      	lsls	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d004      	beq.n	80037ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2280      	movs	r2, #128	; 0x80
 80037e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e00c      	b.n	8003808 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2205      	movs	r2, #5
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0201 	bic.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003820:	4b8e      	ldr	r3, [pc, #568]	; (8003a5c <HAL_DMA_IRQHandler+0x248>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a8e      	ldr	r2, [pc, #568]	; (8003a60 <HAL_DMA_IRQHandler+0x24c>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	0a9b      	lsrs	r3, r3, #10
 800382c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003832:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383e:	2208      	movs	r2, #8
 8003840:	409a      	lsls	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4013      	ands	r3, r2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d01a      	beq.n	8003880 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d013      	beq.n	8003880 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0204 	bic.w	r2, r2, #4
 8003866:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386c:	2208      	movs	r2, #8
 800386e:	409a      	lsls	r2, r3
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	f043 0201 	orr.w	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003884:	2201      	movs	r2, #1
 8003886:	409a      	lsls	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4013      	ands	r3, r2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d012      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00b      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a2:	2201      	movs	r2, #1
 80038a4:	409a      	lsls	r2, r3
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	f043 0202 	orr.w	r2, r3, #2
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ba:	2204      	movs	r2, #4
 80038bc:	409a      	lsls	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d012      	beq.n	80038ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00b      	beq.n	80038ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	2204      	movs	r2, #4
 80038da:	409a      	lsls	r2, r3
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	f043 0204 	orr.w	r2, r3, #4
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f0:	2210      	movs	r2, #16
 80038f2:	409a      	lsls	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d043      	beq.n	8003984 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d03c      	beq.n	8003984 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390e:	2210      	movs	r2, #16
 8003910:	409a      	lsls	r2, r3
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d018      	beq.n	8003956 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d108      	bne.n	8003944 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d024      	beq.n	8003984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
 8003942:	e01f      	b.n	8003984 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01b      	beq.n	8003984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	4798      	blx	r3
 8003954:	e016      	b.n	8003984 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d107      	bne.n	8003974 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0208 	bic.w	r2, r2, #8
 8003972:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	2220      	movs	r2, #32
 800398a:	409a      	lsls	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4013      	ands	r3, r2
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 808f 	beq.w	8003ab4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8087 	beq.w	8003ab4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	2220      	movs	r2, #32
 80039ac:	409a      	lsls	r2, r3
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b05      	cmp	r3, #5
 80039bc:	d136      	bne.n	8003a2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0216 	bic.w	r2, r2, #22
 80039cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695a      	ldr	r2, [r3, #20]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <HAL_DMA_IRQHandler+0x1da>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d007      	beq.n	80039fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0208 	bic.w	r2, r2, #8
 80039fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	223f      	movs	r2, #63	; 0x3f
 8003a04:	409a      	lsls	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d07e      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	4798      	blx	r3
        }
        return;
 8003a2a:	e079      	b.n	8003b20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d01d      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10d      	bne.n	8003a64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d031      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
 8003a58:	e02c      	b.n	8003ab4 <HAL_DMA_IRQHandler+0x2a0>
 8003a5a:	bf00      	nop
 8003a5c:	20000054 	.word	0x20000054
 8003a60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d023      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	4798      	blx	r3
 8003a74:	e01e      	b.n	8003ab4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10f      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0210 	bic.w	r2, r2, #16
 8003a92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d032      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d022      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2205      	movs	r2, #5
 8003acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d307      	bcc.n	8003afc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f2      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0x2cc>
 8003afa:	e000      	b.n	8003afe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003afc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	4798      	blx	r3
 8003b1e:	e000      	b.n	8003b22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b20:	bf00      	nop
    }
  }
}
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
 8003b34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b40      	cmp	r3, #64	; 0x40
 8003b54:	d108      	bne.n	8003b68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b66:	e007      	b.n	8003b78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	60da      	str	r2, [r3, #12]
}
 8003b78:	bf00      	nop
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	3b10      	subs	r3, #16
 8003b94:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <DMA_CalcBaseAndBitshift+0x60>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b9e:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <DMA_CalcBaseAndBitshift+0x64>)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d908      	bls.n	8003bc4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <DMA_CalcBaseAndBitshift+0x68>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	1d1a      	adds	r2, r3, #4
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	659a      	str	r2, [r3, #88]	; 0x58
 8003bc2:	e006      	b.n	8003bd2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <DMA_CalcBaseAndBitshift+0x68>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	aaaaaaab 	.word	0xaaaaaaab
 8003be8:	0800e918 	.word	0x0800e918
 8003bec:	fffffc00 	.word	0xfffffc00

08003bf0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d11f      	bne.n	8003c4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d856      	bhi.n	8003cbe <DMA_CheckFifoParam+0xce>
 8003c10:	a201      	add	r2, pc, #4	; (adr r2, 8003c18 <DMA_CheckFifoParam+0x28>)
 8003c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c16:	bf00      	nop
 8003c18:	08003c29 	.word	0x08003c29
 8003c1c:	08003c3b 	.word	0x08003c3b
 8003c20:	08003c29 	.word	0x08003c29
 8003c24:	08003cbf 	.word	0x08003cbf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d046      	beq.n	8003cc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c38:	e043      	b.n	8003cc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c42:	d140      	bne.n	8003cc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c48:	e03d      	b.n	8003cc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c52:	d121      	bne.n	8003c98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d837      	bhi.n	8003cca <DMA_CheckFifoParam+0xda>
 8003c5a:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <DMA_CheckFifoParam+0x70>)
 8003c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c60:	08003c71 	.word	0x08003c71
 8003c64:	08003c77 	.word	0x08003c77
 8003c68:	08003c71 	.word	0x08003c71
 8003c6c:	08003c89 	.word	0x08003c89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
      break;
 8003c74:	e030      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d025      	beq.n	8003cce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c86:	e022      	b.n	8003cce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c90:	d11f      	bne.n	8003cd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c96:	e01c      	b.n	8003cd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d903      	bls.n	8003ca6 <DMA_CheckFifoParam+0xb6>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d003      	beq.n	8003cac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ca4:	e018      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8003caa:	e015      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00e      	beq.n	8003cd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
      break;
 8003cbc:	e00b      	b.n	8003cd6 <DMA_CheckFifoParam+0xe6>
      break;
 8003cbe:	bf00      	nop
 8003cc0:	e00a      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cc2:	bf00      	nop
 8003cc4:	e008      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cc6:	bf00      	nop
 8003cc8:	e006      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cca:	bf00      	nop
 8003ccc:	e004      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cce:	bf00      	nop
 8003cd0:	e002      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cd6:	bf00      	nop
    }
  } 
  
  return status; 
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop

08003ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b089      	sub	sp, #36	; 0x24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	e175      	b.n	8003ff4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d08:	2201      	movs	r2, #1
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	f040 8164 	bne.w	8003fee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d005      	beq.n	8003d3e <HAL_GPIO_Init+0x56>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d130      	bne.n	8003da0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	2203      	movs	r2, #3
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d74:	2201      	movs	r2, #1
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	f003 0201 	and.w	r2, r3, #1
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d017      	beq.n	8003ddc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	2203      	movs	r2, #3
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 0303 	and.w	r3, r3, #3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d123      	bne.n	8003e30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	08da      	lsrs	r2, r3, #3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3208      	adds	r2, #8
 8003df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	220f      	movs	r2, #15
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	08da      	lsrs	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3208      	adds	r2, #8
 8003e2a:	69b9      	ldr	r1, [r7, #24]
 8003e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 0203 	and.w	r2, r3, #3
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80be 	beq.w	8003fee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e72:	4b66      	ldr	r3, [pc, #408]	; (800400c <HAL_GPIO_Init+0x324>)
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	4a65      	ldr	r2, [pc, #404]	; (800400c <HAL_GPIO_Init+0x324>)
 8003e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e7e:	4b63      	ldr	r3, [pc, #396]	; (800400c <HAL_GPIO_Init+0x324>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e8a:	4a61      	ldr	r2, [pc, #388]	; (8004010 <HAL_GPIO_Init+0x328>)
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	089b      	lsrs	r3, r3, #2
 8003e90:	3302      	adds	r3, #2
 8003e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	220f      	movs	r2, #15
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a58      	ldr	r2, [pc, #352]	; (8004014 <HAL_GPIO_Init+0x32c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d037      	beq.n	8003f26 <HAL_GPIO_Init+0x23e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a57      	ldr	r2, [pc, #348]	; (8004018 <HAL_GPIO_Init+0x330>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d031      	beq.n	8003f22 <HAL_GPIO_Init+0x23a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a56      	ldr	r2, [pc, #344]	; (800401c <HAL_GPIO_Init+0x334>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d02b      	beq.n	8003f1e <HAL_GPIO_Init+0x236>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a55      	ldr	r2, [pc, #340]	; (8004020 <HAL_GPIO_Init+0x338>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d025      	beq.n	8003f1a <HAL_GPIO_Init+0x232>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a54      	ldr	r2, [pc, #336]	; (8004024 <HAL_GPIO_Init+0x33c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01f      	beq.n	8003f16 <HAL_GPIO_Init+0x22e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a53      	ldr	r2, [pc, #332]	; (8004028 <HAL_GPIO_Init+0x340>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d019      	beq.n	8003f12 <HAL_GPIO_Init+0x22a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a52      	ldr	r2, [pc, #328]	; (800402c <HAL_GPIO_Init+0x344>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <HAL_GPIO_Init+0x226>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a51      	ldr	r2, [pc, #324]	; (8004030 <HAL_GPIO_Init+0x348>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00d      	beq.n	8003f0a <HAL_GPIO_Init+0x222>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a50      	ldr	r2, [pc, #320]	; (8004034 <HAL_GPIO_Init+0x34c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d007      	beq.n	8003f06 <HAL_GPIO_Init+0x21e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a4f      	ldr	r2, [pc, #316]	; (8004038 <HAL_GPIO_Init+0x350>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d101      	bne.n	8003f02 <HAL_GPIO_Init+0x21a>
 8003efe:	2309      	movs	r3, #9
 8003f00:	e012      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f02:	230a      	movs	r3, #10
 8003f04:	e010      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f06:	2308      	movs	r3, #8
 8003f08:	e00e      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f0a:	2307      	movs	r3, #7
 8003f0c:	e00c      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f0e:	2306      	movs	r3, #6
 8003f10:	e00a      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f12:	2305      	movs	r3, #5
 8003f14:	e008      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f16:	2304      	movs	r3, #4
 8003f18:	e006      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e004      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e002      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <HAL_GPIO_Init+0x240>
 8003f26:	2300      	movs	r3, #0
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	f002 0203 	and.w	r2, r2, #3
 8003f2e:	0092      	lsls	r2, r2, #2
 8003f30:	4093      	lsls	r3, r2
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f38:	4935      	ldr	r1, [pc, #212]	; (8004010 <HAL_GPIO_Init+0x328>)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	089b      	lsrs	r3, r3, #2
 8003f3e:	3302      	adds	r3, #2
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f46:	4b3d      	ldr	r3, [pc, #244]	; (800403c <HAL_GPIO_Init+0x354>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f6a:	4a34      	ldr	r2, [pc, #208]	; (800403c <HAL_GPIO_Init+0x354>)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f70:	4b32      	ldr	r3, [pc, #200]	; (800403c <HAL_GPIO_Init+0x354>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <HAL_GPIO_Init+0x354>)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f9a:	4b28      	ldr	r3, [pc, #160]	; (800403c <HAL_GPIO_Init+0x354>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fbe:	4a1f      	ldr	r2, [pc, #124]	; (800403c <HAL_GPIO_Init+0x354>)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fc4:	4b1d      	ldr	r3, [pc, #116]	; (800403c <HAL_GPIO_Init+0x354>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fe8:	4a14      	ldr	r2, [pc, #80]	; (800403c <HAL_GPIO_Init+0x354>)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2b0f      	cmp	r3, #15
 8003ff8:	f67f ae86 	bls.w	8003d08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	3724      	adds	r7, #36	; 0x24
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800
 8004010:	40013800 	.word	0x40013800
 8004014:	40020000 	.word	0x40020000
 8004018:	40020400 	.word	0x40020400
 800401c:	40020800 	.word	0x40020800
 8004020:	40020c00 	.word	0x40020c00
 8004024:	40021000 	.word	0x40021000
 8004028:	40021400 	.word	0x40021400
 800402c:	40021800 	.word	0x40021800
 8004030:	40021c00 	.word	0x40021c00
 8004034:	40022000 	.word	0x40022000
 8004038:	40022400 	.word	0x40022400
 800403c:	40013c00 	.word	0x40013c00

08004040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	807b      	strh	r3, [r7, #2]
 800404c:	4613      	mov	r3, r2
 800404e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004050:	787b      	ldrb	r3, [r7, #1]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004056:	887a      	ldrh	r2, [r7, #2]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800405c:	e003      	b.n	8004066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800405e:	887b      	ldrh	r3, [r7, #2]
 8004060:	041a      	lsls	r2, r3, #16
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	619a      	str	r2, [r3, #24]
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004072:	b480      	push	{r7}
 8004074:	b085      	sub	sp, #20
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	460b      	mov	r3, r1
 800407c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004084:	887a      	ldrh	r2, [r7, #2]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4013      	ands	r3, r2
 800408a:	041a      	lsls	r2, r3, #16
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	43d9      	mvns	r1, r3
 8004090:	887b      	ldrh	r3, [r7, #2]
 8004092:	400b      	ands	r3, r1
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	619a      	str	r2, [r3, #24]
}
 800409a:	bf00      	nop
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e07f      	b.n	80041ba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fd fd46 	bl	8001b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2224      	movs	r2, #36	; 0x24
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0201 	bic.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004108:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d107      	bne.n	8004122 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800411e:	609a      	str	r2, [r3, #8]
 8004120:	e006      	b.n	8004130 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800412e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d104      	bne.n	8004142 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004140:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6859      	ldr	r1, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4b1d      	ldr	r3, [pc, #116]	; (80041c4 <HAL_I2C_Init+0x11c>)
 800414e:	430b      	orrs	r3, r1
 8004150:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004160:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69d9      	ldr	r1, [r3, #28]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1a      	ldr	r2, [r3, #32]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	02008000 	.word	0x02008000

080041c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	4608      	mov	r0, r1
 80041d2:	4611      	mov	r1, r2
 80041d4:	461a      	mov	r2, r3
 80041d6:	4603      	mov	r3, r0
 80041d8:	817b      	strh	r3, [r7, #10]
 80041da:	460b      	mov	r3, r1
 80041dc:	813b      	strh	r3, [r7, #8]
 80041de:	4613      	mov	r3, r2
 80041e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b20      	cmp	r3, #32
 80041ec:	f040 80f9 	bne.w	80043e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <HAL_I2C_Mem_Write+0x34>
 80041f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d105      	bne.n	8004208 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004202:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0ed      	b.n	80043e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <HAL_I2C_Mem_Write+0x4e>
 8004212:	2302      	movs	r3, #2
 8004214:	e0e6      	b.n	80043e4 <HAL_I2C_Mem_Write+0x21c>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800421e:	f7fe fef1 	bl	8003004 <HAL_GetTick>
 8004222:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	2319      	movs	r3, #25
 800422a:	2201      	movs	r2, #1
 800422c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f955 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0d1      	b.n	80043e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2221      	movs	r2, #33	; 0x21
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2240      	movs	r2, #64	; 0x40
 800424c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a3a      	ldr	r2, [r7, #32]
 800425a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004260:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004268:	88f8      	ldrh	r0, [r7, #6]
 800426a:	893a      	ldrh	r2, [r7, #8]
 800426c:	8979      	ldrh	r1, [r7, #10]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	4603      	mov	r3, r0
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f8b9 	bl	80043f0 <I2C_RequestMemoryWrite>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0a9      	b.n	80043e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	2bff      	cmp	r3, #255	; 0xff
 8004298:	d90e      	bls.n	80042b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	22ff      	movs	r2, #255	; 0xff
 800429e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	8979      	ldrh	r1, [r7, #10]
 80042a8:	2300      	movs	r3, #0
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 fab1 	bl	8004818 <I2C_TransferConfig>
 80042b6:	e00f      	b.n	80042d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	8979      	ldrh	r1, [r7, #10]
 80042ca:	2300      	movs	r3, #0
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 faa0 	bl	8004818 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f93f 	bl	8004560 <I2C_WaitOnTXISFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e07b      	b.n	80043e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	781a      	ldrb	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d034      	beq.n	8004390 <HAL_I2C_Mem_Write+0x1c8>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432a:	2b00      	cmp	r3, #0
 800432c:	d130      	bne.n	8004390 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	2200      	movs	r2, #0
 8004336:	2180      	movs	r1, #128	; 0x80
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f8d1 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e04d      	b.n	80043e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	2bff      	cmp	r3, #255	; 0xff
 8004350:	d90e      	bls.n	8004370 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	22ff      	movs	r2, #255	; 0xff
 8004356:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435c:	b2da      	uxtb	r2, r3
 800435e:	8979      	ldrh	r1, [r7, #10]
 8004360:	2300      	movs	r3, #0
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fa55 	bl	8004818 <I2C_TransferConfig>
 800436e:	e00f      	b.n	8004390 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437e:	b2da      	uxtb	r2, r3
 8004380:	8979      	ldrh	r1, [r7, #10]
 8004382:	2300      	movs	r3, #0
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 fa44 	bl	8004818 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d19e      	bne.n	80042d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 f91e 	bl	80045e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e01a      	b.n	80043e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2220      	movs	r2, #32
 80043b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6859      	ldr	r1, [r3, #4]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <HAL_I2C_Mem_Write+0x224>)
 80043c2:	400b      	ands	r3, r1
 80043c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	e000      	b.n	80043e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80043e2:	2302      	movs	r3, #2
  }
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	fe00e800 	.word	0xfe00e800

080043f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	4608      	mov	r0, r1
 80043fa:	4611      	mov	r1, r2
 80043fc:	461a      	mov	r2, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	817b      	strh	r3, [r7, #10]
 8004402:	460b      	mov	r3, r1
 8004404:	813b      	strh	r3, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	b2da      	uxtb	r2, r3
 800440e:	8979      	ldrh	r1, [r7, #10]
 8004410:	4b20      	ldr	r3, [pc, #128]	; (8004494 <I2C_RequestMemoryWrite+0xa4>)
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f9fd 	bl	8004818 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	69b9      	ldr	r1, [r7, #24]
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f89c 	bl	8004560 <I2C_WaitOnTXISFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e02c      	b.n	800448c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d105      	bne.n	8004444 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004438:	893b      	ldrh	r3, [r7, #8]
 800443a:	b2da      	uxtb	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	629a      	str	r2, [r3, #40]	; 0x28
 8004442:	e015      	b.n	8004470 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004444:	893b      	ldrh	r3, [r7, #8]
 8004446:	0a1b      	lsrs	r3, r3, #8
 8004448:	b29b      	uxth	r3, r3
 800444a:	b2da      	uxtb	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	69b9      	ldr	r1, [r7, #24]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f882 	bl	8004560 <I2C_WaitOnTXISFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e012      	b.n	800448c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004466:	893b      	ldrh	r3, [r7, #8]
 8004468:	b2da      	uxtb	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2200      	movs	r2, #0
 8004478:	2180      	movs	r1, #128	; 0x80
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 f830 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	80002000 	.word	0x80002000

08004498 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d103      	bne.n	80044b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2200      	movs	r2, #0
 80044b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d007      	beq.n	80044d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	619a      	str	r2, [r3, #24]
  }
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044f0:	e022      	b.n	8004538 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f8:	d01e      	beq.n	8004538 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fa:	f7fe fd83 	bl	8003004 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d302      	bcc.n	8004510 <I2C_WaitOnFlagUntilTimeout+0x30>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d113      	bne.n	8004538 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004514:	f043 0220 	orr.w	r2, r3, #32
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e00f      	b.n	8004558 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4013      	ands	r3, r2
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	429a      	cmp	r2, r3
 8004546:	bf0c      	ite	eq
 8004548:	2301      	moveq	r3, #1
 800454a:	2300      	movne	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	429a      	cmp	r2, r3
 8004554:	d0cd      	beq.n	80044f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800456c:	e02c      	b.n	80045c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f870 	bl	8004658 <I2C_IsErrorOccurred>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e02a      	b.n	80045d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004588:	d01e      	beq.n	80045c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458a:	f7fe fd3b 	bl	8003004 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	429a      	cmp	r2, r3
 8004598:	d302      	bcc.n	80045a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d113      	bne.n	80045c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a4:	f043 0220 	orr.w	r2, r3, #32
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e007      	b.n	80045d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d1cb      	bne.n	800456e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045ec:	e028      	b.n	8004640 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f830 	bl	8004658 <I2C_IsErrorOccurred>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e026      	b.n	8004650 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004602:	f7fe fcff 	bl	8003004 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	429a      	cmp	r2, r3
 8004610:	d302      	bcc.n	8004618 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d113      	bne.n	8004640 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461c:	f043 0220 	orr.w	r2, r3, #32
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e007      	b.n	8004650 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f003 0320 	and.w	r3, r3, #32
 800464a:	2b20      	cmp	r3, #32
 800464c:	d1cf      	bne.n	80045ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08a      	sub	sp, #40	; 0x28
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b00      	cmp	r3, #0
 8004682:	d068      	beq.n	8004756 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2210      	movs	r2, #16
 800468a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800468c:	e049      	b.n	8004722 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004694:	d045      	beq.n	8004722 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004696:	f7fe fcb5 	bl	8003004 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d302      	bcc.n	80046ac <I2C_IsErrorOccurred+0x54>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d13a      	bne.n	8004722 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ce:	d121      	bne.n	8004714 <I2C_IsErrorOccurred+0xbc>
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046d6:	d01d      	beq.n	8004714 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80046d8:	7cfb      	ldrb	r3, [r7, #19]
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d01a      	beq.n	8004714 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046ee:	f7fe fc89 	bl	8003004 <HAL_GetTick>
 80046f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046f4:	e00e      	b.n	8004714 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046f6:	f7fe fc85 	bl	8003004 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b19      	cmp	r3, #25
 8004702:	d907      	bls.n	8004714 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	f043 0320 	orr.w	r3, r3, #32
 800470a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004712:	e006      	b.n	8004722 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b20      	cmp	r3, #32
 8004720:	d1e9      	bne.n	80046f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b20      	cmp	r3, #32
 800472e:	d003      	beq.n	8004738 <I2C_IsErrorOccurred+0xe0>
 8004730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0aa      	beq.n	800468e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800473c:	2b00      	cmp	r3, #0
 800473e:	d103      	bne.n	8004748 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2220      	movs	r2, #32
 8004746:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	f043 0304 	orr.w	r3, r3, #4
 800474e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00b      	beq.n	8004780 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004778:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00b      	beq.n	80047a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	f043 0308 	orr.w	r3, r3, #8
 8004790:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800479a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00b      	beq.n	80047c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	f043 0302 	orr.w	r3, r3, #2
 80047b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80047c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01c      	beq.n	8004806 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f7ff fe63 	bl	8004498 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6859      	ldr	r1, [r3, #4]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <I2C_IsErrorOccurred+0x1bc>)
 80047de:	400b      	ands	r3, r1
 80047e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	431a      	orrs	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800480a:	4618      	mov	r0, r3
 800480c:	3728      	adds	r7, #40	; 0x28
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	fe00e800 	.word	0xfe00e800

08004818 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	460b      	mov	r3, r1
 8004824:	817b      	strh	r3, [r7, #10]
 8004826:	4613      	mov	r3, r2
 8004828:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800482a:	897b      	ldrh	r3, [r7, #10]
 800482c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004830:	7a7b      	ldrb	r3, [r7, #9]
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004838:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	4313      	orrs	r3, r2
 8004842:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004846:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	0d5b      	lsrs	r3, r3, #21
 8004852:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <I2C_TransferConfig+0x60>)
 8004858:	430b      	orrs	r3, r1
 800485a:	43db      	mvns	r3, r3
 800485c:	ea02 0103 	and.w	r1, r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800486a:	bf00      	nop
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	03ff63ff 	.word	0x03ff63ff

0800487c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b20      	cmp	r3, #32
 8004890:	d138      	bne.n	8004904 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800489c:	2302      	movs	r3, #2
 800489e:	e032      	b.n	8004906 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2224      	movs	r2, #36	; 0x24
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0201 	bic.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	e000      	b.n	8004906 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004904:	2302      	movs	r3, #2
  }
}
 8004906:	4618      	mov	r0, r3
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004912:	b480      	push	{r7}
 8004914:	b085      	sub	sp, #20
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b20      	cmp	r3, #32
 8004926:	d139      	bne.n	800499c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004932:	2302      	movs	r3, #2
 8004934:	e033      	b.n	800499e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2224      	movs	r2, #36	; 0x24
 8004942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0201 	bic.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004964:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	021b      	lsls	r3, r3, #8
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	e000      	b.n	800499e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800499c:	2302      	movs	r3, #2
  }
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80049b6:	4b23      	ldr	r3, [pc, #140]	; (8004a44 <HAL_PWREx_EnableOverDrive+0x98>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	4a22      	ldr	r2, [pc, #136]	; (8004a44 <HAL_PWREx_EnableOverDrive+0x98>)
 80049bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c0:	6413      	str	r3, [r2, #64]	; 0x40
 80049c2:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <HAL_PWREx_EnableOverDrive+0x98>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80049ce:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049da:	f7fe fb13 	bl	8003004 <HAL_GetTick>
 80049de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049e0:	e009      	b.n	80049f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049e2:	f7fe fb0f 	bl	8003004 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049f0:	d901      	bls.n	80049f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e022      	b.n	8004a3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049f6:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a02:	d1ee      	bne.n	80049e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a04:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a0f      	ldr	r2, [pc, #60]	; (8004a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a10:	f7fe faf8 	bl	8003004 <HAL_GetTick>
 8004a14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a16:	e009      	b.n	8004a2c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a18:	f7fe faf4 	bl	8003004 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a26:	d901      	bls.n	8004a2c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e007      	b.n	8004a3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a38:	d1ee      	bne.n	8004a18 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40023800 	.word	0x40023800
 8004a48:	40007000 	.word	0x40007000

08004a4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004a54:	2300      	movs	r3, #0
 8004a56:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e29b      	b.n	8004f9a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 8087 	beq.w	8004b7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a70:	4b96      	ldr	r3, [pc, #600]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d00c      	beq.n	8004a96 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7c:	4b93      	ldr	r3, [pc, #588]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d112      	bne.n	8004aae <HAL_RCC_OscConfig+0x62>
 8004a88:	4b90      	ldr	r3, [pc, #576]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a94:	d10b      	bne.n	8004aae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a96:	4b8d      	ldr	r3, [pc, #564]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d06c      	beq.n	8004b7c <HAL_RCC_OscConfig+0x130>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d168      	bne.n	8004b7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e275      	b.n	8004f9a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab6:	d106      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x7a>
 8004ab8:	4b84      	ldr	r3, [pc, #528]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a83      	ldr	r2, [pc, #524]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	e02e      	b.n	8004b24 <HAL_RCC_OscConfig+0xd8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10c      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x9c>
 8004ace:	4b7f      	ldr	r3, [pc, #508]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a7e      	ldr	r2, [pc, #504]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	4b7c      	ldr	r3, [pc, #496]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a7b      	ldr	r2, [pc, #492]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e01d      	b.n	8004b24 <HAL_RCC_OscConfig+0xd8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCC_OscConfig+0xc0>
 8004af2:	4b76      	ldr	r3, [pc, #472]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a75      	ldr	r2, [pc, #468]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	4b73      	ldr	r3, [pc, #460]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a72      	ldr	r2, [pc, #456]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e00b      	b.n	8004b24 <HAL_RCC_OscConfig+0xd8>
 8004b0c:	4b6f      	ldr	r3, [pc, #444]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a6e      	ldr	r2, [pc, #440]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	4b6c      	ldr	r3, [pc, #432]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a6b      	ldr	r2, [pc, #428]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d013      	beq.n	8004b54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fe fa6a 	bl	8003004 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b34:	f7fe fa66 	bl	8003004 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b64      	cmp	r3, #100	; 0x64
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e229      	b.n	8004f9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b46:	4b61      	ldr	r3, [pc, #388]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0xe8>
 8004b52:	e014      	b.n	8004b7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fe fa56 	bl	8003004 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7fe fa52 	bl	8003004 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	; 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e215      	b.n	8004f9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6e:	4b57      	ldr	r3, [pc, #348]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x110>
 8004b7a:	e000      	b.n	8004b7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d069      	beq.n	8004c5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b8a:	4b50      	ldr	r3, [pc, #320]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b96:	4b4d      	ldr	r3, [pc, #308]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d11c      	bne.n	8004bdc <HAL_RCC_OscConfig+0x190>
 8004ba2:	4b4a      	ldr	r3, [pc, #296]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d116      	bne.n	8004bdc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bae:	4b47      	ldr	r3, [pc, #284]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x17a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d001      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e1e9      	b.n	8004f9a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc6:	4b41      	ldr	r3, [pc, #260]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	493d      	ldr	r1, [pc, #244]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bda:	e040      	b.n	8004c5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d023      	beq.n	8004c2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004be4:	4b39      	ldr	r3, [pc, #228]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a38      	ldr	r2, [pc, #224]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fe fa08 	bl	8003004 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf8:	f7fe fa04 	bl	8003004 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e1c7      	b.n	8004f9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c0a:	4b30      	ldr	r3, [pc, #192]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c16:	4b2d      	ldr	r3, [pc, #180]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	4929      	ldr	r1, [pc, #164]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]
 8004c2a:	e018      	b.n	8004c5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c2c:	4b27      	ldr	r3, [pc, #156]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a26      	ldr	r2, [pc, #152]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c32:	f023 0301 	bic.w	r3, r3, #1
 8004c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c38:	f7fe f9e4 	bl	8003004 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c40:	f7fe f9e0 	bl	8003004 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e1a3      	b.n	8004f9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c52:	4b1e      	ldr	r3, [pc, #120]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d038      	beq.n	8004cdc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d019      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c72:	4b16      	ldr	r3, [pc, #88]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c76:	4a15      	ldr	r2, [pc, #84]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7e:	f7fe f9c1 	bl	8003004 <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c86:	f7fe f9bd 	bl	8003004 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e180      	b.n	8004f9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c98:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f0      	beq.n	8004c86 <HAL_RCC_OscConfig+0x23a>
 8004ca4:	e01a      	b.n	8004cdc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ca6:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004caa:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004cac:	f023 0301 	bic.w	r3, r3, #1
 8004cb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb2:	f7fe f9a7 	bl	8003004 <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb8:	e00a      	b.n	8004cd0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cba:	f7fe f9a3 	bl	8003004 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d903      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e166      	b.n	8004f9a <HAL_RCC_OscConfig+0x54e>
 8004ccc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd0:	4b92      	ldr	r3, [pc, #584]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1ee      	bne.n	8004cba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 80a4 	beq.w	8004e32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cea:	4b8c      	ldr	r3, [pc, #560]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10d      	bne.n	8004d12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cf6:	4b89      	ldr	r3, [pc, #548]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	4a88      	ldr	r2, [pc, #544]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d00:	6413      	str	r3, [r2, #64]	; 0x40
 8004d02:	4b86      	ldr	r3, [pc, #536]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	60bb      	str	r3, [r7, #8]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d12:	4b83      	ldr	r3, [pc, #524]	; (8004f20 <HAL_RCC_OscConfig+0x4d4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d118      	bne.n	8004d50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d1e:	4b80      	ldr	r3, [pc, #512]	; (8004f20 <HAL_RCC_OscConfig+0x4d4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a7f      	ldr	r2, [pc, #508]	; (8004f20 <HAL_RCC_OscConfig+0x4d4>)
 8004d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d2a:	f7fe f96b 	bl	8003004 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d32:	f7fe f967 	bl	8003004 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b64      	cmp	r3, #100	; 0x64
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e12a      	b.n	8004f9a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d44:	4b76      	ldr	r3, [pc, #472]	; (8004f20 <HAL_RCC_OscConfig+0x4d4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f0      	beq.n	8004d32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d106      	bne.n	8004d66 <HAL_RCC_OscConfig+0x31a>
 8004d58:	4b70      	ldr	r3, [pc, #448]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5c:	4a6f      	ldr	r2, [pc, #444]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	6713      	str	r3, [r2, #112]	; 0x70
 8004d64:	e02d      	b.n	8004dc2 <HAL_RCC_OscConfig+0x376>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10c      	bne.n	8004d88 <HAL_RCC_OscConfig+0x33c>
 8004d6e:	4b6b      	ldr	r3, [pc, #428]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d72:	4a6a      	ldr	r2, [pc, #424]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004d74:	f023 0301 	bic.w	r3, r3, #1
 8004d78:	6713      	str	r3, [r2, #112]	; 0x70
 8004d7a:	4b68      	ldr	r3, [pc, #416]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	4a67      	ldr	r2, [pc, #412]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004d80:	f023 0304 	bic.w	r3, r3, #4
 8004d84:	6713      	str	r3, [r2, #112]	; 0x70
 8004d86:	e01c      	b.n	8004dc2 <HAL_RCC_OscConfig+0x376>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b05      	cmp	r3, #5
 8004d8e:	d10c      	bne.n	8004daa <HAL_RCC_OscConfig+0x35e>
 8004d90:	4b62      	ldr	r3, [pc, #392]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d94:	4a61      	ldr	r2, [pc, #388]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004d96:	f043 0304 	orr.w	r3, r3, #4
 8004d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d9c:	4b5f      	ldr	r3, [pc, #380]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da0:	4a5e      	ldr	r2, [pc, #376]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004da2:	f043 0301 	orr.w	r3, r3, #1
 8004da6:	6713      	str	r3, [r2, #112]	; 0x70
 8004da8:	e00b      	b.n	8004dc2 <HAL_RCC_OscConfig+0x376>
 8004daa:	4b5c      	ldr	r3, [pc, #368]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	4a5b      	ldr	r2, [pc, #364]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	6713      	str	r3, [r2, #112]	; 0x70
 8004db6:	4b59      	ldr	r3, [pc, #356]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dba:	4a58      	ldr	r2, [pc, #352]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004dbc:	f023 0304 	bic.w	r3, r3, #4
 8004dc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d015      	beq.n	8004df6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dca:	f7fe f91b 	bl	8003004 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd0:	e00a      	b.n	8004de8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd2:	f7fe f917 	bl	8003004 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e0d8      	b.n	8004f9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de8:	4b4c      	ldr	r3, [pc, #304]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0ee      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x386>
 8004df4:	e014      	b.n	8004e20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df6:	f7fe f905 	bl	8003004 <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfe:	f7fe f901 	bl	8003004 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e0c2      	b.n	8004f9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e14:	4b41      	ldr	r3, [pc, #260]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1ee      	bne.n	8004dfe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e20:	7dfb      	ldrb	r3, [r7, #23]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d105      	bne.n	8004e32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e26:	4b3d      	ldr	r3, [pc, #244]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	4a3c      	ldr	r2, [pc, #240]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 80ae 	beq.w	8004f98 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e3c:	4b37      	ldr	r3, [pc, #220]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 030c 	and.w	r3, r3, #12
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d06d      	beq.n	8004f24 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d14b      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e50:	4b32      	ldr	r3, [pc, #200]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a31      	ldr	r2, [pc, #196]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fe f8d2 	bl	8003004 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e64:	f7fe f8ce 	bl	8003004 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e091      	b.n	8004f9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e76:	4b29      	ldr	r3, [pc, #164]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69da      	ldr	r2, [r3, #28]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	019b      	lsls	r3, r3, #6
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	041b      	lsls	r3, r3, #16
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	061b      	lsls	r3, r3, #24
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	071b      	lsls	r3, r3, #28
 8004eae:	491b      	ldr	r1, [pc, #108]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eb4:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a18      	ldr	r2, [pc, #96]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fe f8a0 	bl	8003004 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec8:	f7fe f89c 	bl	8003004 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e05f      	b.n	8004f9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eda:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x47c>
 8004ee6:	e057      	b.n	8004f98 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a0b      	ldr	r2, [pc, #44]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7fe f886 	bl	8003004 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efc:	f7fe f882 	bl	8003004 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e045      	b.n	8004f9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0e:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0x4b0>
 8004f1a:	e03d      	b.n	8004f98 <HAL_RCC_OscConfig+0x54c>
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f24:	4b1f      	ldr	r3, [pc, #124]	; (8004fa4 <HAL_RCC_OscConfig+0x558>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d030      	beq.n	8004f94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d129      	bne.n	8004f94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d122      	bne.n	8004f94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f54:	4013      	ands	r3, r2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f5a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d119      	bne.n	8004f94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6a:	085b      	lsrs	r3, r3, #1
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d10f      	bne.n	8004f94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d107      	bne.n	8004f94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d001      	beq.n	8004f98 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e000      	b.n	8004f9a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40023800 	.word	0x40023800

08004fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0d0      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc0:	4b6a      	ldr	r3, [pc, #424]	; (800516c <HAL_RCC_ClockConfig+0x1c4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d910      	bls.n	8004ff0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	4b67      	ldr	r3, [pc, #412]	; (800516c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f023 020f 	bic.w	r2, r3, #15
 8004fd6:	4965      	ldr	r1, [pc, #404]	; (800516c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fde:	4b63      	ldr	r3, [pc, #396]	; (800516c <HAL_RCC_ClockConfig+0x1c4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d001      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0b8      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d020      	beq.n	800503e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005008:	4b59      	ldr	r3, [pc, #356]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	4a58      	ldr	r2, [pc, #352]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 800500e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005012:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005020:	4b53      	ldr	r3, [pc, #332]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	4a52      	ldr	r2, [pc, #328]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 8005026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800502a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800502c:	4b50      	ldr	r3, [pc, #320]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	494d      	ldr	r1, [pc, #308]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 800503a:	4313      	orrs	r3, r2
 800503c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d040      	beq.n	80050cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d107      	bne.n	8005062 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005052:	4b47      	ldr	r3, [pc, #284]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d115      	bne.n	800508a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e07f      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d107      	bne.n	800507a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800506a:	4b41      	ldr	r3, [pc, #260]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e073      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507a:	4b3d      	ldr	r3, [pc, #244]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e06b      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800508a:	4b39      	ldr	r3, [pc, #228]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f023 0203 	bic.w	r2, r3, #3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	4936      	ldr	r1, [pc, #216]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 8005098:	4313      	orrs	r3, r2
 800509a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800509c:	f7fd ffb2 	bl	8003004 <HAL_GetTick>
 80050a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a2:	e00a      	b.n	80050ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a4:	f7fd ffae 	bl	8003004 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e053      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ba:	4b2d      	ldr	r3, [pc, #180]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 020c 	and.w	r2, r3, #12
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d1eb      	bne.n	80050a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050cc:	4b27      	ldr	r3, [pc, #156]	; (800516c <HAL_RCC_ClockConfig+0x1c4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d210      	bcs.n	80050fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050da:	4b24      	ldr	r3, [pc, #144]	; (800516c <HAL_RCC_ClockConfig+0x1c4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f023 020f 	bic.w	r2, r3, #15
 80050e2:	4922      	ldr	r1, [pc, #136]	; (800516c <HAL_RCC_ClockConfig+0x1c4>)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ea:	4b20      	ldr	r3, [pc, #128]	; (800516c <HAL_RCC_ClockConfig+0x1c4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d001      	beq.n	80050fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e032      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d008      	beq.n	800511a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005108:	4b19      	ldr	r3, [pc, #100]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4916      	ldr	r1, [pc, #88]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 8005116:	4313      	orrs	r3, r2
 8005118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d009      	beq.n	800513a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005126:	4b12      	ldr	r3, [pc, #72]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	490e      	ldr	r1, [pc, #56]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800513a:	f000 f821 	bl	8005180 <HAL_RCC_GetSysClockFreq>
 800513e:	4602      	mov	r2, r0
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <HAL_RCC_ClockConfig+0x1c8>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	091b      	lsrs	r3, r3, #4
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	490a      	ldr	r1, [pc, #40]	; (8005174 <HAL_RCC_ClockConfig+0x1cc>)
 800514c:	5ccb      	ldrb	r3, [r1, r3]
 800514e:	fa22 f303 	lsr.w	r3, r2, r3
 8005152:	4a09      	ldr	r2, [pc, #36]	; (8005178 <HAL_RCC_ClockConfig+0x1d0>)
 8005154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005156:	4b09      	ldr	r3, [pc, #36]	; (800517c <HAL_RCC_ClockConfig+0x1d4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f7fd f966 	bl	800242c <HAL_InitTick>

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40023c00 	.word	0x40023c00
 8005170:	40023800 	.word	0x40023800
 8005174:	0800e900 	.word	0x0800e900
 8005178:	20000054 	.word	0x20000054
 800517c:	20000058 	.word	0x20000058

08005180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005184:	b094      	sub	sp, #80	; 0x50
 8005186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	647b      	str	r3, [r7, #68]	; 0x44
 800518c:	2300      	movs	r3, #0
 800518e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005190:	2300      	movs	r3, #0
 8005192:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005198:	4b79      	ldr	r3, [pc, #484]	; (8005380 <HAL_RCC_GetSysClockFreq+0x200>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 030c 	and.w	r3, r3, #12
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d00d      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0x40>
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	f200 80e1 	bhi.w	800536c <HAL_RCC_GetSysClockFreq+0x1ec>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <HAL_RCC_GetSysClockFreq+0x34>
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d003      	beq.n	80051ba <HAL_RCC_GetSysClockFreq+0x3a>
 80051b2:	e0db      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051b4:	4b73      	ldr	r3, [pc, #460]	; (8005384 <HAL_RCC_GetSysClockFreq+0x204>)
 80051b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051b8:	e0db      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ba:	4b73      	ldr	r3, [pc, #460]	; (8005388 <HAL_RCC_GetSysClockFreq+0x208>)
 80051bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051be:	e0d8      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051c0:	4b6f      	ldr	r3, [pc, #444]	; (8005380 <HAL_RCC_GetSysClockFreq+0x200>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051c8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80051ca:	4b6d      	ldr	r3, [pc, #436]	; (8005380 <HAL_RCC_GetSysClockFreq+0x200>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d063      	beq.n	800529e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051d6:	4b6a      	ldr	r3, [pc, #424]	; (8005380 <HAL_RCC_GetSysClockFreq+0x200>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	099b      	lsrs	r3, r3, #6
 80051dc:	2200      	movs	r2, #0
 80051de:	63bb      	str	r3, [r7, #56]	; 0x38
 80051e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e8:	633b      	str	r3, [r7, #48]	; 0x30
 80051ea:	2300      	movs	r3, #0
 80051ec:	637b      	str	r3, [r7, #52]	; 0x34
 80051ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051f2:	4622      	mov	r2, r4
 80051f4:	462b      	mov	r3, r5
 80051f6:	f04f 0000 	mov.w	r0, #0
 80051fa:	f04f 0100 	mov.w	r1, #0
 80051fe:	0159      	lsls	r1, r3, #5
 8005200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005204:	0150      	lsls	r0, r2, #5
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4621      	mov	r1, r4
 800520c:	1a51      	subs	r1, r2, r1
 800520e:	6139      	str	r1, [r7, #16]
 8005210:	4629      	mov	r1, r5
 8005212:	eb63 0301 	sbc.w	r3, r3, r1
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005224:	4659      	mov	r1, fp
 8005226:	018b      	lsls	r3, r1, #6
 8005228:	4651      	mov	r1, sl
 800522a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800522e:	4651      	mov	r1, sl
 8005230:	018a      	lsls	r2, r1, #6
 8005232:	4651      	mov	r1, sl
 8005234:	ebb2 0801 	subs.w	r8, r2, r1
 8005238:	4659      	mov	r1, fp
 800523a:	eb63 0901 	sbc.w	r9, r3, r1
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800524a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800524e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005252:	4690      	mov	r8, r2
 8005254:	4699      	mov	r9, r3
 8005256:	4623      	mov	r3, r4
 8005258:	eb18 0303 	adds.w	r3, r8, r3
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	462b      	mov	r3, r5
 8005260:	eb49 0303 	adc.w	r3, r9, r3
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005272:	4629      	mov	r1, r5
 8005274:	024b      	lsls	r3, r1, #9
 8005276:	4621      	mov	r1, r4
 8005278:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800527c:	4621      	mov	r1, r4
 800527e:	024a      	lsls	r2, r1, #9
 8005280:	4610      	mov	r0, r2
 8005282:	4619      	mov	r1, r3
 8005284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005286:	2200      	movs	r2, #0
 8005288:	62bb      	str	r3, [r7, #40]	; 0x28
 800528a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800528c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005290:	f7fb f826 	bl	80002e0 <__aeabi_uldivmod>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4613      	mov	r3, r2
 800529a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800529c:	e058      	b.n	8005350 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800529e:	4b38      	ldr	r3, [pc, #224]	; (8005380 <HAL_RCC_GetSysClockFreq+0x200>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	099b      	lsrs	r3, r3, #6
 80052a4:	2200      	movs	r2, #0
 80052a6:	4618      	mov	r0, r3
 80052a8:	4611      	mov	r1, r2
 80052aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052ae:	623b      	str	r3, [r7, #32]
 80052b0:	2300      	movs	r3, #0
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
 80052b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052b8:	4642      	mov	r2, r8
 80052ba:	464b      	mov	r3, r9
 80052bc:	f04f 0000 	mov.w	r0, #0
 80052c0:	f04f 0100 	mov.w	r1, #0
 80052c4:	0159      	lsls	r1, r3, #5
 80052c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052ca:	0150      	lsls	r0, r2, #5
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4641      	mov	r1, r8
 80052d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80052d6:	4649      	mov	r1, r9
 80052d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052f0:	ebb2 040a 	subs.w	r4, r2, sl
 80052f4:	eb63 050b 	sbc.w	r5, r3, fp
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	00eb      	lsls	r3, r5, #3
 8005302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005306:	00e2      	lsls	r2, r4, #3
 8005308:	4614      	mov	r4, r2
 800530a:	461d      	mov	r5, r3
 800530c:	4643      	mov	r3, r8
 800530e:	18e3      	adds	r3, r4, r3
 8005310:	603b      	str	r3, [r7, #0]
 8005312:	464b      	mov	r3, r9
 8005314:	eb45 0303 	adc.w	r3, r5, r3
 8005318:	607b      	str	r3, [r7, #4]
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005326:	4629      	mov	r1, r5
 8005328:	028b      	lsls	r3, r1, #10
 800532a:	4621      	mov	r1, r4
 800532c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005330:	4621      	mov	r1, r4
 8005332:	028a      	lsls	r2, r1, #10
 8005334:	4610      	mov	r0, r2
 8005336:	4619      	mov	r1, r3
 8005338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533a:	2200      	movs	r2, #0
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	61fa      	str	r2, [r7, #28]
 8005340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005344:	f7fa ffcc 	bl	80002e0 <__aeabi_uldivmod>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4613      	mov	r3, r2
 800534e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005350:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <HAL_RCC_GetSysClockFreq+0x200>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	0c1b      	lsrs	r3, r3, #16
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	3301      	adds	r3, #1
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005360:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005364:	fbb2 f3f3 	udiv	r3, r2, r3
 8005368:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800536a:	e002      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800536c:	4b05      	ldr	r3, [pc, #20]	; (8005384 <HAL_RCC_GetSysClockFreq+0x204>)
 800536e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005374:	4618      	mov	r0, r3
 8005376:	3750      	adds	r7, #80	; 0x50
 8005378:	46bd      	mov	sp, r7
 800537a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800537e:	bf00      	nop
 8005380:	40023800 	.word	0x40023800
 8005384:	00f42400 	.word	0x00f42400
 8005388:	007a1200 	.word	0x007a1200

0800538c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005390:	4b03      	ldr	r3, [pc, #12]	; (80053a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005392:	681b      	ldr	r3, [r3, #0]
}
 8005394:	4618      	mov	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000054 	.word	0x20000054

080053a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053a8:	f7ff fff0 	bl	800538c <HAL_RCC_GetHCLKFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	0a9b      	lsrs	r3, r3, #10
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	4903      	ldr	r1, [pc, #12]	; (80053c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40023800 	.word	0x40023800
 80053c8:	0800e910 	.word	0x0800e910

080053cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053d0:	f7ff ffdc 	bl	800538c <HAL_RCC_GetHCLKFreq>
 80053d4:	4602      	mov	r2, r0
 80053d6:	4b05      	ldr	r3, [pc, #20]	; (80053ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	0b5b      	lsrs	r3, r3, #13
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	4903      	ldr	r1, [pc, #12]	; (80053f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053e2:	5ccb      	ldrb	r3, [r1, r3]
 80053e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40023800 	.word	0x40023800
 80053f0:	0800e910 	.word	0x0800e910

080053f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	220f      	movs	r2, #15
 8005402:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005404:	4b12      	ldr	r3, [pc, #72]	; (8005450 <HAL_RCC_GetClockConfig+0x5c>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 0203 	and.w	r2, r3, #3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005410:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <HAL_RCC_GetClockConfig+0x5c>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800541c:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <HAL_RCC_GetClockConfig+0x5c>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005428:	4b09      	ldr	r3, [pc, #36]	; (8005450 <HAL_RCC_GetClockConfig+0x5c>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	08db      	lsrs	r3, r3, #3
 800542e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005436:	4b07      	ldr	r3, [pc, #28]	; (8005454 <HAL_RCC_GetClockConfig+0x60>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 020f 	and.w	r2, r3, #15
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	601a      	str	r2, [r3, #0]
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40023800 	.word	0x40023800
 8005454:	40023c00 	.word	0x40023c00

08005458 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d012      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005480:	4b69      	ldr	r3, [pc, #420]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	4a68      	ldr	r2, [pc, #416]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005486:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800548a:	6093      	str	r3, [r2, #8]
 800548c:	4b66      	ldr	r3, [pc, #408]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005494:	4964      	ldr	r1, [pc, #400]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005496:	4313      	orrs	r3, r2
 8005498:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80054a2:	2301      	movs	r3, #1
 80054a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d017      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054b2:	4b5d      	ldr	r3, [pc, #372]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c0:	4959      	ldr	r1, [pc, #356]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d0:	d101      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80054d2:	2301      	movs	r3, #1
 80054d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80054de:	2301      	movs	r3, #1
 80054e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d017      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054ee:	4b4e      	ldr	r3, [pc, #312]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	494a      	ldr	r1, [pc, #296]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800550c:	d101      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800550e:	2301      	movs	r3, #1
 8005510:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800551a:	2301      	movs	r3, #1
 800551c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800552a:	2301      	movs	r3, #1
 800552c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 808b 	beq.w	8005652 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800553c:	4b3a      	ldr	r3, [pc, #232]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005540:	4a39      	ldr	r2, [pc, #228]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005546:	6413      	str	r3, [r2, #64]	; 0x40
 8005548:	4b37      	ldr	r3, [pc, #220]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005554:	4b35      	ldr	r3, [pc, #212]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a34      	ldr	r2, [pc, #208]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800555a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005560:	f7fd fd50 	bl	8003004 <HAL_GetTick>
 8005564:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005566:	e008      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005568:	f7fd fd4c 	bl	8003004 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b64      	cmp	r3, #100	; 0x64
 8005574:	d901      	bls.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e38f      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800557a:	4b2c      	ldr	r3, [pc, #176]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0f0      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005586:	4b28      	ldr	r3, [pc, #160]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d035      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d02e      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055a4:	4b20      	ldr	r3, [pc, #128]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055ae:	4b1e      	ldr	r3, [pc, #120]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b2:	4a1d      	ldr	r2, [pc, #116]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055ba:	4b1b      	ldr	r3, [pc, #108]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	4a1a      	ldr	r2, [pc, #104]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80055c6:	4a18      	ldr	r2, [pc, #96]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055cc:	4b16      	ldr	r3, [pc, #88]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d114      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d8:	f7fd fd14 	bl	8003004 <HAL_GetTick>
 80055dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055de:	e00a      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e0:	f7fd fd10 	bl	8003004 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e351      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f6:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0ee      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800560e:	d111      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005610:	4b05      	ldr	r3, [pc, #20]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800561c:	4b04      	ldr	r3, [pc, #16]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800561e:	400b      	ands	r3, r1
 8005620:	4901      	ldr	r1, [pc, #4]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005622:	4313      	orrs	r3, r2
 8005624:	608b      	str	r3, [r1, #8]
 8005626:	e00b      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005628:	40023800 	.word	0x40023800
 800562c:	40007000 	.word	0x40007000
 8005630:	0ffffcff 	.word	0x0ffffcff
 8005634:	4bac      	ldr	r3, [pc, #688]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	4aab      	ldr	r2, [pc, #684]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800563a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800563e:	6093      	str	r3, [r2, #8]
 8005640:	4ba9      	ldr	r3, [pc, #676]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005642:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800564c:	49a6      	ldr	r1, [pc, #664]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800564e:	4313      	orrs	r3, r2
 8005650:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0310 	and.w	r3, r3, #16
 800565a:	2b00      	cmp	r3, #0
 800565c:	d010      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800565e:	4ba2      	ldr	r3, [pc, #648]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005664:	4aa0      	ldr	r2, [pc, #640]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800566a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800566e:	4b9e      	ldr	r3, [pc, #632]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005670:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	499b      	ldr	r1, [pc, #620]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800568c:	4b96      	ldr	r3, [pc, #600]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800568e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005692:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800569a:	4993      	ldr	r1, [pc, #588]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800569c:	4313      	orrs	r3, r2
 800569e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056ae:	4b8e      	ldr	r3, [pc, #568]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056bc:	498a      	ldr	r1, [pc, #552]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056d0:	4b85      	ldr	r3, [pc, #532]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056de:	4982      	ldr	r1, [pc, #520]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056f2:	4b7d      	ldr	r3, [pc, #500]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005700:	4979      	ldr	r1, [pc, #484]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005714:	4b74      	ldr	r3, [pc, #464]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571a:	f023 0203 	bic.w	r2, r3, #3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	4971      	ldr	r1, [pc, #452]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005736:	4b6c      	ldr	r3, [pc, #432]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573c:	f023 020c 	bic.w	r2, r3, #12
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005744:	4968      	ldr	r1, [pc, #416]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005746:	4313      	orrs	r3, r2
 8005748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005758:	4b63      	ldr	r3, [pc, #396]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005766:	4960      	ldr	r1, [pc, #384]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005768:	4313      	orrs	r3, r2
 800576a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800577a:	4b5b      	ldr	r3, [pc, #364]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800577c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005780:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005788:	4957      	ldr	r1, [pc, #348]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800578a:	4313      	orrs	r3, r2
 800578c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800579c:	4b52      	ldr	r3, [pc, #328]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057aa:	494f      	ldr	r1, [pc, #316]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80057be:	4b4a      	ldr	r3, [pc, #296]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057cc:	4946      	ldr	r1, [pc, #280]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80057e0:	4b41      	ldr	r3, [pc, #260]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ee:	493e      	ldr	r1, [pc, #248]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005802:	4b39      	ldr	r3, [pc, #228]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005808:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005810:	4935      	ldr	r1, [pc, #212]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005824:	4b30      	ldr	r3, [pc, #192]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005832:	492d      	ldr	r1, [pc, #180]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d011      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005846:	4b28      	ldr	r3, [pc, #160]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005854:	4924      	ldr	r1, [pc, #144]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005864:	d101      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005866:	2301      	movs	r3, #1
 8005868:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005876:	2301      	movs	r3, #1
 8005878:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005886:	4b18      	ldr	r3, [pc, #96]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005894:	4914      	ldr	r1, [pc, #80]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00b      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058a8:	4b0f      	ldr	r3, [pc, #60]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058b8:	490b      	ldr	r1, [pc, #44]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00f      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80058cc:	4b06      	ldr	r3, [pc, #24]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058dc:	4902      	ldr	r1, [pc, #8]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058e4:	e002      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x494>
 80058e6:	bf00      	nop
 80058e8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00b      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058f8:	4b8a      	ldr	r3, [pc, #552]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005908:	4986      	ldr	r1, [pc, #536]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00b      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800591c:	4b81      	ldr	r3, [pc, #516]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800591e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005922:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800592c:	497d      	ldr	r1, [pc, #500]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d006      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 80d6 	beq.w	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005948:	4b76      	ldr	r3, [pc, #472]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a75      	ldr	r2, [pc, #468]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800594e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005954:	f7fd fb56 	bl	8003004 <HAL_GetTick>
 8005958:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800595a:	e008      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800595c:	f7fd fb52 	bl	8003004 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b64      	cmp	r3, #100	; 0x64
 8005968:	d901      	bls.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e195      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800596e:	4b6d      	ldr	r3, [pc, #436]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1f0      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d021      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598a:	2b00      	cmp	r3, #0
 800598c:	d11d      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800598e:	4b65      	ldr	r3, [pc, #404]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005994:	0c1b      	lsrs	r3, r3, #16
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800599c:	4b61      	ldr	r3, [pc, #388]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800599e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059a2:	0e1b      	lsrs	r3, r3, #24
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	019a      	lsls	r2, r3, #6
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	041b      	lsls	r3, r3, #16
 80059b4:	431a      	orrs	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	061b      	lsls	r3, r3, #24
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	071b      	lsls	r3, r3, #28
 80059c2:	4958      	ldr	r1, [pc, #352]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d004      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059de:	d00a      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d02e      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059f4:	d129      	bne.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80059f6:	4b4b      	ldr	r3, [pc, #300]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059fc:	0c1b      	lsrs	r3, r3, #16
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a04:	4b47      	ldr	r3, [pc, #284]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a0a:	0f1b      	lsrs	r3, r3, #28
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	019a      	lsls	r2, r3, #6
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	041b      	lsls	r3, r3, #16
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	061b      	lsls	r3, r3, #24
 8005a24:	431a      	orrs	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	071b      	lsls	r3, r3, #28
 8005a2a:	493e      	ldr	r1, [pc, #248]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a32:	4b3c      	ldr	r3, [pc, #240]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a38:	f023 021f 	bic.w	r2, r3, #31
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	3b01      	subs	r3, #1
 8005a42:	4938      	ldr	r1, [pc, #224]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d01d      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a56:	4b33      	ldr	r3, [pc, #204]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a5c:	0e1b      	lsrs	r3, r3, #24
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a64:	4b2f      	ldr	r3, [pc, #188]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a6a:	0f1b      	lsrs	r3, r3, #28
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	019a      	lsls	r2, r3, #6
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	041b      	lsls	r3, r3, #16
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	061b      	lsls	r3, r3, #24
 8005a84:	431a      	orrs	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	071b      	lsls	r3, r3, #28
 8005a8a:	4926      	ldr	r1, [pc, #152]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d011      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	019a      	lsls	r2, r3, #6
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	041b      	lsls	r3, r3, #16
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	061b      	lsls	r3, r3, #24
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	071b      	lsls	r3, r3, #28
 8005aba:	491a      	ldr	r1, [pc, #104]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ac2:	4b18      	ldr	r3, [pc, #96]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a17      	ldr	r2, [pc, #92]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ac8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ace:	f7fd fa99 	bl	8003004 <HAL_GetTick>
 8005ad2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ad6:	f7fd fa95 	bl	8003004 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b64      	cmp	r3, #100	; 0x64
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e0d8      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ae8:	4b0e      	ldr	r3, [pc, #56]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0f0      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	f040 80ce 	bne.w	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005afc:	4b09      	ldr	r3, [pc, #36]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a08      	ldr	r2, [pc, #32]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b08:	f7fd fa7c 	bl	8003004 <HAL_GetTick>
 8005b0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b0e:	e00b      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b10:	f7fd fa78 	bl	8003004 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b64      	cmp	r3, #100	; 0x64
 8005b1c:	d904      	bls.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e0bb      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005b22:	bf00      	nop
 8005b24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b28:	4b5e      	ldr	r3, [pc, #376]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b34:	d0ec      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d009      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d02e      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d12a      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b5e:	4b51      	ldr	r3, [pc, #324]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b64:	0c1b      	lsrs	r3, r3, #16
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b6c:	4b4d      	ldr	r3, [pc, #308]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b72:	0f1b      	lsrs	r3, r3, #28
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	019a      	lsls	r2, r3, #6
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	041b      	lsls	r3, r3, #16
 8005b84:	431a      	orrs	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	061b      	lsls	r3, r3, #24
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	071b      	lsls	r3, r3, #28
 8005b92:	4944      	ldr	r1, [pc, #272]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b9a:	4b42      	ldr	r3, [pc, #264]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	493d      	ldr	r1, [pc, #244]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d022      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bc8:	d11d      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005bca:	4b36      	ldr	r3, [pc, #216]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd0:	0e1b      	lsrs	r3, r3, #24
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005bd8:	4b32      	ldr	r3, [pc, #200]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bde:	0f1b      	lsrs	r3, r3, #28
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	019a      	lsls	r2, r3, #6
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	041b      	lsls	r3, r3, #16
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	061b      	lsls	r3, r3, #24
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	071b      	lsls	r3, r3, #28
 8005bfe:	4929      	ldr	r1, [pc, #164]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d028      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c12:	4b24      	ldr	r3, [pc, #144]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c18:	0e1b      	lsrs	r3, r3, #24
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c20:	4b20      	ldr	r3, [pc, #128]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c26:	0c1b      	lsrs	r3, r3, #16
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	019a      	lsls	r2, r3, #6
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	041b      	lsls	r3, r3, #16
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	061b      	lsls	r3, r3, #24
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	071b      	lsls	r3, r3, #28
 8005c46:	4917      	ldr	r1, [pc, #92]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005c4e:	4b15      	ldr	r3, [pc, #84]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	4911      	ldr	r1, [pc, #68]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c64:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a0e      	ldr	r2, [pc, #56]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c70:	f7fd f9c8 	bl	8003004 <HAL_GetTick>
 8005c74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c76:	e008      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c78:	f7fd f9c4 	bl	8003004 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b64      	cmp	r3, #100	; 0x64
 8005c84:	d901      	bls.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e007      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c8a:	4b06      	ldr	r3, [pc, #24]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c96:	d1ef      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3720      	adds	r7, #32
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40023800 	.word	0x40023800

08005ca8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e09d      	b.n	8005df6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d108      	bne.n	8005cd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cca:	d009      	beq.n	8005ce0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	61da      	str	r2, [r3, #28]
 8005cd2:	e005      	b.n	8005ce0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d106      	bne.n	8005d00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7fc f8aa 	bl	8001e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d20:	d902      	bls.n	8005d28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	e002      	b.n	8005d2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005d36:	d007      	beq.n	8005d48 <HAL_SPI_Init+0xa0>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d40:	d002      	beq.n	8005d48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8a:	ea42 0103 	orr.w	r1, r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	0c1b      	lsrs	r3, r3, #16
 8005da4:	f003 0204 	and.w	r2, r3, #4
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005dc4:	ea42 0103 	orr.w	r1, r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	69da      	ldr	r2, [r3, #28]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005de4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b088      	sub	sp, #32
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	603b      	str	r3, [r7, #0]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_SPI_Transmit+0x22>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e158      	b.n	80060d2 <HAL_SPI_Transmit+0x2d4>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e28:	f7fd f8ec 	bl	8003004 <HAL_GetTick>
 8005e2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e2e:	88fb      	ldrh	r3, [r7, #6]
 8005e30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d002      	beq.n	8005e44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e3e:	2302      	movs	r3, #2
 8005e40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e42:	e13d      	b.n	80060c0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_SPI_Transmit+0x52>
 8005e4a:	88fb      	ldrh	r3, [r7, #6]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d102      	bne.n	8005e56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e54:	e134      	b.n	80060c0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2203      	movs	r2, #3
 8005e5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	88fa      	ldrh	r2, [r7, #6]
 8005e6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	88fa      	ldrh	r2, [r7, #6]
 8005e74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea0:	d10f      	bne.n	8005ec2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ec0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d007      	beq.n	8005ee0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ede:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ee8:	d94b      	bls.n	8005f82 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <HAL_SPI_Transmit+0xfa>
 8005ef2:	8afb      	ldrh	r3, [r7, #22]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d13e      	bne.n	8005f76 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	881a      	ldrh	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	1c9a      	adds	r2, r3, #2
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f1c:	e02b      	b.n	8005f76 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d112      	bne.n	8005f52 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	881a      	ldrh	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	1c9a      	adds	r2, r3, #2
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f50:	e011      	b.n	8005f76 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f52:	f7fd f857 	bl	8003004 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d803      	bhi.n	8005f6a <HAL_SPI_Transmit+0x16c>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f68:	d102      	bne.n	8005f70 <HAL_SPI_Transmit+0x172>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d102      	bne.n	8005f76 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f74:	e0a4      	b.n	80060c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1ce      	bne.n	8005f1e <HAL_SPI_Transmit+0x120>
 8005f80:	e07c      	b.n	800607c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <HAL_SPI_Transmit+0x192>
 8005f8a:	8afb      	ldrh	r3, [r7, #22]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d170      	bne.n	8006072 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d912      	bls.n	8005fc0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	881a      	ldrh	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	1c9a      	adds	r2, r3, #2
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	3b02      	subs	r3, #2
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fbe:	e058      	b.n	8006072 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	7812      	ldrb	r2, [r2, #0]
 8005fcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005fe6:	e044      	b.n	8006072 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d12b      	bne.n	800604e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d912      	bls.n	8006026 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	881a      	ldrh	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006010:	1c9a      	adds	r2, r3, #2
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800601a:	b29b      	uxth	r3, r3
 800601c:	3b02      	subs	r3, #2
 800601e:	b29a      	uxth	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006024:	e025      	b.n	8006072 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	330c      	adds	r3, #12
 8006030:	7812      	ldrb	r2, [r2, #0]
 8006032:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800604c:	e011      	b.n	8006072 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800604e:	f7fc ffd9 	bl	8003004 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d803      	bhi.n	8006066 <HAL_SPI_Transmit+0x268>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006064:	d102      	bne.n	800606c <HAL_SPI_Transmit+0x26e>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d102      	bne.n	8006072 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006070:	e026      	b.n	80060c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006076:	b29b      	uxth	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1b5      	bne.n	8005fe8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 fadd 	bl	8006640 <SPI_EndRxTxTransaction>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2220      	movs	r2, #32
 8006090:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10a      	bne.n	80060b0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800609a:	2300      	movs	r3, #0
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	613b      	str	r3, [r7, #16]
 80060ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	77fb      	strb	r3, [r7, #31]
 80060bc:	e000      	b.n	80060c0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80060be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3720      	adds	r7, #32
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	4613      	mov	r3, r2
 80060e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_SPI_Transmit_DMA+0x20>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e0d8      	b.n	80062ae <HAL_SPI_Transmit_DMA+0x1d2>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b01      	cmp	r3, #1
 800610e:	d002      	beq.n	8006116 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006110:	2302      	movs	r3, #2
 8006112:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006114:	e0c6      	b.n	80062a4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <HAL_SPI_Transmit_DMA+0x46>
 800611c:	88fb      	ldrh	r3, [r7, #6]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d102      	bne.n	8006128 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006126:	e0bd      	b.n	80062a4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2203      	movs	r2, #3
 800612c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	88fa      	ldrh	r2, [r7, #6]
 8006140:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	88fa      	ldrh	r2, [r7, #6]
 8006146:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006172:	d10f      	bne.n	8006194 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006182:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006192:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006198:	4a47      	ldr	r2, [pc, #284]	; (80062b8 <HAL_SPI_Transmit_DMA+0x1dc>)
 800619a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a0:	4a46      	ldr	r2, [pc, #280]	; (80062bc <HAL_SPI_Transmit_DMA+0x1e0>)
 80061a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a8:	4a45      	ldr	r2, [pc, #276]	; (80062c0 <HAL_SPI_Transmit_DMA+0x1e4>)
 80061aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b0:	2200      	movs	r2, #0
 80061b2:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061c2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061cc:	d82d      	bhi.n	800622a <HAL_SPI_Transmit_DMA+0x14e>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061d8:	d127      	bne.n	800622a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10f      	bne.n	8006208 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061f6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	085b      	lsrs	r3, r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006206:	e010      	b.n	800622a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006216:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800621c:	b29b      	uxth	r3, r3
 800621e:	085b      	lsrs	r3, r3, #1
 8006220:	b29b      	uxth	r3, r3
 8006222:	3301      	adds	r3, #1
 8006224:	b29a      	uxth	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	4619      	mov	r1, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006240:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006242:	f7fd f9f5 	bl	8003630 <HAL_DMA_Start_IT>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00c      	beq.n	8006266 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006250:	f043 0210 	orr.w	r2, r3, #16
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006264:	e01e      	b.n	80062a4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006270:	2b40      	cmp	r3, #64	; 0x40
 8006272:	d007      	beq.n	8006284 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006282:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0220 	orr.w	r2, r2, #32
 8006292:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0202 	orr.w	r2, r2, #2
 80062a2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	080063a9 	.word	0x080063a9
 80062bc:	08006301 	.word	0x08006301
 80062c0:	080063c5 	.word	0x080063c5

080062c4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800630e:	f7fc fe79 	bl	8003004 <HAL_GetTick>
 8006312:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006322:	d03b      	beq.n	800639c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0220 	bic.w	r2, r2, #32
 8006332:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0202 	bic.w	r2, r2, #2
 8006342:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	2164      	movs	r1, #100	; 0x64
 8006348:	6978      	ldr	r0, [r7, #20]
 800634a:	f000 f979 	bl	8006640 <SPI_EndRxTxTransaction>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d005      	beq.n	8006360 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006358:	f043 0220 	orr.w	r2, r3, #32
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2200      	movs	r2, #0
 8006382:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006390:	2b00      	cmp	r3, #0
 8006392:	d003      	beq.n	800639c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006394:	6978      	ldr	r0, [r7, #20]
 8006396:	f7ff ffa9 	bl	80062ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800639a:	e002      	b.n	80063a2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800639c:	6978      	ldr	r0, [r7, #20]
 800639e:	f7ff ff91 	bl	80062c4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f7ff ff8e 	bl	80062d8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063bc:	bf00      	nop
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0203 	bic.w	r2, r2, #3
 80063e0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e6:	f043 0210 	orr.w	r2, r3, #16
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f7ff ff78 	bl	80062ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063fc:	bf00      	nop
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	4613      	mov	r3, r2
 8006412:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006414:	f7fc fdf6 	bl	8003004 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	1a9b      	subs	r3, r3, r2
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	4413      	add	r3, r2
 8006422:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006424:	f7fc fdee 	bl	8003004 <HAL_GetTick>
 8006428:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800642a:	4b39      	ldr	r3, [pc, #228]	; (8006510 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	015b      	lsls	r3, r3, #5
 8006430:	0d1b      	lsrs	r3, r3, #20
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	fb02 f303 	mul.w	r3, r2, r3
 8006438:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800643a:	e054      	b.n	80064e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006442:	d050      	beq.n	80064e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006444:	f7fc fdde 	bl	8003004 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	429a      	cmp	r2, r3
 8006452:	d902      	bls.n	800645a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d13d      	bne.n	80064d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006468:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006472:	d111      	bne.n	8006498 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800647c:	d004      	beq.n	8006488 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006486:	d107      	bne.n	8006498 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006496:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064a0:	d10f      	bne.n	80064c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e017      	b.n	8006506 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4013      	ands	r3, r2
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	bf0c      	ite	eq
 80064f6:	2301      	moveq	r3, #1
 80064f8:	2300      	movne	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	461a      	mov	r2, r3
 80064fe:	79fb      	ldrb	r3, [r7, #7]
 8006500:	429a      	cmp	r2, r3
 8006502:	d19b      	bne.n	800643c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3720      	adds	r7, #32
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000054 	.word	0x20000054

08006514 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08a      	sub	sp, #40	; 0x28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006522:	2300      	movs	r3, #0
 8006524:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006526:	f7fc fd6d 	bl	8003004 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	1a9b      	subs	r3, r3, r2
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	4413      	add	r3, r2
 8006534:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006536:	f7fc fd65 	bl	8003004 <HAL_GetTick>
 800653a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	330c      	adds	r3, #12
 8006542:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006544:	4b3d      	ldr	r3, [pc, #244]	; (800663c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4613      	mov	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	00da      	lsls	r2, r3, #3
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	0d1b      	lsrs	r3, r3, #20
 8006554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006556:	fb02 f303 	mul.w	r3, r2, r3
 800655a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800655c:	e060      	b.n	8006620 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006564:	d107      	bne.n	8006576 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d104      	bne.n	8006576 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	b2db      	uxtb	r3, r3
 8006572:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006574:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657c:	d050      	beq.n	8006620 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800657e:	f7fc fd41 	bl	8003004 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800658a:	429a      	cmp	r2, r3
 800658c:	d902      	bls.n	8006594 <SPI_WaitFifoStateUntilTimeout+0x80>
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	2b00      	cmp	r3, #0
 8006592:	d13d      	bne.n	8006610 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ac:	d111      	bne.n	80065d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b6:	d004      	beq.n	80065c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c0:	d107      	bne.n	80065d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065da:	d10f      	bne.n	80065fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e010      	b.n	8006632 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	3b01      	subs	r3, #1
 800661e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689a      	ldr	r2, [r3, #8]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	4013      	ands	r3, r2
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	429a      	cmp	r2, r3
 800662e:	d196      	bne.n	800655e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3728      	adds	r7, #40	; 0x28
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20000054 	.word	0x20000054

08006640 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b088      	sub	sp, #32
 8006644:	af02      	add	r7, sp, #8
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2200      	movs	r2, #0
 8006654:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7ff ff5b 	bl	8006514 <SPI_WaitFifoStateUntilTimeout>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d007      	beq.n	8006674 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006668:	f043 0220 	orr.w	r2, r3, #32
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e046      	b.n	8006702 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006674:	4b25      	ldr	r3, [pc, #148]	; (800670c <SPI_EndRxTxTransaction+0xcc>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a25      	ldr	r2, [pc, #148]	; (8006710 <SPI_EndRxTxTransaction+0xd0>)
 800667a:	fba2 2303 	umull	r2, r3, r2, r3
 800667e:	0d5b      	lsrs	r3, r3, #21
 8006680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006684:	fb02 f303 	mul.w	r3, r2, r3
 8006688:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006692:	d112      	bne.n	80066ba <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2200      	movs	r2, #0
 800669c:	2180      	movs	r1, #128	; 0x80
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f7ff feb0 	bl	8006404 <SPI_WaitFlagStateUntilTimeout>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d016      	beq.n	80066d8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ae:	f043 0220 	orr.w	r2, r3, #32
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e023      	b.n	8006702 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00a      	beq.n	80066d6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d0:	2b80      	cmp	r3, #128	; 0x80
 80066d2:	d0f2      	beq.n	80066ba <SPI_EndRxTxTransaction+0x7a>
 80066d4:	e000      	b.n	80066d8 <SPI_EndRxTxTransaction+0x98>
        break;
 80066d6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2200      	movs	r2, #0
 80066e0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7ff ff15 	bl	8006514 <SPI_WaitFifoStateUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d007      	beq.n	8006700 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f4:	f043 0220 	orr.w	r2, r3, #32
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e000      	b.n	8006702 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000054 	.word	0x20000054
 8006710:	165e9f81 	.word	0x165e9f81

08006714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e049      	b.n	80067ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f841 	bl	80067c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3304      	adds	r3, #4
 8006750:	4619      	mov	r1, r3
 8006752:	4610      	mov	r0, r2
 8006754:	f000 fc66 	bl	8007024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
	...

080067d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d001      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e054      	b.n	800689a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0201 	orr.w	r2, r2, #1
 8006806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a26      	ldr	r2, [pc, #152]	; (80068a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d022      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x80>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681a:	d01d      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x80>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a22      	ldr	r2, [pc, #136]	; (80068ac <HAL_TIM_Base_Start_IT+0xd4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d018      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x80>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a21      	ldr	r2, [pc, #132]	; (80068b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d013      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x80>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a1f      	ldr	r2, [pc, #124]	; (80068b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00e      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x80>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1e      	ldr	r2, [pc, #120]	; (80068b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d009      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x80>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a1c      	ldr	r2, [pc, #112]	; (80068bc <HAL_TIM_Base_Start_IT+0xe4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d004      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x80>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1b      	ldr	r2, [pc, #108]	; (80068c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d115      	bne.n	8006884 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	4b19      	ldr	r3, [pc, #100]	; (80068c4 <HAL_TIM_Base_Start_IT+0xec>)
 8006860:	4013      	ands	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b06      	cmp	r3, #6
 8006868:	d015      	beq.n	8006896 <HAL_TIM_Base_Start_IT+0xbe>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006870:	d011      	beq.n	8006896 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f042 0201 	orr.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006882:	e008      	b.n	8006896 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0201 	orr.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	e000      	b.n	8006898 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006896:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	40010000 	.word	0x40010000
 80068ac:	40000400 	.word	0x40000400
 80068b0:	40000800 	.word	0x40000800
 80068b4:	40000c00 	.word	0x40000c00
 80068b8:	40010400 	.word	0x40010400
 80068bc:	40014000 	.word	0x40014000
 80068c0:	40001800 	.word	0x40001800
 80068c4:	00010007 	.word	0x00010007

080068c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e049      	b.n	800696e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d106      	bne.n	80068f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fb ff64 	bl	80027bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	3304      	adds	r3, #4
 8006904:	4619      	mov	r1, r3
 8006906:	4610      	mov	r0, r2
 8006908:	f000 fb8c 	bl	8007024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d109      	bne.n	800699c <HAL_TIM_PWM_Start+0x24>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b01      	cmp	r3, #1
 8006992:	bf14      	ite	ne
 8006994:	2301      	movne	r3, #1
 8006996:	2300      	moveq	r3, #0
 8006998:	b2db      	uxtb	r3, r3
 800699a:	e03c      	b.n	8006a16 <HAL_TIM_PWM_Start+0x9e>
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d109      	bne.n	80069b6 <HAL_TIM_PWM_Start+0x3e>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	bf14      	ite	ne
 80069ae:	2301      	movne	r3, #1
 80069b0:	2300      	moveq	r3, #0
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	e02f      	b.n	8006a16 <HAL_TIM_PWM_Start+0x9e>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d109      	bne.n	80069d0 <HAL_TIM_PWM_Start+0x58>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	bf14      	ite	ne
 80069c8:	2301      	movne	r3, #1
 80069ca:	2300      	moveq	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	e022      	b.n	8006a16 <HAL_TIM_PWM_Start+0x9e>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2b0c      	cmp	r3, #12
 80069d4:	d109      	bne.n	80069ea <HAL_TIM_PWM_Start+0x72>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b01      	cmp	r3, #1
 80069e0:	bf14      	ite	ne
 80069e2:	2301      	movne	r3, #1
 80069e4:	2300      	moveq	r3, #0
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	e015      	b.n	8006a16 <HAL_TIM_PWM_Start+0x9e>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b10      	cmp	r3, #16
 80069ee:	d109      	bne.n	8006a04 <HAL_TIM_PWM_Start+0x8c>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	bf14      	ite	ne
 80069fc:	2301      	movne	r3, #1
 80069fe:	2300      	moveq	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	e008      	b.n	8006a16 <HAL_TIM_PWM_Start+0x9e>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	bf14      	ite	ne
 8006a10:	2301      	movne	r3, #1
 8006a12:	2300      	moveq	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e092      	b.n	8006b44 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d104      	bne.n	8006a2e <HAL_TIM_PWM_Start+0xb6>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a2c:	e023      	b.n	8006a76 <HAL_TIM_PWM_Start+0xfe>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	d104      	bne.n	8006a3e <HAL_TIM_PWM_Start+0xc6>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a3c:	e01b      	b.n	8006a76 <HAL_TIM_PWM_Start+0xfe>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d104      	bne.n	8006a4e <HAL_TIM_PWM_Start+0xd6>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a4c:	e013      	b.n	8006a76 <HAL_TIM_PWM_Start+0xfe>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b0c      	cmp	r3, #12
 8006a52:	d104      	bne.n	8006a5e <HAL_TIM_PWM_Start+0xe6>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a5c:	e00b      	b.n	8006a76 <HAL_TIM_PWM_Start+0xfe>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b10      	cmp	r3, #16
 8006a62:	d104      	bne.n	8006a6e <HAL_TIM_PWM_Start+0xf6>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a6c:	e003      	b.n	8006a76 <HAL_TIM_PWM_Start+0xfe>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2202      	movs	r2, #2
 8006a72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fdce 	bl	8007620 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a30      	ldr	r2, [pc, #192]	; (8006b4c <HAL_TIM_PWM_Start+0x1d4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d004      	beq.n	8006a98 <HAL_TIM_PWM_Start+0x120>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a2f      	ldr	r2, [pc, #188]	; (8006b50 <HAL_TIM_PWM_Start+0x1d8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d101      	bne.n	8006a9c <HAL_TIM_PWM_Start+0x124>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e000      	b.n	8006a9e <HAL_TIM_PWM_Start+0x126>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d007      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ab0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a25      	ldr	r2, [pc, #148]	; (8006b4c <HAL_TIM_PWM_Start+0x1d4>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d022      	beq.n	8006b02 <HAL_TIM_PWM_Start+0x18a>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac4:	d01d      	beq.n	8006b02 <HAL_TIM_PWM_Start+0x18a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a22      	ldr	r2, [pc, #136]	; (8006b54 <HAL_TIM_PWM_Start+0x1dc>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d018      	beq.n	8006b02 <HAL_TIM_PWM_Start+0x18a>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a20      	ldr	r2, [pc, #128]	; (8006b58 <HAL_TIM_PWM_Start+0x1e0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d013      	beq.n	8006b02 <HAL_TIM_PWM_Start+0x18a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a1f      	ldr	r2, [pc, #124]	; (8006b5c <HAL_TIM_PWM_Start+0x1e4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00e      	beq.n	8006b02 <HAL_TIM_PWM_Start+0x18a>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a19      	ldr	r2, [pc, #100]	; (8006b50 <HAL_TIM_PWM_Start+0x1d8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d009      	beq.n	8006b02 <HAL_TIM_PWM_Start+0x18a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1b      	ldr	r2, [pc, #108]	; (8006b60 <HAL_TIM_PWM_Start+0x1e8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d004      	beq.n	8006b02 <HAL_TIM_PWM_Start+0x18a>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a19      	ldr	r2, [pc, #100]	; (8006b64 <HAL_TIM_PWM_Start+0x1ec>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d115      	bne.n	8006b2e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	4b17      	ldr	r3, [pc, #92]	; (8006b68 <HAL_TIM_PWM_Start+0x1f0>)
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b06      	cmp	r3, #6
 8006b12:	d015      	beq.n	8006b40 <HAL_TIM_PWM_Start+0x1c8>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b1a:	d011      	beq.n	8006b40 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2c:	e008      	b.n	8006b40 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0201 	orr.w	r2, r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	e000      	b.n	8006b42 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	40010000 	.word	0x40010000
 8006b50:	40010400 	.word	0x40010400
 8006b54:	40000400 	.word	0x40000400
 8006b58:	40000800 	.word	0x40000800
 8006b5c:	40000c00 	.word	0x40000c00
 8006b60:	40014000 	.word	0x40014000
 8006b64:	40001800 	.word	0x40001800
 8006b68:	00010007 	.word	0x00010007

08006b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d122      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d11b      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f06f 0202 	mvn.w	r2, #2
 8006b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	f003 0303 	and.w	r3, r3, #3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fa1a 	bl	8006fe8 <HAL_TIM_IC_CaptureCallback>
 8006bb4:	e005      	b.n	8006bc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fa0c 	bl	8006fd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fa1d 	bl	8006ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f003 0304 	and.w	r3, r3, #4
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d122      	bne.n	8006c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b04      	cmp	r3, #4
 8006be2:	d11b      	bne.n	8006c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f06f 0204 	mvn.w	r2, #4
 8006bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f9f0 	bl	8006fe8 <HAL_TIM_IC_CaptureCallback>
 8006c08:	e005      	b.n	8006c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f9e2 	bl	8006fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f9f3 	bl	8006ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	f003 0308 	and.w	r3, r3, #8
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d122      	bne.n	8006c70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d11b      	bne.n	8006c70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f06f 0208 	mvn.w	r2, #8
 8006c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2204      	movs	r2, #4
 8006c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f9c6 	bl	8006fe8 <HAL_TIM_IC_CaptureCallback>
 8006c5c:	e005      	b.n	8006c6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f9b8 	bl	8006fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f9c9 	bl	8006ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	f003 0310 	and.w	r3, r3, #16
 8006c7a:	2b10      	cmp	r3, #16
 8006c7c:	d122      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f003 0310 	and.w	r3, r3, #16
 8006c88:	2b10      	cmp	r3, #16
 8006c8a:	d11b      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f06f 0210 	mvn.w	r2, #16
 8006c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2208      	movs	r2, #8
 8006c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f99c 	bl	8006fe8 <HAL_TIM_IC_CaptureCallback>
 8006cb0:	e005      	b.n	8006cbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f98e 	bl	8006fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f99f 	bl	8006ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d10e      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d107      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f06f 0201 	mvn.w	r2, #1
 8006ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7fb f85c 	bl	8001da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfa:	2b80      	cmp	r3, #128	; 0x80
 8006cfc:	d10e      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d08:	2b80      	cmp	r3, #128	; 0x80
 8006d0a:	d107      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fd40 	bl	800779c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d2a:	d10e      	bne.n	8006d4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d36:	2b80      	cmp	r3, #128	; 0x80
 8006d38:	d107      	bne.n	8006d4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fd33 	bl	80077b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d54:	2b40      	cmp	r3, #64	; 0x40
 8006d56:	d10e      	bne.n	8006d76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d62:	2b40      	cmp	r3, #64	; 0x40
 8006d64:	d107      	bne.n	8006d76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f94d 	bl	8007010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f003 0320 	and.w	r3, r3, #32
 8006d80:	2b20      	cmp	r3, #32
 8006d82:	d10e      	bne.n	8006da2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	d107      	bne.n	8006da2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f06f 0220 	mvn.w	r2, #32
 8006d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fcf3 	bl	8007788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006da2:	bf00      	nop
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d101      	bne.n	8006dca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	e0ff      	b.n	8006fca <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b14      	cmp	r3, #20
 8006dd6:	f200 80f0 	bhi.w	8006fba <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006dda:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de0:	08006e35 	.word	0x08006e35
 8006de4:	08006fbb 	.word	0x08006fbb
 8006de8:	08006fbb 	.word	0x08006fbb
 8006dec:	08006fbb 	.word	0x08006fbb
 8006df0:	08006e75 	.word	0x08006e75
 8006df4:	08006fbb 	.word	0x08006fbb
 8006df8:	08006fbb 	.word	0x08006fbb
 8006dfc:	08006fbb 	.word	0x08006fbb
 8006e00:	08006eb7 	.word	0x08006eb7
 8006e04:	08006fbb 	.word	0x08006fbb
 8006e08:	08006fbb 	.word	0x08006fbb
 8006e0c:	08006fbb 	.word	0x08006fbb
 8006e10:	08006ef7 	.word	0x08006ef7
 8006e14:	08006fbb 	.word	0x08006fbb
 8006e18:	08006fbb 	.word	0x08006fbb
 8006e1c:	08006fbb 	.word	0x08006fbb
 8006e20:	08006f39 	.word	0x08006f39
 8006e24:	08006fbb 	.word	0x08006fbb
 8006e28:	08006fbb 	.word	0x08006fbb
 8006e2c:	08006fbb 	.word	0x08006fbb
 8006e30:	08006f79 	.word	0x08006f79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68b9      	ldr	r1, [r7, #8]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 f992 	bl	8007164 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699a      	ldr	r2, [r3, #24]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0208 	orr.w	r2, r2, #8
 8006e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0204 	bic.w	r2, r2, #4
 8006e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6999      	ldr	r1, [r3, #24]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	691a      	ldr	r2, [r3, #16]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	619a      	str	r2, [r3, #24]
      break;
 8006e72:	e0a5      	b.n	8006fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68b9      	ldr	r1, [r7, #8]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 f9e4 	bl	8007248 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	699a      	ldr	r2, [r3, #24]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6999      	ldr	r1, [r3, #24]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	021a      	lsls	r2, r3, #8
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	619a      	str	r2, [r3, #24]
      break;
 8006eb4:	e084      	b.n	8006fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 fa3b 	bl	8007338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	69da      	ldr	r2, [r3, #28]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f042 0208 	orr.w	r2, r2, #8
 8006ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69da      	ldr	r2, [r3, #28]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0204 	bic.w	r2, r2, #4
 8006ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69d9      	ldr	r1, [r3, #28]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	691a      	ldr	r2, [r3, #16]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	61da      	str	r2, [r3, #28]
      break;
 8006ef4:	e064      	b.n	8006fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68b9      	ldr	r1, [r7, #8]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 fa91 	bl	8007424 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	69da      	ldr	r2, [r3, #28]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69da      	ldr	r2, [r3, #28]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	69d9      	ldr	r1, [r3, #28]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	021a      	lsls	r2, r3, #8
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	61da      	str	r2, [r3, #28]
      break;
 8006f36:	e043      	b.n	8006fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68b9      	ldr	r1, [r7, #8]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 fac8 	bl	80074d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f042 0208 	orr.w	r2, r2, #8
 8006f52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0204 	bic.w	r2, r2, #4
 8006f62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	691a      	ldr	r2, [r3, #16]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f76:	e023      	b.n	8006fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68b9      	ldr	r1, [r7, #8]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 fafa 	bl	8007578 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	021a      	lsls	r2, r3, #8
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006fb8:	e002      	b.n	8006fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8006fbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop

08006fd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a40      	ldr	r2, [pc, #256]	; (8007138 <TIM_Base_SetConfig+0x114>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d013      	beq.n	8007064 <TIM_Base_SetConfig+0x40>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007042:	d00f      	beq.n	8007064 <TIM_Base_SetConfig+0x40>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a3d      	ldr	r2, [pc, #244]	; (800713c <TIM_Base_SetConfig+0x118>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d00b      	beq.n	8007064 <TIM_Base_SetConfig+0x40>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a3c      	ldr	r2, [pc, #240]	; (8007140 <TIM_Base_SetConfig+0x11c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d007      	beq.n	8007064 <TIM_Base_SetConfig+0x40>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a3b      	ldr	r2, [pc, #236]	; (8007144 <TIM_Base_SetConfig+0x120>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d003      	beq.n	8007064 <TIM_Base_SetConfig+0x40>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a3a      	ldr	r2, [pc, #232]	; (8007148 <TIM_Base_SetConfig+0x124>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d108      	bne.n	8007076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a2f      	ldr	r2, [pc, #188]	; (8007138 <TIM_Base_SetConfig+0x114>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d02b      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007084:	d027      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a2c      	ldr	r2, [pc, #176]	; (800713c <TIM_Base_SetConfig+0x118>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d023      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a2b      	ldr	r2, [pc, #172]	; (8007140 <TIM_Base_SetConfig+0x11c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d01f      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a2a      	ldr	r2, [pc, #168]	; (8007144 <TIM_Base_SetConfig+0x120>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d01b      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a29      	ldr	r2, [pc, #164]	; (8007148 <TIM_Base_SetConfig+0x124>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d017      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a28      	ldr	r2, [pc, #160]	; (800714c <TIM_Base_SetConfig+0x128>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d013      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a27      	ldr	r2, [pc, #156]	; (8007150 <TIM_Base_SetConfig+0x12c>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d00f      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a26      	ldr	r2, [pc, #152]	; (8007154 <TIM_Base_SetConfig+0x130>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d00b      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a25      	ldr	r2, [pc, #148]	; (8007158 <TIM_Base_SetConfig+0x134>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d007      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a24      	ldr	r2, [pc, #144]	; (800715c <TIM_Base_SetConfig+0x138>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d003      	beq.n	80070d6 <TIM_Base_SetConfig+0xb2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a23      	ldr	r2, [pc, #140]	; (8007160 <TIM_Base_SetConfig+0x13c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d108      	bne.n	80070e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a0a      	ldr	r2, [pc, #40]	; (8007138 <TIM_Base_SetConfig+0x114>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d003      	beq.n	800711c <TIM_Base_SetConfig+0xf8>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a0c      	ldr	r2, [pc, #48]	; (8007148 <TIM_Base_SetConfig+0x124>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d103      	bne.n	8007124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	691a      	ldr	r2, [r3, #16]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	615a      	str	r2, [r3, #20]
}
 800712a:	bf00      	nop
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40010000 	.word	0x40010000
 800713c:	40000400 	.word	0x40000400
 8007140:	40000800 	.word	0x40000800
 8007144:	40000c00 	.word	0x40000c00
 8007148:	40010400 	.word	0x40010400
 800714c:	40014000 	.word	0x40014000
 8007150:	40014400 	.word	0x40014400
 8007154:	40014800 	.word	0x40014800
 8007158:	40001800 	.word	0x40001800
 800715c:	40001c00 	.word	0x40001c00
 8007160:	40002000 	.word	0x40002000

08007164 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	f023 0201 	bic.w	r2, r3, #1
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	4b2b      	ldr	r3, [pc, #172]	; (800723c <TIM_OC1_SetConfig+0xd8>)
 8007190:	4013      	ands	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 0303 	bic.w	r3, r3, #3
 800719a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f023 0302 	bic.w	r3, r3, #2
 80071ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a21      	ldr	r2, [pc, #132]	; (8007240 <TIM_OC1_SetConfig+0xdc>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d003      	beq.n	80071c8 <TIM_OC1_SetConfig+0x64>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a20      	ldr	r2, [pc, #128]	; (8007244 <TIM_OC1_SetConfig+0xe0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d10c      	bne.n	80071e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f023 0308 	bic.w	r3, r3, #8
 80071ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f023 0304 	bic.w	r3, r3, #4
 80071e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a16      	ldr	r2, [pc, #88]	; (8007240 <TIM_OC1_SetConfig+0xdc>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d003      	beq.n	80071f2 <TIM_OC1_SetConfig+0x8e>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a15      	ldr	r2, [pc, #84]	; (8007244 <TIM_OC1_SetConfig+0xe0>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d111      	bne.n	8007216 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	4313      	orrs	r3, r2
 800720a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4313      	orrs	r3, r2
 8007214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	621a      	str	r2, [r3, #32]
}
 8007230:	bf00      	nop
 8007232:	371c      	adds	r7, #28
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	fffeff8f 	.word	0xfffeff8f
 8007240:	40010000 	.word	0x40010000
 8007244:	40010400 	.word	0x40010400

08007248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	f023 0210 	bic.w	r2, r3, #16
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4b2e      	ldr	r3, [pc, #184]	; (800732c <TIM_OC2_SetConfig+0xe4>)
 8007274:	4013      	ands	r3, r2
 8007276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800727e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	021b      	lsls	r3, r3, #8
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f023 0320 	bic.w	r3, r3, #32
 8007292:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	011b      	lsls	r3, r3, #4
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a23      	ldr	r2, [pc, #140]	; (8007330 <TIM_OC2_SetConfig+0xe8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d003      	beq.n	80072b0 <TIM_OC2_SetConfig+0x68>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a22      	ldr	r2, [pc, #136]	; (8007334 <TIM_OC2_SetConfig+0xec>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d10d      	bne.n	80072cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	011b      	lsls	r3, r3, #4
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a18      	ldr	r2, [pc, #96]	; (8007330 <TIM_OC2_SetConfig+0xe8>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d003      	beq.n	80072dc <TIM_OC2_SetConfig+0x94>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a17      	ldr	r2, [pc, #92]	; (8007334 <TIM_OC2_SetConfig+0xec>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d113      	bne.n	8007304 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	4313      	orrs	r3, r2
 8007302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	621a      	str	r2, [r3, #32]
}
 800731e:	bf00      	nop
 8007320:	371c      	adds	r7, #28
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	feff8fff 	.word	0xfeff8fff
 8007330:	40010000 	.word	0x40010000
 8007334:	40010400 	.word	0x40010400

08007338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	4b2d      	ldr	r3, [pc, #180]	; (8007418 <TIM_OC3_SetConfig+0xe0>)
 8007364:	4013      	ands	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0303 	bic.w	r3, r3, #3
 800736e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	021b      	lsls	r3, r3, #8
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	4313      	orrs	r3, r2
 800738c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a22      	ldr	r2, [pc, #136]	; (800741c <TIM_OC3_SetConfig+0xe4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d003      	beq.n	800739e <TIM_OC3_SetConfig+0x66>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a21      	ldr	r2, [pc, #132]	; (8007420 <TIM_OC3_SetConfig+0xe8>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d10d      	bne.n	80073ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	021b      	lsls	r3, r3, #8
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a17      	ldr	r2, [pc, #92]	; (800741c <TIM_OC3_SetConfig+0xe4>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d003      	beq.n	80073ca <TIM_OC3_SetConfig+0x92>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a16      	ldr	r2, [pc, #88]	; (8007420 <TIM_OC3_SetConfig+0xe8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d113      	bne.n	80073f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	621a      	str	r2, [r3, #32]
}
 800740c:	bf00      	nop
 800740e:	371c      	adds	r7, #28
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	fffeff8f 	.word	0xfffeff8f
 800741c:	40010000 	.word	0x40010000
 8007420:	40010400 	.word	0x40010400

08007424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007424:	b480      	push	{r7}
 8007426:	b087      	sub	sp, #28
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	4b1e      	ldr	r3, [pc, #120]	; (80074c8 <TIM_OC4_SetConfig+0xa4>)
 8007450:	4013      	ands	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800745a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	021b      	lsls	r3, r3, #8
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800746e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	031b      	lsls	r3, r3, #12
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	4313      	orrs	r3, r2
 800747a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a13      	ldr	r2, [pc, #76]	; (80074cc <TIM_OC4_SetConfig+0xa8>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d003      	beq.n	800748c <TIM_OC4_SetConfig+0x68>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a12      	ldr	r2, [pc, #72]	; (80074d0 <TIM_OC4_SetConfig+0xac>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d109      	bne.n	80074a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007492:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	019b      	lsls	r3, r3, #6
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	4313      	orrs	r3, r2
 800749e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	693a      	ldr	r2, [r7, #16]
 80074b8:	621a      	str	r2, [r3, #32]
}
 80074ba:	bf00      	nop
 80074bc:	371c      	adds	r7, #28
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	feff8fff 	.word	0xfeff8fff
 80074cc:	40010000 	.word	0x40010000
 80074d0:	40010400 	.word	0x40010400

080074d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	4b1b      	ldr	r3, [pc, #108]	; (800756c <TIM_OC5_SetConfig+0x98>)
 8007500:	4013      	ands	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007514:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	041b      	lsls	r3, r3, #16
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	4313      	orrs	r3, r2
 8007520:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a12      	ldr	r2, [pc, #72]	; (8007570 <TIM_OC5_SetConfig+0x9c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d003      	beq.n	8007532 <TIM_OC5_SetConfig+0x5e>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a11      	ldr	r2, [pc, #68]	; (8007574 <TIM_OC5_SetConfig+0xa0>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d109      	bne.n	8007546 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007538:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	021b      	lsls	r3, r3, #8
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	4313      	orrs	r3, r2
 8007544:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	621a      	str	r2, [r3, #32]
}
 8007560:	bf00      	nop
 8007562:	371c      	adds	r7, #28
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	fffeff8f 	.word	0xfffeff8f
 8007570:	40010000 	.word	0x40010000
 8007574:	40010400 	.word	0x40010400

08007578 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	4b1c      	ldr	r3, [pc, #112]	; (8007614 <TIM_OC6_SetConfig+0x9c>)
 80075a4:	4013      	ands	r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	051b      	lsls	r3, r3, #20
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a13      	ldr	r2, [pc, #76]	; (8007618 <TIM_OC6_SetConfig+0xa0>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d003      	beq.n	80075d8 <TIM_OC6_SetConfig+0x60>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a12      	ldr	r2, [pc, #72]	; (800761c <TIM_OC6_SetConfig+0xa4>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d109      	bne.n	80075ec <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	029b      	lsls	r3, r3, #10
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	621a      	str	r2, [r3, #32]
}
 8007606:	bf00      	nop
 8007608:	371c      	adds	r7, #28
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	feff8fff 	.word	0xfeff8fff
 8007618:	40010000 	.word	0x40010000
 800761c:	40010400 	.word	0x40010400

08007620 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007620:	b480      	push	{r7}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f003 031f 	and.w	r3, r3, #31
 8007632:	2201      	movs	r2, #1
 8007634:	fa02 f303 	lsl.w	r3, r2, r3
 8007638:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a1a      	ldr	r2, [r3, #32]
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	43db      	mvns	r3, r3
 8007642:	401a      	ands	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6a1a      	ldr	r2, [r3, #32]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f003 031f 	and.w	r3, r3, #31
 8007652:	6879      	ldr	r1, [r7, #4]
 8007654:	fa01 f303 	lsl.w	r3, r1, r3
 8007658:	431a      	orrs	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	621a      	str	r2, [r3, #32]
}
 800765e:	bf00      	nop
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
	...

0800766c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800767c:	2b01      	cmp	r3, #1
 800767e:	d101      	bne.n	8007684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007680:	2302      	movs	r3, #2
 8007682:	e06d      	b.n	8007760 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2202      	movs	r2, #2
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a30      	ldr	r2, [pc, #192]	; (800776c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d004      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a2f      	ldr	r2, [pc, #188]	; (8007770 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d108      	bne.n	80076ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80076be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	4313      	orrs	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a20      	ldr	r2, [pc, #128]	; (800776c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d022      	beq.n	8007734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f6:	d01d      	beq.n	8007734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a1d      	ldr	r2, [pc, #116]	; (8007774 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d018      	beq.n	8007734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a1c      	ldr	r2, [pc, #112]	; (8007778 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d013      	beq.n	8007734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a1a      	ldr	r2, [pc, #104]	; (800777c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d00e      	beq.n	8007734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a15      	ldr	r2, [pc, #84]	; (8007770 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d009      	beq.n	8007734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a16      	ldr	r2, [pc, #88]	; (8007780 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d004      	beq.n	8007734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a15      	ldr	r2, [pc, #84]	; (8007784 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d10c      	bne.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800773a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	4313      	orrs	r3, r2
 8007744:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	40010000 	.word	0x40010000
 8007770:	40010400 	.word	0x40010400
 8007774:	40000400 	.word	0x40000400
 8007778:	40000800 	.word	0x40000800
 800777c:	40000c00 	.word	0x40000c00
 8007780:	40014000 	.word	0x40014000
 8007784:	40001800 	.word	0x40001800

08007788 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e040      	b.n	8007858 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d106      	bne.n	80077ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7fb f870 	bl	80028cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2224      	movs	r2, #36	; 0x24
 80077f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 0201 	bic.w	r2, r2, #1
 8007800:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fb82 	bl	8007f0c <UART_SetConfig>
 8007808:	4603      	mov	r3, r0
 800780a:	2b01      	cmp	r3, #1
 800780c:	d101      	bne.n	8007812 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e022      	b.n	8007858 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fdda 	bl	80083d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800782e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800783e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f042 0201 	orr.w	r2, r2, #1
 800784e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fe61 	bl	8008518 <UART_CheckIdleState>
 8007856:	4603      	mov	r3, r0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08a      	sub	sp, #40	; 0x28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007874:	2b20      	cmp	r3, #32
 8007876:	d132      	bne.n	80078de <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <HAL_UART_Receive_IT+0x24>
 800787e:	88fb      	ldrh	r3, [r7, #6]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e02b      	b.n	80078e0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d018      	beq.n	80078ce <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	613b      	str	r3, [r7, #16]
   return(result);
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	623b      	str	r3, [r7, #32]
 80078bc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	69f9      	ldr	r1, [r7, #28]
 80078c0:	6a3a      	ldr	r2, [r7, #32]
 80078c2:	e841 2300 	strex	r3, r2, [r1]
 80078c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1e6      	bne.n	800789c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80078ce:	88fb      	ldrh	r3, [r7, #6]
 80078d0:	461a      	mov	r2, r3
 80078d2:	68b9      	ldr	r1, [r7, #8]
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 ff33 	bl	8008740 <UART_Start_Receive_IT>
 80078da:	4603      	mov	r3, r0
 80078dc:	e000      	b.n	80078e0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80078de:	2302      	movs	r3, #2
  }
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3728      	adds	r7, #40	; 0x28
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b0ba      	sub	sp, #232	; 0xe8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800790e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007912:	f640 030f 	movw	r3, #2063	; 0x80f
 8007916:	4013      	ands	r3, r2
 8007918:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800791c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007920:	2b00      	cmp	r3, #0
 8007922:	d115      	bne.n	8007950 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007928:	f003 0320 	and.w	r3, r3, #32
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00f      	beq.n	8007950 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007934:	f003 0320 	and.w	r3, r3, #32
 8007938:	2b00      	cmp	r3, #0
 800793a:	d009      	beq.n	8007950 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 82ac 	beq.w	8007e9e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	4798      	blx	r3
      }
      return;
 800794e:	e2a6      	b.n	8007e9e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007950:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 8117 	beq.w	8007b88 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800795a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d106      	bne.n	8007974 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007966:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800796a:	4b85      	ldr	r3, [pc, #532]	; (8007b80 <HAL_UART_IRQHandler+0x298>)
 800796c:	4013      	ands	r3, r2
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 810a 	beq.w	8007b88 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	2b00      	cmp	r3, #0
 800797e:	d011      	beq.n	80079a4 <HAL_UART_IRQHandler+0xbc>
 8007980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00b      	beq.n	80079a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2201      	movs	r2, #1
 8007992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800799a:	f043 0201 	orr.w	r2, r3, #1
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d011      	beq.n	80079d4 <HAL_UART_IRQHandler+0xec>
 80079b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00b      	beq.n	80079d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2202      	movs	r2, #2
 80079c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ca:	f043 0204 	orr.w	r2, r3, #4
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d011      	beq.n	8007a04 <HAL_UART_IRQHandler+0x11c>
 80079e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079e4:	f003 0301 	and.w	r3, r3, #1
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00b      	beq.n	8007a04 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2204      	movs	r2, #4
 80079f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079fa:	f043 0202 	orr.w	r2, r3, #2
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a08:	f003 0308 	and.w	r3, r3, #8
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d017      	beq.n	8007a40 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a14:	f003 0320 	and.w	r3, r3, #32
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d105      	bne.n	8007a28 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a20:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00b      	beq.n	8007a40 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2208      	movs	r2, #8
 8007a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a36:	f043 0208 	orr.w	r2, r3, #8
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d012      	beq.n	8007a72 <HAL_UART_IRQHandler+0x18a>
 8007a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00c      	beq.n	8007a72 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a68:	f043 0220 	orr.w	r2, r3, #32
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 8212 	beq.w	8007ea2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a82:	f003 0320 	and.w	r3, r3, #32
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00d      	beq.n	8007aa6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a8e:	f003 0320 	and.w	r3, r3, #32
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d007      	beq.n	8007aa6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aba:	2b40      	cmp	r3, #64	; 0x40
 8007abc:	d005      	beq.n	8007aca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ac2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d04f      	beq.n	8007b6a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fefe 	bl	80088cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ada:	2b40      	cmp	r3, #64	; 0x40
 8007adc:	d141      	bne.n	8007b62 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3308      	adds	r3, #8
 8007b06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1d9      	bne.n	8007ade <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d013      	beq.n	8007b5a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b36:	4a13      	ldr	r2, [pc, #76]	; (8007b84 <HAL_UART_IRQHandler+0x29c>)
 8007b38:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fb fe46 	bl	80037d0 <HAL_DMA_Abort_IT>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d017      	beq.n	8007b7a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007b54:	4610      	mov	r0, r2
 8007b56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b58:	e00f      	b.n	8007b7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f9b6 	bl	8007ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b60:	e00b      	b.n	8007b7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f9b2 	bl	8007ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b68:	e007      	b.n	8007b7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f9ae 	bl	8007ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007b78:	e193      	b.n	8007ea2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b7a:	bf00      	nop
    return;
 8007b7c:	e191      	b.n	8007ea2 <HAL_UART_IRQHandler+0x5ba>
 8007b7e:	bf00      	nop
 8007b80:	04000120 	.word	0x04000120
 8007b84:	08008995 	.word	0x08008995

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	f040 814c 	bne.w	8007e2a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b96:	f003 0310 	and.w	r3, r3, #16
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 8145 	beq.w	8007e2a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ba4:	f003 0310 	and.w	r3, r3, #16
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 813e 	beq.w	8007e2a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2210      	movs	r2, #16
 8007bb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc0:	2b40      	cmp	r3, #64	; 0x40
 8007bc2:	f040 80b6 	bne.w	8007d32 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bd2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 8165 	beq.w	8007ea6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007be2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007be6:	429a      	cmp	r2, r3
 8007be8:	f080 815d 	bcs.w	8007ea6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bf2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c00:	f000 8086 	beq.w	8007d10 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	461a      	mov	r2, r3
 8007c2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c32:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1da      	bne.n	8007c04 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3308      	adds	r3, #8
 8007c54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c60:	f023 0301 	bic.w	r3, r3, #1
 8007c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e1      	bne.n	8007c4e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3308      	adds	r3, #8
 8007c90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3308      	adds	r3, #8
 8007caa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007cae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007cb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007cb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e3      	bne.n	8007c8a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ce0:	f023 0310 	bic.w	r3, r3, #16
 8007ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	461a      	mov	r2, r3
 8007cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cf2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cf4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cfa:	e841 2300 	strex	r3, r2, [r1]
 8007cfe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1e4      	bne.n	8007cd0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fb fcf0 	bl	80036f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2202      	movs	r2, #2
 8007d14:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f8d8 	bl	8007ee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d30:	e0b9      	b.n	8007ea6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 80ab 	beq.w	8007eaa <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f000 80a6 	beq.w	8007eaa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d80:	647b      	str	r3, [r7, #68]	; 0x44
 8007d82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d88:	e841 2300 	strex	r3, r2, [r1]
 8007d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e4      	bne.n	8007d5e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3308      	adds	r3, #8
 8007d9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	623b      	str	r3, [r7, #32]
   return(result);
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	f023 0301 	bic.w	r3, r3, #1
 8007daa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3308      	adds	r3, #8
 8007db4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007db8:	633a      	str	r2, [r7, #48]	; 0x30
 8007dba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc0:	e841 2300 	strex	r3, r2, [r1]
 8007dc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1e3      	bne.n	8007d94 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f023 0310 	bic.w	r3, r3, #16
 8007df4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e02:	61fb      	str	r3, [r7, #28]
 8007e04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e06:	69b9      	ldr	r1, [r7, #24]
 8007e08:	69fa      	ldr	r2, [r7, #28]
 8007e0a:	e841 2300 	strex	r3, r2, [r1]
 8007e0e:	617b      	str	r3, [r7, #20]
   return(result);
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1e4      	bne.n	8007de0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2202      	movs	r2, #2
 8007e1a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f85c 	bl	8007ee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e28:	e03f      	b.n	8007eaa <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00e      	beq.n	8007e54 <HAL_UART_IRQHandler+0x56c>
 8007e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d008      	beq.n	8007e54 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f853 	bl	8007ef8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e52:	e02d      	b.n	8007eb0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00e      	beq.n	8007e7e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d008      	beq.n	8007e7e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d01c      	beq.n	8007eae <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	4798      	blx	r3
    }
    return;
 8007e7c:	e017      	b.n	8007eae <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d012      	beq.n	8007eb0 <HAL_UART_IRQHandler+0x5c8>
 8007e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00c      	beq.n	8007eb0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fd92 	bl	80089c0 <UART_EndTransmit_IT>
    return;
 8007e9c:	e008      	b.n	8007eb0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007e9e:	bf00      	nop
 8007ea0:	e006      	b.n	8007eb0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007ea2:	bf00      	nop
 8007ea4:	e004      	b.n	8007eb0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007ea6:	bf00      	nop
 8007ea8:	e002      	b.n	8007eb0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007eaa:	bf00      	nop
 8007eac:	e000      	b.n	8007eb0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007eae:	bf00      	nop
  }

}
 8007eb0:	37e8      	adds	r7, #232	; 0xe8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop

08007eb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689a      	ldr	r2, [r3, #8]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	431a      	orrs	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	431a      	orrs	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	4ba6      	ldr	r3, [pc, #664]	; (80081d0 <UART_SetConfig+0x2c4>)
 8007f38:	4013      	ands	r3, r2
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	6812      	ldr	r2, [r2, #0]
 8007f3e:	6979      	ldr	r1, [r7, #20]
 8007f40:	430b      	orrs	r3, r1
 8007f42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68da      	ldr	r2, [r3, #12]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a94      	ldr	r2, [pc, #592]	; (80081d4 <UART_SetConfig+0x2c8>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d120      	bne.n	8007fca <UART_SetConfig+0xbe>
 8007f88:	4b93      	ldr	r3, [pc, #588]	; (80081d8 <UART_SetConfig+0x2cc>)
 8007f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f8e:	f003 0303 	and.w	r3, r3, #3
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d816      	bhi.n	8007fc4 <UART_SetConfig+0xb8>
 8007f96:	a201      	add	r2, pc, #4	; (adr r2, 8007f9c <UART_SetConfig+0x90>)
 8007f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9c:	08007fad 	.word	0x08007fad
 8007fa0:	08007fb9 	.word	0x08007fb9
 8007fa4:	08007fb3 	.word	0x08007fb3
 8007fa8:	08007fbf 	.word	0x08007fbf
 8007fac:	2301      	movs	r3, #1
 8007fae:	77fb      	strb	r3, [r7, #31]
 8007fb0:	e150      	b.n	8008254 <UART_SetConfig+0x348>
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	77fb      	strb	r3, [r7, #31]
 8007fb6:	e14d      	b.n	8008254 <UART_SetConfig+0x348>
 8007fb8:	2304      	movs	r3, #4
 8007fba:	77fb      	strb	r3, [r7, #31]
 8007fbc:	e14a      	b.n	8008254 <UART_SetConfig+0x348>
 8007fbe:	2308      	movs	r3, #8
 8007fc0:	77fb      	strb	r3, [r7, #31]
 8007fc2:	e147      	b.n	8008254 <UART_SetConfig+0x348>
 8007fc4:	2310      	movs	r3, #16
 8007fc6:	77fb      	strb	r3, [r7, #31]
 8007fc8:	e144      	b.n	8008254 <UART_SetConfig+0x348>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a83      	ldr	r2, [pc, #524]	; (80081dc <UART_SetConfig+0x2d0>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d132      	bne.n	800803a <UART_SetConfig+0x12e>
 8007fd4:	4b80      	ldr	r3, [pc, #512]	; (80081d8 <UART_SetConfig+0x2cc>)
 8007fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fda:	f003 030c 	and.w	r3, r3, #12
 8007fde:	2b0c      	cmp	r3, #12
 8007fe0:	d828      	bhi.n	8008034 <UART_SetConfig+0x128>
 8007fe2:	a201      	add	r2, pc, #4	; (adr r2, 8007fe8 <UART_SetConfig+0xdc>)
 8007fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe8:	0800801d 	.word	0x0800801d
 8007fec:	08008035 	.word	0x08008035
 8007ff0:	08008035 	.word	0x08008035
 8007ff4:	08008035 	.word	0x08008035
 8007ff8:	08008029 	.word	0x08008029
 8007ffc:	08008035 	.word	0x08008035
 8008000:	08008035 	.word	0x08008035
 8008004:	08008035 	.word	0x08008035
 8008008:	08008023 	.word	0x08008023
 800800c:	08008035 	.word	0x08008035
 8008010:	08008035 	.word	0x08008035
 8008014:	08008035 	.word	0x08008035
 8008018:	0800802f 	.word	0x0800802f
 800801c:	2300      	movs	r3, #0
 800801e:	77fb      	strb	r3, [r7, #31]
 8008020:	e118      	b.n	8008254 <UART_SetConfig+0x348>
 8008022:	2302      	movs	r3, #2
 8008024:	77fb      	strb	r3, [r7, #31]
 8008026:	e115      	b.n	8008254 <UART_SetConfig+0x348>
 8008028:	2304      	movs	r3, #4
 800802a:	77fb      	strb	r3, [r7, #31]
 800802c:	e112      	b.n	8008254 <UART_SetConfig+0x348>
 800802e:	2308      	movs	r3, #8
 8008030:	77fb      	strb	r3, [r7, #31]
 8008032:	e10f      	b.n	8008254 <UART_SetConfig+0x348>
 8008034:	2310      	movs	r3, #16
 8008036:	77fb      	strb	r3, [r7, #31]
 8008038:	e10c      	b.n	8008254 <UART_SetConfig+0x348>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a68      	ldr	r2, [pc, #416]	; (80081e0 <UART_SetConfig+0x2d4>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d120      	bne.n	8008086 <UART_SetConfig+0x17a>
 8008044:	4b64      	ldr	r3, [pc, #400]	; (80081d8 <UART_SetConfig+0x2cc>)
 8008046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800804a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800804e:	2b30      	cmp	r3, #48	; 0x30
 8008050:	d013      	beq.n	800807a <UART_SetConfig+0x16e>
 8008052:	2b30      	cmp	r3, #48	; 0x30
 8008054:	d814      	bhi.n	8008080 <UART_SetConfig+0x174>
 8008056:	2b20      	cmp	r3, #32
 8008058:	d009      	beq.n	800806e <UART_SetConfig+0x162>
 800805a:	2b20      	cmp	r3, #32
 800805c:	d810      	bhi.n	8008080 <UART_SetConfig+0x174>
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <UART_SetConfig+0x15c>
 8008062:	2b10      	cmp	r3, #16
 8008064:	d006      	beq.n	8008074 <UART_SetConfig+0x168>
 8008066:	e00b      	b.n	8008080 <UART_SetConfig+0x174>
 8008068:	2300      	movs	r3, #0
 800806a:	77fb      	strb	r3, [r7, #31]
 800806c:	e0f2      	b.n	8008254 <UART_SetConfig+0x348>
 800806e:	2302      	movs	r3, #2
 8008070:	77fb      	strb	r3, [r7, #31]
 8008072:	e0ef      	b.n	8008254 <UART_SetConfig+0x348>
 8008074:	2304      	movs	r3, #4
 8008076:	77fb      	strb	r3, [r7, #31]
 8008078:	e0ec      	b.n	8008254 <UART_SetConfig+0x348>
 800807a:	2308      	movs	r3, #8
 800807c:	77fb      	strb	r3, [r7, #31]
 800807e:	e0e9      	b.n	8008254 <UART_SetConfig+0x348>
 8008080:	2310      	movs	r3, #16
 8008082:	77fb      	strb	r3, [r7, #31]
 8008084:	e0e6      	b.n	8008254 <UART_SetConfig+0x348>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a56      	ldr	r2, [pc, #344]	; (80081e4 <UART_SetConfig+0x2d8>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d120      	bne.n	80080d2 <UART_SetConfig+0x1c6>
 8008090:	4b51      	ldr	r3, [pc, #324]	; (80081d8 <UART_SetConfig+0x2cc>)
 8008092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008096:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800809a:	2bc0      	cmp	r3, #192	; 0xc0
 800809c:	d013      	beq.n	80080c6 <UART_SetConfig+0x1ba>
 800809e:	2bc0      	cmp	r3, #192	; 0xc0
 80080a0:	d814      	bhi.n	80080cc <UART_SetConfig+0x1c0>
 80080a2:	2b80      	cmp	r3, #128	; 0x80
 80080a4:	d009      	beq.n	80080ba <UART_SetConfig+0x1ae>
 80080a6:	2b80      	cmp	r3, #128	; 0x80
 80080a8:	d810      	bhi.n	80080cc <UART_SetConfig+0x1c0>
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <UART_SetConfig+0x1a8>
 80080ae:	2b40      	cmp	r3, #64	; 0x40
 80080b0:	d006      	beq.n	80080c0 <UART_SetConfig+0x1b4>
 80080b2:	e00b      	b.n	80080cc <UART_SetConfig+0x1c0>
 80080b4:	2300      	movs	r3, #0
 80080b6:	77fb      	strb	r3, [r7, #31]
 80080b8:	e0cc      	b.n	8008254 <UART_SetConfig+0x348>
 80080ba:	2302      	movs	r3, #2
 80080bc:	77fb      	strb	r3, [r7, #31]
 80080be:	e0c9      	b.n	8008254 <UART_SetConfig+0x348>
 80080c0:	2304      	movs	r3, #4
 80080c2:	77fb      	strb	r3, [r7, #31]
 80080c4:	e0c6      	b.n	8008254 <UART_SetConfig+0x348>
 80080c6:	2308      	movs	r3, #8
 80080c8:	77fb      	strb	r3, [r7, #31]
 80080ca:	e0c3      	b.n	8008254 <UART_SetConfig+0x348>
 80080cc:	2310      	movs	r3, #16
 80080ce:	77fb      	strb	r3, [r7, #31]
 80080d0:	e0c0      	b.n	8008254 <UART_SetConfig+0x348>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a44      	ldr	r2, [pc, #272]	; (80081e8 <UART_SetConfig+0x2dc>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d125      	bne.n	8008128 <UART_SetConfig+0x21c>
 80080dc:	4b3e      	ldr	r3, [pc, #248]	; (80081d8 <UART_SetConfig+0x2cc>)
 80080de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080ea:	d017      	beq.n	800811c <UART_SetConfig+0x210>
 80080ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080f0:	d817      	bhi.n	8008122 <UART_SetConfig+0x216>
 80080f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080f6:	d00b      	beq.n	8008110 <UART_SetConfig+0x204>
 80080f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080fc:	d811      	bhi.n	8008122 <UART_SetConfig+0x216>
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <UART_SetConfig+0x1fe>
 8008102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008106:	d006      	beq.n	8008116 <UART_SetConfig+0x20a>
 8008108:	e00b      	b.n	8008122 <UART_SetConfig+0x216>
 800810a:	2300      	movs	r3, #0
 800810c:	77fb      	strb	r3, [r7, #31]
 800810e:	e0a1      	b.n	8008254 <UART_SetConfig+0x348>
 8008110:	2302      	movs	r3, #2
 8008112:	77fb      	strb	r3, [r7, #31]
 8008114:	e09e      	b.n	8008254 <UART_SetConfig+0x348>
 8008116:	2304      	movs	r3, #4
 8008118:	77fb      	strb	r3, [r7, #31]
 800811a:	e09b      	b.n	8008254 <UART_SetConfig+0x348>
 800811c:	2308      	movs	r3, #8
 800811e:	77fb      	strb	r3, [r7, #31]
 8008120:	e098      	b.n	8008254 <UART_SetConfig+0x348>
 8008122:	2310      	movs	r3, #16
 8008124:	77fb      	strb	r3, [r7, #31]
 8008126:	e095      	b.n	8008254 <UART_SetConfig+0x348>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a2f      	ldr	r2, [pc, #188]	; (80081ec <UART_SetConfig+0x2e0>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d125      	bne.n	800817e <UART_SetConfig+0x272>
 8008132:	4b29      	ldr	r3, [pc, #164]	; (80081d8 <UART_SetConfig+0x2cc>)
 8008134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008138:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800813c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008140:	d017      	beq.n	8008172 <UART_SetConfig+0x266>
 8008142:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008146:	d817      	bhi.n	8008178 <UART_SetConfig+0x26c>
 8008148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800814c:	d00b      	beq.n	8008166 <UART_SetConfig+0x25a>
 800814e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008152:	d811      	bhi.n	8008178 <UART_SetConfig+0x26c>
 8008154:	2b00      	cmp	r3, #0
 8008156:	d003      	beq.n	8008160 <UART_SetConfig+0x254>
 8008158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800815c:	d006      	beq.n	800816c <UART_SetConfig+0x260>
 800815e:	e00b      	b.n	8008178 <UART_SetConfig+0x26c>
 8008160:	2301      	movs	r3, #1
 8008162:	77fb      	strb	r3, [r7, #31]
 8008164:	e076      	b.n	8008254 <UART_SetConfig+0x348>
 8008166:	2302      	movs	r3, #2
 8008168:	77fb      	strb	r3, [r7, #31]
 800816a:	e073      	b.n	8008254 <UART_SetConfig+0x348>
 800816c:	2304      	movs	r3, #4
 800816e:	77fb      	strb	r3, [r7, #31]
 8008170:	e070      	b.n	8008254 <UART_SetConfig+0x348>
 8008172:	2308      	movs	r3, #8
 8008174:	77fb      	strb	r3, [r7, #31]
 8008176:	e06d      	b.n	8008254 <UART_SetConfig+0x348>
 8008178:	2310      	movs	r3, #16
 800817a:	77fb      	strb	r3, [r7, #31]
 800817c:	e06a      	b.n	8008254 <UART_SetConfig+0x348>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a1b      	ldr	r2, [pc, #108]	; (80081f0 <UART_SetConfig+0x2e4>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d138      	bne.n	80081fa <UART_SetConfig+0x2ee>
 8008188:	4b13      	ldr	r3, [pc, #76]	; (80081d8 <UART_SetConfig+0x2cc>)
 800818a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800818e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008192:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008196:	d017      	beq.n	80081c8 <UART_SetConfig+0x2bc>
 8008198:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800819c:	d82a      	bhi.n	80081f4 <UART_SetConfig+0x2e8>
 800819e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081a2:	d00b      	beq.n	80081bc <UART_SetConfig+0x2b0>
 80081a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081a8:	d824      	bhi.n	80081f4 <UART_SetConfig+0x2e8>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <UART_SetConfig+0x2aa>
 80081ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b2:	d006      	beq.n	80081c2 <UART_SetConfig+0x2b6>
 80081b4:	e01e      	b.n	80081f4 <UART_SetConfig+0x2e8>
 80081b6:	2300      	movs	r3, #0
 80081b8:	77fb      	strb	r3, [r7, #31]
 80081ba:	e04b      	b.n	8008254 <UART_SetConfig+0x348>
 80081bc:	2302      	movs	r3, #2
 80081be:	77fb      	strb	r3, [r7, #31]
 80081c0:	e048      	b.n	8008254 <UART_SetConfig+0x348>
 80081c2:	2304      	movs	r3, #4
 80081c4:	77fb      	strb	r3, [r7, #31]
 80081c6:	e045      	b.n	8008254 <UART_SetConfig+0x348>
 80081c8:	2308      	movs	r3, #8
 80081ca:	77fb      	strb	r3, [r7, #31]
 80081cc:	e042      	b.n	8008254 <UART_SetConfig+0x348>
 80081ce:	bf00      	nop
 80081d0:	efff69f3 	.word	0xefff69f3
 80081d4:	40011000 	.word	0x40011000
 80081d8:	40023800 	.word	0x40023800
 80081dc:	40004400 	.word	0x40004400
 80081e0:	40004800 	.word	0x40004800
 80081e4:	40004c00 	.word	0x40004c00
 80081e8:	40005000 	.word	0x40005000
 80081ec:	40011400 	.word	0x40011400
 80081f0:	40007800 	.word	0x40007800
 80081f4:	2310      	movs	r3, #16
 80081f6:	77fb      	strb	r3, [r7, #31]
 80081f8:	e02c      	b.n	8008254 <UART_SetConfig+0x348>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a72      	ldr	r2, [pc, #456]	; (80083c8 <UART_SetConfig+0x4bc>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d125      	bne.n	8008250 <UART_SetConfig+0x344>
 8008204:	4b71      	ldr	r3, [pc, #452]	; (80083cc <UART_SetConfig+0x4c0>)
 8008206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800820e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008212:	d017      	beq.n	8008244 <UART_SetConfig+0x338>
 8008214:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008218:	d817      	bhi.n	800824a <UART_SetConfig+0x33e>
 800821a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800821e:	d00b      	beq.n	8008238 <UART_SetConfig+0x32c>
 8008220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008224:	d811      	bhi.n	800824a <UART_SetConfig+0x33e>
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <UART_SetConfig+0x326>
 800822a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800822e:	d006      	beq.n	800823e <UART_SetConfig+0x332>
 8008230:	e00b      	b.n	800824a <UART_SetConfig+0x33e>
 8008232:	2300      	movs	r3, #0
 8008234:	77fb      	strb	r3, [r7, #31]
 8008236:	e00d      	b.n	8008254 <UART_SetConfig+0x348>
 8008238:	2302      	movs	r3, #2
 800823a:	77fb      	strb	r3, [r7, #31]
 800823c:	e00a      	b.n	8008254 <UART_SetConfig+0x348>
 800823e:	2304      	movs	r3, #4
 8008240:	77fb      	strb	r3, [r7, #31]
 8008242:	e007      	b.n	8008254 <UART_SetConfig+0x348>
 8008244:	2308      	movs	r3, #8
 8008246:	77fb      	strb	r3, [r7, #31]
 8008248:	e004      	b.n	8008254 <UART_SetConfig+0x348>
 800824a:	2310      	movs	r3, #16
 800824c:	77fb      	strb	r3, [r7, #31]
 800824e:	e001      	b.n	8008254 <UART_SetConfig+0x348>
 8008250:	2310      	movs	r3, #16
 8008252:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800825c:	d15b      	bne.n	8008316 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800825e:	7ffb      	ldrb	r3, [r7, #31]
 8008260:	2b08      	cmp	r3, #8
 8008262:	d828      	bhi.n	80082b6 <UART_SetConfig+0x3aa>
 8008264:	a201      	add	r2, pc, #4	; (adr r2, 800826c <UART_SetConfig+0x360>)
 8008266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826a:	bf00      	nop
 800826c:	08008291 	.word	0x08008291
 8008270:	08008299 	.word	0x08008299
 8008274:	080082a1 	.word	0x080082a1
 8008278:	080082b7 	.word	0x080082b7
 800827c:	080082a7 	.word	0x080082a7
 8008280:	080082b7 	.word	0x080082b7
 8008284:	080082b7 	.word	0x080082b7
 8008288:	080082b7 	.word	0x080082b7
 800828c:	080082af 	.word	0x080082af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008290:	f7fd f888 	bl	80053a4 <HAL_RCC_GetPCLK1Freq>
 8008294:	61b8      	str	r0, [r7, #24]
        break;
 8008296:	e013      	b.n	80082c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008298:	f7fd f898 	bl	80053cc <HAL_RCC_GetPCLK2Freq>
 800829c:	61b8      	str	r0, [r7, #24]
        break;
 800829e:	e00f      	b.n	80082c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082a0:	4b4b      	ldr	r3, [pc, #300]	; (80083d0 <UART_SetConfig+0x4c4>)
 80082a2:	61bb      	str	r3, [r7, #24]
        break;
 80082a4:	e00c      	b.n	80082c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082a6:	f7fc ff6b 	bl	8005180 <HAL_RCC_GetSysClockFreq>
 80082aa:	61b8      	str	r0, [r7, #24]
        break;
 80082ac:	e008      	b.n	80082c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082b2:	61bb      	str	r3, [r7, #24]
        break;
 80082b4:	e004      	b.n	80082c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80082b6:	2300      	movs	r3, #0
 80082b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	77bb      	strb	r3, [r7, #30]
        break;
 80082be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d074      	beq.n	80083b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	005a      	lsls	r2, r3, #1
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	085b      	lsrs	r3, r3, #1
 80082d0:	441a      	add	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	2b0f      	cmp	r3, #15
 80082e0:	d916      	bls.n	8008310 <UART_SetConfig+0x404>
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082e8:	d212      	bcs.n	8008310 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	f023 030f 	bic.w	r3, r3, #15
 80082f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	085b      	lsrs	r3, r3, #1
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	f003 0307 	and.w	r3, r3, #7
 80082fe:	b29a      	uxth	r2, r3
 8008300:	89fb      	ldrh	r3, [r7, #14]
 8008302:	4313      	orrs	r3, r2
 8008304:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	89fa      	ldrh	r2, [r7, #14]
 800830c:	60da      	str	r2, [r3, #12]
 800830e:	e04f      	b.n	80083b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	77bb      	strb	r3, [r7, #30]
 8008314:	e04c      	b.n	80083b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008316:	7ffb      	ldrb	r3, [r7, #31]
 8008318:	2b08      	cmp	r3, #8
 800831a:	d828      	bhi.n	800836e <UART_SetConfig+0x462>
 800831c:	a201      	add	r2, pc, #4	; (adr r2, 8008324 <UART_SetConfig+0x418>)
 800831e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008322:	bf00      	nop
 8008324:	08008349 	.word	0x08008349
 8008328:	08008351 	.word	0x08008351
 800832c:	08008359 	.word	0x08008359
 8008330:	0800836f 	.word	0x0800836f
 8008334:	0800835f 	.word	0x0800835f
 8008338:	0800836f 	.word	0x0800836f
 800833c:	0800836f 	.word	0x0800836f
 8008340:	0800836f 	.word	0x0800836f
 8008344:	08008367 	.word	0x08008367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008348:	f7fd f82c 	bl	80053a4 <HAL_RCC_GetPCLK1Freq>
 800834c:	61b8      	str	r0, [r7, #24]
        break;
 800834e:	e013      	b.n	8008378 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008350:	f7fd f83c 	bl	80053cc <HAL_RCC_GetPCLK2Freq>
 8008354:	61b8      	str	r0, [r7, #24]
        break;
 8008356:	e00f      	b.n	8008378 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008358:	4b1d      	ldr	r3, [pc, #116]	; (80083d0 <UART_SetConfig+0x4c4>)
 800835a:	61bb      	str	r3, [r7, #24]
        break;
 800835c:	e00c      	b.n	8008378 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800835e:	f7fc ff0f 	bl	8005180 <HAL_RCC_GetSysClockFreq>
 8008362:	61b8      	str	r0, [r7, #24]
        break;
 8008364:	e008      	b.n	8008378 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800836a:	61bb      	str	r3, [r7, #24]
        break;
 800836c:	e004      	b.n	8008378 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800836e:	2300      	movs	r3, #0
 8008370:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	77bb      	strb	r3, [r7, #30]
        break;
 8008376:	bf00      	nop
    }

    if (pclk != 0U)
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d018      	beq.n	80083b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	085a      	lsrs	r2, r3, #1
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	441a      	add	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008390:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	2b0f      	cmp	r3, #15
 8008396:	d909      	bls.n	80083ac <UART_SetConfig+0x4a0>
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800839e:	d205      	bcs.n	80083ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	60da      	str	r2, [r3, #12]
 80083aa:	e001      	b.n	80083b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80083bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3720      	adds	r7, #32
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	40007c00 	.word	0x40007c00
 80083cc:	40023800 	.word	0x40023800
 80083d0:	00f42400 	.word	0x00f42400

080083d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00a      	beq.n	80083fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008424:	f003 0304 	and.w	r3, r3, #4
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00a      	beq.n	8008442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008446:	f003 0308 	and.w	r3, r3, #8
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008468:	f003 0310 	and.w	r3, r3, #16
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00a      	beq.n	8008486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848a:	f003 0320 	and.w	r3, r3, #32
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d01a      	beq.n	80084ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084d2:	d10a      	bne.n	80084ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00a      	beq.n	800850c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	430a      	orrs	r2, r1
 800850a:	605a      	str	r2, [r3, #4]
  }
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af02      	add	r7, sp, #8
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008528:	f7fa fd6c 	bl	8003004 <HAL_GetTick>
 800852c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0308 	and.w	r3, r3, #8
 8008538:	2b08      	cmp	r3, #8
 800853a:	d10e      	bne.n	800855a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800853c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f831 	bl	80085b2 <UART_WaitOnFlagUntilTimeout>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e027      	b.n	80085aa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	2b04      	cmp	r3, #4
 8008566:	d10e      	bne.n	8008586 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f81b 	bl	80085b2 <UART_WaitOnFlagUntilTimeout>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e011      	b.n	80085aa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2220      	movs	r2, #32
 800858a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2220      	movs	r2, #32
 8008590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b09c      	sub	sp, #112	; 0x70
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	60f8      	str	r0, [r7, #12]
 80085ba:	60b9      	str	r1, [r7, #8]
 80085bc:	603b      	str	r3, [r7, #0]
 80085be:	4613      	mov	r3, r2
 80085c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085c2:	e0a7      	b.n	8008714 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ca:	f000 80a3 	beq.w	8008714 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ce:	f7fa fd19 	bl	8003004 <HAL_GetTick>
 80085d2:	4602      	mov	r2, r0
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80085da:	429a      	cmp	r2, r3
 80085dc:	d302      	bcc.n	80085e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80085de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d13f      	bne.n	8008664 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80085f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085f8:	667b      	str	r3, [r7, #100]	; 0x64
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008602:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008604:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008608:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e6      	bne.n	80085e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3308      	adds	r3, #8
 800861c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008628:	f023 0301 	bic.w	r3, r3, #1
 800862c:	663b      	str	r3, [r7, #96]	; 0x60
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3308      	adds	r3, #8
 8008634:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008636:	64ba      	str	r2, [r7, #72]	; 0x48
 8008638:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800863c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800863e:	e841 2300 	strex	r3, r2, [r1]
 8008642:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1e5      	bne.n	8008616 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2220      	movs	r2, #32
 800864e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2220      	movs	r2, #32
 8008654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008660:	2303      	movs	r3, #3
 8008662:	e068      	b.n	8008736 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0304 	and.w	r3, r3, #4
 800866e:	2b00      	cmp	r3, #0
 8008670:	d050      	beq.n	8008714 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	69db      	ldr	r3, [r3, #28]
 8008678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800867c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008680:	d148      	bne.n	8008714 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800868a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	e853 3f00 	ldrex	r3, [r3]
 8008698:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086aa:	637b      	str	r3, [r7, #52]	; 0x34
 80086ac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086b2:	e841 2300 	strex	r3, r2, [r1]
 80086b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1e6      	bne.n	800868c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3308      	adds	r3, #8
 80086c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	613b      	str	r3, [r7, #16]
   return(result);
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	f023 0301 	bic.w	r3, r3, #1
 80086d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3308      	adds	r3, #8
 80086dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086de:	623a      	str	r2, [r7, #32]
 80086e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e2:	69f9      	ldr	r1, [r7, #28]
 80086e4:	6a3a      	ldr	r2, [r7, #32]
 80086e6:	e841 2300 	strex	r3, r2, [r1]
 80086ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1e5      	bne.n	80086be <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2220      	movs	r2, #32
 80086f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2220      	movs	r2, #32
 80086fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2220      	movs	r2, #32
 8008704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e010      	b.n	8008736 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	69da      	ldr	r2, [r3, #28]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	4013      	ands	r3, r2
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	429a      	cmp	r2, r3
 8008722:	bf0c      	ite	eq
 8008724:	2301      	moveq	r3, #1
 8008726:	2300      	movne	r3, #0
 8008728:	b2db      	uxtb	r3, r3
 800872a:	461a      	mov	r2, r3
 800872c:	79fb      	ldrb	r3, [r7, #7]
 800872e:	429a      	cmp	r2, r3
 8008730:	f43f af48 	beq.w	80085c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3770      	adds	r7, #112	; 0x70
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008740:	b480      	push	{r7}
 8008742:	b097      	sub	sp, #92	; 0x5c
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	4613      	mov	r3, r2
 800874c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	88fa      	ldrh	r2, [r7, #6]
 8008758:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	88fa      	ldrh	r2, [r7, #6]
 8008760:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008772:	d10e      	bne.n	8008792 <UART_Start_Receive_IT+0x52>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d105      	bne.n	8008788 <UART_Start_Receive_IT+0x48>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008782:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008786:	e02d      	b.n	80087e4 <UART_Start_Receive_IT+0xa4>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	22ff      	movs	r2, #255	; 0xff
 800878c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008790:	e028      	b.n	80087e4 <UART_Start_Receive_IT+0xa4>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10d      	bne.n	80087b6 <UART_Start_Receive_IT+0x76>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d104      	bne.n	80087ac <UART_Start_Receive_IT+0x6c>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	22ff      	movs	r2, #255	; 0xff
 80087a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087aa:	e01b      	b.n	80087e4 <UART_Start_Receive_IT+0xa4>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	227f      	movs	r2, #127	; 0x7f
 80087b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087b4:	e016      	b.n	80087e4 <UART_Start_Receive_IT+0xa4>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087be:	d10d      	bne.n	80087dc <UART_Start_Receive_IT+0x9c>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d104      	bne.n	80087d2 <UART_Start_Receive_IT+0x92>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	227f      	movs	r2, #127	; 0x7f
 80087cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087d0:	e008      	b.n	80087e4 <UART_Start_Receive_IT+0xa4>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	223f      	movs	r2, #63	; 0x3f
 80087d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087da:	e003      	b.n	80087e4 <UART_Start_Receive_IT+0xa4>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2200      	movs	r2, #0
 80087e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2222      	movs	r2, #34	; 0x22
 80087f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3308      	adds	r3, #8
 80087fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087fe:	e853 3f00 	ldrex	r3, [r3]
 8008802:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008806:	f043 0301 	orr.w	r3, r3, #1
 800880a:	657b      	str	r3, [r7, #84]	; 0x54
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3308      	adds	r3, #8
 8008812:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008814:	64ba      	str	r2, [r7, #72]	; 0x48
 8008816:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008818:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800881a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800881c:	e841 2300 	strex	r3, r2, [r1]
 8008820:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1e5      	bne.n	80087f4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008830:	d107      	bne.n	8008842 <UART_Start_Receive_IT+0x102>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d103      	bne.n	8008842 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	4a21      	ldr	r2, [pc, #132]	; (80088c4 <UART_Start_Receive_IT+0x184>)
 800883e:	669a      	str	r2, [r3, #104]	; 0x68
 8008840:	e002      	b.n	8008848 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4a20      	ldr	r2, [pc, #128]	; (80088c8 <UART_Start_Receive_IT+0x188>)
 8008846:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d019      	beq.n	8008884 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008858:	e853 3f00 	ldrex	r3, [r3]
 800885c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008864:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800886e:	637b      	str	r3, [r7, #52]	; 0x34
 8008870:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008872:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008876:	e841 2300 	strex	r3, r2, [r1]
 800887a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800887c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1e6      	bne.n	8008850 <UART_Start_Receive_IT+0x110>
 8008882:	e018      	b.n	80088b6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	e853 3f00 	ldrex	r3, [r3]
 8008890:	613b      	str	r3, [r7, #16]
   return(result);
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f043 0320 	orr.w	r3, r3, #32
 8008898:	653b      	str	r3, [r7, #80]	; 0x50
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088a2:	623b      	str	r3, [r7, #32]
 80088a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a6:	69f9      	ldr	r1, [r7, #28]
 80088a8:	6a3a      	ldr	r2, [r7, #32]
 80088aa:	e841 2300 	strex	r3, r2, [r1]
 80088ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1e6      	bne.n	8008884 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	375c      	adds	r7, #92	; 0x5c
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	08008b7b 	.word	0x08008b7b
 80088c8:	08008a15 	.word	0x08008a15

080088cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b095      	sub	sp, #84	; 0x54
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f2:	643b      	str	r3, [r7, #64]	; 0x40
 80088f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e6      	bne.n	80088d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3308      	adds	r3, #8
 800890c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890e:	6a3b      	ldr	r3, [r7, #32]
 8008910:	e853 3f00 	ldrex	r3, [r3]
 8008914:	61fb      	str	r3, [r7, #28]
   return(result);
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	f023 0301 	bic.w	r3, r3, #1
 800891c:	64bb      	str	r3, [r7, #72]	; 0x48
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3308      	adds	r3, #8
 8008924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008928:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800892c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800892e:	e841 2300 	strex	r3, r2, [r1]
 8008932:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1e5      	bne.n	8008906 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800893e:	2b01      	cmp	r3, #1
 8008940:	d118      	bne.n	8008974 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	e853 3f00 	ldrex	r3, [r3]
 800894e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f023 0310 	bic.w	r3, r3, #16
 8008956:	647b      	str	r3, [r7, #68]	; 0x44
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	461a      	mov	r2, r3
 800895e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008960:	61bb      	str	r3, [r7, #24]
 8008962:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008964:	6979      	ldr	r1, [r7, #20]
 8008966:	69ba      	ldr	r2, [r7, #24]
 8008968:	e841 2300 	strex	r3, r2, [r1]
 800896c:	613b      	str	r3, [r7, #16]
   return(result);
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1e6      	bne.n	8008942 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2220      	movs	r2, #32
 8008978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008988:	bf00      	nop
 800898a:	3754      	adds	r7, #84	; 0x54
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f7ff fa8a 	bl	8007ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089b8:	bf00      	nop
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	e853 3f00 	ldrex	r3, [r3]
 80089d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089dc:	61fb      	str	r3, [r7, #28]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	61bb      	str	r3, [r7, #24]
 80089e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ea:	6979      	ldr	r1, [r7, #20]
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	e841 2300 	strex	r3, r2, [r1]
 80089f2:	613b      	str	r3, [r7, #16]
   return(result);
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1e6      	bne.n	80089c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2220      	movs	r2, #32
 80089fe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff fa56 	bl	8007eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a0c:	bf00      	nop
 8008a0e:	3720      	adds	r7, #32
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b096      	sub	sp, #88	; 0x58
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a22:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a2c:	2b22      	cmp	r3, #34	; 0x22
 8008a2e:	f040 8098 	bne.w	8008b62 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a3c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008a40:	b2d9      	uxtb	r1, r3
 8008a42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a4c:	400a      	ands	r2, r1
 8008a4e:	b2d2      	uxtb	r2, r2
 8008a50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a56:	1c5a      	adds	r2, r3, #1
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	3b01      	subs	r3, #1
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d17b      	bne.n	8008b72 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a82:	e853 3f00 	ldrex	r3, [r3]
 8008a86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	461a      	mov	r2, r3
 8008a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a98:	647b      	str	r3, [r7, #68]	; 0x44
 8008a9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008aa0:	e841 2300 	strex	r3, r2, [r1]
 8008aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1e6      	bne.n	8008a7a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	3308      	adds	r3, #8
 8008ab2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	e853 3f00 	ldrex	r3, [r3]
 8008aba:	623b      	str	r3, [r7, #32]
   return(result);
 8008abc:	6a3b      	ldr	r3, [r7, #32]
 8008abe:	f023 0301 	bic.w	r3, r3, #1
 8008ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	3308      	adds	r3, #8
 8008aca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008acc:	633a      	str	r2, [r7, #48]	; 0x30
 8008ace:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ad4:	e841 2300 	strex	r3, r2, [r1]
 8008ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e5      	bne.n	8008aac <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d12e      	bne.n	8008b5a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	e853 3f00 	ldrex	r3, [r3]
 8008b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f023 0310 	bic.w	r3, r3, #16
 8008b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b20:	61fb      	str	r3, [r7, #28]
 8008b22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b24:	69b9      	ldr	r1, [r7, #24]
 8008b26:	69fa      	ldr	r2, [r7, #28]
 8008b28:	e841 2300 	strex	r3, r2, [r1]
 8008b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1e6      	bne.n	8008b02 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	f003 0310 	and.w	r3, r3, #16
 8008b3e:	2b10      	cmp	r3, #16
 8008b40:	d103      	bne.n	8008b4a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2210      	movs	r2, #16
 8008b48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7ff f9c4 	bl	8007ee0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b58:	e00b      	b.n	8008b72 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7f9 f8fe 	bl	8001d5c <HAL_UART_RxCpltCallback>
}
 8008b60:	e007      	b.n	8008b72 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	699a      	ldr	r2, [r3, #24]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f042 0208 	orr.w	r2, r2, #8
 8008b70:	619a      	str	r2, [r3, #24]
}
 8008b72:	bf00      	nop
 8008b74:	3758      	adds	r7, #88	; 0x58
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b096      	sub	sp, #88	; 0x58
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b88:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b92:	2b22      	cmp	r3, #34	; 0x22
 8008b94:	f040 8098 	bne.w	8008cc8 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008ba8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008bac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bb6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bbc:	1c9a      	adds	r2, r3, #2
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d17b      	bne.n	8008cd8 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be8:	e853 3f00 	ldrex	r3, [r3]
 8008bec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bfe:	643b      	str	r3, [r7, #64]	; 0x40
 8008c00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c06:	e841 2300 	strex	r3, r2, [r1]
 8008c0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1e6      	bne.n	8008be0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	3308      	adds	r3, #8
 8008c18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	e853 3f00 	ldrex	r3, [r3]
 8008c20:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	f023 0301 	bic.w	r3, r3, #1
 8008c28:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	3308      	adds	r3, #8
 8008c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c3a:	e841 2300 	strex	r3, r2, [r1]
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1e5      	bne.n	8008c12 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d12e      	bne.n	8008cc0 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	e853 3f00 	ldrex	r3, [r3]
 8008c74:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f023 0310 	bic.w	r3, r3, #16
 8008c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	461a      	mov	r2, r3
 8008c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c86:	61bb      	str	r3, [r7, #24]
 8008c88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8a:	6979      	ldr	r1, [r7, #20]
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	e841 2300 	strex	r3, r2, [r1]
 8008c92:	613b      	str	r3, [r7, #16]
   return(result);
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1e6      	bne.n	8008c68 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	69db      	ldr	r3, [r3, #28]
 8008ca0:	f003 0310 	and.w	r3, r3, #16
 8008ca4:	2b10      	cmp	r3, #16
 8008ca6:	d103      	bne.n	8008cb0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2210      	movs	r2, #16
 8008cae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7ff f911 	bl	8007ee0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008cbe:	e00b      	b.n	8008cd8 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7f9 f84b 	bl	8001d5c <HAL_UART_RxCpltCallback>
}
 8008cc6:	e007      	b.n	8008cd8 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	699a      	ldr	r2, [r3, #24]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f042 0208 	orr.w	r2, r2, #8
 8008cd6:	619a      	str	r2, [r3, #24]
}
 8008cd8:	bf00      	nop
 8008cda:	3758      	adds	r7, #88	; 0x58
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008ce0:	b480      	push	{r7}
 8008ce2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008ce4:	bf00      	nop
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
	...

08008cf0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cf6:	f3ef 8305 	mrs	r3, IPSR
 8008cfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8008cfc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10f      	bne.n	8008d22 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d02:	f3ef 8310 	mrs	r3, PRIMASK
 8008d06:	607b      	str	r3, [r7, #4]
  return(result);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d105      	bne.n	8008d1a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d0e:	f3ef 8311 	mrs	r3, BASEPRI
 8008d12:	603b      	str	r3, [r7, #0]
  return(result);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d007      	beq.n	8008d2a <osKernelInitialize+0x3a>
 8008d1a:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <osKernelInitialize+0x64>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d103      	bne.n	8008d2a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008d22:	f06f 0305 	mvn.w	r3, #5
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	e00c      	b.n	8008d44 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008d2a:	4b0a      	ldr	r3, [pc, #40]	; (8008d54 <osKernelInitialize+0x64>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d105      	bne.n	8008d3e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008d32:	4b08      	ldr	r3, [pc, #32]	; (8008d54 <osKernelInitialize+0x64>)
 8008d34:	2201      	movs	r2, #1
 8008d36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	e002      	b.n	8008d44 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008d44:	68fb      	ldr	r3, [r7, #12]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	200007f0 	.word	0x200007f0

08008d58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d5e:	f3ef 8305 	mrs	r3, IPSR
 8008d62:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10f      	bne.n	8008d8a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8008d6e:	607b      	str	r3, [r7, #4]
  return(result);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d105      	bne.n	8008d82 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d76:	f3ef 8311 	mrs	r3, BASEPRI
 8008d7a:	603b      	str	r3, [r7, #0]
  return(result);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d007      	beq.n	8008d92 <osKernelStart+0x3a>
 8008d82:	4b0f      	ldr	r3, [pc, #60]	; (8008dc0 <osKernelStart+0x68>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d103      	bne.n	8008d92 <osKernelStart+0x3a>
    stat = osErrorISR;
 8008d8a:	f06f 0305 	mvn.w	r3, #5
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	e010      	b.n	8008db4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008d92:	4b0b      	ldr	r3, [pc, #44]	; (8008dc0 <osKernelStart+0x68>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d109      	bne.n	8008dae <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008d9a:	f7ff ffa1 	bl	8008ce0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008d9e:	4b08      	ldr	r3, [pc, #32]	; (8008dc0 <osKernelStart+0x68>)
 8008da0:	2202      	movs	r2, #2
 8008da2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008da4:	f001 fb9a 	bl	800a4dc <vTaskStartScheduler>
      stat = osOK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	60fb      	str	r3, [r7, #12]
 8008dac:	e002      	b.n	8008db4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008dae:	f04f 33ff 	mov.w	r3, #4294967295
 8008db2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008db4:	68fb      	ldr	r3, [r7, #12]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	200007f0 	.word	0x200007f0

08008dc4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b090      	sub	sp, #64	; 0x40
 8008dc8:	af04      	add	r7, sp, #16
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dd4:	f3ef 8305 	mrs	r3, IPSR
 8008dd8:	61fb      	str	r3, [r7, #28]
  return(result);
 8008dda:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f040 808f 	bne.w	8008f00 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008de2:	f3ef 8310 	mrs	r3, PRIMASK
 8008de6:	61bb      	str	r3, [r7, #24]
  return(result);
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d105      	bne.n	8008dfa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008dee:	f3ef 8311 	mrs	r3, BASEPRI
 8008df2:	617b      	str	r3, [r7, #20]
  return(result);
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <osThreadNew+0x3e>
 8008dfa:	4b44      	ldr	r3, [pc, #272]	; (8008f0c <osThreadNew+0x148>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d07e      	beq.n	8008f00 <osThreadNew+0x13c>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d07b      	beq.n	8008f00 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008e08:	2380      	movs	r3, #128	; 0x80
 8008e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008e0c:	2318      	movs	r3, #24
 8008e0e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008e10:	2300      	movs	r3, #0
 8008e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008e14:	f04f 33ff 	mov.w	r3, #4294967295
 8008e18:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d045      	beq.n	8008eac <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <osThreadNew+0x6a>
        name = attr->name;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d002      	beq.n	8008e3c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d008      	beq.n	8008e54 <osThreadNew+0x90>
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	2b38      	cmp	r3, #56	; 0x38
 8008e46:	d805      	bhi.n	8008e54 <osThreadNew+0x90>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <osThreadNew+0x94>
        return (NULL);
 8008e54:	2300      	movs	r3, #0
 8008e56:	e054      	b.n	8008f02 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d003      	beq.n	8008e68 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	695b      	ldr	r3, [r3, #20]
 8008e64:	089b      	lsrs	r3, r3, #2
 8008e66:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00e      	beq.n	8008e8e <osThreadNew+0xca>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	2ba7      	cmp	r3, #167	; 0xa7
 8008e76:	d90a      	bls.n	8008e8e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d006      	beq.n	8008e8e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <osThreadNew+0xca>
        mem = 1;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	623b      	str	r3, [r7, #32]
 8008e8c:	e010      	b.n	8008eb0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10c      	bne.n	8008eb0 <osThreadNew+0xec>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d108      	bne.n	8008eb0 <osThreadNew+0xec>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d104      	bne.n	8008eb0 <osThreadNew+0xec>
          mem = 0;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	623b      	str	r3, [r7, #32]
 8008eaa:	e001      	b.n	8008eb0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d110      	bne.n	8008ed8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ebe:	9202      	str	r2, [sp, #8]
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 ff19 	bl	8009d04 <xTaskCreateStatic>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	613b      	str	r3, [r7, #16]
 8008ed6:	e013      	b.n	8008f00 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d110      	bne.n	8008f00 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	f107 0310 	add.w	r3, r7, #16
 8008ee6:	9301      	str	r3, [sp, #4]
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f000 ff6a 	bl	8009dca <xTaskCreate>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d001      	beq.n	8008f00 <osThreadNew+0x13c>
          hTask = NULL;
 8008efc:	2300      	movs	r3, #0
 8008efe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008f00:	693b      	ldr	r3, [r7, #16]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3730      	adds	r7, #48	; 0x30
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	200007f0 	.word	0x200007f0

08008f10 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f18:	f3ef 8305 	mrs	r3, IPSR
 8008f1c:	613b      	str	r3, [r7, #16]
  return(result);
 8008f1e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10f      	bne.n	8008f44 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f24:	f3ef 8310 	mrs	r3, PRIMASK
 8008f28:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d105      	bne.n	8008f3c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f30:	f3ef 8311 	mrs	r3, BASEPRI
 8008f34:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d007      	beq.n	8008f4c <osDelay+0x3c>
 8008f3c:	4b0a      	ldr	r3, [pc, #40]	; (8008f68 <osDelay+0x58>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d103      	bne.n	8008f4c <osDelay+0x3c>
    stat = osErrorISR;
 8008f44:	f06f 0305 	mvn.w	r3, #5
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	e007      	b.n	8008f5c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d002      	beq.n	8008f5c <osDelay+0x4c>
      vTaskDelay(ticks);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f001 f908 	bl	800a16c <vTaskDelay>
    }
  }

  return (stat);
 8008f5c:	697b      	ldr	r3, [r7, #20]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	200007f0 	.word	0x200007f0

08008f6c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f002 fc03 	bl	800b780 <pvTimerGetTimerID>
 8008f7a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d005      	beq.n	8008f8e <TimerCallback+0x22>
    callb->func (callb->arg);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	6852      	ldr	r2, [r2, #4]
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	4798      	blx	r3
  }
}
 8008f8e:	bf00      	nop
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
	...

08008f98 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b08e      	sub	sp, #56	; 0x38
 8008f9c:	af02      	add	r7, sp, #8
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	607a      	str	r2, [r7, #4]
 8008fa2:	603b      	str	r3, [r7, #0]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fac:	f3ef 8305 	mrs	r3, IPSR
 8008fb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8008fb2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d16a      	bne.n	800908e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8008fbc:	617b      	str	r3, [r7, #20]
  return(result);
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d105      	bne.n	8008fd0 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fc4:	f3ef 8311 	mrs	r3, BASEPRI
 8008fc8:	613b      	str	r3, [r7, #16]
  return(result);
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <osTimerNew+0x40>
 8008fd0:	4b31      	ldr	r3, [pc, #196]	; (8009098 <osTimerNew+0x100>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d05a      	beq.n	800908e <osTimerNew+0xf6>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d057      	beq.n	800908e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8008fde:	2008      	movs	r0, #8
 8008fe0:	f002 fe28 	bl	800bc34 <pvPortMalloc>
 8008fe4:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d050      	beq.n	800908e <osTimerNew+0xf6>
      callb->func = func;
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008ff8:	7afb      	ldrb	r3, [r7, #11]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d102      	bne.n	8009004 <osTimerNew+0x6c>
        reload = pdFALSE;
 8008ffe:	2300      	movs	r3, #0
 8009000:	627b      	str	r3, [r7, #36]	; 0x24
 8009002:	e001      	b.n	8009008 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8009004:	2301      	movs	r3, #1
 8009006:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8009008:	f04f 33ff 	mov.w	r3, #4294967295
 800900c:	623b      	str	r3, [r7, #32]
      name = NULL;
 800900e:	2300      	movs	r3, #0
 8009010:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d01c      	beq.n	8009052 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d002      	beq.n	8009026 <osTimerNew+0x8e>
          name = attr->name;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d006      	beq.n	800903c <osTimerNew+0xa4>
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	2b2b      	cmp	r3, #43	; 0x2b
 8009034:	d902      	bls.n	800903c <osTimerNew+0xa4>
          mem = 1;
 8009036:	2301      	movs	r3, #1
 8009038:	623b      	str	r3, [r7, #32]
 800903a:	e00c      	b.n	8009056 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d108      	bne.n	8009056 <osTimerNew+0xbe>
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d104      	bne.n	8009056 <osTimerNew+0xbe>
            mem = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	623b      	str	r3, [r7, #32]
 8009050:	e001      	b.n	8009056 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8009056:	6a3b      	ldr	r3, [r7, #32]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d10c      	bne.n	8009076 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	9301      	str	r3, [sp, #4]
 8009062:	4b0e      	ldr	r3, [pc, #56]	; (800909c <osTimerNew+0x104>)
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800906a:	2101      	movs	r1, #1
 800906c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800906e:	f001 fff6 	bl	800b05e <xTimerCreateStatic>
 8009072:	62b8      	str	r0, [r7, #40]	; 0x28
 8009074:	e00b      	b.n	800908e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d108      	bne.n	800908e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800907c:	4b07      	ldr	r3, [pc, #28]	; (800909c <osTimerNew+0x104>)
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009084:	2101      	movs	r1, #1
 8009086:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009088:	f001 ffc8 	bl	800b01c <xTimerCreate>
 800908c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800908e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009090:	4618      	mov	r0, r3
 8009092:	3730      	adds	r7, #48	; 0x30
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	200007f0 	.word	0x200007f0
 800909c:	08008f6d 	.word	0x08008f6d

080090a0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b08a      	sub	sp, #40	; 0x28
 80090a4:	af02      	add	r7, sp, #8
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090ae:	f3ef 8305 	mrs	r3, IPSR
 80090b2:	617b      	str	r3, [r7, #20]
  return(result);
 80090b4:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10f      	bne.n	80090da <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ba:	f3ef 8310 	mrs	r3, PRIMASK
 80090be:	613b      	str	r3, [r7, #16]
  return(result);
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d105      	bne.n	80090d2 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80090c6:	f3ef 8311 	mrs	r3, BASEPRI
 80090ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d007      	beq.n	80090e2 <osTimerStart+0x42>
 80090d2:	4b12      	ldr	r3, [pc, #72]	; (800911c <osTimerStart+0x7c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d103      	bne.n	80090e2 <osTimerStart+0x42>
    stat = osErrorISR;
 80090da:	f06f 0305 	mvn.w	r3, #5
 80090de:	61fb      	str	r3, [r7, #28]
 80090e0:	e017      	b.n	8009112 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d103      	bne.n	80090f0 <osTimerStart+0x50>
    stat = osErrorParameter;
 80090e8:	f06f 0303 	mvn.w	r3, #3
 80090ec:	61fb      	str	r3, [r7, #28]
 80090ee:	e010      	b.n	8009112 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80090f0:	2300      	movs	r3, #0
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	2300      	movs	r3, #0
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	2104      	movs	r1, #4
 80090fa:	69b8      	ldr	r0, [r7, #24]
 80090fc:	f002 f82e 	bl	800b15c <xTimerGenericCommand>
 8009100:	4603      	mov	r3, r0
 8009102:	2b01      	cmp	r3, #1
 8009104:	d102      	bne.n	800910c <osTimerStart+0x6c>
      stat = osOK;
 8009106:	2300      	movs	r3, #0
 8009108:	61fb      	str	r3, [r7, #28]
 800910a:	e002      	b.n	8009112 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800910c:	f06f 0302 	mvn.w	r3, #2
 8009110:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8009112:	69fb      	ldr	r3, [r7, #28]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3720      	adds	r7, #32
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	200007f0 	.word	0x200007f0

08009120 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4a07      	ldr	r2, [pc, #28]	; (800914c <vApplicationGetIdleTaskMemory+0x2c>)
 8009130:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	4a06      	ldr	r2, [pc, #24]	; (8009150 <vApplicationGetIdleTaskMemory+0x30>)
 8009136:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2280      	movs	r2, #128	; 0x80
 800913c:	601a      	str	r2, [r3, #0]
}
 800913e:	bf00      	nop
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	200007f4 	.word	0x200007f4
 8009150:	2000089c 	.word	0x2000089c

08009154 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4a07      	ldr	r2, [pc, #28]	; (8009180 <vApplicationGetTimerTaskMemory+0x2c>)
 8009164:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	4a06      	ldr	r2, [pc, #24]	; (8009184 <vApplicationGetTimerTaskMemory+0x30>)
 800916a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009172:	601a      	str	r2, [r3, #0]
}
 8009174:	bf00      	nop
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	20000a9c 	.word	0x20000a9c
 8009184:	20000b44 	.word	0x20000b44

08009188 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f103 0208 	add.w	r2, r3, #8
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f04f 32ff 	mov.w	r2, #4294967295
 80091a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f103 0208 	add.w	r2, r3, #8
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f103 0208 	add.w	r2, r3, #8
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091d6:	bf00      	nop
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091e2:	b480      	push	{r7}
 80091e4:	b085      	sub	sp, #20
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	689a      	ldr	r2, [r3, #8]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	1c5a      	adds	r2, r3, #1
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	601a      	str	r2, [r3, #0]
}
 800921e:	bf00      	nop
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800922a:	b480      	push	{r7}
 800922c:	b085      	sub	sp, #20
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009240:	d103      	bne.n	800924a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	e00c      	b.n	8009264 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	3308      	adds	r3, #8
 800924e:	60fb      	str	r3, [r7, #12]
 8009250:	e002      	b.n	8009258 <vListInsert+0x2e>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	429a      	cmp	r2, r3
 8009262:	d2f6      	bcs.n	8009252 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	1c5a      	adds	r2, r3, #1
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	601a      	str	r2, [r3, #0]
}
 8009290:	bf00      	nop
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	6892      	ldr	r2, [r2, #8]
 80092b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	6852      	ldr	r2, [r2, #4]
 80092bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d103      	bne.n	80092d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	1e5a      	subs	r2, r3, #1
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10c      	bne.n	800931e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	b672      	cpsid	i
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	b662      	cpsie	i
 8009318:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800931a:	bf00      	nop
 800931c:	e7fe      	b.n	800931c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800931e:	f002 fb5d 	bl	800b9dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932a:	68f9      	ldr	r1, [r7, #12]
 800932c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800932e:	fb01 f303 	mul.w	r3, r1, r3
 8009332:	441a      	add	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800934e:	3b01      	subs	r3, #1
 8009350:	68f9      	ldr	r1, [r7, #12]
 8009352:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009354:	fb01 f303 	mul.w	r3, r1, r3
 8009358:	441a      	add	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	22ff      	movs	r2, #255	; 0xff
 8009362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	22ff      	movs	r2, #255	; 0xff
 800936a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d114      	bne.n	800939e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d01a      	beq.n	80093b2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3310      	adds	r3, #16
 8009380:	4618      	mov	r0, r3
 8009382:	f001 fb53 	bl	800aa2c <xTaskRemoveFromEventList>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d012      	beq.n	80093b2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800938c:	4b0c      	ldr	r3, [pc, #48]	; (80093c0 <xQueueGenericReset+0xd0>)
 800938e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	e009      	b.n	80093b2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3310      	adds	r3, #16
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff fef0 	bl	8009188 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	3324      	adds	r3, #36	; 0x24
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7ff feeb 	bl	8009188 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80093b2:	f002 fb47 	bl	800ba44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80093b6:	2301      	movs	r3, #1
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	e000ed04 	.word	0xe000ed04

080093c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08e      	sub	sp, #56	; 0x38
 80093c8:	af02      	add	r7, sp, #8
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10c      	bne.n	80093f2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80093d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093dc:	b672      	cpsid	i
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	b662      	cpsie	i
 80093ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80093ee:	bf00      	nop
 80093f0:	e7fe      	b.n	80093f0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10c      	bne.n	8009412 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	b672      	cpsid	i
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	b662      	cpsie	i
 800940c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800940e:	bf00      	nop
 8009410:	e7fe      	b.n	8009410 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <xQueueGenericCreateStatic+0x5a>
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <xQueueGenericCreateStatic+0x5e>
 800941e:	2301      	movs	r3, #1
 8009420:	e000      	b.n	8009424 <xQueueGenericCreateStatic+0x60>
 8009422:	2300      	movs	r3, #0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10c      	bne.n	8009442 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8009428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942c:	b672      	cpsid	i
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	b662      	cpsie	i
 800943c:	623b      	str	r3, [r7, #32]
}
 800943e:	bf00      	nop
 8009440:	e7fe      	b.n	8009440 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d102      	bne.n	800944e <xQueueGenericCreateStatic+0x8a>
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <xQueueGenericCreateStatic+0x8e>
 800944e:	2301      	movs	r3, #1
 8009450:	e000      	b.n	8009454 <xQueueGenericCreateStatic+0x90>
 8009452:	2300      	movs	r3, #0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10c      	bne.n	8009472 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945c:	b672      	cpsid	i
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	b662      	cpsie	i
 800946c:	61fb      	str	r3, [r7, #28]
}
 800946e:	bf00      	nop
 8009470:	e7fe      	b.n	8009470 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009472:	2350      	movs	r3, #80	; 0x50
 8009474:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2b50      	cmp	r3, #80	; 0x50
 800947a:	d00c      	beq.n	8009496 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009480:	b672      	cpsid	i
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	b662      	cpsie	i
 8009490:	61bb      	str	r3, [r7, #24]
}
 8009492:	bf00      	nop
 8009494:	e7fe      	b.n	8009494 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009496:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800949c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00d      	beq.n	80094be <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80094a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80094aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80094ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	4613      	mov	r3, r2
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	68b9      	ldr	r1, [r7, #8]
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 f805 	bl	80094c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3730      	adds	r7, #48	; 0x30
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
 80094d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d103      	bne.n	80094e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	69ba      	ldr	r2, [r7, #24]
 80094e0:	601a      	str	r2, [r3, #0]
 80094e2:	e002      	b.n	80094ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094f6:	2101      	movs	r1, #1
 80094f8:	69b8      	ldr	r0, [r7, #24]
 80094fa:	f7ff fef9 	bl	80092f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	78fa      	ldrb	r2, [r7, #3]
 8009502:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009506:	bf00      	nop
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
	...

08009510 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b08e      	sub	sp, #56	; 0x38
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800951e:	2300      	movs	r3, #0
 8009520:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10c      	bne.n	8009546 <xQueueGenericSend+0x36>
	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009530:	b672      	cpsid	i
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	b662      	cpsie	i
 8009540:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009542:	bf00      	nop
 8009544:	e7fe      	b.n	8009544 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d103      	bne.n	8009554 <xQueueGenericSend+0x44>
 800954c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009550:	2b00      	cmp	r3, #0
 8009552:	d101      	bne.n	8009558 <xQueueGenericSend+0x48>
 8009554:	2301      	movs	r3, #1
 8009556:	e000      	b.n	800955a <xQueueGenericSend+0x4a>
 8009558:	2300      	movs	r3, #0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10c      	bne.n	8009578 <xQueueGenericSend+0x68>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009562:	b672      	cpsid	i
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	b662      	cpsie	i
 8009572:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009574:	bf00      	nop
 8009576:	e7fe      	b.n	8009576 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	2b02      	cmp	r3, #2
 800957c:	d103      	bne.n	8009586 <xQueueGenericSend+0x76>
 800957e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009582:	2b01      	cmp	r3, #1
 8009584:	d101      	bne.n	800958a <xQueueGenericSend+0x7a>
 8009586:	2301      	movs	r3, #1
 8009588:	e000      	b.n	800958c <xQueueGenericSend+0x7c>
 800958a:	2300      	movs	r3, #0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10c      	bne.n	80095aa <xQueueGenericSend+0x9a>
	__asm volatile
 8009590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009594:	b672      	cpsid	i
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	b662      	cpsie	i
 80095a4:	623b      	str	r3, [r7, #32]
}
 80095a6:	bf00      	nop
 80095a8:	e7fe      	b.n	80095a8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095aa:	f001 fc09 	bl	800adc0 <xTaskGetSchedulerState>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d102      	bne.n	80095ba <xQueueGenericSend+0xaa>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <xQueueGenericSend+0xae>
 80095ba:	2301      	movs	r3, #1
 80095bc:	e000      	b.n	80095c0 <xQueueGenericSend+0xb0>
 80095be:	2300      	movs	r3, #0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10c      	bne.n	80095de <xQueueGenericSend+0xce>
	__asm volatile
 80095c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c8:	b672      	cpsid	i
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	b662      	cpsie	i
 80095d8:	61fb      	str	r3, [r7, #28]
}
 80095da:	bf00      	nop
 80095dc:	e7fe      	b.n	80095dc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095de:	f002 f9fd 	bl	800b9dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d302      	bcc.n	80095f4 <xQueueGenericSend+0xe4>
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d129      	bne.n	8009648 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	68b9      	ldr	r1, [r7, #8]
 80095f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095fa:	f000 fa15 	bl	8009a28 <prvCopyDataToQueue>
 80095fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009604:	2b00      	cmp	r3, #0
 8009606:	d010      	beq.n	800962a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960a:	3324      	adds	r3, #36	; 0x24
 800960c:	4618      	mov	r0, r3
 800960e:	f001 fa0d 	bl	800aa2c <xTaskRemoveFromEventList>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d013      	beq.n	8009640 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009618:	4b3f      	ldr	r3, [pc, #252]	; (8009718 <xQueueGenericSend+0x208>)
 800961a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	e00a      	b.n	8009640 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800962a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962c:	2b00      	cmp	r3, #0
 800962e:	d007      	beq.n	8009640 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009630:	4b39      	ldr	r3, [pc, #228]	; (8009718 <xQueueGenericSend+0x208>)
 8009632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009636:	601a      	str	r2, [r3, #0]
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009640:	f002 fa00 	bl	800ba44 <vPortExitCritical>
				return pdPASS;
 8009644:	2301      	movs	r3, #1
 8009646:	e063      	b.n	8009710 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d103      	bne.n	8009656 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800964e:	f002 f9f9 	bl	800ba44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009652:	2300      	movs	r3, #0
 8009654:	e05c      	b.n	8009710 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009658:	2b00      	cmp	r3, #0
 800965a:	d106      	bne.n	800966a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800965c:	f107 0314 	add.w	r3, r7, #20
 8009660:	4618      	mov	r0, r3
 8009662:	f001 fa49 	bl	800aaf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009666:	2301      	movs	r3, #1
 8009668:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800966a:	f002 f9eb 	bl	800ba44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800966e:	f000 ffa9 	bl	800a5c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009672:	f002 f9b3 	bl	800b9dc <vPortEnterCritical>
 8009676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800967c:	b25b      	sxtb	r3, r3
 800967e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009682:	d103      	bne.n	800968c <xQueueGenericSend+0x17c>
 8009684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009686:	2200      	movs	r2, #0
 8009688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009692:	b25b      	sxtb	r3, r3
 8009694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009698:	d103      	bne.n	80096a2 <xQueueGenericSend+0x192>
 800969a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969c:	2200      	movs	r2, #0
 800969e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096a2:	f002 f9cf 	bl	800ba44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096a6:	1d3a      	adds	r2, r7, #4
 80096a8:	f107 0314 	add.w	r3, r7, #20
 80096ac:	4611      	mov	r1, r2
 80096ae:	4618      	mov	r0, r3
 80096b0:	f001 fa38 	bl	800ab24 <xTaskCheckForTimeOut>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d124      	bne.n	8009704 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80096ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096bc:	f000 faac 	bl	8009c18 <prvIsQueueFull>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d018      	beq.n	80096f8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80096c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c8:	3310      	adds	r3, #16
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	4611      	mov	r1, r2
 80096ce:	4618      	mov	r0, r3
 80096d0:	f001 f958 	bl	800a984 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80096d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096d6:	f000 fa37 	bl	8009b48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80096da:	f000 ff81 	bl	800a5e0 <xTaskResumeAll>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f47f af7c 	bne.w	80095de <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80096e6:	4b0c      	ldr	r3, [pc, #48]	; (8009718 <xQueueGenericSend+0x208>)
 80096e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	f3bf 8f6f 	isb	sy
 80096f6:	e772      	b.n	80095de <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80096f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096fa:	f000 fa25 	bl	8009b48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096fe:	f000 ff6f 	bl	800a5e0 <xTaskResumeAll>
 8009702:	e76c      	b.n	80095de <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009706:	f000 fa1f 	bl	8009b48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800970a:	f000 ff69 	bl	800a5e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800970e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009710:	4618      	mov	r0, r3
 8009712:	3738      	adds	r7, #56	; 0x38
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	e000ed04 	.word	0xe000ed04

0800971c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b08e      	sub	sp, #56	; 0x38
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
 8009728:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10c      	bne.n	800974e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8009734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009738:	b672      	cpsid	i
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	b662      	cpsie	i
 8009748:	627b      	str	r3, [r7, #36]	; 0x24
}
 800974a:	bf00      	nop
 800974c:	e7fe      	b.n	800974c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d103      	bne.n	800975c <xQueueGenericSendFromISR+0x40>
 8009754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009758:	2b00      	cmp	r3, #0
 800975a:	d101      	bne.n	8009760 <xQueueGenericSendFromISR+0x44>
 800975c:	2301      	movs	r3, #1
 800975e:	e000      	b.n	8009762 <xQueueGenericSendFromISR+0x46>
 8009760:	2300      	movs	r3, #0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10c      	bne.n	8009780 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8009766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976a:	b672      	cpsid	i
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	b662      	cpsie	i
 800977a:	623b      	str	r3, [r7, #32]
}
 800977c:	bf00      	nop
 800977e:	e7fe      	b.n	800977e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	2b02      	cmp	r3, #2
 8009784:	d103      	bne.n	800978e <xQueueGenericSendFromISR+0x72>
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800978a:	2b01      	cmp	r3, #1
 800978c:	d101      	bne.n	8009792 <xQueueGenericSendFromISR+0x76>
 800978e:	2301      	movs	r3, #1
 8009790:	e000      	b.n	8009794 <xQueueGenericSendFromISR+0x78>
 8009792:	2300      	movs	r3, #0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10c      	bne.n	80097b2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8009798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979c:	b672      	cpsid	i
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	b662      	cpsie	i
 80097ac:	61fb      	str	r3, [r7, #28]
}
 80097ae:	bf00      	nop
 80097b0:	e7fe      	b.n	80097b0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097b2:	f002 f9fb 	bl	800bbac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80097b6:	f3ef 8211 	mrs	r2, BASEPRI
 80097ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097be:	b672      	cpsid	i
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	b662      	cpsie	i
 80097ce:	61ba      	str	r2, [r7, #24]
 80097d0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80097d2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097de:	429a      	cmp	r2, r3
 80097e0:	d302      	bcc.n	80097e8 <xQueueGenericSendFromISR+0xcc>
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d12c      	bne.n	8009842 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	68b9      	ldr	r1, [r7, #8]
 80097f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097f8:	f000 f916 	bl	8009a28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80097fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009804:	d112      	bne.n	800982c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980a:	2b00      	cmp	r3, #0
 800980c:	d016      	beq.n	800983c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	3324      	adds	r3, #36	; 0x24
 8009812:	4618      	mov	r0, r3
 8009814:	f001 f90a 	bl	800aa2c <xTaskRemoveFromEventList>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00e      	beq.n	800983c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00b      	beq.n	800983c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	e007      	b.n	800983c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800982c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009830:	3301      	adds	r3, #1
 8009832:	b2db      	uxtb	r3, r3
 8009834:	b25a      	sxtb	r2, r3
 8009836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800983c:	2301      	movs	r3, #1
 800983e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009840:	e001      	b.n	8009846 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009842:	2300      	movs	r3, #0
 8009844:	637b      	str	r3, [r7, #52]	; 0x34
 8009846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009848:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009850:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009854:	4618      	mov	r0, r3
 8009856:	3738      	adds	r7, #56	; 0x38
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b08c      	sub	sp, #48	; 0x30
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009868:	2300      	movs	r3, #0
 800986a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10c      	bne.n	8009890 <xQueueReceive+0x34>
	__asm volatile
 8009876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987a:	b672      	cpsid	i
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	b662      	cpsie	i
 800988a:	623b      	str	r3, [r7, #32]
}
 800988c:	bf00      	nop
 800988e:	e7fe      	b.n	800988e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d103      	bne.n	800989e <xQueueReceive+0x42>
 8009896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <xQueueReceive+0x46>
 800989e:	2301      	movs	r3, #1
 80098a0:	e000      	b.n	80098a4 <xQueueReceive+0x48>
 80098a2:	2300      	movs	r3, #0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10c      	bne.n	80098c2 <xQueueReceive+0x66>
	__asm volatile
 80098a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ac:	b672      	cpsid	i
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	b662      	cpsie	i
 80098bc:	61fb      	str	r3, [r7, #28]
}
 80098be:	bf00      	nop
 80098c0:	e7fe      	b.n	80098c0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098c2:	f001 fa7d 	bl	800adc0 <xTaskGetSchedulerState>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d102      	bne.n	80098d2 <xQueueReceive+0x76>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d101      	bne.n	80098d6 <xQueueReceive+0x7a>
 80098d2:	2301      	movs	r3, #1
 80098d4:	e000      	b.n	80098d8 <xQueueReceive+0x7c>
 80098d6:	2300      	movs	r3, #0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10c      	bne.n	80098f6 <xQueueReceive+0x9a>
	__asm volatile
 80098dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e0:	b672      	cpsid	i
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	b662      	cpsie	i
 80098f0:	61bb      	str	r3, [r7, #24]
}
 80098f2:	bf00      	nop
 80098f4:	e7fe      	b.n	80098f4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098f6:	f002 f871 	bl	800b9dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	2b00      	cmp	r3, #0
 8009904:	d01f      	beq.n	8009946 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009906:	68b9      	ldr	r1, [r7, #8]
 8009908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800990a:	f000 f8f7 	bl	8009afc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	1e5a      	subs	r2, r3, #1
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009914:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00f      	beq.n	800993e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800991e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009920:	3310      	adds	r3, #16
 8009922:	4618      	mov	r0, r3
 8009924:	f001 f882 	bl	800aa2c <xTaskRemoveFromEventList>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d007      	beq.n	800993e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800992e:	4b3d      	ldr	r3, [pc, #244]	; (8009a24 <xQueueReceive+0x1c8>)
 8009930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800993e:	f002 f881 	bl	800ba44 <vPortExitCritical>
				return pdPASS;
 8009942:	2301      	movs	r3, #1
 8009944:	e069      	b.n	8009a1a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d103      	bne.n	8009954 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800994c:	f002 f87a 	bl	800ba44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009950:	2300      	movs	r3, #0
 8009952:	e062      	b.n	8009a1a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009956:	2b00      	cmp	r3, #0
 8009958:	d106      	bne.n	8009968 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800995a:	f107 0310 	add.w	r3, r7, #16
 800995e:	4618      	mov	r0, r3
 8009960:	f001 f8ca 	bl	800aaf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009964:	2301      	movs	r3, #1
 8009966:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009968:	f002 f86c 	bl	800ba44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800996c:	f000 fe2a 	bl	800a5c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009970:	f002 f834 	bl	800b9dc <vPortEnterCritical>
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800997a:	b25b      	sxtb	r3, r3
 800997c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009980:	d103      	bne.n	800998a <xQueueReceive+0x12e>
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	2200      	movs	r2, #0
 8009986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800998a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009990:	b25b      	sxtb	r3, r3
 8009992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009996:	d103      	bne.n	80099a0 <xQueueReceive+0x144>
 8009998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999a:	2200      	movs	r2, #0
 800999c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099a0:	f002 f850 	bl	800ba44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099a4:	1d3a      	adds	r2, r7, #4
 80099a6:	f107 0310 	add.w	r3, r7, #16
 80099aa:	4611      	mov	r1, r2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f001 f8b9 	bl	800ab24 <xTaskCheckForTimeOut>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d123      	bne.n	8009a00 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ba:	f000 f917 	bl	8009bec <prvIsQueueEmpty>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d017      	beq.n	80099f4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80099c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c6:	3324      	adds	r3, #36	; 0x24
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	4611      	mov	r1, r2
 80099cc:	4618      	mov	r0, r3
 80099ce:	f000 ffd9 	bl	800a984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80099d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099d4:	f000 f8b8 	bl	8009b48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80099d8:	f000 fe02 	bl	800a5e0 <xTaskResumeAll>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d189      	bne.n	80098f6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80099e2:	4b10      	ldr	r3, [pc, #64]	; (8009a24 <xQueueReceive+0x1c8>)
 80099e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099e8:	601a      	str	r2, [r3, #0]
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	f3bf 8f6f 	isb	sy
 80099f2:	e780      	b.n	80098f6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80099f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099f6:	f000 f8a7 	bl	8009b48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099fa:	f000 fdf1 	bl	800a5e0 <xTaskResumeAll>
 80099fe:	e77a      	b.n	80098f6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a02:	f000 f8a1 	bl	8009b48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a06:	f000 fdeb 	bl	800a5e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a0c:	f000 f8ee 	bl	8009bec <prvIsQueueEmpty>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	f43f af6f 	beq.w	80098f6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3730      	adds	r7, #48	; 0x30
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	e000ed04 	.word	0xe000ed04

08009a28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a34:	2300      	movs	r3, #0
 8009a36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10d      	bne.n	8009a62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d14d      	bne.n	8009aea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f001 f9d2 	bl	800adfc <xTaskPriorityDisinherit>
 8009a58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	609a      	str	r2, [r3, #8]
 8009a60:	e043      	b.n	8009aea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d119      	bne.n	8009a9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6858      	ldr	r0, [r3, #4]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a70:	461a      	mov	r2, r3
 8009a72:	68b9      	ldr	r1, [r7, #8]
 8009a74:	f002 fca6 	bl	800c3c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a80:	441a      	add	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	685a      	ldr	r2, [r3, #4]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d32b      	bcc.n	8009aea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	605a      	str	r2, [r3, #4]
 8009a9a:	e026      	b.n	8009aea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	68d8      	ldr	r0, [r3, #12]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	68b9      	ldr	r1, [r7, #8]
 8009aa8:	f002 fc8c 	bl	800c3c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	68da      	ldr	r2, [r3, #12]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab4:	425b      	negs	r3, r3
 8009ab6:	441a      	add	r2, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	68da      	ldr	r2, [r3, #12]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d207      	bcs.n	8009ad8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	689a      	ldr	r2, [r3, #8]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad0:	425b      	negs	r3, r3
 8009ad2:	441a      	add	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d105      	bne.n	8009aea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d002      	beq.n	8009aea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	1c5a      	adds	r2, r3, #1
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009af2:	697b      	ldr	r3, [r7, #20]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d018      	beq.n	8009b40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	68da      	ldr	r2, [r3, #12]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b16:	441a      	add	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68da      	ldr	r2, [r3, #12]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d303      	bcc.n	8009b30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	68d9      	ldr	r1, [r3, #12]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b38:	461a      	mov	r2, r3
 8009b3a:	6838      	ldr	r0, [r7, #0]
 8009b3c:	f002 fc42 	bl	800c3c4 <memcpy>
	}
}
 8009b40:	bf00      	nop
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b50:	f001 ff44 	bl	800b9dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b5c:	e011      	b.n	8009b82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d012      	beq.n	8009b8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	3324      	adds	r3, #36	; 0x24
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f000 ff5e 	bl	800aa2c <xTaskRemoveFromEventList>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b76:	f001 f83b 	bl	800abf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b7a:	7bfb      	ldrb	r3, [r7, #15]
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	dce9      	bgt.n	8009b5e <prvUnlockQueue+0x16>
 8009b8a:	e000      	b.n	8009b8e <prvUnlockQueue+0x46>
					break;
 8009b8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	22ff      	movs	r2, #255	; 0xff
 8009b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b96:	f001 ff55 	bl	800ba44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b9a:	f001 ff1f 	bl	800b9dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ba4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ba6:	e011      	b.n	8009bcc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d012      	beq.n	8009bd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3310      	adds	r3, #16
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 ff39 	bl	800aa2c <xTaskRemoveFromEventList>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d001      	beq.n	8009bc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009bc0:	f001 f816 	bl	800abf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009bc4:	7bbb      	ldrb	r3, [r7, #14]
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	dce9      	bgt.n	8009ba8 <prvUnlockQueue+0x60>
 8009bd4:	e000      	b.n	8009bd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009bd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	22ff      	movs	r2, #255	; 0xff
 8009bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009be0:	f001 ff30 	bl	800ba44 <vPortExitCritical>
}
 8009be4:	bf00      	nop
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bf4:	f001 fef2 	bl	800b9dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d102      	bne.n	8009c06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c00:	2301      	movs	r3, #1
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	e001      	b.n	8009c0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c0a:	f001 ff1b 	bl	800ba44 <vPortExitCritical>

	return xReturn;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c20:	f001 fedc 	bl	800b9dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d102      	bne.n	8009c36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c30:	2301      	movs	r3, #1
 8009c32:	60fb      	str	r3, [r7, #12]
 8009c34:	e001      	b.n	8009c3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c36:	2300      	movs	r3, #0
 8009c38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c3a:	f001 ff03 	bl	800ba44 <vPortExitCritical>

	return xReturn;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c52:	2300      	movs	r3, #0
 8009c54:	60fb      	str	r3, [r7, #12]
 8009c56:	e014      	b.n	8009c82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c58:	4a0f      	ldr	r2, [pc, #60]	; (8009c98 <vQueueAddToRegistry+0x50>)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10b      	bne.n	8009c7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c64:	490c      	ldr	r1, [pc, #48]	; (8009c98 <vQueueAddToRegistry+0x50>)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c6e:	4a0a      	ldr	r2, [pc, #40]	; (8009c98 <vQueueAddToRegistry+0x50>)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	00db      	lsls	r3, r3, #3
 8009c74:	4413      	add	r3, r2
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c7a:	e006      	b.n	8009c8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	60fb      	str	r3, [r7, #12]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2b07      	cmp	r3, #7
 8009c86:	d9e7      	bls.n	8009c58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c88:	bf00      	nop
 8009c8a:	bf00      	nop
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	20000f44 	.word	0x20000f44

08009c9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009cac:	f001 fe96 	bl	800b9dc <vPortEnterCritical>
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cb6:	b25b      	sxtb	r3, r3
 8009cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cbc:	d103      	bne.n	8009cc6 <vQueueWaitForMessageRestricted+0x2a>
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ccc:	b25b      	sxtb	r3, r3
 8009cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd2:	d103      	bne.n	8009cdc <vQueueWaitForMessageRestricted+0x40>
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cdc:	f001 feb2 	bl	800ba44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d106      	bne.n	8009cf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	3324      	adds	r3, #36	; 0x24
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	68b9      	ldr	r1, [r7, #8]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 fe6d 	bl	800a9d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009cf6:	6978      	ldr	r0, [r7, #20]
 8009cf8:	f7ff ff26 	bl	8009b48 <prvUnlockQueue>
	}
 8009cfc:	bf00      	nop
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b08e      	sub	sp, #56	; 0x38
 8009d08:	af04      	add	r7, sp, #16
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
 8009d10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10c      	bne.n	8009d32 <xTaskCreateStatic+0x2e>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1c:	b672      	cpsid	i
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	b662      	cpsie	i
 8009d2c:	623b      	str	r3, [r7, #32]
}
 8009d2e:	bf00      	nop
 8009d30:	e7fe      	b.n	8009d30 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10c      	bne.n	8009d52 <xTaskCreateStatic+0x4e>
	__asm volatile
 8009d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3c:	b672      	cpsid	i
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	b662      	cpsie	i
 8009d4c:	61fb      	str	r3, [r7, #28]
}
 8009d4e:	bf00      	nop
 8009d50:	e7fe      	b.n	8009d50 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d52:	23a8      	movs	r3, #168	; 0xa8
 8009d54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	2ba8      	cmp	r3, #168	; 0xa8
 8009d5a:	d00c      	beq.n	8009d76 <xTaskCreateStatic+0x72>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	b672      	cpsid	i
 8009d62:	f383 8811 	msr	BASEPRI, r3
 8009d66:	f3bf 8f6f 	isb	sy
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	b662      	cpsie	i
 8009d70:	61bb      	str	r3, [r7, #24]
}
 8009d72:	bf00      	nop
 8009d74:	e7fe      	b.n	8009d74 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d01e      	beq.n	8009dbc <xTaskCreateStatic+0xb8>
 8009d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d01b      	beq.n	8009dbc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d90:	2202      	movs	r2, #2
 8009d92:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d96:	2300      	movs	r3, #0
 8009d98:	9303      	str	r3, [sp, #12]
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	9302      	str	r3, [sp, #8]
 8009d9e:	f107 0314 	add.w	r3, r7, #20
 8009da2:	9301      	str	r3, [sp, #4]
 8009da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	68b9      	ldr	r1, [r7, #8]
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f000 f850 	bl	8009e54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009db4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009db6:	f000 f8f5 	bl	8009fa4 <prvAddNewTaskToReadyList>
 8009dba:	e001      	b.n	8009dc0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009dc0:	697b      	ldr	r3, [r7, #20]
	}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3728      	adds	r7, #40	; 0x28
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b08c      	sub	sp, #48	; 0x30
 8009dce:	af04      	add	r7, sp, #16
 8009dd0:	60f8      	str	r0, [r7, #12]
 8009dd2:	60b9      	str	r1, [r7, #8]
 8009dd4:	603b      	str	r3, [r7, #0]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009dda:	88fb      	ldrh	r3, [r7, #6]
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4618      	mov	r0, r3
 8009de0:	f001 ff28 	bl	800bc34 <pvPortMalloc>
 8009de4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00e      	beq.n	8009e0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009dec:	20a8      	movs	r0, #168	; 0xa8
 8009dee:	f001 ff21 	bl	800bc34 <pvPortMalloc>
 8009df2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d003      	beq.n	8009e02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	697a      	ldr	r2, [r7, #20]
 8009dfe:	631a      	str	r2, [r3, #48]	; 0x30
 8009e00:	e005      	b.n	8009e0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e02:	6978      	ldr	r0, [r7, #20]
 8009e04:	f001 ffe0 	bl	800bdc8 <vPortFree>
 8009e08:	e001      	b.n	8009e0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d017      	beq.n	8009e44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e1c:	88fa      	ldrh	r2, [r7, #6]
 8009e1e:	2300      	movs	r3, #0
 8009e20:	9303      	str	r3, [sp, #12]
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	9302      	str	r3, [sp, #8]
 8009e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e28:	9301      	str	r3, [sp, #4]
 8009e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	68b9      	ldr	r1, [r7, #8]
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f000 f80e 	bl	8009e54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e38:	69f8      	ldr	r0, [r7, #28]
 8009e3a:	f000 f8b3 	bl	8009fa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	61bb      	str	r3, [r7, #24]
 8009e42:	e002      	b.n	8009e4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e44:	f04f 33ff 	mov.w	r3, #4294967295
 8009e48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e4a:	69bb      	ldr	r3, [r7, #24]
	}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3720      	adds	r7, #32
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b088      	sub	sp, #32
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
 8009e60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	21a5      	movs	r1, #165	; 0xa5
 8009e6e:	f002 f9ca 	bl	800c206 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e76:	6879      	ldr	r1, [r7, #4]
 8009e78:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009e7c:	440b      	add	r3, r1
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4413      	add	r3, r2
 8009e82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	f023 0307 	bic.w	r3, r3, #7
 8009e8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	f003 0307 	and.w	r3, r3, #7
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00c      	beq.n	8009eb0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9a:	b672      	cpsid	i
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	b662      	cpsie	i
 8009eaa:	617b      	str	r3, [r7, #20]
}
 8009eac:	bf00      	nop
 8009eae:	e7fe      	b.n	8009eae <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d01f      	beq.n	8009ef6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	61fb      	str	r3, [r7, #28]
 8009eba:	e012      	b.n	8009ee2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	7819      	ldrb	r1, [r3, #0]
 8009ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	4413      	add	r3, r2
 8009eca:	3334      	adds	r3, #52	; 0x34
 8009ecc:	460a      	mov	r2, r1
 8009ece:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d006      	beq.n	8009eea <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	61fb      	str	r3, [r7, #28]
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	2b0f      	cmp	r3, #15
 8009ee6:	d9e9      	bls.n	8009ebc <prvInitialiseNewTask+0x68>
 8009ee8:	e000      	b.n	8009eec <prvInitialiseNewTask+0x98>
			{
				break;
 8009eea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ef4:	e003      	b.n	8009efe <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f00:	2b37      	cmp	r3, #55	; 0x37
 8009f02:	d901      	bls.n	8009f08 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f04:	2337      	movs	r3, #55	; 0x37
 8009f06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f16:	2200      	movs	r2, #0
 8009f18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1c:	3304      	adds	r3, #4
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7ff f952 	bl	80091c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f26:	3318      	adds	r3, #24
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7ff f94d 	bl	80091c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f46:	2200      	movs	r2, #0
 8009f48:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f56:	3354      	adds	r3, #84	; 0x54
 8009f58:	224c      	movs	r2, #76	; 0x4c
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f002 f952 	bl	800c206 <memset>
 8009f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f64:	4a0c      	ldr	r2, [pc, #48]	; (8009f98 <prvInitialiseNewTask+0x144>)
 8009f66:	659a      	str	r2, [r3, #88]	; 0x58
 8009f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6a:	4a0c      	ldr	r2, [pc, #48]	; (8009f9c <prvInitialiseNewTask+0x148>)
 8009f6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8009f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f70:	4a0b      	ldr	r2, [pc, #44]	; (8009fa0 <prvInitialiseNewTask+0x14c>)
 8009f72:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	68f9      	ldr	r1, [r7, #12]
 8009f78:	69b8      	ldr	r0, [r7, #24]
 8009f7a:	f001 fc23 	bl	800b7c4 <pxPortInitialiseStack>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d002      	beq.n	8009f90 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f90:	bf00      	nop
 8009f92:	3720      	adds	r7, #32
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	200051d0 	.word	0x200051d0
 8009f9c:	20005238 	.word	0x20005238
 8009fa0:	200052a0 	.word	0x200052a0

08009fa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009fac:	f001 fd16 	bl	800b9dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009fb0:	4b2d      	ldr	r3, [pc, #180]	; (800a068 <prvAddNewTaskToReadyList+0xc4>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	4a2c      	ldr	r2, [pc, #176]	; (800a068 <prvAddNewTaskToReadyList+0xc4>)
 8009fb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009fba:	4b2c      	ldr	r3, [pc, #176]	; (800a06c <prvAddNewTaskToReadyList+0xc8>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d109      	bne.n	8009fd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009fc2:	4a2a      	ldr	r2, [pc, #168]	; (800a06c <prvAddNewTaskToReadyList+0xc8>)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009fc8:	4b27      	ldr	r3, [pc, #156]	; (800a068 <prvAddNewTaskToReadyList+0xc4>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d110      	bne.n	8009ff2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009fd0:	f000 fe32 	bl	800ac38 <prvInitialiseTaskLists>
 8009fd4:	e00d      	b.n	8009ff2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009fd6:	4b26      	ldr	r3, [pc, #152]	; (800a070 <prvAddNewTaskToReadyList+0xcc>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d109      	bne.n	8009ff2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009fde:	4b23      	ldr	r3, [pc, #140]	; (800a06c <prvAddNewTaskToReadyList+0xc8>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d802      	bhi.n	8009ff2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009fec:	4a1f      	ldr	r2, [pc, #124]	; (800a06c <prvAddNewTaskToReadyList+0xc8>)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ff2:	4b20      	ldr	r3, [pc, #128]	; (800a074 <prvAddNewTaskToReadyList+0xd0>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	4a1e      	ldr	r2, [pc, #120]	; (800a074 <prvAddNewTaskToReadyList+0xd0>)
 8009ffa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ffc:	4b1d      	ldr	r3, [pc, #116]	; (800a074 <prvAddNewTaskToReadyList+0xd0>)
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a008:	4b1b      	ldr	r3, [pc, #108]	; (800a078 <prvAddNewTaskToReadyList+0xd4>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d903      	bls.n	800a018 <prvAddNewTaskToReadyList+0x74>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a014:	4a18      	ldr	r2, [pc, #96]	; (800a078 <prvAddNewTaskToReadyList+0xd4>)
 800a016:	6013      	str	r3, [r2, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a01c:	4613      	mov	r3, r2
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	4413      	add	r3, r2
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	4a15      	ldr	r2, [pc, #84]	; (800a07c <prvAddNewTaskToReadyList+0xd8>)
 800a026:	441a      	add	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	3304      	adds	r3, #4
 800a02c:	4619      	mov	r1, r3
 800a02e:	4610      	mov	r0, r2
 800a030:	f7ff f8d7 	bl	80091e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a034:	f001 fd06 	bl	800ba44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a038:	4b0d      	ldr	r3, [pc, #52]	; (800a070 <prvAddNewTaskToReadyList+0xcc>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00e      	beq.n	800a05e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a040:	4b0a      	ldr	r3, [pc, #40]	; (800a06c <prvAddNewTaskToReadyList+0xc8>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d207      	bcs.n	800a05e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a04e:	4b0c      	ldr	r3, [pc, #48]	; (800a080 <prvAddNewTaskToReadyList+0xdc>)
 800a050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a054:	601a      	str	r2, [r3, #0]
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a05e:	bf00      	nop
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20001458 	.word	0x20001458
 800a06c:	20000f84 	.word	0x20000f84
 800a070:	20001464 	.word	0x20001464
 800a074:	20001474 	.word	0x20001474
 800a078:	20001460 	.word	0x20001460
 800a07c:	20000f88 	.word	0x20000f88
 800a080:	e000ed04 	.word	0xe000ed04

0800a084 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a08c:	f001 fca6 	bl	800b9dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d102      	bne.n	800a09c <vTaskDelete+0x18>
 800a096:	4b2d      	ldr	r3, [pc, #180]	; (800a14c <vTaskDelete+0xc8>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	e000      	b.n	800a09e <vTaskDelete+0x1a>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7ff f8f9 	bl	800929c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d004      	beq.n	800a0bc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	3318      	adds	r3, #24
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7ff f8f0 	bl	800929c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800a0bc:	4b24      	ldr	r3, [pc, #144]	; (800a150 <vTaskDelete+0xcc>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	4a23      	ldr	r2, [pc, #140]	; (800a150 <vTaskDelete+0xcc>)
 800a0c4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800a0c6:	4b21      	ldr	r3, [pc, #132]	; (800a14c <vTaskDelete+0xc8>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d10b      	bne.n	800a0e8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	481f      	ldr	r0, [pc, #124]	; (800a154 <vTaskDelete+0xd0>)
 800a0d8:	f7ff f883 	bl	80091e2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800a0dc:	4b1e      	ldr	r3, [pc, #120]	; (800a158 <vTaskDelete+0xd4>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	4a1d      	ldr	r2, [pc, #116]	; (800a158 <vTaskDelete+0xd4>)
 800a0e4:	6013      	str	r3, [r2, #0]
 800a0e6:	e009      	b.n	800a0fc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800a0e8:	4b1c      	ldr	r3, [pc, #112]	; (800a15c <vTaskDelete+0xd8>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	4a1b      	ldr	r2, [pc, #108]	; (800a15c <vTaskDelete+0xd8>)
 800a0f0:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f000 fe0e 	bl	800ad14 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800a0f8:	f000 fe42 	bl	800ad80 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800a0fc:	f001 fca2 	bl	800ba44 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800a100:	4b17      	ldr	r3, [pc, #92]	; (800a160 <vTaskDelete+0xdc>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d01d      	beq.n	800a144 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 800a108:	4b10      	ldr	r3, [pc, #64]	; (800a14c <vTaskDelete+0xc8>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d118      	bne.n	800a144 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800a112:	4b14      	ldr	r3, [pc, #80]	; (800a164 <vTaskDelete+0xe0>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00c      	beq.n	800a134 <vTaskDelete+0xb0>
	__asm volatile
 800a11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11e:	b672      	cpsid	i
 800a120:	f383 8811 	msr	BASEPRI, r3
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	b662      	cpsie	i
 800a12e:	60bb      	str	r3, [r7, #8]
}
 800a130:	bf00      	nop
 800a132:	e7fe      	b.n	800a132 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800a134:	4b0c      	ldr	r3, [pc, #48]	; (800a168 <vTaskDelete+0xe4>)
 800a136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a13a:	601a      	str	r2, [r3, #0]
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a144:	bf00      	nop
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	20000f84 	.word	0x20000f84
 800a150:	20001474 	.word	0x20001474
 800a154:	2000142c 	.word	0x2000142c
 800a158:	20001440 	.word	0x20001440
 800a15c:	20001458 	.word	0x20001458
 800a160:	20001464 	.word	0x20001464
 800a164:	20001480 	.word	0x20001480
 800a168:	e000ed04 	.word	0xe000ed04

0800a16c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a174:	2300      	movs	r3, #0
 800a176:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d019      	beq.n	800a1b2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a17e:	4b14      	ldr	r3, [pc, #80]	; (800a1d0 <vTaskDelay+0x64>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00c      	beq.n	800a1a0 <vTaskDelay+0x34>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18a:	b672      	cpsid	i
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	b662      	cpsie	i
 800a19a:	60bb      	str	r3, [r7, #8]
}
 800a19c:	bf00      	nop
 800a19e:	e7fe      	b.n	800a19e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a1a0:	f000 fa10 	bl	800a5c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fe9a 	bl	800aee0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a1ac:	f000 fa18 	bl	800a5e0 <xTaskResumeAll>
 800a1b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d107      	bne.n	800a1c8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800a1b8:	4b06      	ldr	r3, [pc, #24]	; (800a1d4 <vTaskDelay+0x68>)
 800a1ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1be:	601a      	str	r2, [r3, #0]
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1c8:	bf00      	nop
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	20001480 	.word	0x20001480
 800a1d4:	e000ed04 	.word	0xe000ed04

0800a1d8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a1e0:	f001 fbfc 	bl	800b9dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d102      	bne.n	800a1f0 <vTaskSuspend+0x18>
 800a1ea:	4b31      	ldr	r3, [pc, #196]	; (800a2b0 <vTaskSuspend+0xd8>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	e000      	b.n	800a1f2 <vTaskSuspend+0x1a>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7ff f84f 	bl	800929c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a202:	2b00      	cmp	r3, #0
 800a204:	d004      	beq.n	800a210 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	3318      	adds	r3, #24
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7ff f846 	bl	800929c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	3304      	adds	r3, #4
 800a214:	4619      	mov	r1, r3
 800a216:	4827      	ldr	r0, [pc, #156]	; (800a2b4 <vTaskSuspend+0xdc>)
 800a218:	f7fe ffe3 	bl	80091e2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2b01      	cmp	r3, #1
 800a226:	d103      	bne.n	800a230 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a230:	f001 fc08 	bl	800ba44 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a234:	4b20      	ldr	r3, [pc, #128]	; (800a2b8 <vTaskSuspend+0xe0>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d005      	beq.n	800a248 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a23c:	f001 fbce 	bl	800b9dc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a240:	f000 fd9e 	bl	800ad80 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a244:	f001 fbfe 	bl	800ba44 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a248:	4b19      	ldr	r3, [pc, #100]	; (800a2b0 <vTaskSuspend+0xd8>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d129      	bne.n	800a2a6 <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 800a252:	4b19      	ldr	r3, [pc, #100]	; (800a2b8 <vTaskSuspend+0xe0>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d019      	beq.n	800a28e <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a25a:	4b18      	ldr	r3, [pc, #96]	; (800a2bc <vTaskSuspend+0xe4>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00c      	beq.n	800a27c <vTaskSuspend+0xa4>
	__asm volatile
 800a262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a266:	b672      	cpsid	i
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	b662      	cpsie	i
 800a276:	60bb      	str	r3, [r7, #8]
}
 800a278:	bf00      	nop
 800a27a:	e7fe      	b.n	800a27a <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 800a27c:	4b10      	ldr	r3, [pc, #64]	; (800a2c0 <vTaskSuspend+0xe8>)
 800a27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a282:	601a      	str	r2, [r3, #0]
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a28c:	e00b      	b.n	800a2a6 <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a28e:	4b09      	ldr	r3, [pc, #36]	; (800a2b4 <vTaskSuspend+0xdc>)
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	4b0c      	ldr	r3, [pc, #48]	; (800a2c4 <vTaskSuspend+0xec>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	429a      	cmp	r2, r3
 800a298:	d103      	bne.n	800a2a2 <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 800a29a:	4b05      	ldr	r3, [pc, #20]	; (800a2b0 <vTaskSuspend+0xd8>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	601a      	str	r2, [r3, #0]
	}
 800a2a0:	e001      	b.n	800a2a6 <vTaskSuspend+0xce>
					vTaskSwitchContext();
 800a2a2:	f000 fb09 	bl	800a8b8 <vTaskSwitchContext>
	}
 800a2a6:	bf00      	nop
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20000f84 	.word	0x20000f84
 800a2b4:	20001444 	.word	0x20001444
 800a2b8:	20001464 	.word	0x20001464
 800a2bc:	20001480 	.word	0x20001480
 800a2c0:	e000ed04 	.word	0xe000ed04
 800a2c4:	20001458 	.word	0x20001458

0800a2c8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b087      	sub	sp, #28
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10c      	bne.n	800a2f8 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	b672      	cpsid	i
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	b662      	cpsie	i
 800a2f2:	60fb      	str	r3, [r7, #12]
}
 800a2f4:	bf00      	nop
 800a2f6:	e7fe      	b.n	800a2f6 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	695b      	ldr	r3, [r3, #20]
 800a2fc:	4a0a      	ldr	r2, [pc, #40]	; (800a328 <prvTaskIsTaskSuspended+0x60>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d10a      	bne.n	800a318 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a306:	4a09      	ldr	r2, [pc, #36]	; (800a32c <prvTaskIsTaskSuspended+0x64>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d005      	beq.n	800a318 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a310:	2b00      	cmp	r3, #0
 800a312:	d101      	bne.n	800a318 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 800a314:	2301      	movs	r3, #1
 800a316:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a318:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a31a:	4618      	mov	r0, r3
 800a31c:	371c      	adds	r7, #28
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	20001444 	.word	0x20001444
 800a32c:	20001418 	.word	0x20001418

0800a330 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10c      	bne.n	800a35c <vTaskResume+0x2c>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a346:	b672      	cpsid	i
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	b662      	cpsie	i
 800a356:	60bb      	str	r3, [r7, #8]
}
 800a358:	bf00      	nop
 800a35a:	e7fe      	b.n	800a35a <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a35c:	4b20      	ldr	r3, [pc, #128]	; (800a3e0 <vTaskResume+0xb0>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	429a      	cmp	r2, r3
 800a364:	d038      	beq.n	800a3d8 <vTaskResume+0xa8>
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d035      	beq.n	800a3d8 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 800a36c:	f001 fb36 	bl	800b9dc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f7ff ffa9 	bl	800a2c8 <prvTaskIsTaskSuspended>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d02b      	beq.n	800a3d4 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	3304      	adds	r3, #4
 800a380:	4618      	mov	r0, r3
 800a382:	f7fe ff8b 	bl	800929c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38a:	4b16      	ldr	r3, [pc, #88]	; (800a3e4 <vTaskResume+0xb4>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d903      	bls.n	800a39a <vTaskResume+0x6a>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a396:	4a13      	ldr	r2, [pc, #76]	; (800a3e4 <vTaskResume+0xb4>)
 800a398:	6013      	str	r3, [r2, #0]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a39e:	4613      	mov	r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	4413      	add	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4a10      	ldr	r2, [pc, #64]	; (800a3e8 <vTaskResume+0xb8>)
 800a3a8:	441a      	add	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3304      	adds	r3, #4
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	4610      	mov	r0, r2
 800a3b2:	f7fe ff16 	bl	80091e2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ba:	4b09      	ldr	r3, [pc, #36]	; (800a3e0 <vTaskResume+0xb0>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d307      	bcc.n	800a3d4 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a3c4:	4b09      	ldr	r3, [pc, #36]	; (800a3ec <vTaskResume+0xbc>)
 800a3c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ca:	601a      	str	r2, [r3, #0]
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a3d4:	f001 fb36 	bl	800ba44 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a3d8:	bf00      	nop
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	20000f84 	.word	0x20000f84
 800a3e4:	20001460 	.word	0x20001460
 800a3e8:	20000f88 	.word	0x20000f88
 800a3ec:	e000ed04 	.word	0xe000ed04

0800a3f0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b08a      	sub	sp, #40	; 0x28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d10c      	bne.n	800a420 <xTaskResumeFromISR+0x30>
	__asm volatile
 800a406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40a:	b672      	cpsid	i
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	b662      	cpsie	i
 800a41a:	61bb      	str	r3, [r7, #24]
}
 800a41c:	bf00      	nop
 800a41e:	e7fe      	b.n	800a41e <xTaskResumeFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a420:	f001 fbc4 	bl	800bbac <vPortValidateInterruptPriority>
	__asm volatile
 800a424:	f3ef 8211 	mrs	r2, BASEPRI
 800a428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42c:	b672      	cpsid	i
 800a42e:	f383 8811 	msr	BASEPRI, r3
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	b662      	cpsie	i
 800a43c:	617a      	str	r2, [r7, #20]
 800a43e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a440:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a442:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a444:	6a38      	ldr	r0, [r7, #32]
 800a446:	f7ff ff3f 	bl	800a2c8 <prvTaskIsTaskSuspended>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d030      	beq.n	800a4b2 <xTaskResumeFromISR+0xc2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a450:	4b1d      	ldr	r3, [pc, #116]	; (800a4c8 <xTaskResumeFromISR+0xd8>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d126      	bne.n	800a4a6 <xTaskResumeFromISR+0xb6>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a458:	6a3b      	ldr	r3, [r7, #32]
 800a45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a45c:	4b1b      	ldr	r3, [pc, #108]	; (800a4cc <xTaskResumeFromISR+0xdc>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a462:	429a      	cmp	r2, r3
 800a464:	d301      	bcc.n	800a46a <xTaskResumeFromISR+0x7a>
					{
						xYieldRequired = pdTRUE;
 800a466:	2301      	movs	r3, #1
 800a468:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a46a:	6a3b      	ldr	r3, [r7, #32]
 800a46c:	3304      	adds	r3, #4
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fe ff14 	bl	800929c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a474:	6a3b      	ldr	r3, [r7, #32]
 800a476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a478:	4b15      	ldr	r3, [pc, #84]	; (800a4d0 <xTaskResumeFromISR+0xe0>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d903      	bls.n	800a488 <xTaskResumeFromISR+0x98>
 800a480:	6a3b      	ldr	r3, [r7, #32]
 800a482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a484:	4a12      	ldr	r2, [pc, #72]	; (800a4d0 <xTaskResumeFromISR+0xe0>)
 800a486:	6013      	str	r3, [r2, #0]
 800a488:	6a3b      	ldr	r3, [r7, #32]
 800a48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a48c:	4613      	mov	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4413      	add	r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4a0f      	ldr	r2, [pc, #60]	; (800a4d4 <xTaskResumeFromISR+0xe4>)
 800a496:	441a      	add	r2, r3
 800a498:	6a3b      	ldr	r3, [r7, #32]
 800a49a:	3304      	adds	r3, #4
 800a49c:	4619      	mov	r1, r3
 800a49e:	4610      	mov	r0, r2
 800a4a0:	f7fe fe9f 	bl	80091e2 <vListInsertEnd>
 800a4a4:	e005      	b.n	800a4b2 <xTaskResumeFromISR+0xc2>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a4a6:	6a3b      	ldr	r3, [r7, #32]
 800a4a8:	3318      	adds	r3, #24
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	480a      	ldr	r0, [pc, #40]	; (800a4d8 <xTaskResumeFromISR+0xe8>)
 800a4ae:	f7fe fe98 	bl	80091e2 <vListInsertEnd>
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f383 8811 	msr	BASEPRI, r3
}
 800a4bc:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3728      	adds	r7, #40	; 0x28
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	20001480 	.word	0x20001480
 800a4cc:	20000f84 	.word	0x20000f84
 800a4d0:	20001460 	.word	0x20001460
 800a4d4:	20000f88 	.word	0x20000f88
 800a4d8:	20001418 	.word	0x20001418

0800a4dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b08a      	sub	sp, #40	; 0x28
 800a4e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a4ea:	463a      	mov	r2, r7
 800a4ec:	1d39      	adds	r1, r7, #4
 800a4ee:	f107 0308 	add.w	r3, r7, #8
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fe fe14 	bl	8009120 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	9202      	str	r2, [sp, #8]
 800a500:	9301      	str	r3, [sp, #4]
 800a502:	2300      	movs	r3, #0
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	2300      	movs	r3, #0
 800a508:	460a      	mov	r2, r1
 800a50a:	4926      	ldr	r1, [pc, #152]	; (800a5a4 <vTaskStartScheduler+0xc8>)
 800a50c:	4826      	ldr	r0, [pc, #152]	; (800a5a8 <vTaskStartScheduler+0xcc>)
 800a50e:	f7ff fbf9 	bl	8009d04 <xTaskCreateStatic>
 800a512:	4603      	mov	r3, r0
 800a514:	4a25      	ldr	r2, [pc, #148]	; (800a5ac <vTaskStartScheduler+0xd0>)
 800a516:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a518:	4b24      	ldr	r3, [pc, #144]	; (800a5ac <vTaskStartScheduler+0xd0>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d002      	beq.n	800a526 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a520:	2301      	movs	r3, #1
 800a522:	617b      	str	r3, [r7, #20]
 800a524:	e001      	b.n	800a52a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a526:	2300      	movs	r3, #0
 800a528:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d102      	bne.n	800a536 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a530:	f000 fd2a 	bl	800af88 <xTimerCreateTimerTask>
 800a534:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d11d      	bne.n	800a578 <vTaskStartScheduler+0x9c>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a540:	b672      	cpsid	i
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	b662      	cpsie	i
 800a550:	613b      	str	r3, [r7, #16]
}
 800a552:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a554:	4b16      	ldr	r3, [pc, #88]	; (800a5b0 <vTaskStartScheduler+0xd4>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3354      	adds	r3, #84	; 0x54
 800a55a:	4a16      	ldr	r2, [pc, #88]	; (800a5b4 <vTaskStartScheduler+0xd8>)
 800a55c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a55e:	4b16      	ldr	r3, [pc, #88]	; (800a5b8 <vTaskStartScheduler+0xdc>)
 800a560:	f04f 32ff 	mov.w	r2, #4294967295
 800a564:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a566:	4b15      	ldr	r3, [pc, #84]	; (800a5bc <vTaskStartScheduler+0xe0>)
 800a568:	2201      	movs	r2, #1
 800a56a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a56c:	4b14      	ldr	r3, [pc, #80]	; (800a5c0 <vTaskStartScheduler+0xe4>)
 800a56e:	2200      	movs	r2, #0
 800a570:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a572:	f001 f9b5 	bl	800b8e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a576:	e010      	b.n	800a59a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57e:	d10c      	bne.n	800a59a <vTaskStartScheduler+0xbe>
	__asm volatile
 800a580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a584:	b672      	cpsid	i
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	b662      	cpsie	i
 800a594:	60fb      	str	r3, [r7, #12]
}
 800a596:	bf00      	nop
 800a598:	e7fe      	b.n	800a598 <vTaskStartScheduler+0xbc>
}
 800a59a:	bf00      	nop
 800a59c:	3718      	adds	r7, #24
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	0800d1a8 	.word	0x0800d1a8
 800a5a8:	0800ac09 	.word	0x0800ac09
 800a5ac:	2000147c 	.word	0x2000147c
 800a5b0:	20000f84 	.word	0x20000f84
 800a5b4:	200000bc 	.word	0x200000bc
 800a5b8:	20001478 	.word	0x20001478
 800a5bc:	20001464 	.word	0x20001464
 800a5c0:	2000145c 	.word	0x2000145c

0800a5c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a5c8:	4b04      	ldr	r3, [pc, #16]	; (800a5dc <vTaskSuspendAll+0x18>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	4a03      	ldr	r2, [pc, #12]	; (800a5dc <vTaskSuspendAll+0x18>)
 800a5d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a5d2:	bf00      	nop
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr
 800a5dc:	20001480 	.word	0x20001480

0800a5e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a5ee:	4b43      	ldr	r3, [pc, #268]	; (800a6fc <xTaskResumeAll+0x11c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10c      	bne.n	800a610 <xTaskResumeAll+0x30>
	__asm volatile
 800a5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fa:	b672      	cpsid	i
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	b662      	cpsie	i
 800a60a:	603b      	str	r3, [r7, #0]
}
 800a60c:	bf00      	nop
 800a60e:	e7fe      	b.n	800a60e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a610:	f001 f9e4 	bl	800b9dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a614:	4b39      	ldr	r3, [pc, #228]	; (800a6fc <xTaskResumeAll+0x11c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	3b01      	subs	r3, #1
 800a61a:	4a38      	ldr	r2, [pc, #224]	; (800a6fc <xTaskResumeAll+0x11c>)
 800a61c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a61e:	4b37      	ldr	r3, [pc, #220]	; (800a6fc <xTaskResumeAll+0x11c>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d162      	bne.n	800a6ec <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a626:	4b36      	ldr	r3, [pc, #216]	; (800a700 <xTaskResumeAll+0x120>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d05e      	beq.n	800a6ec <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a62e:	e02f      	b.n	800a690 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a630:	4b34      	ldr	r3, [pc, #208]	; (800a704 <xTaskResumeAll+0x124>)
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	3318      	adds	r3, #24
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7fe fe2d 	bl	800929c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	3304      	adds	r3, #4
 800a646:	4618      	mov	r0, r3
 800a648:	f7fe fe28 	bl	800929c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a650:	4b2d      	ldr	r3, [pc, #180]	; (800a708 <xTaskResumeAll+0x128>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	429a      	cmp	r2, r3
 800a656:	d903      	bls.n	800a660 <xTaskResumeAll+0x80>
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65c:	4a2a      	ldr	r2, [pc, #168]	; (800a708 <xTaskResumeAll+0x128>)
 800a65e:	6013      	str	r3, [r2, #0]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a664:	4613      	mov	r3, r2
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	4413      	add	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4a27      	ldr	r2, [pc, #156]	; (800a70c <xTaskResumeAll+0x12c>)
 800a66e:	441a      	add	r2, r3
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	3304      	adds	r3, #4
 800a674:	4619      	mov	r1, r3
 800a676:	4610      	mov	r0, r2
 800a678:	f7fe fdb3 	bl	80091e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a680:	4b23      	ldr	r3, [pc, #140]	; (800a710 <xTaskResumeAll+0x130>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a686:	429a      	cmp	r2, r3
 800a688:	d302      	bcc.n	800a690 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800a68a:	4b22      	ldr	r3, [pc, #136]	; (800a714 <xTaskResumeAll+0x134>)
 800a68c:	2201      	movs	r2, #1
 800a68e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a690:	4b1c      	ldr	r3, [pc, #112]	; (800a704 <xTaskResumeAll+0x124>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d1cb      	bne.n	800a630 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d001      	beq.n	800a6a2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a69e:	f000 fb6f 	bl	800ad80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a6a2:	4b1d      	ldr	r3, [pc, #116]	; (800a718 <xTaskResumeAll+0x138>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d010      	beq.n	800a6d0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a6ae:	f000 f847 	bl	800a740 <xTaskIncrementTick>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d002      	beq.n	800a6be <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800a6b8:	4b16      	ldr	r3, [pc, #88]	; (800a714 <xTaskResumeAll+0x134>)
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1f1      	bne.n	800a6ae <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800a6ca:	4b13      	ldr	r3, [pc, #76]	; (800a718 <xTaskResumeAll+0x138>)
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a6d0:	4b10      	ldr	r3, [pc, #64]	; (800a714 <xTaskResumeAll+0x134>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d009      	beq.n	800a6ec <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a6dc:	4b0f      	ldr	r3, [pc, #60]	; (800a71c <xTaskResumeAll+0x13c>)
 800a6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6ec:	f001 f9aa 	bl	800ba44 <vPortExitCritical>

	return xAlreadyYielded;
 800a6f0:	68bb      	ldr	r3, [r7, #8]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20001480 	.word	0x20001480
 800a700:	20001458 	.word	0x20001458
 800a704:	20001418 	.word	0x20001418
 800a708:	20001460 	.word	0x20001460
 800a70c:	20000f88 	.word	0x20000f88
 800a710:	20000f84 	.word	0x20000f84
 800a714:	2000146c 	.word	0x2000146c
 800a718:	20001468 	.word	0x20001468
 800a71c:	e000ed04 	.word	0xe000ed04

0800a720 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a726:	4b05      	ldr	r3, [pc, #20]	; (800a73c <xTaskGetTickCount+0x1c>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a72c:	687b      	ldr	r3, [r7, #4]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	2000145c 	.word	0x2000145c

0800a740 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a746:	2300      	movs	r3, #0
 800a748:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a74a:	4b50      	ldr	r3, [pc, #320]	; (800a88c <xTaskIncrementTick+0x14c>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f040 808b 	bne.w	800a86a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a754:	4b4e      	ldr	r3, [pc, #312]	; (800a890 <xTaskIncrementTick+0x150>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	3301      	adds	r3, #1
 800a75a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a75c:	4a4c      	ldr	r2, [pc, #304]	; (800a890 <xTaskIncrementTick+0x150>)
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d122      	bne.n	800a7ae <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a768:	4b4a      	ldr	r3, [pc, #296]	; (800a894 <xTaskIncrementTick+0x154>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00c      	beq.n	800a78c <xTaskIncrementTick+0x4c>
	__asm volatile
 800a772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a776:	b672      	cpsid	i
 800a778:	f383 8811 	msr	BASEPRI, r3
 800a77c:	f3bf 8f6f 	isb	sy
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	b662      	cpsie	i
 800a786:	603b      	str	r3, [r7, #0]
}
 800a788:	bf00      	nop
 800a78a:	e7fe      	b.n	800a78a <xTaskIncrementTick+0x4a>
 800a78c:	4b41      	ldr	r3, [pc, #260]	; (800a894 <xTaskIncrementTick+0x154>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	60fb      	str	r3, [r7, #12]
 800a792:	4b41      	ldr	r3, [pc, #260]	; (800a898 <xTaskIncrementTick+0x158>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a3f      	ldr	r2, [pc, #252]	; (800a894 <xTaskIncrementTick+0x154>)
 800a798:	6013      	str	r3, [r2, #0]
 800a79a:	4a3f      	ldr	r2, [pc, #252]	; (800a898 <xTaskIncrementTick+0x158>)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	4b3e      	ldr	r3, [pc, #248]	; (800a89c <xTaskIncrementTick+0x15c>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	4a3d      	ldr	r2, [pc, #244]	; (800a89c <xTaskIncrementTick+0x15c>)
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	f000 fae9 	bl	800ad80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7ae:	4b3c      	ldr	r3, [pc, #240]	; (800a8a0 <xTaskIncrementTick+0x160>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	693a      	ldr	r2, [r7, #16]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d349      	bcc.n	800a84c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7b8:	4b36      	ldr	r3, [pc, #216]	; (800a894 <xTaskIncrementTick+0x154>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d104      	bne.n	800a7cc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7c2:	4b37      	ldr	r3, [pc, #220]	; (800a8a0 <xTaskIncrementTick+0x160>)
 800a7c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c8:	601a      	str	r2, [r3, #0]
					break;
 800a7ca:	e03f      	b.n	800a84c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7cc:	4b31      	ldr	r3, [pc, #196]	; (800a894 <xTaskIncrementTick+0x154>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d203      	bcs.n	800a7ec <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a7e4:	4a2e      	ldr	r2, [pc, #184]	; (800a8a0 <xTaskIncrementTick+0x160>)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a7ea:	e02f      	b.n	800a84c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	3304      	adds	r3, #4
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7fe fd53 	bl	800929c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d004      	beq.n	800a808 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	3318      	adds	r3, #24
 800a802:	4618      	mov	r0, r3
 800a804:	f7fe fd4a 	bl	800929c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a80c:	4b25      	ldr	r3, [pc, #148]	; (800a8a4 <xTaskIncrementTick+0x164>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	429a      	cmp	r2, r3
 800a812:	d903      	bls.n	800a81c <xTaskIncrementTick+0xdc>
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a818:	4a22      	ldr	r2, [pc, #136]	; (800a8a4 <xTaskIncrementTick+0x164>)
 800a81a:	6013      	str	r3, [r2, #0]
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a820:	4613      	mov	r3, r2
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	4413      	add	r3, r2
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4a1f      	ldr	r2, [pc, #124]	; (800a8a8 <xTaskIncrementTick+0x168>)
 800a82a:	441a      	add	r2, r3
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	3304      	adds	r3, #4
 800a830:	4619      	mov	r1, r3
 800a832:	4610      	mov	r0, r2
 800a834:	f7fe fcd5 	bl	80091e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a83c:	4b1b      	ldr	r3, [pc, #108]	; (800a8ac <xTaskIncrementTick+0x16c>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a842:	429a      	cmp	r2, r3
 800a844:	d3b8      	bcc.n	800a7b8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a846:	2301      	movs	r3, #1
 800a848:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a84a:	e7b5      	b.n	800a7b8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a84c:	4b17      	ldr	r3, [pc, #92]	; (800a8ac <xTaskIncrementTick+0x16c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a852:	4915      	ldr	r1, [pc, #84]	; (800a8a8 <xTaskIncrementTick+0x168>)
 800a854:	4613      	mov	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4413      	add	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	440b      	add	r3, r1
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d907      	bls.n	800a874 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800a864:	2301      	movs	r3, #1
 800a866:	617b      	str	r3, [r7, #20]
 800a868:	e004      	b.n	800a874 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a86a:	4b11      	ldr	r3, [pc, #68]	; (800a8b0 <xTaskIncrementTick+0x170>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	3301      	adds	r3, #1
 800a870:	4a0f      	ldr	r2, [pc, #60]	; (800a8b0 <xTaskIncrementTick+0x170>)
 800a872:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a874:	4b0f      	ldr	r3, [pc, #60]	; (800a8b4 <xTaskIncrementTick+0x174>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d001      	beq.n	800a880 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800a87c:	2301      	movs	r3, #1
 800a87e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a880:	697b      	ldr	r3, [r7, #20]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3718      	adds	r7, #24
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	20001480 	.word	0x20001480
 800a890:	2000145c 	.word	0x2000145c
 800a894:	20001410 	.word	0x20001410
 800a898:	20001414 	.word	0x20001414
 800a89c:	20001470 	.word	0x20001470
 800a8a0:	20001478 	.word	0x20001478
 800a8a4:	20001460 	.word	0x20001460
 800a8a8:	20000f88 	.word	0x20000f88
 800a8ac:	20000f84 	.word	0x20000f84
 800a8b0:	20001468 	.word	0x20001468
 800a8b4:	2000146c 	.word	0x2000146c

0800a8b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a8be:	4b2b      	ldr	r3, [pc, #172]	; (800a96c <vTaskSwitchContext+0xb4>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d003      	beq.n	800a8ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a8c6:	4b2a      	ldr	r3, [pc, #168]	; (800a970 <vTaskSwitchContext+0xb8>)
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a8cc:	e048      	b.n	800a960 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800a8ce:	4b28      	ldr	r3, [pc, #160]	; (800a970 <vTaskSwitchContext+0xb8>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8d4:	4b27      	ldr	r3, [pc, #156]	; (800a974 <vTaskSwitchContext+0xbc>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	60fb      	str	r3, [r7, #12]
 800a8da:	e012      	b.n	800a902 <vTaskSwitchContext+0x4a>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10c      	bne.n	800a8fc <vTaskSwitchContext+0x44>
	__asm volatile
 800a8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e6:	b672      	cpsid	i
 800a8e8:	f383 8811 	msr	BASEPRI, r3
 800a8ec:	f3bf 8f6f 	isb	sy
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	b662      	cpsie	i
 800a8f6:	607b      	str	r3, [r7, #4]
}
 800a8f8:	bf00      	nop
 800a8fa:	e7fe      	b.n	800a8fa <vTaskSwitchContext+0x42>
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	60fb      	str	r3, [r7, #12]
 800a902:	491d      	ldr	r1, [pc, #116]	; (800a978 <vTaskSwitchContext+0xc0>)
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	4613      	mov	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4413      	add	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	440b      	add	r3, r1
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d0e2      	beq.n	800a8dc <vTaskSwitchContext+0x24>
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	4613      	mov	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	4413      	add	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	4a15      	ldr	r2, [pc, #84]	; (800a978 <vTaskSwitchContext+0xc0>)
 800a922:	4413      	add	r3, r2
 800a924:	60bb      	str	r3, [r7, #8]
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	605a      	str	r2, [r3, #4]
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	3308      	adds	r3, #8
 800a938:	429a      	cmp	r2, r3
 800a93a:	d104      	bne.n	800a946 <vTaskSwitchContext+0x8e>
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	685a      	ldr	r2, [r3, #4]
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	605a      	str	r2, [r3, #4]
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	4a0b      	ldr	r2, [pc, #44]	; (800a97c <vTaskSwitchContext+0xc4>)
 800a94e:	6013      	str	r3, [r2, #0]
 800a950:	4a08      	ldr	r2, [pc, #32]	; (800a974 <vTaskSwitchContext+0xbc>)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a956:	4b09      	ldr	r3, [pc, #36]	; (800a97c <vTaskSwitchContext+0xc4>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	3354      	adds	r3, #84	; 0x54
 800a95c:	4a08      	ldr	r2, [pc, #32]	; (800a980 <vTaskSwitchContext+0xc8>)
 800a95e:	6013      	str	r3, [r2, #0]
}
 800a960:	bf00      	nop
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	20001480 	.word	0x20001480
 800a970:	2000146c 	.word	0x2000146c
 800a974:	20001460 	.word	0x20001460
 800a978:	20000f88 	.word	0x20000f88
 800a97c:	20000f84 	.word	0x20000f84
 800a980:	200000bc 	.word	0x200000bc

0800a984 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10c      	bne.n	800a9ae <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a998:	b672      	cpsid	i
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	b662      	cpsie	i
 800a9a8:	60fb      	str	r3, [r7, #12]
}
 800a9aa:	bf00      	nop
 800a9ac:	e7fe      	b.n	800a9ac <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9ae:	4b07      	ldr	r3, [pc, #28]	; (800a9cc <vTaskPlaceOnEventList+0x48>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	3318      	adds	r3, #24
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7fe fc37 	bl	800922a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9bc:	2101      	movs	r1, #1
 800a9be:	6838      	ldr	r0, [r7, #0]
 800a9c0:	f000 fa8e 	bl	800aee0 <prvAddCurrentTaskToDelayedList>
}
 800a9c4:	bf00      	nop
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	20000f84 	.word	0x20000f84

0800a9d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10c      	bne.n	800a9fc <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800a9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e6:	b672      	cpsid	i
 800a9e8:	f383 8811 	msr	BASEPRI, r3
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	b662      	cpsie	i
 800a9f6:	617b      	str	r3, [r7, #20]
}
 800a9f8:	bf00      	nop
 800a9fa:	e7fe      	b.n	800a9fa <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9fc:	4b0a      	ldr	r3, [pc, #40]	; (800aa28 <vTaskPlaceOnEventListRestricted+0x58>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	3318      	adds	r3, #24
 800aa02:	4619      	mov	r1, r3
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f7fe fbec 	bl	80091e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d002      	beq.n	800aa16 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800aa10:	f04f 33ff 	mov.w	r3, #4294967295
 800aa14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa16:	6879      	ldr	r1, [r7, #4]
 800aa18:	68b8      	ldr	r0, [r7, #8]
 800aa1a:	f000 fa61 	bl	800aee0 <prvAddCurrentTaskToDelayedList>
	}
 800aa1e:	bf00      	nop
 800aa20:	3718      	adds	r7, #24
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	20000f84 	.word	0x20000f84

0800aa2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d10c      	bne.n	800aa5c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800aa42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa46:	b672      	cpsid	i
 800aa48:	f383 8811 	msr	BASEPRI, r3
 800aa4c:	f3bf 8f6f 	isb	sy
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	b662      	cpsie	i
 800aa56:	60fb      	str	r3, [r7, #12]
}
 800aa58:	bf00      	nop
 800aa5a:	e7fe      	b.n	800aa5a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	3318      	adds	r3, #24
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7fe fc1b 	bl	800929c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa66:	4b1e      	ldr	r3, [pc, #120]	; (800aae0 <xTaskRemoveFromEventList+0xb4>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d11d      	bne.n	800aaaa <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	3304      	adds	r3, #4
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fe fc12 	bl	800929c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa7c:	4b19      	ldr	r3, [pc, #100]	; (800aae4 <xTaskRemoveFromEventList+0xb8>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d903      	bls.n	800aa8c <xTaskRemoveFromEventList+0x60>
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa88:	4a16      	ldr	r2, [pc, #88]	; (800aae4 <xTaskRemoveFromEventList+0xb8>)
 800aa8a:	6013      	str	r3, [r2, #0]
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa90:	4613      	mov	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	4413      	add	r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4a13      	ldr	r2, [pc, #76]	; (800aae8 <xTaskRemoveFromEventList+0xbc>)
 800aa9a:	441a      	add	r2, r3
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	4610      	mov	r0, r2
 800aaa4:	f7fe fb9d 	bl	80091e2 <vListInsertEnd>
 800aaa8:	e005      	b.n	800aab6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	3318      	adds	r3, #24
 800aaae:	4619      	mov	r1, r3
 800aab0:	480e      	ldr	r0, [pc, #56]	; (800aaec <xTaskRemoveFromEventList+0xc0>)
 800aab2:	f7fe fb96 	bl	80091e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaba:	4b0d      	ldr	r3, [pc, #52]	; (800aaf0 <xTaskRemoveFromEventList+0xc4>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d905      	bls.n	800aad0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aac4:	2301      	movs	r3, #1
 800aac6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aac8:	4b0a      	ldr	r3, [pc, #40]	; (800aaf4 <xTaskRemoveFromEventList+0xc8>)
 800aaca:	2201      	movs	r2, #1
 800aacc:	601a      	str	r2, [r3, #0]
 800aace:	e001      	b.n	800aad4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800aad0:	2300      	movs	r3, #0
 800aad2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aad4:	697b      	ldr	r3, [r7, #20]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3718      	adds	r7, #24
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	20001480 	.word	0x20001480
 800aae4:	20001460 	.word	0x20001460
 800aae8:	20000f88 	.word	0x20000f88
 800aaec:	20001418 	.word	0x20001418
 800aaf0:	20000f84 	.word	0x20000f84
 800aaf4:	2000146c 	.word	0x2000146c

0800aaf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab00:	4b06      	ldr	r3, [pc, #24]	; (800ab1c <vTaskInternalSetTimeOutState+0x24>)
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab08:	4b05      	ldr	r3, [pc, #20]	; (800ab20 <vTaskInternalSetTimeOutState+0x28>)
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	605a      	str	r2, [r3, #4]
}
 800ab10:	bf00      	nop
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr
 800ab1c:	20001470 	.word	0x20001470
 800ab20:	2000145c 	.word	0x2000145c

0800ab24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b088      	sub	sp, #32
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10c      	bne.n	800ab4e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800ab34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab38:	b672      	cpsid	i
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	b662      	cpsie	i
 800ab48:	613b      	str	r3, [r7, #16]
}
 800ab4a:	bf00      	nop
 800ab4c:	e7fe      	b.n	800ab4c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10c      	bne.n	800ab6e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ab54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab58:	b672      	cpsid	i
 800ab5a:	f383 8811 	msr	BASEPRI, r3
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	b662      	cpsie	i
 800ab68:	60fb      	str	r3, [r7, #12]
}
 800ab6a:	bf00      	nop
 800ab6c:	e7fe      	b.n	800ab6c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ab6e:	f000 ff35 	bl	800b9dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab72:	4b1d      	ldr	r3, [pc, #116]	; (800abe8 <xTaskCheckForTimeOut+0xc4>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8a:	d102      	bne.n	800ab92 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	61fb      	str	r3, [r7, #28]
 800ab90:	e023      	b.n	800abda <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	4b15      	ldr	r3, [pc, #84]	; (800abec <xTaskCheckForTimeOut+0xc8>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d007      	beq.n	800abae <xTaskCheckForTimeOut+0x8a>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	69ba      	ldr	r2, [r7, #24]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d302      	bcc.n	800abae <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aba8:	2301      	movs	r3, #1
 800abaa:	61fb      	str	r3, [r7, #28]
 800abac:	e015      	b.n	800abda <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	697a      	ldr	r2, [r7, #20]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d20b      	bcs.n	800abd0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	1ad2      	subs	r2, r2, r3
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f7ff ff97 	bl	800aaf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800abca:	2300      	movs	r3, #0
 800abcc:	61fb      	str	r3, [r7, #28]
 800abce:	e004      	b.n	800abda <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	2200      	movs	r2, #0
 800abd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800abd6:	2301      	movs	r3, #1
 800abd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800abda:	f000 ff33 	bl	800ba44 <vPortExitCritical>

	return xReturn;
 800abde:	69fb      	ldr	r3, [r7, #28]
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3720      	adds	r7, #32
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	2000145c 	.word	0x2000145c
 800abec:	20001470 	.word	0x20001470

0800abf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800abf0:	b480      	push	{r7}
 800abf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800abf4:	4b03      	ldr	r3, [pc, #12]	; (800ac04 <vTaskMissedYield+0x14>)
 800abf6:	2201      	movs	r2, #1
 800abf8:	601a      	str	r2, [r3, #0]
}
 800abfa:	bf00      	nop
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr
 800ac04:	2000146c 	.word	0x2000146c

0800ac08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac10:	f000 f852 	bl	800acb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac14:	4b06      	ldr	r3, [pc, #24]	; (800ac30 <prvIdleTask+0x28>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d9f9      	bls.n	800ac10 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac1c:	4b05      	ldr	r3, [pc, #20]	; (800ac34 <prvIdleTask+0x2c>)
 800ac1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac22:	601a      	str	r2, [r3, #0]
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac2c:	e7f0      	b.n	800ac10 <prvIdleTask+0x8>
 800ac2e:	bf00      	nop
 800ac30:	20000f88 	.word	0x20000f88
 800ac34:	e000ed04 	.word	0xe000ed04

0800ac38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac3e:	2300      	movs	r3, #0
 800ac40:	607b      	str	r3, [r7, #4]
 800ac42:	e00c      	b.n	800ac5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	4613      	mov	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4a12      	ldr	r2, [pc, #72]	; (800ac98 <prvInitialiseTaskLists+0x60>)
 800ac50:	4413      	add	r3, r2
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fe fa98 	bl	8009188 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	607b      	str	r3, [r7, #4]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2b37      	cmp	r3, #55	; 0x37
 800ac62:	d9ef      	bls.n	800ac44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ac64:	480d      	ldr	r0, [pc, #52]	; (800ac9c <prvInitialiseTaskLists+0x64>)
 800ac66:	f7fe fa8f 	bl	8009188 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac6a:	480d      	ldr	r0, [pc, #52]	; (800aca0 <prvInitialiseTaskLists+0x68>)
 800ac6c:	f7fe fa8c 	bl	8009188 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac70:	480c      	ldr	r0, [pc, #48]	; (800aca4 <prvInitialiseTaskLists+0x6c>)
 800ac72:	f7fe fa89 	bl	8009188 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac76:	480c      	ldr	r0, [pc, #48]	; (800aca8 <prvInitialiseTaskLists+0x70>)
 800ac78:	f7fe fa86 	bl	8009188 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac7c:	480b      	ldr	r0, [pc, #44]	; (800acac <prvInitialiseTaskLists+0x74>)
 800ac7e:	f7fe fa83 	bl	8009188 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac82:	4b0b      	ldr	r3, [pc, #44]	; (800acb0 <prvInitialiseTaskLists+0x78>)
 800ac84:	4a05      	ldr	r2, [pc, #20]	; (800ac9c <prvInitialiseTaskLists+0x64>)
 800ac86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac88:	4b0a      	ldr	r3, [pc, #40]	; (800acb4 <prvInitialiseTaskLists+0x7c>)
 800ac8a:	4a05      	ldr	r2, [pc, #20]	; (800aca0 <prvInitialiseTaskLists+0x68>)
 800ac8c:	601a      	str	r2, [r3, #0]
}
 800ac8e:	bf00      	nop
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	20000f88 	.word	0x20000f88
 800ac9c:	200013e8 	.word	0x200013e8
 800aca0:	200013fc 	.word	0x200013fc
 800aca4:	20001418 	.word	0x20001418
 800aca8:	2000142c 	.word	0x2000142c
 800acac:	20001444 	.word	0x20001444
 800acb0:	20001410 	.word	0x20001410
 800acb4:	20001414 	.word	0x20001414

0800acb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acbe:	e019      	b.n	800acf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800acc0:	f000 fe8c 	bl	800b9dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acc4:	4b10      	ldr	r3, [pc, #64]	; (800ad08 <prvCheckTasksWaitingTermination+0x50>)
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	3304      	adds	r3, #4
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fe fae3 	bl	800929c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800acd6:	4b0d      	ldr	r3, [pc, #52]	; (800ad0c <prvCheckTasksWaitingTermination+0x54>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3b01      	subs	r3, #1
 800acdc:	4a0b      	ldr	r2, [pc, #44]	; (800ad0c <prvCheckTasksWaitingTermination+0x54>)
 800acde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ace0:	4b0b      	ldr	r3, [pc, #44]	; (800ad10 <prvCheckTasksWaitingTermination+0x58>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	3b01      	subs	r3, #1
 800ace6:	4a0a      	ldr	r2, [pc, #40]	; (800ad10 <prvCheckTasksWaitingTermination+0x58>)
 800ace8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800acea:	f000 feab 	bl	800ba44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f810 	bl	800ad14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acf4:	4b06      	ldr	r3, [pc, #24]	; (800ad10 <prvCheckTasksWaitingTermination+0x58>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1e1      	bne.n	800acc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800acfc:	bf00      	nop
 800acfe:	bf00      	nop
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	2000142c 	.word	0x2000142c
 800ad0c:	20001458 	.word	0x20001458
 800ad10:	20001440 	.word	0x20001440

0800ad14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	3354      	adds	r3, #84	; 0x54
 800ad20:	4618      	mov	r0, r3
 800ad22:	f001 fa97 	bl	800c254 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d108      	bne.n	800ad42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad34:	4618      	mov	r0, r3
 800ad36:	f001 f847 	bl	800bdc8 <vPortFree>
				vPortFree( pxTCB );
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f001 f844 	bl	800bdc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad40:	e01a      	b.n	800ad78 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d103      	bne.n	800ad54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f001 f83b 	bl	800bdc8 <vPortFree>
	}
 800ad52:	e011      	b.n	800ad78 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d00c      	beq.n	800ad78 <prvDeleteTCB+0x64>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad62:	b672      	cpsid	i
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	b662      	cpsie	i
 800ad72:	60fb      	str	r3, [r7, #12]
}
 800ad74:	bf00      	nop
 800ad76:	e7fe      	b.n	800ad76 <prvDeleteTCB+0x62>
	}
 800ad78:	bf00      	nop
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad86:	4b0c      	ldr	r3, [pc, #48]	; (800adb8 <prvResetNextTaskUnblockTime+0x38>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d104      	bne.n	800ad9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad90:	4b0a      	ldr	r3, [pc, #40]	; (800adbc <prvResetNextTaskUnblockTime+0x3c>)
 800ad92:	f04f 32ff 	mov.w	r2, #4294967295
 800ad96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad98:	e008      	b.n	800adac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad9a:	4b07      	ldr	r3, [pc, #28]	; (800adb8 <prvResetNextTaskUnblockTime+0x38>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	4a04      	ldr	r2, [pc, #16]	; (800adbc <prvResetNextTaskUnblockTime+0x3c>)
 800adaa:	6013      	str	r3, [r2, #0]
}
 800adac:	bf00      	nop
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr
 800adb8:	20001410 	.word	0x20001410
 800adbc:	20001478 	.word	0x20001478

0800adc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800adc6:	4b0b      	ldr	r3, [pc, #44]	; (800adf4 <xTaskGetSchedulerState+0x34>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d102      	bne.n	800add4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800adce:	2301      	movs	r3, #1
 800add0:	607b      	str	r3, [r7, #4]
 800add2:	e008      	b.n	800ade6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800add4:	4b08      	ldr	r3, [pc, #32]	; (800adf8 <xTaskGetSchedulerState+0x38>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d102      	bne.n	800ade2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800addc:	2302      	movs	r3, #2
 800adde:	607b      	str	r3, [r7, #4]
 800ade0:	e001      	b.n	800ade6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ade2:	2300      	movs	r3, #0
 800ade4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ade6:	687b      	ldr	r3, [r7, #4]
	}
 800ade8:	4618      	mov	r0, r3
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	20001464 	.word	0x20001464
 800adf8:	20001480 	.word	0x20001480

0800adfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b086      	sub	sp, #24
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d05a      	beq.n	800aec8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae12:	4b30      	ldr	r3, [pc, #192]	; (800aed4 <xTaskPriorityDisinherit+0xd8>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	693a      	ldr	r2, [r7, #16]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d00c      	beq.n	800ae36 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800ae1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae20:	b672      	cpsid	i
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	b662      	cpsie	i
 800ae30:	60fb      	str	r3, [r7, #12]
}
 800ae32:	bf00      	nop
 800ae34:	e7fe      	b.n	800ae34 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10c      	bne.n	800ae58 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	b672      	cpsid	i
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	b662      	cpsie	i
 800ae52:	60bb      	str	r3, [r7, #8]
}
 800ae54:	bf00      	nop
 800ae56:	e7fe      	b.n	800ae56 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae5c:	1e5a      	subs	r2, r3, #1
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d02c      	beq.n	800aec8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d128      	bne.n	800aec8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	3304      	adds	r3, #4
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7fe fa0e 	bl	800929c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae98:	4b0f      	ldr	r3, [pc, #60]	; (800aed8 <xTaskPriorityDisinherit+0xdc>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d903      	bls.n	800aea8 <xTaskPriorityDisinherit+0xac>
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea4:	4a0c      	ldr	r2, [pc, #48]	; (800aed8 <xTaskPriorityDisinherit+0xdc>)
 800aea6:	6013      	str	r3, [r2, #0]
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeac:	4613      	mov	r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4413      	add	r3, r2
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	4a09      	ldr	r2, [pc, #36]	; (800aedc <xTaskPriorityDisinherit+0xe0>)
 800aeb6:	441a      	add	r2, r3
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	3304      	adds	r3, #4
 800aebc:	4619      	mov	r1, r3
 800aebe:	4610      	mov	r0, r2
 800aec0:	f7fe f98f 	bl	80091e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aec4:	2301      	movs	r3, #1
 800aec6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aec8:	697b      	ldr	r3, [r7, #20]
	}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3718      	adds	r7, #24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	20000f84 	.word	0x20000f84
 800aed8:	20001460 	.word	0x20001460
 800aedc:	20000f88 	.word	0x20000f88

0800aee0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aeea:	4b21      	ldr	r3, [pc, #132]	; (800af70 <prvAddCurrentTaskToDelayedList+0x90>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aef0:	4b20      	ldr	r3, [pc, #128]	; (800af74 <prvAddCurrentTaskToDelayedList+0x94>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	3304      	adds	r3, #4
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fe f9d0 	bl	800929c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af02:	d10a      	bne.n	800af1a <prvAddCurrentTaskToDelayedList+0x3a>
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d007      	beq.n	800af1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af0a:	4b1a      	ldr	r3, [pc, #104]	; (800af74 <prvAddCurrentTaskToDelayedList+0x94>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3304      	adds	r3, #4
 800af10:	4619      	mov	r1, r3
 800af12:	4819      	ldr	r0, [pc, #100]	; (800af78 <prvAddCurrentTaskToDelayedList+0x98>)
 800af14:	f7fe f965 	bl	80091e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af18:	e026      	b.n	800af68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4413      	add	r3, r2
 800af20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af22:	4b14      	ldr	r3, [pc, #80]	; (800af74 <prvAddCurrentTaskToDelayedList+0x94>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af2a:	68ba      	ldr	r2, [r7, #8]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d209      	bcs.n	800af46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af32:	4b12      	ldr	r3, [pc, #72]	; (800af7c <prvAddCurrentTaskToDelayedList+0x9c>)
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	4b0f      	ldr	r3, [pc, #60]	; (800af74 <prvAddCurrentTaskToDelayedList+0x94>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	3304      	adds	r3, #4
 800af3c:	4619      	mov	r1, r3
 800af3e:	4610      	mov	r0, r2
 800af40:	f7fe f973 	bl	800922a <vListInsert>
}
 800af44:	e010      	b.n	800af68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af46:	4b0e      	ldr	r3, [pc, #56]	; (800af80 <prvAddCurrentTaskToDelayedList+0xa0>)
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	4b0a      	ldr	r3, [pc, #40]	; (800af74 <prvAddCurrentTaskToDelayedList+0x94>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	3304      	adds	r3, #4
 800af50:	4619      	mov	r1, r3
 800af52:	4610      	mov	r0, r2
 800af54:	f7fe f969 	bl	800922a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af58:	4b0a      	ldr	r3, [pc, #40]	; (800af84 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d202      	bcs.n	800af68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800af62:	4a08      	ldr	r2, [pc, #32]	; (800af84 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	6013      	str	r3, [r2, #0]
}
 800af68:	bf00      	nop
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	2000145c 	.word	0x2000145c
 800af74:	20000f84 	.word	0x20000f84
 800af78:	20001444 	.word	0x20001444
 800af7c:	20001414 	.word	0x20001414
 800af80:	20001410 	.word	0x20001410
 800af84:	20001478 	.word	0x20001478

0800af88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08a      	sub	sp, #40	; 0x28
 800af8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af8e:	2300      	movs	r3, #0
 800af90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af92:	f000 fbb5 	bl	800b700 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800af96:	4b1d      	ldr	r3, [pc, #116]	; (800b00c <xTimerCreateTimerTask+0x84>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d021      	beq.n	800afe2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af9e:	2300      	movs	r3, #0
 800afa0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800afa6:	1d3a      	adds	r2, r7, #4
 800afa8:	f107 0108 	add.w	r1, r7, #8
 800afac:	f107 030c 	add.w	r3, r7, #12
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7fe f8cf 	bl	8009154 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800afb6:	6879      	ldr	r1, [r7, #4]
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	9202      	str	r2, [sp, #8]
 800afbe:	9301      	str	r3, [sp, #4]
 800afc0:	2302      	movs	r3, #2
 800afc2:	9300      	str	r3, [sp, #0]
 800afc4:	2300      	movs	r3, #0
 800afc6:	460a      	mov	r2, r1
 800afc8:	4911      	ldr	r1, [pc, #68]	; (800b010 <xTimerCreateTimerTask+0x88>)
 800afca:	4812      	ldr	r0, [pc, #72]	; (800b014 <xTimerCreateTimerTask+0x8c>)
 800afcc:	f7fe fe9a 	bl	8009d04 <xTaskCreateStatic>
 800afd0:	4603      	mov	r3, r0
 800afd2:	4a11      	ldr	r2, [pc, #68]	; (800b018 <xTimerCreateTimerTask+0x90>)
 800afd4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800afd6:	4b10      	ldr	r3, [pc, #64]	; (800b018 <xTimerCreateTimerTask+0x90>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d001      	beq.n	800afe2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800afde:	2301      	movs	r3, #1
 800afe0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10c      	bne.n	800b002 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800afe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afec:	b672      	cpsid	i
 800afee:	f383 8811 	msr	BASEPRI, r3
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	f3bf 8f4f 	dsb	sy
 800affa:	b662      	cpsie	i
 800affc:	613b      	str	r3, [r7, #16]
}
 800affe:	bf00      	nop
 800b000:	e7fe      	b.n	800b000 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b002:	697b      	ldr	r3, [r7, #20]
}
 800b004:	4618      	mov	r0, r3
 800b006:	3718      	adds	r7, #24
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	200014b4 	.word	0x200014b4
 800b010:	0800d1b0 	.word	0x0800d1b0
 800b014:	0800b299 	.word	0x0800b299
 800b018:	200014b8 	.word	0x200014b8

0800b01c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b088      	sub	sp, #32
 800b020:	af02      	add	r7, sp, #8
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
 800b028:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b02a:	202c      	movs	r0, #44	; 0x2c
 800b02c:	f000 fe02 	bl	800bc34 <pvPortMalloc>
 800b030:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00d      	beq.n	800b054 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	9301      	str	r3, [sp, #4]
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	68b9      	ldr	r1, [r7, #8]
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f000 f847 	bl	800b0e2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b054:	697b      	ldr	r3, [r7, #20]
	}
 800b056:	4618      	mov	r0, r3
 800b058:	3718      	adds	r7, #24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b08a      	sub	sp, #40	; 0x28
 800b062:	af02      	add	r7, sp, #8
 800b064:	60f8      	str	r0, [r7, #12]
 800b066:	60b9      	str	r1, [r7, #8]
 800b068:	607a      	str	r2, [r7, #4]
 800b06a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b06c:	232c      	movs	r3, #44	; 0x2c
 800b06e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	2b2c      	cmp	r3, #44	; 0x2c
 800b074:	d00c      	beq.n	800b090 <xTimerCreateStatic+0x32>
	__asm volatile
 800b076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07a:	b672      	cpsid	i
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	b662      	cpsie	i
 800b08a:	61bb      	str	r3, [r7, #24]
}
 800b08c:	bf00      	nop
 800b08e:	e7fe      	b.n	800b08e <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b090:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b094:	2b00      	cmp	r3, #0
 800b096:	d10c      	bne.n	800b0b2 <xTimerCreateStatic+0x54>
	__asm volatile
 800b098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09c:	b672      	cpsid	i
 800b09e:	f383 8811 	msr	BASEPRI, r3
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	b662      	cpsie	i
 800b0ac:	617b      	str	r3, [r7, #20]
}
 800b0ae:	bf00      	nop
 800b0b0:	e7fe      	b.n	800b0b0 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800b0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00d      	beq.n	800b0d8 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	2202      	movs	r2, #2
 800b0c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	9301      	str	r3, [sp, #4]
 800b0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ca:	9300      	str	r3, [sp, #0]
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	68b9      	ldr	r1, [r7, #8]
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f000 f805 	bl	800b0e2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b0d8:	69fb      	ldr	r3, [r7, #28]
	}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3720      	adds	r7, #32
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b086      	sub	sp, #24
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	60f8      	str	r0, [r7, #12]
 800b0ea:	60b9      	str	r1, [r7, #8]
 800b0ec:	607a      	str	r2, [r7, #4]
 800b0ee:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10c      	bne.n	800b110 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800b0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fa:	b672      	cpsid	i
 800b0fc:	f383 8811 	msr	BASEPRI, r3
 800b100:	f3bf 8f6f 	isb	sy
 800b104:	f3bf 8f4f 	dsb	sy
 800b108:	b662      	cpsie	i
 800b10a:	617b      	str	r3, [r7, #20]
}
 800b10c:	bf00      	nop
 800b10e:	e7fe      	b.n	800b10e <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b112:	2b00      	cmp	r3, #0
 800b114:	d01e      	beq.n	800b154 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b116:	f000 faf3 	bl	800b700 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11c:	68fa      	ldr	r2, [r7, #12]
 800b11e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	683a      	ldr	r2, [r7, #0]
 800b12a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12e:	6a3a      	ldr	r2, [r7, #32]
 800b130:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b134:	3304      	adds	r3, #4
 800b136:	4618      	mov	r0, r3
 800b138:	f7fe f846 	bl	80091c8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d008      	beq.n	800b154 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b148:	f043 0304 	orr.w	r3, r3, #4
 800b14c:	b2da      	uxtb	r2, r3
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b154:	bf00      	nop
 800b156:	3718      	adds	r7, #24
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b08a      	sub	sp, #40	; 0x28
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
 800b168:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b16a:	2300      	movs	r3, #0
 800b16c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d10c      	bne.n	800b18e <xTimerGenericCommand+0x32>
	__asm volatile
 800b174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b178:	b672      	cpsid	i
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	b662      	cpsie	i
 800b188:	623b      	str	r3, [r7, #32]
}
 800b18a:	bf00      	nop
 800b18c:	e7fe      	b.n	800b18c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b18e:	4b1a      	ldr	r3, [pc, #104]	; (800b1f8 <xTimerGenericCommand+0x9c>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d02a      	beq.n	800b1ec <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	2b05      	cmp	r3, #5
 800b1a6:	dc18      	bgt.n	800b1da <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b1a8:	f7ff fe0a 	bl	800adc0 <xTaskGetSchedulerState>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	d109      	bne.n	800b1c6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b1b2:	4b11      	ldr	r3, [pc, #68]	; (800b1f8 <xTimerGenericCommand+0x9c>)
 800b1b4:	6818      	ldr	r0, [r3, #0]
 800b1b6:	f107 0110 	add.w	r1, r7, #16
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1be:	f7fe f9a7 	bl	8009510 <xQueueGenericSend>
 800b1c2:	6278      	str	r0, [r7, #36]	; 0x24
 800b1c4:	e012      	b.n	800b1ec <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b1c6:	4b0c      	ldr	r3, [pc, #48]	; (800b1f8 <xTimerGenericCommand+0x9c>)
 800b1c8:	6818      	ldr	r0, [r3, #0]
 800b1ca:	f107 0110 	add.w	r1, r7, #16
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f7fe f99d 	bl	8009510 <xQueueGenericSend>
 800b1d6:	6278      	str	r0, [r7, #36]	; 0x24
 800b1d8:	e008      	b.n	800b1ec <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b1da:	4b07      	ldr	r3, [pc, #28]	; (800b1f8 <xTimerGenericCommand+0x9c>)
 800b1dc:	6818      	ldr	r0, [r3, #0]
 800b1de:	f107 0110 	add.w	r1, r7, #16
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	683a      	ldr	r2, [r7, #0]
 800b1e6:	f7fe fa99 	bl	800971c <xQueueGenericSendFromISR>
 800b1ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3728      	adds	r7, #40	; 0x28
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	200014b4 	.word	0x200014b4

0800b1fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b088      	sub	sp, #32
 800b200:	af02      	add	r7, sp, #8
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b206:	4b23      	ldr	r3, [pc, #140]	; (800b294 <prvProcessExpiredTimer+0x98>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	3304      	adds	r3, #4
 800b214:	4618      	mov	r0, r3
 800b216:	f7fe f841 	bl	800929c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b220:	f003 0304 	and.w	r3, r3, #4
 800b224:	2b00      	cmp	r3, #0
 800b226:	d024      	beq.n	800b272 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	699a      	ldr	r2, [r3, #24]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	18d1      	adds	r1, r2, r3
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	6978      	ldr	r0, [r7, #20]
 800b236:	f000 f8d3 	bl	800b3e0 <prvInsertTimerInActiveList>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d021      	beq.n	800b284 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b240:	2300      	movs	r3, #0
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	2300      	movs	r3, #0
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	2100      	movs	r1, #0
 800b24a:	6978      	ldr	r0, [r7, #20]
 800b24c:	f7ff ff86 	bl	800b15c <xTimerGenericCommand>
 800b250:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d115      	bne.n	800b284 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800b258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25c:	b672      	cpsid	i
 800b25e:	f383 8811 	msr	BASEPRI, r3
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	b662      	cpsie	i
 800b26c:	60fb      	str	r3, [r7, #12]
}
 800b26e:	bf00      	nop
 800b270:	e7fe      	b.n	800b270 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b278:	f023 0301 	bic.w	r3, r3, #1
 800b27c:	b2da      	uxtb	r2, r3
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	6a1b      	ldr	r3, [r3, #32]
 800b288:	6978      	ldr	r0, [r7, #20]
 800b28a:	4798      	blx	r3
}
 800b28c:	bf00      	nop
 800b28e:	3718      	adds	r7, #24
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	200014ac 	.word	0x200014ac

0800b298 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b2a0:	f107 0308 	add.w	r3, r7, #8
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f000 f857 	bl	800b358 <prvGetNextExpireTime>
 800b2aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f000 f803 	bl	800b2bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b2b6:	f000 f8d5 	bl	800b464 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b2ba:	e7f1      	b.n	800b2a0 <prvTimerTask+0x8>

0800b2bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b2c6:	f7ff f97d 	bl	800a5c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b2ca:	f107 0308 	add.w	r3, r7, #8
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f000 f866 	bl	800b3a0 <prvSampleTimeNow>
 800b2d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d130      	bne.n	800b33e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d10a      	bne.n	800b2f8 <prvProcessTimerOrBlockTask+0x3c>
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d806      	bhi.n	800b2f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b2ea:	f7ff f979 	bl	800a5e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b2ee:	68f9      	ldr	r1, [r7, #12]
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f7ff ff83 	bl	800b1fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b2f6:	e024      	b.n	800b342 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d008      	beq.n	800b310 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b2fe:	4b13      	ldr	r3, [pc, #76]	; (800b34c <prvProcessTimerOrBlockTask+0x90>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d101      	bne.n	800b30c <prvProcessTimerOrBlockTask+0x50>
 800b308:	2301      	movs	r3, #1
 800b30a:	e000      	b.n	800b30e <prvProcessTimerOrBlockTask+0x52>
 800b30c:	2300      	movs	r3, #0
 800b30e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b310:	4b0f      	ldr	r3, [pc, #60]	; (800b350 <prvProcessTimerOrBlockTask+0x94>)
 800b312:	6818      	ldr	r0, [r3, #0]
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	4619      	mov	r1, r3
 800b31e:	f7fe fcbd 	bl	8009c9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b322:	f7ff f95d 	bl	800a5e0 <xTaskResumeAll>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d10a      	bne.n	800b342 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b32c:	4b09      	ldr	r3, [pc, #36]	; (800b354 <prvProcessTimerOrBlockTask+0x98>)
 800b32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b332:	601a      	str	r2, [r3, #0]
 800b334:	f3bf 8f4f 	dsb	sy
 800b338:	f3bf 8f6f 	isb	sy
}
 800b33c:	e001      	b.n	800b342 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b33e:	f7ff f94f 	bl	800a5e0 <xTaskResumeAll>
}
 800b342:	bf00      	nop
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	200014b0 	.word	0x200014b0
 800b350:	200014b4 	.word	0x200014b4
 800b354:	e000ed04 	.word	0xe000ed04

0800b358 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b360:	4b0e      	ldr	r3, [pc, #56]	; (800b39c <prvGetNextExpireTime+0x44>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d101      	bne.n	800b36e <prvGetNextExpireTime+0x16>
 800b36a:	2201      	movs	r2, #1
 800b36c:	e000      	b.n	800b370 <prvGetNextExpireTime+0x18>
 800b36e:	2200      	movs	r2, #0
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d105      	bne.n	800b388 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b37c:	4b07      	ldr	r3, [pc, #28]	; (800b39c <prvGetNextExpireTime+0x44>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	60fb      	str	r3, [r7, #12]
 800b386:	e001      	b.n	800b38c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b388:	2300      	movs	r3, #0
 800b38a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b38c:	68fb      	ldr	r3, [r7, #12]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3714      	adds	r7, #20
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop
 800b39c:	200014ac 	.word	0x200014ac

0800b3a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b3a8:	f7ff f9ba 	bl	800a720 <xTaskGetTickCount>
 800b3ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b3ae:	4b0b      	ldr	r3, [pc, #44]	; (800b3dc <prvSampleTimeNow+0x3c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d205      	bcs.n	800b3c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b3b8:	f000 f93c 	bl	800b634 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	e002      	b.n	800b3ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b3ca:	4a04      	ldr	r2, [pc, #16]	; (800b3dc <prvSampleTimeNow+0x3c>)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	200014bc 	.word	0x200014bc

0800b3e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b086      	sub	sp, #24
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	607a      	str	r2, [r7, #4]
 800b3ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	429a      	cmp	r2, r3
 800b404:	d812      	bhi.n	800b42c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	1ad2      	subs	r2, r2, r3
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	429a      	cmp	r2, r3
 800b412:	d302      	bcc.n	800b41a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b414:	2301      	movs	r3, #1
 800b416:	617b      	str	r3, [r7, #20]
 800b418:	e01b      	b.n	800b452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b41a:	4b10      	ldr	r3, [pc, #64]	; (800b45c <prvInsertTimerInActiveList+0x7c>)
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	3304      	adds	r3, #4
 800b422:	4619      	mov	r1, r3
 800b424:	4610      	mov	r0, r2
 800b426:	f7fd ff00 	bl	800922a <vListInsert>
 800b42a:	e012      	b.n	800b452 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	429a      	cmp	r2, r3
 800b432:	d206      	bcs.n	800b442 <prvInsertTimerInActiveList+0x62>
 800b434:	68ba      	ldr	r2, [r7, #8]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d302      	bcc.n	800b442 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b43c:	2301      	movs	r3, #1
 800b43e:	617b      	str	r3, [r7, #20]
 800b440:	e007      	b.n	800b452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b442:	4b07      	ldr	r3, [pc, #28]	; (800b460 <prvInsertTimerInActiveList+0x80>)
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	3304      	adds	r3, #4
 800b44a:	4619      	mov	r1, r3
 800b44c:	4610      	mov	r0, r2
 800b44e:	f7fd feec 	bl	800922a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b452:	697b      	ldr	r3, [r7, #20]
}
 800b454:	4618      	mov	r0, r3
 800b456:	3718      	adds	r7, #24
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	200014b0 	.word	0x200014b0
 800b460:	200014ac 	.word	0x200014ac

0800b464 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b08e      	sub	sp, #56	; 0x38
 800b468:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b46a:	e0d0      	b.n	800b60e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	da1a      	bge.n	800b4a8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b472:	1d3b      	adds	r3, r7, #4
 800b474:	3304      	adds	r3, #4
 800b476:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10c      	bne.n	800b498 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800b47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b482:	b672      	cpsid	i
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	b662      	cpsie	i
 800b492:	61fb      	str	r3, [r7, #28]
}
 800b494:	bf00      	nop
 800b496:	e7fe      	b.n	800b496 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b49e:	6850      	ldr	r0, [r2, #4]
 800b4a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4a2:	6892      	ldr	r2, [r2, #8]
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f2c0 80af 	blt.w	800b60e <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b6:	695b      	ldr	r3, [r3, #20]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d004      	beq.n	800b4c6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4be:	3304      	adds	r3, #4
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7fd feeb 	bl	800929c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4c6:	463b      	mov	r3, r7
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7ff ff69 	bl	800b3a0 <prvSampleTimeNow>
 800b4ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2b09      	cmp	r3, #9
 800b4d4:	f200 809a 	bhi.w	800b60c <prvProcessReceivedCommands+0x1a8>
 800b4d8:	a201      	add	r2, pc, #4	; (adr r2, 800b4e0 <prvProcessReceivedCommands+0x7c>)
 800b4da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4de:	bf00      	nop
 800b4e0:	0800b509 	.word	0x0800b509
 800b4e4:	0800b509 	.word	0x0800b509
 800b4e8:	0800b509 	.word	0x0800b509
 800b4ec:	0800b581 	.word	0x0800b581
 800b4f0:	0800b595 	.word	0x0800b595
 800b4f4:	0800b5e3 	.word	0x0800b5e3
 800b4f8:	0800b509 	.word	0x0800b509
 800b4fc:	0800b509 	.word	0x0800b509
 800b500:	0800b581 	.word	0x0800b581
 800b504:	0800b595 	.word	0x0800b595
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b50e:	f043 0301 	orr.w	r3, r3, #1
 800b512:	b2da      	uxtb	r2, r3
 800b514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b51a:	68ba      	ldr	r2, [r7, #8]
 800b51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51e:	699b      	ldr	r3, [r3, #24]
 800b520:	18d1      	adds	r1, r2, r3
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b528:	f7ff ff5a 	bl	800b3e0 <prvInsertTimerInActiveList>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d06d      	beq.n	800b60e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b534:	6a1b      	ldr	r3, [r3, #32]
 800b536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b538:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b540:	f003 0304 	and.w	r3, r3, #4
 800b544:	2b00      	cmp	r3, #0
 800b546:	d062      	beq.n	800b60e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b548:	68ba      	ldr	r2, [r7, #8]
 800b54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54c:	699b      	ldr	r3, [r3, #24]
 800b54e:	441a      	add	r2, r3
 800b550:	2300      	movs	r3, #0
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	2300      	movs	r3, #0
 800b556:	2100      	movs	r1, #0
 800b558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b55a:	f7ff fdff 	bl	800b15c <xTimerGenericCommand>
 800b55e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b560:	6a3b      	ldr	r3, [r7, #32]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d153      	bne.n	800b60e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800b566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56a:	b672      	cpsid	i
 800b56c:	f383 8811 	msr	BASEPRI, r3
 800b570:	f3bf 8f6f 	isb	sy
 800b574:	f3bf 8f4f 	dsb	sy
 800b578:	b662      	cpsie	i
 800b57a:	61bb      	str	r3, [r7, #24]
}
 800b57c:	bf00      	nop
 800b57e:	e7fe      	b.n	800b57e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b586:	f023 0301 	bic.w	r3, r3, #1
 800b58a:	b2da      	uxtb	r2, r3
 800b58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b592:	e03c      	b.n	800b60e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b59a:	f043 0301 	orr.w	r3, r3, #1
 800b59e:	b2da      	uxtb	r2, r3
 800b5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ae:	699b      	ldr	r3, [r3, #24]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10c      	bne.n	800b5ce <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b8:	b672      	cpsid	i
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	b662      	cpsie	i
 800b5c8:	617b      	str	r3, [r7, #20]
}
 800b5ca:	bf00      	nop
 800b5cc:	e7fe      	b.n	800b5cc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d0:	699a      	ldr	r2, [r3, #24]
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d4:	18d1      	adds	r1, r2, r3
 800b5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5dc:	f7ff ff00 	bl	800b3e0 <prvInsertTimerInActiveList>
					break;
 800b5e0:	e015      	b.n	800b60e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5e8:	f003 0302 	and.w	r3, r3, #2
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d103      	bne.n	800b5f8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800b5f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5f2:	f000 fbe9 	bl	800bdc8 <vPortFree>
 800b5f6:	e00a      	b.n	800b60e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5fe:	f023 0301 	bic.w	r3, r3, #1
 800b602:	b2da      	uxtb	r2, r3
 800b604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b60a:	e000      	b.n	800b60e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800b60c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b60e:	4b08      	ldr	r3, [pc, #32]	; (800b630 <prvProcessReceivedCommands+0x1cc>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	1d39      	adds	r1, r7, #4
 800b614:	2200      	movs	r2, #0
 800b616:	4618      	mov	r0, r3
 800b618:	f7fe f920 	bl	800985c <xQueueReceive>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f47f af24 	bne.w	800b46c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b624:	bf00      	nop
 800b626:	bf00      	nop
 800b628:	3730      	adds	r7, #48	; 0x30
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	200014b4 	.word	0x200014b4

0800b634 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b088      	sub	sp, #32
 800b638:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b63a:	e04a      	b.n	800b6d2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b63c:	4b2e      	ldr	r3, [pc, #184]	; (800b6f8 <prvSwitchTimerLists+0xc4>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b646:	4b2c      	ldr	r3, [pc, #176]	; (800b6f8 <prvSwitchTimerLists+0xc4>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	3304      	adds	r3, #4
 800b654:	4618      	mov	r0, r3
 800b656:	f7fd fe21 	bl	800929c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b668:	f003 0304 	and.w	r3, r3, #4
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d030      	beq.n	800b6d2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	699b      	ldr	r3, [r3, #24]
 800b674:	693a      	ldr	r2, [r7, #16]
 800b676:	4413      	add	r3, r2
 800b678:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d90e      	bls.n	800b6a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b68e:	4b1a      	ldr	r3, [pc, #104]	; (800b6f8 <prvSwitchTimerLists+0xc4>)
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	3304      	adds	r3, #4
 800b696:	4619      	mov	r1, r3
 800b698:	4610      	mov	r0, r2
 800b69a:	f7fd fdc6 	bl	800922a <vListInsert>
 800b69e:	e018      	b.n	800b6d2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	693a      	ldr	r2, [r7, #16]
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f7ff fd56 	bl	800b15c <xTimerGenericCommand>
 800b6b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10c      	bne.n	800b6d2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800b6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6bc:	b672      	cpsid	i
 800b6be:	f383 8811 	msr	BASEPRI, r3
 800b6c2:	f3bf 8f6f 	isb	sy
 800b6c6:	f3bf 8f4f 	dsb	sy
 800b6ca:	b662      	cpsie	i
 800b6cc:	603b      	str	r3, [r7, #0]
}
 800b6ce:	bf00      	nop
 800b6d0:	e7fe      	b.n	800b6d0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b6d2:	4b09      	ldr	r3, [pc, #36]	; (800b6f8 <prvSwitchTimerLists+0xc4>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1af      	bne.n	800b63c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b6dc:	4b06      	ldr	r3, [pc, #24]	; (800b6f8 <prvSwitchTimerLists+0xc4>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b6e2:	4b06      	ldr	r3, [pc, #24]	; (800b6fc <prvSwitchTimerLists+0xc8>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a04      	ldr	r2, [pc, #16]	; (800b6f8 <prvSwitchTimerLists+0xc4>)
 800b6e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b6ea:	4a04      	ldr	r2, [pc, #16]	; (800b6fc <prvSwitchTimerLists+0xc8>)
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	6013      	str	r3, [r2, #0]
}
 800b6f0:	bf00      	nop
 800b6f2:	3718      	adds	r7, #24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	200014ac 	.word	0x200014ac
 800b6fc:	200014b0 	.word	0x200014b0

0800b700 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b706:	f000 f969 	bl	800b9dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b70a:	4b15      	ldr	r3, [pc, #84]	; (800b760 <prvCheckForValidListAndQueue+0x60>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d120      	bne.n	800b754 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b712:	4814      	ldr	r0, [pc, #80]	; (800b764 <prvCheckForValidListAndQueue+0x64>)
 800b714:	f7fd fd38 	bl	8009188 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b718:	4813      	ldr	r0, [pc, #76]	; (800b768 <prvCheckForValidListAndQueue+0x68>)
 800b71a:	f7fd fd35 	bl	8009188 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b71e:	4b13      	ldr	r3, [pc, #76]	; (800b76c <prvCheckForValidListAndQueue+0x6c>)
 800b720:	4a10      	ldr	r2, [pc, #64]	; (800b764 <prvCheckForValidListAndQueue+0x64>)
 800b722:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b724:	4b12      	ldr	r3, [pc, #72]	; (800b770 <prvCheckForValidListAndQueue+0x70>)
 800b726:	4a10      	ldr	r2, [pc, #64]	; (800b768 <prvCheckForValidListAndQueue+0x68>)
 800b728:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b72a:	2300      	movs	r3, #0
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	4b11      	ldr	r3, [pc, #68]	; (800b774 <prvCheckForValidListAndQueue+0x74>)
 800b730:	4a11      	ldr	r2, [pc, #68]	; (800b778 <prvCheckForValidListAndQueue+0x78>)
 800b732:	2110      	movs	r1, #16
 800b734:	200a      	movs	r0, #10
 800b736:	f7fd fe45 	bl	80093c4 <xQueueGenericCreateStatic>
 800b73a:	4603      	mov	r3, r0
 800b73c:	4a08      	ldr	r2, [pc, #32]	; (800b760 <prvCheckForValidListAndQueue+0x60>)
 800b73e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b740:	4b07      	ldr	r3, [pc, #28]	; (800b760 <prvCheckForValidListAndQueue+0x60>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d005      	beq.n	800b754 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b748:	4b05      	ldr	r3, [pc, #20]	; (800b760 <prvCheckForValidListAndQueue+0x60>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	490b      	ldr	r1, [pc, #44]	; (800b77c <prvCheckForValidListAndQueue+0x7c>)
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fe fa7a 	bl	8009c48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b754:	f000 f976 	bl	800ba44 <vPortExitCritical>
}
 800b758:	bf00      	nop
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	200014b4 	.word	0x200014b4
 800b764:	20001484 	.word	0x20001484
 800b768:	20001498 	.word	0x20001498
 800b76c:	200014ac 	.word	0x200014ac
 800b770:	200014b0 	.word	0x200014b0
 800b774:	20001560 	.word	0x20001560
 800b778:	200014c0 	.word	0x200014c0
 800b77c:	0800d1b8 	.word	0x0800d1b8

0800b780 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b086      	sub	sp, #24
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10c      	bne.n	800b7ac <pvTimerGetTimerID+0x2c>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b796:	b672      	cpsid	i
 800b798:	f383 8811 	msr	BASEPRI, r3
 800b79c:	f3bf 8f6f 	isb	sy
 800b7a0:	f3bf 8f4f 	dsb	sy
 800b7a4:	b662      	cpsie	i
 800b7a6:	60fb      	str	r3, [r7, #12]
}
 800b7a8:	bf00      	nop
 800b7aa:	e7fe      	b.n	800b7aa <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800b7ac:	f000 f916 	bl	800b9dc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	69db      	ldr	r3, [r3, #28]
 800b7b4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b7b6:	f000 f945 	bl	800ba44 <vPortExitCritical>

	return pvReturn;
 800b7ba:	693b      	ldr	r3, [r7, #16]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3718      	adds	r7, #24
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	3b04      	subs	r3, #4
 800b7d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b7dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	3b04      	subs	r3, #4
 800b7e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	f023 0201 	bic.w	r2, r3, #1
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	3b04      	subs	r3, #4
 800b7f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7f4:	4a0c      	ldr	r2, [pc, #48]	; (800b828 <pxPortInitialiseStack+0x64>)
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	3b14      	subs	r3, #20
 800b7fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	3b04      	subs	r3, #4
 800b80a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f06f 0202 	mvn.w	r2, #2
 800b812:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	3b20      	subs	r3, #32
 800b818:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b81a:	68fb      	ldr	r3, [r7, #12]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3714      	adds	r7, #20
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr
 800b828:	0800b82d 	.word	0x0800b82d

0800b82c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b832:	2300      	movs	r3, #0
 800b834:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b836:	4b14      	ldr	r3, [pc, #80]	; (800b888 <prvTaskExitError+0x5c>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83e:	d00c      	beq.n	800b85a <prvTaskExitError+0x2e>
	__asm volatile
 800b840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b844:	b672      	cpsid	i
 800b846:	f383 8811 	msr	BASEPRI, r3
 800b84a:	f3bf 8f6f 	isb	sy
 800b84e:	f3bf 8f4f 	dsb	sy
 800b852:	b662      	cpsie	i
 800b854:	60fb      	str	r3, [r7, #12]
}
 800b856:	bf00      	nop
 800b858:	e7fe      	b.n	800b858 <prvTaskExitError+0x2c>
	__asm volatile
 800b85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85e:	b672      	cpsid	i
 800b860:	f383 8811 	msr	BASEPRI, r3
 800b864:	f3bf 8f6f 	isb	sy
 800b868:	f3bf 8f4f 	dsb	sy
 800b86c:	b662      	cpsie	i
 800b86e:	60bb      	str	r3, [r7, #8]
}
 800b870:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b872:	bf00      	nop
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d0fc      	beq.n	800b874 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b87a:	bf00      	nop
 800b87c:	bf00      	nop
 800b87e:	3714      	adds	r7, #20
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr
 800b888:	20000060 	.word	0x20000060
 800b88c:	00000000 	.word	0x00000000

0800b890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b890:	4b07      	ldr	r3, [pc, #28]	; (800b8b0 <pxCurrentTCBConst2>)
 800b892:	6819      	ldr	r1, [r3, #0]
 800b894:	6808      	ldr	r0, [r1, #0]
 800b896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b89a:	f380 8809 	msr	PSP, r0
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f04f 0000 	mov.w	r0, #0
 800b8a6:	f380 8811 	msr	BASEPRI, r0
 800b8aa:	4770      	bx	lr
 800b8ac:	f3af 8000 	nop.w

0800b8b0 <pxCurrentTCBConst2>:
 800b8b0:	20000f84 	.word	0x20000f84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b8b4:	bf00      	nop
 800b8b6:	bf00      	nop

0800b8b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b8b8:	4808      	ldr	r0, [pc, #32]	; (800b8dc <prvPortStartFirstTask+0x24>)
 800b8ba:	6800      	ldr	r0, [r0, #0]
 800b8bc:	6800      	ldr	r0, [r0, #0]
 800b8be:	f380 8808 	msr	MSP, r0
 800b8c2:	f04f 0000 	mov.w	r0, #0
 800b8c6:	f380 8814 	msr	CONTROL, r0
 800b8ca:	b662      	cpsie	i
 800b8cc:	b661      	cpsie	f
 800b8ce:	f3bf 8f4f 	dsb	sy
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	df00      	svc	0
 800b8d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b8da:	bf00      	nop
 800b8dc:	e000ed08 	.word	0xe000ed08

0800b8e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b8e6:	4b37      	ldr	r3, [pc, #220]	; (800b9c4 <xPortStartScheduler+0xe4>)
 800b8e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	22ff      	movs	r2, #255	; 0xff
 800b8f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b900:	78fb      	ldrb	r3, [r7, #3]
 800b902:	b2db      	uxtb	r3, r3
 800b904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b908:	b2da      	uxtb	r2, r3
 800b90a:	4b2f      	ldr	r3, [pc, #188]	; (800b9c8 <xPortStartScheduler+0xe8>)
 800b90c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b90e:	4b2f      	ldr	r3, [pc, #188]	; (800b9cc <xPortStartScheduler+0xec>)
 800b910:	2207      	movs	r2, #7
 800b912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b914:	e009      	b.n	800b92a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b916:	4b2d      	ldr	r3, [pc, #180]	; (800b9cc <xPortStartScheduler+0xec>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3b01      	subs	r3, #1
 800b91c:	4a2b      	ldr	r2, [pc, #172]	; (800b9cc <xPortStartScheduler+0xec>)
 800b91e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b920:	78fb      	ldrb	r3, [r7, #3]
 800b922:	b2db      	uxtb	r3, r3
 800b924:	005b      	lsls	r3, r3, #1
 800b926:	b2db      	uxtb	r3, r3
 800b928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b92a:	78fb      	ldrb	r3, [r7, #3]
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b932:	2b80      	cmp	r3, #128	; 0x80
 800b934:	d0ef      	beq.n	800b916 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b936:	4b25      	ldr	r3, [pc, #148]	; (800b9cc <xPortStartScheduler+0xec>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f1c3 0307 	rsb	r3, r3, #7
 800b93e:	2b04      	cmp	r3, #4
 800b940:	d00c      	beq.n	800b95c <xPortStartScheduler+0x7c>
	__asm volatile
 800b942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b946:	b672      	cpsid	i
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	b662      	cpsie	i
 800b956:	60bb      	str	r3, [r7, #8]
}
 800b958:	bf00      	nop
 800b95a:	e7fe      	b.n	800b95a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b95c:	4b1b      	ldr	r3, [pc, #108]	; (800b9cc <xPortStartScheduler+0xec>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	021b      	lsls	r3, r3, #8
 800b962:	4a1a      	ldr	r2, [pc, #104]	; (800b9cc <xPortStartScheduler+0xec>)
 800b964:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b966:	4b19      	ldr	r3, [pc, #100]	; (800b9cc <xPortStartScheduler+0xec>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b96e:	4a17      	ldr	r2, [pc, #92]	; (800b9cc <xPortStartScheduler+0xec>)
 800b970:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	b2da      	uxtb	r2, r3
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b97a:	4b15      	ldr	r3, [pc, #84]	; (800b9d0 <xPortStartScheduler+0xf0>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a14      	ldr	r2, [pc, #80]	; (800b9d0 <xPortStartScheduler+0xf0>)
 800b980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b984:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b986:	4b12      	ldr	r3, [pc, #72]	; (800b9d0 <xPortStartScheduler+0xf0>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a11      	ldr	r2, [pc, #68]	; (800b9d0 <xPortStartScheduler+0xf0>)
 800b98c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b990:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b992:	f000 f8dd 	bl	800bb50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b996:	4b0f      	ldr	r3, [pc, #60]	; (800b9d4 <xPortStartScheduler+0xf4>)
 800b998:	2200      	movs	r2, #0
 800b99a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b99c:	f000 f8fc 	bl	800bb98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b9a0:	4b0d      	ldr	r3, [pc, #52]	; (800b9d8 <xPortStartScheduler+0xf8>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a0c      	ldr	r2, [pc, #48]	; (800b9d8 <xPortStartScheduler+0xf8>)
 800b9a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b9aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b9ac:	f7ff ff84 	bl	800b8b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b9b0:	f7fe ff82 	bl	800a8b8 <vTaskSwitchContext>
	prvTaskExitError();
 800b9b4:	f7ff ff3a 	bl	800b82c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	e000e400 	.word	0xe000e400
 800b9c8:	200015b0 	.word	0x200015b0
 800b9cc:	200015b4 	.word	0x200015b4
 800b9d0:	e000ed20 	.word	0xe000ed20
 800b9d4:	20000060 	.word	0x20000060
 800b9d8:	e000ef34 	.word	0xe000ef34

0800b9dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
	__asm volatile
 800b9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e6:	b672      	cpsid	i
 800b9e8:	f383 8811 	msr	BASEPRI, r3
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	b662      	cpsie	i
 800b9f6:	607b      	str	r3, [r7, #4]
}
 800b9f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b9fa:	4b10      	ldr	r3, [pc, #64]	; (800ba3c <vPortEnterCritical+0x60>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	4a0e      	ldr	r2, [pc, #56]	; (800ba3c <vPortEnterCritical+0x60>)
 800ba02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba04:	4b0d      	ldr	r3, [pc, #52]	; (800ba3c <vPortEnterCritical+0x60>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d111      	bne.n	800ba30 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba0c:	4b0c      	ldr	r3, [pc, #48]	; (800ba40 <vPortEnterCritical+0x64>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00c      	beq.n	800ba30 <vPortEnterCritical+0x54>
	__asm volatile
 800ba16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1a:	b672      	cpsid	i
 800ba1c:	f383 8811 	msr	BASEPRI, r3
 800ba20:	f3bf 8f6f 	isb	sy
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	b662      	cpsie	i
 800ba2a:	603b      	str	r3, [r7, #0]
}
 800ba2c:	bf00      	nop
 800ba2e:	e7fe      	b.n	800ba2e <vPortEnterCritical+0x52>
	}
}
 800ba30:	bf00      	nop
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr
 800ba3c:	20000060 	.word	0x20000060
 800ba40:	e000ed04 	.word	0xe000ed04

0800ba44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ba4a:	4b13      	ldr	r3, [pc, #76]	; (800ba98 <vPortExitCritical+0x54>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d10c      	bne.n	800ba6c <vPortExitCritical+0x28>
	__asm volatile
 800ba52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba56:	b672      	cpsid	i
 800ba58:	f383 8811 	msr	BASEPRI, r3
 800ba5c:	f3bf 8f6f 	isb	sy
 800ba60:	f3bf 8f4f 	dsb	sy
 800ba64:	b662      	cpsie	i
 800ba66:	607b      	str	r3, [r7, #4]
}
 800ba68:	bf00      	nop
 800ba6a:	e7fe      	b.n	800ba6a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ba6c:	4b0a      	ldr	r3, [pc, #40]	; (800ba98 <vPortExitCritical+0x54>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3b01      	subs	r3, #1
 800ba72:	4a09      	ldr	r2, [pc, #36]	; (800ba98 <vPortExitCritical+0x54>)
 800ba74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba76:	4b08      	ldr	r3, [pc, #32]	; (800ba98 <vPortExitCritical+0x54>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d105      	bne.n	800ba8a <vPortExitCritical+0x46>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	f383 8811 	msr	BASEPRI, r3
}
 800ba88:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba8a:	bf00      	nop
 800ba8c:	370c      	adds	r7, #12
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop
 800ba98:	20000060 	.word	0x20000060
 800ba9c:	00000000 	.word	0x00000000

0800baa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800baa0:	f3ef 8009 	mrs	r0, PSP
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	4b15      	ldr	r3, [pc, #84]	; (800bb00 <pxCurrentTCBConst>)
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	f01e 0f10 	tst.w	lr, #16
 800bab0:	bf08      	it	eq
 800bab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baba:	6010      	str	r0, [r2, #0]
 800babc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bac4:	b672      	cpsid	i
 800bac6:	f380 8811 	msr	BASEPRI, r0
 800baca:	f3bf 8f4f 	dsb	sy
 800bace:	f3bf 8f6f 	isb	sy
 800bad2:	b662      	cpsie	i
 800bad4:	f7fe fef0 	bl	800a8b8 <vTaskSwitchContext>
 800bad8:	f04f 0000 	mov.w	r0, #0
 800badc:	f380 8811 	msr	BASEPRI, r0
 800bae0:	bc09      	pop	{r0, r3}
 800bae2:	6819      	ldr	r1, [r3, #0]
 800bae4:	6808      	ldr	r0, [r1, #0]
 800bae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baea:	f01e 0f10 	tst.w	lr, #16
 800baee:	bf08      	it	eq
 800baf0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800baf4:	f380 8809 	msr	PSP, r0
 800baf8:	f3bf 8f6f 	isb	sy
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop

0800bb00 <pxCurrentTCBConst>:
 800bb00:	20000f84 	.word	0x20000f84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb04:	bf00      	nop
 800bb06:	bf00      	nop

0800bb08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb12:	b672      	cpsid	i
 800bb14:	f383 8811 	msr	BASEPRI, r3
 800bb18:	f3bf 8f6f 	isb	sy
 800bb1c:	f3bf 8f4f 	dsb	sy
 800bb20:	b662      	cpsie	i
 800bb22:	607b      	str	r3, [r7, #4]
}
 800bb24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb26:	f7fe fe0b 	bl	800a740 <xTaskIncrementTick>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d003      	beq.n	800bb38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb30:	4b06      	ldr	r3, [pc, #24]	; (800bb4c <SysTick_Handler+0x44>)
 800bb32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb36:	601a      	str	r2, [r3, #0]
 800bb38:	2300      	movs	r3, #0
 800bb3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	f383 8811 	msr	BASEPRI, r3
}
 800bb42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bb44:	bf00      	nop
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	e000ed04 	.word	0xe000ed04

0800bb50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bb50:	b480      	push	{r7}
 800bb52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb54:	4b0b      	ldr	r3, [pc, #44]	; (800bb84 <vPortSetupTimerInterrupt+0x34>)
 800bb56:	2200      	movs	r2, #0
 800bb58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb5a:	4b0b      	ldr	r3, [pc, #44]	; (800bb88 <vPortSetupTimerInterrupt+0x38>)
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb60:	4b0a      	ldr	r3, [pc, #40]	; (800bb8c <vPortSetupTimerInterrupt+0x3c>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a0a      	ldr	r2, [pc, #40]	; (800bb90 <vPortSetupTimerInterrupt+0x40>)
 800bb66:	fba2 2303 	umull	r2, r3, r2, r3
 800bb6a:	099b      	lsrs	r3, r3, #6
 800bb6c:	4a09      	ldr	r2, [pc, #36]	; (800bb94 <vPortSetupTimerInterrupt+0x44>)
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb72:	4b04      	ldr	r3, [pc, #16]	; (800bb84 <vPortSetupTimerInterrupt+0x34>)
 800bb74:	2207      	movs	r2, #7
 800bb76:	601a      	str	r2, [r3, #0]
}
 800bb78:	bf00      	nop
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	e000e010 	.word	0xe000e010
 800bb88:	e000e018 	.word	0xe000e018
 800bb8c:	20000054 	.word	0x20000054
 800bb90:	10624dd3 	.word	0x10624dd3
 800bb94:	e000e014 	.word	0xe000e014

0800bb98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bb98:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bba8 <vPortEnableVFP+0x10>
 800bb9c:	6801      	ldr	r1, [r0, #0]
 800bb9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bba2:	6001      	str	r1, [r0, #0]
 800bba4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bba6:	bf00      	nop
 800bba8:	e000ed88 	.word	0xe000ed88

0800bbac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bbb2:	f3ef 8305 	mrs	r3, IPSR
 800bbb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2b0f      	cmp	r3, #15
 800bbbc:	d916      	bls.n	800bbec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bbbe:	4a19      	ldr	r2, [pc, #100]	; (800bc24 <vPortValidateInterruptPriority+0x78>)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bbc8:	4b17      	ldr	r3, [pc, #92]	; (800bc28 <vPortValidateInterruptPriority+0x7c>)
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	7afa      	ldrb	r2, [r7, #11]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d20c      	bcs.n	800bbec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	b672      	cpsid	i
 800bbd8:	f383 8811 	msr	BASEPRI, r3
 800bbdc:	f3bf 8f6f 	isb	sy
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	b662      	cpsie	i
 800bbe6:	607b      	str	r3, [r7, #4]
}
 800bbe8:	bf00      	nop
 800bbea:	e7fe      	b.n	800bbea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bbec:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <vPortValidateInterruptPriority+0x80>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bbf4:	4b0e      	ldr	r3, [pc, #56]	; (800bc30 <vPortValidateInterruptPriority+0x84>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d90c      	bls.n	800bc16 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	b672      	cpsid	i
 800bc02:	f383 8811 	msr	BASEPRI, r3
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	b662      	cpsie	i
 800bc10:	603b      	str	r3, [r7, #0]
}
 800bc12:	bf00      	nop
 800bc14:	e7fe      	b.n	800bc14 <vPortValidateInterruptPriority+0x68>
	}
 800bc16:	bf00      	nop
 800bc18:	3714      	adds	r7, #20
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	e000e3f0 	.word	0xe000e3f0
 800bc28:	200015b0 	.word	0x200015b0
 800bc2c:	e000ed0c 	.word	0xe000ed0c
 800bc30:	200015b4 	.word	0x200015b4

0800bc34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b08a      	sub	sp, #40	; 0x28
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bc40:	f7fe fcc0 	bl	800a5c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bc44:	4b5b      	ldr	r3, [pc, #364]	; (800bdb4 <pvPortMalloc+0x180>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bc4c:	f000 f91a 	bl	800be84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc50:	4b59      	ldr	r3, [pc, #356]	; (800bdb8 <pvPortMalloc+0x184>)
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	4013      	ands	r3, r2
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	f040 8092 	bne.w	800bd82 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d01f      	beq.n	800bca4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800bc64:	2208      	movs	r2, #8
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	4413      	add	r3, r2
 800bc6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f003 0307 	and.w	r3, r3, #7
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d016      	beq.n	800bca4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f023 0307 	bic.w	r3, r3, #7
 800bc7c:	3308      	adds	r3, #8
 800bc7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f003 0307 	and.w	r3, r3, #7
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00c      	beq.n	800bca4 <pvPortMalloc+0x70>
	__asm volatile
 800bc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8e:	b672      	cpsid	i
 800bc90:	f383 8811 	msr	BASEPRI, r3
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	b662      	cpsie	i
 800bc9e:	617b      	str	r3, [r7, #20]
}
 800bca0:	bf00      	nop
 800bca2:	e7fe      	b.n	800bca2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d06b      	beq.n	800bd82 <pvPortMalloc+0x14e>
 800bcaa:	4b44      	ldr	r3, [pc, #272]	; (800bdbc <pvPortMalloc+0x188>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d866      	bhi.n	800bd82 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bcb4:	4b42      	ldr	r3, [pc, #264]	; (800bdc0 <pvPortMalloc+0x18c>)
 800bcb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bcb8:	4b41      	ldr	r3, [pc, #260]	; (800bdc0 <pvPortMalloc+0x18c>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcbe:	e004      	b.n	800bcca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d903      	bls.n	800bcdc <pvPortMalloc+0xa8>
 800bcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1f1      	bne.n	800bcc0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bcdc:	4b35      	ldr	r3, [pc, #212]	; (800bdb4 <pvPortMalloc+0x180>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d04d      	beq.n	800bd82 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bce6:	6a3b      	ldr	r3, [r7, #32]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2208      	movs	r2, #8
 800bcec:	4413      	add	r3, r2
 800bcee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	6a3b      	ldr	r3, [r7, #32]
 800bcf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	1ad2      	subs	r2, r2, r3
 800bd00:	2308      	movs	r3, #8
 800bd02:	005b      	lsls	r3, r3, #1
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d921      	bls.n	800bd4c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	f003 0307 	and.w	r3, r3, #7
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d00c      	beq.n	800bd34 <pvPortMalloc+0x100>
	__asm volatile
 800bd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1e:	b672      	cpsid	i
 800bd20:	f383 8811 	msr	BASEPRI, r3
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	b662      	cpsie	i
 800bd2e:	613b      	str	r3, [r7, #16]
}
 800bd30:	bf00      	nop
 800bd32:	e7fe      	b.n	800bd32 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd36:	685a      	ldr	r2, [r3, #4]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	1ad2      	subs	r2, r2, r3
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd46:	69b8      	ldr	r0, [r7, #24]
 800bd48:	f000 f8fe 	bl	800bf48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd4c:	4b1b      	ldr	r3, [pc, #108]	; (800bdbc <pvPortMalloc+0x188>)
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	1ad3      	subs	r3, r2, r3
 800bd56:	4a19      	ldr	r2, [pc, #100]	; (800bdbc <pvPortMalloc+0x188>)
 800bd58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd5a:	4b18      	ldr	r3, [pc, #96]	; (800bdbc <pvPortMalloc+0x188>)
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	4b19      	ldr	r3, [pc, #100]	; (800bdc4 <pvPortMalloc+0x190>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d203      	bcs.n	800bd6e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd66:	4b15      	ldr	r3, [pc, #84]	; (800bdbc <pvPortMalloc+0x188>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a16      	ldr	r2, [pc, #88]	; (800bdc4 <pvPortMalloc+0x190>)
 800bd6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd70:	685a      	ldr	r2, [r3, #4]
 800bd72:	4b11      	ldr	r3, [pc, #68]	; (800bdb8 <pvPortMalloc+0x184>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	431a      	orrs	r2, r3
 800bd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7e:	2200      	movs	r2, #0
 800bd80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bd82:	f7fe fc2d 	bl	800a5e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	f003 0307 	and.w	r3, r3, #7
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00c      	beq.n	800bdaa <pvPortMalloc+0x176>
	__asm volatile
 800bd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd94:	b672      	cpsid	i
 800bd96:	f383 8811 	msr	BASEPRI, r3
 800bd9a:	f3bf 8f6f 	isb	sy
 800bd9e:	f3bf 8f4f 	dsb	sy
 800bda2:	b662      	cpsie	i
 800bda4:	60fb      	str	r3, [r7, #12]
}
 800bda6:	bf00      	nop
 800bda8:	e7fe      	b.n	800bda8 <pvPortMalloc+0x174>
	return pvReturn;
 800bdaa:	69fb      	ldr	r3, [r7, #28]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3728      	adds	r7, #40	; 0x28
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	200051c0 	.word	0x200051c0
 800bdb8:	200051cc 	.word	0x200051cc
 800bdbc:	200051c4 	.word	0x200051c4
 800bdc0:	200051b8 	.word	0x200051b8
 800bdc4:	200051c8 	.word	0x200051c8

0800bdc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d04c      	beq.n	800be74 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bdda:	2308      	movs	r3, #8
 800bddc:	425b      	negs	r3, r3
 800bdde:	697a      	ldr	r2, [r7, #20]
 800bde0:	4413      	add	r3, r2
 800bde2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	685a      	ldr	r2, [r3, #4]
 800bdec:	4b23      	ldr	r3, [pc, #140]	; (800be7c <vPortFree+0xb4>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4013      	ands	r3, r2
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d10c      	bne.n	800be10 <vPortFree+0x48>
	__asm volatile
 800bdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfa:	b672      	cpsid	i
 800bdfc:	f383 8811 	msr	BASEPRI, r3
 800be00:	f3bf 8f6f 	isb	sy
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	b662      	cpsie	i
 800be0a:	60fb      	str	r3, [r7, #12]
}
 800be0c:	bf00      	nop
 800be0e:	e7fe      	b.n	800be0e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d00c      	beq.n	800be32 <vPortFree+0x6a>
	__asm volatile
 800be18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1c:	b672      	cpsid	i
 800be1e:	f383 8811 	msr	BASEPRI, r3
 800be22:	f3bf 8f6f 	isb	sy
 800be26:	f3bf 8f4f 	dsb	sy
 800be2a:	b662      	cpsie	i
 800be2c:	60bb      	str	r3, [r7, #8]
}
 800be2e:	bf00      	nop
 800be30:	e7fe      	b.n	800be30 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	685a      	ldr	r2, [r3, #4]
 800be36:	4b11      	ldr	r3, [pc, #68]	; (800be7c <vPortFree+0xb4>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4013      	ands	r3, r2
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d019      	beq.n	800be74 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d115      	bne.n	800be74 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	685a      	ldr	r2, [r3, #4]
 800be4c:	4b0b      	ldr	r3, [pc, #44]	; (800be7c <vPortFree+0xb4>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	43db      	mvns	r3, r3
 800be52:	401a      	ands	r2, r3
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800be58:	f7fe fbb4 	bl	800a5c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	685a      	ldr	r2, [r3, #4]
 800be60:	4b07      	ldr	r3, [pc, #28]	; (800be80 <vPortFree+0xb8>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4413      	add	r3, r2
 800be66:	4a06      	ldr	r2, [pc, #24]	; (800be80 <vPortFree+0xb8>)
 800be68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be6a:	6938      	ldr	r0, [r7, #16]
 800be6c:	f000 f86c 	bl	800bf48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800be70:	f7fe fbb6 	bl	800a5e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800be74:	bf00      	nop
 800be76:	3718      	adds	r7, #24
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	200051cc 	.word	0x200051cc
 800be80:	200051c4 	.word	0x200051c4

0800be84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800be84:	b480      	push	{r7}
 800be86:	b085      	sub	sp, #20
 800be88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800be8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800be8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800be90:	4b27      	ldr	r3, [pc, #156]	; (800bf30 <prvHeapInit+0xac>)
 800be92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f003 0307 	and.w	r3, r3, #7
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00c      	beq.n	800beb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	3307      	adds	r3, #7
 800bea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f023 0307 	bic.w	r3, r3, #7
 800beaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800beac:	68ba      	ldr	r2, [r7, #8]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	1ad3      	subs	r3, r2, r3
 800beb2:	4a1f      	ldr	r2, [pc, #124]	; (800bf30 <prvHeapInit+0xac>)
 800beb4:	4413      	add	r3, r2
 800beb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bebc:	4a1d      	ldr	r2, [pc, #116]	; (800bf34 <prvHeapInit+0xb0>)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bec2:	4b1c      	ldr	r3, [pc, #112]	; (800bf34 <prvHeapInit+0xb0>)
 800bec4:	2200      	movs	r2, #0
 800bec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	4413      	add	r3, r2
 800bece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bed0:	2208      	movs	r2, #8
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	1a9b      	subs	r3, r3, r2
 800bed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f023 0307 	bic.w	r3, r3, #7
 800bede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	4a15      	ldr	r2, [pc, #84]	; (800bf38 <prvHeapInit+0xb4>)
 800bee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bee6:	4b14      	ldr	r3, [pc, #80]	; (800bf38 <prvHeapInit+0xb4>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2200      	movs	r2, #0
 800beec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800beee:	4b12      	ldr	r3, [pc, #72]	; (800bf38 <prvHeapInit+0xb4>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	1ad2      	subs	r2, r2, r3
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf04:	4b0c      	ldr	r3, [pc, #48]	; (800bf38 <prvHeapInit+0xb4>)
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	4a0a      	ldr	r2, [pc, #40]	; (800bf3c <prvHeapInit+0xb8>)
 800bf12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	4a09      	ldr	r2, [pc, #36]	; (800bf40 <prvHeapInit+0xbc>)
 800bf1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf1c:	4b09      	ldr	r3, [pc, #36]	; (800bf44 <prvHeapInit+0xc0>)
 800bf1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bf22:	601a      	str	r2, [r3, #0]
}
 800bf24:	bf00      	nop
 800bf26:	3714      	adds	r7, #20
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr
 800bf30:	200015b8 	.word	0x200015b8
 800bf34:	200051b8 	.word	0x200051b8
 800bf38:	200051c0 	.word	0x200051c0
 800bf3c:	200051c8 	.word	0x200051c8
 800bf40:	200051c4 	.word	0x200051c4
 800bf44:	200051cc 	.word	0x200051cc

0800bf48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf50:	4b28      	ldr	r3, [pc, #160]	; (800bff4 <prvInsertBlockIntoFreeList+0xac>)
 800bf52:	60fb      	str	r3, [r7, #12]
 800bf54:	e002      	b.n	800bf5c <prvInsertBlockIntoFreeList+0x14>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	60fb      	str	r3, [r7, #12]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d8f7      	bhi.n	800bf56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	4413      	add	r3, r2
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d108      	bne.n	800bf8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	441a      	add	r2, r3
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	68ba      	ldr	r2, [r7, #8]
 800bf94:	441a      	add	r2, r3
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d118      	bne.n	800bfd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	4b15      	ldr	r3, [pc, #84]	; (800bff8 <prvInsertBlockIntoFreeList+0xb0>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d00d      	beq.n	800bfc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	685a      	ldr	r2, [r3, #4]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	441a      	add	r2, r3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	e008      	b.n	800bfd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bfc6:	4b0c      	ldr	r3, [pc, #48]	; (800bff8 <prvInsertBlockIntoFreeList+0xb0>)
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	601a      	str	r2, [r3, #0]
 800bfce:	e003      	b.n	800bfd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bfd8:	68fa      	ldr	r2, [r7, #12]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d002      	beq.n	800bfe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfe6:	bf00      	nop
 800bfe8:	3714      	adds	r7, #20
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	200051b8 	.word	0x200051b8
 800bff8:	200051c0 	.word	0x200051c0

0800bffc <std>:
 800bffc:	2300      	movs	r3, #0
 800bffe:	b510      	push	{r4, lr}
 800c000:	4604      	mov	r4, r0
 800c002:	e9c0 3300 	strd	r3, r3, [r0]
 800c006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c00a:	6083      	str	r3, [r0, #8]
 800c00c:	8181      	strh	r1, [r0, #12]
 800c00e:	6643      	str	r3, [r0, #100]	; 0x64
 800c010:	81c2      	strh	r2, [r0, #14]
 800c012:	6183      	str	r3, [r0, #24]
 800c014:	4619      	mov	r1, r3
 800c016:	2208      	movs	r2, #8
 800c018:	305c      	adds	r0, #92	; 0x5c
 800c01a:	f000 f8f4 	bl	800c206 <memset>
 800c01e:	4b05      	ldr	r3, [pc, #20]	; (800c034 <std+0x38>)
 800c020:	6263      	str	r3, [r4, #36]	; 0x24
 800c022:	4b05      	ldr	r3, [pc, #20]	; (800c038 <std+0x3c>)
 800c024:	62a3      	str	r3, [r4, #40]	; 0x28
 800c026:	4b05      	ldr	r3, [pc, #20]	; (800c03c <std+0x40>)
 800c028:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c02a:	4b05      	ldr	r3, [pc, #20]	; (800c040 <std+0x44>)
 800c02c:	6224      	str	r4, [r4, #32]
 800c02e:	6323      	str	r3, [r4, #48]	; 0x30
 800c030:	bd10      	pop	{r4, pc}
 800c032:	bf00      	nop
 800c034:	0800c181 	.word	0x0800c181
 800c038:	0800c1a3 	.word	0x0800c1a3
 800c03c:	0800c1db 	.word	0x0800c1db
 800c040:	0800c1ff 	.word	0x0800c1ff

0800c044 <stdio_exit_handler>:
 800c044:	4a02      	ldr	r2, [pc, #8]	; (800c050 <stdio_exit_handler+0xc>)
 800c046:	4903      	ldr	r1, [pc, #12]	; (800c054 <stdio_exit_handler+0x10>)
 800c048:	4803      	ldr	r0, [pc, #12]	; (800c058 <stdio_exit_handler+0x14>)
 800c04a:	f000 b869 	b.w	800c120 <_fwalk_sglue>
 800c04e:	bf00      	nop
 800c050:	20000064 	.word	0x20000064
 800c054:	0800cc85 	.word	0x0800cc85
 800c058:	20000070 	.word	0x20000070

0800c05c <cleanup_stdio>:
 800c05c:	6841      	ldr	r1, [r0, #4]
 800c05e:	4b0c      	ldr	r3, [pc, #48]	; (800c090 <cleanup_stdio+0x34>)
 800c060:	4299      	cmp	r1, r3
 800c062:	b510      	push	{r4, lr}
 800c064:	4604      	mov	r4, r0
 800c066:	d001      	beq.n	800c06c <cleanup_stdio+0x10>
 800c068:	f000 fe0c 	bl	800cc84 <_fflush_r>
 800c06c:	68a1      	ldr	r1, [r4, #8]
 800c06e:	4b09      	ldr	r3, [pc, #36]	; (800c094 <cleanup_stdio+0x38>)
 800c070:	4299      	cmp	r1, r3
 800c072:	d002      	beq.n	800c07a <cleanup_stdio+0x1e>
 800c074:	4620      	mov	r0, r4
 800c076:	f000 fe05 	bl	800cc84 <_fflush_r>
 800c07a:	68e1      	ldr	r1, [r4, #12]
 800c07c:	4b06      	ldr	r3, [pc, #24]	; (800c098 <cleanup_stdio+0x3c>)
 800c07e:	4299      	cmp	r1, r3
 800c080:	d004      	beq.n	800c08c <cleanup_stdio+0x30>
 800c082:	4620      	mov	r0, r4
 800c084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c088:	f000 bdfc 	b.w	800cc84 <_fflush_r>
 800c08c:	bd10      	pop	{r4, pc}
 800c08e:	bf00      	nop
 800c090:	200051d0 	.word	0x200051d0
 800c094:	20005238 	.word	0x20005238
 800c098:	200052a0 	.word	0x200052a0

0800c09c <global_stdio_init.part.0>:
 800c09c:	b510      	push	{r4, lr}
 800c09e:	4b0b      	ldr	r3, [pc, #44]	; (800c0cc <global_stdio_init.part.0+0x30>)
 800c0a0:	4c0b      	ldr	r4, [pc, #44]	; (800c0d0 <global_stdio_init.part.0+0x34>)
 800c0a2:	4a0c      	ldr	r2, [pc, #48]	; (800c0d4 <global_stdio_init.part.0+0x38>)
 800c0a4:	601a      	str	r2, [r3, #0]
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	2104      	movs	r1, #4
 800c0ac:	f7ff ffa6 	bl	800bffc <std>
 800c0b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	2109      	movs	r1, #9
 800c0b8:	f7ff ffa0 	bl	800bffc <std>
 800c0bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c0c0:	2202      	movs	r2, #2
 800c0c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0c6:	2112      	movs	r1, #18
 800c0c8:	f7ff bf98 	b.w	800bffc <std>
 800c0cc:	20005308 	.word	0x20005308
 800c0d0:	200051d0 	.word	0x200051d0
 800c0d4:	0800c045 	.word	0x0800c045

0800c0d8 <__sfp_lock_acquire>:
 800c0d8:	4801      	ldr	r0, [pc, #4]	; (800c0e0 <__sfp_lock_acquire+0x8>)
 800c0da:	f000 b971 	b.w	800c3c0 <__retarget_lock_acquire_recursive>
 800c0de:	bf00      	nop
 800c0e0:	20005311 	.word	0x20005311

0800c0e4 <__sfp_lock_release>:
 800c0e4:	4801      	ldr	r0, [pc, #4]	; (800c0ec <__sfp_lock_release+0x8>)
 800c0e6:	f000 b96c 	b.w	800c3c2 <__retarget_lock_release_recursive>
 800c0ea:	bf00      	nop
 800c0ec:	20005311 	.word	0x20005311

0800c0f0 <__sinit>:
 800c0f0:	b510      	push	{r4, lr}
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	f7ff fff0 	bl	800c0d8 <__sfp_lock_acquire>
 800c0f8:	6a23      	ldr	r3, [r4, #32]
 800c0fa:	b11b      	cbz	r3, 800c104 <__sinit+0x14>
 800c0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c100:	f7ff bff0 	b.w	800c0e4 <__sfp_lock_release>
 800c104:	4b04      	ldr	r3, [pc, #16]	; (800c118 <__sinit+0x28>)
 800c106:	6223      	str	r3, [r4, #32]
 800c108:	4b04      	ldr	r3, [pc, #16]	; (800c11c <__sinit+0x2c>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d1f5      	bne.n	800c0fc <__sinit+0xc>
 800c110:	f7ff ffc4 	bl	800c09c <global_stdio_init.part.0>
 800c114:	e7f2      	b.n	800c0fc <__sinit+0xc>
 800c116:	bf00      	nop
 800c118:	0800c05d 	.word	0x0800c05d
 800c11c:	20005308 	.word	0x20005308

0800c120 <_fwalk_sglue>:
 800c120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c124:	4607      	mov	r7, r0
 800c126:	4688      	mov	r8, r1
 800c128:	4614      	mov	r4, r2
 800c12a:	2600      	movs	r6, #0
 800c12c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c130:	f1b9 0901 	subs.w	r9, r9, #1
 800c134:	d505      	bpl.n	800c142 <_fwalk_sglue+0x22>
 800c136:	6824      	ldr	r4, [r4, #0]
 800c138:	2c00      	cmp	r4, #0
 800c13a:	d1f7      	bne.n	800c12c <_fwalk_sglue+0xc>
 800c13c:	4630      	mov	r0, r6
 800c13e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c142:	89ab      	ldrh	r3, [r5, #12]
 800c144:	2b01      	cmp	r3, #1
 800c146:	d907      	bls.n	800c158 <_fwalk_sglue+0x38>
 800c148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c14c:	3301      	adds	r3, #1
 800c14e:	d003      	beq.n	800c158 <_fwalk_sglue+0x38>
 800c150:	4629      	mov	r1, r5
 800c152:	4638      	mov	r0, r7
 800c154:	47c0      	blx	r8
 800c156:	4306      	orrs	r6, r0
 800c158:	3568      	adds	r5, #104	; 0x68
 800c15a:	e7e9      	b.n	800c130 <_fwalk_sglue+0x10>

0800c15c <iprintf>:
 800c15c:	b40f      	push	{r0, r1, r2, r3}
 800c15e:	b507      	push	{r0, r1, r2, lr}
 800c160:	4906      	ldr	r1, [pc, #24]	; (800c17c <iprintf+0x20>)
 800c162:	ab04      	add	r3, sp, #16
 800c164:	6808      	ldr	r0, [r1, #0]
 800c166:	f853 2b04 	ldr.w	r2, [r3], #4
 800c16a:	6881      	ldr	r1, [r0, #8]
 800c16c:	9301      	str	r3, [sp, #4]
 800c16e:	f000 fa59 	bl	800c624 <_vfiprintf_r>
 800c172:	b003      	add	sp, #12
 800c174:	f85d eb04 	ldr.w	lr, [sp], #4
 800c178:	b004      	add	sp, #16
 800c17a:	4770      	bx	lr
 800c17c:	200000bc 	.word	0x200000bc

0800c180 <__sread>:
 800c180:	b510      	push	{r4, lr}
 800c182:	460c      	mov	r4, r1
 800c184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c188:	f000 f8cc 	bl	800c324 <_read_r>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	bfab      	itete	ge
 800c190:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c192:	89a3      	ldrhlt	r3, [r4, #12]
 800c194:	181b      	addge	r3, r3, r0
 800c196:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c19a:	bfac      	ite	ge
 800c19c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c19e:	81a3      	strhlt	r3, [r4, #12]
 800c1a0:	bd10      	pop	{r4, pc}

0800c1a2 <__swrite>:
 800c1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a6:	461f      	mov	r7, r3
 800c1a8:	898b      	ldrh	r3, [r1, #12]
 800c1aa:	05db      	lsls	r3, r3, #23
 800c1ac:	4605      	mov	r5, r0
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	4616      	mov	r6, r2
 800c1b2:	d505      	bpl.n	800c1c0 <__swrite+0x1e>
 800c1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b8:	2302      	movs	r3, #2
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f000 f8a0 	bl	800c300 <_lseek_r>
 800c1c0:	89a3      	ldrh	r3, [r4, #12]
 800c1c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1ca:	81a3      	strh	r3, [r4, #12]
 800c1cc:	4632      	mov	r2, r6
 800c1ce:	463b      	mov	r3, r7
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d6:	f000 b8b7 	b.w	800c348 <_write_r>

0800c1da <__sseek>:
 800c1da:	b510      	push	{r4, lr}
 800c1dc:	460c      	mov	r4, r1
 800c1de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e2:	f000 f88d 	bl	800c300 <_lseek_r>
 800c1e6:	1c43      	adds	r3, r0, #1
 800c1e8:	89a3      	ldrh	r3, [r4, #12]
 800c1ea:	bf15      	itete	ne
 800c1ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800c1ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1f6:	81a3      	strheq	r3, [r4, #12]
 800c1f8:	bf18      	it	ne
 800c1fa:	81a3      	strhne	r3, [r4, #12]
 800c1fc:	bd10      	pop	{r4, pc}

0800c1fe <__sclose>:
 800c1fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c202:	f000 b817 	b.w	800c234 <_close_r>

0800c206 <memset>:
 800c206:	4402      	add	r2, r0
 800c208:	4603      	mov	r3, r0
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d100      	bne.n	800c210 <memset+0xa>
 800c20e:	4770      	bx	lr
 800c210:	f803 1b01 	strb.w	r1, [r3], #1
 800c214:	e7f9      	b.n	800c20a <memset+0x4>

0800c216 <strcat>:
 800c216:	b510      	push	{r4, lr}
 800c218:	4602      	mov	r2, r0
 800c21a:	7814      	ldrb	r4, [r2, #0]
 800c21c:	4613      	mov	r3, r2
 800c21e:	3201      	adds	r2, #1
 800c220:	2c00      	cmp	r4, #0
 800c222:	d1fa      	bne.n	800c21a <strcat+0x4>
 800c224:	3b01      	subs	r3, #1
 800c226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c22a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c22e:	2a00      	cmp	r2, #0
 800c230:	d1f9      	bne.n	800c226 <strcat+0x10>
 800c232:	bd10      	pop	{r4, pc}

0800c234 <_close_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	4d06      	ldr	r5, [pc, #24]	; (800c250 <_close_r+0x1c>)
 800c238:	2300      	movs	r3, #0
 800c23a:	4604      	mov	r4, r0
 800c23c:	4608      	mov	r0, r1
 800c23e:	602b      	str	r3, [r5, #0]
 800c240:	f7f6 f9e5 	bl	800260e <_close>
 800c244:	1c43      	adds	r3, r0, #1
 800c246:	d102      	bne.n	800c24e <_close_r+0x1a>
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	b103      	cbz	r3, 800c24e <_close_r+0x1a>
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	bd38      	pop	{r3, r4, r5, pc}
 800c250:	2000530c 	.word	0x2000530c

0800c254 <_reclaim_reent>:
 800c254:	4b29      	ldr	r3, [pc, #164]	; (800c2fc <_reclaim_reent+0xa8>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4283      	cmp	r3, r0
 800c25a:	b570      	push	{r4, r5, r6, lr}
 800c25c:	4604      	mov	r4, r0
 800c25e:	d04b      	beq.n	800c2f8 <_reclaim_reent+0xa4>
 800c260:	69c3      	ldr	r3, [r0, #28]
 800c262:	b143      	cbz	r3, 800c276 <_reclaim_reent+0x22>
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d144      	bne.n	800c2f4 <_reclaim_reent+0xa0>
 800c26a:	69e3      	ldr	r3, [r4, #28]
 800c26c:	6819      	ldr	r1, [r3, #0]
 800c26e:	b111      	cbz	r1, 800c276 <_reclaim_reent+0x22>
 800c270:	4620      	mov	r0, r4
 800c272:	f000 f8b5 	bl	800c3e0 <_free_r>
 800c276:	6961      	ldr	r1, [r4, #20]
 800c278:	b111      	cbz	r1, 800c280 <_reclaim_reent+0x2c>
 800c27a:	4620      	mov	r0, r4
 800c27c:	f000 f8b0 	bl	800c3e0 <_free_r>
 800c280:	69e1      	ldr	r1, [r4, #28]
 800c282:	b111      	cbz	r1, 800c28a <_reclaim_reent+0x36>
 800c284:	4620      	mov	r0, r4
 800c286:	f000 f8ab 	bl	800c3e0 <_free_r>
 800c28a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c28c:	b111      	cbz	r1, 800c294 <_reclaim_reent+0x40>
 800c28e:	4620      	mov	r0, r4
 800c290:	f000 f8a6 	bl	800c3e0 <_free_r>
 800c294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c296:	b111      	cbz	r1, 800c29e <_reclaim_reent+0x4a>
 800c298:	4620      	mov	r0, r4
 800c29a:	f000 f8a1 	bl	800c3e0 <_free_r>
 800c29e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c2a0:	b111      	cbz	r1, 800c2a8 <_reclaim_reent+0x54>
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	f000 f89c 	bl	800c3e0 <_free_r>
 800c2a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c2aa:	b111      	cbz	r1, 800c2b2 <_reclaim_reent+0x5e>
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	f000 f897 	bl	800c3e0 <_free_r>
 800c2b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c2b4:	b111      	cbz	r1, 800c2bc <_reclaim_reent+0x68>
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f000 f892 	bl	800c3e0 <_free_r>
 800c2bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c2be:	b111      	cbz	r1, 800c2c6 <_reclaim_reent+0x72>
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f000 f88d 	bl	800c3e0 <_free_r>
 800c2c6:	6a23      	ldr	r3, [r4, #32]
 800c2c8:	b1b3      	cbz	r3, 800c2f8 <_reclaim_reent+0xa4>
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c2d0:	4718      	bx	r3
 800c2d2:	5949      	ldr	r1, [r1, r5]
 800c2d4:	b941      	cbnz	r1, 800c2e8 <_reclaim_reent+0x94>
 800c2d6:	3504      	adds	r5, #4
 800c2d8:	69e3      	ldr	r3, [r4, #28]
 800c2da:	2d80      	cmp	r5, #128	; 0x80
 800c2dc:	68d9      	ldr	r1, [r3, #12]
 800c2de:	d1f8      	bne.n	800c2d2 <_reclaim_reent+0x7e>
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	f000 f87d 	bl	800c3e0 <_free_r>
 800c2e6:	e7c0      	b.n	800c26a <_reclaim_reent+0x16>
 800c2e8:	680e      	ldr	r6, [r1, #0]
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	f000 f878 	bl	800c3e0 <_free_r>
 800c2f0:	4631      	mov	r1, r6
 800c2f2:	e7ef      	b.n	800c2d4 <_reclaim_reent+0x80>
 800c2f4:	2500      	movs	r5, #0
 800c2f6:	e7ef      	b.n	800c2d8 <_reclaim_reent+0x84>
 800c2f8:	bd70      	pop	{r4, r5, r6, pc}
 800c2fa:	bf00      	nop
 800c2fc:	200000bc 	.word	0x200000bc

0800c300 <_lseek_r>:
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	4d07      	ldr	r5, [pc, #28]	; (800c320 <_lseek_r+0x20>)
 800c304:	4604      	mov	r4, r0
 800c306:	4608      	mov	r0, r1
 800c308:	4611      	mov	r1, r2
 800c30a:	2200      	movs	r2, #0
 800c30c:	602a      	str	r2, [r5, #0]
 800c30e:	461a      	mov	r2, r3
 800c310:	f7f6 f9a4 	bl	800265c <_lseek>
 800c314:	1c43      	adds	r3, r0, #1
 800c316:	d102      	bne.n	800c31e <_lseek_r+0x1e>
 800c318:	682b      	ldr	r3, [r5, #0]
 800c31a:	b103      	cbz	r3, 800c31e <_lseek_r+0x1e>
 800c31c:	6023      	str	r3, [r4, #0]
 800c31e:	bd38      	pop	{r3, r4, r5, pc}
 800c320:	2000530c 	.word	0x2000530c

0800c324 <_read_r>:
 800c324:	b538      	push	{r3, r4, r5, lr}
 800c326:	4d07      	ldr	r5, [pc, #28]	; (800c344 <_read_r+0x20>)
 800c328:	4604      	mov	r4, r0
 800c32a:	4608      	mov	r0, r1
 800c32c:	4611      	mov	r1, r2
 800c32e:	2200      	movs	r2, #0
 800c330:	602a      	str	r2, [r5, #0]
 800c332:	461a      	mov	r2, r3
 800c334:	f7f6 f932 	bl	800259c <_read>
 800c338:	1c43      	adds	r3, r0, #1
 800c33a:	d102      	bne.n	800c342 <_read_r+0x1e>
 800c33c:	682b      	ldr	r3, [r5, #0]
 800c33e:	b103      	cbz	r3, 800c342 <_read_r+0x1e>
 800c340:	6023      	str	r3, [r4, #0]
 800c342:	bd38      	pop	{r3, r4, r5, pc}
 800c344:	2000530c 	.word	0x2000530c

0800c348 <_write_r>:
 800c348:	b538      	push	{r3, r4, r5, lr}
 800c34a:	4d07      	ldr	r5, [pc, #28]	; (800c368 <_write_r+0x20>)
 800c34c:	4604      	mov	r4, r0
 800c34e:	4608      	mov	r0, r1
 800c350:	4611      	mov	r1, r2
 800c352:	2200      	movs	r2, #0
 800c354:	602a      	str	r2, [r5, #0]
 800c356:	461a      	mov	r2, r3
 800c358:	f7f6 f93d 	bl	80025d6 <_write>
 800c35c:	1c43      	adds	r3, r0, #1
 800c35e:	d102      	bne.n	800c366 <_write_r+0x1e>
 800c360:	682b      	ldr	r3, [r5, #0]
 800c362:	b103      	cbz	r3, 800c366 <_write_r+0x1e>
 800c364:	6023      	str	r3, [r4, #0]
 800c366:	bd38      	pop	{r3, r4, r5, pc}
 800c368:	2000530c 	.word	0x2000530c

0800c36c <__errno>:
 800c36c:	4b01      	ldr	r3, [pc, #4]	; (800c374 <__errno+0x8>)
 800c36e:	6818      	ldr	r0, [r3, #0]
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	200000bc 	.word	0x200000bc

0800c378 <__libc_init_array>:
 800c378:	b570      	push	{r4, r5, r6, lr}
 800c37a:	4d0d      	ldr	r5, [pc, #52]	; (800c3b0 <__libc_init_array+0x38>)
 800c37c:	4c0d      	ldr	r4, [pc, #52]	; (800c3b4 <__libc_init_array+0x3c>)
 800c37e:	1b64      	subs	r4, r4, r5
 800c380:	10a4      	asrs	r4, r4, #2
 800c382:	2600      	movs	r6, #0
 800c384:	42a6      	cmp	r6, r4
 800c386:	d109      	bne.n	800c39c <__libc_init_array+0x24>
 800c388:	4d0b      	ldr	r5, [pc, #44]	; (800c3b8 <__libc_init_array+0x40>)
 800c38a:	4c0c      	ldr	r4, [pc, #48]	; (800c3bc <__libc_init_array+0x44>)
 800c38c:	f000 fdcc 	bl	800cf28 <_init>
 800c390:	1b64      	subs	r4, r4, r5
 800c392:	10a4      	asrs	r4, r4, #2
 800c394:	2600      	movs	r6, #0
 800c396:	42a6      	cmp	r6, r4
 800c398:	d105      	bne.n	800c3a6 <__libc_init_array+0x2e>
 800c39a:	bd70      	pop	{r4, r5, r6, pc}
 800c39c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3a0:	4798      	blx	r3
 800c3a2:	3601      	adds	r6, #1
 800c3a4:	e7ee      	b.n	800c384 <__libc_init_array+0xc>
 800c3a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3aa:	4798      	blx	r3
 800c3ac:	3601      	adds	r6, #1
 800c3ae:	e7f2      	b.n	800c396 <__libc_init_array+0x1e>
 800c3b0:	0800e95c 	.word	0x0800e95c
 800c3b4:	0800e95c 	.word	0x0800e95c
 800c3b8:	0800e95c 	.word	0x0800e95c
 800c3bc:	0800e960 	.word	0x0800e960

0800c3c0 <__retarget_lock_acquire_recursive>:
 800c3c0:	4770      	bx	lr

0800c3c2 <__retarget_lock_release_recursive>:
 800c3c2:	4770      	bx	lr

0800c3c4 <memcpy>:
 800c3c4:	440a      	add	r2, r1
 800c3c6:	4291      	cmp	r1, r2
 800c3c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3cc:	d100      	bne.n	800c3d0 <memcpy+0xc>
 800c3ce:	4770      	bx	lr
 800c3d0:	b510      	push	{r4, lr}
 800c3d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3da:	4291      	cmp	r1, r2
 800c3dc:	d1f9      	bne.n	800c3d2 <memcpy+0xe>
 800c3de:	bd10      	pop	{r4, pc}

0800c3e0 <_free_r>:
 800c3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3e2:	2900      	cmp	r1, #0
 800c3e4:	d044      	beq.n	800c470 <_free_r+0x90>
 800c3e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3ea:	9001      	str	r0, [sp, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f1a1 0404 	sub.w	r4, r1, #4
 800c3f2:	bfb8      	it	lt
 800c3f4:	18e4      	addlt	r4, r4, r3
 800c3f6:	f000 f8df 	bl	800c5b8 <__malloc_lock>
 800c3fa:	4a1e      	ldr	r2, [pc, #120]	; (800c474 <_free_r+0x94>)
 800c3fc:	9801      	ldr	r0, [sp, #4]
 800c3fe:	6813      	ldr	r3, [r2, #0]
 800c400:	b933      	cbnz	r3, 800c410 <_free_r+0x30>
 800c402:	6063      	str	r3, [r4, #4]
 800c404:	6014      	str	r4, [r2, #0]
 800c406:	b003      	add	sp, #12
 800c408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c40c:	f000 b8da 	b.w	800c5c4 <__malloc_unlock>
 800c410:	42a3      	cmp	r3, r4
 800c412:	d908      	bls.n	800c426 <_free_r+0x46>
 800c414:	6825      	ldr	r5, [r4, #0]
 800c416:	1961      	adds	r1, r4, r5
 800c418:	428b      	cmp	r3, r1
 800c41a:	bf01      	itttt	eq
 800c41c:	6819      	ldreq	r1, [r3, #0]
 800c41e:	685b      	ldreq	r3, [r3, #4]
 800c420:	1949      	addeq	r1, r1, r5
 800c422:	6021      	streq	r1, [r4, #0]
 800c424:	e7ed      	b.n	800c402 <_free_r+0x22>
 800c426:	461a      	mov	r2, r3
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	b10b      	cbz	r3, 800c430 <_free_r+0x50>
 800c42c:	42a3      	cmp	r3, r4
 800c42e:	d9fa      	bls.n	800c426 <_free_r+0x46>
 800c430:	6811      	ldr	r1, [r2, #0]
 800c432:	1855      	adds	r5, r2, r1
 800c434:	42a5      	cmp	r5, r4
 800c436:	d10b      	bne.n	800c450 <_free_r+0x70>
 800c438:	6824      	ldr	r4, [r4, #0]
 800c43a:	4421      	add	r1, r4
 800c43c:	1854      	adds	r4, r2, r1
 800c43e:	42a3      	cmp	r3, r4
 800c440:	6011      	str	r1, [r2, #0]
 800c442:	d1e0      	bne.n	800c406 <_free_r+0x26>
 800c444:	681c      	ldr	r4, [r3, #0]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	6053      	str	r3, [r2, #4]
 800c44a:	440c      	add	r4, r1
 800c44c:	6014      	str	r4, [r2, #0]
 800c44e:	e7da      	b.n	800c406 <_free_r+0x26>
 800c450:	d902      	bls.n	800c458 <_free_r+0x78>
 800c452:	230c      	movs	r3, #12
 800c454:	6003      	str	r3, [r0, #0]
 800c456:	e7d6      	b.n	800c406 <_free_r+0x26>
 800c458:	6825      	ldr	r5, [r4, #0]
 800c45a:	1961      	adds	r1, r4, r5
 800c45c:	428b      	cmp	r3, r1
 800c45e:	bf04      	itt	eq
 800c460:	6819      	ldreq	r1, [r3, #0]
 800c462:	685b      	ldreq	r3, [r3, #4]
 800c464:	6063      	str	r3, [r4, #4]
 800c466:	bf04      	itt	eq
 800c468:	1949      	addeq	r1, r1, r5
 800c46a:	6021      	streq	r1, [r4, #0]
 800c46c:	6054      	str	r4, [r2, #4]
 800c46e:	e7ca      	b.n	800c406 <_free_r+0x26>
 800c470:	b003      	add	sp, #12
 800c472:	bd30      	pop	{r4, r5, pc}
 800c474:	20005314 	.word	0x20005314

0800c478 <sbrk_aligned>:
 800c478:	b570      	push	{r4, r5, r6, lr}
 800c47a:	4e0e      	ldr	r6, [pc, #56]	; (800c4b4 <sbrk_aligned+0x3c>)
 800c47c:	460c      	mov	r4, r1
 800c47e:	6831      	ldr	r1, [r6, #0]
 800c480:	4605      	mov	r5, r0
 800c482:	b911      	cbnz	r1, 800c48a <sbrk_aligned+0x12>
 800c484:	f000 fcbc 	bl	800ce00 <_sbrk_r>
 800c488:	6030      	str	r0, [r6, #0]
 800c48a:	4621      	mov	r1, r4
 800c48c:	4628      	mov	r0, r5
 800c48e:	f000 fcb7 	bl	800ce00 <_sbrk_r>
 800c492:	1c43      	adds	r3, r0, #1
 800c494:	d00a      	beq.n	800c4ac <sbrk_aligned+0x34>
 800c496:	1cc4      	adds	r4, r0, #3
 800c498:	f024 0403 	bic.w	r4, r4, #3
 800c49c:	42a0      	cmp	r0, r4
 800c49e:	d007      	beq.n	800c4b0 <sbrk_aligned+0x38>
 800c4a0:	1a21      	subs	r1, r4, r0
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	f000 fcac 	bl	800ce00 <_sbrk_r>
 800c4a8:	3001      	adds	r0, #1
 800c4aa:	d101      	bne.n	800c4b0 <sbrk_aligned+0x38>
 800c4ac:	f04f 34ff 	mov.w	r4, #4294967295
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	bd70      	pop	{r4, r5, r6, pc}
 800c4b4:	20005318 	.word	0x20005318

0800c4b8 <_malloc_r>:
 800c4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4bc:	1ccd      	adds	r5, r1, #3
 800c4be:	f025 0503 	bic.w	r5, r5, #3
 800c4c2:	3508      	adds	r5, #8
 800c4c4:	2d0c      	cmp	r5, #12
 800c4c6:	bf38      	it	cc
 800c4c8:	250c      	movcc	r5, #12
 800c4ca:	2d00      	cmp	r5, #0
 800c4cc:	4607      	mov	r7, r0
 800c4ce:	db01      	blt.n	800c4d4 <_malloc_r+0x1c>
 800c4d0:	42a9      	cmp	r1, r5
 800c4d2:	d905      	bls.n	800c4e0 <_malloc_r+0x28>
 800c4d4:	230c      	movs	r3, #12
 800c4d6:	603b      	str	r3, [r7, #0]
 800c4d8:	2600      	movs	r6, #0
 800c4da:	4630      	mov	r0, r6
 800c4dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c5b4 <_malloc_r+0xfc>
 800c4e4:	f000 f868 	bl	800c5b8 <__malloc_lock>
 800c4e8:	f8d8 3000 	ldr.w	r3, [r8]
 800c4ec:	461c      	mov	r4, r3
 800c4ee:	bb5c      	cbnz	r4, 800c548 <_malloc_r+0x90>
 800c4f0:	4629      	mov	r1, r5
 800c4f2:	4638      	mov	r0, r7
 800c4f4:	f7ff ffc0 	bl	800c478 <sbrk_aligned>
 800c4f8:	1c43      	adds	r3, r0, #1
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	d155      	bne.n	800c5aa <_malloc_r+0xf2>
 800c4fe:	f8d8 4000 	ldr.w	r4, [r8]
 800c502:	4626      	mov	r6, r4
 800c504:	2e00      	cmp	r6, #0
 800c506:	d145      	bne.n	800c594 <_malloc_r+0xdc>
 800c508:	2c00      	cmp	r4, #0
 800c50a:	d048      	beq.n	800c59e <_malloc_r+0xe6>
 800c50c:	6823      	ldr	r3, [r4, #0]
 800c50e:	4631      	mov	r1, r6
 800c510:	4638      	mov	r0, r7
 800c512:	eb04 0903 	add.w	r9, r4, r3
 800c516:	f000 fc73 	bl	800ce00 <_sbrk_r>
 800c51a:	4581      	cmp	r9, r0
 800c51c:	d13f      	bne.n	800c59e <_malloc_r+0xe6>
 800c51e:	6821      	ldr	r1, [r4, #0]
 800c520:	1a6d      	subs	r5, r5, r1
 800c522:	4629      	mov	r1, r5
 800c524:	4638      	mov	r0, r7
 800c526:	f7ff ffa7 	bl	800c478 <sbrk_aligned>
 800c52a:	3001      	adds	r0, #1
 800c52c:	d037      	beq.n	800c59e <_malloc_r+0xe6>
 800c52e:	6823      	ldr	r3, [r4, #0]
 800c530:	442b      	add	r3, r5
 800c532:	6023      	str	r3, [r4, #0]
 800c534:	f8d8 3000 	ldr.w	r3, [r8]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d038      	beq.n	800c5ae <_malloc_r+0xf6>
 800c53c:	685a      	ldr	r2, [r3, #4]
 800c53e:	42a2      	cmp	r2, r4
 800c540:	d12b      	bne.n	800c59a <_malloc_r+0xe2>
 800c542:	2200      	movs	r2, #0
 800c544:	605a      	str	r2, [r3, #4]
 800c546:	e00f      	b.n	800c568 <_malloc_r+0xb0>
 800c548:	6822      	ldr	r2, [r4, #0]
 800c54a:	1b52      	subs	r2, r2, r5
 800c54c:	d41f      	bmi.n	800c58e <_malloc_r+0xd6>
 800c54e:	2a0b      	cmp	r2, #11
 800c550:	d917      	bls.n	800c582 <_malloc_r+0xca>
 800c552:	1961      	adds	r1, r4, r5
 800c554:	42a3      	cmp	r3, r4
 800c556:	6025      	str	r5, [r4, #0]
 800c558:	bf18      	it	ne
 800c55a:	6059      	strne	r1, [r3, #4]
 800c55c:	6863      	ldr	r3, [r4, #4]
 800c55e:	bf08      	it	eq
 800c560:	f8c8 1000 	streq.w	r1, [r8]
 800c564:	5162      	str	r2, [r4, r5]
 800c566:	604b      	str	r3, [r1, #4]
 800c568:	4638      	mov	r0, r7
 800c56a:	f104 060b 	add.w	r6, r4, #11
 800c56e:	f000 f829 	bl	800c5c4 <__malloc_unlock>
 800c572:	f026 0607 	bic.w	r6, r6, #7
 800c576:	1d23      	adds	r3, r4, #4
 800c578:	1af2      	subs	r2, r6, r3
 800c57a:	d0ae      	beq.n	800c4da <_malloc_r+0x22>
 800c57c:	1b9b      	subs	r3, r3, r6
 800c57e:	50a3      	str	r3, [r4, r2]
 800c580:	e7ab      	b.n	800c4da <_malloc_r+0x22>
 800c582:	42a3      	cmp	r3, r4
 800c584:	6862      	ldr	r2, [r4, #4]
 800c586:	d1dd      	bne.n	800c544 <_malloc_r+0x8c>
 800c588:	f8c8 2000 	str.w	r2, [r8]
 800c58c:	e7ec      	b.n	800c568 <_malloc_r+0xb0>
 800c58e:	4623      	mov	r3, r4
 800c590:	6864      	ldr	r4, [r4, #4]
 800c592:	e7ac      	b.n	800c4ee <_malloc_r+0x36>
 800c594:	4634      	mov	r4, r6
 800c596:	6876      	ldr	r6, [r6, #4]
 800c598:	e7b4      	b.n	800c504 <_malloc_r+0x4c>
 800c59a:	4613      	mov	r3, r2
 800c59c:	e7cc      	b.n	800c538 <_malloc_r+0x80>
 800c59e:	230c      	movs	r3, #12
 800c5a0:	603b      	str	r3, [r7, #0]
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	f000 f80e 	bl	800c5c4 <__malloc_unlock>
 800c5a8:	e797      	b.n	800c4da <_malloc_r+0x22>
 800c5aa:	6025      	str	r5, [r4, #0]
 800c5ac:	e7dc      	b.n	800c568 <_malloc_r+0xb0>
 800c5ae:	605b      	str	r3, [r3, #4]
 800c5b0:	deff      	udf	#255	; 0xff
 800c5b2:	bf00      	nop
 800c5b4:	20005314 	.word	0x20005314

0800c5b8 <__malloc_lock>:
 800c5b8:	4801      	ldr	r0, [pc, #4]	; (800c5c0 <__malloc_lock+0x8>)
 800c5ba:	f7ff bf01 	b.w	800c3c0 <__retarget_lock_acquire_recursive>
 800c5be:	bf00      	nop
 800c5c0:	20005310 	.word	0x20005310

0800c5c4 <__malloc_unlock>:
 800c5c4:	4801      	ldr	r0, [pc, #4]	; (800c5cc <__malloc_unlock+0x8>)
 800c5c6:	f7ff befc 	b.w	800c3c2 <__retarget_lock_release_recursive>
 800c5ca:	bf00      	nop
 800c5cc:	20005310 	.word	0x20005310

0800c5d0 <__sfputc_r>:
 800c5d0:	6893      	ldr	r3, [r2, #8]
 800c5d2:	3b01      	subs	r3, #1
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	b410      	push	{r4}
 800c5d8:	6093      	str	r3, [r2, #8]
 800c5da:	da08      	bge.n	800c5ee <__sfputc_r+0x1e>
 800c5dc:	6994      	ldr	r4, [r2, #24]
 800c5de:	42a3      	cmp	r3, r4
 800c5e0:	db01      	blt.n	800c5e6 <__sfputc_r+0x16>
 800c5e2:	290a      	cmp	r1, #10
 800c5e4:	d103      	bne.n	800c5ee <__sfputc_r+0x1e>
 800c5e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5ea:	f000 bb73 	b.w	800ccd4 <__swbuf_r>
 800c5ee:	6813      	ldr	r3, [r2, #0]
 800c5f0:	1c58      	adds	r0, r3, #1
 800c5f2:	6010      	str	r0, [r2, #0]
 800c5f4:	7019      	strb	r1, [r3, #0]
 800c5f6:	4608      	mov	r0, r1
 800c5f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <__sfputs_r>:
 800c5fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c600:	4606      	mov	r6, r0
 800c602:	460f      	mov	r7, r1
 800c604:	4614      	mov	r4, r2
 800c606:	18d5      	adds	r5, r2, r3
 800c608:	42ac      	cmp	r4, r5
 800c60a:	d101      	bne.n	800c610 <__sfputs_r+0x12>
 800c60c:	2000      	movs	r0, #0
 800c60e:	e007      	b.n	800c620 <__sfputs_r+0x22>
 800c610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c614:	463a      	mov	r2, r7
 800c616:	4630      	mov	r0, r6
 800c618:	f7ff ffda 	bl	800c5d0 <__sfputc_r>
 800c61c:	1c43      	adds	r3, r0, #1
 800c61e:	d1f3      	bne.n	800c608 <__sfputs_r+0xa>
 800c620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c624 <_vfiprintf_r>:
 800c624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c628:	460d      	mov	r5, r1
 800c62a:	b09d      	sub	sp, #116	; 0x74
 800c62c:	4614      	mov	r4, r2
 800c62e:	4698      	mov	r8, r3
 800c630:	4606      	mov	r6, r0
 800c632:	b118      	cbz	r0, 800c63c <_vfiprintf_r+0x18>
 800c634:	6a03      	ldr	r3, [r0, #32]
 800c636:	b90b      	cbnz	r3, 800c63c <_vfiprintf_r+0x18>
 800c638:	f7ff fd5a 	bl	800c0f0 <__sinit>
 800c63c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c63e:	07d9      	lsls	r1, r3, #31
 800c640:	d405      	bmi.n	800c64e <_vfiprintf_r+0x2a>
 800c642:	89ab      	ldrh	r3, [r5, #12]
 800c644:	059a      	lsls	r2, r3, #22
 800c646:	d402      	bmi.n	800c64e <_vfiprintf_r+0x2a>
 800c648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c64a:	f7ff feb9 	bl	800c3c0 <__retarget_lock_acquire_recursive>
 800c64e:	89ab      	ldrh	r3, [r5, #12]
 800c650:	071b      	lsls	r3, r3, #28
 800c652:	d501      	bpl.n	800c658 <_vfiprintf_r+0x34>
 800c654:	692b      	ldr	r3, [r5, #16]
 800c656:	b99b      	cbnz	r3, 800c680 <_vfiprintf_r+0x5c>
 800c658:	4629      	mov	r1, r5
 800c65a:	4630      	mov	r0, r6
 800c65c:	f000 fb78 	bl	800cd50 <__swsetup_r>
 800c660:	b170      	cbz	r0, 800c680 <_vfiprintf_r+0x5c>
 800c662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c664:	07dc      	lsls	r4, r3, #31
 800c666:	d504      	bpl.n	800c672 <_vfiprintf_r+0x4e>
 800c668:	f04f 30ff 	mov.w	r0, #4294967295
 800c66c:	b01d      	add	sp, #116	; 0x74
 800c66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c672:	89ab      	ldrh	r3, [r5, #12]
 800c674:	0598      	lsls	r0, r3, #22
 800c676:	d4f7      	bmi.n	800c668 <_vfiprintf_r+0x44>
 800c678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c67a:	f7ff fea2 	bl	800c3c2 <__retarget_lock_release_recursive>
 800c67e:	e7f3      	b.n	800c668 <_vfiprintf_r+0x44>
 800c680:	2300      	movs	r3, #0
 800c682:	9309      	str	r3, [sp, #36]	; 0x24
 800c684:	2320      	movs	r3, #32
 800c686:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c68a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c68e:	2330      	movs	r3, #48	; 0x30
 800c690:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c844 <_vfiprintf_r+0x220>
 800c694:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c698:	f04f 0901 	mov.w	r9, #1
 800c69c:	4623      	mov	r3, r4
 800c69e:	469a      	mov	sl, r3
 800c6a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6a4:	b10a      	cbz	r2, 800c6aa <_vfiprintf_r+0x86>
 800c6a6:	2a25      	cmp	r2, #37	; 0x25
 800c6a8:	d1f9      	bne.n	800c69e <_vfiprintf_r+0x7a>
 800c6aa:	ebba 0b04 	subs.w	fp, sl, r4
 800c6ae:	d00b      	beq.n	800c6c8 <_vfiprintf_r+0xa4>
 800c6b0:	465b      	mov	r3, fp
 800c6b2:	4622      	mov	r2, r4
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	4630      	mov	r0, r6
 800c6b8:	f7ff ffa1 	bl	800c5fe <__sfputs_r>
 800c6bc:	3001      	adds	r0, #1
 800c6be:	f000 80a9 	beq.w	800c814 <_vfiprintf_r+0x1f0>
 800c6c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6c4:	445a      	add	r2, fp
 800c6c6:	9209      	str	r2, [sp, #36]	; 0x24
 800c6c8:	f89a 3000 	ldrb.w	r3, [sl]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f000 80a1 	beq.w	800c814 <_vfiprintf_r+0x1f0>
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6dc:	f10a 0a01 	add.w	sl, sl, #1
 800c6e0:	9304      	str	r3, [sp, #16]
 800c6e2:	9307      	str	r3, [sp, #28]
 800c6e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6e8:	931a      	str	r3, [sp, #104]	; 0x68
 800c6ea:	4654      	mov	r4, sl
 800c6ec:	2205      	movs	r2, #5
 800c6ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6f2:	4854      	ldr	r0, [pc, #336]	; (800c844 <_vfiprintf_r+0x220>)
 800c6f4:	f7f3 fda4 	bl	8000240 <memchr>
 800c6f8:	9a04      	ldr	r2, [sp, #16]
 800c6fa:	b9d8      	cbnz	r0, 800c734 <_vfiprintf_r+0x110>
 800c6fc:	06d1      	lsls	r1, r2, #27
 800c6fe:	bf44      	itt	mi
 800c700:	2320      	movmi	r3, #32
 800c702:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c706:	0713      	lsls	r3, r2, #28
 800c708:	bf44      	itt	mi
 800c70a:	232b      	movmi	r3, #43	; 0x2b
 800c70c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c710:	f89a 3000 	ldrb.w	r3, [sl]
 800c714:	2b2a      	cmp	r3, #42	; 0x2a
 800c716:	d015      	beq.n	800c744 <_vfiprintf_r+0x120>
 800c718:	9a07      	ldr	r2, [sp, #28]
 800c71a:	4654      	mov	r4, sl
 800c71c:	2000      	movs	r0, #0
 800c71e:	f04f 0c0a 	mov.w	ip, #10
 800c722:	4621      	mov	r1, r4
 800c724:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c728:	3b30      	subs	r3, #48	; 0x30
 800c72a:	2b09      	cmp	r3, #9
 800c72c:	d94d      	bls.n	800c7ca <_vfiprintf_r+0x1a6>
 800c72e:	b1b0      	cbz	r0, 800c75e <_vfiprintf_r+0x13a>
 800c730:	9207      	str	r2, [sp, #28]
 800c732:	e014      	b.n	800c75e <_vfiprintf_r+0x13a>
 800c734:	eba0 0308 	sub.w	r3, r0, r8
 800c738:	fa09 f303 	lsl.w	r3, r9, r3
 800c73c:	4313      	orrs	r3, r2
 800c73e:	9304      	str	r3, [sp, #16]
 800c740:	46a2      	mov	sl, r4
 800c742:	e7d2      	b.n	800c6ea <_vfiprintf_r+0xc6>
 800c744:	9b03      	ldr	r3, [sp, #12]
 800c746:	1d19      	adds	r1, r3, #4
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	9103      	str	r1, [sp, #12]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	bfbb      	ittet	lt
 800c750:	425b      	neglt	r3, r3
 800c752:	f042 0202 	orrlt.w	r2, r2, #2
 800c756:	9307      	strge	r3, [sp, #28]
 800c758:	9307      	strlt	r3, [sp, #28]
 800c75a:	bfb8      	it	lt
 800c75c:	9204      	strlt	r2, [sp, #16]
 800c75e:	7823      	ldrb	r3, [r4, #0]
 800c760:	2b2e      	cmp	r3, #46	; 0x2e
 800c762:	d10c      	bne.n	800c77e <_vfiprintf_r+0x15a>
 800c764:	7863      	ldrb	r3, [r4, #1]
 800c766:	2b2a      	cmp	r3, #42	; 0x2a
 800c768:	d134      	bne.n	800c7d4 <_vfiprintf_r+0x1b0>
 800c76a:	9b03      	ldr	r3, [sp, #12]
 800c76c:	1d1a      	adds	r2, r3, #4
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	9203      	str	r2, [sp, #12]
 800c772:	2b00      	cmp	r3, #0
 800c774:	bfb8      	it	lt
 800c776:	f04f 33ff 	movlt.w	r3, #4294967295
 800c77a:	3402      	adds	r4, #2
 800c77c:	9305      	str	r3, [sp, #20]
 800c77e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c854 <_vfiprintf_r+0x230>
 800c782:	7821      	ldrb	r1, [r4, #0]
 800c784:	2203      	movs	r2, #3
 800c786:	4650      	mov	r0, sl
 800c788:	f7f3 fd5a 	bl	8000240 <memchr>
 800c78c:	b138      	cbz	r0, 800c79e <_vfiprintf_r+0x17a>
 800c78e:	9b04      	ldr	r3, [sp, #16]
 800c790:	eba0 000a 	sub.w	r0, r0, sl
 800c794:	2240      	movs	r2, #64	; 0x40
 800c796:	4082      	lsls	r2, r0
 800c798:	4313      	orrs	r3, r2
 800c79a:	3401      	adds	r4, #1
 800c79c:	9304      	str	r3, [sp, #16]
 800c79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7a2:	4829      	ldr	r0, [pc, #164]	; (800c848 <_vfiprintf_r+0x224>)
 800c7a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7a8:	2206      	movs	r2, #6
 800c7aa:	f7f3 fd49 	bl	8000240 <memchr>
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d03f      	beq.n	800c832 <_vfiprintf_r+0x20e>
 800c7b2:	4b26      	ldr	r3, [pc, #152]	; (800c84c <_vfiprintf_r+0x228>)
 800c7b4:	bb1b      	cbnz	r3, 800c7fe <_vfiprintf_r+0x1da>
 800c7b6:	9b03      	ldr	r3, [sp, #12]
 800c7b8:	3307      	adds	r3, #7
 800c7ba:	f023 0307 	bic.w	r3, r3, #7
 800c7be:	3308      	adds	r3, #8
 800c7c0:	9303      	str	r3, [sp, #12]
 800c7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7c4:	443b      	add	r3, r7
 800c7c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c7c8:	e768      	b.n	800c69c <_vfiprintf_r+0x78>
 800c7ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7ce:	460c      	mov	r4, r1
 800c7d0:	2001      	movs	r0, #1
 800c7d2:	e7a6      	b.n	800c722 <_vfiprintf_r+0xfe>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	3401      	adds	r4, #1
 800c7d8:	9305      	str	r3, [sp, #20]
 800c7da:	4619      	mov	r1, r3
 800c7dc:	f04f 0c0a 	mov.w	ip, #10
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7e6:	3a30      	subs	r2, #48	; 0x30
 800c7e8:	2a09      	cmp	r2, #9
 800c7ea:	d903      	bls.n	800c7f4 <_vfiprintf_r+0x1d0>
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d0c6      	beq.n	800c77e <_vfiprintf_r+0x15a>
 800c7f0:	9105      	str	r1, [sp, #20]
 800c7f2:	e7c4      	b.n	800c77e <_vfiprintf_r+0x15a>
 800c7f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7f8:	4604      	mov	r4, r0
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	e7f0      	b.n	800c7e0 <_vfiprintf_r+0x1bc>
 800c7fe:	ab03      	add	r3, sp, #12
 800c800:	9300      	str	r3, [sp, #0]
 800c802:	462a      	mov	r2, r5
 800c804:	4b12      	ldr	r3, [pc, #72]	; (800c850 <_vfiprintf_r+0x22c>)
 800c806:	a904      	add	r1, sp, #16
 800c808:	4630      	mov	r0, r6
 800c80a:	f3af 8000 	nop.w
 800c80e:	4607      	mov	r7, r0
 800c810:	1c78      	adds	r0, r7, #1
 800c812:	d1d6      	bne.n	800c7c2 <_vfiprintf_r+0x19e>
 800c814:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c816:	07d9      	lsls	r1, r3, #31
 800c818:	d405      	bmi.n	800c826 <_vfiprintf_r+0x202>
 800c81a:	89ab      	ldrh	r3, [r5, #12]
 800c81c:	059a      	lsls	r2, r3, #22
 800c81e:	d402      	bmi.n	800c826 <_vfiprintf_r+0x202>
 800c820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c822:	f7ff fdce 	bl	800c3c2 <__retarget_lock_release_recursive>
 800c826:	89ab      	ldrh	r3, [r5, #12]
 800c828:	065b      	lsls	r3, r3, #25
 800c82a:	f53f af1d 	bmi.w	800c668 <_vfiprintf_r+0x44>
 800c82e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c830:	e71c      	b.n	800c66c <_vfiprintf_r+0x48>
 800c832:	ab03      	add	r3, sp, #12
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	462a      	mov	r2, r5
 800c838:	4b05      	ldr	r3, [pc, #20]	; (800c850 <_vfiprintf_r+0x22c>)
 800c83a:	a904      	add	r1, sp, #16
 800c83c:	4630      	mov	r0, r6
 800c83e:	f000 f879 	bl	800c934 <_printf_i>
 800c842:	e7e4      	b.n	800c80e <_vfiprintf_r+0x1ea>
 800c844:	0800e920 	.word	0x0800e920
 800c848:	0800e92a 	.word	0x0800e92a
 800c84c:	00000000 	.word	0x00000000
 800c850:	0800c5ff 	.word	0x0800c5ff
 800c854:	0800e926 	.word	0x0800e926

0800c858 <_printf_common>:
 800c858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c85c:	4616      	mov	r6, r2
 800c85e:	4699      	mov	r9, r3
 800c860:	688a      	ldr	r2, [r1, #8]
 800c862:	690b      	ldr	r3, [r1, #16]
 800c864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c868:	4293      	cmp	r3, r2
 800c86a:	bfb8      	it	lt
 800c86c:	4613      	movlt	r3, r2
 800c86e:	6033      	str	r3, [r6, #0]
 800c870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c874:	4607      	mov	r7, r0
 800c876:	460c      	mov	r4, r1
 800c878:	b10a      	cbz	r2, 800c87e <_printf_common+0x26>
 800c87a:	3301      	adds	r3, #1
 800c87c:	6033      	str	r3, [r6, #0]
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	0699      	lsls	r1, r3, #26
 800c882:	bf42      	ittt	mi
 800c884:	6833      	ldrmi	r3, [r6, #0]
 800c886:	3302      	addmi	r3, #2
 800c888:	6033      	strmi	r3, [r6, #0]
 800c88a:	6825      	ldr	r5, [r4, #0]
 800c88c:	f015 0506 	ands.w	r5, r5, #6
 800c890:	d106      	bne.n	800c8a0 <_printf_common+0x48>
 800c892:	f104 0a19 	add.w	sl, r4, #25
 800c896:	68e3      	ldr	r3, [r4, #12]
 800c898:	6832      	ldr	r2, [r6, #0]
 800c89a:	1a9b      	subs	r3, r3, r2
 800c89c:	42ab      	cmp	r3, r5
 800c89e:	dc26      	bgt.n	800c8ee <_printf_common+0x96>
 800c8a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8a4:	1e13      	subs	r3, r2, #0
 800c8a6:	6822      	ldr	r2, [r4, #0]
 800c8a8:	bf18      	it	ne
 800c8aa:	2301      	movne	r3, #1
 800c8ac:	0692      	lsls	r2, r2, #26
 800c8ae:	d42b      	bmi.n	800c908 <_printf_common+0xb0>
 800c8b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8b4:	4649      	mov	r1, r9
 800c8b6:	4638      	mov	r0, r7
 800c8b8:	47c0      	blx	r8
 800c8ba:	3001      	adds	r0, #1
 800c8bc:	d01e      	beq.n	800c8fc <_printf_common+0xa4>
 800c8be:	6823      	ldr	r3, [r4, #0]
 800c8c0:	6922      	ldr	r2, [r4, #16]
 800c8c2:	f003 0306 	and.w	r3, r3, #6
 800c8c6:	2b04      	cmp	r3, #4
 800c8c8:	bf02      	ittt	eq
 800c8ca:	68e5      	ldreq	r5, [r4, #12]
 800c8cc:	6833      	ldreq	r3, [r6, #0]
 800c8ce:	1aed      	subeq	r5, r5, r3
 800c8d0:	68a3      	ldr	r3, [r4, #8]
 800c8d2:	bf0c      	ite	eq
 800c8d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8d8:	2500      	movne	r5, #0
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	bfc4      	itt	gt
 800c8de:	1a9b      	subgt	r3, r3, r2
 800c8e0:	18ed      	addgt	r5, r5, r3
 800c8e2:	2600      	movs	r6, #0
 800c8e4:	341a      	adds	r4, #26
 800c8e6:	42b5      	cmp	r5, r6
 800c8e8:	d11a      	bne.n	800c920 <_printf_common+0xc8>
 800c8ea:	2000      	movs	r0, #0
 800c8ec:	e008      	b.n	800c900 <_printf_common+0xa8>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	4652      	mov	r2, sl
 800c8f2:	4649      	mov	r1, r9
 800c8f4:	4638      	mov	r0, r7
 800c8f6:	47c0      	blx	r8
 800c8f8:	3001      	adds	r0, #1
 800c8fa:	d103      	bne.n	800c904 <_printf_common+0xac>
 800c8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c904:	3501      	adds	r5, #1
 800c906:	e7c6      	b.n	800c896 <_printf_common+0x3e>
 800c908:	18e1      	adds	r1, r4, r3
 800c90a:	1c5a      	adds	r2, r3, #1
 800c90c:	2030      	movs	r0, #48	; 0x30
 800c90e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c912:	4422      	add	r2, r4
 800c914:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c918:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c91c:	3302      	adds	r3, #2
 800c91e:	e7c7      	b.n	800c8b0 <_printf_common+0x58>
 800c920:	2301      	movs	r3, #1
 800c922:	4622      	mov	r2, r4
 800c924:	4649      	mov	r1, r9
 800c926:	4638      	mov	r0, r7
 800c928:	47c0      	blx	r8
 800c92a:	3001      	adds	r0, #1
 800c92c:	d0e6      	beq.n	800c8fc <_printf_common+0xa4>
 800c92e:	3601      	adds	r6, #1
 800c930:	e7d9      	b.n	800c8e6 <_printf_common+0x8e>
	...

0800c934 <_printf_i>:
 800c934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c938:	7e0f      	ldrb	r7, [r1, #24]
 800c93a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c93c:	2f78      	cmp	r7, #120	; 0x78
 800c93e:	4691      	mov	r9, r2
 800c940:	4680      	mov	r8, r0
 800c942:	460c      	mov	r4, r1
 800c944:	469a      	mov	sl, r3
 800c946:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c94a:	d807      	bhi.n	800c95c <_printf_i+0x28>
 800c94c:	2f62      	cmp	r7, #98	; 0x62
 800c94e:	d80a      	bhi.n	800c966 <_printf_i+0x32>
 800c950:	2f00      	cmp	r7, #0
 800c952:	f000 80d4 	beq.w	800cafe <_printf_i+0x1ca>
 800c956:	2f58      	cmp	r7, #88	; 0x58
 800c958:	f000 80c0 	beq.w	800cadc <_printf_i+0x1a8>
 800c95c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c960:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c964:	e03a      	b.n	800c9dc <_printf_i+0xa8>
 800c966:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c96a:	2b15      	cmp	r3, #21
 800c96c:	d8f6      	bhi.n	800c95c <_printf_i+0x28>
 800c96e:	a101      	add	r1, pc, #4	; (adr r1, 800c974 <_printf_i+0x40>)
 800c970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c974:	0800c9cd 	.word	0x0800c9cd
 800c978:	0800c9e1 	.word	0x0800c9e1
 800c97c:	0800c95d 	.word	0x0800c95d
 800c980:	0800c95d 	.word	0x0800c95d
 800c984:	0800c95d 	.word	0x0800c95d
 800c988:	0800c95d 	.word	0x0800c95d
 800c98c:	0800c9e1 	.word	0x0800c9e1
 800c990:	0800c95d 	.word	0x0800c95d
 800c994:	0800c95d 	.word	0x0800c95d
 800c998:	0800c95d 	.word	0x0800c95d
 800c99c:	0800c95d 	.word	0x0800c95d
 800c9a0:	0800cae5 	.word	0x0800cae5
 800c9a4:	0800ca0d 	.word	0x0800ca0d
 800c9a8:	0800ca9f 	.word	0x0800ca9f
 800c9ac:	0800c95d 	.word	0x0800c95d
 800c9b0:	0800c95d 	.word	0x0800c95d
 800c9b4:	0800cb07 	.word	0x0800cb07
 800c9b8:	0800c95d 	.word	0x0800c95d
 800c9bc:	0800ca0d 	.word	0x0800ca0d
 800c9c0:	0800c95d 	.word	0x0800c95d
 800c9c4:	0800c95d 	.word	0x0800c95d
 800c9c8:	0800caa7 	.word	0x0800caa7
 800c9cc:	682b      	ldr	r3, [r5, #0]
 800c9ce:	1d1a      	adds	r2, r3, #4
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	602a      	str	r2, [r5, #0]
 800c9d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e09f      	b.n	800cb20 <_printf_i+0x1ec>
 800c9e0:	6820      	ldr	r0, [r4, #0]
 800c9e2:	682b      	ldr	r3, [r5, #0]
 800c9e4:	0607      	lsls	r7, r0, #24
 800c9e6:	f103 0104 	add.w	r1, r3, #4
 800c9ea:	6029      	str	r1, [r5, #0]
 800c9ec:	d501      	bpl.n	800c9f2 <_printf_i+0xbe>
 800c9ee:	681e      	ldr	r6, [r3, #0]
 800c9f0:	e003      	b.n	800c9fa <_printf_i+0xc6>
 800c9f2:	0646      	lsls	r6, r0, #25
 800c9f4:	d5fb      	bpl.n	800c9ee <_printf_i+0xba>
 800c9f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c9fa:	2e00      	cmp	r6, #0
 800c9fc:	da03      	bge.n	800ca06 <_printf_i+0xd2>
 800c9fe:	232d      	movs	r3, #45	; 0x2d
 800ca00:	4276      	negs	r6, r6
 800ca02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca06:	485a      	ldr	r0, [pc, #360]	; (800cb70 <_printf_i+0x23c>)
 800ca08:	230a      	movs	r3, #10
 800ca0a:	e012      	b.n	800ca32 <_printf_i+0xfe>
 800ca0c:	682b      	ldr	r3, [r5, #0]
 800ca0e:	6820      	ldr	r0, [r4, #0]
 800ca10:	1d19      	adds	r1, r3, #4
 800ca12:	6029      	str	r1, [r5, #0]
 800ca14:	0605      	lsls	r5, r0, #24
 800ca16:	d501      	bpl.n	800ca1c <_printf_i+0xe8>
 800ca18:	681e      	ldr	r6, [r3, #0]
 800ca1a:	e002      	b.n	800ca22 <_printf_i+0xee>
 800ca1c:	0641      	lsls	r1, r0, #25
 800ca1e:	d5fb      	bpl.n	800ca18 <_printf_i+0xe4>
 800ca20:	881e      	ldrh	r6, [r3, #0]
 800ca22:	4853      	ldr	r0, [pc, #332]	; (800cb70 <_printf_i+0x23c>)
 800ca24:	2f6f      	cmp	r7, #111	; 0x6f
 800ca26:	bf0c      	ite	eq
 800ca28:	2308      	moveq	r3, #8
 800ca2a:	230a      	movne	r3, #10
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca32:	6865      	ldr	r5, [r4, #4]
 800ca34:	60a5      	str	r5, [r4, #8]
 800ca36:	2d00      	cmp	r5, #0
 800ca38:	bfa2      	ittt	ge
 800ca3a:	6821      	ldrge	r1, [r4, #0]
 800ca3c:	f021 0104 	bicge.w	r1, r1, #4
 800ca40:	6021      	strge	r1, [r4, #0]
 800ca42:	b90e      	cbnz	r6, 800ca48 <_printf_i+0x114>
 800ca44:	2d00      	cmp	r5, #0
 800ca46:	d04b      	beq.n	800cae0 <_printf_i+0x1ac>
 800ca48:	4615      	mov	r5, r2
 800ca4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca4e:	fb03 6711 	mls	r7, r3, r1, r6
 800ca52:	5dc7      	ldrb	r7, [r0, r7]
 800ca54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca58:	4637      	mov	r7, r6
 800ca5a:	42bb      	cmp	r3, r7
 800ca5c:	460e      	mov	r6, r1
 800ca5e:	d9f4      	bls.n	800ca4a <_printf_i+0x116>
 800ca60:	2b08      	cmp	r3, #8
 800ca62:	d10b      	bne.n	800ca7c <_printf_i+0x148>
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	07de      	lsls	r6, r3, #31
 800ca68:	d508      	bpl.n	800ca7c <_printf_i+0x148>
 800ca6a:	6923      	ldr	r3, [r4, #16]
 800ca6c:	6861      	ldr	r1, [r4, #4]
 800ca6e:	4299      	cmp	r1, r3
 800ca70:	bfde      	ittt	le
 800ca72:	2330      	movle	r3, #48	; 0x30
 800ca74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca78:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca7c:	1b52      	subs	r2, r2, r5
 800ca7e:	6122      	str	r2, [r4, #16]
 800ca80:	f8cd a000 	str.w	sl, [sp]
 800ca84:	464b      	mov	r3, r9
 800ca86:	aa03      	add	r2, sp, #12
 800ca88:	4621      	mov	r1, r4
 800ca8a:	4640      	mov	r0, r8
 800ca8c:	f7ff fee4 	bl	800c858 <_printf_common>
 800ca90:	3001      	adds	r0, #1
 800ca92:	d14a      	bne.n	800cb2a <_printf_i+0x1f6>
 800ca94:	f04f 30ff 	mov.w	r0, #4294967295
 800ca98:	b004      	add	sp, #16
 800ca9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca9e:	6823      	ldr	r3, [r4, #0]
 800caa0:	f043 0320 	orr.w	r3, r3, #32
 800caa4:	6023      	str	r3, [r4, #0]
 800caa6:	4833      	ldr	r0, [pc, #204]	; (800cb74 <_printf_i+0x240>)
 800caa8:	2778      	movs	r7, #120	; 0x78
 800caaa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800caae:	6823      	ldr	r3, [r4, #0]
 800cab0:	6829      	ldr	r1, [r5, #0]
 800cab2:	061f      	lsls	r7, r3, #24
 800cab4:	f851 6b04 	ldr.w	r6, [r1], #4
 800cab8:	d402      	bmi.n	800cac0 <_printf_i+0x18c>
 800caba:	065f      	lsls	r7, r3, #25
 800cabc:	bf48      	it	mi
 800cabe:	b2b6      	uxthmi	r6, r6
 800cac0:	07df      	lsls	r7, r3, #31
 800cac2:	bf48      	it	mi
 800cac4:	f043 0320 	orrmi.w	r3, r3, #32
 800cac8:	6029      	str	r1, [r5, #0]
 800caca:	bf48      	it	mi
 800cacc:	6023      	strmi	r3, [r4, #0]
 800cace:	b91e      	cbnz	r6, 800cad8 <_printf_i+0x1a4>
 800cad0:	6823      	ldr	r3, [r4, #0]
 800cad2:	f023 0320 	bic.w	r3, r3, #32
 800cad6:	6023      	str	r3, [r4, #0]
 800cad8:	2310      	movs	r3, #16
 800cada:	e7a7      	b.n	800ca2c <_printf_i+0xf8>
 800cadc:	4824      	ldr	r0, [pc, #144]	; (800cb70 <_printf_i+0x23c>)
 800cade:	e7e4      	b.n	800caaa <_printf_i+0x176>
 800cae0:	4615      	mov	r5, r2
 800cae2:	e7bd      	b.n	800ca60 <_printf_i+0x12c>
 800cae4:	682b      	ldr	r3, [r5, #0]
 800cae6:	6826      	ldr	r6, [r4, #0]
 800cae8:	6961      	ldr	r1, [r4, #20]
 800caea:	1d18      	adds	r0, r3, #4
 800caec:	6028      	str	r0, [r5, #0]
 800caee:	0635      	lsls	r5, r6, #24
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	d501      	bpl.n	800caf8 <_printf_i+0x1c4>
 800caf4:	6019      	str	r1, [r3, #0]
 800caf6:	e002      	b.n	800cafe <_printf_i+0x1ca>
 800caf8:	0670      	lsls	r0, r6, #25
 800cafa:	d5fb      	bpl.n	800caf4 <_printf_i+0x1c0>
 800cafc:	8019      	strh	r1, [r3, #0]
 800cafe:	2300      	movs	r3, #0
 800cb00:	6123      	str	r3, [r4, #16]
 800cb02:	4615      	mov	r5, r2
 800cb04:	e7bc      	b.n	800ca80 <_printf_i+0x14c>
 800cb06:	682b      	ldr	r3, [r5, #0]
 800cb08:	1d1a      	adds	r2, r3, #4
 800cb0a:	602a      	str	r2, [r5, #0]
 800cb0c:	681d      	ldr	r5, [r3, #0]
 800cb0e:	6862      	ldr	r2, [r4, #4]
 800cb10:	2100      	movs	r1, #0
 800cb12:	4628      	mov	r0, r5
 800cb14:	f7f3 fb94 	bl	8000240 <memchr>
 800cb18:	b108      	cbz	r0, 800cb1e <_printf_i+0x1ea>
 800cb1a:	1b40      	subs	r0, r0, r5
 800cb1c:	6060      	str	r0, [r4, #4]
 800cb1e:	6863      	ldr	r3, [r4, #4]
 800cb20:	6123      	str	r3, [r4, #16]
 800cb22:	2300      	movs	r3, #0
 800cb24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb28:	e7aa      	b.n	800ca80 <_printf_i+0x14c>
 800cb2a:	6923      	ldr	r3, [r4, #16]
 800cb2c:	462a      	mov	r2, r5
 800cb2e:	4649      	mov	r1, r9
 800cb30:	4640      	mov	r0, r8
 800cb32:	47d0      	blx	sl
 800cb34:	3001      	adds	r0, #1
 800cb36:	d0ad      	beq.n	800ca94 <_printf_i+0x160>
 800cb38:	6823      	ldr	r3, [r4, #0]
 800cb3a:	079b      	lsls	r3, r3, #30
 800cb3c:	d413      	bmi.n	800cb66 <_printf_i+0x232>
 800cb3e:	68e0      	ldr	r0, [r4, #12]
 800cb40:	9b03      	ldr	r3, [sp, #12]
 800cb42:	4298      	cmp	r0, r3
 800cb44:	bfb8      	it	lt
 800cb46:	4618      	movlt	r0, r3
 800cb48:	e7a6      	b.n	800ca98 <_printf_i+0x164>
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	4632      	mov	r2, r6
 800cb4e:	4649      	mov	r1, r9
 800cb50:	4640      	mov	r0, r8
 800cb52:	47d0      	blx	sl
 800cb54:	3001      	adds	r0, #1
 800cb56:	d09d      	beq.n	800ca94 <_printf_i+0x160>
 800cb58:	3501      	adds	r5, #1
 800cb5a:	68e3      	ldr	r3, [r4, #12]
 800cb5c:	9903      	ldr	r1, [sp, #12]
 800cb5e:	1a5b      	subs	r3, r3, r1
 800cb60:	42ab      	cmp	r3, r5
 800cb62:	dcf2      	bgt.n	800cb4a <_printf_i+0x216>
 800cb64:	e7eb      	b.n	800cb3e <_printf_i+0x20a>
 800cb66:	2500      	movs	r5, #0
 800cb68:	f104 0619 	add.w	r6, r4, #25
 800cb6c:	e7f5      	b.n	800cb5a <_printf_i+0x226>
 800cb6e:	bf00      	nop
 800cb70:	0800e931 	.word	0x0800e931
 800cb74:	0800e942 	.word	0x0800e942

0800cb78 <__sflush_r>:
 800cb78:	898a      	ldrh	r2, [r1, #12]
 800cb7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb7e:	4605      	mov	r5, r0
 800cb80:	0710      	lsls	r0, r2, #28
 800cb82:	460c      	mov	r4, r1
 800cb84:	d458      	bmi.n	800cc38 <__sflush_r+0xc0>
 800cb86:	684b      	ldr	r3, [r1, #4]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	dc05      	bgt.n	800cb98 <__sflush_r+0x20>
 800cb8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	dc02      	bgt.n	800cb98 <__sflush_r+0x20>
 800cb92:	2000      	movs	r0, #0
 800cb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb9a:	2e00      	cmp	r6, #0
 800cb9c:	d0f9      	beq.n	800cb92 <__sflush_r+0x1a>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cba4:	682f      	ldr	r7, [r5, #0]
 800cba6:	6a21      	ldr	r1, [r4, #32]
 800cba8:	602b      	str	r3, [r5, #0]
 800cbaa:	d032      	beq.n	800cc12 <__sflush_r+0x9a>
 800cbac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cbae:	89a3      	ldrh	r3, [r4, #12]
 800cbb0:	075a      	lsls	r2, r3, #29
 800cbb2:	d505      	bpl.n	800cbc0 <__sflush_r+0x48>
 800cbb4:	6863      	ldr	r3, [r4, #4]
 800cbb6:	1ac0      	subs	r0, r0, r3
 800cbb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cbba:	b10b      	cbz	r3, 800cbc0 <__sflush_r+0x48>
 800cbbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cbbe:	1ac0      	subs	r0, r0, r3
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbc6:	6a21      	ldr	r1, [r4, #32]
 800cbc8:	4628      	mov	r0, r5
 800cbca:	47b0      	blx	r6
 800cbcc:	1c43      	adds	r3, r0, #1
 800cbce:	89a3      	ldrh	r3, [r4, #12]
 800cbd0:	d106      	bne.n	800cbe0 <__sflush_r+0x68>
 800cbd2:	6829      	ldr	r1, [r5, #0]
 800cbd4:	291d      	cmp	r1, #29
 800cbd6:	d82b      	bhi.n	800cc30 <__sflush_r+0xb8>
 800cbd8:	4a29      	ldr	r2, [pc, #164]	; (800cc80 <__sflush_r+0x108>)
 800cbda:	410a      	asrs	r2, r1
 800cbdc:	07d6      	lsls	r6, r2, #31
 800cbde:	d427      	bmi.n	800cc30 <__sflush_r+0xb8>
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	6062      	str	r2, [r4, #4]
 800cbe4:	04d9      	lsls	r1, r3, #19
 800cbe6:	6922      	ldr	r2, [r4, #16]
 800cbe8:	6022      	str	r2, [r4, #0]
 800cbea:	d504      	bpl.n	800cbf6 <__sflush_r+0x7e>
 800cbec:	1c42      	adds	r2, r0, #1
 800cbee:	d101      	bne.n	800cbf4 <__sflush_r+0x7c>
 800cbf0:	682b      	ldr	r3, [r5, #0]
 800cbf2:	b903      	cbnz	r3, 800cbf6 <__sflush_r+0x7e>
 800cbf4:	6560      	str	r0, [r4, #84]	; 0x54
 800cbf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbf8:	602f      	str	r7, [r5, #0]
 800cbfa:	2900      	cmp	r1, #0
 800cbfc:	d0c9      	beq.n	800cb92 <__sflush_r+0x1a>
 800cbfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc02:	4299      	cmp	r1, r3
 800cc04:	d002      	beq.n	800cc0c <__sflush_r+0x94>
 800cc06:	4628      	mov	r0, r5
 800cc08:	f7ff fbea 	bl	800c3e0 <_free_r>
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	6360      	str	r0, [r4, #52]	; 0x34
 800cc10:	e7c0      	b.n	800cb94 <__sflush_r+0x1c>
 800cc12:	2301      	movs	r3, #1
 800cc14:	4628      	mov	r0, r5
 800cc16:	47b0      	blx	r6
 800cc18:	1c41      	adds	r1, r0, #1
 800cc1a:	d1c8      	bne.n	800cbae <__sflush_r+0x36>
 800cc1c:	682b      	ldr	r3, [r5, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d0c5      	beq.n	800cbae <__sflush_r+0x36>
 800cc22:	2b1d      	cmp	r3, #29
 800cc24:	d001      	beq.n	800cc2a <__sflush_r+0xb2>
 800cc26:	2b16      	cmp	r3, #22
 800cc28:	d101      	bne.n	800cc2e <__sflush_r+0xb6>
 800cc2a:	602f      	str	r7, [r5, #0]
 800cc2c:	e7b1      	b.n	800cb92 <__sflush_r+0x1a>
 800cc2e:	89a3      	ldrh	r3, [r4, #12]
 800cc30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc34:	81a3      	strh	r3, [r4, #12]
 800cc36:	e7ad      	b.n	800cb94 <__sflush_r+0x1c>
 800cc38:	690f      	ldr	r7, [r1, #16]
 800cc3a:	2f00      	cmp	r7, #0
 800cc3c:	d0a9      	beq.n	800cb92 <__sflush_r+0x1a>
 800cc3e:	0793      	lsls	r3, r2, #30
 800cc40:	680e      	ldr	r6, [r1, #0]
 800cc42:	bf08      	it	eq
 800cc44:	694b      	ldreq	r3, [r1, #20]
 800cc46:	600f      	str	r7, [r1, #0]
 800cc48:	bf18      	it	ne
 800cc4a:	2300      	movne	r3, #0
 800cc4c:	eba6 0807 	sub.w	r8, r6, r7
 800cc50:	608b      	str	r3, [r1, #8]
 800cc52:	f1b8 0f00 	cmp.w	r8, #0
 800cc56:	dd9c      	ble.n	800cb92 <__sflush_r+0x1a>
 800cc58:	6a21      	ldr	r1, [r4, #32]
 800cc5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc5c:	4643      	mov	r3, r8
 800cc5e:	463a      	mov	r2, r7
 800cc60:	4628      	mov	r0, r5
 800cc62:	47b0      	blx	r6
 800cc64:	2800      	cmp	r0, #0
 800cc66:	dc06      	bgt.n	800cc76 <__sflush_r+0xfe>
 800cc68:	89a3      	ldrh	r3, [r4, #12]
 800cc6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc6e:	81a3      	strh	r3, [r4, #12]
 800cc70:	f04f 30ff 	mov.w	r0, #4294967295
 800cc74:	e78e      	b.n	800cb94 <__sflush_r+0x1c>
 800cc76:	4407      	add	r7, r0
 800cc78:	eba8 0800 	sub.w	r8, r8, r0
 800cc7c:	e7e9      	b.n	800cc52 <__sflush_r+0xda>
 800cc7e:	bf00      	nop
 800cc80:	dfbffffe 	.word	0xdfbffffe

0800cc84 <_fflush_r>:
 800cc84:	b538      	push	{r3, r4, r5, lr}
 800cc86:	690b      	ldr	r3, [r1, #16]
 800cc88:	4605      	mov	r5, r0
 800cc8a:	460c      	mov	r4, r1
 800cc8c:	b913      	cbnz	r3, 800cc94 <_fflush_r+0x10>
 800cc8e:	2500      	movs	r5, #0
 800cc90:	4628      	mov	r0, r5
 800cc92:	bd38      	pop	{r3, r4, r5, pc}
 800cc94:	b118      	cbz	r0, 800cc9e <_fflush_r+0x1a>
 800cc96:	6a03      	ldr	r3, [r0, #32]
 800cc98:	b90b      	cbnz	r3, 800cc9e <_fflush_r+0x1a>
 800cc9a:	f7ff fa29 	bl	800c0f0 <__sinit>
 800cc9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d0f3      	beq.n	800cc8e <_fflush_r+0xa>
 800cca6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cca8:	07d0      	lsls	r0, r2, #31
 800ccaa:	d404      	bmi.n	800ccb6 <_fflush_r+0x32>
 800ccac:	0599      	lsls	r1, r3, #22
 800ccae:	d402      	bmi.n	800ccb6 <_fflush_r+0x32>
 800ccb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccb2:	f7ff fb85 	bl	800c3c0 <__retarget_lock_acquire_recursive>
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	4621      	mov	r1, r4
 800ccba:	f7ff ff5d 	bl	800cb78 <__sflush_r>
 800ccbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ccc0:	07da      	lsls	r2, r3, #31
 800ccc2:	4605      	mov	r5, r0
 800ccc4:	d4e4      	bmi.n	800cc90 <_fflush_r+0xc>
 800ccc6:	89a3      	ldrh	r3, [r4, #12]
 800ccc8:	059b      	lsls	r3, r3, #22
 800ccca:	d4e1      	bmi.n	800cc90 <_fflush_r+0xc>
 800cccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccce:	f7ff fb78 	bl	800c3c2 <__retarget_lock_release_recursive>
 800ccd2:	e7dd      	b.n	800cc90 <_fflush_r+0xc>

0800ccd4 <__swbuf_r>:
 800ccd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd6:	460e      	mov	r6, r1
 800ccd8:	4614      	mov	r4, r2
 800ccda:	4605      	mov	r5, r0
 800ccdc:	b118      	cbz	r0, 800cce6 <__swbuf_r+0x12>
 800ccde:	6a03      	ldr	r3, [r0, #32]
 800cce0:	b90b      	cbnz	r3, 800cce6 <__swbuf_r+0x12>
 800cce2:	f7ff fa05 	bl	800c0f0 <__sinit>
 800cce6:	69a3      	ldr	r3, [r4, #24]
 800cce8:	60a3      	str	r3, [r4, #8]
 800ccea:	89a3      	ldrh	r3, [r4, #12]
 800ccec:	071a      	lsls	r2, r3, #28
 800ccee:	d525      	bpl.n	800cd3c <__swbuf_r+0x68>
 800ccf0:	6923      	ldr	r3, [r4, #16]
 800ccf2:	b31b      	cbz	r3, 800cd3c <__swbuf_r+0x68>
 800ccf4:	6823      	ldr	r3, [r4, #0]
 800ccf6:	6922      	ldr	r2, [r4, #16]
 800ccf8:	1a98      	subs	r0, r3, r2
 800ccfa:	6963      	ldr	r3, [r4, #20]
 800ccfc:	b2f6      	uxtb	r6, r6
 800ccfe:	4283      	cmp	r3, r0
 800cd00:	4637      	mov	r7, r6
 800cd02:	dc04      	bgt.n	800cd0e <__swbuf_r+0x3a>
 800cd04:	4621      	mov	r1, r4
 800cd06:	4628      	mov	r0, r5
 800cd08:	f7ff ffbc 	bl	800cc84 <_fflush_r>
 800cd0c:	b9e0      	cbnz	r0, 800cd48 <__swbuf_r+0x74>
 800cd0e:	68a3      	ldr	r3, [r4, #8]
 800cd10:	3b01      	subs	r3, #1
 800cd12:	60a3      	str	r3, [r4, #8]
 800cd14:	6823      	ldr	r3, [r4, #0]
 800cd16:	1c5a      	adds	r2, r3, #1
 800cd18:	6022      	str	r2, [r4, #0]
 800cd1a:	701e      	strb	r6, [r3, #0]
 800cd1c:	6962      	ldr	r2, [r4, #20]
 800cd1e:	1c43      	adds	r3, r0, #1
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d004      	beq.n	800cd2e <__swbuf_r+0x5a>
 800cd24:	89a3      	ldrh	r3, [r4, #12]
 800cd26:	07db      	lsls	r3, r3, #31
 800cd28:	d506      	bpl.n	800cd38 <__swbuf_r+0x64>
 800cd2a:	2e0a      	cmp	r6, #10
 800cd2c:	d104      	bne.n	800cd38 <__swbuf_r+0x64>
 800cd2e:	4621      	mov	r1, r4
 800cd30:	4628      	mov	r0, r5
 800cd32:	f7ff ffa7 	bl	800cc84 <_fflush_r>
 800cd36:	b938      	cbnz	r0, 800cd48 <__swbuf_r+0x74>
 800cd38:	4638      	mov	r0, r7
 800cd3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd3c:	4621      	mov	r1, r4
 800cd3e:	4628      	mov	r0, r5
 800cd40:	f000 f806 	bl	800cd50 <__swsetup_r>
 800cd44:	2800      	cmp	r0, #0
 800cd46:	d0d5      	beq.n	800ccf4 <__swbuf_r+0x20>
 800cd48:	f04f 37ff 	mov.w	r7, #4294967295
 800cd4c:	e7f4      	b.n	800cd38 <__swbuf_r+0x64>
	...

0800cd50 <__swsetup_r>:
 800cd50:	b538      	push	{r3, r4, r5, lr}
 800cd52:	4b2a      	ldr	r3, [pc, #168]	; (800cdfc <__swsetup_r+0xac>)
 800cd54:	4605      	mov	r5, r0
 800cd56:	6818      	ldr	r0, [r3, #0]
 800cd58:	460c      	mov	r4, r1
 800cd5a:	b118      	cbz	r0, 800cd64 <__swsetup_r+0x14>
 800cd5c:	6a03      	ldr	r3, [r0, #32]
 800cd5e:	b90b      	cbnz	r3, 800cd64 <__swsetup_r+0x14>
 800cd60:	f7ff f9c6 	bl	800c0f0 <__sinit>
 800cd64:	89a3      	ldrh	r3, [r4, #12]
 800cd66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd6a:	0718      	lsls	r0, r3, #28
 800cd6c:	d422      	bmi.n	800cdb4 <__swsetup_r+0x64>
 800cd6e:	06d9      	lsls	r1, r3, #27
 800cd70:	d407      	bmi.n	800cd82 <__swsetup_r+0x32>
 800cd72:	2309      	movs	r3, #9
 800cd74:	602b      	str	r3, [r5, #0]
 800cd76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd7a:	81a3      	strh	r3, [r4, #12]
 800cd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd80:	e034      	b.n	800cdec <__swsetup_r+0x9c>
 800cd82:	0758      	lsls	r0, r3, #29
 800cd84:	d512      	bpl.n	800cdac <__swsetup_r+0x5c>
 800cd86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd88:	b141      	cbz	r1, 800cd9c <__swsetup_r+0x4c>
 800cd8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd8e:	4299      	cmp	r1, r3
 800cd90:	d002      	beq.n	800cd98 <__swsetup_r+0x48>
 800cd92:	4628      	mov	r0, r5
 800cd94:	f7ff fb24 	bl	800c3e0 <_free_r>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	6363      	str	r3, [r4, #52]	; 0x34
 800cd9c:	89a3      	ldrh	r3, [r4, #12]
 800cd9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cda2:	81a3      	strh	r3, [r4, #12]
 800cda4:	2300      	movs	r3, #0
 800cda6:	6063      	str	r3, [r4, #4]
 800cda8:	6923      	ldr	r3, [r4, #16]
 800cdaa:	6023      	str	r3, [r4, #0]
 800cdac:	89a3      	ldrh	r3, [r4, #12]
 800cdae:	f043 0308 	orr.w	r3, r3, #8
 800cdb2:	81a3      	strh	r3, [r4, #12]
 800cdb4:	6923      	ldr	r3, [r4, #16]
 800cdb6:	b94b      	cbnz	r3, 800cdcc <__swsetup_r+0x7c>
 800cdb8:	89a3      	ldrh	r3, [r4, #12]
 800cdba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cdbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdc2:	d003      	beq.n	800cdcc <__swsetup_r+0x7c>
 800cdc4:	4621      	mov	r1, r4
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	f000 f850 	bl	800ce6c <__smakebuf_r>
 800cdcc:	89a0      	ldrh	r0, [r4, #12]
 800cdce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdd2:	f010 0301 	ands.w	r3, r0, #1
 800cdd6:	d00a      	beq.n	800cdee <__swsetup_r+0x9e>
 800cdd8:	2300      	movs	r3, #0
 800cdda:	60a3      	str	r3, [r4, #8]
 800cddc:	6963      	ldr	r3, [r4, #20]
 800cdde:	425b      	negs	r3, r3
 800cde0:	61a3      	str	r3, [r4, #24]
 800cde2:	6923      	ldr	r3, [r4, #16]
 800cde4:	b943      	cbnz	r3, 800cdf8 <__swsetup_r+0xa8>
 800cde6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cdea:	d1c4      	bne.n	800cd76 <__swsetup_r+0x26>
 800cdec:	bd38      	pop	{r3, r4, r5, pc}
 800cdee:	0781      	lsls	r1, r0, #30
 800cdf0:	bf58      	it	pl
 800cdf2:	6963      	ldrpl	r3, [r4, #20]
 800cdf4:	60a3      	str	r3, [r4, #8]
 800cdf6:	e7f4      	b.n	800cde2 <__swsetup_r+0x92>
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	e7f7      	b.n	800cdec <__swsetup_r+0x9c>
 800cdfc:	200000bc 	.word	0x200000bc

0800ce00 <_sbrk_r>:
 800ce00:	b538      	push	{r3, r4, r5, lr}
 800ce02:	4d06      	ldr	r5, [pc, #24]	; (800ce1c <_sbrk_r+0x1c>)
 800ce04:	2300      	movs	r3, #0
 800ce06:	4604      	mov	r4, r0
 800ce08:	4608      	mov	r0, r1
 800ce0a:	602b      	str	r3, [r5, #0]
 800ce0c:	f7f5 fc34 	bl	8002678 <_sbrk>
 800ce10:	1c43      	adds	r3, r0, #1
 800ce12:	d102      	bne.n	800ce1a <_sbrk_r+0x1a>
 800ce14:	682b      	ldr	r3, [r5, #0]
 800ce16:	b103      	cbz	r3, 800ce1a <_sbrk_r+0x1a>
 800ce18:	6023      	str	r3, [r4, #0]
 800ce1a:	bd38      	pop	{r3, r4, r5, pc}
 800ce1c:	2000530c 	.word	0x2000530c

0800ce20 <__swhatbuf_r>:
 800ce20:	b570      	push	{r4, r5, r6, lr}
 800ce22:	460c      	mov	r4, r1
 800ce24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce28:	2900      	cmp	r1, #0
 800ce2a:	b096      	sub	sp, #88	; 0x58
 800ce2c:	4615      	mov	r5, r2
 800ce2e:	461e      	mov	r6, r3
 800ce30:	da0d      	bge.n	800ce4e <__swhatbuf_r+0x2e>
 800ce32:	89a3      	ldrh	r3, [r4, #12]
 800ce34:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ce38:	f04f 0100 	mov.w	r1, #0
 800ce3c:	bf0c      	ite	eq
 800ce3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ce42:	2340      	movne	r3, #64	; 0x40
 800ce44:	2000      	movs	r0, #0
 800ce46:	6031      	str	r1, [r6, #0]
 800ce48:	602b      	str	r3, [r5, #0]
 800ce4a:	b016      	add	sp, #88	; 0x58
 800ce4c:	bd70      	pop	{r4, r5, r6, pc}
 800ce4e:	466a      	mov	r2, sp
 800ce50:	f000 f848 	bl	800cee4 <_fstat_r>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	dbec      	blt.n	800ce32 <__swhatbuf_r+0x12>
 800ce58:	9901      	ldr	r1, [sp, #4]
 800ce5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ce5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ce62:	4259      	negs	r1, r3
 800ce64:	4159      	adcs	r1, r3
 800ce66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce6a:	e7eb      	b.n	800ce44 <__swhatbuf_r+0x24>

0800ce6c <__smakebuf_r>:
 800ce6c:	898b      	ldrh	r3, [r1, #12]
 800ce6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce70:	079d      	lsls	r5, r3, #30
 800ce72:	4606      	mov	r6, r0
 800ce74:	460c      	mov	r4, r1
 800ce76:	d507      	bpl.n	800ce88 <__smakebuf_r+0x1c>
 800ce78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce7c:	6023      	str	r3, [r4, #0]
 800ce7e:	6123      	str	r3, [r4, #16]
 800ce80:	2301      	movs	r3, #1
 800ce82:	6163      	str	r3, [r4, #20]
 800ce84:	b002      	add	sp, #8
 800ce86:	bd70      	pop	{r4, r5, r6, pc}
 800ce88:	ab01      	add	r3, sp, #4
 800ce8a:	466a      	mov	r2, sp
 800ce8c:	f7ff ffc8 	bl	800ce20 <__swhatbuf_r>
 800ce90:	9900      	ldr	r1, [sp, #0]
 800ce92:	4605      	mov	r5, r0
 800ce94:	4630      	mov	r0, r6
 800ce96:	f7ff fb0f 	bl	800c4b8 <_malloc_r>
 800ce9a:	b948      	cbnz	r0, 800ceb0 <__smakebuf_r+0x44>
 800ce9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cea0:	059a      	lsls	r2, r3, #22
 800cea2:	d4ef      	bmi.n	800ce84 <__smakebuf_r+0x18>
 800cea4:	f023 0303 	bic.w	r3, r3, #3
 800cea8:	f043 0302 	orr.w	r3, r3, #2
 800ceac:	81a3      	strh	r3, [r4, #12]
 800ceae:	e7e3      	b.n	800ce78 <__smakebuf_r+0xc>
 800ceb0:	89a3      	ldrh	r3, [r4, #12]
 800ceb2:	6020      	str	r0, [r4, #0]
 800ceb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceb8:	81a3      	strh	r3, [r4, #12]
 800ceba:	9b00      	ldr	r3, [sp, #0]
 800cebc:	6163      	str	r3, [r4, #20]
 800cebe:	9b01      	ldr	r3, [sp, #4]
 800cec0:	6120      	str	r0, [r4, #16]
 800cec2:	b15b      	cbz	r3, 800cedc <__smakebuf_r+0x70>
 800cec4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cec8:	4630      	mov	r0, r6
 800ceca:	f000 f81d 	bl	800cf08 <_isatty_r>
 800cece:	b128      	cbz	r0, 800cedc <__smakebuf_r+0x70>
 800ced0:	89a3      	ldrh	r3, [r4, #12]
 800ced2:	f023 0303 	bic.w	r3, r3, #3
 800ced6:	f043 0301 	orr.w	r3, r3, #1
 800ceda:	81a3      	strh	r3, [r4, #12]
 800cedc:	89a3      	ldrh	r3, [r4, #12]
 800cede:	431d      	orrs	r5, r3
 800cee0:	81a5      	strh	r5, [r4, #12]
 800cee2:	e7cf      	b.n	800ce84 <__smakebuf_r+0x18>

0800cee4 <_fstat_r>:
 800cee4:	b538      	push	{r3, r4, r5, lr}
 800cee6:	4d07      	ldr	r5, [pc, #28]	; (800cf04 <_fstat_r+0x20>)
 800cee8:	2300      	movs	r3, #0
 800ceea:	4604      	mov	r4, r0
 800ceec:	4608      	mov	r0, r1
 800ceee:	4611      	mov	r1, r2
 800cef0:	602b      	str	r3, [r5, #0]
 800cef2:	f7f5 fb98 	bl	8002626 <_fstat>
 800cef6:	1c43      	adds	r3, r0, #1
 800cef8:	d102      	bne.n	800cf00 <_fstat_r+0x1c>
 800cefa:	682b      	ldr	r3, [r5, #0]
 800cefc:	b103      	cbz	r3, 800cf00 <_fstat_r+0x1c>
 800cefe:	6023      	str	r3, [r4, #0]
 800cf00:	bd38      	pop	{r3, r4, r5, pc}
 800cf02:	bf00      	nop
 800cf04:	2000530c 	.word	0x2000530c

0800cf08 <_isatty_r>:
 800cf08:	b538      	push	{r3, r4, r5, lr}
 800cf0a:	4d06      	ldr	r5, [pc, #24]	; (800cf24 <_isatty_r+0x1c>)
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	4604      	mov	r4, r0
 800cf10:	4608      	mov	r0, r1
 800cf12:	602b      	str	r3, [r5, #0]
 800cf14:	f7f5 fb97 	bl	8002646 <_isatty>
 800cf18:	1c43      	adds	r3, r0, #1
 800cf1a:	d102      	bne.n	800cf22 <_isatty_r+0x1a>
 800cf1c:	682b      	ldr	r3, [r5, #0]
 800cf1e:	b103      	cbz	r3, 800cf22 <_isatty_r+0x1a>
 800cf20:	6023      	str	r3, [r4, #0]
 800cf22:	bd38      	pop	{r3, r4, r5, pc}
 800cf24:	2000530c 	.word	0x2000530c

0800cf28 <_init>:
 800cf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf2a:	bf00      	nop
 800cf2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf2e:	bc08      	pop	{r3}
 800cf30:	469e      	mov	lr, r3
 800cf32:	4770      	bx	lr

0800cf34 <_fini>:
 800cf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf36:	bf00      	nop
 800cf38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf3a:	bc08      	pop	{r3}
 800cf3c:	469e      	mov	lr, r3
 800cf3e:	4770      	bx	lr
