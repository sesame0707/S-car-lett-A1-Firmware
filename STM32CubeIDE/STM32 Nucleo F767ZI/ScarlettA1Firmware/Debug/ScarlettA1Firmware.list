
ScarlettA1Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099c8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017d4  08009bc8  08009bc8  00019bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b39c  0800b39c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b39c  0800b39c  0001b39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3a4  0800b3a4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3a4  0800b3a4  0001b3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3a8  0800b3a8  0001b3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800b3ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051d4  2000008c  0800b438  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005260  0800b438  00025260  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025644  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005262  00000000  00000000  00045741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d58  00000000  00000000  0004a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016bb  00000000  00000000  0004c700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c979  00000000  00000000  0004ddbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026da0  00000000  00000000  0007a734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b963  00000000  00000000  000a14d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007cc8  00000000  00000000  001ace38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001b4b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000008c 	.word	0x2000008c
 800021c:	00000000 	.word	0x00000000
 8000220:	08009bb0 	.word	0x08009bb0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000090 	.word	0x20000090
 800023c:	08009bb0 	.word	0x08009bb0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b970 	b.w	8000548 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9e08      	ldr	r6, [sp, #32]
 8000286:	460d      	mov	r5, r1
 8000288:	4604      	mov	r4, r0
 800028a:	460f      	mov	r7, r1
 800028c:	2b00      	cmp	r3, #0
 800028e:	d14a      	bne.n	8000326 <__udivmoddi4+0xa6>
 8000290:	428a      	cmp	r2, r1
 8000292:	4694      	mov	ip, r2
 8000294:	d965      	bls.n	8000362 <__udivmoddi4+0xe2>
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	b143      	cbz	r3, 80002ae <__udivmoddi4+0x2e>
 800029c:	fa02 fc03 	lsl.w	ip, r2, r3
 80002a0:	f1c3 0220 	rsb	r2, r3, #32
 80002a4:	409f      	lsls	r7, r3
 80002a6:	fa20 f202 	lsr.w	r2, r0, r2
 80002aa:	4317      	orrs	r7, r2
 80002ac:	409c      	lsls	r4, r3
 80002ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002b2:	fa1f f58c 	uxth.w	r5, ip
 80002b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ba:	0c22      	lsrs	r2, r4, #16
 80002bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002c4:	fb01 f005 	mul.w	r0, r1, r5
 80002c8:	4290      	cmp	r0, r2
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x62>
 80002cc:	eb1c 0202 	adds.w	r2, ip, r2
 80002d0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002d4:	f080 811c 	bcs.w	8000510 <__udivmoddi4+0x290>
 80002d8:	4290      	cmp	r0, r2
 80002da:	f240 8119 	bls.w	8000510 <__udivmoddi4+0x290>
 80002de:	3902      	subs	r1, #2
 80002e0:	4462      	add	r2, ip
 80002e2:	1a12      	subs	r2, r2, r0
 80002e4:	b2a4      	uxth	r4, r4
 80002e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f2:	fb00 f505 	mul.w	r5, r0, r5
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	d90a      	bls.n	8000310 <__udivmoddi4+0x90>
 80002fa:	eb1c 0404 	adds.w	r4, ip, r4
 80002fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000302:	f080 8107 	bcs.w	8000514 <__udivmoddi4+0x294>
 8000306:	42a5      	cmp	r5, r4
 8000308:	f240 8104 	bls.w	8000514 <__udivmoddi4+0x294>
 800030c:	4464      	add	r4, ip
 800030e:	3802      	subs	r0, #2
 8000310:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000314:	1b64      	subs	r4, r4, r5
 8000316:	2100      	movs	r1, #0
 8000318:	b11e      	cbz	r6, 8000322 <__udivmoddi4+0xa2>
 800031a:	40dc      	lsrs	r4, r3
 800031c:	2300      	movs	r3, #0
 800031e:	e9c6 4300 	strd	r4, r3, [r6]
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	428b      	cmp	r3, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0xbc>
 800032a:	2e00      	cmp	r6, #0
 800032c:	f000 80ed 	beq.w	800050a <__udivmoddi4+0x28a>
 8000330:	2100      	movs	r1, #0
 8000332:	e9c6 0500 	strd	r0, r5, [r6]
 8000336:	4608      	mov	r0, r1
 8000338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033c:	fab3 f183 	clz	r1, r3
 8000340:	2900      	cmp	r1, #0
 8000342:	d149      	bne.n	80003d8 <__udivmoddi4+0x158>
 8000344:	42ab      	cmp	r3, r5
 8000346:	d302      	bcc.n	800034e <__udivmoddi4+0xce>
 8000348:	4282      	cmp	r2, r0
 800034a:	f200 80f8 	bhi.w	800053e <__udivmoddi4+0x2be>
 800034e:	1a84      	subs	r4, r0, r2
 8000350:	eb65 0203 	sbc.w	r2, r5, r3
 8000354:	2001      	movs	r0, #1
 8000356:	4617      	mov	r7, r2
 8000358:	2e00      	cmp	r6, #0
 800035a:	d0e2      	beq.n	8000322 <__udivmoddi4+0xa2>
 800035c:	e9c6 4700 	strd	r4, r7, [r6]
 8000360:	e7df      	b.n	8000322 <__udivmoddi4+0xa2>
 8000362:	b902      	cbnz	r2, 8000366 <__udivmoddi4+0xe6>
 8000364:	deff      	udf	#255	; 0xff
 8000366:	fab2 f382 	clz	r3, r2
 800036a:	2b00      	cmp	r3, #0
 800036c:	f040 8090 	bne.w	8000490 <__udivmoddi4+0x210>
 8000370:	1a8a      	subs	r2, r1, r2
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2101      	movs	r1, #1
 800037c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000380:	fb07 2015 	mls	r0, r7, r5, r2
 8000384:	0c22      	lsrs	r2, r4, #16
 8000386:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800038a:	fb0e f005 	mul.w	r0, lr, r5
 800038e:	4290      	cmp	r0, r2
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x124>
 8000392:	eb1c 0202 	adds.w	r2, ip, r2
 8000396:	f105 38ff 	add.w	r8, r5, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x122>
 800039c:	4290      	cmp	r0, r2
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2b8>
 80003a2:	4645      	mov	r5, r8
 80003a4:	1a12      	subs	r2, r2, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ac:	fb07 2210 	mls	r2, r7, r0, r2
 80003b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x14e>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x14c>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2c2>
 80003cc:	4610      	mov	r0, r2
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003d6:	e79f      	b.n	8000318 <__udivmoddi4+0x98>
 80003d8:	f1c1 0720 	rsb	r7, r1, #32
 80003dc:	408b      	lsls	r3, r1
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ea:	fa20 f307 	lsr.w	r3, r0, r7
 80003ee:	40fd      	lsrs	r5, r7
 80003f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f4:	4323      	orrs	r3, r4
 80003f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003fa:	fa1f fe8c 	uxth.w	lr, ip
 80003fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000402:	0c1c      	lsrs	r4, r3, #16
 8000404:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000408:	fb08 f50e 	mul.w	r5, r8, lr
 800040c:	42a5      	cmp	r5, r4
 800040e:	fa02 f201 	lsl.w	r2, r2, r1
 8000412:	fa00 f001 	lsl.w	r0, r0, r1
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b0>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2b4>
 8000424:	42a5      	cmp	r5, r4
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2b4>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4464      	add	r4, ip
 8000430:	1b64      	subs	r4, r4, r5
 8000432:	b29d      	uxth	r5, r3
 8000434:	fbb4 f3f9 	udiv	r3, r4, r9
 8000438:	fb09 4413 	mls	r4, r9, r3, r4
 800043c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000440:	fb03 fe0e 	mul.w	lr, r3, lr
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1da>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2ac>
 8000452:	45a6      	cmp	lr, r4
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2ac>
 8000456:	3b02      	subs	r3, #2
 8000458:	4464      	add	r4, ip
 800045a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800045e:	fba3 9502 	umull	r9, r5, r3, r2
 8000462:	eba4 040e 	sub.w	r4, r4, lr
 8000466:	42ac      	cmp	r4, r5
 8000468:	46c8      	mov	r8, r9
 800046a:	46ae      	mov	lr, r5
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x29c>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x298>
 8000470:	b156      	cbz	r6, 8000488 <__udivmoddi4+0x208>
 8000472:	ebb0 0208 	subs.w	r2, r0, r8
 8000476:	eb64 040e 	sbc.w	r4, r4, lr
 800047a:	fa04 f707 	lsl.w	r7, r4, r7
 800047e:	40ca      	lsrs	r2, r1
 8000480:	40cc      	lsrs	r4, r1
 8000482:	4317      	orrs	r7, r2
 8000484:	e9c6 7400 	strd	r7, r4, [r6]
 8000488:	4618      	mov	r0, r3
 800048a:	2100      	movs	r1, #0
 800048c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000490:	f1c3 0120 	rsb	r1, r3, #32
 8000494:	fa02 fc03 	lsl.w	ip, r2, r3
 8000498:	fa20 f201 	lsr.w	r2, r0, r1
 800049c:	fa25 f101 	lsr.w	r1, r5, r1
 80004a0:	409d      	lsls	r5, r3
 80004a2:	432a      	orrs	r2, r5
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b0:	fb07 1510 	mls	r5, r7, r0, r1
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ba:	fb00 f50e 	mul.w	r5, r0, lr
 80004be:	428d      	cmp	r5, r1
 80004c0:	fa04 f403 	lsl.w	r4, r4, r3
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x258>
 80004c6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b0>
 80004d0:	428d      	cmp	r5, r1
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b0>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1b49      	subs	r1, r1, r5
 80004da:	b292      	uxth	r2, r2
 80004dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004e0:	fb07 1115 	mls	r1, r7, r5, r1
 80004e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ec:	4291      	cmp	r1, r2
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x282>
 80004f0:	eb1c 0202 	adds.w	r2, ip, r2
 80004f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2a8>
 80004fa:	4291      	cmp	r1, r2
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2a8>
 80004fe:	3d02      	subs	r5, #2
 8000500:	4462      	add	r2, ip
 8000502:	1a52      	subs	r2, r2, r1
 8000504:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0xfc>
 800050a:	4631      	mov	r1, r6
 800050c:	4630      	mov	r0, r6
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xa2>
 8000510:	4639      	mov	r1, r7
 8000512:	e6e6      	b.n	80002e2 <__udivmoddi4+0x62>
 8000514:	4610      	mov	r0, r2
 8000516:	e6fb      	b.n	8000310 <__udivmoddi4+0x90>
 8000518:	4548      	cmp	r0, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f0>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000524:	3b01      	subs	r3, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f0>
 8000528:	4645      	mov	r5, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x282>
 800052c:	462b      	mov	r3, r5
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1da>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x258>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b0>
 8000538:	3d02      	subs	r5, #2
 800053a:	4462      	add	r2, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x124>
 800053e:	4608      	mov	r0, r1
 8000540:	e70a      	b.n	8000358 <__udivmoddi4+0xd8>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x14e>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000552:	463b      	mov	r3, r7
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_DAC_Init+0x4c>)
 800055c:	4a0f      	ldr	r2, [pc, #60]	; (800059c <MX_DAC_Init+0x50>)
 800055e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000560:	480d      	ldr	r0, [pc, #52]	; (8000598 <MX_DAC_Init+0x4c>)
 8000562:	f001 fc11 	bl	8001d88 <HAL_DAC_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800056c:	f000 fd6c 	bl	8001048 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000570:	2300      	movs	r3, #0
 8000572:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000578:	463b      	mov	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	4619      	mov	r1, r3
 800057e:	4806      	ldr	r0, [pc, #24]	; (8000598 <MX_DAC_Init+0x4c>)
 8000580:	f001 fc88 	bl	8001e94 <HAL_DAC_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800058a:	f000 fd5d 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000a8 	.word	0x200000a8
 800059c:	40007400 	.word	0x40007400

080005a0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a19      	ldr	r2, [pc, #100]	; (8000624 <HAL_DAC_MspInit+0x84>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d12b      	bne.n	800061a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80005c2:	4b19      	ldr	r3, [pc, #100]	; (8000628 <HAL_DAC_MspInit+0x88>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	4a18      	ldr	r2, [pc, #96]	; (8000628 <HAL_DAC_MspInit+0x88>)
 80005c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80005cc:	6413      	str	r3, [r2, #64]	; 0x40
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <HAL_DAC_MspInit+0x88>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <HAL_DAC_MspInit+0x88>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a12      	ldr	r2, [pc, #72]	; (8000628 <HAL_DAC_MspInit+0x88>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <HAL_DAC_MspInit+0x88>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = BLDCMotorStep_Pin;
 80005f2:	2310      	movs	r3, #16
 80005f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f6:	2303      	movs	r3, #3
 80005f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLDCMotorStep_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	4809      	ldr	r0, [pc, #36]	; (800062c <HAL_DAC_MspInit+0x8c>)
 8000606:	f002 f81b 	bl	8002640 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2105      	movs	r1, #5
 800060e:	2036      	movs	r0, #54	; 0x36
 8000610:	f001 fb90 	bl	8001d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000614:	2036      	movs	r0, #54	; 0x36
 8000616:	f001 fba9 	bl	8001d6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	; 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40007400 	.word	0x40007400
 8000628:	40023800 	.word	0x40023800
 800062c:	40020000 	.word	0x40020000

08000630 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_DMA_Init+0x38>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <MX_DMA_Init+0x38>)
 800063c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_DMA_Init+0x38>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2105      	movs	r1, #5
 8000652:	203b      	movs	r0, #59	; 0x3b
 8000654:	f001 fb6e 	bl	8001d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000658:	203b      	movs	r0, #59	; 0x3b
 800065a:	f001 fb87 	bl	8001d6c <HAL_NVIC_EnableIRQ>

}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8000670:	4a38      	ldr	r2, [pc, #224]	; (8000754 <MX_FREERTOS_Init+0xe8>)
 8000672:	2100      	movs	r1, #0
 8000674:	4838      	ldr	r0, [pc, #224]	; (8000758 <MX_FREERTOS_Init+0xec>)
 8000676:	f006 faa3 	bl	8006bc0 <osThreadNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a37      	ldr	r2, [pc, #220]	; (800075c <MX_FREERTOS_Init+0xf0>)
 800067e:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartDispatcherTask, NULL, &DispatcherTask_attributes);
 8000680:	4a37      	ldr	r2, [pc, #220]	; (8000760 <MX_FREERTOS_Init+0xf4>)
 8000682:	2100      	movs	r1, #0
 8000684:	4837      	ldr	r0, [pc, #220]	; (8000764 <MX_FREERTOS_Init+0xf8>)
 8000686:	f006 fa9b 	bl	8006bc0 <osThreadNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a36      	ldr	r2, [pc, #216]	; (8000768 <MX_FREERTOS_Init+0xfc>)
 800068e:	6013      	str	r3, [r2, #0]

  /* creation of StopTask */
  StopTaskHandle = osThreadNew(StartStopTask, NULL, &StopTask_attributes);
 8000690:	4a36      	ldr	r2, [pc, #216]	; (800076c <MX_FREERTOS_Init+0x100>)
 8000692:	2100      	movs	r1, #0
 8000694:	4836      	ldr	r0, [pc, #216]	; (8000770 <MX_FREERTOS_Init+0x104>)
 8000696:	f006 fa93 	bl	8006bc0 <osThreadNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a35      	ldr	r2, [pc, #212]	; (8000774 <MX_FREERTOS_Init+0x108>)
 800069e:	6013      	str	r3, [r2, #0]

  /* creation of DrivingLightsTa */
  DrivingLightsTaHandle = osThreadNew(StartDrivingLightsTask, NULL, &DrivingLightsTa_attributes);
 80006a0:	4a35      	ldr	r2, [pc, #212]	; (8000778 <MX_FREERTOS_Init+0x10c>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4835      	ldr	r0, [pc, #212]	; (800077c <MX_FREERTOS_Init+0x110>)
 80006a6:	f006 fa8b 	bl	8006bc0 <osThreadNew>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a34      	ldr	r2, [pc, #208]	; (8000780 <MX_FREERTOS_Init+0x114>)
 80006ae:	6013      	str	r3, [r2, #0]

  /* creation of LEDStripeTask */
  LEDStripeTaskHandle = osThreadNew(StartLEDStripeTask, NULL, &LEDStripeTask_attributes);
 80006b0:	4a34      	ldr	r2, [pc, #208]	; (8000784 <MX_FREERTOS_Init+0x118>)
 80006b2:	2100      	movs	r1, #0
 80006b4:	4834      	ldr	r0, [pc, #208]	; (8000788 <MX_FREERTOS_Init+0x11c>)
 80006b6:	f006 fa83 	bl	8006bc0 <osThreadNew>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a33      	ldr	r2, [pc, #204]	; (800078c <MX_FREERTOS_Init+0x120>)
 80006be:	6013      	str	r3, [r2, #0]

  /* creation of LeftBlinkersTas */
  LeftBlinkersTasHandle = osThreadNew(StartLeftBlinkersTask, NULL, &LeftBlinkersTas_attributes);
 80006c0:	4a33      	ldr	r2, [pc, #204]	; (8000790 <MX_FREERTOS_Init+0x124>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	4833      	ldr	r0, [pc, #204]	; (8000794 <MX_FREERTOS_Init+0x128>)
 80006c6:	f006 fa7b 	bl	8006bc0 <osThreadNew>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a32      	ldr	r2, [pc, #200]	; (8000798 <MX_FREERTOS_Init+0x12c>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* creation of RightBlinkersTa */
  RightBlinkersTaHandle = osThreadNew(StartRightBlinkersTask, NULL, &RightBlinkersTa_attributes);
 80006d0:	4a32      	ldr	r2, [pc, #200]	; (800079c <MX_FREERTOS_Init+0x130>)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4832      	ldr	r0, [pc, #200]	; (80007a0 <MX_FREERTOS_Init+0x134>)
 80006d6:	f006 fa73 	bl	8006bc0 <osThreadNew>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a31      	ldr	r2, [pc, #196]	; (80007a4 <MX_FREERTOS_Init+0x138>)
 80006de:	6013      	str	r3, [r2, #0]

  /* creation of ParkLeftTask */
  ParkLeftTaskHandle = osThreadNew(StartParkLeftTask, NULL, &ParkLeftTask_attributes);
 80006e0:	4a31      	ldr	r2, [pc, #196]	; (80007a8 <MX_FREERTOS_Init+0x13c>)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4831      	ldr	r0, [pc, #196]	; (80007ac <MX_FREERTOS_Init+0x140>)
 80006e6:	f006 fa6b 	bl	8006bc0 <osThreadNew>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a30      	ldr	r2, [pc, #192]	; (80007b0 <MX_FREERTOS_Init+0x144>)
 80006ee:	6013      	str	r3, [r2, #0]

  /* creation of ParkRightTask */
  ParkRightTaskHandle = osThreadNew(StartParkRightTask, NULL, &ParkRightTask_attributes);
 80006f0:	4a30      	ldr	r2, [pc, #192]	; (80007b4 <MX_FREERTOS_Init+0x148>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	4830      	ldr	r0, [pc, #192]	; (80007b8 <MX_FREERTOS_Init+0x14c>)
 80006f6:	f006 fa63 	bl	8006bc0 <osThreadNew>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a2f      	ldr	r2, [pc, #188]	; (80007bc <MX_FREERTOS_Init+0x150>)
 80006fe:	6013      	str	r3, [r2, #0]

  /* creation of AccelerateTask */
  AccelerateTaskHandle = osThreadNew(StartAccelerateTask, NULL, &AccelerateTask_attributes);
 8000700:	4a2f      	ldr	r2, [pc, #188]	; (80007c0 <MX_FREERTOS_Init+0x154>)
 8000702:	2100      	movs	r1, #0
 8000704:	482f      	ldr	r0, [pc, #188]	; (80007c4 <MX_FREERTOS_Init+0x158>)
 8000706:	f006 fa5b 	bl	8006bc0 <osThreadNew>
 800070a:	4603      	mov	r3, r0
 800070c:	4a2e      	ldr	r2, [pc, #184]	; (80007c8 <MX_FREERTOS_Init+0x15c>)
 800070e:	6013      	str	r3, [r2, #0]

  /* creation of DecelerateTask */
  DecelerateTaskHandle = osThreadNew(StartDecelerateTask, NULL, &DecelerateTask_attributes);
 8000710:	4a2e      	ldr	r2, [pc, #184]	; (80007cc <MX_FREERTOS_Init+0x160>)
 8000712:	2100      	movs	r1, #0
 8000714:	482e      	ldr	r0, [pc, #184]	; (80007d0 <MX_FREERTOS_Init+0x164>)
 8000716:	f006 fa53 	bl	8006bc0 <osThreadNew>
 800071a:	4603      	mov	r3, r0
 800071c:	4a2d      	ldr	r2, [pc, #180]	; (80007d4 <MX_FREERTOS_Init+0x168>)
 800071e:	6013      	str	r3, [r2, #0]

  /* creation of TurnLeftTask */
  TurnLeftTaskHandle = osThreadNew(StartTurnLeftTask, NULL, &TurnLeftTask_attributes);
 8000720:	4a2d      	ldr	r2, [pc, #180]	; (80007d8 <MX_FREERTOS_Init+0x16c>)
 8000722:	2100      	movs	r1, #0
 8000724:	482d      	ldr	r0, [pc, #180]	; (80007dc <MX_FREERTOS_Init+0x170>)
 8000726:	f006 fa4b 	bl	8006bc0 <osThreadNew>
 800072a:	4603      	mov	r3, r0
 800072c:	4a2c      	ldr	r2, [pc, #176]	; (80007e0 <MX_FREERTOS_Init+0x174>)
 800072e:	6013      	str	r3, [r2, #0]

  /* creation of TurnRightTask */
  TurnRightTaskHandle = osThreadNew(StartTurnRightTask, NULL, &TurnRightTask_attributes);
 8000730:	4a2c      	ldr	r2, [pc, #176]	; (80007e4 <MX_FREERTOS_Init+0x178>)
 8000732:	2100      	movs	r1, #0
 8000734:	482c      	ldr	r0, [pc, #176]	; (80007e8 <MX_FREERTOS_Init+0x17c>)
 8000736:	f006 fa43 	bl	8006bc0 <osThreadNew>
 800073a:	4603      	mov	r3, r0
 800073c:	4a2b      	ldr	r2, [pc, #172]	; (80007ec <MX_FREERTOS_Init+0x180>)
 800073e:	6013      	str	r3, [r2, #0]

  /* creation of ConnectionTask */
  ConnectionTaskHandle = osThreadNew(StartConnectionTask, NULL, &ConnectionTask_attributes);
 8000740:	4a2b      	ldr	r2, [pc, #172]	; (80007f0 <MX_FREERTOS_Init+0x184>)
 8000742:	2100      	movs	r1, #0
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_FREERTOS_Init+0x188>)
 8000746:	f006 fa3b 	bl	8006bc0 <osThreadNew>
 800074a:	4603      	mov	r3, r0
 800074c:	4a2a      	ldr	r2, [pc, #168]	; (80007f8 <MX_FREERTOS_Init+0x18c>)
 800074e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	08009cbc 	.word	0x08009cbc
 8000758:	080007fd 	.word	0x080007fd
 800075c:	200000c4 	.word	0x200000c4
 8000760:	08009ce0 	.word	0x08009ce0
 8000764:	08000885 	.word	0x08000885
 8000768:	200000c8 	.word	0x200000c8
 800076c:	08009d04 	.word	0x08009d04
 8000770:	080009b5 	.word	0x080009b5
 8000774:	200000cc 	.word	0x200000cc
 8000778:	08009d28 	.word	0x08009d28
 800077c:	080009c5 	.word	0x080009c5
 8000780:	200000d0 	.word	0x200000d0
 8000784:	08009d4c 	.word	0x08009d4c
 8000788:	080009e5 	.word	0x080009e5
 800078c:	200000d4 	.word	0x200000d4
 8000790:	08009d70 	.word	0x08009d70
 8000794:	080009f5 	.word	0x080009f5
 8000798:	200000d8 	.word	0x200000d8
 800079c:	08009d94 	.word	0x08009d94
 80007a0:	08000a2d 	.word	0x08000a2d
 80007a4:	200000dc 	.word	0x200000dc
 80007a8:	08009db8 	.word	0x08009db8
 80007ac:	08000a65 	.word	0x08000a65
 80007b0:	200000e0 	.word	0x200000e0
 80007b4:	08009ddc 	.word	0x08009ddc
 80007b8:	08000a75 	.word	0x08000a75
 80007bc:	200000e4 	.word	0x200000e4
 80007c0:	08009e00 	.word	0x08009e00
 80007c4:	08000a85 	.word	0x08000a85
 80007c8:	200000e8 	.word	0x200000e8
 80007cc:	08009e24 	.word	0x08009e24
 80007d0:	08000a95 	.word	0x08000a95
 80007d4:	200000ec 	.word	0x200000ec
 80007d8:	08009e48 	.word	0x08009e48
 80007dc:	08000ac5 	.word	0x08000ac5
 80007e0:	200000f0 	.word	0x200000f0
 80007e4:	08009e6c 	.word	0x08009e6c
 80007e8:	08000ad5 	.word	0x08000ad5
 80007ec:	200000f4 	.word	0x200000f4
 80007f0:	08009e90 	.word	0x08009e90
 80007f4:	08000ae5 	.word	0x08000ae5
 80007f8:	200000f8 	.word	0x200000f8

080007fc <StartOLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
	// Prepare bodyVersion string
	strcat(bodyVersion, versionName);
 8000804:	481a      	ldr	r0, [pc, #104]	; (8000870 <StartOLEDTask+0x74>)
 8000806:	f7ff fd1b 	bl	8000240 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <StartOLEDTask+0x74>)
 8000810:	4413      	add	r3, r2
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <StartOLEDTask+0x78>)
 8000814:	6810      	ldr	r0, [r2, #0]
 8000816:	6018      	str	r0, [r3, #0]

	// Initiate display
	ssd1306_Init();
 8000818:	f000 fd28 	bl	800126c <ssd1306_Init>
	uint8_t y = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	73fb      	strb	r3, [r7, #15]
	ssd1306_Fill(Black);
 8000820:	2000      	movs	r0, #0
 8000822:	f000 fd8d 	bl	8001340 <ssd1306_Fill>

  /* Infinite loop */
  for(;;)
  {
	  // Set header
	  ssd1306_SetCursor(2, y);
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	4619      	mov	r1, r3
 800082a:	2002      	movs	r0, #2
 800082c:	f000 feca 	bl	80015c4 <ssd1306_SetCursor>
	  ssd1306_WriteString(headerBootingUp, Font_7x10, White);
 8000830:	4a11      	ldr	r2, [pc, #68]	; (8000878 <StartOLEDTask+0x7c>)
 8000832:	2301      	movs	r3, #1
 8000834:	ca06      	ldmia	r2, {r1, r2}
 8000836:	4811      	ldr	r0, [pc, #68]	; (800087c <StartOLEDTask+0x80>)
 8000838:	f000 fe9e 	bl	8001578 <ssd1306_WriteString>
	  y += 30;
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	331e      	adds	r3, #30
 8000840:	73fb      	strb	r3, [r7, #15]

	  // Set body
	  ssd1306_SetCursor(2, y);
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	4619      	mov	r1, r3
 8000846:	2002      	movs	r0, #2
 8000848:	f000 febc 	bl	80015c4 <ssd1306_SetCursor>
	  ssd1306_WriteString(bodyVersion, Font_11x18, White);
 800084c:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <StartOLEDTask+0x84>)
 800084e:	2301      	movs	r3, #1
 8000850:	ca06      	ldmia	r2, {r1, r2}
 8000852:	4807      	ldr	r0, [pc, #28]	; (8000870 <StartOLEDTask+0x74>)
 8000854:	f000 fe90 	bl	8001578 <ssd1306_WriteString>
	  y += 36;
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	3324      	adds	r3, #36	; 0x24
 800085c:	73fb      	strb	r3, [r7, #15]

	  ssd1306_UpdateScreen();
 800085e:	f000 fd87 	bl	8001370 <ssd1306_UpdateScreen>
	  y = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	73fb      	strb	r3, [r7, #15]

	  vTaskSuspend(NULL);
 8000866:	2000      	movs	r0, #0
 8000868:	f007 fa66 	bl	8007d38 <vTaskSuspend>
	  ssd1306_SetCursor(2, y);
 800086c:	e7db      	b.n	8000826 <StartOLEDTask+0x2a>
 800086e:	bf00      	nop
 8000870:	20000010 	.word	0x20000010
 8000874:	08009cb8 	.word	0x08009cb8
 8000878:	2000001c 	.word	0x2000001c
 800087c:	20000000 	.word	0x20000000
 8000880:	20000024 	.word	0x20000024

08000884 <StartDispatcherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDispatcherTask */
void StartDispatcherTask(void *argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDispatcherTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 800088c:	2000      	movs	r0, #0
 800088e:	f007 fa53 	bl	8007d38 <vTaskSuspend>

	  switch(RxBuffer[0]) {
 8000892:	4b3c      	ldr	r3, [pc, #240]	; (8000984 <StartDispatcherTask+0x100>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	3b01      	subs	r3, #1
 8000898:	2b13      	cmp	r3, #19
 800089a:	d86d      	bhi.n	8000978 <StartDispatcherTask+0xf4>
 800089c:	a201      	add	r2, pc, #4	; (adr r2, 80008a4 <StartDispatcherTask+0x20>)
 800089e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a2:	bf00      	nop
 80008a4:	080008f5 	.word	0x080008f5
 80008a8:	08000901 	.word	0x08000901
 80008ac:	0800090d 	.word	0x0800090d
 80008b0:	08000919 	.word	0x08000919
 80008b4:	08000925 	.word	0x08000925
 80008b8:	08000931 	.word	0x08000931
 80008bc:	0800093d 	.word	0x0800093d
 80008c0:	08000979 	.word	0x08000979
 80008c4:	08000979 	.word	0x08000979
 80008c8:	08000979 	.word	0x08000979
 80008cc:	08000979 	.word	0x08000979
 80008d0:	08000979 	.word	0x08000979
 80008d4:	08000979 	.word	0x08000979
 80008d8:	08000979 	.word	0x08000979
 80008dc:	08000979 	.word	0x08000979
 80008e0:	08000979 	.word	0x08000979
 80008e4:	08000949 	.word	0x08000949
 80008e8:	08000955 	.word	0x08000955
 80008ec:	08000961 	.word	0x08000961
 80008f0:	0800096d 	.word	0x0800096d
		case 0x1:		// Stop vehicle.
			vTaskResume(StopTaskHandle);
 80008f4:	4b24      	ldr	r3, [pc, #144]	; (8000988 <StartDispatcherTask+0x104>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f007 fac9 	bl	8007e90 <vTaskResume>
			break;
 80008fe:	e040      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x2:		// Toggle driving lights.
			vTaskResume(DrivingLightsTaHandle);
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <StartDispatcherTask+0x108>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f007 fac3 	bl	8007e90 <vTaskResume>
			break;
 800090a:	e03a      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x3:		// Toggle RGB stripe.
			vTaskResume(LEDStripeTaskHandle);
 800090c:	4b20      	ldr	r3, [pc, #128]	; (8000990 <StartDispatcherTask+0x10c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f007 fabd 	bl	8007e90 <vTaskResume>
			break;
 8000916:	e034      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x4:		// Turn left blinkers on.
			vTaskResume(LeftBlinkersTasHandle);
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <StartDispatcherTask+0x110>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f007 fab7 	bl	8007e90 <vTaskResume>
			break;
 8000922:	e02e      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x5:		// Turn right blinkers on.
			vTaskResume(RightBlinkersTaHandle);
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <StartDispatcherTask+0x114>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f007 fab1 	bl	8007e90 <vTaskResume>
			break;
 800092e:	e028      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x6:		// Toggle parking to the left.
			vTaskResume(ParkLeftTaskHandle);
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <StartDispatcherTask+0x118>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f007 faab 	bl	8007e90 <vTaskResume>
			break;
 800093a:	e022      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x7:		// Toggle parking to the right.
			vTaskResume(ParkRightTaskHandle);
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <StartDispatcherTask+0x11c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f007 faa5 	bl	8007e90 <vTaskResume>
			break;
 8000946:	e01c      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x11:		// Accelerate.
			vTaskResume(AccelerateTaskHandle);
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <StartDispatcherTask+0x120>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f007 fa9f 	bl	8007e90 <vTaskResume>
			break;
 8000952:	e016      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x12:		// Decelerate.
			vTaskResume(DecelerateTaskHandle);
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <StartDispatcherTask+0x124>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f007 fa99 	bl	8007e90 <vTaskResume>
			break;
 800095e:	e010      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x13:		// Turn left.
			vTaskResume(TurnLeftTaskHandle);
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <StartDispatcherTask+0x128>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f007 fa93 	bl	8007e90 <vTaskResume>
			break;
 800096a:	e00a      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x14:		// Turn right.
			vTaskResume(TurnRightTaskHandle);
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <StartDispatcherTask+0x12c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f007 fa8d 	bl	8007e90 <vTaskResume>
			break;
 8000976:	e004      	b.n	8000982 <StartDispatcherTask+0xfe>
		default:		// Acknowledge connection.
//			vTaskResume(ConnectionTaskHandle);
			vTaskResume(DrivingLightsTaHandle);
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <StartDispatcherTask+0x108>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	f007 fa87 	bl	8007e90 <vTaskResume>
	  vTaskSuspend(NULL);
 8000982:	e783      	b.n	800088c <StartDispatcherTask+0x8>
 8000984:	200000bc 	.word	0x200000bc
 8000988:	200000cc 	.word	0x200000cc
 800098c:	200000d0 	.word	0x200000d0
 8000990:	200000d4 	.word	0x200000d4
 8000994:	200000d8 	.word	0x200000d8
 8000998:	200000dc 	.word	0x200000dc
 800099c:	200000e0 	.word	0x200000e0
 80009a0:	200000e4 	.word	0x200000e4
 80009a4:	200000e8 	.word	0x200000e8
 80009a8:	200000ec 	.word	0x200000ec
 80009ac:	200000f0 	.word	0x200000f0
 80009b0:	200000f4 	.word	0x200000f4

080009b4 <StartStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStopTask */
void StartStopTask(void *argument)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80009bc:	2000      	movs	r0, #0
 80009be:	f007 f9bb 	bl	8007d38 <vTaskSuspend>
 80009c2:	e7fb      	b.n	80009bc <StartStopTask+0x8>

080009c4 <StartDrivingLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDrivingLightsTask */
void StartDrivingLightsTask(void *argument)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDrivingLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80009cc:	2000      	movs	r0, #0
 80009ce:	f007 f9b3 	bl	8007d38 <vTaskSuspend>
	  HAL_GPIO_TogglePin(DrivingLights_GPIO_Port, DrivingLights_Pin);
 80009d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d6:	4802      	ldr	r0, [pc, #8]	; (80009e0 <StartDrivingLightsTask+0x1c>)
 80009d8:	f001 fff7 	bl	80029ca <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 80009dc:	e7f6      	b.n	80009cc <StartDrivingLightsTask+0x8>
 80009de:	bf00      	nop
 80009e0:	40020800 	.word	0x40020800

080009e4 <StartLEDStripeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDStripeTask */
void StartLEDStripeTask(void *argument)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDStripeTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f007 f9a3 	bl	8007d38 <vTaskSuspend>
 80009f2:	e7fb      	b.n	80009ec <StartLEDStripeTask+0x8>

080009f4 <StartLeftBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeftBlinkersTask */
void StartLeftBlinkersTask(void *argument)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLeftBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80009fc:	2000      	movs	r0, #0
 80009fe:	f007 f99b 	bl	8007d38 <vTaskSuspend>
	  for(int i = 0; i < 6; i ++)
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	e00b      	b.n	8000a20 <StartLeftBlinkersTask+0x2c>
	  {
		  HAL_GPIO_TogglePin(LeftBlinkers_GPIO_Port, LeftBlinkers_Pin);
 8000a08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <StartLeftBlinkersTask+0x34>)
 8000a0e:	f001 ffdc 	bl	80029ca <HAL_GPIO_TogglePin>
		  osDelay(400);
 8000a12:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a16:	f006 f979 	bl	8006d0c <osDelay>
	  for(int i = 0; i < 6; i ++)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2b05      	cmp	r3, #5
 8000a24:	ddf0      	ble.n	8000a08 <StartLeftBlinkersTask+0x14>
	  vTaskSuspend(NULL);
 8000a26:	e7e9      	b.n	80009fc <StartLeftBlinkersTask+0x8>
 8000a28:	40020800 	.word	0x40020800

08000a2c <StartRightBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRightBlinkersTask */
void StartRightBlinkersTask(void *argument)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRightBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f007 f97f 	bl	8007d38 <vTaskSuspend>
	  for(int i = 0; i < 6; i ++)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	e00b      	b.n	8000a58 <StartRightBlinkersTask+0x2c>
	  {
		  HAL_GPIO_TogglePin(RightBlinkers_GPIO_Port, RightBlinkers_Pin);
 8000a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a44:	4806      	ldr	r0, [pc, #24]	; (8000a60 <StartRightBlinkersTask+0x34>)
 8000a46:	f001 ffc0 	bl	80029ca <HAL_GPIO_TogglePin>
		  osDelay(400);
 8000a4a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a4e:	f006 f95d 	bl	8006d0c <osDelay>
	  for(int i = 0; i < 6; i ++)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3301      	adds	r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b05      	cmp	r3, #5
 8000a5c:	ddf0      	ble.n	8000a40 <StartRightBlinkersTask+0x14>
	  vTaskSuspend(NULL);
 8000a5e:	e7e9      	b.n	8000a34 <StartRightBlinkersTask+0x8>
 8000a60:	40020800 	.word	0x40020800

08000a64 <StartParkLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkLeftTask */
void StartParkLeftTask(void *argument)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f007 f963 	bl	8007d38 <vTaskSuspend>
 8000a72:	e7fb      	b.n	8000a6c <StartParkLeftTask+0x8>

08000a74 <StartParkRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkRightTask */
void StartParkRightTask(void *argument)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f007 f95b 	bl	8007d38 <vTaskSuspend>
 8000a82:	e7fb      	b.n	8000a7c <StartParkRightTask+0x8>

08000a84 <StartAccelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccelerateTask */
void StartAccelerateTask(void *argument)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccelerateTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f007 f953 	bl	8007d38 <vTaskSuspend>
 8000a92:	e7fb      	b.n	8000a8c <StartAccelerateTask+0x8>

08000a94 <StartDecelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDecelerateTask */
void StartDecelerateTask(void *argument)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDecelerateTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f007 f94b 	bl	8007d38 <vTaskSuspend>
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 8000aa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa6:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <StartDecelerateTask+0x2c>)
 8000aa8:	f001 ff8f 	bl	80029ca <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000aac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab0:	f006 f92c 	bl	8006d0c <osDelay>
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 8000ab4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab8:	4801      	ldr	r0, [pc, #4]	; (8000ac0 <StartDecelerateTask+0x2c>)
 8000aba:	f001 ff86 	bl	80029ca <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 8000abe:	e7ed      	b.n	8000a9c <StartDecelerateTask+0x8>
 8000ac0:	40020800 	.word	0x40020800

08000ac4 <StartTurnLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnLeftTask */
void StartTurnLeftTask(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f007 f933 	bl	8007d38 <vTaskSuspend>
 8000ad2:	e7fb      	b.n	8000acc <StartTurnLeftTask+0x8>

08000ad4 <StartTurnRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnRightTask */
void StartTurnRightTask(void *argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f007 f92b 	bl	8007d38 <vTaskSuspend>
 8000ae2:	e7fb      	b.n	8000adc <StartTurnRightTask+0x8>

08000ae4 <StartConnectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConnectionTask */
void StartConnectionTask(void *argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConnectionTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000aec:	2000      	movs	r0, #0
 8000aee:	f007 f923 	bl	8007d38 <vTaskSuspend>
 8000af2:	e7fb      	b.n	8000aec <StartConnectionTask+0x8>

08000af4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	; 0x30
 8000af8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	4b94      	ldr	r3, [pc, #592]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a93      	ldr	r2, [pc, #588]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b91      	ldr	r3, [pc, #580]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	4b8e      	ldr	r3, [pc, #568]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a8d      	ldr	r2, [pc, #564]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b8b      	ldr	r3, [pc, #556]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b88      	ldr	r3, [pc, #544]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a87      	ldr	r2, [pc, #540]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b85      	ldr	r3, [pc, #532]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	4b82      	ldr	r3, [pc, #520]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a81      	ldr	r2, [pc, #516]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b7f      	ldr	r3, [pc, #508]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6a:	4b7c      	ldr	r3, [pc, #496]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a7b      	ldr	r2, [pc, #492]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b70:	f043 0308 	orr.w	r3, r3, #8
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b79      	ldr	r3, [pc, #484]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0308 	and.w	r3, r3, #8
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b82:	4b76      	ldr	r3, [pc, #472]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a75      	ldr	r2, [pc, #468]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b73      	ldr	r3, [pc, #460]	; (8000d5c <MX_GPIO_Init+0x268>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f244 0191 	movw	r1, #16529	; 0x4091
 8000ba0:	486f      	ldr	r0, [pc, #444]	; (8000d60 <MX_GPIO_Init+0x26c>)
 8000ba2:	f001 fef9 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bac:	486d      	ldr	r0, [pc, #436]	; (8000d64 <MX_GPIO_Init+0x270>)
 8000bae:	f001 fef3 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2140      	movs	r1, #64	; 0x40
 8000bb6:	486c      	ldr	r0, [pc, #432]	; (8000d68 <MX_GPIO_Init+0x274>)
 8000bb8:	f001 feee 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000bc2:	486a      	ldr	r0, [pc, #424]	; (8000d6c <MX_GPIO_Init+0x278>)
 8000bc4:	f001 fee8 	bl	8002998 <HAL_GPIO_WritePin>
                          |WithdrawLights_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4863      	ldr	r0, [pc, #396]	; (8000d6c <MX_GPIO_Init+0x278>)
 8000be0:	f001 fd2e 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000be4:	2332      	movs	r3, #50	; 0x32
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf4:	230b      	movs	r3, #11
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	485b      	ldr	r0, [pc, #364]	; (8000d6c <MX_GPIO_Init+0x278>)
 8000c00:	f001 fd1e 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c04:	2386      	movs	r3, #134	; 0x86
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c14:	230b      	movs	r3, #11
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4854      	ldr	r0, [pc, #336]	; (8000d70 <MX_GPIO_Init+0x27c>)
 8000c20:	f001 fd0e 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin;
 8000c24:	f244 0391 	movw	r3, #16529	; 0x4091
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4848      	ldr	r0, [pc, #288]	; (8000d60 <MX_GPIO_Init+0x26c>)
 8000c3e:	f001 fcff 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c54:	230b      	movs	r3, #11
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4840      	ldr	r0, [pc, #256]	; (8000d60 <MX_GPIO_Init+0x26c>)
 8000c60:	f001 fcee 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c76:	2307      	movs	r3, #7
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4838      	ldr	r0, [pc, #224]	; (8000d64 <MX_GPIO_Init+0x270>)
 8000c82:	f001 fcdd 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = StepperMotorDir_Pin;
 8000c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(StepperMotorDir_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4831      	ldr	r0, [pc, #196]	; (8000d64 <MX_GPIO_Init+0x270>)
 8000ca0:	f001 fcce 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ca4:	2340      	movs	r3, #64	; 0x40
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	482b      	ldr	r0, [pc, #172]	; (8000d68 <MX_GPIO_Init+0x274>)
 8000cbc:	f001 fcc0 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4825      	ldr	r0, [pc, #148]	; (8000d68 <MX_GPIO_Init+0x274>)
 8000cd4:	f001 fcb4 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 8000cd8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000cdc:	61fb      	str	r3, [r7, #28]
                          |WithdrawLights_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	481e      	ldr	r0, [pc, #120]	; (8000d6c <MX_GPIO_Init+0x278>)
 8000cf2:	f001 fca5 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cf6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d08:	230a      	movs	r3, #10
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	4817      	ldr	r0, [pc, #92]	; (8000d70 <MX_GPIO_Init+0x27c>)
 8000d14:	f001 fc94 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4810      	ldr	r0, [pc, #64]	; (8000d70 <MX_GPIO_Init+0x27c>)
 8000d2e:	f001 fc87 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d44:	230b      	movs	r3, #11
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <MX_GPIO_Init+0x274>)
 8000d50:	f001 fc76 	bl	8002640 <HAL_GPIO_Init>

}
 8000d54:	bf00      	nop
 8000d56:	3730      	adds	r7, #48	; 0x30
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020400 	.word	0x40020400
 8000d64:	40020c00 	.word	0x40020c00
 8000d68:	40021800 	.word	0x40021800
 8000d6c:	40020800 	.word	0x40020800
 8000d70:	40020000 	.word	0x40020000

08000d74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000d7a:	4a1c      	ldr	r2, [pc, #112]	; (8000dec <MX_I2C1_Init+0x78>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000d80:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <MX_I2C1_Init+0x7c>)
 8000d82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dae:	480e      	ldr	r0, [pc, #56]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000db0:	f001 fe26 	bl	8002a00 <HAL_I2C_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dba:	f000 f945 	bl	8001048 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4809      	ldr	r0, [pc, #36]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000dc2:	f002 fa07 	bl	80031d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dcc:	f000 f93c 	bl	8001048 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000dd4:	f002 fa49 	bl	800326a <HAL_I2CEx_ConfigDigitalFilter>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dde:	f000 f933 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000fc 	.word	0x200000fc
 8000dec:	40005400 	.word	0x40005400
 8000df0:	20404768 	.word	0x20404768

08000df4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b0ae      	sub	sp, #184	; 0xb8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2290      	movs	r2, #144	; 0x90
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f008 fde1 	bl	80099dc <memset>
  if(i2cHandle->Instance==I2C1)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a22      	ldr	r2, [pc, #136]	; (8000ea8 <HAL_I2C_MspInit+0xb4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d13c      	bne.n	8000e9e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 ffbc 	bl	8003db0 <HAL_RCCEx_PeriphCLKConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e3e:	f000 f903 	bl	8001048 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <HAL_I2C_MspInit+0xb8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a19      	ldr	r2, [pc, #100]	; (8000eac <HAL_I2C_MspInit+0xb8>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_I2C_MspInit+0xb8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000e5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e62:	2312      	movs	r3, #18
 8000e64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e74:	2304      	movs	r3, #4
 8000e76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480b      	ldr	r0, [pc, #44]	; (8000eb0 <HAL_I2C_MspInit+0xbc>)
 8000e82:	f001 fbdd 	bl	8002640 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_I2C_MspInit+0xb8>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <HAL_I2C_MspInit+0xb8>)
 8000e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_I2C_MspInit+0xb8>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	37b8      	adds	r7, #184	; 0xb8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40005400 	.word	0x40005400
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020400 	.word	0x40020400

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb8:	f000 fe33 	bl	8001b22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebc:	f000 f81e 	bl	8000efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec0:	f7ff fe18 	bl	8000af4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec4:	f7ff fbb4 	bl	8000630 <MX_DMA_Init>
  MX_SPI1_Init();
 8000ec8:	f000 f8c4 	bl	8001054 <MX_SPI1_Init>
  MX_DAC_Init();
 8000ecc:	f7ff fb3e 	bl	800054c <MX_DAC_Init>
  MX_I2C1_Init();
 8000ed0:	f7ff ff50 	bl	8000d74 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000ed4:	f000 fcb2 	bl	800183c <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8000ed8:	f000 fd62 	bl	80019a0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, RxBuffer, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	4905      	ldr	r1, [pc, #20]	; (8000ef4 <main+0x40>)
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <main+0x44>)
 8000ee2:	f004 fbbb 	bl	800565c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ee6:	f005 fe01 	bl	8006aec <osKernelInitialize>
  MX_FREERTOS_Init();
 8000eea:	f7ff fbbf 	bl	800066c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000eee:	f005 fe31 	bl	8006b54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <main+0x3e>
 8000ef4:	200000bc 	.word	0x200000bc
 8000ef8:	200006b4 	.word	0x200006b4

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	; 0x50
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	2234      	movs	r2, #52	; 0x34
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f008 fd66 	bl	80099dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f20:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <SystemClock_Config+0xd4>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	4a2a      	ldr	r2, [pc, #168]	; (8000fd0 <SystemClock_Config+0xd4>)
 8000f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2c:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <SystemClock_Config+0xd4>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f38:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <SystemClock_Config+0xd8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a25      	ldr	r2, [pc, #148]	; (8000fd4 <SystemClock_Config+0xd8>)
 8000f3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <SystemClock_Config+0xd8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f50:	2301      	movs	r3, #1
 8000f52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f54:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f64:	2304      	movs	r3, #4
 8000f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000f68:	23d8      	movs	r3, #216	; 0xd8
 8000f6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f002 fa11 	bl	80033a4 <HAL_RCC_OscConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f88:	f000 f85e 	bl	8001048 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f8c:	f002 f9ba 	bl	8003304 <HAL_PWREx_EnableOverDrive>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f96:	f000 f857 	bl	8001048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fa6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000faa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	2107      	movs	r1, #7
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f002 fca1 	bl	8003900 <HAL_RCC_ClockConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000fc4:	f000 f840 	bl	8001048 <Error_Handler>
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3750      	adds	r7, #80	; 0x50
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40007000 	.word	0x40007000

08000fd8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart6x) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	portYIELD_FROM_ISR(xTaskResumeFromISR(DispatcherTaskHandle));
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_UART_RxCpltCallback+0x3c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f006 ffb3 	bl	8007f50 <xTaskResumeFromISR>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d007      	beq.n	8001000 <HAL_UART_RxCpltCallback+0x28>
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_UART_RxCpltCallback+0x40>)
 8000ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	f3bf 8f4f 	dsb	sy
 8000ffc:	f3bf 8f6f 	isb	sy
	HAL_UART_Receive_IT(&huart6, RxBuffer, 1);					// Used for "opening" ST MCU for future interrupts on RX
 8001000:	2201      	movs	r2, #1
 8001002:	4906      	ldr	r1, [pc, #24]	; (800101c <HAL_UART_RxCpltCallback+0x44>)
 8001004:	4806      	ldr	r0, [pc, #24]	; (8001020 <HAL_UART_RxCpltCallback+0x48>)
 8001006:	f004 fb29 	bl	800565c <HAL_UART_Receive_IT>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200000c8 	.word	0x200000c8
 8001018:	e000ed04 	.word	0xe000ed04
 800101c:	200000bc 	.word	0x200000bc
 8001020:	200006b4 	.word	0x200006b4

08001024 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001036:	f000 fd81 	bl	8001b3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40001000 	.word	0x40001000

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001050:	e7fe      	b.n	8001050 <Error_Handler+0x8>
	...

08001054 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001058:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <MX_SPI1_Init+0x74>)
 800105a:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <MX_SPI1_Init+0x78>)
 800105c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_SPI1_Init+0x74>)
 8001060:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001064:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MX_SPI1_Init+0x74>)
 8001068:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800106c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_SPI1_Init+0x74>)
 8001070:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001074:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_SPI1_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_SPI1_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_SPI1_Init+0x74>)
 8001084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001088:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_SPI1_Init+0x74>)
 800108c:	2210      	movs	r2, #16
 800108e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <MX_SPI1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_SPI1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_SPI1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_SPI1_Init+0x74>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <MX_SPI1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_SPI1_Init+0x74>)
 80010b0:	2208      	movs	r2, #8
 80010b2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_SPI1_Init+0x74>)
 80010b6:	f003 faa3 	bl	8004600 <HAL_SPI_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80010c0:	f7ff ffc2 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000150 	.word	0x20000150
 80010cc:	40013000 	.word	0x40013000

080010d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a3c      	ldr	r2, [pc, #240]	; (80011e0 <HAL_SPI_MspInit+0x110>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d171      	bne.n	80011d6 <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010f2:	4b3c      	ldr	r3, [pc, #240]	; (80011e4 <HAL_SPI_MspInit+0x114>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a3b      	ldr	r2, [pc, #236]	; (80011e4 <HAL_SPI_MspInit+0x114>)
 80010f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b39      	ldr	r3, [pc, #228]	; (80011e4 <HAL_SPI_MspInit+0x114>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <HAL_SPI_MspInit+0x114>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a35      	ldr	r2, [pc, #212]	; (80011e4 <HAL_SPI_MspInit+0x114>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <HAL_SPI_MspInit+0x114>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <HAL_SPI_MspInit+0x114>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a2f      	ldr	r2, [pc, #188]	; (80011e4 <HAL_SPI_MspInit+0x114>)
 8001128:	f043 0308 	orr.w	r3, r3, #8
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <HAL_SPI_MspInit+0x114>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800113a:	2320      	movs	r3, #32
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800114a:	2305      	movs	r3, #5
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4824      	ldr	r0, [pc, #144]	; (80011e8 <HAL_SPI_MspInit+0x118>)
 8001156:	f001 fa73 	bl	8002640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEDStripes_Pin;
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800116a:	2305      	movs	r3, #5
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEDStripes_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	481d      	ldr	r0, [pc, #116]	; (80011ec <HAL_SPI_MspInit+0x11c>)
 8001176:	f001 fa63 	bl	8002640 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <HAL_SPI_MspInit+0x120>)
 800117c:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <HAL_SPI_MspInit+0x124>)
 800117e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <HAL_SPI_MspInit+0x120>)
 8001182:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001186:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_SPI_MspInit+0x120>)
 800118a:	2240      	movs	r2, #64	; 0x40
 800118c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <HAL_SPI_MspInit+0x120>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_SPI_MspInit+0x120>)
 8001196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_SPI_MspInit+0x120>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <HAL_SPI_MspInit+0x120>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <HAL_SPI_MspInit+0x120>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_SPI_MspInit+0x120>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_SPI_MspInit+0x120>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <HAL_SPI_MspInit+0x120>)
 80011bc:	f000 fec4 	bl	8001f48 <HAL_DMA_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 80011c6:	f7ff ff3f 	bl	8001048 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <HAL_SPI_MspInit+0x120>)
 80011ce:	655a      	str	r2, [r3, #84]	; 0x54
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_SPI_MspInit+0x120>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011d6:	bf00      	nop
 80011d8:	3728      	adds	r7, #40	; 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40013000 	.word	0x40013000
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	200001b4 	.word	0x200001b4
 80011f4:	40026458 	.word	0x40026458

080011f8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af04      	add	r7, sp, #16
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	9302      	str	r3, [sp, #8]
 8001218:	2301      	movs	r3, #1
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	1dfb      	adds	r3, r7, #7
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	2200      	movs	r2, #0
 8001224:	2178      	movs	r1, #120	; 0x78
 8001226:	4803      	ldr	r0, [pc, #12]	; (8001234 <ssd1306_WriteCommand+0x2c>)
 8001228:	f001 fc7a 	bl	8002b20 <HAL_I2C_Mem_Write>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200000fc 	.word	0x200000fc

08001238 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af04      	add	r7, sp, #16
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b29b      	uxth	r3, r3
 8001246:	f04f 32ff 	mov.w	r2, #4294967295
 800124a:	9202      	str	r2, [sp, #8]
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	2240      	movs	r2, #64	; 0x40
 8001256:	2178      	movs	r1, #120	; 0x78
 8001258:	4803      	ldr	r0, [pc, #12]	; (8001268 <ssd1306_WriteData+0x30>)
 800125a:	f001 fc61 	bl	8002b20 <HAL_I2C_Mem_Write>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200000fc 	.word	0x200000fc

0800126c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001270:	f7ff ffc2 	bl	80011f8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001274:	2064      	movs	r0, #100	; 0x64
 8001276:	f000 fc81 	bl	8001b7c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f9ce 	bl	800161c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001280:	2020      	movs	r0, #32
 8001282:	f7ff ffc1 	bl	8001208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff ffbe 	bl	8001208 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800128c:	20b0      	movs	r0, #176	; 0xb0
 800128e:	f7ff ffbb 	bl	8001208 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001292:	20c8      	movs	r0, #200	; 0xc8
 8001294:	f7ff ffb8 	bl	8001208 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff ffb5 	bl	8001208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800129e:	2010      	movs	r0, #16
 80012a0:	f7ff ffb2 	bl	8001208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80012a4:	2040      	movs	r0, #64	; 0x40
 80012a6:	f7ff ffaf 	bl	8001208 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80012aa:	20ff      	movs	r0, #255	; 0xff
 80012ac:	f000 f9a2 	bl	80015f4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80012b0:	20a1      	movs	r0, #161	; 0xa1
 80012b2:	f7ff ffa9 	bl	8001208 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80012b6:	20a6      	movs	r0, #166	; 0xa6
 80012b8:	f7ff ffa6 	bl	8001208 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80012bc:	20a8      	movs	r0, #168	; 0xa8
 80012be:	f7ff ffa3 	bl	8001208 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80012c2:	203f      	movs	r0, #63	; 0x3f
 80012c4:	f7ff ffa0 	bl	8001208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012c8:	20a4      	movs	r0, #164	; 0xa4
 80012ca:	f7ff ff9d 	bl	8001208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80012ce:	20d3      	movs	r0, #211	; 0xd3
 80012d0:	f7ff ff9a 	bl	8001208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff ff97 	bl	8001208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80012da:	20d5      	movs	r0, #213	; 0xd5
 80012dc:	f7ff ff94 	bl	8001208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80012e0:	20f0      	movs	r0, #240	; 0xf0
 80012e2:	f7ff ff91 	bl	8001208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80012e6:	20d9      	movs	r0, #217	; 0xd9
 80012e8:	f7ff ff8e 	bl	8001208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80012ec:	2022      	movs	r0, #34	; 0x22
 80012ee:	f7ff ff8b 	bl	8001208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80012f2:	20da      	movs	r0, #218	; 0xda
 80012f4:	f7ff ff88 	bl	8001208 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80012f8:	2012      	movs	r0, #18
 80012fa:	f7ff ff85 	bl	8001208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80012fe:	20db      	movs	r0, #219	; 0xdb
 8001300:	f7ff ff82 	bl	8001208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001304:	2020      	movs	r0, #32
 8001306:	f7ff ff7f 	bl	8001208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800130a:	208d      	movs	r0, #141	; 0x8d
 800130c:	f7ff ff7c 	bl	8001208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001310:	2014      	movs	r0, #20
 8001312:	f7ff ff79 	bl	8001208 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001316:	2001      	movs	r0, #1
 8001318:	f000 f980 	bl	800161c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800131c:	2000      	movs	r0, #0
 800131e:	f000 f80f 	bl	8001340 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001322:	f000 f825 	bl	8001370 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <ssd1306_Init+0xd0>)
 8001328:	2200      	movs	r2, #0
 800132a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <ssd1306_Init+0xd0>)
 800132e:	2200      	movs	r2, #0
 8001330:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001332:	4b02      	ldr	r3, [pc, #8]	; (800133c <ssd1306_Init+0xd0>)
 8001334:	2201      	movs	r2, #1
 8001336:	711a      	strb	r2, [r3, #4]
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000614 	.word	0x20000614

08001340 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <ssd1306_Fill+0x14>
 8001350:	2300      	movs	r3, #0
 8001352:	e000      	b.n	8001356 <ssd1306_Fill+0x16>
 8001354:	23ff      	movs	r3, #255	; 0xff
 8001356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800135a:	4619      	mov	r1, r3
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <ssd1306_Fill+0x2c>)
 800135e:	f008 fb3d 	bl	80099dc <memset>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000214 	.word	0x20000214

08001370 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001376:	2300      	movs	r3, #0
 8001378:	71fb      	strb	r3, [r7, #7]
 800137a:	e016      	b.n	80013aa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	3b50      	subs	r3, #80	; 0x50
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff40 	bl	8001208 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001388:	2000      	movs	r0, #0
 800138a:	f7ff ff3d 	bl	8001208 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800138e:	2010      	movs	r0, #16
 8001390:	f7ff ff3a 	bl	8001208 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	01db      	lsls	r3, r3, #7
 8001398:	4a08      	ldr	r2, [pc, #32]	; (80013bc <ssd1306_UpdateScreen+0x4c>)
 800139a:	4413      	add	r3, r2
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff4a 	bl	8001238 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	3301      	adds	r3, #1
 80013a8:	71fb      	strb	r3, [r7, #7]
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b07      	cmp	r3, #7
 80013ae:	d9e5      	bls.n	800137c <ssd1306_UpdateScreen+0xc>
    }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000214 	.word	0x20000214

080013c0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
 80013ca:	460b      	mov	r3, r1
 80013cc:	71bb      	strb	r3, [r7, #6]
 80013ce:	4613      	mov	r3, r2
 80013d0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db3d      	blt.n	8001456 <ssd1306_DrawPixel+0x96>
 80013da:	79bb      	ldrb	r3, [r7, #6]
 80013dc:	2b3f      	cmp	r3, #63	; 0x3f
 80013de:	d83a      	bhi.n	8001456 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80013e0:	797b      	ldrb	r3, [r7, #5]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d11a      	bne.n	800141c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013e6:	79fa      	ldrb	r2, [r7, #7]
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	08db      	lsrs	r3, r3, #3
 80013ec:	b2d8      	uxtb	r0, r3
 80013ee:	4603      	mov	r3, r0
 80013f0:	01db      	lsls	r3, r3, #7
 80013f2:	4413      	add	r3, r2
 80013f4:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <ssd1306_DrawPixel+0xa4>)
 80013f6:	5cd3      	ldrb	r3, [r2, r3]
 80013f8:	b25a      	sxtb	r2, r3
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	2101      	movs	r1, #1
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	b25b      	sxtb	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b259      	sxtb	r1, r3
 800140c:	79fa      	ldrb	r2, [r7, #7]
 800140e:	4603      	mov	r3, r0
 8001410:	01db      	lsls	r3, r3, #7
 8001412:	4413      	add	r3, r2
 8001414:	b2c9      	uxtb	r1, r1
 8001416:	4a13      	ldr	r2, [pc, #76]	; (8001464 <ssd1306_DrawPixel+0xa4>)
 8001418:	54d1      	strb	r1, [r2, r3]
 800141a:	e01d      	b.n	8001458 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800141c:	79fa      	ldrb	r2, [r7, #7]
 800141e:	79bb      	ldrb	r3, [r7, #6]
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	b2d8      	uxtb	r0, r3
 8001424:	4603      	mov	r3, r0
 8001426:	01db      	lsls	r3, r3, #7
 8001428:	4413      	add	r3, r2
 800142a:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <ssd1306_DrawPixel+0xa4>)
 800142c:	5cd3      	ldrb	r3, [r2, r3]
 800142e:	b25a      	sxtb	r2, r3
 8001430:	79bb      	ldrb	r3, [r7, #6]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	2101      	movs	r1, #1
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	b25b      	sxtb	r3, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	b25b      	sxtb	r3, r3
 8001442:	4013      	ands	r3, r2
 8001444:	b259      	sxtb	r1, r3
 8001446:	79fa      	ldrb	r2, [r7, #7]
 8001448:	4603      	mov	r3, r0
 800144a:	01db      	lsls	r3, r3, #7
 800144c:	4413      	add	r3, r2
 800144e:	b2c9      	uxtb	r1, r1
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <ssd1306_DrawPixel+0xa4>)
 8001452:	54d1      	strb	r1, [r2, r3]
 8001454:	e000      	b.n	8001458 <ssd1306_DrawPixel+0x98>
        return;
 8001456:	bf00      	nop
    }
}
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000214 	.word	0x20000214

08001468 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	4604      	mov	r4, r0
 8001470:	1d38      	adds	r0, r7, #4
 8001472:	e880 0006 	stmia.w	r0, {r1, r2}
 8001476:	461a      	mov	r2, r3
 8001478:	4623      	mov	r3, r4
 800147a:	73fb      	strb	r3, [r7, #15]
 800147c:	4613      	mov	r3, r2
 800147e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2b1f      	cmp	r3, #31
 8001484:	d902      	bls.n	800148c <ssd1306_WriteChar+0x24>
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	2b7e      	cmp	r3, #126	; 0x7e
 800148a:	d901      	bls.n	8001490 <ssd1306_WriteChar+0x28>
        return 0;
 800148c:	2300      	movs	r3, #0
 800148e:	e06d      	b.n	800156c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001490:	4b38      	ldr	r3, [pc, #224]	; (8001574 <ssd1306_WriteChar+0x10c>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	793b      	ldrb	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	2b80      	cmp	r3, #128	; 0x80
 800149c:	dc06      	bgt.n	80014ac <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800149e:	4b35      	ldr	r3, [pc, #212]	; (8001574 <ssd1306_WriteChar+0x10c>)
 80014a0:	885b      	ldrh	r3, [r3, #2]
 80014a2:	461a      	mov	r2, r3
 80014a4:	797b      	ldrb	r3, [r7, #5]
 80014a6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014a8:	2b40      	cmp	r3, #64	; 0x40
 80014aa:	dd01      	ble.n	80014b0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	e05d      	b.n	800156c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	e04c      	b.n	8001550 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	3b20      	subs	r3, #32
 80014bc:	7979      	ldrb	r1, [r7, #5]
 80014be:	fb01 f303 	mul.w	r3, r1, r3
 80014c2:	4619      	mov	r1, r3
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	440b      	add	r3, r1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	e034      	b.n	8001540 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d012      	beq.n	800150c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <ssd1306_WriteChar+0x10c>)
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	b2d8      	uxtb	r0, r3
 80014f4:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <ssd1306_WriteChar+0x10c>)
 80014f6:	885b      	ldrh	r3, [r3, #2]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	4413      	add	r3, r2
 8001500:	b2db      	uxtb	r3, r3
 8001502:	7bba      	ldrb	r2, [r7, #14]
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff ff5b 	bl	80013c0 <ssd1306_DrawPixel>
 800150a:	e016      	b.n	800153a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <ssd1306_WriteChar+0x10c>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	4413      	add	r3, r2
 8001518:	b2d8      	uxtb	r0, r3
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <ssd1306_WriteChar+0x10c>)
 800151c:	885b      	ldrh	r3, [r3, #2]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	4413      	add	r3, r2
 8001526:	b2d9      	uxtb	r1, r3
 8001528:	7bbb      	ldrb	r3, [r7, #14]
 800152a:	2b00      	cmp	r3, #0
 800152c:	bf0c      	ite	eq
 800152e:	2301      	moveq	r3, #1
 8001530:	2300      	movne	r3, #0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	f7ff ff43 	bl	80013c0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	3301      	adds	r3, #1
 800153e:	61bb      	str	r3, [r7, #24]
 8001540:	793b      	ldrb	r3, [r7, #4]
 8001542:	461a      	mov	r2, r3
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	4293      	cmp	r3, r2
 8001548:	d3c5      	bcc.n	80014d6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3301      	adds	r3, #1
 800154e:	61fb      	str	r3, [r7, #28]
 8001550:	797b      	ldrb	r3, [r7, #5]
 8001552:	461a      	mov	r2, r3
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	4293      	cmp	r3, r2
 8001558:	d3ad      	bcc.n	80014b6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <ssd1306_WriteChar+0x10c>)
 800155c:	881a      	ldrh	r2, [r3, #0]
 800155e:	793b      	ldrb	r3, [r7, #4]
 8001560:	b29b      	uxth	r3, r3
 8001562:	4413      	add	r3, r2
 8001564:	b29a      	uxth	r2, r3
 8001566:	4b03      	ldr	r3, [pc, #12]	; (8001574 <ssd1306_WriteChar+0x10c>)
 8001568:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800156a:	7bfb      	ldrb	r3, [r7, #15]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3724      	adds	r7, #36	; 0x24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd90      	pop	{r4, r7, pc}
 8001574:	20000614 	.word	0x20000614

08001578 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	1d38      	adds	r0, r7, #4
 8001582:	e880 0006 	stmia.w	r0, {r1, r2}
 8001586:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001588:	e012      	b.n	80015b0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	7818      	ldrb	r0, [r3, #0]
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	1d3a      	adds	r2, r7, #4
 8001592:	ca06      	ldmia	r2, {r1, r2}
 8001594:	f7ff ff68 	bl	8001468 <ssd1306_WriteChar>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d002      	beq.n	80015aa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	e008      	b.n	80015bc <ssd1306_WriteString+0x44>
        }
        str++;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3301      	adds	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1e8      	bne.n	800158a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	781b      	ldrb	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	460a      	mov	r2, r1
 80015ce:	71fb      	strb	r3, [r7, #7]
 80015d0:	4613      	mov	r3, r2
 80015d2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <ssd1306_SetCursor+0x2c>)
 80015da:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80015dc:	79bb      	ldrb	r3, [r7, #6]
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <ssd1306_SetCursor+0x2c>)
 80015e2:	805a      	strh	r2, [r3, #2]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	20000614 	.word	0x20000614

080015f4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80015fe:	2381      	movs	r3, #129	; 0x81
 8001600:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fdff 	bl	8001208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fdfb 	bl	8001208 <ssd1306_WriteCommand>
}
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800162c:	23af      	movs	r3, #175	; 0xaf
 800162e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <ssd1306_SetDisplayOn+0x38>)
 8001632:	2201      	movs	r2, #1
 8001634:	715a      	strb	r2, [r3, #5]
 8001636:	e004      	b.n	8001642 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001638:	23ae      	movs	r3, #174	; 0xae
 800163a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <ssd1306_SetDisplayOn+0x38>)
 800163e:	2200      	movs	r2, #0
 8001640:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fddf 	bl	8001208 <ssd1306_WriteCommand>
}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000614 	.word	0x20000614

08001658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_MspInit+0x4c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <HAL_MspInit+0x4c>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_MspInit+0x4c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_MspInit+0x4c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_MspInit+0x4c>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	210f      	movs	r1, #15
 8001692:	f06f 0001 	mvn.w	r0, #1
 8001696:	f000 fb4d 	bl	8001d34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800

080016a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	; 0x38
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016b8:	4b33      	ldr	r3, [pc, #204]	; (8001788 <HAL_InitTick+0xe0>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	4a32      	ldr	r2, [pc, #200]	; (8001788 <HAL_InitTick+0xe0>)
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	6413      	str	r3, [r2, #64]	; 0x40
 80016c4:	4b30      	ldr	r3, [pc, #192]	; (8001788 <HAL_InitTick+0xe0>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016d0:	f107 0210 	add.w	r2, r7, #16
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f002 fb36 	bl	8003d4c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d103      	bne.n	80016f2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016ea:	f002 fb07 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 80016ee:	6378      	str	r0, [r7, #52]	; 0x34
 80016f0:	e004      	b.n	80016fc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016f2:	f002 fb03 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 80016f6:	4603      	mov	r3, r0
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016fe:	4a23      	ldr	r2, [pc, #140]	; (800178c <HAL_InitTick+0xe4>)
 8001700:	fba2 2303 	umull	r2, r3, r2, r3
 8001704:	0c9b      	lsrs	r3, r3, #18
 8001706:	3b01      	subs	r3, #1
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800170a:	4b21      	ldr	r3, [pc, #132]	; (8001790 <HAL_InitTick+0xe8>)
 800170c:	4a21      	ldr	r2, [pc, #132]	; (8001794 <HAL_InitTick+0xec>)
 800170e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001710:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <HAL_InitTick+0xe8>)
 8001712:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001716:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001718:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <HAL_InitTick+0xe8>)
 800171a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800171e:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <HAL_InitTick+0xe8>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_InitTick+0xe8>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_InitTick+0xe8>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001730:	4817      	ldr	r0, [pc, #92]	; (8001790 <HAL_InitTick+0xe8>)
 8001732:	f003 f810 	bl	8004756 <HAL_TIM_Base_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800173c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001740:	2b00      	cmp	r3, #0
 8001742:	d11b      	bne.n	800177c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001744:	4812      	ldr	r0, [pc, #72]	; (8001790 <HAL_InitTick+0xe8>)
 8001746:	f003 f867 	bl	8004818 <HAL_TIM_Base_Start_IT>
 800174a:	4603      	mov	r3, r0
 800174c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001750:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001754:	2b00      	cmp	r3, #0
 8001756:	d111      	bne.n	800177c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001758:	2036      	movs	r0, #54	; 0x36
 800175a:	f000 fb07 	bl	8001d6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	d808      	bhi.n	8001776 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001764:	2200      	movs	r2, #0
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	2036      	movs	r0, #54	; 0x36
 800176a:	f000 fae3 	bl	8001d34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <HAL_InitTick+0xf0>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	e002      	b.n	800177c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800177c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001780:	4618      	mov	r0, r3
 8001782:	3738      	adds	r7, #56	; 0x38
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40023800 	.word	0x40023800
 800178c:	431bde83 	.word	0x431bde83
 8001790:	2000061c 	.word	0x2000061c
 8001794:	40001000 	.word	0x40001000
 8001798:	20000030 	.word	0x20000030

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <NMI_Handler+0x4>

080017a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <HardFault_Handler+0x4>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <MemManage_Handler+0x4>

080017ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <UsageFault_Handler+0x4>

080017ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <TIM6_DAC_IRQHandler+0x20>)
 80017ce:	791b      	ldrb	r3, [r3, #4]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80017d6:	4804      	ldr	r0, [pc, #16]	; (80017e8 <TIM6_DAC_IRQHandler+0x20>)
 80017d8:	f000 faf8 	bl	8001dcc <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80017dc:	4803      	ldr	r0, [pc, #12]	; (80017ec <TIM6_DAC_IRQHandler+0x24>)
 80017de:	f003 f8ea 	bl	80049b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200000a8 	.word	0x200000a8
 80017ec:	2000061c 	.word	0x2000061c

080017f0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <DMA2_Stream3_IRQHandler+0x10>)
 80017f6:	f000 fce7 	bl	80021c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200001b4 	.word	0x200001b4

08001804 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <USART6_IRQHandler+0x10>)
 800180a:	f003 ff6b 	bl	80056e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200006b4 	.word	0x200006b4

08001818 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800184e:	463b      	mov	r3, r7
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
 800185c:	615a      	str	r2, [r3, #20]
 800185e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <MX_TIM4_Init+0xac>)
 8001862:	4a22      	ldr	r2, [pc, #136]	; (80018ec <MX_TIM4_Init+0xb0>)
 8001864:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 8001866:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <MX_TIM4_Init+0xac>)
 8001868:	223f      	movs	r2, #63	; 0x3f
 800186a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <MX_TIM4_Init+0xac>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <MX_TIM4_Init+0xac>)
 8001874:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001878:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_TIM4_Init+0xac>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <MX_TIM4_Init+0xac>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001886:	4818      	ldr	r0, [pc, #96]	; (80018e8 <MX_TIM4_Init+0xac>)
 8001888:	f003 f83e 	bl	8004908 <HAL_TIM_PWM_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001892:	f7ff fbd9 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	4810      	ldr	r0, [pc, #64]	; (80018e8 <MX_TIM4_Init+0xac>)
 80018a6:	f003 fddf 	bl	8005468 <HAL_TIMEx_MasterConfigSynchronization>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80018b0:	f7ff fbca 	bl	8001048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b4:	2360      	movs	r3, #96	; 0x60
 80018b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018c4:	463b      	mov	r3, r7
 80018c6:	2208      	movs	r2, #8
 80018c8:	4619      	mov	r1, r3
 80018ca:	4807      	ldr	r0, [pc, #28]	; (80018e8 <MX_TIM4_Init+0xac>)
 80018cc:	f003 f992 	bl	8004bf4 <HAL_TIM_PWM_ConfigChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80018d6:	f7ff fbb7 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018da:	4803      	ldr	r0, [pc, #12]	; (80018e8 <MX_TIM4_Init+0xac>)
 80018dc:	f000 f828 	bl	8001930 <HAL_TIM_MspPostInit>

}
 80018e0:	bf00      	nop
 80018e2:	3728      	adds	r7, #40	; 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000668 	.word	0x20000668
 80018ec:	40000800 	.word	0x40000800

080018f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <HAL_TIM_PWM_MspInit+0x38>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d10b      	bne.n	800191a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_TIM_PWM_MspInit+0x3c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_TIM_PWM_MspInit+0x3c>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	6413      	str	r3, [r2, #64]	; 0x40
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <HAL_TIM_PWM_MspInit+0x3c>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40000800 	.word	0x40000800
 800192c:	40023800 	.word	0x40023800

08001930 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a11      	ldr	r2, [pc, #68]	; (8001994 <HAL_TIM_MspPostInit+0x64>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d11c      	bne.n	800198c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_TIM_MspPostInit+0x68>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_TIM_MspPostInit+0x68>)
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_TIM_MspPostInit+0x68>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = StepperMotorStep_Pin;
 800196a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800196e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800197c:	2302      	movs	r3, #2
 800197e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(StepperMotorStep_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4619      	mov	r1, r3
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <HAL_TIM_MspPostInit+0x6c>)
 8001988:	f000 fe5a 	bl	8002640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800198c:	bf00      	nop
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40000800 	.word	0x40000800
 8001998:	40023800 	.word	0x40023800
 800199c:	40020c00 	.word	0x40020c00

080019a0 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <MX_USART6_UART_Init+0x58>)
 80019a6:	4a15      	ldr	r2, [pc, #84]	; (80019fc <MX_USART6_UART_Init+0x5c>)
 80019a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <MX_USART6_UART_Init+0x58>)
 80019ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_USART6_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_USART6_UART_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_USART6_UART_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_USART6_UART_Init+0x58>)
 80019c6:	220c      	movs	r2, #12
 80019c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <MX_USART6_UART_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_USART6_UART_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <MX_USART6_UART_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_USART6_UART_Init+0x58>)
 80019de:	2200      	movs	r2, #0
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_USART6_UART_Init+0x58>)
 80019e4:	f003 fdec 	bl	80055c0 <HAL_UART_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80019ee:	f7ff fb2b 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200006b4 	.word	0x200006b4
 80019fc:	40011400 	.word	0x40011400

08001a00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b0ae      	sub	sp, #184	; 0xb8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	2290      	movs	r2, #144	; 0x90
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f007 ffdb 	bl	80099dc <memset>
  if(uartHandle->Instance==USART6)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a26      	ldr	r2, [pc, #152]	; (8001ac4 <HAL_UART_MspInit+0xc4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d144      	bne.n	8001aba <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001a30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a34:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001a36:	2300      	movs	r3, #0
 8001a38:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 f9b6 	bl	8003db0 <HAL_RCCEx_PeriphCLKConfig>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a4a:	f7ff fafd 	bl	8001048 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <HAL_UART_MspInit+0xc8>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a1d      	ldr	r2, [pc, #116]	; (8001ac8 <HAL_UART_MspInit+0xc8>)
 8001a54:	f043 0320 	orr.w	r3, r3, #32
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_UART_MspInit+0xc8>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_UART_MspInit+0xc8>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a17      	ldr	r2, [pc, #92]	; (8001ac8 <HAL_UART_MspInit+0xc8>)
 8001a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_UART_MspInit+0xc8>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = RPiPicoW_TX_Pin|RPiPicoW_RX_Pin;
 8001a7e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001a82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a98:	2308      	movs	r3, #8
 8001a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4809      	ldr	r0, [pc, #36]	; (8001acc <HAL_UART_MspInit+0xcc>)
 8001aa6:	f000 fdcb 	bl	8002640 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2105      	movs	r1, #5
 8001aae:	2047      	movs	r0, #71	; 0x47
 8001ab0:	f000 f940 	bl	8001d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ab4:	2047      	movs	r0, #71	; 0x47
 8001ab6:	f000 f959 	bl	8001d6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001aba:	bf00      	nop
 8001abc:	37b8      	adds	r7, #184	; 0xb8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40011400 	.word	0x40011400
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40021800 	.word	0x40021800

08001ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ad6:	490e      	ldr	r1, [pc, #56]	; (8001b10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ad8:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aec:	4c0b      	ldr	r4, [pc, #44]	; (8001b1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001afa:	f7ff fe8d 	bl	8001818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afe:	f007 ffcb 	bl	8009a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b02:	f7ff f9d7 	bl	8000eb4 <main>
  bx  lr    
 8001b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b08:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001b14:	0800b3ac 	.word	0x0800b3ac
  ldr r2, =_sbss
 8001b18:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001b1c:	20005260 	.word	0x20005260

08001b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC_IRQHandler>

08001b22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b26:	2003      	movs	r0, #3
 8001b28:	f000 f8f9 	bl	8001d1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2c:	2005      	movs	r0, #5
 8001b2e:	f7ff fdbb 	bl	80016a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b32:	f7ff fd91 	bl	8001658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_IncTick+0x20>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_IncTick+0x24>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_IncTick+0x24>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000034 	.word	0x20000034
 8001b60:	2000073c 	.word	0x2000073c

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	2000073c 	.word	0x2000073c

08001b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b84:	f7ff ffee 	bl	8001b64 <HAL_GetTick>
 8001b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b94:	d005      	beq.n	8001ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_Delay+0x44>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ba2:	bf00      	nop
 8001ba4:	f7ff ffde 	bl	8001b64 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d8f7      	bhi.n	8001ba4 <HAL_Delay+0x28>
  {
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000034 	.word	0x20000034

08001bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <__NVIC_SetPriorityGrouping+0x40>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be0:	4013      	ands	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf2:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <__NVIC_SetPriorityGrouping+0x40>)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	60d3      	str	r3, [r2, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00
 8001c08:	05fa0000 	.word	0x05fa0000

08001c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <__NVIC_GetPriorityGrouping+0x18>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	f003 0307 	and.w	r3, r3, #7
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	db0b      	blt.n	8001c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	f003 021f 	and.w	r2, r3, #31
 8001c40:	4907      	ldr	r1, [pc, #28]	; (8001c60 <__NVIC_EnableIRQ+0x38>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	2001      	movs	r0, #1
 8001c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0a      	blt.n	8001c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	490c      	ldr	r1, [pc, #48]	; (8001cb0 <__NVIC_SetPriority+0x4c>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	0112      	lsls	r2, r2, #4
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c8c:	e00a      	b.n	8001ca4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4908      	ldr	r1, [pc, #32]	; (8001cb4 <__NVIC_SetPriority+0x50>)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	761a      	strb	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000e100 	.word	0xe000e100
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f1c3 0307 	rsb	r3, r3, #7
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	bf28      	it	cs
 8001cd6:	2304      	movcs	r3, #4
 8001cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d902      	bls.n	8001ce8 <NVIC_EncodePriority+0x30>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b03      	subs	r3, #3
 8001ce6:	e000      	b.n	8001cea <NVIC_EncodePriority+0x32>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	4313      	orrs	r3, r2
         );
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ff4c 	bl	8001bc4 <__NVIC_SetPriorityGrouping>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d46:	f7ff ff61 	bl	8001c0c <__NVIC_GetPriorityGrouping>
 8001d4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	6978      	ldr	r0, [r7, #20]
 8001d52:	f7ff ffb1 	bl	8001cb8 <NVIC_EncodePriority>
 8001d56:	4602      	mov	r2, r0
 8001d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff80 	bl	8001c64 <__NVIC_SetPriority>
}
 8001d64:	bf00      	nop
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ff54 	bl	8001c28 <__NVIC_EnableIRQ>
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e014      	b.n	8001dc4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	791b      	ldrb	r3, [r3, #4]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d105      	bne.n	8001db0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7fe fbf8 	bl	80005a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001de2:	d120      	bne.n	8001e26 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001df2:	d118      	bne.n	8001e26 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2204      	movs	r2, #4
 8001df8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f043 0201 	orr.w	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f82d 	bl	8001e80 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e34:	d120      	bne.n	8001e78 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e44:	d118      	bne.n	8001e78 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2204      	movs	r2, #4
 8001e4a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f043 0202 	orr.w	r2, r3, #2
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001e70:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f85d 	bl	8001f32 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	795b      	ldrb	r3, [r3, #5]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_DAC_ConfigChannel+0x18>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e03c      	b.n	8001f26 <HAL_DAC_ConfigChannel+0x92>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6819      	ldr	r1, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	22c0      	movs	r2, #192	; 0xc0
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	400a      	ands	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f54:	f7ff fe06 	bl	8001b64 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e099      	b.n	8002098 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f84:	e00f      	b.n	8001fa6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f86:	f7ff fded 	bl	8001b64 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d908      	bls.n	8001fa6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2220      	movs	r2, #32
 8001f98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e078      	b.n	8002098 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1e8      	bne.n	8001f86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_DMA_Init+0x158>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d107      	bne.n	8002010 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	4313      	orrs	r3, r2
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4313      	orrs	r3, r2
 800200e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f023 0307 	bic.w	r3, r3, #7
 8002026:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	4313      	orrs	r3, r2
 8002030:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	2b04      	cmp	r3, #4
 8002038:	d117      	bne.n	800206a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4313      	orrs	r3, r2
 8002042:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00e      	beq.n	800206a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 fa7b 	bl	8002548 <DMA_CheckFifoParam>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2240      	movs	r2, #64	; 0x40
 800205c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002066:	2301      	movs	r3, #1
 8002068:	e016      	b.n	8002098 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 fa32 	bl	80024dc <DMA_CalcBaseAndBitshift>
 8002078:	4603      	mov	r3, r0
 800207a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002080:	223f      	movs	r2, #63	; 0x3f
 8002082:	409a      	lsls	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	e010803f 	.word	0xe010803f

080020a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020b2:	f7ff fd57 	bl	8001b64 <HAL_GetTick>
 80020b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d008      	beq.n	80020d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2280      	movs	r2, #128	; 0x80
 80020c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e052      	b.n	800217c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0216 	bic.w	r2, r2, #22
 80020e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d103      	bne.n	8002106 <HAL_DMA_Abort+0x62>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002102:	2b00      	cmp	r3, #0
 8002104:	d007      	beq.n	8002116 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0208 	bic.w	r2, r2, #8
 8002114:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0201 	bic.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002126:	e013      	b.n	8002150 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002128:	f7ff fd1c 	bl	8001b64 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b05      	cmp	r3, #5
 8002134:	d90c      	bls.n	8002150 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2220      	movs	r2, #32
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2203      	movs	r2, #3
 8002140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e015      	b.n	800217c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1e4      	bne.n	8002128 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	223f      	movs	r2, #63	; 0x3f
 8002164:	409a      	lsls	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d004      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2280      	movs	r2, #128	; 0x80
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e00c      	b.n	80021bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2205      	movs	r2, #5
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0201 	bic.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80021d4:	4b8e      	ldr	r3, [pc, #568]	; (8002410 <HAL_DMA_IRQHandler+0x248>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a8e      	ldr	r2, [pc, #568]	; (8002414 <HAL_DMA_IRQHandler+0x24c>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	0a9b      	lsrs	r3, r3, #10
 80021e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f2:	2208      	movs	r2, #8
 80021f4:	409a      	lsls	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d01a      	beq.n	8002234 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d013      	beq.n	8002234 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0204 	bic.w	r2, r2, #4
 800221a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	2208      	movs	r2, #8
 8002222:	409a      	lsls	r2, r3
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222c:	f043 0201 	orr.w	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	2201      	movs	r2, #1
 800223a:	409a      	lsls	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d012      	beq.n	800226a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	2201      	movs	r2, #1
 8002258:	409a      	lsls	r2, r3
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002262:	f043 0202 	orr.w	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226e:	2204      	movs	r2, #4
 8002270:	409a      	lsls	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d012      	beq.n	80022a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00b      	beq.n	80022a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	2204      	movs	r2, #4
 800228e:	409a      	lsls	r2, r3
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002298:	f043 0204 	orr.w	r2, r3, #4
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	2210      	movs	r2, #16
 80022a6:	409a      	lsls	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d043      	beq.n	8002338 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d03c      	beq.n	8002338 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c2:	2210      	movs	r2, #16
 80022c4:	409a      	lsls	r2, r3
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d018      	beq.n	800230a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d108      	bne.n	80022f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d024      	beq.n	8002338 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
 80022f6:	e01f      	b.n	8002338 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d01b      	beq.n	8002338 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	4798      	blx	r3
 8002308:	e016      	b.n	8002338 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0208 	bic.w	r2, r2, #8
 8002326:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233c:	2220      	movs	r2, #32
 800233e:	409a      	lsls	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 808f 	beq.w	8002468 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 8087 	beq.w	8002468 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235e:	2220      	movs	r2, #32
 8002360:	409a      	lsls	r2, r3
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b05      	cmp	r3, #5
 8002370:	d136      	bne.n	80023e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0216 	bic.w	r2, r2, #22
 8002380:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002390:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d103      	bne.n	80023a2 <HAL_DMA_IRQHandler+0x1da>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d007      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0208 	bic.w	r2, r2, #8
 80023b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	223f      	movs	r2, #63	; 0x3f
 80023b8:	409a      	lsls	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d07e      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	4798      	blx	r3
        }
        return;
 80023de:	e079      	b.n	80024d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d01d      	beq.n	800242a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10d      	bne.n	8002418 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002400:	2b00      	cmp	r3, #0
 8002402:	d031      	beq.n	8002468 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	4798      	blx	r3
 800240c:	e02c      	b.n	8002468 <HAL_DMA_IRQHandler+0x2a0>
 800240e:	bf00      	nop
 8002410:	2000002c 	.word	0x2000002c
 8002414:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d023      	beq.n	8002468 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	4798      	blx	r3
 8002428:	e01e      	b.n	8002468 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10f      	bne.n	8002458 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0210 	bic.w	r2, r2, #16
 8002446:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	2b00      	cmp	r3, #0
 800246e:	d032      	beq.n	80024d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d022      	beq.n	80024c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2205      	movs	r2, #5
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	3301      	adds	r3, #1
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	429a      	cmp	r2, r3
 800249e:	d307      	bcc.n	80024b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f2      	bne.n	8002494 <HAL_DMA_IRQHandler+0x2cc>
 80024ae:	e000      	b.n	80024b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
 80024d2:	e000      	b.n	80024d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024d4:	bf00      	nop
    }
  }
}
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	3b10      	subs	r3, #16
 80024ec:	4a13      	ldr	r2, [pc, #76]	; (800253c <DMA_CalcBaseAndBitshift+0x60>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024f6:	4a12      	ldr	r2, [pc, #72]	; (8002540 <DMA_CalcBaseAndBitshift+0x64>)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4413      	add	r3, r2
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b03      	cmp	r3, #3
 8002508:	d908      	bls.n	800251c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <DMA_CalcBaseAndBitshift+0x68>)
 8002512:	4013      	ands	r3, r2
 8002514:	1d1a      	adds	r2, r3, #4
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	659a      	str	r2, [r3, #88]	; 0x58
 800251a:	e006      	b.n	800252a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <DMA_CalcBaseAndBitshift+0x68>)
 8002524:	4013      	ands	r3, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	aaaaaaab 	.word	0xaaaaaaab
 8002540:	0800b394 	.word	0x0800b394
 8002544:	fffffc00 	.word	0xfffffc00

08002548 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d11f      	bne.n	80025a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d856      	bhi.n	8002616 <DMA_CheckFifoParam+0xce>
 8002568:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <DMA_CheckFifoParam+0x28>)
 800256a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256e:	bf00      	nop
 8002570:	08002581 	.word	0x08002581
 8002574:	08002593 	.word	0x08002593
 8002578:	08002581 	.word	0x08002581
 800257c:	08002617 	.word	0x08002617
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d046      	beq.n	800261a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002590:	e043      	b.n	800261a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800259a:	d140      	bne.n	800261e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a0:	e03d      	b.n	800261e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025aa:	d121      	bne.n	80025f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d837      	bhi.n	8002622 <DMA_CheckFifoParam+0xda>
 80025b2:	a201      	add	r2, pc, #4	; (adr r2, 80025b8 <DMA_CheckFifoParam+0x70>)
 80025b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b8:	080025c9 	.word	0x080025c9
 80025bc:	080025cf 	.word	0x080025cf
 80025c0:	080025c9 	.word	0x080025c9
 80025c4:	080025e1 	.word	0x080025e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      break;
 80025cc:	e030      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d025      	beq.n	8002626 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025de:	e022      	b.n	8002626 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025e8:	d11f      	bne.n	800262a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025ee:	e01c      	b.n	800262a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d903      	bls.n	80025fe <DMA_CheckFifoParam+0xb6>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d003      	beq.n	8002604 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025fc:	e018      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
      break;
 8002602:	e015      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00e      	beq.n	800262e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
      break;
 8002614:	e00b      	b.n	800262e <DMA_CheckFifoParam+0xe6>
      break;
 8002616:	bf00      	nop
 8002618:	e00a      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 800261a:	bf00      	nop
 800261c:	e008      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 800261e:	bf00      	nop
 8002620:	e006      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 8002622:	bf00      	nop
 8002624:	e004      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 8002626:	bf00      	nop
 8002628:	e002      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;   
 800262a:	bf00      	nop
 800262c:	e000      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 800262e:	bf00      	nop
    }
  } 
  
  return status; 
 8002630:	7bfb      	ldrb	r3, [r7, #15]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop

08002640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e175      	b.n	800294c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002660:	2201      	movs	r2, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	f040 8164 	bne.w	8002946 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d005      	beq.n	8002696 <HAL_GPIO_Init+0x56>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d130      	bne.n	80026f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	2203      	movs	r2, #3
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026cc:	2201      	movs	r2, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 0201 	and.w	r2, r3, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b03      	cmp	r3, #3
 8002702:	d017      	beq.n	8002734 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2203      	movs	r2, #3
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d123      	bne.n	8002788 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	08da      	lsrs	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3208      	adds	r2, #8
 8002748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	220f      	movs	r2, #15
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	08da      	lsrs	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3208      	adds	r2, #8
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0203 	and.w	r2, r3, #3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80be 	beq.w	8002946 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ca:	4b66      	ldr	r3, [pc, #408]	; (8002964 <HAL_GPIO_Init+0x324>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	4a65      	ldr	r2, [pc, #404]	; (8002964 <HAL_GPIO_Init+0x324>)
 80027d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d4:	6453      	str	r3, [r2, #68]	; 0x44
 80027d6:	4b63      	ldr	r3, [pc, #396]	; (8002964 <HAL_GPIO_Init+0x324>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027e2:	4a61      	ldr	r2, [pc, #388]	; (8002968 <HAL_GPIO_Init+0x328>)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	089b      	lsrs	r3, r3, #2
 80027e8:	3302      	adds	r3, #2
 80027ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	220f      	movs	r2, #15
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a58      	ldr	r2, [pc, #352]	; (800296c <HAL_GPIO_Init+0x32c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d037      	beq.n	800287e <HAL_GPIO_Init+0x23e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a57      	ldr	r2, [pc, #348]	; (8002970 <HAL_GPIO_Init+0x330>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d031      	beq.n	800287a <HAL_GPIO_Init+0x23a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a56      	ldr	r2, [pc, #344]	; (8002974 <HAL_GPIO_Init+0x334>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d02b      	beq.n	8002876 <HAL_GPIO_Init+0x236>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a55      	ldr	r2, [pc, #340]	; (8002978 <HAL_GPIO_Init+0x338>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d025      	beq.n	8002872 <HAL_GPIO_Init+0x232>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a54      	ldr	r2, [pc, #336]	; (800297c <HAL_GPIO_Init+0x33c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01f      	beq.n	800286e <HAL_GPIO_Init+0x22e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a53      	ldr	r2, [pc, #332]	; (8002980 <HAL_GPIO_Init+0x340>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d019      	beq.n	800286a <HAL_GPIO_Init+0x22a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_GPIO_Init+0x344>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_GPIO_Init+0x226>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a51      	ldr	r2, [pc, #324]	; (8002988 <HAL_GPIO_Init+0x348>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00d      	beq.n	8002862 <HAL_GPIO_Init+0x222>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a50      	ldr	r2, [pc, #320]	; (800298c <HAL_GPIO_Init+0x34c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d007      	beq.n	800285e <HAL_GPIO_Init+0x21e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4f      	ldr	r2, [pc, #316]	; (8002990 <HAL_GPIO_Init+0x350>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d101      	bne.n	800285a <HAL_GPIO_Init+0x21a>
 8002856:	2309      	movs	r3, #9
 8002858:	e012      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800285a:	230a      	movs	r3, #10
 800285c:	e010      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800285e:	2308      	movs	r3, #8
 8002860:	e00e      	b.n	8002880 <HAL_GPIO_Init+0x240>
 8002862:	2307      	movs	r3, #7
 8002864:	e00c      	b.n	8002880 <HAL_GPIO_Init+0x240>
 8002866:	2306      	movs	r3, #6
 8002868:	e00a      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800286a:	2305      	movs	r3, #5
 800286c:	e008      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800286e:	2304      	movs	r3, #4
 8002870:	e006      	b.n	8002880 <HAL_GPIO_Init+0x240>
 8002872:	2303      	movs	r3, #3
 8002874:	e004      	b.n	8002880 <HAL_GPIO_Init+0x240>
 8002876:	2302      	movs	r3, #2
 8002878:	e002      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800287e:	2300      	movs	r3, #0
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	f002 0203 	and.w	r2, r2, #3
 8002886:	0092      	lsls	r2, r2, #2
 8002888:	4093      	lsls	r3, r2
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002890:	4935      	ldr	r1, [pc, #212]	; (8002968 <HAL_GPIO_Init+0x328>)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	3302      	adds	r3, #2
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800289e:	4b3d      	ldr	r3, [pc, #244]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028c2:	4a34      	ldr	r2, [pc, #208]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c8:	4b32      	ldr	r3, [pc, #200]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028ec:	4a29      	ldr	r2, [pc, #164]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028f2:	4b28      	ldr	r3, [pc, #160]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002916:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <HAL_GPIO_Init+0x354>)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_GPIO_Init+0x354>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002940:	4a14      	ldr	r2, [pc, #80]	; (8002994 <HAL_GPIO_Init+0x354>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3301      	adds	r3, #1
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	2b0f      	cmp	r3, #15
 8002950:	f67f ae86 	bls.w	8002660 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	3724      	adds	r7, #36	; 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	40013800 	.word	0x40013800
 800296c:	40020000 	.word	0x40020000
 8002970:	40020400 	.word	0x40020400
 8002974:	40020800 	.word	0x40020800
 8002978:	40020c00 	.word	0x40020c00
 800297c:	40021000 	.word	0x40021000
 8002980:	40021400 	.word	0x40021400
 8002984:	40021800 	.word	0x40021800
 8002988:	40021c00 	.word	0x40021c00
 800298c:	40022000 	.word	0x40022000
 8002990:	40022400 	.word	0x40022400
 8002994:	40013c00 	.word	0x40013c00

08002998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
 80029a4:	4613      	mov	r3, r2
 80029a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a8:	787b      	ldrb	r3, [r7, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ae:	887a      	ldrh	r2, [r7, #2]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029b4:	e003      	b.n	80029be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	041a      	lsls	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	619a      	str	r2, [r3, #24]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029dc:	887a      	ldrh	r2, [r7, #2]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4013      	ands	r3, r2
 80029e2:	041a      	lsls	r2, r3, #16
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	43d9      	mvns	r1, r3
 80029e8:	887b      	ldrh	r3, [r7, #2]
 80029ea:	400b      	ands	r3, r1
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	619a      	str	r2, [r3, #24]
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e07f      	b.n	8002b12 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fe f9e4 	bl	8000df4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2224      	movs	r2, #36	; 0x24
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d107      	bne.n	8002a7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	e006      	b.n	8002a88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d104      	bne.n	8002a9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <HAL_I2C_Init+0x11c>)
 8002aa6:	430b      	orrs	r3, r1
 8002aa8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ab8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69d9      	ldr	r1, [r3, #28]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1a      	ldr	r2, [r3, #32]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	02008000 	.word	0x02008000

08002b20 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	4608      	mov	r0, r1
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4603      	mov	r3, r0
 8002b30:	817b      	strh	r3, [r7, #10]
 8002b32:	460b      	mov	r3, r1
 8002b34:	813b      	strh	r3, [r7, #8]
 8002b36:	4613      	mov	r3, r2
 8002b38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	f040 80f9 	bne.w	8002d3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_I2C_Mem_Write+0x34>
 8002b4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0ed      	b.n	8002d3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_I2C_Mem_Write+0x4e>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e0e6      	b.n	8002d3c <HAL_I2C_Mem_Write+0x21c>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b76:	f7fe fff5 	bl	8001b64 <HAL_GetTick>
 8002b7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2319      	movs	r3, #25
 8002b82:	2201      	movs	r2, #1
 8002b84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f955 	bl	8002e38 <I2C_WaitOnFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0d1      	b.n	8002d3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2221      	movs	r2, #33	; 0x21
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2240      	movs	r2, #64	; 0x40
 8002ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a3a      	ldr	r2, [r7, #32]
 8002bb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bc0:	88f8      	ldrh	r0, [r7, #6]
 8002bc2:	893a      	ldrh	r2, [r7, #8]
 8002bc4:	8979      	ldrh	r1, [r7, #10]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	9301      	str	r3, [sp, #4]
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	4603      	mov	r3, r0
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f8b9 	bl	8002d48 <I2C_RequestMemoryWrite>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0a9      	b.n	8002d3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2bff      	cmp	r3, #255	; 0xff
 8002bf0:	d90e      	bls.n	8002c10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	22ff      	movs	r2, #255	; 0xff
 8002bf6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	8979      	ldrh	r1, [r7, #10]
 8002c00:	2300      	movs	r3, #0
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fab1 	bl	8003170 <I2C_TransferConfig>
 8002c0e:	e00f      	b.n	8002c30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	8979      	ldrh	r1, [r7, #10]
 8002c22:	2300      	movs	r3, #0
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 faa0 	bl	8003170 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f93f 	bl	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e07b      	b.n	8002d3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d034      	beq.n	8002ce8 <HAL_I2C_Mem_Write+0x1c8>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d130      	bne.n	8002ce8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2180      	movs	r1, #128	; 0x80
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f8d1 	bl	8002e38 <I2C_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e04d      	b.n	8002d3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2bff      	cmp	r3, #255	; 0xff
 8002ca8:	d90e      	bls.n	8002cc8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	22ff      	movs	r2, #255	; 0xff
 8002cae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	8979      	ldrh	r1, [r7, #10]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fa55 	bl	8003170 <I2C_TransferConfig>
 8002cc6:	e00f      	b.n	8002ce8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	8979      	ldrh	r1, [r7, #10]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fa44 	bl	8003170 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d19e      	bne.n	8002c30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f91e 	bl	8002f38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e01a      	b.n	8002d3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_I2C_Mem_Write+0x224>)
 8002d1a:	400b      	ands	r3, r1
 8002d1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e000      	b.n	8002d3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
  }
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	fe00e800 	.word	0xfe00e800

08002d48 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	4608      	mov	r0, r1
 8002d52:	4611      	mov	r1, r2
 8002d54:	461a      	mov	r2, r3
 8002d56:	4603      	mov	r3, r0
 8002d58:	817b      	strh	r3, [r7, #10]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	813b      	strh	r3, [r7, #8]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	8979      	ldrh	r1, [r7, #10]
 8002d68:	4b20      	ldr	r3, [pc, #128]	; (8002dec <I2C_RequestMemoryWrite+0xa4>)
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f9fd 	bl	8003170 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	69b9      	ldr	r1, [r7, #24]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f89c 	bl	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e02c      	b.n	8002de4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d105      	bne.n	8002d9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d90:	893b      	ldrh	r3, [r7, #8]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	629a      	str	r2, [r3, #40]	; 0x28
 8002d9a:	e015      	b.n	8002dc8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d9c:	893b      	ldrh	r3, [r7, #8]
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	69b9      	ldr	r1, [r7, #24]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f882 	bl	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e012      	b.n	8002de4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dbe:	893b      	ldrh	r3, [r7, #8]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2180      	movs	r1, #128	; 0x80
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f830 	bl	8002e38 <I2C_WaitOnFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	80002000 	.word	0x80002000

08002df0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d103      	bne.n	8002e0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d007      	beq.n	8002e2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	619a      	str	r2, [r3, #24]
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e48:	e022      	b.n	8002e90 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e50:	d01e      	beq.n	8002e90 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e52:	f7fe fe87 	bl	8001b64 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d302      	bcc.n	8002e68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d113      	bne.n	8002e90 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e00f      	b.n	8002eb0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d0cd      	beq.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ec4:	e02c      	b.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f870 	bl	8002fb0 <I2C_IsErrorOccurred>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e02a      	b.n	8002f30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d01e      	beq.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee2:	f7fe fe3f 	bl	8001b64 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d302      	bcc.n	8002ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d113      	bne.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e007      	b.n	8002f30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d1cb      	bne.n	8002ec6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f44:	e028      	b.n	8002f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f830 	bl	8002fb0 <I2C_IsErrorOccurred>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e026      	b.n	8002fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5a:	f7fe fe03 	bl	8001b64 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d302      	bcc.n	8002f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d113      	bne.n	8002f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	f043 0220 	orr.w	r2, r3, #32
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e007      	b.n	8002fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b20      	cmp	r3, #32
 8002fa4:	d1cf      	bne.n	8002f46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	; 0x28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d068      	beq.n	80030ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fe4:	e049      	b.n	800307a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d045      	beq.n	800307a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fee:	f7fe fdb9 	bl	8001b64 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d302      	bcc.n	8003004 <I2C_IsErrorOccurred+0x54>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d13a      	bne.n	800307a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003016:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003026:	d121      	bne.n	800306c <I2C_IsErrorOccurred+0xbc>
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800302e:	d01d      	beq.n	800306c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	2b20      	cmp	r3, #32
 8003034:	d01a      	beq.n	800306c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003044:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003046:	f7fe fd8d 	bl	8001b64 <HAL_GetTick>
 800304a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800304c:	e00e      	b.n	800306c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800304e:	f7fe fd89 	bl	8001b64 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b19      	cmp	r3, #25
 800305a:	d907      	bls.n	800306c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	f043 0320 	orr.w	r3, r3, #32
 8003062:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800306a:	e006      	b.n	800307a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b20      	cmp	r3, #32
 8003078:	d1e9      	bne.n	800304e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b20      	cmp	r3, #32
 8003086:	d003      	beq.n	8003090 <I2C_IsErrorOccurred+0xe0>
 8003088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0aa      	beq.n	8002fe6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003094:	2b00      	cmp	r3, #0
 8003096:	d103      	bne.n	80030a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2220      	movs	r2, #32
 800309e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	f043 0304 	orr.w	r3, r3, #4
 80030a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00b      	beq.n	80030d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00b      	beq.n	80030fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	f043 0308 	orr.w	r3, r3, #8
 80030e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00b      	beq.n	800311c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	f043 0302 	orr.w	r3, r3, #2
 800310a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003114:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800311c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003120:	2b00      	cmp	r3, #0
 8003122:	d01c      	beq.n	800315e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f7ff fe63 	bl	8002df0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b0d      	ldr	r3, [pc, #52]	; (800316c <I2C_IsErrorOccurred+0x1bc>)
 8003136:	400b      	ands	r3, r1
 8003138:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	431a      	orrs	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800315e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003162:	4618      	mov	r0, r3
 8003164:	3728      	adds	r7, #40	; 0x28
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	fe00e800 	.word	0xfe00e800

08003170 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	817b      	strh	r3, [r7, #10]
 800317e:	4613      	mov	r3, r2
 8003180:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003182:	897b      	ldrh	r3, [r7, #10]
 8003184:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003188:	7a7b      	ldrb	r3, [r7, #9]
 800318a:	041b      	lsls	r3, r3, #16
 800318c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003190:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	4313      	orrs	r3, r2
 800319a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800319e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	0d5b      	lsrs	r3, r3, #21
 80031aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031ae:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <I2C_TransferConfig+0x60>)
 80031b0:	430b      	orrs	r3, r1
 80031b2:	43db      	mvns	r3, r3
 80031b4:	ea02 0103 	and.w	r1, r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	03ff63ff 	.word	0x03ff63ff

080031d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d138      	bne.n	800325c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e032      	b.n	800325e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2224      	movs	r2, #36	; 0x24
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003226:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6819      	ldr	r1, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	e000      	b.n	800325e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800325c:	2302      	movs	r3, #2
  }
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800326a:	b480      	push	{r7}
 800326c:	b085      	sub	sp, #20
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b20      	cmp	r3, #32
 800327e:	d139      	bne.n	80032f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800328a:	2302      	movs	r3, #2
 800328c:	e033      	b.n	80032f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2224      	movs	r2, #36	; 0x24
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0201 	bic.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	e000      	b.n	80032f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032f4:	2302      	movs	r3, #2
  }
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	4b23      	ldr	r3, [pc, #140]	; (800339c <HAL_PWREx_EnableOverDrive+0x98>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	4a22      	ldr	r2, [pc, #136]	; (800339c <HAL_PWREx_EnableOverDrive+0x98>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003318:	6413      	str	r3, [r2, #64]	; 0x40
 800331a:	4b20      	ldr	r3, [pc, #128]	; (800339c <HAL_PWREx_EnableOverDrive+0x98>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003326:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a1d      	ldr	r2, [pc, #116]	; (80033a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003332:	f7fe fc17 	bl	8001b64 <HAL_GetTick>
 8003336:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003338:	e009      	b.n	800334e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800333a:	f7fe fc13 	bl	8001b64 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003348:	d901      	bls.n	800334e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e022      	b.n	8003394 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800334e:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800335a:	d1ee      	bne.n	800333a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800335c:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a0f      	ldr	r2, [pc, #60]	; (80033a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003366:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003368:	f7fe fbfc 	bl	8001b64 <HAL_GetTick>
 800336c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800336e:	e009      	b.n	8003384 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003370:	f7fe fbf8 	bl	8001b64 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800337e:	d901      	bls.n	8003384 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e007      	b.n	8003394 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003390:	d1ee      	bne.n	8003370 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40023800 	.word	0x40023800
 80033a0:	40007000 	.word	0x40007000

080033a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033ac:	2300      	movs	r3, #0
 80033ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e29b      	b.n	80038f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8087 	beq.w	80034d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033c8:	4b96      	ldr	r3, [pc, #600]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 030c 	and.w	r3, r3, #12
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d00c      	beq.n	80033ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d4:	4b93      	ldr	r3, [pc, #588]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 030c 	and.w	r3, r3, #12
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d112      	bne.n	8003406 <HAL_RCC_OscConfig+0x62>
 80033e0:	4b90      	ldr	r3, [pc, #576]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ec:	d10b      	bne.n	8003406 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ee:	4b8d      	ldr	r3, [pc, #564]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d06c      	beq.n	80034d4 <HAL_RCC_OscConfig+0x130>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d168      	bne.n	80034d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e275      	b.n	80038f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340e:	d106      	bne.n	800341e <HAL_RCC_OscConfig+0x7a>
 8003410:	4b84      	ldr	r3, [pc, #528]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a83      	ldr	r2, [pc, #524]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	e02e      	b.n	800347c <HAL_RCC_OscConfig+0xd8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x9c>
 8003426:	4b7f      	ldr	r3, [pc, #508]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a7e      	ldr	r2, [pc, #504]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 800342c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b7c      	ldr	r3, [pc, #496]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a7b      	ldr	r2, [pc, #492]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e01d      	b.n	800347c <HAL_RCC_OscConfig+0xd8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003448:	d10c      	bne.n	8003464 <HAL_RCC_OscConfig+0xc0>
 800344a:	4b76      	ldr	r3, [pc, #472]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a75      	ldr	r2, [pc, #468]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	4b73      	ldr	r3, [pc, #460]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a72      	ldr	r2, [pc, #456]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 800345c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	e00b      	b.n	800347c <HAL_RCC_OscConfig+0xd8>
 8003464:	4b6f      	ldr	r3, [pc, #444]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a6e      	ldr	r2, [pc, #440]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 800346a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	4b6c      	ldr	r3, [pc, #432]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a6b      	ldr	r2, [pc, #428]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800347a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d013      	beq.n	80034ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fe fb6e 	bl	8001b64 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800348c:	f7fe fb6a 	bl	8001b64 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	; 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e229      	b.n	80038f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349e:	4b61      	ldr	r3, [pc, #388]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0xe8>
 80034aa:	e014      	b.n	80034d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fe fb5a 	bl	8001b64 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b4:	f7fe fb56 	bl	8001b64 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	; 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e215      	b.n	80038f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c6:	4b57      	ldr	r3, [pc, #348]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x110>
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d069      	beq.n	80035b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034e2:	4b50      	ldr	r3, [pc, #320]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00b      	beq.n	8003506 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ee:	4b4d      	ldr	r3, [pc, #308]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d11c      	bne.n	8003534 <HAL_RCC_OscConfig+0x190>
 80034fa:	4b4a      	ldr	r3, [pc, #296]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d116      	bne.n	8003534 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003506:	4b47      	ldr	r3, [pc, #284]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_RCC_OscConfig+0x17a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d001      	beq.n	800351e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e1e9      	b.n	80038f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351e:	4b41      	ldr	r3, [pc, #260]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	493d      	ldr	r1, [pc, #244]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003532:	e040      	b.n	80035b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d023      	beq.n	8003584 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800353c:	4b39      	ldr	r3, [pc, #228]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a38      	ldr	r2, [pc, #224]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fe fb0c 	bl	8001b64 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003550:	f7fe fb08 	bl	8001b64 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e1c7      	b.n	80038f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003562:	4b30      	ldr	r3, [pc, #192]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356e:	4b2d      	ldr	r3, [pc, #180]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4929      	ldr	r1, [pc, #164]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]
 8003582:	e018      	b.n	80035b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003584:	4b27      	ldr	r3, [pc, #156]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a26      	ldr	r2, [pc, #152]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 800358a:	f023 0301 	bic.w	r3, r3, #1
 800358e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fe fae8 	bl	8001b64 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003598:	f7fe fae4 	bl	8001b64 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e1a3      	b.n	80038f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035aa:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d038      	beq.n	8003634 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d019      	beq.n	80035fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ca:	4b16      	ldr	r3, [pc, #88]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 80035cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ce:	4a15      	ldr	r2, [pc, #84]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d6:	f7fe fac5 	bl	8001b64 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035de:	f7fe fac1 	bl	8001b64 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e180      	b.n	80038f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f0:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 80035f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x23a>
 80035fc:	e01a      	b.n	8003634 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003602:	4a08      	ldr	r2, [pc, #32]	; (8003624 <HAL_RCC_OscConfig+0x280>)
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360a:	f7fe faab 	bl	8001b64 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	e00a      	b.n	8003628 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003612:	f7fe faa7 	bl	8001b64 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d903      	bls.n	8003628 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e166      	b.n	80038f2 <HAL_RCC_OscConfig+0x54e>
 8003624:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003628:	4b92      	ldr	r3, [pc, #584]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 800362a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1ee      	bne.n	8003612 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80a4 	beq.w	800378a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003642:	4b8c      	ldr	r3, [pc, #560]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10d      	bne.n	800366a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800364e:	4b89      	ldr	r3, [pc, #548]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	4a88      	ldr	r2, [pc, #544]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 8003654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003658:	6413      	str	r3, [r2, #64]	; 0x40
 800365a:	4b86      	ldr	r3, [pc, #536]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003666:	2301      	movs	r3, #1
 8003668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800366a:	4b83      	ldr	r3, [pc, #524]	; (8003878 <HAL_RCC_OscConfig+0x4d4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d118      	bne.n	80036a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003676:	4b80      	ldr	r3, [pc, #512]	; (8003878 <HAL_RCC_OscConfig+0x4d4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a7f      	ldr	r2, [pc, #508]	; (8003878 <HAL_RCC_OscConfig+0x4d4>)
 800367c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003682:	f7fe fa6f 	bl	8001b64 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368a:	f7fe fa6b 	bl	8001b64 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b64      	cmp	r3, #100	; 0x64
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e12a      	b.n	80038f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800369c:	4b76      	ldr	r3, [pc, #472]	; (8003878 <HAL_RCC_OscConfig+0x4d4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d106      	bne.n	80036be <HAL_RCC_OscConfig+0x31a>
 80036b0:	4b70      	ldr	r3, [pc, #448]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	4a6f      	ldr	r2, [pc, #444]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	6713      	str	r3, [r2, #112]	; 0x70
 80036bc:	e02d      	b.n	800371a <HAL_RCC_OscConfig+0x376>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0x33c>
 80036c6:	4b6b      	ldr	r3, [pc, #428]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	4a6a      	ldr	r2, [pc, #424]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	6713      	str	r3, [r2, #112]	; 0x70
 80036d2:	4b68      	ldr	r3, [pc, #416]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	4a67      	ldr	r2, [pc, #412]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 80036d8:	f023 0304 	bic.w	r3, r3, #4
 80036dc:	6713      	str	r3, [r2, #112]	; 0x70
 80036de:	e01c      	b.n	800371a <HAL_RCC_OscConfig+0x376>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b05      	cmp	r3, #5
 80036e6:	d10c      	bne.n	8003702 <HAL_RCC_OscConfig+0x35e>
 80036e8:	4b62      	ldr	r3, [pc, #392]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	4a61      	ldr	r2, [pc, #388]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 80036ee:	f043 0304 	orr.w	r3, r3, #4
 80036f2:	6713      	str	r3, [r2, #112]	; 0x70
 80036f4:	4b5f      	ldr	r3, [pc, #380]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 80036f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f8:	4a5e      	ldr	r2, [pc, #376]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003700:	e00b      	b.n	800371a <HAL_RCC_OscConfig+0x376>
 8003702:	4b5c      	ldr	r3, [pc, #368]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	4a5b      	ldr	r2, [pc, #364]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	6713      	str	r3, [r2, #112]	; 0x70
 800370e:	4b59      	ldr	r3, [pc, #356]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	4a58      	ldr	r2, [pc, #352]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 8003714:	f023 0304 	bic.w	r3, r3, #4
 8003718:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d015      	beq.n	800374e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003722:	f7fe fa1f 	bl	8001b64 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003728:	e00a      	b.n	8003740 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372a:	f7fe fa1b 	bl	8001b64 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f241 3288 	movw	r2, #5000	; 0x1388
 8003738:	4293      	cmp	r3, r2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e0d8      	b.n	80038f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003740:	4b4c      	ldr	r3, [pc, #304]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 8003742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0ee      	beq.n	800372a <HAL_RCC_OscConfig+0x386>
 800374c:	e014      	b.n	8003778 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374e:	f7fe fa09 	bl	8001b64 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003754:	e00a      	b.n	800376c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003756:	f7fe fa05 	bl	8001b64 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	f241 3288 	movw	r2, #5000	; 0x1388
 8003764:	4293      	cmp	r3, r2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e0c2      	b.n	80038f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376c:	4b41      	ldr	r3, [pc, #260]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1ee      	bne.n	8003756 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d105      	bne.n	800378a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377e:	4b3d      	ldr	r3, [pc, #244]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	4a3c      	ldr	r2, [pc, #240]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 8003784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003788:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80ae 	beq.w	80038f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003794:	4b37      	ldr	r3, [pc, #220]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 030c 	and.w	r3, r3, #12
 800379c:	2b08      	cmp	r3, #8
 800379e:	d06d      	beq.n	800387c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d14b      	bne.n	8003840 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a8:	4b32      	ldr	r3, [pc, #200]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a31      	ldr	r2, [pc, #196]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 80037ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fe f9d6 	bl	8001b64 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037bc:	f7fe f9d2 	bl	8001b64 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e091      	b.n	80038f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	4b29      	ldr	r3, [pc, #164]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69da      	ldr	r2, [r3, #28]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	019b      	lsls	r3, r3, #6
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	085b      	lsrs	r3, r3, #1
 80037f2:	3b01      	subs	r3, #1
 80037f4:	041b      	lsls	r3, r3, #16
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	061b      	lsls	r3, r3, #24
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	071b      	lsls	r3, r3, #28
 8003806:	491b      	ldr	r1, [pc, #108]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 8003808:	4313      	orrs	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800380c:	4b19      	ldr	r3, [pc, #100]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a18      	ldr	r2, [pc, #96]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 8003812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7fe f9a4 	bl	8001b64 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003820:	f7fe f9a0 	bl	8001b64 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e05f      	b.n	80038f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003832:	4b10      	ldr	r3, [pc, #64]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0x47c>
 800383e:	e057      	b.n	80038f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003840:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a0b      	ldr	r2, [pc, #44]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 8003846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800384a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384c:	f7fe f98a 	bl	8001b64 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003854:	f7fe f986 	bl	8001b64 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e045      	b.n	80038f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003866:	4b03      	ldr	r3, [pc, #12]	; (8003874 <HAL_RCC_OscConfig+0x4d0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x4b0>
 8003872:	e03d      	b.n	80038f0 <HAL_RCC_OscConfig+0x54c>
 8003874:	40023800 	.word	0x40023800
 8003878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800387c:	4b1f      	ldr	r3, [pc, #124]	; (80038fc <HAL_RCC_OscConfig+0x558>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d030      	beq.n	80038ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d129      	bne.n	80038ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d122      	bne.n	80038ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038ac:	4013      	ands	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d119      	bne.n	80038ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	085b      	lsrs	r3, r3, #1
 80038c4:	3b01      	subs	r3, #1
 80038c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d10f      	bne.n	80038ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d107      	bne.n	80038ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800

08003900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0d0      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003918:	4b6a      	ldr	r3, [pc, #424]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d910      	bls.n	8003948 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b67      	ldr	r3, [pc, #412]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 020f 	bic.w	r2, r3, #15
 800392e:	4965      	ldr	r1, [pc, #404]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b63      	ldr	r3, [pc, #396]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0b8      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d020      	beq.n	8003996 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003960:	4b59      	ldr	r3, [pc, #356]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4a58      	ldr	r2, [pc, #352]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8003966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800396a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003978:	4b53      	ldr	r3, [pc, #332]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	4a52      	ldr	r2, [pc, #328]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 800397e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003982:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003984:	4b50      	ldr	r3, [pc, #320]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	494d      	ldr	r1, [pc, #308]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d040      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039aa:	4b47      	ldr	r3, [pc, #284]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d115      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e07f      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d107      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c2:	4b41      	ldr	r3, [pc, #260]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e073      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d2:	4b3d      	ldr	r3, [pc, #244]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e06b      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039e2:	4b39      	ldr	r3, [pc, #228]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f023 0203 	bic.w	r2, r3, #3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4936      	ldr	r1, [pc, #216]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f4:	f7fe f8b6 	bl	8001b64 <HAL_GetTick>
 80039f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fa:	e00a      	b.n	8003a12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039fc:	f7fe f8b2 	bl	8001b64 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e053      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a12:	4b2d      	ldr	r3, [pc, #180]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 020c 	and.w	r2, r3, #12
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d1eb      	bne.n	80039fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a24:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d210      	bcs.n	8003a54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a32:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 020f 	bic.w	r2, r3, #15
 8003a3a:	4922      	ldr	r1, [pc, #136]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a42:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e032      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a60:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4916      	ldr	r1, [pc, #88]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a7e:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	490e      	ldr	r1, [pc, #56]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a92:	f000 f821 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8003a96:	4602      	mov	r2, r0
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	091b      	lsrs	r3, r3, #4
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	490a      	ldr	r1, [pc, #40]	; (8003acc <HAL_RCC_ClockConfig+0x1cc>)
 8003aa4:	5ccb      	ldrb	r3, [r1, r3]
 8003aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aaa:	4a09      	ldr	r2, [pc, #36]	; (8003ad0 <HAL_RCC_ClockConfig+0x1d0>)
 8003aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003aae:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <HAL_RCC_ClockConfig+0x1d4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fd fdf8 	bl	80016a8 <HAL_InitTick>

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40023c00 	.word	0x40023c00
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	0800b37c 	.word	0x0800b37c
 8003ad0:	2000002c 	.word	0x2000002c
 8003ad4:	20000030 	.word	0x20000030

08003ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003adc:	b094      	sub	sp, #80	; 0x50
 8003ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae8:	2300      	movs	r3, #0
 8003aea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af0:	4b79      	ldr	r3, [pc, #484]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d00d      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0x40>
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	f200 80e1 	bhi.w	8003cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x34>
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d003      	beq.n	8003b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b0a:	e0db      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b0c:	4b73      	ldr	r3, [pc, #460]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8003b0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b10:	e0db      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b12:	4b73      	ldr	r3, [pc, #460]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b16:	e0d8      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b18:	4b6f      	ldr	r3, [pc, #444]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b20:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b22:	4b6d      	ldr	r3, [pc, #436]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d063      	beq.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2e:	4b6a      	ldr	r3, [pc, #424]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	099b      	lsrs	r3, r3, #6
 8003b34:	2200      	movs	r2, #0
 8003b36:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b40:	633b      	str	r3, [r7, #48]	; 0x30
 8003b42:	2300      	movs	r3, #0
 8003b44:	637b      	str	r3, [r7, #52]	; 0x34
 8003b46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b4a:	4622      	mov	r2, r4
 8003b4c:	462b      	mov	r3, r5
 8003b4e:	f04f 0000 	mov.w	r0, #0
 8003b52:	f04f 0100 	mov.w	r1, #0
 8003b56:	0159      	lsls	r1, r3, #5
 8003b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b5c:	0150      	lsls	r0, r2, #5
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4621      	mov	r1, r4
 8003b64:	1a51      	subs	r1, r2, r1
 8003b66:	6139      	str	r1, [r7, #16]
 8003b68:	4629      	mov	r1, r5
 8003b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b7c:	4659      	mov	r1, fp
 8003b7e:	018b      	lsls	r3, r1, #6
 8003b80:	4651      	mov	r1, sl
 8003b82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b86:	4651      	mov	r1, sl
 8003b88:	018a      	lsls	r2, r1, #6
 8003b8a:	4651      	mov	r1, sl
 8003b8c:	ebb2 0801 	subs.w	r8, r2, r1
 8003b90:	4659      	mov	r1, fp
 8003b92:	eb63 0901 	sbc.w	r9, r3, r1
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003baa:	4690      	mov	r8, r2
 8003bac:	4699      	mov	r9, r3
 8003bae:	4623      	mov	r3, r4
 8003bb0:	eb18 0303 	adds.w	r3, r8, r3
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	462b      	mov	r3, r5
 8003bb8:	eb49 0303 	adc.w	r3, r9, r3
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bca:	4629      	mov	r1, r5
 8003bcc:	024b      	lsls	r3, r1, #9
 8003bce:	4621      	mov	r1, r4
 8003bd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	024a      	lsls	r2, r1, #9
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bde:	2200      	movs	r2, #0
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003be4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003be8:	f7fc fb32 	bl	8000250 <__aeabi_uldivmod>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bf4:	e058      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf6:	4b38      	ldr	r3, [pc, #224]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	099b      	lsrs	r3, r3, #6
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	4611      	mov	r1, r2
 8003c02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c06:	623b      	str	r3, [r7, #32]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c10:	4642      	mov	r2, r8
 8003c12:	464b      	mov	r3, r9
 8003c14:	f04f 0000 	mov.w	r0, #0
 8003c18:	f04f 0100 	mov.w	r1, #0
 8003c1c:	0159      	lsls	r1, r3, #5
 8003c1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c22:	0150      	lsls	r0, r2, #5
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4641      	mov	r1, r8
 8003c2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c2e:	4649      	mov	r1, r9
 8003c30:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c48:	ebb2 040a 	subs.w	r4, r2, sl
 8003c4c:	eb63 050b 	sbc.w	r5, r3, fp
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	00eb      	lsls	r3, r5, #3
 8003c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c5e:	00e2      	lsls	r2, r4, #3
 8003c60:	4614      	mov	r4, r2
 8003c62:	461d      	mov	r5, r3
 8003c64:	4643      	mov	r3, r8
 8003c66:	18e3      	adds	r3, r4, r3
 8003c68:	603b      	str	r3, [r7, #0]
 8003c6a:	464b      	mov	r3, r9
 8003c6c:	eb45 0303 	adc.w	r3, r5, r3
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c7e:	4629      	mov	r1, r5
 8003c80:	028b      	lsls	r3, r1, #10
 8003c82:	4621      	mov	r1, r4
 8003c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c88:	4621      	mov	r1, r4
 8003c8a:	028a      	lsls	r2, r1, #10
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c92:	2200      	movs	r2, #0
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	61fa      	str	r2, [r7, #28]
 8003c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c9c:	f7fc fad8 	bl	8000250 <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	0c1b      	lsrs	r3, r3, #16
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003cb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cc2:	e002      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8003cc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3750      	adds	r7, #80	; 0x50
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	00f42400 	.word	0x00f42400
 8003ce0:	007a1200 	.word	0x007a1200

08003ce4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce8:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cea:	681b      	ldr	r3, [r3, #0]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	2000002c 	.word	0x2000002c

08003cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d00:	f7ff fff0 	bl	8003ce4 <HAL_RCC_GetHCLKFreq>
 8003d04:	4602      	mov	r2, r0
 8003d06:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	0a9b      	lsrs	r3, r3, #10
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	4903      	ldr	r1, [pc, #12]	; (8003d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d12:	5ccb      	ldrb	r3, [r1, r3]
 8003d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	0800b38c 	.word	0x0800b38c

08003d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d28:	f7ff ffdc 	bl	8003ce4 <HAL_RCC_GetHCLKFreq>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	0b5b      	lsrs	r3, r3, #13
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	4903      	ldr	r1, [pc, #12]	; (8003d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d3a:	5ccb      	ldrb	r3, [r1, r3]
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40023800 	.word	0x40023800
 8003d48:	0800b38c 	.word	0x0800b38c

08003d4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	220f      	movs	r2, #15
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d5c:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 0203 	and.w	r2, r3, #3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d68:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d74:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	08db      	lsrs	r3, r3, #3
 8003d86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d8e:	4b07      	ldr	r3, [pc, #28]	; (8003dac <HAL_RCC_GetClockConfig+0x60>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 020f 	and.w	r2, r3, #15
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	601a      	str	r2, [r3, #0]
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	40023c00 	.word	0x40023c00

08003db0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d012      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dd8:	4b69      	ldr	r3, [pc, #420]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	4a68      	ldr	r2, [pc, #416]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dde:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003de2:	6093      	str	r3, [r2, #8]
 8003de4:	4b66      	ldr	r3, [pc, #408]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	4964      	ldr	r1, [pc, #400]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d017      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e0a:	4b5d      	ldr	r3, [pc, #372]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e18:	4959      	ldr	r1, [pc, #356]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e28:	d101      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e36:	2301      	movs	r3, #1
 8003e38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d017      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e46:	4b4e      	ldr	r3, [pc, #312]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	494a      	ldr	r1, [pc, #296]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e64:	d101      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e66:	2301      	movs	r3, #1
 8003e68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e72:	2301      	movs	r3, #1
 8003e74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e82:	2301      	movs	r3, #1
 8003e84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 808b 	beq.w	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e94:	4b3a      	ldr	r3, [pc, #232]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	4a39      	ldr	r2, [pc, #228]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003ea0:	4b37      	ldr	r3, [pc, #220]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003eac:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a34      	ldr	r2, [pc, #208]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb8:	f7fd fe54 	bl	8001b64 <HAL_GetTick>
 8003ebc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec0:	f7fd fe50 	bl	8001b64 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	; 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e38f      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ed2:	4b2c      	ldr	r3, [pc, #176]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ede:	4b28      	ldr	r3, [pc, #160]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d035      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d02e      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003efc:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f06:	4b1e      	ldr	r3, [pc, #120]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f10:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f12:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f16:	4a1a      	ldr	r2, [pc, #104]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f1e:	4a18      	ldr	r2, [pc, #96]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f24:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d114      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fd fe18 	bl	8001b64 <HAL_GetTick>
 8003f34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f36:	e00a      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f38:	f7fd fe14 	bl	8001b64 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e351      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4e:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0ee      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f66:	d111      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f74:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f76:	400b      	ands	r3, r1
 8003f78:	4901      	ldr	r1, [pc, #4]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
 8003f7e:	e00b      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40007000 	.word	0x40007000
 8003f88:	0ffffcff 	.word	0x0ffffcff
 8003f8c:	4bac      	ldr	r3, [pc, #688]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4aab      	ldr	r2, [pc, #684]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f96:	6093      	str	r3, [r2, #8]
 8003f98:	4ba9      	ldr	r3, [pc, #676]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa4:	49a6      	ldr	r1, [pc, #664]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d010      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fb6:	4ba2      	ldr	r3, [pc, #648]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fbc:	4aa0      	ldr	r2, [pc, #640]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003fc6:	4b9e      	ldr	r3, [pc, #632]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	499b      	ldr	r1, [pc, #620]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fe4:	4b96      	ldr	r3, [pc, #600]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff2:	4993      	ldr	r1, [pc, #588]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004006:	4b8e      	ldr	r3, [pc, #568]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004014:	498a      	ldr	r1, [pc, #552]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004028:	4b85      	ldr	r3, [pc, #532]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004036:	4982      	ldr	r1, [pc, #520]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800404a:	4b7d      	ldr	r3, [pc, #500]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	4979      	ldr	r1, [pc, #484]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800406c:	4b74      	ldr	r3, [pc, #464]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f023 0203 	bic.w	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	4971      	ldr	r1, [pc, #452]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800408e:	4b6c      	ldr	r3, [pc, #432]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	f023 020c 	bic.w	r2, r3, #12
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409c:	4968      	ldr	r1, [pc, #416]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040b0:	4b63      	ldr	r3, [pc, #396]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040be:	4960      	ldr	r1, [pc, #384]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040d2:	4b5b      	ldr	r3, [pc, #364]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e0:	4957      	ldr	r1, [pc, #348]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040f4:	4b52      	ldr	r3, [pc, #328]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004102:	494f      	ldr	r1, [pc, #316]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004116:	4b4a      	ldr	r3, [pc, #296]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004124:	4946      	ldr	r1, [pc, #280]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004138:	4b41      	ldr	r3, [pc, #260]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004146:	493e      	ldr	r1, [pc, #248]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800415a:	4b39      	ldr	r3, [pc, #228]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004168:	4935      	ldr	r1, [pc, #212]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800417c:	4b30      	ldr	r3, [pc, #192]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004182:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800418a:	492d      	ldr	r1, [pc, #180]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d011      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800419e:	4b28      	ldr	r3, [pc, #160]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ac:	4924      	ldr	r1, [pc, #144]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041bc:	d101      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80041be:	2301      	movs	r3, #1
 80041c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80041ce:	2301      	movs	r3, #1
 80041d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041de:	4b18      	ldr	r3, [pc, #96]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ec:	4914      	ldr	r1, [pc, #80]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00b      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004200:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004210:	490b      	ldr	r1, [pc, #44]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00f      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004224:	4b06      	ldr	r3, [pc, #24]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004234:	4902      	ldr	r1, [pc, #8]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800423c:	e002      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800423e:	bf00      	nop
 8004240:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00b      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004250:	4b8a      	ldr	r3, [pc, #552]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004256:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	4986      	ldr	r1, [pc, #536]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004274:	4b81      	ldr	r3, [pc, #516]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800427a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004284:	497d      	ldr	r1, [pc, #500]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d006      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 80d6 	beq.w	800444c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042a0:	4b76      	ldr	r3, [pc, #472]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a75      	ldr	r2, [pc, #468]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ac:	f7fd fc5a 	bl	8001b64 <HAL_GetTick>
 80042b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042b4:	f7fd fc56 	bl	8001b64 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	; 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e195      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042c6:	4b6d      	ldr	r3, [pc, #436]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d021      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d11d      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042e6:	4b65      	ldr	r3, [pc, #404]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042f4:	4b61      	ldr	r3, [pc, #388]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042fa:	0e1b      	lsrs	r3, r3, #24
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	019a      	lsls	r2, r3, #6
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	041b      	lsls	r3, r3, #16
 800430c:	431a      	orrs	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	061b      	lsls	r3, r3, #24
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	071b      	lsls	r3, r3, #28
 800431a:	4958      	ldr	r1, [pc, #352]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004336:	d00a      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004340:	2b00      	cmp	r3, #0
 8004342:	d02e      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800434c:	d129      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800434e:	4b4b      	ldr	r3, [pc, #300]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004354:	0c1b      	lsrs	r3, r3, #16
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800435c:	4b47      	ldr	r3, [pc, #284]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800435e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004362:	0f1b      	lsrs	r3, r3, #28
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	019a      	lsls	r2, r3, #6
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	041b      	lsls	r3, r3, #16
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	061b      	lsls	r3, r3, #24
 800437c:	431a      	orrs	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	071b      	lsls	r3, r3, #28
 8004382:	493e      	ldr	r1, [pc, #248]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800438a:	4b3c      	ldr	r3, [pc, #240]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004390:	f023 021f 	bic.w	r2, r3, #31
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	3b01      	subs	r3, #1
 800439a:	4938      	ldr	r1, [pc, #224]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d01d      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043ae:	4b33      	ldr	r3, [pc, #204]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b4:	0e1b      	lsrs	r3, r3, #24
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043bc:	4b2f      	ldr	r3, [pc, #188]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c2:	0f1b      	lsrs	r3, r3, #28
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	019a      	lsls	r2, r3, #6
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	041b      	lsls	r3, r3, #16
 80043d6:	431a      	orrs	r2, r3
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	061b      	lsls	r3, r3, #24
 80043dc:	431a      	orrs	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	071b      	lsls	r3, r3, #28
 80043e2:	4926      	ldr	r1, [pc, #152]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d011      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	019a      	lsls	r2, r3, #6
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	041b      	lsls	r3, r3, #16
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	061b      	lsls	r3, r3, #24
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	071b      	lsls	r3, r3, #28
 8004412:	491a      	ldr	r1, [pc, #104]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800441a:	4b18      	ldr	r3, [pc, #96]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a17      	ldr	r2, [pc, #92]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004420:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004426:	f7fd fb9d 	bl	8001b64 <HAL_GetTick>
 800442a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800442c:	e008      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800442e:	f7fd fb99 	bl	8001b64 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b64      	cmp	r3, #100	; 0x64
 800443a:	d901      	bls.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e0d8      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004440:	4b0e      	ldr	r3, [pc, #56]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b01      	cmp	r3, #1
 8004450:	f040 80ce 	bne.w	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a08      	ldr	r2, [pc, #32]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800445a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800445e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004460:	f7fd fb80 	bl	8001b64 <HAL_GetTick>
 8004464:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004466:	e00b      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004468:	f7fd fb7c 	bl	8001b64 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d904      	bls.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e0bb      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800447a:	bf00      	nop
 800447c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004480:	4b5e      	ldr	r3, [pc, #376]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800448c:	d0ec      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d02e      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d12a      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044b6:	4b51      	ldr	r3, [pc, #324]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044bc:	0c1b      	lsrs	r3, r3, #16
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044c4:	4b4d      	ldr	r3, [pc, #308]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ca:	0f1b      	lsrs	r3, r3, #28
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	019a      	lsls	r2, r3, #6
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	061b      	lsls	r3, r3, #24
 80044e4:	431a      	orrs	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	071b      	lsls	r3, r3, #28
 80044ea:	4944      	ldr	r1, [pc, #272]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044f2:	4b42      	ldr	r3, [pc, #264]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	3b01      	subs	r3, #1
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	493d      	ldr	r1, [pc, #244]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d022      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800451c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004520:	d11d      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004522:	4b36      	ldr	r3, [pc, #216]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004528:	0e1b      	lsrs	r3, r3, #24
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004530:	4b32      	ldr	r3, [pc, #200]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	0f1b      	lsrs	r3, r3, #28
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	019a      	lsls	r2, r3, #6
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	041b      	lsls	r3, r3, #16
 800454a:	431a      	orrs	r2, r3
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	061b      	lsls	r3, r3, #24
 8004550:	431a      	orrs	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	071b      	lsls	r3, r3, #28
 8004556:	4929      	ldr	r1, [pc, #164]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d028      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800456a:	4b24      	ldr	r3, [pc, #144]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800456c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004570:	0e1b      	lsrs	r3, r3, #24
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004578:	4b20      	ldr	r3, [pc, #128]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	019a      	lsls	r2, r3, #6
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	041b      	lsls	r3, r3, #16
 8004590:	431a      	orrs	r2, r3
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	061b      	lsls	r3, r3, #24
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	071b      	lsls	r3, r3, #28
 800459e:	4917      	ldr	r1, [pc, #92]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80045a6:	4b15      	ldr	r3, [pc, #84]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	4911      	ldr	r1, [pc, #68]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045bc:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a0e      	ldr	r2, [pc, #56]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c8:	f7fd facc 	bl	8001b64 <HAL_GetTick>
 80045cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045d0:	f7fd fac8 	bl	8001b64 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b64      	cmp	r3, #100	; 0x64
 80045dc:	d901      	bls.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e007      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045e2:	4b06      	ldr	r3, [pc, #24]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ee:	d1ef      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40023800 	.word	0x40023800

08004600 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e09d      	b.n	800474e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	2b00      	cmp	r3, #0
 8004618:	d108      	bne.n	800462c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004622:	d009      	beq.n	8004638 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	61da      	str	r2, [r3, #28]
 800462a:	e005      	b.n	8004638 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fc fd3c 	bl	80010d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800466e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004678:	d902      	bls.n	8004680 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	e002      	b.n	8004686 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004684:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800468e:	d007      	beq.n	80046a0 <HAL_SPI_Init+0xa0>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004698:	d002      	beq.n	80046a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e2:	ea42 0103 	orr.w	r1, r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	0c1b      	lsrs	r3, r3, #16
 80046fc:	f003 0204 	and.w	r2, r3, #4
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800471c:	ea42 0103 	orr.w	r1, r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69da      	ldr	r2, [r3, #28]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800473c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e049      	b.n	80047fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d106      	bne.n	8004782 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f841 	bl	8004804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2202      	movs	r2, #2
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3304      	adds	r3, #4
 8004792:	4619      	mov	r1, r3
 8004794:	4610      	mov	r0, r2
 8004796:	f000 fb69 	bl	8004e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d001      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e054      	b.n	80048da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a26      	ldr	r2, [pc, #152]	; (80048e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d022      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x80>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485a:	d01d      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x80>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a22      	ldr	r2, [pc, #136]	; (80048ec <HAL_TIM_Base_Start_IT+0xd4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d018      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x80>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a21      	ldr	r2, [pc, #132]	; (80048f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d013      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x80>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1f      	ldr	r2, [pc, #124]	; (80048f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00e      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x80>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1e      	ldr	r2, [pc, #120]	; (80048f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d009      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x80>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1c      	ldr	r2, [pc, #112]	; (80048fc <HAL_TIM_Base_Start_IT+0xe4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d004      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x80>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1b      	ldr	r2, [pc, #108]	; (8004900 <HAL_TIM_Base_Start_IT+0xe8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d115      	bne.n	80048c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	4b19      	ldr	r3, [pc, #100]	; (8004904 <HAL_TIM_Base_Start_IT+0xec>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b06      	cmp	r3, #6
 80048a8:	d015      	beq.n	80048d6 <HAL_TIM_Base_Start_IT+0xbe>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b0:	d011      	beq.n	80048d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f042 0201 	orr.w	r2, r2, #1
 80048c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c2:	e008      	b.n	80048d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	e000      	b.n	80048d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800
 80048f4:	40000c00 	.word	0x40000c00
 80048f8:	40010400 	.word	0x40010400
 80048fc:	40014000 	.word	0x40014000
 8004900:	40001800 	.word	0x40001800
 8004904:	00010007 	.word	0x00010007

08004908 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e049      	b.n	80049ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fc ffde 	bl	80018f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3304      	adds	r3, #4
 8004944:	4619      	mov	r1, r3
 8004946:	4610      	mov	r0, r2
 8004948:	f000 fa90 	bl	8004e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d122      	bne.n	8004a12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d11b      	bne.n	8004a12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f06f 0202 	mvn.w	r2, #2
 80049e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fa19 	bl	8004e30 <HAL_TIM_IC_CaptureCallback>
 80049fe:	e005      	b.n	8004a0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fa0b 	bl	8004e1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa1c 	bl	8004e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d122      	bne.n	8004a66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d11b      	bne.n	8004a66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f06f 0204 	mvn.w	r2, #4
 8004a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f9ef 	bl	8004e30 <HAL_TIM_IC_CaptureCallback>
 8004a52:	e005      	b.n	8004a60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f9e1 	bl	8004e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f9f2 	bl	8004e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d122      	bne.n	8004aba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d11b      	bne.n	8004aba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f06f 0208 	mvn.w	r2, #8
 8004a8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2204      	movs	r2, #4
 8004a90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f9c5 	bl	8004e30 <HAL_TIM_IC_CaptureCallback>
 8004aa6:	e005      	b.n	8004ab4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f9b7 	bl	8004e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f9c8 	bl	8004e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d122      	bne.n	8004b0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b10      	cmp	r3, #16
 8004ad4:	d11b      	bne.n	8004b0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f06f 0210 	mvn.w	r2, #16
 8004ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f99b 	bl	8004e30 <HAL_TIM_IC_CaptureCallback>
 8004afa:	e005      	b.n	8004b08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f98d 	bl	8004e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f99e 	bl	8004e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d10e      	bne.n	8004b3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d107      	bne.n	8004b3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f06f 0201 	mvn.w	r2, #1
 8004b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7fc fa75 	bl	8001024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d10e      	bne.n	8004b66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b52:	2b80      	cmp	r3, #128	; 0x80
 8004b54:	d107      	bne.n	8004b66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fd19 	bl	8005598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b74:	d10e      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b80:	2b80      	cmp	r3, #128	; 0x80
 8004b82:	d107      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fd0c 	bl	80055ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d10e      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b40      	cmp	r3, #64	; 0x40
 8004bae:	d107      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f94c 	bl	8004e58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d10e      	bne.n	8004bec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d107      	bne.n	8004bec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0220 	mvn.w	r2, #32
 8004be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fccc 	bl	8005584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bec:	bf00      	nop
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e0ff      	b.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b14      	cmp	r3, #20
 8004c1e:	f200 80f0 	bhi.w	8004e02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c22:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c28:	08004c7d 	.word	0x08004c7d
 8004c2c:	08004e03 	.word	0x08004e03
 8004c30:	08004e03 	.word	0x08004e03
 8004c34:	08004e03 	.word	0x08004e03
 8004c38:	08004cbd 	.word	0x08004cbd
 8004c3c:	08004e03 	.word	0x08004e03
 8004c40:	08004e03 	.word	0x08004e03
 8004c44:	08004e03 	.word	0x08004e03
 8004c48:	08004cff 	.word	0x08004cff
 8004c4c:	08004e03 	.word	0x08004e03
 8004c50:	08004e03 	.word	0x08004e03
 8004c54:	08004e03 	.word	0x08004e03
 8004c58:	08004d3f 	.word	0x08004d3f
 8004c5c:	08004e03 	.word	0x08004e03
 8004c60:	08004e03 	.word	0x08004e03
 8004c64:	08004e03 	.word	0x08004e03
 8004c68:	08004d81 	.word	0x08004d81
 8004c6c:	08004e03 	.word	0x08004e03
 8004c70:	08004e03 	.word	0x08004e03
 8004c74:	08004e03 	.word	0x08004e03
 8004c78:	08004dc1 	.word	0x08004dc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 f992 	bl	8004fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0208 	orr.w	r2, r2, #8
 8004c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699a      	ldr	r2, [r3, #24]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0204 	bic.w	r2, r2, #4
 8004ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6999      	ldr	r1, [r3, #24]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	619a      	str	r2, [r3, #24]
      break;
 8004cba:	e0a5      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 f9e4 	bl	8005090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6999      	ldr	r1, [r3, #24]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	021a      	lsls	r2, r3, #8
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	619a      	str	r2, [r3, #24]
      break;
 8004cfc:	e084      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fa3b 	bl	8005180 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69da      	ldr	r2, [r3, #28]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 0208 	orr.w	r2, r2, #8
 8004d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0204 	bic.w	r2, r2, #4
 8004d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69d9      	ldr	r1, [r3, #28]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	61da      	str	r2, [r3, #28]
      break;
 8004d3c:	e064      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fa91 	bl	800526c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69da      	ldr	r2, [r3, #28]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69d9      	ldr	r1, [r3, #28]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	021a      	lsls	r2, r3, #8
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	61da      	str	r2, [r3, #28]
      break;
 8004d7e:	e043      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fac8 	bl	800531c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0208 	orr.w	r2, r2, #8
 8004d9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0204 	bic.w	r2, r2, #4
 8004daa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004dbe:	e023      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fafa 	bl	80053c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	021a      	lsls	r2, r3, #8
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e00:	e002      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	75fb      	strb	r3, [r7, #23]
      break;
 8004e06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop

08004e1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a40      	ldr	r2, [pc, #256]	; (8004f80 <TIM_Base_SetConfig+0x114>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d013      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8a:	d00f      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a3d      	ldr	r2, [pc, #244]	; (8004f84 <TIM_Base_SetConfig+0x118>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00b      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a3c      	ldr	r2, [pc, #240]	; (8004f88 <TIM_Base_SetConfig+0x11c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d007      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a3b      	ldr	r2, [pc, #236]	; (8004f8c <TIM_Base_SetConfig+0x120>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d003      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a3a      	ldr	r2, [pc, #232]	; (8004f90 <TIM_Base_SetConfig+0x124>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d108      	bne.n	8004ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a2f      	ldr	r2, [pc, #188]	; (8004f80 <TIM_Base_SetConfig+0x114>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d02b      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ecc:	d027      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a2c      	ldr	r2, [pc, #176]	; (8004f84 <TIM_Base_SetConfig+0x118>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d023      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a2b      	ldr	r2, [pc, #172]	; (8004f88 <TIM_Base_SetConfig+0x11c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d01f      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a2a      	ldr	r2, [pc, #168]	; (8004f8c <TIM_Base_SetConfig+0x120>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d01b      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a29      	ldr	r2, [pc, #164]	; (8004f90 <TIM_Base_SetConfig+0x124>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d017      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a28      	ldr	r2, [pc, #160]	; (8004f94 <TIM_Base_SetConfig+0x128>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a27      	ldr	r2, [pc, #156]	; (8004f98 <TIM_Base_SetConfig+0x12c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00f      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a26      	ldr	r2, [pc, #152]	; (8004f9c <TIM_Base_SetConfig+0x130>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00b      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a25      	ldr	r2, [pc, #148]	; (8004fa0 <TIM_Base_SetConfig+0x134>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d007      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a24      	ldr	r2, [pc, #144]	; (8004fa4 <TIM_Base_SetConfig+0x138>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d003      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a23      	ldr	r2, [pc, #140]	; (8004fa8 <TIM_Base_SetConfig+0x13c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d108      	bne.n	8004f30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a0a      	ldr	r2, [pc, #40]	; (8004f80 <TIM_Base_SetConfig+0x114>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d003      	beq.n	8004f64 <TIM_Base_SetConfig+0xf8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a0c      	ldr	r2, [pc, #48]	; (8004f90 <TIM_Base_SetConfig+0x124>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d103      	bne.n	8004f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	615a      	str	r2, [r3, #20]
}
 8004f72:	bf00      	nop
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40000400 	.word	0x40000400
 8004f88:	40000800 	.word	0x40000800
 8004f8c:	40000c00 	.word	0x40000c00
 8004f90:	40010400 	.word	0x40010400
 8004f94:	40014000 	.word	0x40014000
 8004f98:	40014400 	.word	0x40014400
 8004f9c:	40014800 	.word	0x40014800
 8004fa0:	40001800 	.word	0x40001800
 8004fa4:	40001c00 	.word	0x40001c00
 8004fa8:	40002000 	.word	0x40002000

08004fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f023 0201 	bic.w	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4b2b      	ldr	r3, [pc, #172]	; (8005084 <TIM_OC1_SetConfig+0xd8>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0303 	bic.w	r3, r3, #3
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f023 0302 	bic.w	r3, r3, #2
 8004ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a21      	ldr	r2, [pc, #132]	; (8005088 <TIM_OC1_SetConfig+0xdc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_OC1_SetConfig+0x64>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a20      	ldr	r2, [pc, #128]	; (800508c <TIM_OC1_SetConfig+0xe0>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10c      	bne.n	800502a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0308 	bic.w	r3, r3, #8
 8005016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f023 0304 	bic.w	r3, r3, #4
 8005028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a16      	ldr	r2, [pc, #88]	; (8005088 <TIM_OC1_SetConfig+0xdc>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_OC1_SetConfig+0x8e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a15      	ldr	r2, [pc, #84]	; (800508c <TIM_OC1_SetConfig+0xe0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d111      	bne.n	800505e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	621a      	str	r2, [r3, #32]
}
 8005078:	bf00      	nop
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	fffeff8f 	.word	0xfffeff8f
 8005088:	40010000 	.word	0x40010000
 800508c:	40010400 	.word	0x40010400

08005090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f023 0210 	bic.w	r2, r3, #16
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4b2e      	ldr	r3, [pc, #184]	; (8005174 <TIM_OC2_SetConfig+0xe4>)
 80050bc:	4013      	ands	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	021b      	lsls	r3, r3, #8
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f023 0320 	bic.w	r3, r3, #32
 80050da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a23      	ldr	r2, [pc, #140]	; (8005178 <TIM_OC2_SetConfig+0xe8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_OC2_SetConfig+0x68>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a22      	ldr	r2, [pc, #136]	; (800517c <TIM_OC2_SetConfig+0xec>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d10d      	bne.n	8005114 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005112:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a18      	ldr	r2, [pc, #96]	; (8005178 <TIM_OC2_SetConfig+0xe8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <TIM_OC2_SetConfig+0x94>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a17      	ldr	r2, [pc, #92]	; (800517c <TIM_OC2_SetConfig+0xec>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d113      	bne.n	800514c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800512a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005132:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	621a      	str	r2, [r3, #32]
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	feff8fff 	.word	0xfeff8fff
 8005178:	40010000 	.word	0x40010000
 800517c:	40010400 	.word	0x40010400

08005180 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4b2d      	ldr	r3, [pc, #180]	; (8005260 <TIM_OC3_SetConfig+0xe0>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0303 	bic.w	r3, r3, #3
 80051b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a22      	ldr	r2, [pc, #136]	; (8005264 <TIM_OC3_SetConfig+0xe4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d003      	beq.n	80051e6 <TIM_OC3_SetConfig+0x66>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a21      	ldr	r2, [pc, #132]	; (8005268 <TIM_OC3_SetConfig+0xe8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d10d      	bne.n	8005202 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a17      	ldr	r2, [pc, #92]	; (8005264 <TIM_OC3_SetConfig+0xe4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d003      	beq.n	8005212 <TIM_OC3_SetConfig+0x92>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a16      	ldr	r2, [pc, #88]	; (8005268 <TIM_OC3_SetConfig+0xe8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d113      	bne.n	800523a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	621a      	str	r2, [r3, #32]
}
 8005254:	bf00      	nop
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	fffeff8f 	.word	0xfffeff8f
 8005264:	40010000 	.word	0x40010000
 8005268:	40010400 	.word	0x40010400

0800526c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4b1e      	ldr	r3, [pc, #120]	; (8005310 <TIM_OC4_SetConfig+0xa4>)
 8005298:	4013      	ands	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	031b      	lsls	r3, r3, #12
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a13      	ldr	r2, [pc, #76]	; (8005314 <TIM_OC4_SetConfig+0xa8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <TIM_OC4_SetConfig+0x68>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a12      	ldr	r2, [pc, #72]	; (8005318 <TIM_OC4_SetConfig+0xac>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d109      	bne.n	80052e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	019b      	lsls	r3, r3, #6
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	feff8fff 	.word	0xfeff8fff
 8005314:	40010000 	.word	0x40010000
 8005318:	40010400 	.word	0x40010400

0800531c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4b1b      	ldr	r3, [pc, #108]	; (80053b4 <TIM_OC5_SetConfig+0x98>)
 8005348:	4013      	ands	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800535c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	041b      	lsls	r3, r3, #16
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a12      	ldr	r2, [pc, #72]	; (80053b8 <TIM_OC5_SetConfig+0x9c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d003      	beq.n	800537a <TIM_OC5_SetConfig+0x5e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a11      	ldr	r2, [pc, #68]	; (80053bc <TIM_OC5_SetConfig+0xa0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d109      	bne.n	800538e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005380:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	621a      	str	r2, [r3, #32]
}
 80053a8:	bf00      	nop
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	fffeff8f 	.word	0xfffeff8f
 80053b8:	40010000 	.word	0x40010000
 80053bc:	40010400 	.word	0x40010400

080053c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4b1c      	ldr	r3, [pc, #112]	; (800545c <TIM_OC6_SetConfig+0x9c>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	021b      	lsls	r3, r3, #8
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	051b      	lsls	r3, r3, #20
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a13      	ldr	r2, [pc, #76]	; (8005460 <TIM_OC6_SetConfig+0xa0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_OC6_SetConfig+0x60>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a12      	ldr	r2, [pc, #72]	; (8005464 <TIM_OC6_SetConfig+0xa4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d109      	bne.n	8005434 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005426:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	029b      	lsls	r3, r3, #10
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4313      	orrs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	621a      	str	r2, [r3, #32]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	feff8fff 	.word	0xfeff8fff
 8005460:	40010000 	.word	0x40010000
 8005464:	40010400 	.word	0x40010400

08005468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800547c:	2302      	movs	r3, #2
 800547e:	e06d      	b.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a30      	ldr	r2, [pc, #192]	; (8005568 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d004      	beq.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a2f      	ldr	r2, [pc, #188]	; (800556c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d108      	bne.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a20      	ldr	r2, [pc, #128]	; (8005568 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d022      	beq.n	8005530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f2:	d01d      	beq.n	8005530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a1d      	ldr	r2, [pc, #116]	; (8005570 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d018      	beq.n	8005530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a1c      	ldr	r2, [pc, #112]	; (8005574 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d013      	beq.n	8005530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1a      	ldr	r2, [pc, #104]	; (8005578 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00e      	beq.n	8005530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a15      	ldr	r2, [pc, #84]	; (800556c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d009      	beq.n	8005530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a16      	ldr	r2, [pc, #88]	; (800557c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d004      	beq.n	8005530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a15      	ldr	r2, [pc, #84]	; (8005580 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d10c      	bne.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005536:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	4313      	orrs	r3, r2
 8005540:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	40010000 	.word	0x40010000
 800556c:	40010400 	.word	0x40010400
 8005570:	40000400 	.word	0x40000400
 8005574:	40000800 	.word	0x40000800
 8005578:	40000c00 	.word	0x40000c00
 800557c:	40014000 	.word	0x40014000
 8005580:	40001800 	.word	0x40001800

08005584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e040      	b.n	8005654 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fc fa0c 	bl	8001a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2224      	movs	r2, #36	; 0x24
 80055ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fb82 	bl	8005d08 <UART_SetConfig>
 8005604:	4603      	mov	r3, r0
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e022      	b.n	8005654 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fdda 	bl	80061d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800562a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800563a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fe61 	bl	8006314 <UART_CheckIdleState>
 8005652:	4603      	mov	r3, r0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08a      	sub	sp, #40	; 0x28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	4613      	mov	r3, r2
 8005668:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005670:	2b20      	cmp	r3, #32
 8005672:	d132      	bne.n	80056da <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_UART_Receive_IT+0x24>
 800567a:	88fb      	ldrh	r3, [r7, #6]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e02b      	b.n	80056dc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d018      	beq.n	80056ca <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	613b      	str	r3, [r7, #16]
   return(result);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	623b      	str	r3, [r7, #32]
 80056b8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	69f9      	ldr	r1, [r7, #28]
 80056bc:	6a3a      	ldr	r2, [r7, #32]
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e6      	bne.n	8005698 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056ca:	88fb      	ldrh	r3, [r7, #6]
 80056cc:	461a      	mov	r2, r3
 80056ce:	68b9      	ldr	r1, [r7, #8]
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 ff33 	bl	800653c <UART_Start_Receive_IT>
 80056d6:	4603      	mov	r3, r0
 80056d8:	e000      	b.n	80056dc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80056da:	2302      	movs	r3, #2
  }
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3728      	adds	r7, #40	; 0x28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b0ba      	sub	sp, #232	; 0xe8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800570a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800570e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005712:	4013      	ands	r3, r2
 8005714:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005718:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800571c:	2b00      	cmp	r3, #0
 800571e:	d115      	bne.n	800574c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00f      	beq.n	800574c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800572c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005730:	f003 0320 	and.w	r3, r3, #32
 8005734:	2b00      	cmp	r3, #0
 8005736:	d009      	beq.n	800574c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 82ac 	beq.w	8005c9a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	4798      	blx	r3
      }
      return;
 800574a:	e2a6      	b.n	8005c9a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800574c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8117 	beq.w	8005984 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005762:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005766:	4b85      	ldr	r3, [pc, #532]	; (800597c <HAL_UART_IRQHandler+0x298>)
 8005768:	4013      	ands	r3, r2
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 810a 	beq.w	8005984 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d011      	beq.n	80057a0 <HAL_UART_IRQHandler+0xbc>
 800577c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00b      	beq.n	80057a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2201      	movs	r2, #1
 800578e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005796:	f043 0201 	orr.w	r2, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d011      	beq.n	80057d0 <HAL_UART_IRQHandler+0xec>
 80057ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00b      	beq.n	80057d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2202      	movs	r2, #2
 80057be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c6:	f043 0204 	orr.w	r2, r3, #4
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d011      	beq.n	8005800 <HAL_UART_IRQHandler+0x11c>
 80057dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00b      	beq.n	8005800 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2204      	movs	r2, #4
 80057ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057f6:	f043 0202 	orr.w	r2, r3, #2
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b00      	cmp	r3, #0
 800580a:	d017      	beq.n	800583c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800580c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005810:	f003 0320 	and.w	r3, r3, #32
 8005814:	2b00      	cmp	r3, #0
 8005816:	d105      	bne.n	8005824 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800581c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00b      	beq.n	800583c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2208      	movs	r2, #8
 800582a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005832:	f043 0208 	orr.w	r2, r3, #8
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800583c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005844:	2b00      	cmp	r3, #0
 8005846:	d012      	beq.n	800586e <HAL_UART_IRQHandler+0x18a>
 8005848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800584c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00c      	beq.n	800586e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800585c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005864:	f043 0220 	orr.w	r2, r3, #32
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 8212 	beq.w	8005c9e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800587a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00d      	beq.n	80058a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b6:	2b40      	cmp	r3, #64	; 0x40
 80058b8:	d005      	beq.n	80058c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d04f      	beq.n	8005966 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fefe 	bl	80066c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d6:	2b40      	cmp	r3, #64	; 0x40
 80058d8:	d141      	bne.n	800595e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3308      	adds	r3, #8
 80058e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3308      	adds	r3, #8
 8005902:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005906:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800590a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005912:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800591e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1d9      	bne.n	80058da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800592a:	2b00      	cmp	r3, #0
 800592c:	d013      	beq.n	8005956 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005932:	4a13      	ldr	r2, [pc, #76]	; (8005980 <HAL_UART_IRQHandler+0x29c>)
 8005934:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800593a:	4618      	mov	r0, r3
 800593c:	f7fc fc22 	bl	8002184 <HAL_DMA_Abort_IT>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d017      	beq.n	8005976 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800594a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005950:	4610      	mov	r0, r2
 8005952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005954:	e00f      	b.n	8005976 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f9b6 	bl	8005cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595c:	e00b      	b.n	8005976 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f9b2 	bl	8005cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005964:	e007      	b.n	8005976 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f9ae 	bl	8005cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005974:	e193      	b.n	8005c9e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005976:	bf00      	nop
    return;
 8005978:	e191      	b.n	8005c9e <HAL_UART_IRQHandler+0x5ba>
 800597a:	bf00      	nop
 800597c:	04000120 	.word	0x04000120
 8005980:	08006791 	.word	0x08006791

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005988:	2b01      	cmp	r3, #1
 800598a:	f040 814c 	bne.w	8005c26 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800598e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005992:	f003 0310 	and.w	r3, r3, #16
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 8145 	beq.w	8005c26 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800599c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 813e 	beq.w	8005c26 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2210      	movs	r2, #16
 80059b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059bc:	2b40      	cmp	r3, #64	; 0x40
 80059be:	f040 80b6 	bne.w	8005b2e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 8165 	beq.w	8005ca2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059e2:	429a      	cmp	r2, r3
 80059e4:	f080 815d 	bcs.w	8005ca2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059fc:	f000 8086 	beq.w	8005b0c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1da      	bne.n	8005a00 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3308      	adds	r3, #8
 8005a50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a5c:	f023 0301 	bic.w	r3, r3, #1
 8005a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3308      	adds	r3, #8
 8005a6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e1      	bne.n	8005a4a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3308      	adds	r3, #8
 8005aa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005aaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005aac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ab0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e3      	bne.n	8005a86 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005adc:	f023 0310 	bic.w	r3, r3, #16
 8005ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005aee:	65bb      	str	r3, [r7, #88]	; 0x58
 8005af0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005af4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e4      	bne.n	8005acc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fc facc 	bl	80020a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f8d8 	bl	8005cdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b2c:	e0b9      	b.n	8005ca2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 80ab 	beq.w	8005ca6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005b50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 80a6 	beq.w	8005ca6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b62:	e853 3f00 	ldrex	r3, [r3]
 8005b66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b7c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e4      	bne.n	8005b5a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3308      	adds	r3, #8
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	e853 3f00 	ldrex	r3, [r3]
 8005b9e:	623b      	str	r3, [r7, #32]
   return(result);
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	f023 0301 	bic.w	r3, r3, #1
 8005ba6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005bb4:	633a      	str	r2, [r7, #48]	; 0x30
 8005bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bbc:	e841 2300 	strex	r3, r2, [r1]
 8005bc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e3      	bne.n	8005b90 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f023 0310 	bic.w	r3, r3, #16
 8005bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005bfe:	61fb      	str	r3, [r7, #28]
 8005c00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	69b9      	ldr	r1, [r7, #24]
 8005c04:	69fa      	ldr	r2, [r7, #28]
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e4      	bne.n	8005bdc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2202      	movs	r2, #2
 8005c16:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f85c 	bl	8005cdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c24:	e03f      	b.n	8005ca6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00e      	beq.n	8005c50 <HAL_UART_IRQHandler+0x56c>
 8005c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d008      	beq.n	8005c50 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f853 	bl	8005cf4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c4e:	e02d      	b.n	8005cac <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00e      	beq.n	8005c7a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d008      	beq.n	8005c7a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01c      	beq.n	8005caa <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	4798      	blx	r3
    }
    return;
 8005c78:	e017      	b.n	8005caa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d012      	beq.n	8005cac <HAL_UART_IRQHandler+0x5c8>
 8005c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00c      	beq.n	8005cac <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fd92 	bl	80067bc <UART_EndTransmit_IT>
    return;
 8005c98:	e008      	b.n	8005cac <HAL_UART_IRQHandler+0x5c8>
      return;
 8005c9a:	bf00      	nop
 8005c9c:	e006      	b.n	8005cac <HAL_UART_IRQHandler+0x5c8>
    return;
 8005c9e:	bf00      	nop
 8005ca0:	e004      	b.n	8005cac <HAL_UART_IRQHandler+0x5c8>
      return;
 8005ca2:	bf00      	nop
 8005ca4:	e002      	b.n	8005cac <HAL_UART_IRQHandler+0x5c8>
      return;
 8005ca6:	bf00      	nop
 8005ca8:	e000      	b.n	8005cac <HAL_UART_IRQHandler+0x5c8>
    return;
 8005caa:	bf00      	nop
  }

}
 8005cac:	37e8      	adds	r7, #232	; 0xe8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop

08005cb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4ba6      	ldr	r3, [pc, #664]	; (8005fcc <UART_SetConfig+0x2c4>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6812      	ldr	r2, [r2, #0]
 8005d3a:	6979      	ldr	r1, [r7, #20]
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a94      	ldr	r2, [pc, #592]	; (8005fd0 <UART_SetConfig+0x2c8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d120      	bne.n	8005dc6 <UART_SetConfig+0xbe>
 8005d84:	4b93      	ldr	r3, [pc, #588]	; (8005fd4 <UART_SetConfig+0x2cc>)
 8005d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d816      	bhi.n	8005dc0 <UART_SetConfig+0xb8>
 8005d92:	a201      	add	r2, pc, #4	; (adr r2, 8005d98 <UART_SetConfig+0x90>)
 8005d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d98:	08005da9 	.word	0x08005da9
 8005d9c:	08005db5 	.word	0x08005db5
 8005da0:	08005daf 	.word	0x08005daf
 8005da4:	08005dbb 	.word	0x08005dbb
 8005da8:	2301      	movs	r3, #1
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e150      	b.n	8006050 <UART_SetConfig+0x348>
 8005dae:	2302      	movs	r3, #2
 8005db0:	77fb      	strb	r3, [r7, #31]
 8005db2:	e14d      	b.n	8006050 <UART_SetConfig+0x348>
 8005db4:	2304      	movs	r3, #4
 8005db6:	77fb      	strb	r3, [r7, #31]
 8005db8:	e14a      	b.n	8006050 <UART_SetConfig+0x348>
 8005dba:	2308      	movs	r3, #8
 8005dbc:	77fb      	strb	r3, [r7, #31]
 8005dbe:	e147      	b.n	8006050 <UART_SetConfig+0x348>
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	77fb      	strb	r3, [r7, #31]
 8005dc4:	e144      	b.n	8006050 <UART_SetConfig+0x348>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a83      	ldr	r2, [pc, #524]	; (8005fd8 <UART_SetConfig+0x2d0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d132      	bne.n	8005e36 <UART_SetConfig+0x12e>
 8005dd0:	4b80      	ldr	r3, [pc, #512]	; (8005fd4 <UART_SetConfig+0x2cc>)
 8005dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd6:	f003 030c 	and.w	r3, r3, #12
 8005dda:	2b0c      	cmp	r3, #12
 8005ddc:	d828      	bhi.n	8005e30 <UART_SetConfig+0x128>
 8005dde:	a201      	add	r2, pc, #4	; (adr r2, 8005de4 <UART_SetConfig+0xdc>)
 8005de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de4:	08005e19 	.word	0x08005e19
 8005de8:	08005e31 	.word	0x08005e31
 8005dec:	08005e31 	.word	0x08005e31
 8005df0:	08005e31 	.word	0x08005e31
 8005df4:	08005e25 	.word	0x08005e25
 8005df8:	08005e31 	.word	0x08005e31
 8005dfc:	08005e31 	.word	0x08005e31
 8005e00:	08005e31 	.word	0x08005e31
 8005e04:	08005e1f 	.word	0x08005e1f
 8005e08:	08005e31 	.word	0x08005e31
 8005e0c:	08005e31 	.word	0x08005e31
 8005e10:	08005e31 	.word	0x08005e31
 8005e14:	08005e2b 	.word	0x08005e2b
 8005e18:	2300      	movs	r3, #0
 8005e1a:	77fb      	strb	r3, [r7, #31]
 8005e1c:	e118      	b.n	8006050 <UART_SetConfig+0x348>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	77fb      	strb	r3, [r7, #31]
 8005e22:	e115      	b.n	8006050 <UART_SetConfig+0x348>
 8005e24:	2304      	movs	r3, #4
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	e112      	b.n	8006050 <UART_SetConfig+0x348>
 8005e2a:	2308      	movs	r3, #8
 8005e2c:	77fb      	strb	r3, [r7, #31]
 8005e2e:	e10f      	b.n	8006050 <UART_SetConfig+0x348>
 8005e30:	2310      	movs	r3, #16
 8005e32:	77fb      	strb	r3, [r7, #31]
 8005e34:	e10c      	b.n	8006050 <UART_SetConfig+0x348>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a68      	ldr	r2, [pc, #416]	; (8005fdc <UART_SetConfig+0x2d4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d120      	bne.n	8005e82 <UART_SetConfig+0x17a>
 8005e40:	4b64      	ldr	r3, [pc, #400]	; (8005fd4 <UART_SetConfig+0x2cc>)
 8005e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e4a:	2b30      	cmp	r3, #48	; 0x30
 8005e4c:	d013      	beq.n	8005e76 <UART_SetConfig+0x16e>
 8005e4e:	2b30      	cmp	r3, #48	; 0x30
 8005e50:	d814      	bhi.n	8005e7c <UART_SetConfig+0x174>
 8005e52:	2b20      	cmp	r3, #32
 8005e54:	d009      	beq.n	8005e6a <UART_SetConfig+0x162>
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d810      	bhi.n	8005e7c <UART_SetConfig+0x174>
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <UART_SetConfig+0x15c>
 8005e5e:	2b10      	cmp	r3, #16
 8005e60:	d006      	beq.n	8005e70 <UART_SetConfig+0x168>
 8005e62:	e00b      	b.n	8005e7c <UART_SetConfig+0x174>
 8005e64:	2300      	movs	r3, #0
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e0f2      	b.n	8006050 <UART_SetConfig+0x348>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	77fb      	strb	r3, [r7, #31]
 8005e6e:	e0ef      	b.n	8006050 <UART_SetConfig+0x348>
 8005e70:	2304      	movs	r3, #4
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	e0ec      	b.n	8006050 <UART_SetConfig+0x348>
 8005e76:	2308      	movs	r3, #8
 8005e78:	77fb      	strb	r3, [r7, #31]
 8005e7a:	e0e9      	b.n	8006050 <UART_SetConfig+0x348>
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	77fb      	strb	r3, [r7, #31]
 8005e80:	e0e6      	b.n	8006050 <UART_SetConfig+0x348>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a56      	ldr	r2, [pc, #344]	; (8005fe0 <UART_SetConfig+0x2d8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d120      	bne.n	8005ece <UART_SetConfig+0x1c6>
 8005e8c:	4b51      	ldr	r3, [pc, #324]	; (8005fd4 <UART_SetConfig+0x2cc>)
 8005e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e96:	2bc0      	cmp	r3, #192	; 0xc0
 8005e98:	d013      	beq.n	8005ec2 <UART_SetConfig+0x1ba>
 8005e9a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e9c:	d814      	bhi.n	8005ec8 <UART_SetConfig+0x1c0>
 8005e9e:	2b80      	cmp	r3, #128	; 0x80
 8005ea0:	d009      	beq.n	8005eb6 <UART_SetConfig+0x1ae>
 8005ea2:	2b80      	cmp	r3, #128	; 0x80
 8005ea4:	d810      	bhi.n	8005ec8 <UART_SetConfig+0x1c0>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <UART_SetConfig+0x1a8>
 8005eaa:	2b40      	cmp	r3, #64	; 0x40
 8005eac:	d006      	beq.n	8005ebc <UART_SetConfig+0x1b4>
 8005eae:	e00b      	b.n	8005ec8 <UART_SetConfig+0x1c0>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	77fb      	strb	r3, [r7, #31]
 8005eb4:	e0cc      	b.n	8006050 <UART_SetConfig+0x348>
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	77fb      	strb	r3, [r7, #31]
 8005eba:	e0c9      	b.n	8006050 <UART_SetConfig+0x348>
 8005ebc:	2304      	movs	r3, #4
 8005ebe:	77fb      	strb	r3, [r7, #31]
 8005ec0:	e0c6      	b.n	8006050 <UART_SetConfig+0x348>
 8005ec2:	2308      	movs	r3, #8
 8005ec4:	77fb      	strb	r3, [r7, #31]
 8005ec6:	e0c3      	b.n	8006050 <UART_SetConfig+0x348>
 8005ec8:	2310      	movs	r3, #16
 8005eca:	77fb      	strb	r3, [r7, #31]
 8005ecc:	e0c0      	b.n	8006050 <UART_SetConfig+0x348>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a44      	ldr	r2, [pc, #272]	; (8005fe4 <UART_SetConfig+0x2dc>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d125      	bne.n	8005f24 <UART_SetConfig+0x21c>
 8005ed8:	4b3e      	ldr	r3, [pc, #248]	; (8005fd4 <UART_SetConfig+0x2cc>)
 8005eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ee6:	d017      	beq.n	8005f18 <UART_SetConfig+0x210>
 8005ee8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eec:	d817      	bhi.n	8005f1e <UART_SetConfig+0x216>
 8005eee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef2:	d00b      	beq.n	8005f0c <UART_SetConfig+0x204>
 8005ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef8:	d811      	bhi.n	8005f1e <UART_SetConfig+0x216>
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <UART_SetConfig+0x1fe>
 8005efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f02:	d006      	beq.n	8005f12 <UART_SetConfig+0x20a>
 8005f04:	e00b      	b.n	8005f1e <UART_SetConfig+0x216>
 8005f06:	2300      	movs	r3, #0
 8005f08:	77fb      	strb	r3, [r7, #31]
 8005f0a:	e0a1      	b.n	8006050 <UART_SetConfig+0x348>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e09e      	b.n	8006050 <UART_SetConfig+0x348>
 8005f12:	2304      	movs	r3, #4
 8005f14:	77fb      	strb	r3, [r7, #31]
 8005f16:	e09b      	b.n	8006050 <UART_SetConfig+0x348>
 8005f18:	2308      	movs	r3, #8
 8005f1a:	77fb      	strb	r3, [r7, #31]
 8005f1c:	e098      	b.n	8006050 <UART_SetConfig+0x348>
 8005f1e:	2310      	movs	r3, #16
 8005f20:	77fb      	strb	r3, [r7, #31]
 8005f22:	e095      	b.n	8006050 <UART_SetConfig+0x348>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a2f      	ldr	r2, [pc, #188]	; (8005fe8 <UART_SetConfig+0x2e0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d125      	bne.n	8005f7a <UART_SetConfig+0x272>
 8005f2e:	4b29      	ldr	r3, [pc, #164]	; (8005fd4 <UART_SetConfig+0x2cc>)
 8005f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f3c:	d017      	beq.n	8005f6e <UART_SetConfig+0x266>
 8005f3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f42:	d817      	bhi.n	8005f74 <UART_SetConfig+0x26c>
 8005f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f48:	d00b      	beq.n	8005f62 <UART_SetConfig+0x25a>
 8005f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f4e:	d811      	bhi.n	8005f74 <UART_SetConfig+0x26c>
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <UART_SetConfig+0x254>
 8005f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f58:	d006      	beq.n	8005f68 <UART_SetConfig+0x260>
 8005f5a:	e00b      	b.n	8005f74 <UART_SetConfig+0x26c>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	77fb      	strb	r3, [r7, #31]
 8005f60:	e076      	b.n	8006050 <UART_SetConfig+0x348>
 8005f62:	2302      	movs	r3, #2
 8005f64:	77fb      	strb	r3, [r7, #31]
 8005f66:	e073      	b.n	8006050 <UART_SetConfig+0x348>
 8005f68:	2304      	movs	r3, #4
 8005f6a:	77fb      	strb	r3, [r7, #31]
 8005f6c:	e070      	b.n	8006050 <UART_SetConfig+0x348>
 8005f6e:	2308      	movs	r3, #8
 8005f70:	77fb      	strb	r3, [r7, #31]
 8005f72:	e06d      	b.n	8006050 <UART_SetConfig+0x348>
 8005f74:	2310      	movs	r3, #16
 8005f76:	77fb      	strb	r3, [r7, #31]
 8005f78:	e06a      	b.n	8006050 <UART_SetConfig+0x348>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1b      	ldr	r2, [pc, #108]	; (8005fec <UART_SetConfig+0x2e4>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d138      	bne.n	8005ff6 <UART_SetConfig+0x2ee>
 8005f84:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <UART_SetConfig+0x2cc>)
 8005f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f92:	d017      	beq.n	8005fc4 <UART_SetConfig+0x2bc>
 8005f94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f98:	d82a      	bhi.n	8005ff0 <UART_SetConfig+0x2e8>
 8005f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f9e:	d00b      	beq.n	8005fb8 <UART_SetConfig+0x2b0>
 8005fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa4:	d824      	bhi.n	8005ff0 <UART_SetConfig+0x2e8>
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <UART_SetConfig+0x2aa>
 8005faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fae:	d006      	beq.n	8005fbe <UART_SetConfig+0x2b6>
 8005fb0:	e01e      	b.n	8005ff0 <UART_SetConfig+0x2e8>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	77fb      	strb	r3, [r7, #31]
 8005fb6:	e04b      	b.n	8006050 <UART_SetConfig+0x348>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	e048      	b.n	8006050 <UART_SetConfig+0x348>
 8005fbe:	2304      	movs	r3, #4
 8005fc0:	77fb      	strb	r3, [r7, #31]
 8005fc2:	e045      	b.n	8006050 <UART_SetConfig+0x348>
 8005fc4:	2308      	movs	r3, #8
 8005fc6:	77fb      	strb	r3, [r7, #31]
 8005fc8:	e042      	b.n	8006050 <UART_SetConfig+0x348>
 8005fca:	bf00      	nop
 8005fcc:	efff69f3 	.word	0xefff69f3
 8005fd0:	40011000 	.word	0x40011000
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	40004400 	.word	0x40004400
 8005fdc:	40004800 	.word	0x40004800
 8005fe0:	40004c00 	.word	0x40004c00
 8005fe4:	40005000 	.word	0x40005000
 8005fe8:	40011400 	.word	0x40011400
 8005fec:	40007800 	.word	0x40007800
 8005ff0:	2310      	movs	r3, #16
 8005ff2:	77fb      	strb	r3, [r7, #31]
 8005ff4:	e02c      	b.n	8006050 <UART_SetConfig+0x348>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a72      	ldr	r2, [pc, #456]	; (80061c4 <UART_SetConfig+0x4bc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d125      	bne.n	800604c <UART_SetConfig+0x344>
 8006000:	4b71      	ldr	r3, [pc, #452]	; (80061c8 <UART_SetConfig+0x4c0>)
 8006002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006006:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800600a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800600e:	d017      	beq.n	8006040 <UART_SetConfig+0x338>
 8006010:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006014:	d817      	bhi.n	8006046 <UART_SetConfig+0x33e>
 8006016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800601a:	d00b      	beq.n	8006034 <UART_SetConfig+0x32c>
 800601c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006020:	d811      	bhi.n	8006046 <UART_SetConfig+0x33e>
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <UART_SetConfig+0x326>
 8006026:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800602a:	d006      	beq.n	800603a <UART_SetConfig+0x332>
 800602c:	e00b      	b.n	8006046 <UART_SetConfig+0x33e>
 800602e:	2300      	movs	r3, #0
 8006030:	77fb      	strb	r3, [r7, #31]
 8006032:	e00d      	b.n	8006050 <UART_SetConfig+0x348>
 8006034:	2302      	movs	r3, #2
 8006036:	77fb      	strb	r3, [r7, #31]
 8006038:	e00a      	b.n	8006050 <UART_SetConfig+0x348>
 800603a:	2304      	movs	r3, #4
 800603c:	77fb      	strb	r3, [r7, #31]
 800603e:	e007      	b.n	8006050 <UART_SetConfig+0x348>
 8006040:	2308      	movs	r3, #8
 8006042:	77fb      	strb	r3, [r7, #31]
 8006044:	e004      	b.n	8006050 <UART_SetConfig+0x348>
 8006046:	2310      	movs	r3, #16
 8006048:	77fb      	strb	r3, [r7, #31]
 800604a:	e001      	b.n	8006050 <UART_SetConfig+0x348>
 800604c:	2310      	movs	r3, #16
 800604e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006058:	d15b      	bne.n	8006112 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800605a:	7ffb      	ldrb	r3, [r7, #31]
 800605c:	2b08      	cmp	r3, #8
 800605e:	d828      	bhi.n	80060b2 <UART_SetConfig+0x3aa>
 8006060:	a201      	add	r2, pc, #4	; (adr r2, 8006068 <UART_SetConfig+0x360>)
 8006062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006066:	bf00      	nop
 8006068:	0800608d 	.word	0x0800608d
 800606c:	08006095 	.word	0x08006095
 8006070:	0800609d 	.word	0x0800609d
 8006074:	080060b3 	.word	0x080060b3
 8006078:	080060a3 	.word	0x080060a3
 800607c:	080060b3 	.word	0x080060b3
 8006080:	080060b3 	.word	0x080060b3
 8006084:	080060b3 	.word	0x080060b3
 8006088:	080060ab 	.word	0x080060ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800608c:	f7fd fe36 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 8006090:	61b8      	str	r0, [r7, #24]
        break;
 8006092:	e013      	b.n	80060bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006094:	f7fd fe46 	bl	8003d24 <HAL_RCC_GetPCLK2Freq>
 8006098:	61b8      	str	r0, [r7, #24]
        break;
 800609a:	e00f      	b.n	80060bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800609c:	4b4b      	ldr	r3, [pc, #300]	; (80061cc <UART_SetConfig+0x4c4>)
 800609e:	61bb      	str	r3, [r7, #24]
        break;
 80060a0:	e00c      	b.n	80060bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060a2:	f7fd fd19 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 80060a6:	61b8      	str	r0, [r7, #24]
        break;
 80060a8:	e008      	b.n	80060bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ae:	61bb      	str	r3, [r7, #24]
        break;
 80060b0:	e004      	b.n	80060bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	77bb      	strb	r3, [r7, #30]
        break;
 80060ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d074      	beq.n	80061ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	005a      	lsls	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	085b      	lsrs	r3, r3, #1
 80060cc:	441a      	add	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	2b0f      	cmp	r3, #15
 80060dc:	d916      	bls.n	800610c <UART_SetConfig+0x404>
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e4:	d212      	bcs.n	800610c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	f023 030f 	bic.w	r3, r3, #15
 80060ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	085b      	lsrs	r3, r3, #1
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	89fb      	ldrh	r3, [r7, #14]
 80060fe:	4313      	orrs	r3, r2
 8006100:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	89fa      	ldrh	r2, [r7, #14]
 8006108:	60da      	str	r2, [r3, #12]
 800610a:	e04f      	b.n	80061ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	77bb      	strb	r3, [r7, #30]
 8006110:	e04c      	b.n	80061ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006112:	7ffb      	ldrb	r3, [r7, #31]
 8006114:	2b08      	cmp	r3, #8
 8006116:	d828      	bhi.n	800616a <UART_SetConfig+0x462>
 8006118:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <UART_SetConfig+0x418>)
 800611a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611e:	bf00      	nop
 8006120:	08006145 	.word	0x08006145
 8006124:	0800614d 	.word	0x0800614d
 8006128:	08006155 	.word	0x08006155
 800612c:	0800616b 	.word	0x0800616b
 8006130:	0800615b 	.word	0x0800615b
 8006134:	0800616b 	.word	0x0800616b
 8006138:	0800616b 	.word	0x0800616b
 800613c:	0800616b 	.word	0x0800616b
 8006140:	08006163 	.word	0x08006163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006144:	f7fd fdda 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 8006148:	61b8      	str	r0, [r7, #24]
        break;
 800614a:	e013      	b.n	8006174 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800614c:	f7fd fdea 	bl	8003d24 <HAL_RCC_GetPCLK2Freq>
 8006150:	61b8      	str	r0, [r7, #24]
        break;
 8006152:	e00f      	b.n	8006174 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006154:	4b1d      	ldr	r3, [pc, #116]	; (80061cc <UART_SetConfig+0x4c4>)
 8006156:	61bb      	str	r3, [r7, #24]
        break;
 8006158:	e00c      	b.n	8006174 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800615a:	f7fd fcbd 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 800615e:	61b8      	str	r0, [r7, #24]
        break;
 8006160:	e008      	b.n	8006174 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006166:	61bb      	str	r3, [r7, #24]
        break;
 8006168:	e004      	b.n	8006174 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	77bb      	strb	r3, [r7, #30]
        break;
 8006172:	bf00      	nop
    }

    if (pclk != 0U)
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d018      	beq.n	80061ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	085a      	lsrs	r2, r3, #1
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	441a      	add	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	fbb2 f3f3 	udiv	r3, r2, r3
 800618c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2b0f      	cmp	r3, #15
 8006192:	d909      	bls.n	80061a8 <UART_SetConfig+0x4a0>
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800619a:	d205      	bcs.n	80061a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	b29a      	uxth	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	60da      	str	r2, [r3, #12]
 80061a6:	e001      	b.n	80061ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80061b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3720      	adds	r7, #32
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	40007c00 	.word	0x40007c00
 80061c8:	40023800 	.word	0x40023800
 80061cc:	00f42400 	.word	0x00f42400

080061d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	430a      	orrs	r2, r1
 800621a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	f003 0310 	and.w	r3, r3, #16
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	f003 0320 	and.w	r3, r3, #32
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01a      	beq.n	80062e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ce:	d10a      	bne.n	80062e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00a      	beq.n	8006308 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	605a      	str	r2, [r3, #4]
  }
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af02      	add	r7, sp, #8
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006324:	f7fb fc1e 	bl	8001b64 <HAL_GetTick>
 8006328:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b08      	cmp	r3, #8
 8006336:	d10e      	bne.n	8006356 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f831 	bl	80063ae <UART_WaitOnFlagUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e027      	b.n	80063a6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b04      	cmp	r3, #4
 8006362:	d10e      	bne.n	8006382 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f81b 	bl	80063ae <UART_WaitOnFlagUntilTimeout>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e011      	b.n	80063a6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b09c      	sub	sp, #112	; 0x70
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	60f8      	str	r0, [r7, #12]
 80063b6:	60b9      	str	r1, [r7, #8]
 80063b8:	603b      	str	r3, [r7, #0]
 80063ba:	4613      	mov	r3, r2
 80063bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063be:	e0a7      	b.n	8006510 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c6:	f000 80a3 	beq.w	8006510 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ca:	f7fb fbcb 	bl	8001b64 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d302      	bcc.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80063da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d13f      	bne.n	8006460 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80063ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063f4:	667b      	str	r3, [r7, #100]	; 0x64
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	461a      	mov	r2, r3
 80063fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006400:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006402:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006404:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006406:	e841 2300 	strex	r3, r2, [r1]
 800640a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800640c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1e6      	bne.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3308      	adds	r3, #8
 8006418:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006424:	f023 0301 	bic.w	r3, r3, #1
 8006428:	663b      	str	r3, [r7, #96]	; 0x60
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3308      	adds	r3, #8
 8006430:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006432:	64ba      	str	r2, [r7, #72]	; 0x48
 8006434:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e5      	bne.n	8006412 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2220      	movs	r2, #32
 800644a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2220      	movs	r2, #32
 8006450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e068      	b.n	8006532 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0304 	and.w	r3, r3, #4
 800646a:	2b00      	cmp	r3, #0
 800646c:	d050      	beq.n	8006510 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800647c:	d148      	bne.n	8006510 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006486:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	e853 3f00 	ldrex	r3, [r3]
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800649c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a6:	637b      	str	r3, [r7, #52]	; 0x34
 80064a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064ae:	e841 2300 	strex	r3, r2, [r1]
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1e6      	bne.n	8006488 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3308      	adds	r3, #8
 80064c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	e853 3f00 	ldrex	r3, [r3]
 80064c8:	613b      	str	r3, [r7, #16]
   return(result);
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f023 0301 	bic.w	r3, r3, #1
 80064d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3308      	adds	r3, #8
 80064d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064da:	623a      	str	r2, [r7, #32]
 80064dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	69f9      	ldr	r1, [r7, #28]
 80064e0:	6a3a      	ldr	r2, [r7, #32]
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e5      	bne.n	80064ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2220      	movs	r2, #32
 80064f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2220      	movs	r2, #32
 80064f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2220      	movs	r2, #32
 8006500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e010      	b.n	8006532 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	69da      	ldr	r2, [r3, #28]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	4013      	ands	r3, r2
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	429a      	cmp	r2, r3
 800651e:	bf0c      	ite	eq
 8006520:	2301      	moveq	r3, #1
 8006522:	2300      	movne	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	461a      	mov	r2, r3
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	429a      	cmp	r2, r3
 800652c:	f43f af48 	beq.w	80063c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3770      	adds	r7, #112	; 0x70
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800653c:	b480      	push	{r7}
 800653e:	b097      	sub	sp, #92	; 0x5c
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	4613      	mov	r3, r2
 8006548:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	88fa      	ldrh	r2, [r7, #6]
 8006554:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	88fa      	ldrh	r2, [r7, #6]
 800655c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656e:	d10e      	bne.n	800658e <UART_Start_Receive_IT+0x52>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d105      	bne.n	8006584 <UART_Start_Receive_IT+0x48>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800657e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006582:	e02d      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	22ff      	movs	r2, #255	; 0xff
 8006588:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800658c:	e028      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10d      	bne.n	80065b2 <UART_Start_Receive_IT+0x76>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d104      	bne.n	80065a8 <UART_Start_Receive_IT+0x6c>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	22ff      	movs	r2, #255	; 0xff
 80065a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065a6:	e01b      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	227f      	movs	r2, #127	; 0x7f
 80065ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065b0:	e016      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065ba:	d10d      	bne.n	80065d8 <UART_Start_Receive_IT+0x9c>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d104      	bne.n	80065ce <UART_Start_Receive_IT+0x92>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	227f      	movs	r2, #127	; 0x7f
 80065c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065cc:	e008      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	223f      	movs	r2, #63	; 0x3f
 80065d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065d6:	e003      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2222      	movs	r2, #34	; 0x22
 80065ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3308      	adds	r3, #8
 80065f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	657b      	str	r3, [r7, #84]	; 0x54
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3308      	adds	r3, #8
 800660e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006610:	64ba      	str	r2, [r7, #72]	; 0x48
 8006612:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006618:	e841 2300 	strex	r3, r2, [r1]
 800661c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800661e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e5      	bne.n	80065f0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662c:	d107      	bne.n	800663e <UART_Start_Receive_IT+0x102>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d103      	bne.n	800663e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4a21      	ldr	r2, [pc, #132]	; (80066c0 <UART_Start_Receive_IT+0x184>)
 800663a:	669a      	str	r2, [r3, #104]	; 0x68
 800663c:	e002      	b.n	8006644 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4a20      	ldr	r2, [pc, #128]	; (80066c4 <UART_Start_Receive_IT+0x188>)
 8006642:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d019      	beq.n	8006680 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006660:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666a:	637b      	str	r3, [r7, #52]	; 0x34
 800666c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e6      	bne.n	800664c <UART_Start_Receive_IT+0x110>
 800667e:	e018      	b.n	80066b2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	613b      	str	r3, [r7, #16]
   return(result);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f043 0320 	orr.w	r3, r3, #32
 8006694:	653b      	str	r3, [r7, #80]	; 0x50
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	461a      	mov	r2, r3
 800669c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800669e:	623b      	str	r3, [r7, #32]
 80066a0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a2:	69f9      	ldr	r1, [r7, #28]
 80066a4:	6a3a      	ldr	r2, [r7, #32]
 80066a6:	e841 2300 	strex	r3, r2, [r1]
 80066aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1e6      	bne.n	8006680 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	375c      	adds	r7, #92	; 0x5c
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	08006977 	.word	0x08006977
 80066c4:	08006811 	.word	0x08006811

080066c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b095      	sub	sp, #84	; 0x54
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ee:	643b      	str	r3, [r7, #64]	; 0x40
 80066f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e6      	bne.n	80066d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3308      	adds	r3, #8
 8006708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	61fb      	str	r3, [r7, #28]
   return(result);
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	64bb      	str	r3, [r7, #72]	; 0x48
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3308      	adds	r3, #8
 8006720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006722:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006724:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e5      	bne.n	8006702 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800673a:	2b01      	cmp	r3, #1
 800673c:	d118      	bne.n	8006770 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	e853 3f00 	ldrex	r3, [r3]
 800674a:	60bb      	str	r3, [r7, #8]
   return(result);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f023 0310 	bic.w	r3, r3, #16
 8006752:	647b      	str	r3, [r7, #68]	; 0x44
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	461a      	mov	r2, r3
 800675a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006760:	6979      	ldr	r1, [r7, #20]
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	e841 2300 	strex	r3, r2, [r1]
 8006768:	613b      	str	r3, [r7, #16]
   return(result);
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1e6      	bne.n	800673e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006784:	bf00      	nop
 8006786:	3754      	adds	r7, #84	; 0x54
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f7ff fa8a 	bl	8005cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067b4:	bf00      	nop
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b088      	sub	sp, #32
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d8:	61fb      	str	r3, [r7, #28]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	61bb      	str	r3, [r7, #24]
 80067e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	6979      	ldr	r1, [r7, #20]
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	613b      	str	r3, [r7, #16]
   return(result);
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e6      	bne.n	80067c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7ff fa56 	bl	8005cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006808:	bf00      	nop
 800680a:	3720      	adds	r7, #32
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b096      	sub	sp, #88	; 0x58
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800681e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006828:	2b22      	cmp	r3, #34	; 0x22
 800682a:	f040 8098 	bne.w	800695e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006834:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006838:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800683c:	b2d9      	uxtb	r1, r3
 800683e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006842:	b2da      	uxtb	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006848:	400a      	ands	r2, r1
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800685e:	b29b      	uxth	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	b29a      	uxth	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d17b      	bne.n	800696e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687e:	e853 3f00 	ldrex	r3, [r3]
 8006882:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006886:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800688a:	653b      	str	r3, [r7, #80]	; 0x50
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	461a      	mov	r2, r3
 8006892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006894:	647b      	str	r3, [r7, #68]	; 0x44
 8006896:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006898:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800689a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800689c:	e841 2300 	strex	r3, r2, [r1]
 80068a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e6      	bne.n	8006876 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3308      	adds	r3, #8
 80068ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	e853 3f00 	ldrex	r3, [r3]
 80068b6:	623b      	str	r3, [r7, #32]
   return(result);
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	f023 0301 	bic.w	r3, r3, #1
 80068be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3308      	adds	r3, #8
 80068c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068c8:	633a      	str	r2, [r7, #48]	; 0x30
 80068ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068d0:	e841 2300 	strex	r3, r2, [r1]
 80068d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e5      	bne.n	80068a8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2220      	movs	r2, #32
 80068e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d12e      	bne.n	8006956 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	e853 3f00 	ldrex	r3, [r3]
 800690a:	60fb      	str	r3, [r7, #12]
   return(result);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0310 	bic.w	r3, r3, #16
 8006912:	64bb      	str	r3, [r7, #72]	; 0x48
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	461a      	mov	r2, r3
 800691a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800691c:	61fb      	str	r3, [r7, #28]
 800691e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	69b9      	ldr	r1, [r7, #24]
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	e841 2300 	strex	r3, r2, [r1]
 8006928:	617b      	str	r3, [r7, #20]
   return(result);
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e6      	bne.n	80068fe <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	f003 0310 	and.w	r3, r3, #16
 800693a:	2b10      	cmp	r3, #16
 800693c:	d103      	bne.n	8006946 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2210      	movs	r2, #16
 8006944:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff f9c4 	bl	8005cdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006954:	e00b      	b.n	800696e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fa fb3e 	bl	8000fd8 <HAL_UART_RxCpltCallback>
}
 800695c:	e007      	b.n	800696e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	699a      	ldr	r2, [r3, #24]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0208 	orr.w	r2, r2, #8
 800696c:	619a      	str	r2, [r3, #24]
}
 800696e:	bf00      	nop
 8006970:	3758      	adds	r7, #88	; 0x58
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b096      	sub	sp, #88	; 0x58
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006984:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800698e:	2b22      	cmp	r3, #34	; 0x22
 8006990:	f040 8098 	bne.w	8006ac4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80069a4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80069a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80069ac:	4013      	ands	r3, r2
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069b2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b8:	1c9a      	adds	r2, r3, #2
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d17b      	bne.n	8006ad4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069fa:	643b      	str	r3, [r7, #64]	; 0x40
 80069fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e6      	bne.n	80069dc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3308      	adds	r3, #8
 8006a14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	f023 0301 	bic.w	r3, r3, #1
 8006a24:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e5      	bne.n	8006a0e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d12e      	bne.n	8006abc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f023 0310 	bic.w	r3, r3, #16
 8006a78:	647b      	str	r3, [r7, #68]	; 0x44
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a82:	61bb      	str	r3, [r7, #24]
 8006a84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	6979      	ldr	r1, [r7, #20]
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e6      	bne.n	8006a64 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	2b10      	cmp	r3, #16
 8006aa2:	d103      	bne.n	8006aac <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2210      	movs	r2, #16
 8006aaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7ff f911 	bl	8005cdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006aba:	e00b      	b.n	8006ad4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7fa fa8b 	bl	8000fd8 <HAL_UART_RxCpltCallback>
}
 8006ac2:	e007      	b.n	8006ad4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	699a      	ldr	r2, [r3, #24]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0208 	orr.w	r2, r2, #8
 8006ad2:	619a      	str	r2, [r3, #24]
}
 8006ad4:	bf00      	nop
 8006ad6:	3758      	adds	r7, #88	; 0x58
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006ae0:	bf00      	nop
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
	...

08006aec <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006af2:	f3ef 8305 	mrs	r3, IPSR
 8006af6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006af8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10f      	bne.n	8006b1e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006afe:	f3ef 8310 	mrs	r3, PRIMASK
 8006b02:	607b      	str	r3, [r7, #4]
  return(result);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d105      	bne.n	8006b16 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b0e:	603b      	str	r3, [r7, #0]
  return(result);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d007      	beq.n	8006b26 <osKernelInitialize+0x3a>
 8006b16:	4b0e      	ldr	r3, [pc, #56]	; (8006b50 <osKernelInitialize+0x64>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d103      	bne.n	8006b26 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006b1e:	f06f 0305 	mvn.w	r3, #5
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	e00c      	b.n	8006b40 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006b26:	4b0a      	ldr	r3, [pc, #40]	; (8006b50 <osKernelInitialize+0x64>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d105      	bne.n	8006b3a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006b2e:	4b08      	ldr	r3, [pc, #32]	; (8006b50 <osKernelInitialize+0x64>)
 8006b30:	2201      	movs	r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	e002      	b.n	8006b40 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006b40:	68fb      	ldr	r3, [r7, #12]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	20000740 	.word	0x20000740

08006b54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b5a:	f3ef 8305 	mrs	r3, IPSR
 8006b5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10f      	bne.n	8006b86 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b66:	f3ef 8310 	mrs	r3, PRIMASK
 8006b6a:	607b      	str	r3, [r7, #4]
  return(result);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d105      	bne.n	8006b7e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b72:	f3ef 8311 	mrs	r3, BASEPRI
 8006b76:	603b      	str	r3, [r7, #0]
  return(result);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d007      	beq.n	8006b8e <osKernelStart+0x3a>
 8006b7e:	4b0f      	ldr	r3, [pc, #60]	; (8006bbc <osKernelStart+0x68>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d103      	bne.n	8006b8e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006b86:	f06f 0305 	mvn.w	r3, #5
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	e010      	b.n	8006bb0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006b8e:	4b0b      	ldr	r3, [pc, #44]	; (8006bbc <osKernelStart+0x68>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d109      	bne.n	8006baa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006b96:	f7ff ffa1 	bl	8006adc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006b9a:	4b08      	ldr	r3, [pc, #32]	; (8006bbc <osKernelStart+0x68>)
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ba0:	f001 fa4c 	bl	800803c <vTaskStartScheduler>
      stat = osOK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	e002      	b.n	8006bb0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006baa:	f04f 33ff 	mov.w	r3, #4294967295
 8006bae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20000740 	.word	0x20000740

08006bc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b090      	sub	sp, #64	; 0x40
 8006bc4:	af04      	add	r7, sp, #16
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bd0:	f3ef 8305 	mrs	r3, IPSR
 8006bd4:	61fb      	str	r3, [r7, #28]
  return(result);
 8006bd6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f040 808f 	bne.w	8006cfc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bde:	f3ef 8310 	mrs	r3, PRIMASK
 8006be2:	61bb      	str	r3, [r7, #24]
  return(result);
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d105      	bne.n	8006bf6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bea:	f3ef 8311 	mrs	r3, BASEPRI
 8006bee:	617b      	str	r3, [r7, #20]
  return(result);
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <osThreadNew+0x3e>
 8006bf6:	4b44      	ldr	r3, [pc, #272]	; (8006d08 <osThreadNew+0x148>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d07e      	beq.n	8006cfc <osThreadNew+0x13c>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d07b      	beq.n	8006cfc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006c04:	2380      	movs	r3, #128	; 0x80
 8006c06:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006c08:	2318      	movs	r3, #24
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006c10:	f04f 33ff 	mov.w	r3, #4294967295
 8006c14:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d045      	beq.n	8006ca8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <osThreadNew+0x6a>
        name = attr->name;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d008      	beq.n	8006c50 <osThreadNew+0x90>
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	2b38      	cmp	r3, #56	; 0x38
 8006c42:	d805      	bhi.n	8006c50 <osThreadNew+0x90>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <osThreadNew+0x94>
        return (NULL);
 8006c50:	2300      	movs	r3, #0
 8006c52:	e054      	b.n	8006cfe <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	089b      	lsrs	r3, r3, #2
 8006c62:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00e      	beq.n	8006c8a <osThreadNew+0xca>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	2ba7      	cmp	r3, #167	; 0xa7
 8006c72:	d90a      	bls.n	8006c8a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d006      	beq.n	8006c8a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <osThreadNew+0xca>
        mem = 1;
 8006c84:	2301      	movs	r3, #1
 8006c86:	623b      	str	r3, [r7, #32]
 8006c88:	e010      	b.n	8006cac <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10c      	bne.n	8006cac <osThreadNew+0xec>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d108      	bne.n	8006cac <osThreadNew+0xec>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d104      	bne.n	8006cac <osThreadNew+0xec>
          mem = 0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	623b      	str	r3, [r7, #32]
 8006ca6:	e001      	b.n	8006cac <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d110      	bne.n	8006cd4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006cba:	9202      	str	r2, [sp, #8]
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 fe3f 	bl	800794c <xTaskCreateStatic>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	613b      	str	r3, [r7, #16]
 8006cd2:	e013      	b.n	8006cfc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d110      	bne.n	8006cfc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	f107 0310 	add.w	r3, r7, #16
 8006ce2:	9301      	str	r3, [sp, #4]
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 fe90 	bl	8007a12 <xTaskCreate>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d001      	beq.n	8006cfc <osThreadNew+0x13c>
          hTask = NULL;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006cfc:	693b      	ldr	r3, [r7, #16]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3730      	adds	r7, #48	; 0x30
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20000740 	.word	0x20000740

08006d0c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d14:	f3ef 8305 	mrs	r3, IPSR
 8006d18:	613b      	str	r3, [r7, #16]
  return(result);
 8006d1a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10f      	bne.n	8006d40 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d20:	f3ef 8310 	mrs	r3, PRIMASK
 8006d24:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d105      	bne.n	8006d38 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d2c:	f3ef 8311 	mrs	r3, BASEPRI
 8006d30:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d007      	beq.n	8006d48 <osDelay+0x3c>
 8006d38:	4b0a      	ldr	r3, [pc, #40]	; (8006d64 <osDelay+0x58>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d103      	bne.n	8006d48 <osDelay+0x3c>
    stat = osErrorISR;
 8006d40:	f06f 0305 	mvn.w	r3, #5
 8006d44:	617b      	str	r3, [r7, #20]
 8006d46:	e007      	b.n	8006d58 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 ffba 	bl	8007ccc <vTaskDelay>
    }
  }

  return (stat);
 8006d58:	697b      	ldr	r3, [r7, #20]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20000740 	.word	0x20000740

08006d68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4a07      	ldr	r2, [pc, #28]	; (8006d94 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	4a06      	ldr	r2, [pc, #24]	; (8006d98 <vApplicationGetIdleTaskMemory+0x30>)
 8006d7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2280      	movs	r2, #128	; 0x80
 8006d84:	601a      	str	r2, [r3, #0]
}
 8006d86:	bf00      	nop
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	20000744 	.word	0x20000744
 8006d98:	200007ec 	.word	0x200007ec

08006d9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4a07      	ldr	r2, [pc, #28]	; (8006dc8 <vApplicationGetTimerTaskMemory+0x2c>)
 8006dac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	4a06      	ldr	r2, [pc, #24]	; (8006dcc <vApplicationGetTimerTaskMemory+0x30>)
 8006db2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dba:	601a      	str	r2, [r3, #0]
}
 8006dbc:	bf00      	nop
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	200009ec 	.word	0x200009ec
 8006dcc:	20000a94 	.word	0x20000a94

08006dd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f103 0208 	add.w	r2, r3, #8
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f04f 32ff 	mov.w	r2, #4294967295
 8006de8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f103 0208 	add.w	r2, r3, #8
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f103 0208 	add.w	r2, r3, #8
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b085      	sub	sp, #20
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	601a      	str	r2, [r3, #0]
}
 8006e66:	bf00      	nop
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e72:	b480      	push	{r7}
 8006e74:	b085      	sub	sp, #20
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e88:	d103      	bne.n	8006e92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	e00c      	b.n	8006eac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	3308      	adds	r3, #8
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	e002      	b.n	8006ea0 <vListInsert+0x2e>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d2f6      	bcs.n	8006e9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	601a      	str	r2, [r3, #0]
}
 8006ed8:	bf00      	nop
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	6892      	ldr	r2, [r2, #8]
 8006efa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6852      	ldr	r2, [r2, #4]
 8006f04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d103      	bne.n	8006f18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	1e5a      	subs	r2, r3, #1
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10c      	bne.n	8006f66 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f50:	b672      	cpsid	i
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	b662      	cpsie	i
 8006f60:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006f66:	f002 fa29 	bl	80093bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f72:	68f9      	ldr	r1, [r7, #12]
 8006f74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f76:	fb01 f303 	mul.w	r3, r1, r3
 8006f7a:	441a      	add	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f96:	3b01      	subs	r3, #1
 8006f98:	68f9      	ldr	r1, [r7, #12]
 8006f9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f9c:	fb01 f303 	mul.w	r3, r1, r3
 8006fa0:	441a      	add	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	22ff      	movs	r2, #255	; 0xff
 8006faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	22ff      	movs	r2, #255	; 0xff
 8006fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d114      	bne.n	8006fe6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d01a      	beq.n	8006ffa <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3310      	adds	r3, #16
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 fadf 	bl	800858c <xTaskRemoveFromEventList>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d012      	beq.n	8006ffa <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006fd4:	4b0c      	ldr	r3, [pc, #48]	; (8007008 <xQueueGenericReset+0xd0>)
 8006fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	e009      	b.n	8006ffa <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3310      	adds	r3, #16
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff fef0 	bl	8006dd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3324      	adds	r3, #36	; 0x24
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7ff feeb 	bl	8006dd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ffa:	f002 fa13 	bl	8009424 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ffe:	2301      	movs	r3, #1
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	e000ed04 	.word	0xe000ed04

0800700c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800700c:	b580      	push	{r7, lr}
 800700e:	b08e      	sub	sp, #56	; 0x38
 8007010:	af02      	add	r7, sp, #8
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10c      	bne.n	800703a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	b672      	cpsid	i
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	b662      	cpsie	i
 8007034:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007036:	bf00      	nop
 8007038:	e7fe      	b.n	8007038 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10c      	bne.n	800705a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	b672      	cpsid	i
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	b662      	cpsie	i
 8007054:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007056:	bf00      	nop
 8007058:	e7fe      	b.n	8007058 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <xQueueGenericCreateStatic+0x5a>
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <xQueueGenericCreateStatic+0x5e>
 8007066:	2301      	movs	r3, #1
 8007068:	e000      	b.n	800706c <xQueueGenericCreateStatic+0x60>
 800706a:	2300      	movs	r3, #0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10c      	bne.n	800708a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	b672      	cpsid	i
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	b662      	cpsie	i
 8007084:	623b      	str	r3, [r7, #32]
}
 8007086:	bf00      	nop
 8007088:	e7fe      	b.n	8007088 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d102      	bne.n	8007096 <xQueueGenericCreateStatic+0x8a>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <xQueueGenericCreateStatic+0x8e>
 8007096:	2301      	movs	r3, #1
 8007098:	e000      	b.n	800709c <xQueueGenericCreateStatic+0x90>
 800709a:	2300      	movs	r3, #0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10c      	bne.n	80070ba <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a4:	b672      	cpsid	i
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	b662      	cpsie	i
 80070b4:	61fb      	str	r3, [r7, #28]
}
 80070b6:	bf00      	nop
 80070b8:	e7fe      	b.n	80070b8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80070ba:	2350      	movs	r3, #80	; 0x50
 80070bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2b50      	cmp	r3, #80	; 0x50
 80070c2:	d00c      	beq.n	80070de <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80070c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c8:	b672      	cpsid	i
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	b662      	cpsie	i
 80070d8:	61bb      	str	r3, [r7, #24]
}
 80070da:	bf00      	nop
 80070dc:	e7fe      	b.n	80070dc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80070de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00d      	beq.n	8007106 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80070ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	4613      	mov	r3, r2
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	68b9      	ldr	r1, [r7, #8]
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 f805 	bl	8007110 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007108:	4618      	mov	r0, r3
 800710a:	3730      	adds	r7, #48	; 0x30
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d103      	bne.n	800712c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	e002      	b.n	8007132 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800713e:	2101      	movs	r1, #1
 8007140:	69b8      	ldr	r0, [r7, #24]
 8007142:	f7ff fef9 	bl	8006f38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	78fa      	ldrb	r2, [r7, #3]
 800714a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800714e:	bf00      	nop
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08e      	sub	sp, #56	; 0x38
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007166:	2300      	movs	r3, #0
 8007168:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10c      	bne.n	800718e <xQueueGenericSend+0x36>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	b672      	cpsid	i
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	b662      	cpsie	i
 8007188:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800718a:	bf00      	nop
 800718c:	e7fe      	b.n	800718c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d103      	bne.n	800719c <xQueueGenericSend+0x44>
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <xQueueGenericSend+0x48>
 800719c:	2301      	movs	r3, #1
 800719e:	e000      	b.n	80071a2 <xQueueGenericSend+0x4a>
 80071a0:	2300      	movs	r3, #0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10c      	bne.n	80071c0 <xQueueGenericSend+0x68>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071aa:	b672      	cpsid	i
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	b662      	cpsie	i
 80071ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071bc:	bf00      	nop
 80071be:	e7fe      	b.n	80071be <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d103      	bne.n	80071ce <xQueueGenericSend+0x76>
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d101      	bne.n	80071d2 <xQueueGenericSend+0x7a>
 80071ce:	2301      	movs	r3, #1
 80071d0:	e000      	b.n	80071d4 <xQueueGenericSend+0x7c>
 80071d2:	2300      	movs	r3, #0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10c      	bne.n	80071f2 <xQueueGenericSend+0x9a>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	b672      	cpsid	i
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	b662      	cpsie	i
 80071ec:	623b      	str	r3, [r7, #32]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071f2:	f001 fb95 	bl	8008920 <xTaskGetSchedulerState>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d102      	bne.n	8007202 <xQueueGenericSend+0xaa>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <xQueueGenericSend+0xae>
 8007202:	2301      	movs	r3, #1
 8007204:	e000      	b.n	8007208 <xQueueGenericSend+0xb0>
 8007206:	2300      	movs	r3, #0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10c      	bne.n	8007226 <xQueueGenericSend+0xce>
	__asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	b672      	cpsid	i
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	b662      	cpsie	i
 8007220:	61fb      	str	r3, [r7, #28]
}
 8007222:	bf00      	nop
 8007224:	e7fe      	b.n	8007224 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007226:	f002 f8c9 	bl	80093bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007232:	429a      	cmp	r2, r3
 8007234:	d302      	bcc.n	800723c <xQueueGenericSend+0xe4>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b02      	cmp	r3, #2
 800723a:	d129      	bne.n	8007290 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	68b9      	ldr	r1, [r7, #8]
 8007240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007242:	f000 fa15 	bl	8007670 <prvCopyDataToQueue>
 8007246:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	2b00      	cmp	r3, #0
 800724e:	d010      	beq.n	8007272 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	3324      	adds	r3, #36	; 0x24
 8007254:	4618      	mov	r0, r3
 8007256:	f001 f999 	bl	800858c <xTaskRemoveFromEventList>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d013      	beq.n	8007288 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007260:	4b3f      	ldr	r3, [pc, #252]	; (8007360 <xQueueGenericSend+0x208>)
 8007262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	e00a      	b.n	8007288 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007274:	2b00      	cmp	r3, #0
 8007276:	d007      	beq.n	8007288 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007278:	4b39      	ldr	r3, [pc, #228]	; (8007360 <xQueueGenericSend+0x208>)
 800727a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727e:	601a      	str	r2, [r3, #0]
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007288:	f002 f8cc 	bl	8009424 <vPortExitCritical>
				return pdPASS;
 800728c:	2301      	movs	r3, #1
 800728e:	e063      	b.n	8007358 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d103      	bne.n	800729e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007296:	f002 f8c5 	bl	8009424 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800729a:	2300      	movs	r3, #0
 800729c:	e05c      	b.n	8007358 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800729e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d106      	bne.n	80072b2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072a4:	f107 0314 	add.w	r3, r7, #20
 80072a8:	4618      	mov	r0, r3
 80072aa:	f001 f9d5 	bl	8008658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072ae:	2301      	movs	r3, #1
 80072b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072b2:	f002 f8b7 	bl	8009424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072b6:	f000 ff35 	bl	8008124 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072ba:	f002 f87f 	bl	80093bc <vPortEnterCritical>
 80072be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072c4:	b25b      	sxtb	r3, r3
 80072c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ca:	d103      	bne.n	80072d4 <xQueueGenericSend+0x17c>
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072da:	b25b      	sxtb	r3, r3
 80072dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e0:	d103      	bne.n	80072ea <xQueueGenericSend+0x192>
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072ea:	f002 f89b 	bl	8009424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072ee:	1d3a      	adds	r2, r7, #4
 80072f0:	f107 0314 	add.w	r3, r7, #20
 80072f4:	4611      	mov	r1, r2
 80072f6:	4618      	mov	r0, r3
 80072f8:	f001 f9c4 	bl	8008684 <xTaskCheckForTimeOut>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d124      	bne.n	800734c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007302:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007304:	f000 faac 	bl	8007860 <prvIsQueueFull>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d018      	beq.n	8007340 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	3310      	adds	r3, #16
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	4611      	mov	r1, r2
 8007316:	4618      	mov	r0, r3
 8007318:	f001 f8e4 	bl	80084e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800731c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800731e:	f000 fa37 	bl	8007790 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007322:	f000 ff0d 	bl	8008140 <xTaskResumeAll>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	f47f af7c 	bne.w	8007226 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800732e:	4b0c      	ldr	r3, [pc, #48]	; (8007360 <xQueueGenericSend+0x208>)
 8007330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	e772      	b.n	8007226 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007342:	f000 fa25 	bl	8007790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007346:	f000 fefb 	bl	8008140 <xTaskResumeAll>
 800734a:	e76c      	b.n	8007226 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800734c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800734e:	f000 fa1f 	bl	8007790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007352:	f000 fef5 	bl	8008140 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007356:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007358:	4618      	mov	r0, r3
 800735a:	3738      	adds	r7, #56	; 0x38
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	e000ed04 	.word	0xe000ed04

08007364 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08e      	sub	sp, #56	; 0x38
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10c      	bne.n	8007396 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007380:	b672      	cpsid	i
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	b662      	cpsie	i
 8007390:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007392:	bf00      	nop
 8007394:	e7fe      	b.n	8007394 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d103      	bne.n	80073a4 <xQueueGenericSendFromISR+0x40>
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <xQueueGenericSendFromISR+0x44>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e000      	b.n	80073aa <xQueueGenericSendFromISR+0x46>
 80073a8:	2300      	movs	r3, #0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10c      	bne.n	80073c8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	b672      	cpsid	i
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	b662      	cpsie	i
 80073c2:	623b      	str	r3, [r7, #32]
}
 80073c4:	bf00      	nop
 80073c6:	e7fe      	b.n	80073c6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d103      	bne.n	80073d6 <xQueueGenericSendFromISR+0x72>
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d101      	bne.n	80073da <xQueueGenericSendFromISR+0x76>
 80073d6:	2301      	movs	r3, #1
 80073d8:	e000      	b.n	80073dc <xQueueGenericSendFromISR+0x78>
 80073da:	2300      	movs	r3, #0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10c      	bne.n	80073fa <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	b672      	cpsid	i
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	b662      	cpsie	i
 80073f4:	61fb      	str	r3, [r7, #28]
}
 80073f6:	bf00      	nop
 80073f8:	e7fe      	b.n	80073f8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073fa:	f002 f8c7 	bl	800958c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80073fe:	f3ef 8211 	mrs	r2, BASEPRI
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	b672      	cpsid	i
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	b662      	cpsie	i
 8007416:	61ba      	str	r2, [r7, #24]
 8007418:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800741a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800741c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007426:	429a      	cmp	r2, r3
 8007428:	d302      	bcc.n	8007430 <xQueueGenericSendFromISR+0xcc>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b02      	cmp	r3, #2
 800742e:	d12c      	bne.n	800748a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	68b9      	ldr	r1, [r7, #8]
 800743e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007440:	f000 f916 	bl	8007670 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007444:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744c:	d112      	bne.n	8007474 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	2b00      	cmp	r3, #0
 8007454:	d016      	beq.n	8007484 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	3324      	adds	r3, #36	; 0x24
 800745a:	4618      	mov	r0, r3
 800745c:	f001 f896 	bl	800858c <xTaskRemoveFromEventList>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00e      	beq.n	8007484 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	e007      	b.n	8007484 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007474:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007478:	3301      	adds	r3, #1
 800747a:	b2db      	uxtb	r3, r3
 800747c:	b25a      	sxtb	r2, r3
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007484:	2301      	movs	r3, #1
 8007486:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007488:	e001      	b.n	800748e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800748a:	2300      	movs	r3, #0
 800748c:	637b      	str	r3, [r7, #52]	; 0x34
 800748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007490:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007498:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800749a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800749c:	4618      	mov	r0, r3
 800749e:	3738      	adds	r7, #56	; 0x38
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08c      	sub	sp, #48	; 0x30
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80074b0:	2300      	movs	r3, #0
 80074b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10c      	bne.n	80074d8 <xQueueReceive+0x34>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	b672      	cpsid	i
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	b662      	cpsie	i
 80074d2:	623b      	str	r3, [r7, #32]
}
 80074d4:	bf00      	nop
 80074d6:	e7fe      	b.n	80074d6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d103      	bne.n	80074e6 <xQueueReceive+0x42>
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <xQueueReceive+0x46>
 80074e6:	2301      	movs	r3, #1
 80074e8:	e000      	b.n	80074ec <xQueueReceive+0x48>
 80074ea:	2300      	movs	r3, #0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10c      	bne.n	800750a <xQueueReceive+0x66>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	b672      	cpsid	i
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	b662      	cpsie	i
 8007504:	61fb      	str	r3, [r7, #28]
}
 8007506:	bf00      	nop
 8007508:	e7fe      	b.n	8007508 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800750a:	f001 fa09 	bl	8008920 <xTaskGetSchedulerState>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d102      	bne.n	800751a <xQueueReceive+0x76>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <xQueueReceive+0x7a>
 800751a:	2301      	movs	r3, #1
 800751c:	e000      	b.n	8007520 <xQueueReceive+0x7c>
 800751e:	2300      	movs	r3, #0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10c      	bne.n	800753e <xQueueReceive+0x9a>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	b672      	cpsid	i
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	b662      	cpsie	i
 8007538:	61bb      	str	r3, [r7, #24]
}
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800753e:	f001 ff3d 	bl	80093bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007546:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	2b00      	cmp	r3, #0
 800754c:	d01f      	beq.n	800758e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007552:	f000 f8f7 	bl	8007744 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	1e5a      	subs	r2, r3, #1
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00f      	beq.n	8007586 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	3310      	adds	r3, #16
 800756a:	4618      	mov	r0, r3
 800756c:	f001 f80e 	bl	800858c <xTaskRemoveFromEventList>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d007      	beq.n	8007586 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007576:	4b3d      	ldr	r3, [pc, #244]	; (800766c <xQueueReceive+0x1c8>)
 8007578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007586:	f001 ff4d 	bl	8009424 <vPortExitCritical>
				return pdPASS;
 800758a:	2301      	movs	r3, #1
 800758c:	e069      	b.n	8007662 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d103      	bne.n	800759c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007594:	f001 ff46 	bl	8009424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007598:	2300      	movs	r3, #0
 800759a:	e062      	b.n	8007662 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800759c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d106      	bne.n	80075b0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075a2:	f107 0310 	add.w	r3, r7, #16
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 f856 	bl	8008658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075ac:	2301      	movs	r3, #1
 80075ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075b0:	f001 ff38 	bl	8009424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075b4:	f000 fdb6 	bl	8008124 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075b8:	f001 ff00 	bl	80093bc <vPortEnterCritical>
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075c2:	b25b      	sxtb	r3, r3
 80075c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c8:	d103      	bne.n	80075d2 <xQueueReceive+0x12e>
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075d8:	b25b      	sxtb	r3, r3
 80075da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075de:	d103      	bne.n	80075e8 <xQueueReceive+0x144>
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075e8:	f001 ff1c 	bl	8009424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075ec:	1d3a      	adds	r2, r7, #4
 80075ee:	f107 0310 	add.w	r3, r7, #16
 80075f2:	4611      	mov	r1, r2
 80075f4:	4618      	mov	r0, r3
 80075f6:	f001 f845 	bl	8008684 <xTaskCheckForTimeOut>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d123      	bne.n	8007648 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007602:	f000 f917 	bl	8007834 <prvIsQueueEmpty>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d017      	beq.n	800763c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	3324      	adds	r3, #36	; 0x24
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	4611      	mov	r1, r2
 8007614:	4618      	mov	r0, r3
 8007616:	f000 ff65 	bl	80084e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800761a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800761c:	f000 f8b8 	bl	8007790 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007620:	f000 fd8e 	bl	8008140 <xTaskResumeAll>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d189      	bne.n	800753e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800762a:	4b10      	ldr	r3, [pc, #64]	; (800766c <xQueueReceive+0x1c8>)
 800762c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	e780      	b.n	800753e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800763c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800763e:	f000 f8a7 	bl	8007790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007642:	f000 fd7d 	bl	8008140 <xTaskResumeAll>
 8007646:	e77a      	b.n	800753e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800764a:	f000 f8a1 	bl	8007790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800764e:	f000 fd77 	bl	8008140 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007654:	f000 f8ee 	bl	8007834 <prvIsQueueEmpty>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	f43f af6f 	beq.w	800753e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007660:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007662:	4618      	mov	r0, r3
 8007664:	3730      	adds	r7, #48	; 0x30
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	e000ed04 	.word	0xe000ed04

08007670 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800767c:	2300      	movs	r3, #0
 800767e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007684:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10d      	bne.n	80076aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d14d      	bne.n	8007732 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	4618      	mov	r0, r3
 800769c:	f001 f95e 	bl	800895c <xTaskPriorityDisinherit>
 80076a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	609a      	str	r2, [r3, #8]
 80076a8:	e043      	b.n	8007732 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d119      	bne.n	80076e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6858      	ldr	r0, [r3, #4]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b8:	461a      	mov	r2, r3
 80076ba:	68b9      	ldr	r1, [r7, #8]
 80076bc:	f002 fa12 	bl	8009ae4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c8:	441a      	add	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d32b      	bcc.n	8007732 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	605a      	str	r2, [r3, #4]
 80076e2:	e026      	b.n	8007732 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	68d8      	ldr	r0, [r3, #12]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ec:	461a      	mov	r2, r3
 80076ee:	68b9      	ldr	r1, [r7, #8]
 80076f0:	f002 f9f8 	bl	8009ae4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	68da      	ldr	r2, [r3, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fc:	425b      	negs	r3, r3
 80076fe:	441a      	add	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	68da      	ldr	r2, [r3, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	429a      	cmp	r2, r3
 800770e:	d207      	bcs.n	8007720 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007718:	425b      	negs	r3, r3
 800771a:	441a      	add	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b02      	cmp	r3, #2
 8007724:	d105      	bne.n	8007732 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	3b01      	subs	r3, #1
 8007730:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800773a:	697b      	ldr	r3, [r7, #20]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3718      	adds	r7, #24
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	2b00      	cmp	r3, #0
 8007754:	d018      	beq.n	8007788 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68da      	ldr	r2, [r3, #12]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	441a      	add	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	429a      	cmp	r2, r3
 800776e:	d303      	bcc.n	8007778 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68d9      	ldr	r1, [r3, #12]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007780:	461a      	mov	r2, r3
 8007782:	6838      	ldr	r0, [r7, #0]
 8007784:	f002 f9ae 	bl	8009ae4 <memcpy>
	}
}
 8007788:	bf00      	nop
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007798:	f001 fe10 	bl	80093bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077a4:	e011      	b.n	80077ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d012      	beq.n	80077d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3324      	adds	r3, #36	; 0x24
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 feea 	bl	800858c <xTaskRemoveFromEventList>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80077be:	f000 ffc7 	bl	8008750 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	dce9      	bgt.n	80077a6 <prvUnlockQueue+0x16>
 80077d2:	e000      	b.n	80077d6 <prvUnlockQueue+0x46>
					break;
 80077d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	22ff      	movs	r2, #255	; 0xff
 80077da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80077de:	f001 fe21 	bl	8009424 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80077e2:	f001 fdeb 	bl	80093bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077ee:	e011      	b.n	8007814 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d012      	beq.n	800781e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3310      	adds	r3, #16
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 fec5 	bl	800858c <xTaskRemoveFromEventList>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007808:	f000 ffa2 	bl	8008750 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	3b01      	subs	r3, #1
 8007810:	b2db      	uxtb	r3, r3
 8007812:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007818:	2b00      	cmp	r3, #0
 800781a:	dce9      	bgt.n	80077f0 <prvUnlockQueue+0x60>
 800781c:	e000      	b.n	8007820 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800781e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	22ff      	movs	r2, #255	; 0xff
 8007824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007828:	f001 fdfc 	bl	8009424 <vPortExitCritical>
}
 800782c:	bf00      	nop
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800783c:	f001 fdbe 	bl	80093bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007844:	2b00      	cmp	r3, #0
 8007846:	d102      	bne.n	800784e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007848:	2301      	movs	r3, #1
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	e001      	b.n	8007852 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007852:	f001 fde7 	bl	8009424 <vPortExitCritical>

	return xReturn;
 8007856:	68fb      	ldr	r3, [r7, #12]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007868:	f001 fda8 	bl	80093bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007874:	429a      	cmp	r2, r3
 8007876:	d102      	bne.n	800787e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007878:	2301      	movs	r3, #1
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	e001      	b.n	8007882 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800787e:	2300      	movs	r3, #0
 8007880:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007882:	f001 fdcf 	bl	8009424 <vPortExitCritical>

	return xReturn;
 8007886:	68fb      	ldr	r3, [r7, #12]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	e014      	b.n	80078ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80078a0:	4a0f      	ldr	r2, [pc, #60]	; (80078e0 <vQueueAddToRegistry+0x50>)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10b      	bne.n	80078c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80078ac:	490c      	ldr	r1, [pc, #48]	; (80078e0 <vQueueAddToRegistry+0x50>)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80078b6:	4a0a      	ldr	r2, [pc, #40]	; (80078e0 <vQueueAddToRegistry+0x50>)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	4413      	add	r3, r2
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80078c2:	e006      	b.n	80078d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	3301      	adds	r3, #1
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b07      	cmp	r3, #7
 80078ce:	d9e7      	bls.n	80078a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80078d0:	bf00      	nop
 80078d2:	bf00      	nop
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	20000e94 	.word	0x20000e94

080078e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80078f4:	f001 fd62 	bl	80093bc <vPortEnterCritical>
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078fe:	b25b      	sxtb	r3, r3
 8007900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007904:	d103      	bne.n	800790e <vQueueWaitForMessageRestricted+0x2a>
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007914:	b25b      	sxtb	r3, r3
 8007916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791a:	d103      	bne.n	8007924 <vQueueWaitForMessageRestricted+0x40>
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007924:	f001 fd7e 	bl	8009424 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792c:	2b00      	cmp	r3, #0
 800792e:	d106      	bne.n	800793e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	3324      	adds	r3, #36	; 0x24
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	68b9      	ldr	r1, [r7, #8]
 8007938:	4618      	mov	r0, r3
 800793a:	f000 fdf9 	bl	8008530 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800793e:	6978      	ldr	r0, [r7, #20]
 8007940:	f7ff ff26 	bl	8007790 <prvUnlockQueue>
	}
 8007944:	bf00      	nop
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800794c:	b580      	push	{r7, lr}
 800794e:	b08e      	sub	sp, #56	; 0x38
 8007950:	af04      	add	r7, sp, #16
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
 8007958:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800795a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10c      	bne.n	800797a <xTaskCreateStatic+0x2e>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	b672      	cpsid	i
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	b662      	cpsie	i
 8007974:	623b      	str	r3, [r7, #32]
}
 8007976:	bf00      	nop
 8007978:	e7fe      	b.n	8007978 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800797a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10c      	bne.n	800799a <xTaskCreateStatic+0x4e>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007984:	b672      	cpsid	i
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	b662      	cpsie	i
 8007994:	61fb      	str	r3, [r7, #28]
}
 8007996:	bf00      	nop
 8007998:	e7fe      	b.n	8007998 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800799a:	23a8      	movs	r3, #168	; 0xa8
 800799c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	2ba8      	cmp	r3, #168	; 0xa8
 80079a2:	d00c      	beq.n	80079be <xTaskCreateStatic+0x72>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	b672      	cpsid	i
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	b662      	cpsie	i
 80079b8:	61bb      	str	r3, [r7, #24]
}
 80079ba:	bf00      	nop
 80079bc:	e7fe      	b.n	80079bc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80079be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80079c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d01e      	beq.n	8007a04 <xTaskCreateStatic+0xb8>
 80079c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01b      	beq.n	8007a04 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	2202      	movs	r2, #2
 80079da:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079de:	2300      	movs	r3, #0
 80079e0:	9303      	str	r3, [sp, #12]
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	9302      	str	r3, [sp, #8]
 80079e6:	f107 0314 	add.w	r3, r7, #20
 80079ea:	9301      	str	r3, [sp, #4]
 80079ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	68b9      	ldr	r1, [r7, #8]
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 f850 	bl	8007a9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079fe:	f000 f8f5 	bl	8007bec <prvAddNewTaskToReadyList>
 8007a02:	e001      	b.n	8007a08 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a08:	697b      	ldr	r3, [r7, #20]
	}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3728      	adds	r7, #40	; 0x28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b08c      	sub	sp, #48	; 0x30
 8007a16:	af04      	add	r7, sp, #16
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	60b9      	str	r1, [r7, #8]
 8007a1c:	603b      	str	r3, [r7, #0]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a22:	88fb      	ldrh	r3, [r7, #6]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4618      	mov	r0, r3
 8007a28:	f001 fdf4 	bl	8009614 <pvPortMalloc>
 8007a2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00e      	beq.n	8007a52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a34:	20a8      	movs	r0, #168	; 0xa8
 8007a36:	f001 fded 	bl	8009614 <pvPortMalloc>
 8007a3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	631a      	str	r2, [r3, #48]	; 0x30
 8007a48:	e005      	b.n	8007a56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a4a:	6978      	ldr	r0, [r7, #20]
 8007a4c:	f001 feac 	bl	80097a8 <vPortFree>
 8007a50:	e001      	b.n	8007a56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d017      	beq.n	8007a8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a64:	88fa      	ldrh	r2, [r7, #6]
 8007a66:	2300      	movs	r3, #0
 8007a68:	9303      	str	r3, [sp, #12]
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	9302      	str	r3, [sp, #8]
 8007a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68b9      	ldr	r1, [r7, #8]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 f80e 	bl	8007a9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a80:	69f8      	ldr	r0, [r7, #28]
 8007a82:	f000 f8b3 	bl	8007bec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a86:	2301      	movs	r3, #1
 8007a88:	61bb      	str	r3, [r7, #24]
 8007a8a:	e002      	b.n	8007a92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a92:	69bb      	ldr	r3, [r7, #24]
	}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3720      	adds	r7, #32
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
 8007aa8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	21a5      	movs	r1, #165	; 0xa5
 8007ab6:	f001 ff91 	bl	80099dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007ac4:	440b      	add	r3, r1
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	f023 0307 	bic.w	r3, r3, #7
 8007ad2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	f003 0307 	and.w	r3, r3, #7
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00c      	beq.n	8007af8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	b672      	cpsid	i
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	b662      	cpsie	i
 8007af2:	617b      	str	r3, [r7, #20]
}
 8007af4:	bf00      	nop
 8007af6:	e7fe      	b.n	8007af6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d01f      	beq.n	8007b3e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007afe:	2300      	movs	r3, #0
 8007b00:	61fb      	str	r3, [r7, #28]
 8007b02:	e012      	b.n	8007b2a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	4413      	add	r3, r2
 8007b0a:	7819      	ldrb	r1, [r3, #0]
 8007b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	4413      	add	r3, r2
 8007b12:	3334      	adds	r3, #52	; 0x34
 8007b14:	460a      	mov	r2, r1
 8007b16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d006      	beq.n	8007b32 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	3301      	adds	r3, #1
 8007b28:	61fb      	str	r3, [r7, #28]
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	2b0f      	cmp	r3, #15
 8007b2e:	d9e9      	bls.n	8007b04 <prvInitialiseNewTask+0x68>
 8007b30:	e000      	b.n	8007b34 <prvInitialiseNewTask+0x98>
			{
				break;
 8007b32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b3c:	e003      	b.n	8007b46 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b48:	2b37      	cmp	r3, #55	; 0x37
 8007b4a:	d901      	bls.n	8007b50 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b4c:	2337      	movs	r3, #55	; 0x37
 8007b4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5e:	2200      	movs	r2, #0
 8007b60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b64:	3304      	adds	r3, #4
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7ff f952 	bl	8006e10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	3318      	adds	r3, #24
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7ff f94d 	bl	8006e10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	3354      	adds	r3, #84	; 0x54
 8007ba0:	224c      	movs	r2, #76	; 0x4c
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f001 ff19 	bl	80099dc <memset>
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	4a0c      	ldr	r2, [pc, #48]	; (8007be0 <prvInitialiseNewTask+0x144>)
 8007bae:	659a      	str	r2, [r3, #88]	; 0x58
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb2:	4a0c      	ldr	r2, [pc, #48]	; (8007be4 <prvInitialiseNewTask+0x148>)
 8007bb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	4a0b      	ldr	r2, [pc, #44]	; (8007be8 <prvInitialiseNewTask+0x14c>)
 8007bba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	68f9      	ldr	r1, [r7, #12]
 8007bc0:	69b8      	ldr	r0, [r7, #24]
 8007bc2:	f001 faed 	bl	80091a0 <pxPortInitialiseStack>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d002      	beq.n	8007bd8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bd8:	bf00      	nop
 8007bda:	3720      	adds	r7, #32
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	20005120 	.word	0x20005120
 8007be4:	20005188 	.word	0x20005188
 8007be8:	200051f0 	.word	0x200051f0

08007bec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007bf4:	f001 fbe2 	bl	80093bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007bf8:	4b2d      	ldr	r3, [pc, #180]	; (8007cb0 <prvAddNewTaskToReadyList+0xc4>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	4a2c      	ldr	r2, [pc, #176]	; (8007cb0 <prvAddNewTaskToReadyList+0xc4>)
 8007c00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c02:	4b2c      	ldr	r3, [pc, #176]	; (8007cb4 <prvAddNewTaskToReadyList+0xc8>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d109      	bne.n	8007c1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c0a:	4a2a      	ldr	r2, [pc, #168]	; (8007cb4 <prvAddNewTaskToReadyList+0xc8>)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c10:	4b27      	ldr	r3, [pc, #156]	; (8007cb0 <prvAddNewTaskToReadyList+0xc4>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d110      	bne.n	8007c3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c18:	f000 fdbe 	bl	8008798 <prvInitialiseTaskLists>
 8007c1c:	e00d      	b.n	8007c3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c1e:	4b26      	ldr	r3, [pc, #152]	; (8007cb8 <prvAddNewTaskToReadyList+0xcc>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d109      	bne.n	8007c3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c26:	4b23      	ldr	r3, [pc, #140]	; (8007cb4 <prvAddNewTaskToReadyList+0xc8>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d802      	bhi.n	8007c3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c34:	4a1f      	ldr	r2, [pc, #124]	; (8007cb4 <prvAddNewTaskToReadyList+0xc8>)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c3a:	4b20      	ldr	r3, [pc, #128]	; (8007cbc <prvAddNewTaskToReadyList+0xd0>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	4a1e      	ldr	r2, [pc, #120]	; (8007cbc <prvAddNewTaskToReadyList+0xd0>)
 8007c42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007c44:	4b1d      	ldr	r3, [pc, #116]	; (8007cbc <prvAddNewTaskToReadyList+0xd0>)
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c50:	4b1b      	ldr	r3, [pc, #108]	; (8007cc0 <prvAddNewTaskToReadyList+0xd4>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d903      	bls.n	8007c60 <prvAddNewTaskToReadyList+0x74>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	4a18      	ldr	r2, [pc, #96]	; (8007cc0 <prvAddNewTaskToReadyList+0xd4>)
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c64:	4613      	mov	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4a15      	ldr	r2, [pc, #84]	; (8007cc4 <prvAddNewTaskToReadyList+0xd8>)
 8007c6e:	441a      	add	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3304      	adds	r3, #4
 8007c74:	4619      	mov	r1, r3
 8007c76:	4610      	mov	r0, r2
 8007c78:	f7ff f8d7 	bl	8006e2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c7c:	f001 fbd2 	bl	8009424 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c80:	4b0d      	ldr	r3, [pc, #52]	; (8007cb8 <prvAddNewTaskToReadyList+0xcc>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00e      	beq.n	8007ca6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c88:	4b0a      	ldr	r3, [pc, #40]	; (8007cb4 <prvAddNewTaskToReadyList+0xc8>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d207      	bcs.n	8007ca6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c96:	4b0c      	ldr	r3, [pc, #48]	; (8007cc8 <prvAddNewTaskToReadyList+0xdc>)
 8007c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ca6:	bf00      	nop
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	200013a8 	.word	0x200013a8
 8007cb4:	20000ed4 	.word	0x20000ed4
 8007cb8:	200013b4 	.word	0x200013b4
 8007cbc:	200013c4 	.word	0x200013c4
 8007cc0:	200013b0 	.word	0x200013b0
 8007cc4:	20000ed8 	.word	0x20000ed8
 8007cc8:	e000ed04 	.word	0xe000ed04

08007ccc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d019      	beq.n	8007d12 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007cde:	4b14      	ldr	r3, [pc, #80]	; (8007d30 <vTaskDelay+0x64>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00c      	beq.n	8007d00 <vTaskDelay+0x34>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	b672      	cpsid	i
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	b662      	cpsie	i
 8007cfa:	60bb      	str	r3, [r7, #8]
}
 8007cfc:	bf00      	nop
 8007cfe:	e7fe      	b.n	8007cfe <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007d00:	f000 fa10 	bl	8008124 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d04:	2100      	movs	r1, #0
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fe9a 	bl	8008a40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d0c:	f000 fa18 	bl	8008140 <xTaskResumeAll>
 8007d10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d107      	bne.n	8007d28 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007d18:	4b06      	ldr	r3, [pc, #24]	; (8007d34 <vTaskDelay+0x68>)
 8007d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	200013d0 	.word	0x200013d0
 8007d34:	e000ed04 	.word	0xe000ed04

08007d38 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007d40:	f001 fb3c 	bl	80093bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d102      	bne.n	8007d50 <vTaskSuspend+0x18>
 8007d4a:	4b31      	ldr	r3, [pc, #196]	; (8007e10 <vTaskSuspend+0xd8>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	e000      	b.n	8007d52 <vTaskSuspend+0x1a>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3304      	adds	r3, #4
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff f8c3 	bl	8006ee4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d004      	beq.n	8007d70 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	3318      	adds	r3, #24
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff f8ba 	bl	8006ee4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4619      	mov	r1, r3
 8007d76:	4827      	ldr	r0, [pc, #156]	; (8007e14 <vTaskSuspend+0xdc>)
 8007d78:	f7ff f857 	bl	8006e2a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d103      	bne.n	8007d90 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007d90:	f001 fb48 	bl	8009424 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007d94:	4b20      	ldr	r3, [pc, #128]	; (8007e18 <vTaskSuspend+0xe0>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007d9c:	f001 fb0e 	bl	80093bc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007da0:	f000 fd9e 	bl	80088e0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007da4:	f001 fb3e 	bl	8009424 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007da8:	4b19      	ldr	r3, [pc, #100]	; (8007e10 <vTaskSuspend+0xd8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d129      	bne.n	8007e06 <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 8007db2:	4b19      	ldr	r3, [pc, #100]	; (8007e18 <vTaskSuspend+0xe0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d019      	beq.n	8007dee <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007dba:	4b18      	ldr	r3, [pc, #96]	; (8007e1c <vTaskSuspend+0xe4>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00c      	beq.n	8007ddc <vTaskSuspend+0xa4>
	__asm volatile
 8007dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc6:	b672      	cpsid	i
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	b662      	cpsie	i
 8007dd6:	60bb      	str	r3, [r7, #8]
}
 8007dd8:	bf00      	nop
 8007dda:	e7fe      	b.n	8007dda <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8007ddc:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <vTaskSuspend+0xe8>)
 8007dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007dec:	e00b      	b.n	8007e06 <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <vTaskSuspend+0xdc>)
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	4b0c      	ldr	r3, [pc, #48]	; (8007e24 <vTaskSuspend+0xec>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d103      	bne.n	8007e02 <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8007dfa:	4b05      	ldr	r3, [pc, #20]	; (8007e10 <vTaskSuspend+0xd8>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	601a      	str	r2, [r3, #0]
	}
 8007e00:	e001      	b.n	8007e06 <vTaskSuspend+0xce>
					vTaskSwitchContext();
 8007e02:	f000 fb09 	bl	8008418 <vTaskSwitchContext>
	}
 8007e06:	bf00      	nop
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	20000ed4 	.word	0x20000ed4
 8007e14:	20001394 	.word	0x20001394
 8007e18:	200013b4 	.word	0x200013b4
 8007e1c:	200013d0 	.word	0x200013d0
 8007e20:	e000ed04 	.word	0xe000ed04
 8007e24:	200013a8 	.word	0x200013a8

08007e28 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007e30:	2300      	movs	r3, #0
 8007e32:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10c      	bne.n	8007e58 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	b672      	cpsid	i
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	b662      	cpsie	i
 8007e52:	60fb      	str	r3, [r7, #12]
}
 8007e54:	bf00      	nop
 8007e56:	e7fe      	b.n	8007e56 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	4a0a      	ldr	r2, [pc, #40]	; (8007e88 <prvTaskIsTaskSuspended+0x60>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d10a      	bne.n	8007e78 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e66:	4a09      	ldr	r2, [pc, #36]	; (8007e8c <prvTaskIsTaskSuspended+0x64>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d005      	beq.n	8007e78 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8007e74:	2301      	movs	r3, #1
 8007e76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e78:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	371c      	adds	r7, #28
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	20001394 	.word	0x20001394
 8007e8c:	20001368 	.word	0x20001368

08007e90 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10c      	bne.n	8007ebc <vTaskResume+0x2c>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	b672      	cpsid	i
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	b662      	cpsie	i
 8007eb6:	60bb      	str	r3, [r7, #8]
}
 8007eb8:	bf00      	nop
 8007eba:	e7fe      	b.n	8007eba <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007ebc:	4b20      	ldr	r3, [pc, #128]	; (8007f40 <vTaskResume+0xb0>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d038      	beq.n	8007f38 <vTaskResume+0xa8>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d035      	beq.n	8007f38 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8007ecc:	f001 fa76 	bl	80093bc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f7ff ffa9 	bl	8007e28 <prvTaskIsTaskSuspended>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d02b      	beq.n	8007f34 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fe ffff 	bl	8006ee4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eea:	4b16      	ldr	r3, [pc, #88]	; (8007f44 <vTaskResume+0xb4>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d903      	bls.n	8007efa <vTaskResume+0x6a>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef6:	4a13      	ldr	r2, [pc, #76]	; (8007f44 <vTaskResume+0xb4>)
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4a10      	ldr	r2, [pc, #64]	; (8007f48 <vTaskResume+0xb8>)
 8007f08:	441a      	add	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4610      	mov	r0, r2
 8007f12:	f7fe ff8a 	bl	8006e2a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1a:	4b09      	ldr	r3, [pc, #36]	; (8007f40 <vTaskResume+0xb0>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d307      	bcc.n	8007f34 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007f24:	4b09      	ldr	r3, [pc, #36]	; (8007f4c <vTaskResume+0xbc>)
 8007f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007f34:	f001 fa76 	bl	8009424 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f38:	bf00      	nop
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20000ed4 	.word	0x20000ed4
 8007f44:	200013b0 	.word	0x200013b0
 8007f48:	20000ed8 	.word	0x20000ed8
 8007f4c:	e000ed04 	.word	0xe000ed04

08007f50 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08a      	sub	sp, #40	; 0x28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10c      	bne.n	8007f80 <xTaskResumeFromISR+0x30>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6a:	b672      	cpsid	i
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	b662      	cpsie	i
 8007f7a:	61bb      	str	r3, [r7, #24]
}
 8007f7c:	bf00      	nop
 8007f7e:	e7fe      	b.n	8007f7e <xTaskResumeFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f80:	f001 fb04 	bl	800958c <vPortValidateInterruptPriority>
	__asm volatile
 8007f84:	f3ef 8211 	mrs	r2, BASEPRI
 8007f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8c:	b672      	cpsid	i
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	b662      	cpsie	i
 8007f9c:	617a      	str	r2, [r7, #20]
 8007f9e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007fa0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fa2:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007fa4:	6a38      	ldr	r0, [r7, #32]
 8007fa6:	f7ff ff3f 	bl	8007e28 <prvTaskIsTaskSuspended>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d030      	beq.n	8008012 <xTaskResumeFromISR+0xc2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fb0:	4b1d      	ldr	r3, [pc, #116]	; (8008028 <xTaskResumeFromISR+0xd8>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d126      	bne.n	8008006 <xTaskResumeFromISR+0xb6>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fbc:	4b1b      	ldr	r3, [pc, #108]	; (800802c <xTaskResumeFromISR+0xdc>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d301      	bcc.n	8007fca <xTaskResumeFromISR+0x7a>
					{
						xYieldRequired = pdTRUE;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	3304      	adds	r3, #4
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe ff88 	bl	8006ee4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd8:	4b15      	ldr	r3, [pc, #84]	; (8008030 <xTaskResumeFromISR+0xe0>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d903      	bls.n	8007fe8 <xTaskResumeFromISR+0x98>
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	4a12      	ldr	r2, [pc, #72]	; (8008030 <xTaskResumeFromISR+0xe0>)
 8007fe6:	6013      	str	r3, [r2, #0]
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fec:	4613      	mov	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4a0f      	ldr	r2, [pc, #60]	; (8008034 <xTaskResumeFromISR+0xe4>)
 8007ff6:	441a      	add	r2, r3
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	4610      	mov	r0, r2
 8008000:	f7fe ff13 	bl	8006e2a <vListInsertEnd>
 8008004:	e005      	b.n	8008012 <xTaskResumeFromISR+0xc2>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	3318      	adds	r3, #24
 800800a:	4619      	mov	r1, r3
 800800c:	480a      	ldr	r0, [pc, #40]	; (8008038 <xTaskResumeFromISR+0xe8>)
 800800e:	f7fe ff0c 	bl	8006e2a <vListInsertEnd>
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f383 8811 	msr	BASEPRI, r3
}
 800801c:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008020:	4618      	mov	r0, r3
 8008022:	3728      	adds	r7, #40	; 0x28
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	200013d0 	.word	0x200013d0
 800802c:	20000ed4 	.word	0x20000ed4
 8008030:	200013b0 	.word	0x200013b0
 8008034:	20000ed8 	.word	0x20000ed8
 8008038:	20001368 	.word	0x20001368

0800803c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b08a      	sub	sp, #40	; 0x28
 8008040:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008042:	2300      	movs	r3, #0
 8008044:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008046:	2300      	movs	r3, #0
 8008048:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800804a:	463a      	mov	r2, r7
 800804c:	1d39      	adds	r1, r7, #4
 800804e:	f107 0308 	add.w	r3, r7, #8
 8008052:	4618      	mov	r0, r3
 8008054:	f7fe fe88 	bl	8006d68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	9202      	str	r2, [sp, #8]
 8008060:	9301      	str	r3, [sp, #4]
 8008062:	2300      	movs	r3, #0
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	2300      	movs	r3, #0
 8008068:	460a      	mov	r2, r1
 800806a:	4926      	ldr	r1, [pc, #152]	; (8008104 <vTaskStartScheduler+0xc8>)
 800806c:	4826      	ldr	r0, [pc, #152]	; (8008108 <vTaskStartScheduler+0xcc>)
 800806e:	f7ff fc6d 	bl	800794c <xTaskCreateStatic>
 8008072:	4603      	mov	r3, r0
 8008074:	4a25      	ldr	r2, [pc, #148]	; (800810c <vTaskStartScheduler+0xd0>)
 8008076:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008078:	4b24      	ldr	r3, [pc, #144]	; (800810c <vTaskStartScheduler+0xd0>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d002      	beq.n	8008086 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008080:	2301      	movs	r3, #1
 8008082:	617b      	str	r3, [r7, #20]
 8008084:	e001      	b.n	800808a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008086:	2300      	movs	r3, #0
 8008088:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d102      	bne.n	8008096 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008090:	f000 fd2a 	bl	8008ae8 <xTimerCreateTimerTask>
 8008094:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d11d      	bne.n	80080d8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800809c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a0:	b672      	cpsid	i
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	b662      	cpsie	i
 80080b0:	613b      	str	r3, [r7, #16]
}
 80080b2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080b4:	4b16      	ldr	r3, [pc, #88]	; (8008110 <vTaskStartScheduler+0xd4>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3354      	adds	r3, #84	; 0x54
 80080ba:	4a16      	ldr	r2, [pc, #88]	; (8008114 <vTaskStartScheduler+0xd8>)
 80080bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080be:	4b16      	ldr	r3, [pc, #88]	; (8008118 <vTaskStartScheduler+0xdc>)
 80080c0:	f04f 32ff 	mov.w	r2, #4294967295
 80080c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080c6:	4b15      	ldr	r3, [pc, #84]	; (800811c <vTaskStartScheduler+0xe0>)
 80080c8:	2201      	movs	r2, #1
 80080ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080cc:	4b14      	ldr	r3, [pc, #80]	; (8008120 <vTaskStartScheduler+0xe4>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080d2:	f001 f8f5 	bl	80092c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080d6:	e010      	b.n	80080fa <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080de:	d10c      	bne.n	80080fa <vTaskStartScheduler+0xbe>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	b672      	cpsid	i
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	b662      	cpsie	i
 80080f4:	60fb      	str	r3, [r7, #12]
}
 80080f6:	bf00      	nop
 80080f8:	e7fe      	b.n	80080f8 <vTaskStartScheduler+0xbc>
}
 80080fa:	bf00      	nop
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	08009ca0 	.word	0x08009ca0
 8008108:	08008769 	.word	0x08008769
 800810c:	200013cc 	.word	0x200013cc
 8008110:	20000ed4 	.word	0x20000ed4
 8008114:	20000088 	.word	0x20000088
 8008118:	200013c8 	.word	0x200013c8
 800811c:	200013b4 	.word	0x200013b4
 8008120:	200013ac 	.word	0x200013ac

08008124 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008124:	b480      	push	{r7}
 8008126:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008128:	4b04      	ldr	r3, [pc, #16]	; (800813c <vTaskSuspendAll+0x18>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3301      	adds	r3, #1
 800812e:	4a03      	ldr	r2, [pc, #12]	; (800813c <vTaskSuspendAll+0x18>)
 8008130:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008132:	bf00      	nop
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	200013d0 	.word	0x200013d0

08008140 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008146:	2300      	movs	r3, #0
 8008148:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800814a:	2300      	movs	r3, #0
 800814c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800814e:	4b43      	ldr	r3, [pc, #268]	; (800825c <xTaskResumeAll+0x11c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10c      	bne.n	8008170 <xTaskResumeAll+0x30>
	__asm volatile
 8008156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815a:	b672      	cpsid	i
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	b662      	cpsie	i
 800816a:	603b      	str	r3, [r7, #0]
}
 800816c:	bf00      	nop
 800816e:	e7fe      	b.n	800816e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008170:	f001 f924 	bl	80093bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008174:	4b39      	ldr	r3, [pc, #228]	; (800825c <xTaskResumeAll+0x11c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	3b01      	subs	r3, #1
 800817a:	4a38      	ldr	r2, [pc, #224]	; (800825c <xTaskResumeAll+0x11c>)
 800817c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800817e:	4b37      	ldr	r3, [pc, #220]	; (800825c <xTaskResumeAll+0x11c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d162      	bne.n	800824c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008186:	4b36      	ldr	r3, [pc, #216]	; (8008260 <xTaskResumeAll+0x120>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d05e      	beq.n	800824c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800818e:	e02f      	b.n	80081f0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008190:	4b34      	ldr	r3, [pc, #208]	; (8008264 <xTaskResumeAll+0x124>)
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3318      	adds	r3, #24
 800819c:	4618      	mov	r0, r3
 800819e:	f7fe fea1 	bl	8006ee4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	3304      	adds	r3, #4
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fe fe9c 	bl	8006ee4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b0:	4b2d      	ldr	r3, [pc, #180]	; (8008268 <xTaskResumeAll+0x128>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d903      	bls.n	80081c0 <xTaskResumeAll+0x80>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081bc:	4a2a      	ldr	r2, [pc, #168]	; (8008268 <xTaskResumeAll+0x128>)
 80081be:	6013      	str	r3, [r2, #0]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c4:	4613      	mov	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4a27      	ldr	r2, [pc, #156]	; (800826c <xTaskResumeAll+0x12c>)
 80081ce:	441a      	add	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	3304      	adds	r3, #4
 80081d4:	4619      	mov	r1, r3
 80081d6:	4610      	mov	r0, r2
 80081d8:	f7fe fe27 	bl	8006e2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e0:	4b23      	ldr	r3, [pc, #140]	; (8008270 <xTaskResumeAll+0x130>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d302      	bcc.n	80081f0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80081ea:	4b22      	ldr	r3, [pc, #136]	; (8008274 <xTaskResumeAll+0x134>)
 80081ec:	2201      	movs	r2, #1
 80081ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081f0:	4b1c      	ldr	r3, [pc, #112]	; (8008264 <xTaskResumeAll+0x124>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1cb      	bne.n	8008190 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80081fe:	f000 fb6f 	bl	80088e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008202:	4b1d      	ldr	r3, [pc, #116]	; (8008278 <xTaskResumeAll+0x138>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d010      	beq.n	8008230 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800820e:	f000 f847 	bl	80082a0 <xTaskIncrementTick>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d002      	beq.n	800821e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008218:	4b16      	ldr	r3, [pc, #88]	; (8008274 <xTaskResumeAll+0x134>)
 800821a:	2201      	movs	r2, #1
 800821c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	3b01      	subs	r3, #1
 8008222:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1f1      	bne.n	800820e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800822a:	4b13      	ldr	r3, [pc, #76]	; (8008278 <xTaskResumeAll+0x138>)
 800822c:	2200      	movs	r2, #0
 800822e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008230:	4b10      	ldr	r3, [pc, #64]	; (8008274 <xTaskResumeAll+0x134>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d009      	beq.n	800824c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008238:	2301      	movs	r3, #1
 800823a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800823c:	4b0f      	ldr	r3, [pc, #60]	; (800827c <xTaskResumeAll+0x13c>)
 800823e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800824c:	f001 f8ea 	bl	8009424 <vPortExitCritical>

	return xAlreadyYielded;
 8008250:	68bb      	ldr	r3, [r7, #8]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	200013d0 	.word	0x200013d0
 8008260:	200013a8 	.word	0x200013a8
 8008264:	20001368 	.word	0x20001368
 8008268:	200013b0 	.word	0x200013b0
 800826c:	20000ed8 	.word	0x20000ed8
 8008270:	20000ed4 	.word	0x20000ed4
 8008274:	200013bc 	.word	0x200013bc
 8008278:	200013b8 	.word	0x200013b8
 800827c:	e000ed04 	.word	0xe000ed04

08008280 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008286:	4b05      	ldr	r3, [pc, #20]	; (800829c <xTaskGetTickCount+0x1c>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800828c:	687b      	ldr	r3, [r7, #4]
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	200013ac 	.word	0x200013ac

080082a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082a6:	2300      	movs	r3, #0
 80082a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082aa:	4b50      	ldr	r3, [pc, #320]	; (80083ec <xTaskIncrementTick+0x14c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f040 808b 	bne.w	80083ca <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082b4:	4b4e      	ldr	r3, [pc, #312]	; (80083f0 <xTaskIncrementTick+0x150>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3301      	adds	r3, #1
 80082ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082bc:	4a4c      	ldr	r2, [pc, #304]	; (80083f0 <xTaskIncrementTick+0x150>)
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d122      	bne.n	800830e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80082c8:	4b4a      	ldr	r3, [pc, #296]	; (80083f4 <xTaskIncrementTick+0x154>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00c      	beq.n	80082ec <xTaskIncrementTick+0x4c>
	__asm volatile
 80082d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d6:	b672      	cpsid	i
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	b662      	cpsie	i
 80082e6:	603b      	str	r3, [r7, #0]
}
 80082e8:	bf00      	nop
 80082ea:	e7fe      	b.n	80082ea <xTaskIncrementTick+0x4a>
 80082ec:	4b41      	ldr	r3, [pc, #260]	; (80083f4 <xTaskIncrementTick+0x154>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	60fb      	str	r3, [r7, #12]
 80082f2:	4b41      	ldr	r3, [pc, #260]	; (80083f8 <xTaskIncrementTick+0x158>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a3f      	ldr	r2, [pc, #252]	; (80083f4 <xTaskIncrementTick+0x154>)
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	4a3f      	ldr	r2, [pc, #252]	; (80083f8 <xTaskIncrementTick+0x158>)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6013      	str	r3, [r2, #0]
 8008300:	4b3e      	ldr	r3, [pc, #248]	; (80083fc <xTaskIncrementTick+0x15c>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3301      	adds	r3, #1
 8008306:	4a3d      	ldr	r2, [pc, #244]	; (80083fc <xTaskIncrementTick+0x15c>)
 8008308:	6013      	str	r3, [r2, #0]
 800830a:	f000 fae9 	bl	80088e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800830e:	4b3c      	ldr	r3, [pc, #240]	; (8008400 <xTaskIncrementTick+0x160>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	429a      	cmp	r2, r3
 8008316:	d349      	bcc.n	80083ac <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008318:	4b36      	ldr	r3, [pc, #216]	; (80083f4 <xTaskIncrementTick+0x154>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d104      	bne.n	800832c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008322:	4b37      	ldr	r3, [pc, #220]	; (8008400 <xTaskIncrementTick+0x160>)
 8008324:	f04f 32ff 	mov.w	r2, #4294967295
 8008328:	601a      	str	r2, [r3, #0]
					break;
 800832a:	e03f      	b.n	80083ac <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800832c:	4b31      	ldr	r3, [pc, #196]	; (80083f4 <xTaskIncrementTick+0x154>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	429a      	cmp	r2, r3
 8008342:	d203      	bcs.n	800834c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008344:	4a2e      	ldr	r2, [pc, #184]	; (8008400 <xTaskIncrementTick+0x160>)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800834a:	e02f      	b.n	80083ac <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	3304      	adds	r3, #4
 8008350:	4618      	mov	r0, r3
 8008352:	f7fe fdc7 	bl	8006ee4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835a:	2b00      	cmp	r3, #0
 800835c:	d004      	beq.n	8008368 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	3318      	adds	r3, #24
 8008362:	4618      	mov	r0, r3
 8008364:	f7fe fdbe 	bl	8006ee4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836c:	4b25      	ldr	r3, [pc, #148]	; (8008404 <xTaskIncrementTick+0x164>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	429a      	cmp	r2, r3
 8008372:	d903      	bls.n	800837c <xTaskIncrementTick+0xdc>
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008378:	4a22      	ldr	r2, [pc, #136]	; (8008404 <xTaskIncrementTick+0x164>)
 800837a:	6013      	str	r3, [r2, #0]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008380:	4613      	mov	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4a1f      	ldr	r2, [pc, #124]	; (8008408 <xTaskIncrementTick+0x168>)
 800838a:	441a      	add	r2, r3
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	3304      	adds	r3, #4
 8008390:	4619      	mov	r1, r3
 8008392:	4610      	mov	r0, r2
 8008394:	f7fe fd49 	bl	8006e2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839c:	4b1b      	ldr	r3, [pc, #108]	; (800840c <xTaskIncrementTick+0x16c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d3b8      	bcc.n	8008318 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80083a6:	2301      	movs	r3, #1
 80083a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083aa:	e7b5      	b.n	8008318 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083ac:	4b17      	ldr	r3, [pc, #92]	; (800840c <xTaskIncrementTick+0x16c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b2:	4915      	ldr	r1, [pc, #84]	; (8008408 <xTaskIncrementTick+0x168>)
 80083b4:	4613      	mov	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	440b      	add	r3, r1
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d907      	bls.n	80083d4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80083c4:	2301      	movs	r3, #1
 80083c6:	617b      	str	r3, [r7, #20]
 80083c8:	e004      	b.n	80083d4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80083ca:	4b11      	ldr	r3, [pc, #68]	; (8008410 <xTaskIncrementTick+0x170>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3301      	adds	r3, #1
 80083d0:	4a0f      	ldr	r2, [pc, #60]	; (8008410 <xTaskIncrementTick+0x170>)
 80083d2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80083d4:	4b0f      	ldr	r3, [pc, #60]	; (8008414 <xTaskIncrementTick+0x174>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80083dc:	2301      	movs	r3, #1
 80083de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80083e0:	697b      	ldr	r3, [r7, #20]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	200013d0 	.word	0x200013d0
 80083f0:	200013ac 	.word	0x200013ac
 80083f4:	20001360 	.word	0x20001360
 80083f8:	20001364 	.word	0x20001364
 80083fc:	200013c0 	.word	0x200013c0
 8008400:	200013c8 	.word	0x200013c8
 8008404:	200013b0 	.word	0x200013b0
 8008408:	20000ed8 	.word	0x20000ed8
 800840c:	20000ed4 	.word	0x20000ed4
 8008410:	200013b8 	.word	0x200013b8
 8008414:	200013bc 	.word	0x200013bc

08008418 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800841e:	4b2b      	ldr	r3, [pc, #172]	; (80084cc <vTaskSwitchContext+0xb4>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008426:	4b2a      	ldr	r3, [pc, #168]	; (80084d0 <vTaskSwitchContext+0xb8>)
 8008428:	2201      	movs	r2, #1
 800842a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800842c:	e048      	b.n	80084c0 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800842e:	4b28      	ldr	r3, [pc, #160]	; (80084d0 <vTaskSwitchContext+0xb8>)
 8008430:	2200      	movs	r2, #0
 8008432:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008434:	4b27      	ldr	r3, [pc, #156]	; (80084d4 <vTaskSwitchContext+0xbc>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60fb      	str	r3, [r7, #12]
 800843a:	e012      	b.n	8008462 <vTaskSwitchContext+0x4a>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10c      	bne.n	800845c <vTaskSwitchContext+0x44>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008446:	b672      	cpsid	i
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	b662      	cpsie	i
 8008456:	607b      	str	r3, [r7, #4]
}
 8008458:	bf00      	nop
 800845a:	e7fe      	b.n	800845a <vTaskSwitchContext+0x42>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	3b01      	subs	r3, #1
 8008460:	60fb      	str	r3, [r7, #12]
 8008462:	491d      	ldr	r1, [pc, #116]	; (80084d8 <vTaskSwitchContext+0xc0>)
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	4613      	mov	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	440b      	add	r3, r1
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d0e2      	beq.n	800843c <vTaskSwitchContext+0x24>
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	4613      	mov	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4a15      	ldr	r2, [pc, #84]	; (80084d8 <vTaskSwitchContext+0xc0>)
 8008482:	4413      	add	r3, r2
 8008484:	60bb      	str	r3, [r7, #8]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	605a      	str	r2, [r3, #4]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	685a      	ldr	r2, [r3, #4]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	3308      	adds	r3, #8
 8008498:	429a      	cmp	r2, r3
 800849a:	d104      	bne.n	80084a6 <vTaskSwitchContext+0x8e>
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	685a      	ldr	r2, [r3, #4]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	605a      	str	r2, [r3, #4]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	4a0b      	ldr	r2, [pc, #44]	; (80084dc <vTaskSwitchContext+0xc4>)
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	4a08      	ldr	r2, [pc, #32]	; (80084d4 <vTaskSwitchContext+0xbc>)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084b6:	4b09      	ldr	r3, [pc, #36]	; (80084dc <vTaskSwitchContext+0xc4>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3354      	adds	r3, #84	; 0x54
 80084bc:	4a08      	ldr	r2, [pc, #32]	; (80084e0 <vTaskSwitchContext+0xc8>)
 80084be:	6013      	str	r3, [r2, #0]
}
 80084c0:	bf00      	nop
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	200013d0 	.word	0x200013d0
 80084d0:	200013bc 	.word	0x200013bc
 80084d4:	200013b0 	.word	0x200013b0
 80084d8:	20000ed8 	.word	0x20000ed8
 80084dc:	20000ed4 	.word	0x20000ed4
 80084e0:	20000088 	.word	0x20000088

080084e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10c      	bne.n	800850e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	b672      	cpsid	i
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	b662      	cpsie	i
 8008508:	60fb      	str	r3, [r7, #12]
}
 800850a:	bf00      	nop
 800850c:	e7fe      	b.n	800850c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800850e:	4b07      	ldr	r3, [pc, #28]	; (800852c <vTaskPlaceOnEventList+0x48>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3318      	adds	r3, #24
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7fe fcab 	bl	8006e72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800851c:	2101      	movs	r1, #1
 800851e:	6838      	ldr	r0, [r7, #0]
 8008520:	f000 fa8e 	bl	8008a40 <prvAddCurrentTaskToDelayedList>
}
 8008524:	bf00      	nop
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	20000ed4 	.word	0x20000ed4

08008530 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10c      	bne.n	800855c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008546:	b672      	cpsid	i
 8008548:	f383 8811 	msr	BASEPRI, r3
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	b662      	cpsie	i
 8008556:	617b      	str	r3, [r7, #20]
}
 8008558:	bf00      	nop
 800855a:	e7fe      	b.n	800855a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800855c:	4b0a      	ldr	r3, [pc, #40]	; (8008588 <vTaskPlaceOnEventListRestricted+0x58>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3318      	adds	r3, #24
 8008562:	4619      	mov	r1, r3
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f7fe fc60 	bl	8006e2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008570:	f04f 33ff 	mov.w	r3, #4294967295
 8008574:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008576:	6879      	ldr	r1, [r7, #4]
 8008578:	68b8      	ldr	r0, [r7, #8]
 800857a:	f000 fa61 	bl	8008a40 <prvAddCurrentTaskToDelayedList>
	}
 800857e:	bf00      	nop
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20000ed4 	.word	0x20000ed4

0800858c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10c      	bne.n	80085bc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a6:	b672      	cpsid	i
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	b662      	cpsie	i
 80085b6:	60fb      	str	r3, [r7, #12]
}
 80085b8:	bf00      	nop
 80085ba:	e7fe      	b.n	80085ba <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	3318      	adds	r3, #24
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7fe fc8f 	bl	8006ee4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085c6:	4b1e      	ldr	r3, [pc, #120]	; (8008640 <xTaskRemoveFromEventList+0xb4>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d11d      	bne.n	800860a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	3304      	adds	r3, #4
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe fc86 	bl	8006ee4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085dc:	4b19      	ldr	r3, [pc, #100]	; (8008644 <xTaskRemoveFromEventList+0xb8>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d903      	bls.n	80085ec <xTaskRemoveFromEventList+0x60>
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e8:	4a16      	ldr	r2, [pc, #88]	; (8008644 <xTaskRemoveFromEventList+0xb8>)
 80085ea:	6013      	str	r3, [r2, #0]
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f0:	4613      	mov	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4a13      	ldr	r2, [pc, #76]	; (8008648 <xTaskRemoveFromEventList+0xbc>)
 80085fa:	441a      	add	r2, r3
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	3304      	adds	r3, #4
 8008600:	4619      	mov	r1, r3
 8008602:	4610      	mov	r0, r2
 8008604:	f7fe fc11 	bl	8006e2a <vListInsertEnd>
 8008608:	e005      	b.n	8008616 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	3318      	adds	r3, #24
 800860e:	4619      	mov	r1, r3
 8008610:	480e      	ldr	r0, [pc, #56]	; (800864c <xTaskRemoveFromEventList+0xc0>)
 8008612:	f7fe fc0a 	bl	8006e2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861a:	4b0d      	ldr	r3, [pc, #52]	; (8008650 <xTaskRemoveFromEventList+0xc4>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	429a      	cmp	r2, r3
 8008622:	d905      	bls.n	8008630 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008624:	2301      	movs	r3, #1
 8008626:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008628:	4b0a      	ldr	r3, [pc, #40]	; (8008654 <xTaskRemoveFromEventList+0xc8>)
 800862a:	2201      	movs	r2, #1
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	e001      	b.n	8008634 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008630:	2300      	movs	r3, #0
 8008632:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008634:	697b      	ldr	r3, [r7, #20]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	200013d0 	.word	0x200013d0
 8008644:	200013b0 	.word	0x200013b0
 8008648:	20000ed8 	.word	0x20000ed8
 800864c:	20001368 	.word	0x20001368
 8008650:	20000ed4 	.word	0x20000ed4
 8008654:	200013bc 	.word	0x200013bc

08008658 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008660:	4b06      	ldr	r3, [pc, #24]	; (800867c <vTaskInternalSetTimeOutState+0x24>)
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008668:	4b05      	ldr	r3, [pc, #20]	; (8008680 <vTaskInternalSetTimeOutState+0x28>)
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	605a      	str	r2, [r3, #4]
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	200013c0 	.word	0x200013c0
 8008680:	200013ac 	.word	0x200013ac

08008684 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b088      	sub	sp, #32
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10c      	bne.n	80086ae <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008698:	b672      	cpsid	i
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	b662      	cpsie	i
 80086a8:	613b      	str	r3, [r7, #16]
}
 80086aa:	bf00      	nop
 80086ac:	e7fe      	b.n	80086ac <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10c      	bne.n	80086ce <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	b672      	cpsid	i
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	b662      	cpsie	i
 80086c8:	60fb      	str	r3, [r7, #12]
}
 80086ca:	bf00      	nop
 80086cc:	e7fe      	b.n	80086cc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80086ce:	f000 fe75 	bl	80093bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80086d2:	4b1d      	ldr	r3, [pc, #116]	; (8008748 <xTaskCheckForTimeOut+0xc4>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ea:	d102      	bne.n	80086f2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086ec:	2300      	movs	r3, #0
 80086ee:	61fb      	str	r3, [r7, #28]
 80086f0:	e023      	b.n	800873a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	4b15      	ldr	r3, [pc, #84]	; (800874c <xTaskCheckForTimeOut+0xc8>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d007      	beq.n	800870e <xTaskCheckForTimeOut+0x8a>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	69ba      	ldr	r2, [r7, #24]
 8008704:	429a      	cmp	r2, r3
 8008706:	d302      	bcc.n	800870e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008708:	2301      	movs	r3, #1
 800870a:	61fb      	str	r3, [r7, #28]
 800870c:	e015      	b.n	800873a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	429a      	cmp	r2, r3
 8008716:	d20b      	bcs.n	8008730 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	1ad2      	subs	r2, r2, r3
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff ff97 	bl	8008658 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800872a:	2300      	movs	r3, #0
 800872c:	61fb      	str	r3, [r7, #28]
 800872e:	e004      	b.n	800873a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008736:	2301      	movs	r3, #1
 8008738:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800873a:	f000 fe73 	bl	8009424 <vPortExitCritical>

	return xReturn;
 800873e:	69fb      	ldr	r3, [r7, #28]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3720      	adds	r7, #32
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	200013ac 	.word	0x200013ac
 800874c:	200013c0 	.word	0x200013c0

08008750 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008750:	b480      	push	{r7}
 8008752:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008754:	4b03      	ldr	r3, [pc, #12]	; (8008764 <vTaskMissedYield+0x14>)
 8008756:	2201      	movs	r2, #1
 8008758:	601a      	str	r2, [r3, #0]
}
 800875a:	bf00      	nop
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr
 8008764:	200013bc 	.word	0x200013bc

08008768 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008770:	f000 f852 	bl	8008818 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008774:	4b06      	ldr	r3, [pc, #24]	; (8008790 <prvIdleTask+0x28>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d9f9      	bls.n	8008770 <prvIdleTask+0x8>
			{
				taskYIELD();
 800877c:	4b05      	ldr	r3, [pc, #20]	; (8008794 <prvIdleTask+0x2c>)
 800877e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800878c:	e7f0      	b.n	8008770 <prvIdleTask+0x8>
 800878e:	bf00      	nop
 8008790:	20000ed8 	.word	0x20000ed8
 8008794:	e000ed04 	.word	0xe000ed04

08008798 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800879e:	2300      	movs	r3, #0
 80087a0:	607b      	str	r3, [r7, #4]
 80087a2:	e00c      	b.n	80087be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	4613      	mov	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4a12      	ldr	r2, [pc, #72]	; (80087f8 <prvInitialiseTaskLists+0x60>)
 80087b0:	4413      	add	r3, r2
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fe fb0c 	bl	8006dd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	3301      	adds	r3, #1
 80087bc:	607b      	str	r3, [r7, #4]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b37      	cmp	r3, #55	; 0x37
 80087c2:	d9ef      	bls.n	80087a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087c4:	480d      	ldr	r0, [pc, #52]	; (80087fc <prvInitialiseTaskLists+0x64>)
 80087c6:	f7fe fb03 	bl	8006dd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087ca:	480d      	ldr	r0, [pc, #52]	; (8008800 <prvInitialiseTaskLists+0x68>)
 80087cc:	f7fe fb00 	bl	8006dd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087d0:	480c      	ldr	r0, [pc, #48]	; (8008804 <prvInitialiseTaskLists+0x6c>)
 80087d2:	f7fe fafd 	bl	8006dd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087d6:	480c      	ldr	r0, [pc, #48]	; (8008808 <prvInitialiseTaskLists+0x70>)
 80087d8:	f7fe fafa 	bl	8006dd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087dc:	480b      	ldr	r0, [pc, #44]	; (800880c <prvInitialiseTaskLists+0x74>)
 80087de:	f7fe faf7 	bl	8006dd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087e2:	4b0b      	ldr	r3, [pc, #44]	; (8008810 <prvInitialiseTaskLists+0x78>)
 80087e4:	4a05      	ldr	r2, [pc, #20]	; (80087fc <prvInitialiseTaskLists+0x64>)
 80087e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087e8:	4b0a      	ldr	r3, [pc, #40]	; (8008814 <prvInitialiseTaskLists+0x7c>)
 80087ea:	4a05      	ldr	r2, [pc, #20]	; (8008800 <prvInitialiseTaskLists+0x68>)
 80087ec:	601a      	str	r2, [r3, #0]
}
 80087ee:	bf00      	nop
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	20000ed8 	.word	0x20000ed8
 80087fc:	20001338 	.word	0x20001338
 8008800:	2000134c 	.word	0x2000134c
 8008804:	20001368 	.word	0x20001368
 8008808:	2000137c 	.word	0x2000137c
 800880c:	20001394 	.word	0x20001394
 8008810:	20001360 	.word	0x20001360
 8008814:	20001364 	.word	0x20001364

08008818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800881e:	e019      	b.n	8008854 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008820:	f000 fdcc 	bl	80093bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008824:	4b10      	ldr	r3, [pc, #64]	; (8008868 <prvCheckTasksWaitingTermination+0x50>)
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	3304      	adds	r3, #4
 8008830:	4618      	mov	r0, r3
 8008832:	f7fe fb57 	bl	8006ee4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008836:	4b0d      	ldr	r3, [pc, #52]	; (800886c <prvCheckTasksWaitingTermination+0x54>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3b01      	subs	r3, #1
 800883c:	4a0b      	ldr	r2, [pc, #44]	; (800886c <prvCheckTasksWaitingTermination+0x54>)
 800883e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008840:	4b0b      	ldr	r3, [pc, #44]	; (8008870 <prvCheckTasksWaitingTermination+0x58>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3b01      	subs	r3, #1
 8008846:	4a0a      	ldr	r2, [pc, #40]	; (8008870 <prvCheckTasksWaitingTermination+0x58>)
 8008848:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800884a:	f000 fdeb 	bl	8009424 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f810 	bl	8008874 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008854:	4b06      	ldr	r3, [pc, #24]	; (8008870 <prvCheckTasksWaitingTermination+0x58>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1e1      	bne.n	8008820 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800885c:	bf00      	nop
 800885e:	bf00      	nop
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	2000137c 	.word	0x2000137c
 800886c:	200013a8 	.word	0x200013a8
 8008870:	20001390 	.word	0x20001390

08008874 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3354      	adds	r3, #84	; 0x54
 8008880:	4618      	mov	r0, r3
 8008882:	f001 f8b3 	bl	80099ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800888c:	2b00      	cmp	r3, #0
 800888e:	d108      	bne.n	80088a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008894:	4618      	mov	r0, r3
 8008896:	f000 ff87 	bl	80097a8 <vPortFree>
				vPortFree( pxTCB );
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 ff84 	bl	80097a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088a0:	e01a      	b.n	80088d8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d103      	bne.n	80088b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 ff7b 	bl	80097a8 <vPortFree>
	}
 80088b2:	e011      	b.n	80088d8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d00c      	beq.n	80088d8 <prvDeleteTCB+0x64>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	b672      	cpsid	i
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	b662      	cpsie	i
 80088d2:	60fb      	str	r3, [r7, #12]
}
 80088d4:	bf00      	nop
 80088d6:	e7fe      	b.n	80088d6 <prvDeleteTCB+0x62>
	}
 80088d8:	bf00      	nop
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088e6:	4b0c      	ldr	r3, [pc, #48]	; (8008918 <prvResetNextTaskUnblockTime+0x38>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d104      	bne.n	80088fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088f0:	4b0a      	ldr	r3, [pc, #40]	; (800891c <prvResetNextTaskUnblockTime+0x3c>)
 80088f2:	f04f 32ff 	mov.w	r2, #4294967295
 80088f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088f8:	e008      	b.n	800890c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088fa:	4b07      	ldr	r3, [pc, #28]	; (8008918 <prvResetNextTaskUnblockTime+0x38>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	4a04      	ldr	r2, [pc, #16]	; (800891c <prvResetNextTaskUnblockTime+0x3c>)
 800890a:	6013      	str	r3, [r2, #0]
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	20001360 	.word	0x20001360
 800891c:	200013c8 	.word	0x200013c8

08008920 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008926:	4b0b      	ldr	r3, [pc, #44]	; (8008954 <xTaskGetSchedulerState+0x34>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d102      	bne.n	8008934 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800892e:	2301      	movs	r3, #1
 8008930:	607b      	str	r3, [r7, #4]
 8008932:	e008      	b.n	8008946 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008934:	4b08      	ldr	r3, [pc, #32]	; (8008958 <xTaskGetSchedulerState+0x38>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d102      	bne.n	8008942 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800893c:	2302      	movs	r3, #2
 800893e:	607b      	str	r3, [r7, #4]
 8008940:	e001      	b.n	8008946 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008942:	2300      	movs	r3, #0
 8008944:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008946:	687b      	ldr	r3, [r7, #4]
	}
 8008948:	4618      	mov	r0, r3
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	200013b4 	.word	0x200013b4
 8008958:	200013d0 	.word	0x200013d0

0800895c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008968:	2300      	movs	r3, #0
 800896a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d05a      	beq.n	8008a28 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008972:	4b30      	ldr	r3, [pc, #192]	; (8008a34 <xTaskPriorityDisinherit+0xd8>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	429a      	cmp	r2, r3
 800897a:	d00c      	beq.n	8008996 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008980:	b672      	cpsid	i
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	b662      	cpsie	i
 8008990:	60fb      	str	r3, [r7, #12]
}
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10c      	bne.n	80089b8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	b672      	cpsid	i
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	b662      	cpsie	i
 80089b2:	60bb      	str	r3, [r7, #8]
}
 80089b4:	bf00      	nop
 80089b6:	e7fe      	b.n	80089b6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089bc:	1e5a      	subs	r2, r3, #1
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d02c      	beq.n	8008a28 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d128      	bne.n	8008a28 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	3304      	adds	r3, #4
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe fa82 	bl	8006ee4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f8:	4b0f      	ldr	r3, [pc, #60]	; (8008a38 <xTaskPriorityDisinherit+0xdc>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d903      	bls.n	8008a08 <xTaskPriorityDisinherit+0xac>
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a04:	4a0c      	ldr	r2, [pc, #48]	; (8008a38 <xTaskPriorityDisinherit+0xdc>)
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4a09      	ldr	r2, [pc, #36]	; (8008a3c <xTaskPriorityDisinherit+0xe0>)
 8008a16:	441a      	add	r2, r3
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	4610      	mov	r0, r2
 8008a20:	f7fe fa03 	bl	8006e2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a24:	2301      	movs	r3, #1
 8008a26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a28:	697b      	ldr	r3, [r7, #20]
	}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3718      	adds	r7, #24
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	20000ed4 	.word	0x20000ed4
 8008a38:	200013b0 	.word	0x200013b0
 8008a3c:	20000ed8 	.word	0x20000ed8

08008a40 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a4a:	4b21      	ldr	r3, [pc, #132]	; (8008ad0 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a50:	4b20      	ldr	r3, [pc, #128]	; (8008ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	3304      	adds	r3, #4
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fe fa44 	bl	8006ee4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a62:	d10a      	bne.n	8008a7a <prvAddCurrentTaskToDelayedList+0x3a>
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d007      	beq.n	8008a7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a6a:	4b1a      	ldr	r3, [pc, #104]	; (8008ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	3304      	adds	r3, #4
 8008a70:	4619      	mov	r1, r3
 8008a72:	4819      	ldr	r0, [pc, #100]	; (8008ad8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008a74:	f7fe f9d9 	bl	8006e2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a78:	e026      	b.n	8008ac8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4413      	add	r3, r2
 8008a80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a82:	4b14      	ldr	r3, [pc, #80]	; (8008ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d209      	bcs.n	8008aa6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a92:	4b12      	ldr	r3, [pc, #72]	; (8008adc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	4b0f      	ldr	r3, [pc, #60]	; (8008ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	f7fe f9e7 	bl	8006e72 <vListInsert>
}
 8008aa4:	e010      	b.n	8008ac8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008aa6:	4b0e      	ldr	r3, [pc, #56]	; (8008ae0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	3304      	adds	r3, #4
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	4610      	mov	r0, r2
 8008ab4:	f7fe f9dd 	bl	8006e72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ab8:	4b0a      	ldr	r3, [pc, #40]	; (8008ae4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d202      	bcs.n	8008ac8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008ac2:	4a08      	ldr	r2, [pc, #32]	; (8008ae4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	6013      	str	r3, [r2, #0]
}
 8008ac8:	bf00      	nop
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	200013ac 	.word	0x200013ac
 8008ad4:	20000ed4 	.word	0x20000ed4
 8008ad8:	20001394 	.word	0x20001394
 8008adc:	20001364 	.word	0x20001364
 8008ae0:	20001360 	.word	0x20001360
 8008ae4:	200013c8 	.word	0x200013c8

08008ae8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b08a      	sub	sp, #40	; 0x28
 8008aec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008aee:	2300      	movs	r3, #0
 8008af0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008af2:	f000 fb15 	bl	8009120 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008af6:	4b1d      	ldr	r3, [pc, #116]	; (8008b6c <xTimerCreateTimerTask+0x84>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d021      	beq.n	8008b42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008afe:	2300      	movs	r3, #0
 8008b00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b06:	1d3a      	adds	r2, r7, #4
 8008b08:	f107 0108 	add.w	r1, r7, #8
 8008b0c:	f107 030c 	add.w	r3, r7, #12
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fe f943 	bl	8006d9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b16:	6879      	ldr	r1, [r7, #4]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	9202      	str	r2, [sp, #8]
 8008b1e:	9301      	str	r3, [sp, #4]
 8008b20:	2302      	movs	r3, #2
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	2300      	movs	r3, #0
 8008b26:	460a      	mov	r2, r1
 8008b28:	4911      	ldr	r1, [pc, #68]	; (8008b70 <xTimerCreateTimerTask+0x88>)
 8008b2a:	4812      	ldr	r0, [pc, #72]	; (8008b74 <xTimerCreateTimerTask+0x8c>)
 8008b2c:	f7fe ff0e 	bl	800794c <xTaskCreateStatic>
 8008b30:	4603      	mov	r3, r0
 8008b32:	4a11      	ldr	r2, [pc, #68]	; (8008b78 <xTimerCreateTimerTask+0x90>)
 8008b34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b36:	4b10      	ldr	r3, [pc, #64]	; (8008b78 <xTimerCreateTimerTask+0x90>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d001      	beq.n	8008b42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10c      	bne.n	8008b62 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4c:	b672      	cpsid	i
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	b662      	cpsie	i
 8008b5c:	613b      	str	r3, [r7, #16]
}
 8008b5e:	bf00      	nop
 8008b60:	e7fe      	b.n	8008b60 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008b62:	697b      	ldr	r3, [r7, #20]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3718      	adds	r7, #24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20001404 	.word	0x20001404
 8008b70:	08009ca8 	.word	0x08009ca8
 8008b74:	08008cb9 	.word	0x08008cb9
 8008b78:	20001408 	.word	0x20001408

08008b7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08a      	sub	sp, #40	; 0x28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
 8008b88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10c      	bne.n	8008bae <xTimerGenericCommand+0x32>
	__asm volatile
 8008b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b98:	b672      	cpsid	i
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	b662      	cpsie	i
 8008ba8:	623b      	str	r3, [r7, #32]
}
 8008baa:	bf00      	nop
 8008bac:	e7fe      	b.n	8008bac <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008bae:	4b1a      	ldr	r3, [pc, #104]	; (8008c18 <xTimerGenericCommand+0x9c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d02a      	beq.n	8008c0c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b05      	cmp	r3, #5
 8008bc6:	dc18      	bgt.n	8008bfa <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008bc8:	f7ff feaa 	bl	8008920 <xTaskGetSchedulerState>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d109      	bne.n	8008be6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008bd2:	4b11      	ldr	r3, [pc, #68]	; (8008c18 <xTimerGenericCommand+0x9c>)
 8008bd4:	6818      	ldr	r0, [r3, #0]
 8008bd6:	f107 0110 	add.w	r1, r7, #16
 8008bda:	2300      	movs	r3, #0
 8008bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bde:	f7fe fabb 	bl	8007158 <xQueueGenericSend>
 8008be2:	6278      	str	r0, [r7, #36]	; 0x24
 8008be4:	e012      	b.n	8008c0c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008be6:	4b0c      	ldr	r3, [pc, #48]	; (8008c18 <xTimerGenericCommand+0x9c>)
 8008be8:	6818      	ldr	r0, [r3, #0]
 8008bea:	f107 0110 	add.w	r1, r7, #16
 8008bee:	2300      	movs	r3, #0
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f7fe fab1 	bl	8007158 <xQueueGenericSend>
 8008bf6:	6278      	str	r0, [r7, #36]	; 0x24
 8008bf8:	e008      	b.n	8008c0c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008bfa:	4b07      	ldr	r3, [pc, #28]	; (8008c18 <xTimerGenericCommand+0x9c>)
 8008bfc:	6818      	ldr	r0, [r3, #0]
 8008bfe:	f107 0110 	add.w	r1, r7, #16
 8008c02:	2300      	movs	r3, #0
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	f7fe fbad 	bl	8007364 <xQueueGenericSendFromISR>
 8008c0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3728      	adds	r7, #40	; 0x28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20001404 	.word	0x20001404

08008c1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af02      	add	r7, sp, #8
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c26:	4b23      	ldr	r3, [pc, #140]	; (8008cb4 <prvProcessExpiredTimer+0x98>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	3304      	adds	r3, #4
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fe f955 	bl	8006ee4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c40:	f003 0304 	and.w	r3, r3, #4
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d024      	beq.n	8008c92 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	699a      	ldr	r2, [r3, #24]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	18d1      	adds	r1, r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	6978      	ldr	r0, [r7, #20]
 8008c56:	f000 f8d3 	bl	8008e00 <prvInsertTimerInActiveList>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d021      	beq.n	8008ca4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c60:	2300      	movs	r3, #0
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	2300      	movs	r3, #0
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	2100      	movs	r1, #0
 8008c6a:	6978      	ldr	r0, [r7, #20]
 8008c6c:	f7ff ff86 	bl	8008b7c <xTimerGenericCommand>
 8008c70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d115      	bne.n	8008ca4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7c:	b672      	cpsid	i
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	b662      	cpsie	i
 8008c8c:	60fb      	str	r3, [r7, #12]
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c98:	f023 0301 	bic.w	r3, r3, #1
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	6a1b      	ldr	r3, [r3, #32]
 8008ca8:	6978      	ldr	r0, [r7, #20]
 8008caa:	4798      	blx	r3
}
 8008cac:	bf00      	nop
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	200013fc 	.word	0x200013fc

08008cb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cc0:	f107 0308 	add.w	r3, r7, #8
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f000 f857 	bl	8008d78 <prvGetNextExpireTime>
 8008cca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	4619      	mov	r1, r3
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f000 f803 	bl	8008cdc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008cd6:	f000 f8d5 	bl	8008e84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cda:	e7f1      	b.n	8008cc0 <prvTimerTask+0x8>

08008cdc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008ce6:	f7ff fa1d 	bl	8008124 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cea:	f107 0308 	add.w	r3, r7, #8
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 f866 	bl	8008dc0 <prvSampleTimeNow>
 8008cf4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d130      	bne.n	8008d5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10a      	bne.n	8008d18 <prvProcessTimerOrBlockTask+0x3c>
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d806      	bhi.n	8008d18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d0a:	f7ff fa19 	bl	8008140 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d0e:	68f9      	ldr	r1, [r7, #12]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff ff83 	bl	8008c1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d16:	e024      	b.n	8008d62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d008      	beq.n	8008d30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d1e:	4b13      	ldr	r3, [pc, #76]	; (8008d6c <prvProcessTimerOrBlockTask+0x90>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <prvProcessTimerOrBlockTask+0x50>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e000      	b.n	8008d2e <prvProcessTimerOrBlockTask+0x52>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d30:	4b0f      	ldr	r3, [pc, #60]	; (8008d70 <prvProcessTimerOrBlockTask+0x94>)
 8008d32:	6818      	ldr	r0, [r3, #0]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	f7fe fdd1 	bl	80078e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d42:	f7ff f9fd 	bl	8008140 <xTaskResumeAll>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10a      	bne.n	8008d62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d4c:	4b09      	ldr	r3, [pc, #36]	; (8008d74 <prvProcessTimerOrBlockTask+0x98>)
 8008d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	f3bf 8f6f 	isb	sy
}
 8008d5c:	e001      	b.n	8008d62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d5e:	f7ff f9ef 	bl	8008140 <xTaskResumeAll>
}
 8008d62:	bf00      	nop
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	20001400 	.word	0x20001400
 8008d70:	20001404 	.word	0x20001404
 8008d74:	e000ed04 	.word	0xe000ed04

08008d78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d80:	4b0e      	ldr	r3, [pc, #56]	; (8008dbc <prvGetNextExpireTime+0x44>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d101      	bne.n	8008d8e <prvGetNextExpireTime+0x16>
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	e000      	b.n	8008d90 <prvGetNextExpireTime+0x18>
 8008d8e:	2200      	movs	r2, #0
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d105      	bne.n	8008da8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d9c:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <prvGetNextExpireTime+0x44>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	60fb      	str	r3, [r7, #12]
 8008da6:	e001      	b.n	8008dac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008dac:	68fb      	ldr	r3, [r7, #12]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3714      	adds	r7, #20
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	200013fc 	.word	0x200013fc

08008dc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008dc8:	f7ff fa5a 	bl	8008280 <xTaskGetTickCount>
 8008dcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008dce:	4b0b      	ldr	r3, [pc, #44]	; (8008dfc <prvSampleTimeNow+0x3c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d205      	bcs.n	8008de4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008dd8:	f000 f93c 	bl	8009054 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	e002      	b.n	8008dea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008dea:	4a04      	ldr	r2, [pc, #16]	; (8008dfc <prvSampleTimeNow+0x3c>)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008df0:	68fb      	ldr	r3, [r7, #12]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	2000140c 	.word	0x2000140c

08008e00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d812      	bhi.n	8008e4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	1ad2      	subs	r2, r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d302      	bcc.n	8008e3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e34:	2301      	movs	r3, #1
 8008e36:	617b      	str	r3, [r7, #20]
 8008e38:	e01b      	b.n	8008e72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e3a:	4b10      	ldr	r3, [pc, #64]	; (8008e7c <prvInsertTimerInActiveList+0x7c>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3304      	adds	r3, #4
 8008e42:	4619      	mov	r1, r3
 8008e44:	4610      	mov	r0, r2
 8008e46:	f7fe f814 	bl	8006e72 <vListInsert>
 8008e4a:	e012      	b.n	8008e72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d206      	bcs.n	8008e62 <prvInsertTimerInActiveList+0x62>
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d302      	bcc.n	8008e62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	617b      	str	r3, [r7, #20]
 8008e60:	e007      	b.n	8008e72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e62:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <prvInsertTimerInActiveList+0x80>)
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3304      	adds	r3, #4
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	f7fe f800 	bl	8006e72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e72:	697b      	ldr	r3, [r7, #20]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3718      	adds	r7, #24
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	20001400 	.word	0x20001400
 8008e80:	200013fc 	.word	0x200013fc

08008e84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b08e      	sub	sp, #56	; 0x38
 8008e88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e8a:	e0d0      	b.n	800902e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	da1a      	bge.n	8008ec8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008e92:	1d3b      	adds	r3, r7, #4
 8008e94:	3304      	adds	r3, #4
 8008e96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10c      	bne.n	8008eb8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	b672      	cpsid	i
 8008ea4:	f383 8811 	msr	BASEPRI, r3
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	b662      	cpsie	i
 8008eb2:	61fb      	str	r3, [r7, #28]
}
 8008eb4:	bf00      	nop
 8008eb6:	e7fe      	b.n	8008eb6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ebe:	6850      	ldr	r0, [r2, #4]
 8008ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ec2:	6892      	ldr	r2, [r2, #8]
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f2c0 80af 	blt.w	800902e <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed6:	695b      	ldr	r3, [r3, #20]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d004      	beq.n	8008ee6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ede:	3304      	adds	r3, #4
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fd ffff 	bl	8006ee4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ee6:	463b      	mov	r3, r7
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7ff ff69 	bl	8008dc0 <prvSampleTimeNow>
 8008eee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b09      	cmp	r3, #9
 8008ef4:	f200 809a 	bhi.w	800902c <prvProcessReceivedCommands+0x1a8>
 8008ef8:	a201      	add	r2, pc, #4	; (adr r2, 8008f00 <prvProcessReceivedCommands+0x7c>)
 8008efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efe:	bf00      	nop
 8008f00:	08008f29 	.word	0x08008f29
 8008f04:	08008f29 	.word	0x08008f29
 8008f08:	08008f29 	.word	0x08008f29
 8008f0c:	08008fa1 	.word	0x08008fa1
 8008f10:	08008fb5 	.word	0x08008fb5
 8008f14:	08009003 	.word	0x08009003
 8008f18:	08008f29 	.word	0x08008f29
 8008f1c:	08008f29 	.word	0x08008f29
 8008f20:	08008fa1 	.word	0x08008fa1
 8008f24:	08008fb5 	.word	0x08008fb5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f2e:	f043 0301 	orr.w	r3, r3, #1
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	18d1      	adds	r1, r2, r3
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f48:	f7ff ff5a 	bl	8008e00 <prvInsertTimerInActiveList>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d06d      	beq.n	800902e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d062      	beq.n	800902e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	441a      	add	r2, r3
 8008f70:	2300      	movs	r3, #0
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	2300      	movs	r3, #0
 8008f76:	2100      	movs	r1, #0
 8008f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f7a:	f7ff fdff 	bl	8008b7c <xTimerGenericCommand>
 8008f7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008f80:	6a3b      	ldr	r3, [r7, #32]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d153      	bne.n	800902e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8a:	b672      	cpsid	i
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	b662      	cpsie	i
 8008f9a:	61bb      	str	r3, [r7, #24]
}
 8008f9c:	bf00      	nop
 8008f9e:	e7fe      	b.n	8008f9e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fa6:	f023 0301 	bic.w	r3, r3, #1
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008fb2:	e03c      	b.n	800902e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fba:	f043 0301 	orr.w	r3, r3, #1
 8008fbe:	b2da      	uxtb	r2, r3
 8008fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10c      	bne.n	8008fee <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd8:	b672      	cpsid	i
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	b662      	cpsie	i
 8008fe8:	617b      	str	r3, [r7, #20]
}
 8008fea:	bf00      	nop
 8008fec:	e7fe      	b.n	8008fec <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	699a      	ldr	r2, [r3, #24]
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff4:	18d1      	adds	r1, r2, r3
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ffa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ffc:	f7ff ff00 	bl	8008e00 <prvInsertTimerInActiveList>
					break;
 8009000:	e015      	b.n	800902e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009008:	f003 0302 	and.w	r3, r3, #2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d103      	bne.n	8009018 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009012:	f000 fbc9 	bl	80097a8 <vPortFree>
 8009016:	e00a      	b.n	800902e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800901e:	f023 0301 	bic.w	r3, r3, #1
 8009022:	b2da      	uxtb	r2, r3
 8009024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009026:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800902a:	e000      	b.n	800902e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800902c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800902e:	4b08      	ldr	r3, [pc, #32]	; (8009050 <prvProcessReceivedCommands+0x1cc>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	1d39      	adds	r1, r7, #4
 8009034:	2200      	movs	r2, #0
 8009036:	4618      	mov	r0, r3
 8009038:	f7fe fa34 	bl	80074a4 <xQueueReceive>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	f47f af24 	bne.w	8008e8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop
 8009048:	3730      	adds	r7, #48	; 0x30
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20001404 	.word	0x20001404

08009054 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b088      	sub	sp, #32
 8009058:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800905a:	e04a      	b.n	80090f2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800905c:	4b2e      	ldr	r3, [pc, #184]	; (8009118 <prvSwitchTimerLists+0xc4>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009066:	4b2c      	ldr	r3, [pc, #176]	; (8009118 <prvSwitchTimerLists+0xc4>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	3304      	adds	r3, #4
 8009074:	4618      	mov	r0, r3
 8009076:	f7fd ff35 	bl	8006ee4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d030      	beq.n	80090f2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	4413      	add	r3, r2
 8009098:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d90e      	bls.n	80090c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090ae:	4b1a      	ldr	r3, [pc, #104]	; (8009118 <prvSwitchTimerLists+0xc4>)
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	3304      	adds	r3, #4
 80090b6:	4619      	mov	r1, r3
 80090b8:	4610      	mov	r0, r2
 80090ba:	f7fd feda 	bl	8006e72 <vListInsert>
 80090be:	e018      	b.n	80090f2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090c0:	2300      	movs	r3, #0
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	2300      	movs	r3, #0
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	2100      	movs	r1, #0
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f7ff fd56 	bl	8008b7c <xTimerGenericCommand>
 80090d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10c      	bne.n	80090f2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80090d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090dc:	b672      	cpsid	i
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	b662      	cpsie	i
 80090ec:	603b      	str	r3, [r7, #0]
}
 80090ee:	bf00      	nop
 80090f0:	e7fe      	b.n	80090f0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090f2:	4b09      	ldr	r3, [pc, #36]	; (8009118 <prvSwitchTimerLists+0xc4>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1af      	bne.n	800905c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80090fc:	4b06      	ldr	r3, [pc, #24]	; (8009118 <prvSwitchTimerLists+0xc4>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009102:	4b06      	ldr	r3, [pc, #24]	; (800911c <prvSwitchTimerLists+0xc8>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a04      	ldr	r2, [pc, #16]	; (8009118 <prvSwitchTimerLists+0xc4>)
 8009108:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800910a:	4a04      	ldr	r2, [pc, #16]	; (800911c <prvSwitchTimerLists+0xc8>)
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	6013      	str	r3, [r2, #0]
}
 8009110:	bf00      	nop
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	200013fc 	.word	0x200013fc
 800911c:	20001400 	.word	0x20001400

08009120 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009126:	f000 f949 	bl	80093bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800912a:	4b15      	ldr	r3, [pc, #84]	; (8009180 <prvCheckForValidListAndQueue+0x60>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d120      	bne.n	8009174 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009132:	4814      	ldr	r0, [pc, #80]	; (8009184 <prvCheckForValidListAndQueue+0x64>)
 8009134:	f7fd fe4c 	bl	8006dd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009138:	4813      	ldr	r0, [pc, #76]	; (8009188 <prvCheckForValidListAndQueue+0x68>)
 800913a:	f7fd fe49 	bl	8006dd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800913e:	4b13      	ldr	r3, [pc, #76]	; (800918c <prvCheckForValidListAndQueue+0x6c>)
 8009140:	4a10      	ldr	r2, [pc, #64]	; (8009184 <prvCheckForValidListAndQueue+0x64>)
 8009142:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009144:	4b12      	ldr	r3, [pc, #72]	; (8009190 <prvCheckForValidListAndQueue+0x70>)
 8009146:	4a10      	ldr	r2, [pc, #64]	; (8009188 <prvCheckForValidListAndQueue+0x68>)
 8009148:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800914a:	2300      	movs	r3, #0
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	4b11      	ldr	r3, [pc, #68]	; (8009194 <prvCheckForValidListAndQueue+0x74>)
 8009150:	4a11      	ldr	r2, [pc, #68]	; (8009198 <prvCheckForValidListAndQueue+0x78>)
 8009152:	2110      	movs	r1, #16
 8009154:	200a      	movs	r0, #10
 8009156:	f7fd ff59 	bl	800700c <xQueueGenericCreateStatic>
 800915a:	4603      	mov	r3, r0
 800915c:	4a08      	ldr	r2, [pc, #32]	; (8009180 <prvCheckForValidListAndQueue+0x60>)
 800915e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009160:	4b07      	ldr	r3, [pc, #28]	; (8009180 <prvCheckForValidListAndQueue+0x60>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d005      	beq.n	8009174 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009168:	4b05      	ldr	r3, [pc, #20]	; (8009180 <prvCheckForValidListAndQueue+0x60>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	490b      	ldr	r1, [pc, #44]	; (800919c <prvCheckForValidListAndQueue+0x7c>)
 800916e:	4618      	mov	r0, r3
 8009170:	f7fe fb8e 	bl	8007890 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009174:	f000 f956 	bl	8009424 <vPortExitCritical>
}
 8009178:	bf00      	nop
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	20001404 	.word	0x20001404
 8009184:	200013d4 	.word	0x200013d4
 8009188:	200013e8 	.word	0x200013e8
 800918c:	200013fc 	.word	0x200013fc
 8009190:	20001400 	.word	0x20001400
 8009194:	200014b0 	.word	0x200014b0
 8009198:	20001410 	.word	0x20001410
 800919c:	08009cb0 	.word	0x08009cb0

080091a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	3b04      	subs	r3, #4
 80091b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80091b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	3b04      	subs	r3, #4
 80091be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	f023 0201 	bic.w	r2, r3, #1
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	3b04      	subs	r3, #4
 80091ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80091d0:	4a0c      	ldr	r2, [pc, #48]	; (8009204 <pxPortInitialiseStack+0x64>)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3b14      	subs	r3, #20
 80091da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3b04      	subs	r3, #4
 80091e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f06f 0202 	mvn.w	r2, #2
 80091ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	3b20      	subs	r3, #32
 80091f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80091f6:	68fb      	ldr	r3, [r7, #12]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	08009209 	.word	0x08009209

08009208 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800920e:	2300      	movs	r3, #0
 8009210:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009212:	4b14      	ldr	r3, [pc, #80]	; (8009264 <prvTaskExitError+0x5c>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921a:	d00c      	beq.n	8009236 <prvTaskExitError+0x2e>
	__asm volatile
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	b672      	cpsid	i
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	b662      	cpsie	i
 8009230:	60fb      	str	r3, [r7, #12]
}
 8009232:	bf00      	nop
 8009234:	e7fe      	b.n	8009234 <prvTaskExitError+0x2c>
	__asm volatile
 8009236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923a:	b672      	cpsid	i
 800923c:	f383 8811 	msr	BASEPRI, r3
 8009240:	f3bf 8f6f 	isb	sy
 8009244:	f3bf 8f4f 	dsb	sy
 8009248:	b662      	cpsie	i
 800924a:	60bb      	str	r3, [r7, #8]
}
 800924c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800924e:	bf00      	nop
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d0fc      	beq.n	8009250 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009256:	bf00      	nop
 8009258:	bf00      	nop
 800925a:	3714      	adds	r7, #20
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr
 8009264:	20000038 	.word	0x20000038
	...

08009270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009270:	4b07      	ldr	r3, [pc, #28]	; (8009290 <pxCurrentTCBConst2>)
 8009272:	6819      	ldr	r1, [r3, #0]
 8009274:	6808      	ldr	r0, [r1, #0]
 8009276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927a:	f380 8809 	msr	PSP, r0
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f04f 0000 	mov.w	r0, #0
 8009286:	f380 8811 	msr	BASEPRI, r0
 800928a:	4770      	bx	lr
 800928c:	f3af 8000 	nop.w

08009290 <pxCurrentTCBConst2>:
 8009290:	20000ed4 	.word	0x20000ed4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009294:	bf00      	nop
 8009296:	bf00      	nop

08009298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009298:	4808      	ldr	r0, [pc, #32]	; (80092bc <prvPortStartFirstTask+0x24>)
 800929a:	6800      	ldr	r0, [r0, #0]
 800929c:	6800      	ldr	r0, [r0, #0]
 800929e:	f380 8808 	msr	MSP, r0
 80092a2:	f04f 0000 	mov.w	r0, #0
 80092a6:	f380 8814 	msr	CONTROL, r0
 80092aa:	b662      	cpsie	i
 80092ac:	b661      	cpsie	f
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	df00      	svc	0
 80092b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092ba:	bf00      	nop
 80092bc:	e000ed08 	.word	0xe000ed08

080092c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80092c6:	4b37      	ldr	r3, [pc, #220]	; (80093a4 <xPortStartScheduler+0xe4>)
 80092c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	22ff      	movs	r2, #255	; 0xff
 80092d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80092e8:	b2da      	uxtb	r2, r3
 80092ea:	4b2f      	ldr	r3, [pc, #188]	; (80093a8 <xPortStartScheduler+0xe8>)
 80092ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092ee:	4b2f      	ldr	r3, [pc, #188]	; (80093ac <xPortStartScheduler+0xec>)
 80092f0:	2207      	movs	r2, #7
 80092f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092f4:	e009      	b.n	800930a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80092f6:	4b2d      	ldr	r3, [pc, #180]	; (80093ac <xPortStartScheduler+0xec>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3b01      	subs	r3, #1
 80092fc:	4a2b      	ldr	r2, [pc, #172]	; (80093ac <xPortStartScheduler+0xec>)
 80092fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009300:	78fb      	ldrb	r3, [r7, #3]
 8009302:	b2db      	uxtb	r3, r3
 8009304:	005b      	lsls	r3, r3, #1
 8009306:	b2db      	uxtb	r3, r3
 8009308:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800930a:	78fb      	ldrb	r3, [r7, #3]
 800930c:	b2db      	uxtb	r3, r3
 800930e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009312:	2b80      	cmp	r3, #128	; 0x80
 8009314:	d0ef      	beq.n	80092f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009316:	4b25      	ldr	r3, [pc, #148]	; (80093ac <xPortStartScheduler+0xec>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f1c3 0307 	rsb	r3, r3, #7
 800931e:	2b04      	cmp	r3, #4
 8009320:	d00c      	beq.n	800933c <xPortStartScheduler+0x7c>
	__asm volatile
 8009322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009326:	b672      	cpsid	i
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	b662      	cpsie	i
 8009336:	60bb      	str	r3, [r7, #8]
}
 8009338:	bf00      	nop
 800933a:	e7fe      	b.n	800933a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800933c:	4b1b      	ldr	r3, [pc, #108]	; (80093ac <xPortStartScheduler+0xec>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	021b      	lsls	r3, r3, #8
 8009342:	4a1a      	ldr	r2, [pc, #104]	; (80093ac <xPortStartScheduler+0xec>)
 8009344:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009346:	4b19      	ldr	r3, [pc, #100]	; (80093ac <xPortStartScheduler+0xec>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800934e:	4a17      	ldr	r2, [pc, #92]	; (80093ac <xPortStartScheduler+0xec>)
 8009350:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	b2da      	uxtb	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800935a:	4b15      	ldr	r3, [pc, #84]	; (80093b0 <xPortStartScheduler+0xf0>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a14      	ldr	r2, [pc, #80]	; (80093b0 <xPortStartScheduler+0xf0>)
 8009360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009364:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009366:	4b12      	ldr	r3, [pc, #72]	; (80093b0 <xPortStartScheduler+0xf0>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a11      	ldr	r2, [pc, #68]	; (80093b0 <xPortStartScheduler+0xf0>)
 800936c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009370:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009372:	f000 f8dd 	bl	8009530 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009376:	4b0f      	ldr	r3, [pc, #60]	; (80093b4 <xPortStartScheduler+0xf4>)
 8009378:	2200      	movs	r2, #0
 800937a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800937c:	f000 f8fc 	bl	8009578 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009380:	4b0d      	ldr	r3, [pc, #52]	; (80093b8 <xPortStartScheduler+0xf8>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a0c      	ldr	r2, [pc, #48]	; (80093b8 <xPortStartScheduler+0xf8>)
 8009386:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800938a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800938c:	f7ff ff84 	bl	8009298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009390:	f7ff f842 	bl	8008418 <vTaskSwitchContext>
	prvTaskExitError();
 8009394:	f7ff ff38 	bl	8009208 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	e000e400 	.word	0xe000e400
 80093a8:	20001500 	.word	0x20001500
 80093ac:	20001504 	.word	0x20001504
 80093b0:	e000ed20 	.word	0xe000ed20
 80093b4:	20000038 	.word	0x20000038
 80093b8:	e000ef34 	.word	0xe000ef34

080093bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	b672      	cpsid	i
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	b662      	cpsie	i
 80093d6:	607b      	str	r3, [r7, #4]
}
 80093d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093da:	4b10      	ldr	r3, [pc, #64]	; (800941c <vPortEnterCritical+0x60>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3301      	adds	r3, #1
 80093e0:	4a0e      	ldr	r2, [pc, #56]	; (800941c <vPortEnterCritical+0x60>)
 80093e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093e4:	4b0d      	ldr	r3, [pc, #52]	; (800941c <vPortEnterCritical+0x60>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d111      	bne.n	8009410 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093ec:	4b0c      	ldr	r3, [pc, #48]	; (8009420 <vPortEnterCritical+0x64>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00c      	beq.n	8009410 <vPortEnterCritical+0x54>
	__asm volatile
 80093f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fa:	b672      	cpsid	i
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	b662      	cpsie	i
 800940a:	603b      	str	r3, [r7, #0]
}
 800940c:	bf00      	nop
 800940e:	e7fe      	b.n	800940e <vPortEnterCritical+0x52>
	}
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr
 800941c:	20000038 	.word	0x20000038
 8009420:	e000ed04 	.word	0xe000ed04

08009424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800942a:	4b13      	ldr	r3, [pc, #76]	; (8009478 <vPortExitCritical+0x54>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10c      	bne.n	800944c <vPortExitCritical+0x28>
	__asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	b672      	cpsid	i
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	b662      	cpsie	i
 8009446:	607b      	str	r3, [r7, #4]
}
 8009448:	bf00      	nop
 800944a:	e7fe      	b.n	800944a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800944c:	4b0a      	ldr	r3, [pc, #40]	; (8009478 <vPortExitCritical+0x54>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3b01      	subs	r3, #1
 8009452:	4a09      	ldr	r2, [pc, #36]	; (8009478 <vPortExitCritical+0x54>)
 8009454:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009456:	4b08      	ldr	r3, [pc, #32]	; (8009478 <vPortExitCritical+0x54>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d105      	bne.n	800946a <vPortExitCritical+0x46>
 800945e:	2300      	movs	r3, #0
 8009460:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	f383 8811 	msr	BASEPRI, r3
}
 8009468:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800946a:	bf00      	nop
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	20000038 	.word	0x20000038
 800947c:	00000000 	.word	0x00000000

08009480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009480:	f3ef 8009 	mrs	r0, PSP
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	4b15      	ldr	r3, [pc, #84]	; (80094e0 <pxCurrentTCBConst>)
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	f01e 0f10 	tst.w	lr, #16
 8009490:	bf08      	it	eq
 8009492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949a:	6010      	str	r0, [r2, #0]
 800949c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80094a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80094a4:	b672      	cpsid	i
 80094a6:	f380 8811 	msr	BASEPRI, r0
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	b662      	cpsie	i
 80094b4:	f7fe ffb0 	bl	8008418 <vTaskSwitchContext>
 80094b8:	f04f 0000 	mov.w	r0, #0
 80094bc:	f380 8811 	msr	BASEPRI, r0
 80094c0:	bc09      	pop	{r0, r3}
 80094c2:	6819      	ldr	r1, [r3, #0]
 80094c4:	6808      	ldr	r0, [r1, #0]
 80094c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ca:	f01e 0f10 	tst.w	lr, #16
 80094ce:	bf08      	it	eq
 80094d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80094d4:	f380 8809 	msr	PSP, r0
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop

080094e0 <pxCurrentTCBConst>:
 80094e0:	20000ed4 	.word	0x20000ed4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094e4:	bf00      	nop
 80094e6:	bf00      	nop

080094e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	b672      	cpsid	i
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	b662      	cpsie	i
 8009502:	607b      	str	r3, [r7, #4]
}
 8009504:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009506:	f7fe fecb 	bl	80082a0 <xTaskIncrementTick>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d003      	beq.n	8009518 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009510:	4b06      	ldr	r3, [pc, #24]	; (800952c <SysTick_Handler+0x44>)
 8009512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	2300      	movs	r3, #0
 800951a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	f383 8811 	msr	BASEPRI, r3
}
 8009522:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009524:	bf00      	nop
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	e000ed04 	.word	0xe000ed04

08009530 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009530:	b480      	push	{r7}
 8009532:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009534:	4b0b      	ldr	r3, [pc, #44]	; (8009564 <vPortSetupTimerInterrupt+0x34>)
 8009536:	2200      	movs	r2, #0
 8009538:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800953a:	4b0b      	ldr	r3, [pc, #44]	; (8009568 <vPortSetupTimerInterrupt+0x38>)
 800953c:	2200      	movs	r2, #0
 800953e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009540:	4b0a      	ldr	r3, [pc, #40]	; (800956c <vPortSetupTimerInterrupt+0x3c>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a0a      	ldr	r2, [pc, #40]	; (8009570 <vPortSetupTimerInterrupt+0x40>)
 8009546:	fba2 2303 	umull	r2, r3, r2, r3
 800954a:	099b      	lsrs	r3, r3, #6
 800954c:	4a09      	ldr	r2, [pc, #36]	; (8009574 <vPortSetupTimerInterrupt+0x44>)
 800954e:	3b01      	subs	r3, #1
 8009550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009552:	4b04      	ldr	r3, [pc, #16]	; (8009564 <vPortSetupTimerInterrupt+0x34>)
 8009554:	2207      	movs	r2, #7
 8009556:	601a      	str	r2, [r3, #0]
}
 8009558:	bf00      	nop
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	e000e010 	.word	0xe000e010
 8009568:	e000e018 	.word	0xe000e018
 800956c:	2000002c 	.word	0x2000002c
 8009570:	10624dd3 	.word	0x10624dd3
 8009574:	e000e014 	.word	0xe000e014

08009578 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009578:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009588 <vPortEnableVFP+0x10>
 800957c:	6801      	ldr	r1, [r0, #0]
 800957e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009582:	6001      	str	r1, [r0, #0]
 8009584:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009586:	bf00      	nop
 8009588:	e000ed88 	.word	0xe000ed88

0800958c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009592:	f3ef 8305 	mrs	r3, IPSR
 8009596:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2b0f      	cmp	r3, #15
 800959c:	d916      	bls.n	80095cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800959e:	4a19      	ldr	r2, [pc, #100]	; (8009604 <vPortValidateInterruptPriority+0x78>)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	4413      	add	r3, r2
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80095a8:	4b17      	ldr	r3, [pc, #92]	; (8009608 <vPortValidateInterruptPriority+0x7c>)
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	7afa      	ldrb	r2, [r7, #11]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d20c      	bcs.n	80095cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b6:	b672      	cpsid	i
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	b662      	cpsie	i
 80095c6:	607b      	str	r3, [r7, #4]
}
 80095c8:	bf00      	nop
 80095ca:	e7fe      	b.n	80095ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80095cc:	4b0f      	ldr	r3, [pc, #60]	; (800960c <vPortValidateInterruptPriority+0x80>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80095d4:	4b0e      	ldr	r3, [pc, #56]	; (8009610 <vPortValidateInterruptPriority+0x84>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d90c      	bls.n	80095f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	b672      	cpsid	i
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	b662      	cpsie	i
 80095f0:	603b      	str	r3, [r7, #0]
}
 80095f2:	bf00      	nop
 80095f4:	e7fe      	b.n	80095f4 <vPortValidateInterruptPriority+0x68>
	}
 80095f6:	bf00      	nop
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	e000e3f0 	.word	0xe000e3f0
 8009608:	20001500 	.word	0x20001500
 800960c:	e000ed0c 	.word	0xe000ed0c
 8009610:	20001504 	.word	0x20001504

08009614 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b08a      	sub	sp, #40	; 0x28
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800961c:	2300      	movs	r3, #0
 800961e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009620:	f7fe fd80 	bl	8008124 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009624:	4b5b      	ldr	r3, [pc, #364]	; (8009794 <pvPortMalloc+0x180>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800962c:	f000 f91a 	bl	8009864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009630:	4b59      	ldr	r3, [pc, #356]	; (8009798 <pvPortMalloc+0x184>)
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4013      	ands	r3, r2
 8009638:	2b00      	cmp	r3, #0
 800963a:	f040 8092 	bne.w	8009762 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d01f      	beq.n	8009684 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009644:	2208      	movs	r2, #8
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4413      	add	r3, r2
 800964a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f003 0307 	and.w	r3, r3, #7
 8009652:	2b00      	cmp	r3, #0
 8009654:	d016      	beq.n	8009684 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f023 0307 	bic.w	r3, r3, #7
 800965c:	3308      	adds	r3, #8
 800965e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f003 0307 	and.w	r3, r3, #7
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00c      	beq.n	8009684 <pvPortMalloc+0x70>
	__asm volatile
 800966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966e:	b672      	cpsid	i
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	b662      	cpsie	i
 800967e:	617b      	str	r3, [r7, #20]
}
 8009680:	bf00      	nop
 8009682:	e7fe      	b.n	8009682 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d06b      	beq.n	8009762 <pvPortMalloc+0x14e>
 800968a:	4b44      	ldr	r3, [pc, #272]	; (800979c <pvPortMalloc+0x188>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	429a      	cmp	r2, r3
 8009692:	d866      	bhi.n	8009762 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009694:	4b42      	ldr	r3, [pc, #264]	; (80097a0 <pvPortMalloc+0x18c>)
 8009696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009698:	4b41      	ldr	r3, [pc, #260]	; (80097a0 <pvPortMalloc+0x18c>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800969e:	e004      	b.n	80096aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d903      	bls.n	80096bc <pvPortMalloc+0xa8>
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1f1      	bne.n	80096a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096bc:	4b35      	ldr	r3, [pc, #212]	; (8009794 <pvPortMalloc+0x180>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d04d      	beq.n	8009762 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2208      	movs	r2, #8
 80096cc:	4413      	add	r3, r2
 80096ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80096d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	1ad2      	subs	r2, r2, r3
 80096e0:	2308      	movs	r3, #8
 80096e2:	005b      	lsls	r3, r3, #1
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d921      	bls.n	800972c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4413      	add	r3, r2
 80096ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	f003 0307 	and.w	r3, r3, #7
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00c      	beq.n	8009714 <pvPortMalloc+0x100>
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fe:	b672      	cpsid	i
 8009700:	f383 8811 	msr	BASEPRI, r3
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	b662      	cpsie	i
 800970e:	613b      	str	r3, [r7, #16]
}
 8009710:	bf00      	nop
 8009712:	e7fe      	b.n	8009712 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	685a      	ldr	r2, [r3, #4]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	1ad2      	subs	r2, r2, r3
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009726:	69b8      	ldr	r0, [r7, #24]
 8009728:	f000 f8fe 	bl	8009928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800972c:	4b1b      	ldr	r3, [pc, #108]	; (800979c <pvPortMalloc+0x188>)
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	4a19      	ldr	r2, [pc, #100]	; (800979c <pvPortMalloc+0x188>)
 8009738:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800973a:	4b18      	ldr	r3, [pc, #96]	; (800979c <pvPortMalloc+0x188>)
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	4b19      	ldr	r3, [pc, #100]	; (80097a4 <pvPortMalloc+0x190>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	429a      	cmp	r2, r3
 8009744:	d203      	bcs.n	800974e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009746:	4b15      	ldr	r3, [pc, #84]	; (800979c <pvPortMalloc+0x188>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a16      	ldr	r2, [pc, #88]	; (80097a4 <pvPortMalloc+0x190>)
 800974c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800974e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009750:	685a      	ldr	r2, [r3, #4]
 8009752:	4b11      	ldr	r3, [pc, #68]	; (8009798 <pvPortMalloc+0x184>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	431a      	orrs	r2, r3
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	2200      	movs	r2, #0
 8009760:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009762:	f7fe fced 	bl	8008140 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	f003 0307 	and.w	r3, r3, #7
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00c      	beq.n	800978a <pvPortMalloc+0x176>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009774:	b672      	cpsid	i
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	b662      	cpsie	i
 8009784:	60fb      	str	r3, [r7, #12]
}
 8009786:	bf00      	nop
 8009788:	e7fe      	b.n	8009788 <pvPortMalloc+0x174>
	return pvReturn;
 800978a:	69fb      	ldr	r3, [r7, #28]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3728      	adds	r7, #40	; 0x28
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	20005110 	.word	0x20005110
 8009798:	2000511c 	.word	0x2000511c
 800979c:	20005114 	.word	0x20005114
 80097a0:	20005108 	.word	0x20005108
 80097a4:	20005118 	.word	0x20005118

080097a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d04c      	beq.n	8009854 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097ba:	2308      	movs	r3, #8
 80097bc:	425b      	negs	r3, r3
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	4413      	add	r3, r2
 80097c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	4b23      	ldr	r3, [pc, #140]	; (800985c <vPortFree+0xb4>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4013      	ands	r3, r2
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10c      	bne.n	80097f0 <vPortFree+0x48>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097da:	b672      	cpsid	i
 80097dc:	f383 8811 	msr	BASEPRI, r3
 80097e0:	f3bf 8f6f 	isb	sy
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	b662      	cpsie	i
 80097ea:	60fb      	str	r3, [r7, #12]
}
 80097ec:	bf00      	nop
 80097ee:	e7fe      	b.n	80097ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00c      	beq.n	8009812 <vPortFree+0x6a>
	__asm volatile
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	b672      	cpsid	i
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	b662      	cpsie	i
 800980c:	60bb      	str	r3, [r7, #8]
}
 800980e:	bf00      	nop
 8009810:	e7fe      	b.n	8009810 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	685a      	ldr	r2, [r3, #4]
 8009816:	4b11      	ldr	r3, [pc, #68]	; (800985c <vPortFree+0xb4>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4013      	ands	r3, r2
 800981c:	2b00      	cmp	r3, #0
 800981e:	d019      	beq.n	8009854 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d115      	bne.n	8009854 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	4b0b      	ldr	r3, [pc, #44]	; (800985c <vPortFree+0xb4>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	43db      	mvns	r3, r3
 8009832:	401a      	ands	r2, r3
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009838:	f7fe fc74 	bl	8008124 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	685a      	ldr	r2, [r3, #4]
 8009840:	4b07      	ldr	r3, [pc, #28]	; (8009860 <vPortFree+0xb8>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4413      	add	r3, r2
 8009846:	4a06      	ldr	r2, [pc, #24]	; (8009860 <vPortFree+0xb8>)
 8009848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800984a:	6938      	ldr	r0, [r7, #16]
 800984c:	f000 f86c 	bl	8009928 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009850:	f7fe fc76 	bl	8008140 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009854:	bf00      	nop
 8009856:	3718      	adds	r7, #24
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	2000511c 	.word	0x2000511c
 8009860:	20005114 	.word	0x20005114

08009864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800986a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800986e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009870:	4b27      	ldr	r3, [pc, #156]	; (8009910 <prvHeapInit+0xac>)
 8009872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f003 0307 	and.w	r3, r3, #7
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00c      	beq.n	8009898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	3307      	adds	r3, #7
 8009882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f023 0307 	bic.w	r3, r3, #7
 800988a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	4a1f      	ldr	r2, [pc, #124]	; (8009910 <prvHeapInit+0xac>)
 8009894:	4413      	add	r3, r2
 8009896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800989c:	4a1d      	ldr	r2, [pc, #116]	; (8009914 <prvHeapInit+0xb0>)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098a2:	4b1c      	ldr	r3, [pc, #112]	; (8009914 <prvHeapInit+0xb0>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	4413      	add	r3, r2
 80098ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80098b0:	2208      	movs	r2, #8
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	1a9b      	subs	r3, r3, r2
 80098b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f023 0307 	bic.w	r3, r3, #7
 80098be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	4a15      	ldr	r2, [pc, #84]	; (8009918 <prvHeapInit+0xb4>)
 80098c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80098c6:	4b14      	ldr	r3, [pc, #80]	; (8009918 <prvHeapInit+0xb4>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2200      	movs	r2, #0
 80098cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80098ce:	4b12      	ldr	r3, [pc, #72]	; (8009918 <prvHeapInit+0xb4>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2200      	movs	r2, #0
 80098d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	1ad2      	subs	r2, r2, r3
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098e4:	4b0c      	ldr	r3, [pc, #48]	; (8009918 <prvHeapInit+0xb4>)
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	4a0a      	ldr	r2, [pc, #40]	; (800991c <prvHeapInit+0xb8>)
 80098f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	4a09      	ldr	r2, [pc, #36]	; (8009920 <prvHeapInit+0xbc>)
 80098fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80098fc:	4b09      	ldr	r3, [pc, #36]	; (8009924 <prvHeapInit+0xc0>)
 80098fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009902:	601a      	str	r2, [r3, #0]
}
 8009904:	bf00      	nop
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	20001508 	.word	0x20001508
 8009914:	20005108 	.word	0x20005108
 8009918:	20005110 	.word	0x20005110
 800991c:	20005118 	.word	0x20005118
 8009920:	20005114 	.word	0x20005114
 8009924:	2000511c 	.word	0x2000511c

08009928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009930:	4b28      	ldr	r3, [pc, #160]	; (80099d4 <prvInsertBlockIntoFreeList+0xac>)
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	e002      	b.n	800993c <prvInsertBlockIntoFreeList+0x14>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	60fb      	str	r3, [r7, #12]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	429a      	cmp	r2, r3
 8009944:	d8f7      	bhi.n	8009936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	4413      	add	r3, r2
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	429a      	cmp	r2, r3
 8009956:	d108      	bne.n	800996a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	441a      	add	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	441a      	add	r2, r3
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	429a      	cmp	r2, r3
 800997c:	d118      	bne.n	80099b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	4b15      	ldr	r3, [pc, #84]	; (80099d8 <prvInsertBlockIntoFreeList+0xb0>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	429a      	cmp	r2, r3
 8009988:	d00d      	beq.n	80099a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	685a      	ldr	r2, [r3, #4]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	441a      	add	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	e008      	b.n	80099b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099a6:	4b0c      	ldr	r3, [pc, #48]	; (80099d8 <prvInsertBlockIntoFreeList+0xb0>)
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	e003      	b.n	80099b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d002      	beq.n	80099c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099c6:	bf00      	nop
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	20005108 	.word	0x20005108
 80099d8:	20005110 	.word	0x20005110

080099dc <memset>:
 80099dc:	4402      	add	r2, r0
 80099de:	4603      	mov	r3, r0
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d100      	bne.n	80099e6 <memset+0xa>
 80099e4:	4770      	bx	lr
 80099e6:	f803 1b01 	strb.w	r1, [r3], #1
 80099ea:	e7f9      	b.n	80099e0 <memset+0x4>

080099ec <_reclaim_reent>:
 80099ec:	4b29      	ldr	r3, [pc, #164]	; (8009a94 <_reclaim_reent+0xa8>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4283      	cmp	r3, r0
 80099f2:	b570      	push	{r4, r5, r6, lr}
 80099f4:	4604      	mov	r4, r0
 80099f6:	d04b      	beq.n	8009a90 <_reclaim_reent+0xa4>
 80099f8:	69c3      	ldr	r3, [r0, #28]
 80099fa:	b143      	cbz	r3, 8009a0e <_reclaim_reent+0x22>
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d144      	bne.n	8009a8c <_reclaim_reent+0xa0>
 8009a02:	69e3      	ldr	r3, [r4, #28]
 8009a04:	6819      	ldr	r1, [r3, #0]
 8009a06:	b111      	cbz	r1, 8009a0e <_reclaim_reent+0x22>
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f000 f879 	bl	8009b00 <_free_r>
 8009a0e:	6961      	ldr	r1, [r4, #20]
 8009a10:	b111      	cbz	r1, 8009a18 <_reclaim_reent+0x2c>
 8009a12:	4620      	mov	r0, r4
 8009a14:	f000 f874 	bl	8009b00 <_free_r>
 8009a18:	69e1      	ldr	r1, [r4, #28]
 8009a1a:	b111      	cbz	r1, 8009a22 <_reclaim_reent+0x36>
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f000 f86f 	bl	8009b00 <_free_r>
 8009a22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009a24:	b111      	cbz	r1, 8009a2c <_reclaim_reent+0x40>
 8009a26:	4620      	mov	r0, r4
 8009a28:	f000 f86a 	bl	8009b00 <_free_r>
 8009a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a2e:	b111      	cbz	r1, 8009a36 <_reclaim_reent+0x4a>
 8009a30:	4620      	mov	r0, r4
 8009a32:	f000 f865 	bl	8009b00 <_free_r>
 8009a36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009a38:	b111      	cbz	r1, 8009a40 <_reclaim_reent+0x54>
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f000 f860 	bl	8009b00 <_free_r>
 8009a40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009a42:	b111      	cbz	r1, 8009a4a <_reclaim_reent+0x5e>
 8009a44:	4620      	mov	r0, r4
 8009a46:	f000 f85b 	bl	8009b00 <_free_r>
 8009a4a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009a4c:	b111      	cbz	r1, 8009a54 <_reclaim_reent+0x68>
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f000 f856 	bl	8009b00 <_free_r>
 8009a54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009a56:	b111      	cbz	r1, 8009a5e <_reclaim_reent+0x72>
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f000 f851 	bl	8009b00 <_free_r>
 8009a5e:	6a23      	ldr	r3, [r4, #32]
 8009a60:	b1b3      	cbz	r3, 8009a90 <_reclaim_reent+0xa4>
 8009a62:	4620      	mov	r0, r4
 8009a64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a68:	4718      	bx	r3
 8009a6a:	5949      	ldr	r1, [r1, r5]
 8009a6c:	b941      	cbnz	r1, 8009a80 <_reclaim_reent+0x94>
 8009a6e:	3504      	adds	r5, #4
 8009a70:	69e3      	ldr	r3, [r4, #28]
 8009a72:	2d80      	cmp	r5, #128	; 0x80
 8009a74:	68d9      	ldr	r1, [r3, #12]
 8009a76:	d1f8      	bne.n	8009a6a <_reclaim_reent+0x7e>
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f000 f841 	bl	8009b00 <_free_r>
 8009a7e:	e7c0      	b.n	8009a02 <_reclaim_reent+0x16>
 8009a80:	680e      	ldr	r6, [r1, #0]
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 f83c 	bl	8009b00 <_free_r>
 8009a88:	4631      	mov	r1, r6
 8009a8a:	e7ef      	b.n	8009a6c <_reclaim_reent+0x80>
 8009a8c:	2500      	movs	r5, #0
 8009a8e:	e7ef      	b.n	8009a70 <_reclaim_reent+0x84>
 8009a90:	bd70      	pop	{r4, r5, r6, pc}
 8009a92:	bf00      	nop
 8009a94:	20000088 	.word	0x20000088

08009a98 <__libc_init_array>:
 8009a98:	b570      	push	{r4, r5, r6, lr}
 8009a9a:	4d0d      	ldr	r5, [pc, #52]	; (8009ad0 <__libc_init_array+0x38>)
 8009a9c:	4c0d      	ldr	r4, [pc, #52]	; (8009ad4 <__libc_init_array+0x3c>)
 8009a9e:	1b64      	subs	r4, r4, r5
 8009aa0:	10a4      	asrs	r4, r4, #2
 8009aa2:	2600      	movs	r6, #0
 8009aa4:	42a6      	cmp	r6, r4
 8009aa6:	d109      	bne.n	8009abc <__libc_init_array+0x24>
 8009aa8:	4d0b      	ldr	r5, [pc, #44]	; (8009ad8 <__libc_init_array+0x40>)
 8009aaa:	4c0c      	ldr	r4, [pc, #48]	; (8009adc <__libc_init_array+0x44>)
 8009aac:	f000 f880 	bl	8009bb0 <_init>
 8009ab0:	1b64      	subs	r4, r4, r5
 8009ab2:	10a4      	asrs	r4, r4, #2
 8009ab4:	2600      	movs	r6, #0
 8009ab6:	42a6      	cmp	r6, r4
 8009ab8:	d105      	bne.n	8009ac6 <__libc_init_array+0x2e>
 8009aba:	bd70      	pop	{r4, r5, r6, pc}
 8009abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ac0:	4798      	blx	r3
 8009ac2:	3601      	adds	r6, #1
 8009ac4:	e7ee      	b.n	8009aa4 <__libc_init_array+0xc>
 8009ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aca:	4798      	blx	r3
 8009acc:	3601      	adds	r6, #1
 8009ace:	e7f2      	b.n	8009ab6 <__libc_init_array+0x1e>
 8009ad0:	0800b3a4 	.word	0x0800b3a4
 8009ad4:	0800b3a4 	.word	0x0800b3a4
 8009ad8:	0800b3a4 	.word	0x0800b3a4
 8009adc:	0800b3a8 	.word	0x0800b3a8

08009ae0 <__retarget_lock_acquire_recursive>:
 8009ae0:	4770      	bx	lr

08009ae2 <__retarget_lock_release_recursive>:
 8009ae2:	4770      	bx	lr

08009ae4 <memcpy>:
 8009ae4:	440a      	add	r2, r1
 8009ae6:	4291      	cmp	r1, r2
 8009ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009aec:	d100      	bne.n	8009af0 <memcpy+0xc>
 8009aee:	4770      	bx	lr
 8009af0:	b510      	push	{r4, lr}
 8009af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009af6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009afa:	4291      	cmp	r1, r2
 8009afc:	d1f9      	bne.n	8009af2 <memcpy+0xe>
 8009afe:	bd10      	pop	{r4, pc}

08009b00 <_free_r>:
 8009b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b02:	2900      	cmp	r1, #0
 8009b04:	d044      	beq.n	8009b90 <_free_r+0x90>
 8009b06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b0a:	9001      	str	r0, [sp, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f1a1 0404 	sub.w	r4, r1, #4
 8009b12:	bfb8      	it	lt
 8009b14:	18e4      	addlt	r4, r4, r3
 8009b16:	f000 f83f 	bl	8009b98 <__malloc_lock>
 8009b1a:	4a1e      	ldr	r2, [pc, #120]	; (8009b94 <_free_r+0x94>)
 8009b1c:	9801      	ldr	r0, [sp, #4]
 8009b1e:	6813      	ldr	r3, [r2, #0]
 8009b20:	b933      	cbnz	r3, 8009b30 <_free_r+0x30>
 8009b22:	6063      	str	r3, [r4, #4]
 8009b24:	6014      	str	r4, [r2, #0]
 8009b26:	b003      	add	sp, #12
 8009b28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b2c:	f000 b83a 	b.w	8009ba4 <__malloc_unlock>
 8009b30:	42a3      	cmp	r3, r4
 8009b32:	d908      	bls.n	8009b46 <_free_r+0x46>
 8009b34:	6825      	ldr	r5, [r4, #0]
 8009b36:	1961      	adds	r1, r4, r5
 8009b38:	428b      	cmp	r3, r1
 8009b3a:	bf01      	itttt	eq
 8009b3c:	6819      	ldreq	r1, [r3, #0]
 8009b3e:	685b      	ldreq	r3, [r3, #4]
 8009b40:	1949      	addeq	r1, r1, r5
 8009b42:	6021      	streq	r1, [r4, #0]
 8009b44:	e7ed      	b.n	8009b22 <_free_r+0x22>
 8009b46:	461a      	mov	r2, r3
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	b10b      	cbz	r3, 8009b50 <_free_r+0x50>
 8009b4c:	42a3      	cmp	r3, r4
 8009b4e:	d9fa      	bls.n	8009b46 <_free_r+0x46>
 8009b50:	6811      	ldr	r1, [r2, #0]
 8009b52:	1855      	adds	r5, r2, r1
 8009b54:	42a5      	cmp	r5, r4
 8009b56:	d10b      	bne.n	8009b70 <_free_r+0x70>
 8009b58:	6824      	ldr	r4, [r4, #0]
 8009b5a:	4421      	add	r1, r4
 8009b5c:	1854      	adds	r4, r2, r1
 8009b5e:	42a3      	cmp	r3, r4
 8009b60:	6011      	str	r1, [r2, #0]
 8009b62:	d1e0      	bne.n	8009b26 <_free_r+0x26>
 8009b64:	681c      	ldr	r4, [r3, #0]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	6053      	str	r3, [r2, #4]
 8009b6a:	440c      	add	r4, r1
 8009b6c:	6014      	str	r4, [r2, #0]
 8009b6e:	e7da      	b.n	8009b26 <_free_r+0x26>
 8009b70:	d902      	bls.n	8009b78 <_free_r+0x78>
 8009b72:	230c      	movs	r3, #12
 8009b74:	6003      	str	r3, [r0, #0]
 8009b76:	e7d6      	b.n	8009b26 <_free_r+0x26>
 8009b78:	6825      	ldr	r5, [r4, #0]
 8009b7a:	1961      	adds	r1, r4, r5
 8009b7c:	428b      	cmp	r3, r1
 8009b7e:	bf04      	itt	eq
 8009b80:	6819      	ldreq	r1, [r3, #0]
 8009b82:	685b      	ldreq	r3, [r3, #4]
 8009b84:	6063      	str	r3, [r4, #4]
 8009b86:	bf04      	itt	eq
 8009b88:	1949      	addeq	r1, r1, r5
 8009b8a:	6021      	streq	r1, [r4, #0]
 8009b8c:	6054      	str	r4, [r2, #4]
 8009b8e:	e7ca      	b.n	8009b26 <_free_r+0x26>
 8009b90:	b003      	add	sp, #12
 8009b92:	bd30      	pop	{r4, r5, pc}
 8009b94:	2000525c 	.word	0x2000525c

08009b98 <__malloc_lock>:
 8009b98:	4801      	ldr	r0, [pc, #4]	; (8009ba0 <__malloc_lock+0x8>)
 8009b9a:	f7ff bfa1 	b.w	8009ae0 <__retarget_lock_acquire_recursive>
 8009b9e:	bf00      	nop
 8009ba0:	20005258 	.word	0x20005258

08009ba4 <__malloc_unlock>:
 8009ba4:	4801      	ldr	r0, [pc, #4]	; (8009bac <__malloc_unlock+0x8>)
 8009ba6:	f7ff bf9c 	b.w	8009ae2 <__retarget_lock_release_recursive>
 8009baa:	bf00      	nop
 8009bac:	20005258 	.word	0x20005258

08009bb0 <_init>:
 8009bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb2:	bf00      	nop
 8009bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bb6:	bc08      	pop	{r3}
 8009bb8:	469e      	mov	lr, r3
 8009bba:	4770      	bx	lr

08009bbc <_fini>:
 8009bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbe:	bf00      	nop
 8009bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc2:	bc08      	pop	{r3}
 8009bc4:	469e      	mov	lr, r3
 8009bc6:	4770      	bx	lr
