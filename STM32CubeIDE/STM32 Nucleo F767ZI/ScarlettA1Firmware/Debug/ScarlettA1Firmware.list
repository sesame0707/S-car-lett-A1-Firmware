
ScarlettA1Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9b0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a14  0800cbb0  0800cbb0  0001cbb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5c4  0800e5c4  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5c4  0800e5c4  0001e5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5cc  0800e5cc  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5cc  0800e5cc  0001e5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5d0  0800e5d0  0001e5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800e5d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005258  200000c0  0800e694  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005318  0800e694  00025318  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ee  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002812b  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b0c  00000000  00000000  0004825c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f18  00000000  00000000  0004dd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017e0  00000000  00000000  0004fc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002def4  00000000  00000000  00051460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029812  00000000  00000000  0007f354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e99c  00000000  00000000  000a8b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008758  00000000  00000000  001b7504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001bfc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000c0 	.word	0x200000c0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cb98 	.word	0x0800cb98

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000c4 	.word	0x200000c4
 800023c:	0800cb98 	.word	0x0800cb98

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <setLEDStripesEffect>:
 */

#include "commonFunctions.h"

/* LED stripes */
void setLEDStripesEffect(enum StripesEffect stripesEffect, struct DesiredStripesColor *desiredStripesColor) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	switch (stripesEffect) {
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	2b03      	cmp	r3, #3
 80005ec:	d832      	bhi.n	8000654 <setLEDStripesEffect+0x78>
 80005ee:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <setLEDStripesEffect+0x18>)
 80005f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f4:	08000605 	.word	0x08000605
 80005f8:	08000619 	.word	0x08000619
 80005fc:	0800062d 	.word	0x0800062d
 8000600:	08000641 	.word	0x08000641
	case 0:
		desiredStripesColor->red = 0x00;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	709a      	strb	r2, [r3, #2]
		break;
 8000616:	e01d      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 1:
		desiredStripesColor->red = 0x40;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2240      	movs	r2, #64	; 0x40
 800061c:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x20;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2220      	movs	r2, #32
 8000622:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	2200      	movs	r2, #0
 8000628:	709a      	strb	r2, [r3, #2]
		break;
 800062a:	e013      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 2:
		desiredStripesColor->red = 0x40;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	2240      	movs	r2, #64	; 0x40
 8000630:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x40;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	2240      	movs	r2, #64	; 0x40
 8000636:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x40;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	2240      	movs	r2, #64	; 0x40
 800063c:	709a      	strb	r2, [r3, #2]
		break;
 800063e:	e009      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 3:
		desiredStripesColor->red = 0x00;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	2200      	movs	r2, #0
 800064a:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x40;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	2240      	movs	r2, #64	; 0x40
 8000650:	709a      	strb	r2, [r3, #2]
		break;
 8000652:	bf00      	nop
	}
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <setBLDCMotorSpeed>:

/* BLDC motor */
void setBLDCMotorSpeed(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	switch(sliderAccelerateDecelerateCurrentValue) {
 8000664:	4b3a      	ldr	r3, [pc, #232]	; (8000750 <setBLDCMotorSpeed+0xf0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	3302      	adds	r3, #2
 800066a:	2b06      	cmp	r3, #6
 800066c:	d84d      	bhi.n	800070a <setBLDCMotorSpeed+0xaa>
 800066e:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <setBLDCMotorSpeed+0x14>)
 8000670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000674:	08000691 	.word	0x08000691
 8000678:	080006a5 	.word	0x080006a5
 800067c:	080006b7 	.word	0x080006b7
 8000680:	080006c1 	.word	0x080006c1
 8000684:	080006d3 	.word	0x080006d3
 8000688:	080006e7 	.word	0x080006e7
 800068c:	080006f9 	.word	0x080006f9
	case -2:
	  BLDCMotorSpeedVoltage = 0.5;
 8000690:	4b30      	ldr	r3, [pc, #192]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 8000692:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000696:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2110      	movs	r1, #16
 800069c:	482e      	ldr	r0, [pc, #184]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 800069e:	f003 fb79 	bl	8003d94 <HAL_GPIO_WritePin>
	  break;
 80006a2:	e032      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case -1:
	  BLDCMotorSpeedVoltage = 0.4;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006a6:	4a2d      	ldr	r2, [pc, #180]	; (800075c <setBLDCMotorSpeed+0xfc>)
 80006a8:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2110      	movs	r1, #16
 80006ae:	482a      	ldr	r0, [pc, #168]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006b0:	f003 fb70 	bl	8003d94 <HAL_GPIO_WritePin>
	  break;
 80006b4:	e029      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 0:
	  BLDCMotorSpeedVoltage = 0.0;
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006b8:	f04f 0200 	mov.w	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
	  break;
 80006be:	e024      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 1:
	  BLDCMotorSpeedVoltage = 0.4;
 80006c0:	4b24      	ldr	r3, [pc, #144]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006c2:	4a26      	ldr	r2, [pc, #152]	; (800075c <setBLDCMotorSpeed+0xfc>)
 80006c4:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2110      	movs	r1, #16
 80006ca:	4823      	ldr	r0, [pc, #140]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006cc:	f003 fb62 	bl	8003d94 <HAL_GPIO_WritePin>
	  break;
 80006d0:	e01b      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 2:
	  BLDCMotorSpeedVoltage = 0.5;
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006d4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80006d8:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2110      	movs	r1, #16
 80006de:	481e      	ldr	r0, [pc, #120]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006e0:	f003 fb58 	bl	8003d94 <HAL_GPIO_WritePin>
	  break;
 80006e4:	e011      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 3:
	  BLDCMotorSpeedVoltage = 0.6;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006e8:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <setBLDCMotorSpeed+0x100>)
 80006ea:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2110      	movs	r1, #16
 80006f0:	4819      	ldr	r0, [pc, #100]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006f2:	f003 fb4f 	bl	8003d94 <HAL_GPIO_WritePin>
	  break;
 80006f6:	e008      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 4:
	  BLDCMotorSpeedVoltage = 0.7;
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006fa:	4a1a      	ldr	r2, [pc, #104]	; (8000764 <setBLDCMotorSpeed+0x104>)
 80006fc:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2110      	movs	r1, #16
 8000702:	4815      	ldr	r0, [pc, #84]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 8000704:	f003 fb46 	bl	8003d94 <HAL_GPIO_WritePin>
	  break;
 8000708:	bf00      	nop
	}

	BLDCMotorSpeedValue = BLDCMotorSpeedVoltage * (0xfff + 1) / 3.3;
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 800070c:	edd3 7a00 	vldr	s15, [r3]
 8000710:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000768 <setBLDCMotorSpeed+0x108>
 8000714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000718:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800071c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000748 <setBLDCMotorSpeed+0xe8>
 8000720:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000724:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000728:	ee17 2a90 	vmov	r2, s15
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <setBLDCMotorSpeed+0x10c>)
 800072e:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, BLDCMotorSpeedValue);
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <setBLDCMotorSpeed+0x10c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <setBLDCMotorSpeed+0x110>)
 800073a:	f002 fced 	bl	8003118 <HAL_DAC_SetValue>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	f3af 8000 	nop.w
 8000748:	66666666 	.word	0x66666666
 800074c:	400a6666 	.word	0x400a6666
 8000750:	200000e8 	.word	0x200000e8
 8000754:	200000f0 	.word	0x200000f0
 8000758:	40020400 	.word	0x40020400
 800075c:	3ecccccd 	.word	0x3ecccccd
 8000760:	3f19999a 	.word	0x3f19999a
 8000764:	3f333333 	.word	0x3f333333
 8000768:	45800000 	.word	0x45800000
 800076c:	200000f4 	.word	0x200000f4
 8000770:	20000108 	.word	0x20000108

08000774 <moveStepperMotor>:

/* Stepper motor */
void moveStepperMotor(enum Direction direction) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	if(direction == LEFT) {
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d106      	bne.n	8000792 <moveStepperMotor+0x1e>
		HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078a:	480c      	ldr	r0, [pc, #48]	; (80007bc <moveStepperMotor+0x48>)
 800078c:	f003 fb02 	bl	8003d94 <HAL_GPIO_WritePin>
 8000790:	e005      	b.n	800079e <moveStepperMotor+0x2a>
	} else {
		HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000798:	4808      	ldr	r0, [pc, #32]	; (80007bc <moveStepperMotor+0x48>)
 800079a:	f003 fafb 	bl	8003d94 <HAL_GPIO_WritePin>
	}

	TIM4->CCR3 = 500;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <moveStepperMotor+0x4c>)
 80007a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007a4:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(35);
 80007a6:	2023      	movs	r0, #35	; 0x23
 80007a8:	f008 fa5c 	bl	8008c64 <osDelay>
	TIM4->CCR3 = 0;
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <moveStepperMotor+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40020c00 	.word	0x40020c00
 80007c0:	40000800 	.word	0x40000800

080007c4 <moveStepperMotorUntil>:

void moveStepperMotorUntil(int targetLeftRightPosition) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	if(sliderLeftRightCurrentValue == targetLeftRightPosition) {
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <moveStepperMotorUntil+0x7c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d02f      	beq.n	8000836 <moveStepperMotorUntil+0x72>
		// Do nothing
	} else if(sliderLeftRightCurrentValue > targetLeftRightPosition) {
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <moveStepperMotorUntil+0x7c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	429a      	cmp	r2, r3
 80007de:	da15      	bge.n	800080c <moveStepperMotorUntil+0x48>
		// Turn left until target left/right position is reached
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue --) {
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <moveStepperMotorUntil+0x7c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	e00c      	b.n	8000800 <moveStepperMotorUntil+0x3c>
			moveStepperMotor(LEFT);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff ffc4 	bl	8000774 <moveStepperMotor>
			osDelay(LEFT_RIGHT_DURATION);
 80007ec:	2032      	movs	r0, #50	; 0x32
 80007ee:	f008 fa39 	bl	8008c64 <osDelay>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue --) {
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <moveStepperMotorUntil+0x7c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	1e5a      	subs	r2, r3, #1
 80007f8:	4911      	ldr	r1, [pc, #68]	; (8000840 <moveStepperMotorUntil+0x7c>)
 80007fa:	600a      	str	r2, [r1, #0]
 80007fc:	4a11      	ldr	r2, [pc, #68]	; (8000844 <moveStepperMotorUntil+0x80>)
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <moveStepperMotorUntil+0x7c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	429a      	cmp	r2, r3
 8000808:	d1ed      	bne.n	80007e6 <moveStepperMotorUntil+0x22>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
			moveStepperMotor(RIGHT);
			osDelay(LEFT_RIGHT_DURATION);
		}
	}
}
 800080a:	e014      	b.n	8000836 <moveStepperMotorUntil+0x72>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <moveStepperMotorUntil+0x7c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	e00c      	b.n	800082c <moveStepperMotorUntil+0x68>
			moveStepperMotor(RIGHT);
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff ffae 	bl	8000774 <moveStepperMotor>
			osDelay(LEFT_RIGHT_DURATION);
 8000818:	2032      	movs	r0, #50	; 0x32
 800081a:	f008 fa23 	bl	8008c64 <osDelay>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <moveStepperMotorUntil+0x7c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	4906      	ldr	r1, [pc, #24]	; (8000840 <moveStepperMotorUntil+0x7c>)
 8000826:	600a      	str	r2, [r1, #0]
 8000828:	4a06      	ldr	r2, [pc, #24]	; (8000844 <moveStepperMotorUntil+0x80>)
 800082a:	6013      	str	r3, [r2, #0]
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <moveStepperMotorUntil+0x7c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	429a      	cmp	r2, r3
 8000834:	d1ed      	bne.n	8000812 <moveStepperMotorUntil+0x4e>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000fc 	.word	0x200000fc
 8000844:	200000f8 	.word	0x200000f8

08000848 <park>:

/* LiDAR sphere */
void park(enum Direction direction) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	// Private variables
	int targetLeftRightPosition = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]

	// Stop BLDC motor
	sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8000856:	4b33      	ldr	r3, [pc, #204]	; (8000924 <park+0xdc>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a33      	ldr	r2, [pc, #204]	; (8000928 <park+0xe0>)
 800085c:	6013      	str	r3, [r2, #0]
	sliderAccelerateDecelerateCurrentValue = 0;
 800085e:	4b31      	ldr	r3, [pc, #196]	; (8000924 <park+0xdc>)
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
	setBLDCMotorSpeed();
 8000864:	f7ff fefc 	bl	8000660 <setBLDCMotorSpeed>

	// Set LED stripes
	stripesEffect = PARKING;
 8000868:	4b30      	ldr	r3, [pc, #192]	; (800092c <park+0xe4>)
 800086a:	2203      	movs	r2, #3
 800086c:	701a      	strb	r2, [r3, #0]
	ommitToggle = true;
 800086e:	4b30      	ldr	r3, [pc, #192]	; (8000930 <park+0xe8>)
 8000870:	2201      	movs	r2, #1
 8000872:	701a      	strb	r2, [r3, #0]
	vTaskResume(LEDStripesTaskHandle);
 8000874:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <park+0xec>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4618      	mov	r0, r3
 800087a:	f009 fb8f 	bl	8009f9c <vTaskResume>

	// Toggle left/right blinkers
	if(direction == LEFT) {
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d105      	bne.n	8000890 <park+0x48>
		vTaskResume(LeftBlinkersTasHandle);
 8000884:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <park+0xf0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f009 fb87 	bl	8009f9c <vTaskResume>
 800088e:	e004      	b.n	800089a <park+0x52>
	} else {
		vTaskResume(RightBlinkersTaHandle);
 8000890:	4b2a      	ldr	r3, [pc, #168]	; (800093c <park+0xf4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f009 fb81 	bl	8009f9c <vTaskResume>
	}

	// Turn left/right to the destination
	if(direction == LEFT) {
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d103      	bne.n	80008a8 <park+0x60>
		targetLeftRightPosition = -3;
 80008a0:	f06f 0302 	mvn.w	r3, #2
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	e001      	b.n	80008ac <park+0x64>
	} else {
		targetLeftRightPosition = 3;
 80008a8:	2303      	movs	r3, #3
 80008aa:	60fb      	str	r3, [r7, #12]
	}
	moveStepperMotorUntil(targetLeftRightPosition);
 80008ac:	68f8      	ldr	r0, [r7, #12]
 80008ae:	f7ff ff89 	bl	80007c4 <moveStepperMotorUntil>

	// Withdraw a little bit
	vTaskResume(DecelerateTaskHandle);
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <park+0xf8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f009 fb70 	bl	8009f9c <vTaskResume>
	osDelay(ACCELERATE_DECELERATE_DURATION);
 80008bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c0:	f008 f9d0 	bl	8008c64 <osDelay>
	vTaskResume(AccelerateTaskHandle);
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <park+0xfc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f009 fb67 	bl	8009f9c <vTaskResume>

	// Turn left/right from the destination
	targetLeftRightPosition = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
	moveStepperMotorUntil(targetLeftRightPosition);
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f7ff ff76 	bl	80007c4 <moveStepperMotorUntil>

	// Drive forward a little bit
	vTaskResume(AccelerateTaskHandle);
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <park+0xfc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f009 fb5d 	bl	8009f9c <vTaskResume>
	osDelay(ACCELERATE_DECELERATE_DURATION / 2);
 80008e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e6:	f008 f9bd 	bl	8008c64 <osDelay>
	vTaskResume(DecelerateTaskHandle);
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <park+0xf8>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f009 fb54 	bl	8009f9c <vTaskResume>

	// Set LED stripes
	if(isOn) {
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <park+0x100>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d003      	beq.n	8000906 <park+0xbe>
		stripesEffect = DEFAULT;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <park+0xe4>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	e002      	b.n	800090c <park+0xc4>
	} else {
		stripesEffect = NONE;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <park+0xe4>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
	}
	ommitToggle = true;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <park+0xe8>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
	vTaskResume(LEDStripesTaskHandle);
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <park+0xec>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f009 fb40 	bl	8009f9c <vTaskResume>
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200000e8 	.word	0x200000e8
 8000928:	200000e4 	.word	0x200000e4
 800092c:	200000dd 	.word	0x200000dd
 8000930:	200000df 	.word	0x200000df
 8000934:	2000012c 	.word	0x2000012c
 8000938:	20000130 	.word	0x20000130
 800093c:	20000134 	.word	0x20000134
 8000940:	20000144 	.word	0x20000144
 8000944:	20000140 	.word	0x20000140
 8000948:	200000de 	.word	0x200000de

0800094c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_DAC_Init+0x4c>)
 800095c:	4a0f      	ldr	r2, [pc, #60]	; (800099c <MX_DAC_Init+0x50>)
 800095e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <MX_DAC_Init+0x4c>)
 8000962:	f002 fb0b 	bl	8002f7c <HAL_DAC_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800096c:	f001 f8d8 	bl	8001b20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000970:	2300      	movs	r3, #0
 8000972:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	2200      	movs	r2, #0
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <MX_DAC_Init+0x4c>)
 8000980:	f002 fbf9 	bl	8003176 <HAL_DAC_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800098a:	f001 f8c9 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000108 	.word	0x20000108
 800099c:	40007400 	.word	0x40007400

080009a0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <HAL_DAC_MspInit+0x84>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d12b      	bne.n	8000a1a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_DAC_MspInit+0x88>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <HAL_DAC_MspInit+0x88>)
 80009c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HAL_DAC_MspInit+0x88>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <HAL_DAC_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <HAL_DAC_MspInit+0x88>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_DAC_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = BLDCMotorStep_Pin;
 80009f2:	2310      	movs	r3, #16
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f6:	2303      	movs	r3, #3
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLDCMotorStep_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4809      	ldr	r0, [pc, #36]	; (8000a2c <HAL_DAC_MspInit+0x8c>)
 8000a06:	f003 f819 	bl	8003a3c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2105      	movs	r1, #5
 8000a0e:	2036      	movs	r0, #54	; 0x36
 8000a10:	f002 fa8a 	bl	8002f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a14:	2036      	movs	r0, #54	; 0x36
 8000a16:	f002 faa3 	bl	8002f60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	; 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40007400 	.word	0x40007400
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000

08000a30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_DMA_Init+0x38>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <MX_DMA_Init+0x38>)
 8000a3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_DMA_Init+0x38>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2105      	movs	r1, #5
 8000a52:	203b      	movs	r0, #59	; 0x3b
 8000a54:	f002 fa68 	bl	8002f28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a58:	203b      	movs	r0, #59	; 0x3b
 8000a5a:	f002 fa81 	bl	8002f60 <HAL_NVIC_EnableIRQ>

}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of ConnectionTaskTimer */
  ConnectionTaskTimerHandle = osTimerNew(CallbackConnectionTaskTimer, osTimerOnce, NULL, &ConnectionTaskTimer_attributes);
 8000a70:	4b49      	ldr	r3, [pc, #292]	; (8000b98 <MX_FREERTOS_Init+0x12c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	4849      	ldr	r0, [pc, #292]	; (8000b9c <MX_FREERTOS_Init+0x130>)
 8000a78:	f008 f938 	bl	8008cec <osTimerNew>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a48      	ldr	r2, [pc, #288]	; (8000ba0 <MX_FREERTOS_Init+0x134>)
 8000a80:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8000a82:	4a48      	ldr	r2, [pc, #288]	; (8000ba4 <MX_FREERTOS_Init+0x138>)
 8000a84:	2100      	movs	r1, #0
 8000a86:	4848      	ldr	r0, [pc, #288]	; (8000ba8 <MX_FREERTOS_Init+0x13c>)
 8000a88:	f008 f846 	bl	8008b18 <osThreadNew>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4a47      	ldr	r2, [pc, #284]	; (8000bac <MX_FREERTOS_Init+0x140>)
 8000a90:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartDispatcherTask, NULL, &DispatcherTask_attributes);
 8000a92:	4a47      	ldr	r2, [pc, #284]	; (8000bb0 <MX_FREERTOS_Init+0x144>)
 8000a94:	2100      	movs	r1, #0
 8000a96:	4847      	ldr	r0, [pc, #284]	; (8000bb4 <MX_FREERTOS_Init+0x148>)
 8000a98:	f008 f83e 	bl	8008b18 <osThreadNew>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	4a46      	ldr	r2, [pc, #280]	; (8000bb8 <MX_FREERTOS_Init+0x14c>)
 8000aa0:	6013      	str	r3, [r2, #0]

  /* creation of StopTask */
  StopTaskHandle = osThreadNew(StartStopTask, NULL, &StopTask_attributes);
 8000aa2:	4a46      	ldr	r2, [pc, #280]	; (8000bbc <MX_FREERTOS_Init+0x150>)
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4846      	ldr	r0, [pc, #280]	; (8000bc0 <MX_FREERTOS_Init+0x154>)
 8000aa8:	f008 f836 	bl	8008b18 <osThreadNew>
 8000aac:	4603      	mov	r3, r0
 8000aae:	4a45      	ldr	r2, [pc, #276]	; (8000bc4 <MX_FREERTOS_Init+0x158>)
 8000ab0:	6013      	str	r3, [r2, #0]

  /* creation of DrivingLightsTa */
  DrivingLightsTaHandle = osThreadNew(StartDrivingLightsTask, NULL, &DrivingLightsTa_attributes);
 8000ab2:	4a45      	ldr	r2, [pc, #276]	; (8000bc8 <MX_FREERTOS_Init+0x15c>)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4845      	ldr	r0, [pc, #276]	; (8000bcc <MX_FREERTOS_Init+0x160>)
 8000ab8:	f008 f82e 	bl	8008b18 <osThreadNew>
 8000abc:	4603      	mov	r3, r0
 8000abe:	4a44      	ldr	r2, [pc, #272]	; (8000bd0 <MX_FREERTOS_Init+0x164>)
 8000ac0:	6013      	str	r3, [r2, #0]

  /* creation of LEDStripesTask */
  LEDStripesTaskHandle = osThreadNew(StartLEDStripesTask, NULL, &LEDStripesTask_attributes);
 8000ac2:	4a44      	ldr	r2, [pc, #272]	; (8000bd4 <MX_FREERTOS_Init+0x168>)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4844      	ldr	r0, [pc, #272]	; (8000bd8 <MX_FREERTOS_Init+0x16c>)
 8000ac8:	f008 f826 	bl	8008b18 <osThreadNew>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4a43      	ldr	r2, [pc, #268]	; (8000bdc <MX_FREERTOS_Init+0x170>)
 8000ad0:	6013      	str	r3, [r2, #0]

  /* creation of LeftBlinkersTas */
  LeftBlinkersTasHandle = osThreadNew(StartLeftBlinkersTask, NULL, &LeftBlinkersTas_attributes);
 8000ad2:	4a43      	ldr	r2, [pc, #268]	; (8000be0 <MX_FREERTOS_Init+0x174>)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4843      	ldr	r0, [pc, #268]	; (8000be4 <MX_FREERTOS_Init+0x178>)
 8000ad8:	f008 f81e 	bl	8008b18 <osThreadNew>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4a42      	ldr	r2, [pc, #264]	; (8000be8 <MX_FREERTOS_Init+0x17c>)
 8000ae0:	6013      	str	r3, [r2, #0]

  /* creation of RightBlinkersTa */
  RightBlinkersTaHandle = osThreadNew(StartRightBlinkersTask, NULL, &RightBlinkersTa_attributes);
 8000ae2:	4a42      	ldr	r2, [pc, #264]	; (8000bec <MX_FREERTOS_Init+0x180>)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4842      	ldr	r0, [pc, #264]	; (8000bf0 <MX_FREERTOS_Init+0x184>)
 8000ae8:	f008 f816 	bl	8008b18 <osThreadNew>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4a41      	ldr	r2, [pc, #260]	; (8000bf4 <MX_FREERTOS_Init+0x188>)
 8000af0:	6013      	str	r3, [r2, #0]

  /* creation of ParkLeftTask */
  ParkLeftTaskHandle = osThreadNew(StartParkLeftTask, NULL, &ParkLeftTask_attributes);
 8000af2:	4a41      	ldr	r2, [pc, #260]	; (8000bf8 <MX_FREERTOS_Init+0x18c>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	4841      	ldr	r0, [pc, #260]	; (8000bfc <MX_FREERTOS_Init+0x190>)
 8000af8:	f008 f80e 	bl	8008b18 <osThreadNew>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a40      	ldr	r2, [pc, #256]	; (8000c00 <MX_FREERTOS_Init+0x194>)
 8000b00:	6013      	str	r3, [r2, #0]

  /* creation of ParkRightTask */
  ParkRightTaskHandle = osThreadNew(StartParkRightTask, NULL, &ParkRightTask_attributes);
 8000b02:	4a40      	ldr	r2, [pc, #256]	; (8000c04 <MX_FREERTOS_Init+0x198>)
 8000b04:	2100      	movs	r1, #0
 8000b06:	4840      	ldr	r0, [pc, #256]	; (8000c08 <MX_FREERTOS_Init+0x19c>)
 8000b08:	f008 f806 	bl	8008b18 <osThreadNew>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a3f      	ldr	r2, [pc, #252]	; (8000c0c <MX_FREERTOS_Init+0x1a0>)
 8000b10:	6013      	str	r3, [r2, #0]

  /* creation of AccelerateTask */
  AccelerateTaskHandle = osThreadNew(StartAccelerateTask, NULL, &AccelerateTask_attributes);
 8000b12:	4a3f      	ldr	r2, [pc, #252]	; (8000c10 <MX_FREERTOS_Init+0x1a4>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	483f      	ldr	r0, [pc, #252]	; (8000c14 <MX_FREERTOS_Init+0x1a8>)
 8000b18:	f007 fffe 	bl	8008b18 <osThreadNew>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4a3e      	ldr	r2, [pc, #248]	; (8000c18 <MX_FREERTOS_Init+0x1ac>)
 8000b20:	6013      	str	r3, [r2, #0]

  /* creation of DecelerateTask */
  DecelerateTaskHandle = osThreadNew(StartDecelerateTask, NULL, &DecelerateTask_attributes);
 8000b22:	4a3e      	ldr	r2, [pc, #248]	; (8000c1c <MX_FREERTOS_Init+0x1b0>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	483e      	ldr	r0, [pc, #248]	; (8000c20 <MX_FREERTOS_Init+0x1b4>)
 8000b28:	f007 fff6 	bl	8008b18 <osThreadNew>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a3d      	ldr	r2, [pc, #244]	; (8000c24 <MX_FREERTOS_Init+0x1b8>)
 8000b30:	6013      	str	r3, [r2, #0]

  /* creation of TurnLeftTask */
  TurnLeftTaskHandle = osThreadNew(StartTurnLeftTask, NULL, &TurnLeftTask_attributes);
 8000b32:	4a3d      	ldr	r2, [pc, #244]	; (8000c28 <MX_FREERTOS_Init+0x1bc>)
 8000b34:	2100      	movs	r1, #0
 8000b36:	483d      	ldr	r0, [pc, #244]	; (8000c2c <MX_FREERTOS_Init+0x1c0>)
 8000b38:	f007 ffee 	bl	8008b18 <osThreadNew>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a3c      	ldr	r2, [pc, #240]	; (8000c30 <MX_FREERTOS_Init+0x1c4>)
 8000b40:	6013      	str	r3, [r2, #0]

  /* creation of TurnRightTask */
  TurnRightTaskHandle = osThreadNew(StartTurnRightTask, NULL, &TurnRightTask_attributes);
 8000b42:	4a3c      	ldr	r2, [pc, #240]	; (8000c34 <MX_FREERTOS_Init+0x1c8>)
 8000b44:	2100      	movs	r1, #0
 8000b46:	483c      	ldr	r0, [pc, #240]	; (8000c38 <MX_FREERTOS_Init+0x1cc>)
 8000b48:	f007 ffe6 	bl	8008b18 <osThreadNew>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	4a3b      	ldr	r2, [pc, #236]	; (8000c3c <MX_FREERTOS_Init+0x1d0>)
 8000b50:	6013      	str	r3, [r2, #0]

  /* creation of ConnectionTask */
  ConnectionTaskHandle = osThreadNew(StartConnectionTask, NULL, &ConnectionTask_attributes);
 8000b52:	4a3b      	ldr	r2, [pc, #236]	; (8000c40 <MX_FREERTOS_Init+0x1d4>)
 8000b54:	2100      	movs	r1, #0
 8000b56:	483b      	ldr	r0, [pc, #236]	; (8000c44 <MX_FREERTOS_Init+0x1d8>)
 8000b58:	f007 ffde 	bl	8008b18 <osThreadNew>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4a3a      	ldr	r2, [pc, #232]	; (8000c48 <MX_FREERTOS_Init+0x1dc>)
 8000b60:	6013      	str	r3, [r2, #0]

  /* creation of BrakeLightsTask */
  BrakeLightsTaskHandle = osThreadNew(StartBrakeLightsTask, NULL, &BrakeLightsTask_attributes);
 8000b62:	4a3a      	ldr	r2, [pc, #232]	; (8000c4c <MX_FREERTOS_Init+0x1e0>)
 8000b64:	2100      	movs	r1, #0
 8000b66:	483a      	ldr	r0, [pc, #232]	; (8000c50 <MX_FREERTOS_Init+0x1e4>)
 8000b68:	f007 ffd6 	bl	8008b18 <osThreadNew>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4a39      	ldr	r2, [pc, #228]	; (8000c54 <MX_FREERTOS_Init+0x1e8>)
 8000b70:	6013      	str	r3, [r2, #0]

  /* creation of WithdrawLightsT */
  WithdrawLightsTHandle = osThreadNew(StartWithdrawLightsTask, NULL, &WithdrawLightsT_attributes);
 8000b72:	4a39      	ldr	r2, [pc, #228]	; (8000c58 <MX_FREERTOS_Init+0x1ec>)
 8000b74:	2100      	movs	r1, #0
 8000b76:	4839      	ldr	r0, [pc, #228]	; (8000c5c <MX_FREERTOS_Init+0x1f0>)
 8000b78:	f007 ffce 	bl	8008b18 <osThreadNew>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4a38      	ldr	r2, [pc, #224]	; (8000c60 <MX_FREERTOS_Init+0x1f4>)
 8000b80:	6013      	str	r3, [r2, #0]

  /* creation of ResumeFromStopT */
  ResumeFromStopTHandle = osThreadNew(StartResumeFromStopTask, NULL, &ResumeFromStopT_attributes);
 8000b82:	4a38      	ldr	r2, [pc, #224]	; (8000c64 <MX_FREERTOS_Init+0x1f8>)
 8000b84:	2100      	movs	r1, #0
 8000b86:	4838      	ldr	r0, [pc, #224]	; (8000c68 <MX_FREERTOS_Init+0x1fc>)
 8000b88:	f007 ffc6 	bl	8008b18 <osThreadNew>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a37      	ldr	r2, [pc, #220]	; (8000c6c <MX_FREERTOS_Init+0x200>)
 8000b90:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	0800d098 	.word	0x0800d098
 8000b9c:	0800157d 	.word	0x0800157d
 8000ba0:	20000160 	.word	0x20000160
 8000ba4:	0800ce34 	.word	0x0800ce34
 8000ba8:	08000c71 	.word	0x08000c71
 8000bac:	2000011c 	.word	0x2000011c
 8000bb0:	0800ce58 	.word	0x0800ce58
 8000bb4:	08000d8d 	.word	0x08000d8d
 8000bb8:	20000120 	.word	0x20000120
 8000bbc:	0800ce7c 	.word	0x0800ce7c
 8000bc0:	08000ea9 	.word	0x08000ea9
 8000bc4:	20000124 	.word	0x20000124
 8000bc8:	0800cea0 	.word	0x0800cea0
 8000bcc:	08000f2d 	.word	0x08000f2d
 8000bd0:	20000128 	.word	0x20000128
 8000bd4:	0800cec4 	.word	0x0800cec4
 8000bd8:	08000f69 	.word	0x08000f69
 8000bdc:	2000012c 	.word	0x2000012c
 8000be0:	0800cee8 	.word	0x0800cee8
 8000be4:	080011a5 	.word	0x080011a5
 8000be8:	20000130 	.word	0x20000130
 8000bec:	0800cf0c 	.word	0x0800cf0c
 8000bf0:	080011f9 	.word	0x080011f9
 8000bf4:	20000134 	.word	0x20000134
 8000bf8:	0800cf30 	.word	0x0800cf30
 8000bfc:	0800124d 	.word	0x0800124d
 8000c00:	20000138 	.word	0x20000138
 8000c04:	0800cf54 	.word	0x0800cf54
 8000c08:	08001281 	.word	0x08001281
 8000c0c:	2000013c 	.word	0x2000013c
 8000c10:	0800cf78 	.word	0x0800cf78
 8000c14:	080012b5 	.word	0x080012b5
 8000c18:	20000140 	.word	0x20000140
 8000c1c:	0800cf9c 	.word	0x0800cf9c
 8000c20:	08001339 	.word	0x08001339
 8000c24:	20000144 	.word	0x20000144
 8000c28:	0800cfc0 	.word	0x0800cfc0
 8000c2c:	080013cd 	.word	0x080013cd
 8000c30:	20000148 	.word	0x20000148
 8000c34:	0800cfe4 	.word	0x0800cfe4
 8000c38:	08001425 	.word	0x08001425
 8000c3c:	2000014c 	.word	0x2000014c
 8000c40:	0800d008 	.word	0x0800d008
 8000c44:	08001479 	.word	0x08001479
 8000c48:	20000150 	.word	0x20000150
 8000c4c:	0800d02c 	.word	0x0800d02c
 8000c50:	080014b5 	.word	0x080014b5
 8000c54:	20000154 	.word	0x20000154
 8000c58:	0800d050 	.word	0x0800d050
 8000c5c:	080014e5 	.word	0x080014e5
 8000c60:	20000158 	.word	0x20000158
 8000c64:	0800d074 	.word	0x0800d074
 8000c68:	08001521 	.word	0x08001521
 8000c6c:	2000015c 	.word	0x2000015c

08000c70 <StartOLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
	// Prepare bodyVersion string
	strcat(bodyVersion, versionName);
 8000c78:	493b      	ldr	r1, [pc, #236]	; (8000d68 <StartOLEDTask+0xf8>)
 8000c7a:	483c      	ldr	r0, [pc, #240]	; (8000d6c <StartOLEDTask+0xfc>)
 8000c7c:	f00b f903 	bl	800be86 <strcat>

	// Initiate display
	ssd1306_Init();
 8000c80:	f001 f860 	bl	8001d44 <ssd1306_Init>
	uint8_t y = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	73fb      	strb	r3, [r7, #15]
	ssd1306_Fill(Black);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f001 f8c5 	bl	8001e18 <ssd1306_Fill>

	// Set header
	ssd1306_SetCursor(2, y);
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	4619      	mov	r1, r3
 8000c92:	2002      	movs	r0, #2
 8000c94:	f001 fa02 	bl	800209c <ssd1306_SetCursor>
	ssd1306_WriteString(headerBootingUp, Font_7x10, White);
 8000c98:	4a35      	ldr	r2, [pc, #212]	; (8000d70 <StartOLEDTask+0x100>)
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	ca06      	ldmia	r2, {r1, r2}
 8000c9e:	4835      	ldr	r0, [pc, #212]	; (8000d74 <StartOLEDTask+0x104>)
 8000ca0:	f001 f9d6 	bl	8002050 <ssd1306_WriteString>
	y += 30;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	331e      	adds	r3, #30
 8000ca8:	73fb      	strb	r3, [r7, #15]

	// Set body
	ssd1306_SetCursor(2, y);
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	4619      	mov	r1, r3
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f001 f9f4 	bl	800209c <ssd1306_SetCursor>
	ssd1306_WriteString(bodyVersion, Font_11x18, White);
 8000cb4:	4a30      	ldr	r2, [pc, #192]	; (8000d78 <StartOLEDTask+0x108>)
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	ca06      	ldmia	r2, {r1, r2}
 8000cba:	482c      	ldr	r0, [pc, #176]	; (8000d6c <StartOLEDTask+0xfc>)
 8000cbc:	f001 f9c8 	bl	8002050 <ssd1306_WriteString>
	y += 36;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	3324      	adds	r3, #36	; 0x24
 8000cc4:	73fb      	strb	r3, [r7, #15]

	// Show content
	ssd1306_UpdateScreen();
 8000cc6:	f001 f8bf 	bl	8001e48 <ssd1306_UpdateScreen>
	y = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	73fb      	strb	r3, [r7, #15]

	// Delay
	osDelay(STARTUP_DURATION);
 8000cce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cd2:	f007 ffc7 	bl	8008c64 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  // Clear screen
	  ssd1306_Fill(Black);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f001 f89e 	bl	8001e18 <ssd1306_Fill>

	  if(isConnected) {
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <StartOLEDTask+0x10c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d01c      	beq.n	8000d20 <StartOLEDTask+0xb0>
		  // Set header
		  ssd1306_SetCursor(2, y);
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	2002      	movs	r0, #2
 8000cec:	f001 f9d6 	bl	800209c <ssd1306_SetCursor>
		  ssd1306_WriteString(headerConnected, Font_7x10, White);
 8000cf0:	4a1f      	ldr	r2, [pc, #124]	; (8000d70 <StartOLEDTask+0x100>)
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	ca06      	ldmia	r2, {r1, r2}
 8000cf6:	4822      	ldr	r0, [pc, #136]	; (8000d80 <StartOLEDTask+0x110>)
 8000cf8:	f001 f9aa 	bl	8002050 <ssd1306_WriteString>
		  y += 30;
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	331e      	adds	r3, #30
 8000d00:	73fb      	strb	r3, [r7, #15]

		  // Set body
		  ssd1306_SetCursor(2, y);
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	4619      	mov	r1, r3
 8000d06:	2002      	movs	r0, #2
 8000d08:	f001 f9c8 	bl	800209c <ssd1306_SetCursor>
		  ssd1306_WriteString(bodyLogotype, Font_11x18, White);
 8000d0c:	4a1a      	ldr	r2, [pc, #104]	; (8000d78 <StartOLEDTask+0x108>)
 8000d0e:	2301      	movs	r3, #1
 8000d10:	ca06      	ldmia	r2, {r1, r2}
 8000d12:	481c      	ldr	r0, [pc, #112]	; (8000d84 <StartOLEDTask+0x114>)
 8000d14:	f001 f99c 	bl	8002050 <ssd1306_WriteString>
		  y += 36;
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	3324      	adds	r3, #36	; 0x24
 8000d1c:	73fb      	strb	r3, [r7, #15]
 8000d1e:	e01b      	b.n	8000d58 <StartOLEDTask+0xe8>
	  } else {
		  // Set header
		  ssd1306_SetCursor(2, y);
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	4619      	mov	r1, r3
 8000d24:	2002      	movs	r0, #2
 8000d26:	f001 f9b9 	bl	800209c <ssd1306_SetCursor>
		  ssd1306_WriteString(headerDisconnected, Font_7x10, White);
 8000d2a:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <StartOLEDTask+0x100>)
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	ca06      	ldmia	r2, {r1, r2}
 8000d30:	4815      	ldr	r0, [pc, #84]	; (8000d88 <StartOLEDTask+0x118>)
 8000d32:	f001 f98d 	bl	8002050 <ssd1306_WriteString>
		  y += 30;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	331e      	adds	r3, #30
 8000d3a:	73fb      	strb	r3, [r7, #15]

		  // Set body
		  ssd1306_SetCursor(2, y);
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	2002      	movs	r0, #2
 8000d42:	f001 f9ab 	bl	800209c <ssd1306_SetCursor>
		  ssd1306_WriteString(bodyLogotype, Font_11x18, White);
 8000d46:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <StartOLEDTask+0x108>)
 8000d48:	2301      	movs	r3, #1
 8000d4a:	ca06      	ldmia	r2, {r1, r2}
 8000d4c:	480d      	ldr	r0, [pc, #52]	; (8000d84 <StartOLEDTask+0x114>)
 8000d4e:	f001 f97f 	bl	8002050 <ssd1306_WriteString>
		  y += 36;
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	3324      	adds	r3, #36	; 0x24
 8000d56:	73fb      	strb	r3, [r7, #15]
	  }

	  // Show content
	  ssd1306_UpdateScreen();
 8000d58:	f001 f876 	bl	8001e48 <ssd1306_UpdateScreen>
	  y = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]

	  vTaskSuspend(NULL);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f009 f86f 	bl	8009e44 <vTaskSuspend>
	  ssd1306_Fill(Black);
 8000d66:	e7b6      	b.n	8000cd6 <StartOLEDTask+0x66>
 8000d68:	0800ce30 	.word	0x0800ce30
 8000d6c:	2000002c 	.word	0x2000002c
 8000d70:	20000044 	.word	0x20000044
 8000d74:	20000000 	.word	0x20000000
 8000d78:	2000004c 	.word	0x2000004c
 8000d7c:	200000dc 	.word	0x200000dc
 8000d80:	20000020 	.word	0x20000020
 8000d84:	20000038 	.word	0x20000038
 8000d88:	20000010 	.word	0x20000010

08000d8c <StartDispatcherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDispatcherTask */
void StartDispatcherTask(void *argument)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDispatcherTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000d94:	2000      	movs	r0, #0
 8000d96:	f009 f855 	bl	8009e44 <vTaskSuspend>

	  switch(RxBuffer[0]) {
 8000d9a:	4b36      	ldr	r3, [pc, #216]	; (8000e74 <StartDispatcherTask+0xe8>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	3b01      	subs	r3, #1
 8000da2:	2b0d      	cmp	r3, #13
 8000da4:	d860      	bhi.n	8000e68 <StartDispatcherTask+0xdc>
 8000da6:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <StartDispatcherTask+0x20>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000de5 	.word	0x08000de5
 8000db0:	08000df1 	.word	0x08000df1
 8000db4:	08000dfd 	.word	0x08000dfd
 8000db8:	08000e09 	.word	0x08000e09
 8000dbc:	08000e15 	.word	0x08000e15
 8000dc0:	08000e21 	.word	0x08000e21
 8000dc4:	08000e2d 	.word	0x08000e2d
 8000dc8:	08000e69 	.word	0x08000e69
 8000dcc:	08000e69 	.word	0x08000e69
 8000dd0:	08000e69 	.word	0x08000e69
 8000dd4:	08000e39 	.word	0x08000e39
 8000dd8:	08000e45 	.word	0x08000e45
 8000ddc:	08000e51 	.word	0x08000e51
 8000de0:	08000e5d 	.word	0x08000e5d
		case 0x01:		// Stop vehicle.
			vTaskResume(StopTaskHandle);
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <StartDispatcherTask+0xec>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f009 f8d7 	bl	8009f9c <vTaskResume>
			break;
 8000dee:	e040      	b.n	8000e72 <StartDispatcherTask+0xe6>
		case 0x02:		// Toggle driving lights.
			vTaskResume(DrivingLightsTaHandle);
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <StartDispatcherTask+0xf0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f009 f8d1 	bl	8009f9c <vTaskResume>
			break;
 8000dfa:	e03a      	b.n	8000e72 <StartDispatcherTask+0xe6>
		case 0x03:		// Toggle RGB stripe.
			vTaskResume(LEDStripesTaskHandle);
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <StartDispatcherTask+0xf4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f009 f8cb 	bl	8009f9c <vTaskResume>
			break;
 8000e06:	e034      	b.n	8000e72 <StartDispatcherTask+0xe6>
		case 0x04:		// Turn left blinkers on.
			vTaskResume(LeftBlinkersTasHandle);
 8000e08:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <StartDispatcherTask+0xf8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f009 f8c5 	bl	8009f9c <vTaskResume>
			break;
 8000e12:	e02e      	b.n	8000e72 <StartDispatcherTask+0xe6>
		case 0x05:		// Turn right blinkers on.
			vTaskResume(RightBlinkersTaHandle);
 8000e14:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <StartDispatcherTask+0xfc>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f009 f8bf 	bl	8009f9c <vTaskResume>
			break;
 8000e1e:	e028      	b.n	8000e72 <StartDispatcherTask+0xe6>
		case 0x06:		// Toggle parking to the left.
			vTaskResume(ParkLeftTaskHandle);
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <StartDispatcherTask+0x100>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f009 f8b9 	bl	8009f9c <vTaskResume>
			break;
 8000e2a:	e022      	b.n	8000e72 <StartDispatcherTask+0xe6>
		case 0x07:		// Toggle parking to the right.
			vTaskResume(ParkRightTaskHandle);
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <StartDispatcherTask+0x104>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f009 f8b3 	bl	8009f9c <vTaskResume>
			break;
 8000e36:	e01c      	b.n	8000e72 <StartDispatcherTask+0xe6>
		case 0x0B:		// Accelerate.
			vTaskResume(AccelerateTaskHandle);
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <StartDispatcherTask+0x108>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f009 f8ad 	bl	8009f9c <vTaskResume>
			break;
 8000e42:	e016      	b.n	8000e72 <StartDispatcherTask+0xe6>
		case 0x0C:		// Decelerate.
			vTaskResume(DecelerateTaskHandle);
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <StartDispatcherTask+0x10c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f009 f8a7 	bl	8009f9c <vTaskResume>
			break;
 8000e4e:	e010      	b.n	8000e72 <StartDispatcherTask+0xe6>
		case 0x0D:		// Turn left.
			vTaskResume(TurnLeftTaskHandle);
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <StartDispatcherTask+0x110>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f009 f8a1 	bl	8009f9c <vTaskResume>
			break;
 8000e5a:	e00a      	b.n	8000e72 <StartDispatcherTask+0xe6>
		case 0x0E:		// Turn right.
			vTaskResume(TurnRightTaskHandle);
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <StartDispatcherTask+0x114>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f009 f89b 	bl	8009f9c <vTaskResume>
			break;
 8000e66:	e004      	b.n	8000e72 <StartDispatcherTask+0xe6>
		default:		// Acknowledge connection.
			vTaskResume(ConnectionTaskHandle);
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <StartDispatcherTask+0x118>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f009 f895 	bl	8009f9c <vTaskResume>
	  vTaskSuspend(NULL);
 8000e72:	e78f      	b.n	8000d94 <StartDispatcherTask+0x8>
 8000e74:	20000100 	.word	0x20000100
 8000e78:	20000124 	.word	0x20000124
 8000e7c:	20000128 	.word	0x20000128
 8000e80:	2000012c 	.word	0x2000012c
 8000e84:	20000130 	.word	0x20000130
 8000e88:	20000134 	.word	0x20000134
 8000e8c:	20000138 	.word	0x20000138
 8000e90:	2000013c 	.word	0x2000013c
 8000e94:	20000140 	.word	0x20000140
 8000e98:	20000144 	.word	0x20000144
 8000e9c:	20000148 	.word	0x20000148
 8000ea0:	2000014c 	.word	0x2000014c
 8000ea4:	20000150 	.word	0x20000150

08000ea8 <StartStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStopTask */
void StartStopTask(void *argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f008 ffc7 	bl	8009e44 <vTaskSuspend>

	  // Stop BLDC motor
	  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <StartStopTask+0x68>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a16      	ldr	r2, [pc, #88]	; (8000f14 <StartStopTask+0x6c>)
 8000ebc:	6013      	str	r3, [r2, #0]
	  sliderAccelerateDecelerateCurrentValue = 0;
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <StartStopTask+0x68>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
	  setBLDCMotorSpeed();
 8000ec4:	f7ff fbcc 	bl	8000660 <setBLDCMotorSpeed>

	  // Set LED stripes
	  isStopped = true;
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <StartStopTask+0x70>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
	  stripesEffect = STOP;
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <StartStopTask+0x74>)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	701a      	strb	r2, [r3, #0]
	  ommitToggle = true;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <StartStopTask+0x78>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
	  vTaskResume(LEDStripesTaskHandle);
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <StartStopTask+0x7c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f009 f85c 	bl	8009f9c <vTaskResume>

	  // Home stepper motor
	  moveStepperMotorUntil(0);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff fc6d 	bl	80007c4 <moveStepperMotorUntil>

	  // Turn off all the lights
	  HAL_GPIO_WritePin(DrivingLights_GPIO_Port, DrivingLights_Pin, RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <StartStopTask+0x80>)
 8000ef2:	f002 ff4f 	bl	8003d94 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BrakeLights_GPIO_Port, BrakeLights_Pin, RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efc:	480a      	ldr	r0, [pc, #40]	; (8000f28 <StartStopTask+0x80>)
 8000efe:	f002 ff49 	bl	8003d94 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <StartStopTask+0x80>)
 8000f0a:	f002 ff43 	bl	8003d94 <HAL_GPIO_WritePin>
	  vTaskSuspend(NULL);
 8000f0e:	e7cf      	b.n	8000eb0 <StartStopTask+0x8>
 8000f10:	200000e8 	.word	0x200000e8
 8000f14:	200000e4 	.word	0x200000e4
 8000f18:	200000e0 	.word	0x200000e0
 8000f1c:	200000dd 	.word	0x200000dd
 8000f20:	200000df 	.word	0x200000df
 8000f24:	2000012c 	.word	0x2000012c
 8000f28:	40020800 	.word	0x40020800

08000f2c <StartDrivingLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDrivingLightsTask */
void StartDrivingLightsTask(void *argument)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDrivingLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f008 ff85 	bl	8009e44 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <StartDrivingLightsTask+0x30>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d004      	beq.n	8000f4e <StartDrivingLightsTask+0x22>
		  vTaskResume(ResumeFromStopTHandle);
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <StartDrivingLightsTask+0x34>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f009 f827 	bl	8009f9c <vTaskResume>
	  }

	  // Driving lights effect
	  HAL_GPIO_TogglePin(DrivingLights_GPIO_Port, DrivingLights_Pin);
 8000f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f52:	4804      	ldr	r0, [pc, #16]	; (8000f64 <StartDrivingLightsTask+0x38>)
 8000f54:	f002 ff37 	bl	8003dc6 <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 8000f58:	e7ec      	b.n	8000f34 <StartDrivingLightsTask+0x8>
 8000f5a:	bf00      	nop
 8000f5c:	200000e0 	.word	0x200000e0
 8000f60:	2000015c 	.word	0x2000015c
 8000f64:	40020800 	.word	0x40020800

08000f68 <StartLEDStripesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDStripesTask */
void StartLEDStripesTask(void *argument)
{
 8000f68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f6c:	b096      	sub	sp, #88	; 0x58
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDStripesTask */
	// Set StripesEffect enum
	stripesEffect = NONE;
 8000f72:	4b86      	ldr	r3, [pc, #536]	; (800118c <StartLEDStripesTask+0x224>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]

	// Transmit 4 empty bytes to ensure SDO is low
	uint8_t d[4] = {0};
 8000f78:	2300      	movs	r3, #0
 8000f7a:	647b      	str	r3, [r7, #68]	; 0x44
	HAL_SPI_Transmit(&hspi1, d, 4, 100);
 8000f7c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000f80:	2364      	movs	r3, #100	; 0x64
 8000f82:	2204      	movs	r2, #4
 8000f84:	4882      	ldr	r0, [pc, #520]	; (8001190 <StartLEDStripesTask+0x228>)
 8000f86:	f004 fde4 	bl	8005b52 <HAL_SPI_Transmit>

	// Create handle and configure
	ws2812b_handle_t hws2812b;

	hws2812b.config.packing = PACKING; // See macro above
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hws2812b.config.pulse_len_1 = WS2812B_PULSE_LEN_6b;
 8000f90:	233f      	movs	r3, #63	; 0x3f
 8000f92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hws2812b.config.pulse_len_0 = WS2812B_PULSE_LEN_2b;
 8000f96:	2303      	movs	r3, #3
 8000f98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hws2812b.config.first_bit_0 = WS2812B_FIRST_BIT_0_ENABLED;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hws2812b.config.prefix_len = PREFIX_LEN; // See macro above
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	hws2812b.config.suffix_len = SUFFIX_LEN; // See macro above
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
	hws2812b.config.spi_bit_order = WS2812B_MSB_FIRST;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	// Create array of LEDs & set LED color
	ws2812b_led_t leds[LED_COUNT];
	struct DesiredStripesColor desiredStripesColor;
	setLEDStripesEffect(stripesEffect, &desiredStripesColor);
 8000fb0:	4b76      	ldr	r3, [pc, #472]	; (800118c <StartLEDStripesTask+0x224>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	f107 0208 	add.w	r2, r7, #8
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fb0d 	bl	80005dc <setLEDStripesEffect>
	for(int i = 0; i < LED_COUNT; i ++) {
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	657b      	str	r3, [r7, #84]	; 0x54
 8000fc6:	e020      	b.n	800100a <StartLEDStripesTask+0xa2>
	  leds[i].red = desiredStripesColor.red;
 8000fc8:	7a39      	ldrb	r1, [r7, #8]
 8000fca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000fcc:	4613      	mov	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3358      	adds	r3, #88	; 0x58
 8000fd4:	443b      	add	r3, r7
 8000fd6:	3b4c      	subs	r3, #76	; 0x4c
 8000fd8:	460a      	mov	r2, r1
 8000fda:	701a      	strb	r2, [r3, #0]
	  leds[i].green = desiredStripesColor.green;
 8000fdc:	7a79      	ldrb	r1, [r7, #9]
 8000fde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3358      	adds	r3, #88	; 0x58
 8000fe8:	443b      	add	r3, r7
 8000fea:	3b4b      	subs	r3, #75	; 0x4b
 8000fec:	460a      	mov	r2, r1
 8000fee:	701a      	strb	r2, [r3, #0]
	  leds[i].blue = desiredStripesColor.blue;
 8000ff0:	7ab9      	ldrb	r1, [r7, #10]
 8000ff2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	3358      	adds	r3, #88	; 0x58
 8000ffc:	443b      	add	r3, r7
 8000ffe:	3b4a      	subs	r3, #74	; 0x4a
 8001000:	460a      	mov	r2, r1
 8001002:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < LED_COUNT; i ++) {
 8001004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001006:	3301      	adds	r3, #1
 8001008:	657b      	str	r3, [r7, #84]	; 0x54
 800100a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800100c:	2b06      	cmp	r3, #6
 800100e:	dddb      	ble.n	8000fc8 <StartLEDStripesTask+0x60>
	}

	// Add LEDs and count to handle
	hws2812b.led_count = LED_COUNT;
 8001010:	2307      	movs	r3, #7
 8001012:	637b      	str	r3, [r7, #52]	; 0x34
	hws2812b.leds = leds;
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	63bb      	str	r3, [r7, #56]	; 0x38

	// Initialize the driver
	if(ws2812b_init(&hws2812b)) {
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	4618      	mov	r0, r3
 8001020:	f001 fb66 	bl	80026f0 <ws2812b_init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d006      	beq.n	8001038 <StartLEDStripesTask+0xd0>
	  printf("Invalid ws2812b config! (%s)\r\n",ws2812b_error_msg);
 800102a:	4b5a      	ldr	r3, [pc, #360]	; (8001194 <StartLEDStripesTask+0x22c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4619      	mov	r1, r3
 8001030:	4859      	ldr	r0, [pc, #356]	; (8001198 <StartLEDStripesTask+0x230>)
 8001032:	f00a fecb 	bl	800bdcc <iprintf>
	  while(1) {;}
 8001036:	e7fe      	b.n	8001036 <StartLEDStripesTask+0xce>
	}

	// Create buffer
	uint8_t dma_buf[ws2812b_required_buffer_len(&hws2812b)];
 8001038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fcf3 	bl	8002a28 <ws2812b_required_buffer_len>
 8001042:	4601      	mov	r1, r0
 8001044:	460b      	mov	r3, r1
 8001046:	3b01      	subs	r3, #1
 8001048:	64fb      	str	r3, [r7, #76]	; 0x4c
 800104a:	2300      	movs	r3, #0
 800104c:	4688      	mov	r8, r1
 800104e:	4699      	mov	r9, r3
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800105c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001060:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001064:	2300      	movs	r3, #0
 8001066:	460c      	mov	r4, r1
 8001068:	461d      	mov	r5, r3
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	00eb      	lsls	r3, r5, #3
 8001074:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001078:	00e2      	lsls	r2, r4, #3
 800107a:	1dcb      	adds	r3, r1, #7
 800107c:	08db      	lsrs	r3, r3, #3
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	ebad 0d03 	sub.w	sp, sp, r3
 8001084:	466b      	mov	r3, sp
 8001086:	3300      	adds	r3, #0
 8001088:	64bb      	str	r3, [r7, #72]	; 0x48

	// Fill buffer
	ws2812b_fill_buffer(&hws2812b, dma_buf);
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001090:	4618      	mov	r0, r3
 8001092:	f001 fce4 	bl	8002a5e <ws2812b_fill_buffer>

	// Transmit
	HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 8001096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109a:	4618      	mov	r0, r3
 800109c:	f001 fcc4 	bl	8002a28 <ws2812b_required_buffer_len>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80010a8:	4839      	ldr	r0, [pc, #228]	; (8001190 <StartLEDStripesTask+0x228>)
 80010aa:	f004 fec1 	bl	8005e30 <HAL_SPI_Transmit_DMA>
	HAL_Delay(10); // 10ms delay
 80010ae:	200a      	movs	r0, #10
 80010b0:	f001 fe5e 	bl	8002d70 <HAL_Delay>

  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f008 fec5 	bl	8009e44 <vTaskSuspend>

	  // LED stripes effect
	  if(ommitToggle == false) {
 80010ba:	4b38      	ldr	r3, [pc, #224]	; (800119c <StartLEDStripesTask+0x234>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f083 0301 	eor.w	r3, r3, #1
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d014      	beq.n	80010f4 <StartLEDStripesTask+0x18c>
		  if(isOn == false) {
 80010ca:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <StartLEDStripesTask+0x238>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	f083 0301 	eor.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <StartLEDStripesTask+0x180>
			  isOn = true;
 80010da:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <StartLEDStripesTask+0x238>)
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
			  stripesEffect = DEFAULT;
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <StartLEDStripesTask+0x224>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e005      	b.n	80010f4 <StartLEDStripesTask+0x18c>
		  } else {
			  isOn = false;
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <StartLEDStripesTask+0x238>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
			  stripesEffect = NONE;
 80010ee:	4b27      	ldr	r3, [pc, #156]	; (800118c <StartLEDStripesTask+0x224>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  ommitToggle = false;
 80010f4:	4b29      	ldr	r3, [pc, #164]	; (800119c <StartLEDStripesTask+0x234>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]

	  // Update LED color
	  setLEDStripesEffect(stripesEffect, &desiredStripesColor);
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <StartLEDStripesTask+0x224>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f107 0208 	add.w	r2, r7, #8
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa68 	bl	80005dc <setLEDStripesEffect>
	  for(int i = 0; i < LED_COUNT; i ++) {
 800110c:	2300      	movs	r3, #0
 800110e:	653b      	str	r3, [r7, #80]	; 0x50
 8001110:	e020      	b.n	8001154 <StartLEDStripesTask+0x1ec>
		  leds[i].red = desiredStripesColor.red;
 8001112:	7a39      	ldrb	r1, [r7, #8]
 8001114:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	3358      	adds	r3, #88	; 0x58
 800111e:	443b      	add	r3, r7
 8001120:	3b4c      	subs	r3, #76	; 0x4c
 8001122:	460a      	mov	r2, r1
 8001124:	701a      	strb	r2, [r3, #0]
		  leds[i].green = desiredStripesColor.green;
 8001126:	7a79      	ldrb	r1, [r7, #9]
 8001128:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	3358      	adds	r3, #88	; 0x58
 8001132:	443b      	add	r3, r7
 8001134:	3b4b      	subs	r3, #75	; 0x4b
 8001136:	460a      	mov	r2, r1
 8001138:	701a      	strb	r2, [r3, #0]
		  leds[i].blue = desiredStripesColor.blue;
 800113a:	7ab9      	ldrb	r1, [r7, #10]
 800113c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800113e:	4613      	mov	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4413      	add	r3, r2
 8001144:	3358      	adds	r3, #88	; 0x58
 8001146:	443b      	add	r3, r7
 8001148:	3b4a      	subs	r3, #74	; 0x4a
 800114a:	460a      	mov	r2, r1
 800114c:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < LED_COUNT; i ++) {
 800114e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001150:	3301      	adds	r3, #1
 8001152:	653b      	str	r3, [r7, #80]	; 0x50
 8001154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001156:	2b06      	cmp	r3, #6
 8001158:	dddb      	ble.n	8001112 <StartLEDStripesTask+0x1aa>
	  }

	  // Add LEDs to handle
	  hws2812b.leds = leds;
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	63bb      	str	r3, [r7, #56]	; 0x38

	  // Fill buffer
	  ws2812b_fill_buffer(&hws2812b, dma_buf);
 8001160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001164:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001166:	4618      	mov	r0, r3
 8001168:	f001 fc79 	bl	8002a5e <ws2812b_fill_buffer>

	  // Transmit
	  HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 800116c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001170:	4618      	mov	r0, r3
 8001172:	f001 fc59 	bl	8002a28 <ws2812b_required_buffer_len>
 8001176:	4603      	mov	r3, r0
 8001178:	b29b      	uxth	r3, r3
 800117a:	461a      	mov	r2, r3
 800117c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800117e:	4804      	ldr	r0, [pc, #16]	; (8001190 <StartLEDStripesTask+0x228>)
 8001180:	f004 fe56 	bl	8005e30 <HAL_SPI_Transmit_DMA>
	  HAL_Delay(10); // 10ms delay
 8001184:	200a      	movs	r0, #10
 8001186:	f001 fdf3 	bl	8002d70 <HAL_Delay>
	  vTaskSuspend(NULL);
 800118a:	e793      	b.n	80010b4 <StartLEDStripesTask+0x14c>
 800118c:	200000dd 	.word	0x200000dd
 8001190:	200001b8 	.word	0x200001b8
 8001194:	200007a8 	.word	0x200007a8
 8001198:	0800cccc 	.word	0x0800cccc
 800119c:	200000df 	.word	0x200000df
 80011a0:	200000de 	.word	0x200000de

080011a4 <StartLeftBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeftBlinkersTask */
void StartLeftBlinkersTask(void *argument)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLeftBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f008 fe49 	bl	8009e44 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <StartLeftBlinkersTask+0x48>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <StartLeftBlinkersTask+0x22>
		  vTaskResume(ResumeFromStopTHandle);
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <StartLeftBlinkersTask+0x4c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f008 feeb 	bl	8009f9c <vTaskResume>
	  }

	  // Left blinkers effect
	  for(int i = 0; i < 6; i ++) {
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	e00b      	b.n	80011e4 <StartLeftBlinkersTask+0x40>
		  HAL_GPIO_TogglePin(LeftBlinkers_GPIO_Port, LeftBlinkers_Pin);
 80011cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d0:	4808      	ldr	r0, [pc, #32]	; (80011f4 <StartLeftBlinkersTask+0x50>)
 80011d2:	f002 fdf8 	bl	8003dc6 <HAL_GPIO_TogglePin>
		  osDelay(BLINKERS_DURATION);
 80011d6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80011da:	f007 fd43 	bl	8008c64 <osDelay>
	  for(int i = 0; i < 6; i ++) {
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	3301      	adds	r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	ddf0      	ble.n	80011cc <StartLeftBlinkersTask+0x28>
	  vTaskSuspend(NULL);
 80011ea:	e7df      	b.n	80011ac <StartLeftBlinkersTask+0x8>
 80011ec:	200000e0 	.word	0x200000e0
 80011f0:	2000015c 	.word	0x2000015c
 80011f4:	40020800 	.word	0x40020800

080011f8 <StartRightBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRightBlinkersTask */
void StartRightBlinkersTask(void *argument)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRightBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001200:	2000      	movs	r0, #0
 8001202:	f008 fe1f 	bl	8009e44 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <StartRightBlinkersTask+0x48>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <StartRightBlinkersTask+0x22>
		  vTaskResume(ResumeFromStopTHandle);
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <StartRightBlinkersTask+0x4c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f008 fec1 	bl	8009f9c <vTaskResume>
	  }

	  // Right blinkers effect
	  for(int i = 0; i < 6; i ++) {
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	e00b      	b.n	8001238 <StartRightBlinkersTask+0x40>
		  HAL_GPIO_TogglePin(RightBlinkers_GPIO_Port, RightBlinkers_Pin);
 8001220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001224:	4808      	ldr	r0, [pc, #32]	; (8001248 <StartRightBlinkersTask+0x50>)
 8001226:	f002 fdce 	bl	8003dc6 <HAL_GPIO_TogglePin>
		  osDelay(BLINKERS_DURATION);
 800122a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800122e:	f007 fd19 	bl	8008c64 <osDelay>
	  for(int i = 0; i < 6; i ++) {
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	3301      	adds	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b05      	cmp	r3, #5
 800123c:	ddf0      	ble.n	8001220 <StartRightBlinkersTask+0x28>
	  vTaskSuspend(NULL);
 800123e:	e7df      	b.n	8001200 <StartRightBlinkersTask+0x8>
 8001240:	200000e0 	.word	0x200000e0
 8001244:	2000015c 	.word	0x2000015c
 8001248:	40020800 	.word	0x40020800

0800124c <StartParkLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkLeftTask */
void StartParkLeftTask(void *argument)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001254:	2000      	movs	r0, #0
 8001256:	f008 fdf5 	bl	8009e44 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <StartParkLeftTask+0x2c>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d004      	beq.n	800126e <StartParkLeftTask+0x22>
		  vTaskResume(ResumeFromStopTHandle);
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <StartParkLeftTask+0x30>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f008 fe97 	bl	8009f9c <vTaskResume>
	  }

	  // Park to the left
	  park(LEFT);
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff faea 	bl	8000848 <park>
	  vTaskSuspend(NULL);
 8001274:	e7ee      	b.n	8001254 <StartParkLeftTask+0x8>
 8001276:	bf00      	nop
 8001278:	200000e0 	.word	0x200000e0
 800127c:	2000015c 	.word	0x2000015c

08001280 <StartParkRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkRightTask */
void StartParkRightTask(void *argument)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001288:	2000      	movs	r0, #0
 800128a:	f008 fddb 	bl	8009e44 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <StartParkRightTask+0x2c>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d004      	beq.n	80012a2 <StartParkRightTask+0x22>
		  vTaskResume(ResumeFromStopTHandle);
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <StartParkRightTask+0x30>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f008 fe7d 	bl	8009f9c <vTaskResume>
	  }

	  // Park to the right
	  park(RIGHT);
 80012a2:	2001      	movs	r0, #1
 80012a4:	f7ff fad0 	bl	8000848 <park>
	  vTaskSuspend(NULL);
 80012a8:	e7ee      	b.n	8001288 <StartParkRightTask+0x8>
 80012aa:	bf00      	nop
 80012ac:	200000e0 	.word	0x200000e0
 80012b0:	2000015c 	.word	0x2000015c

080012b4 <StartAccelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccelerateTask */
void StartAccelerateTask(void *argument)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccelerateTask */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0.0);
 80012bc:	2300      	movs	r3, #0
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	4816      	ldr	r0, [pc, #88]	; (800131c <StartAccelerateTask+0x68>)
 80012c4:	f001 ff28 	bl	8003118 <HAL_DAC_SetValue>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f008 fdbb 	bl	8009e44 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <StartAccelerateTask+0x6c>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <StartAccelerateTask+0x2e>
		  vTaskResume(ResumeFromStopTHandle);
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <StartAccelerateTask+0x70>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f008 fe5d 	bl	8009f9c <vTaskResume>
	  }

	  // Accelerate if possible
	  if(sliderAccelerateDecelerateCurrentValue < 4) {
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <StartAccelerateTask+0x74>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	dc08      	bgt.n	80012fc <StartAccelerateTask+0x48>
		  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <StartAccelerateTask+0x74>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a0f      	ldr	r2, [pc, #60]	; (800132c <StartAccelerateTask+0x78>)
 80012f0:	6013      	str	r3, [r2, #0]
		  sliderAccelerateDecelerateCurrentValue ++;
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <StartAccelerateTask+0x74>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3301      	adds	r3, #1
 80012f8:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <StartAccelerateTask+0x74>)
 80012fa:	6013      	str	r3, [r2, #0]
	  }
	  setBLDCMotorSpeed();
 80012fc:	f7ff f9b0 	bl	8000660 <setBLDCMotorSpeed>

	  // Set withdraw lights appropriately
	  if(sliderAccelerateDecelerateCurrentValue >= 0) {
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <StartAccelerateTask+0x74>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	dbdf      	blt.n	80012c8 <StartAccelerateTask+0x14>
		  isWithdrawing = false;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <StartAccelerateTask+0x7c>)
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
		  vTaskResume(WithdrawLightsTHandle);
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <StartAccelerateTask+0x80>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f008 fe42 	bl	8009f9c <vTaskResume>
	  vTaskSuspend(NULL);
 8001318:	e7d6      	b.n	80012c8 <StartAccelerateTask+0x14>
 800131a:	bf00      	nop
 800131c:	20000108 	.word	0x20000108
 8001320:	200000e0 	.word	0x200000e0
 8001324:	2000015c 	.word	0x2000015c
 8001328:	200000e8 	.word	0x200000e8
 800132c:	200000e4 	.word	0x200000e4
 8001330:	200000ec 	.word	0x200000ec
 8001334:	20000158 	.word	0x20000158

08001338 <StartDecelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDecelerateTask */
void StartDecelerateTask(void *argument)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDecelerateTask */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0.0);
 8001340:	2300      	movs	r3, #0
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	4819      	ldr	r0, [pc, #100]	; (80013ac <StartDecelerateTask+0x74>)
 8001348:	f001 fee6 	bl	8003118 <HAL_DAC_SetValue>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 800134c:	2000      	movs	r0, #0
 800134e:	f008 fd79 	bl	8009e44 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <StartDecelerateTask+0x78>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d004      	beq.n	8001366 <StartDecelerateTask+0x2e>
		  vTaskResume(ResumeFromStopTHandle);
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <StartDecelerateTask+0x7c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f008 fe1b 	bl	8009f9c <vTaskResume>
	  }

	  // Decelerate if possible
	  if(sliderAccelerateDecelerateCurrentValue > -2) {
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <StartDecelerateTask+0x80>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136e:	db08      	blt.n	8001382 <StartDecelerateTask+0x4a>
		  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <StartDecelerateTask+0x80>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a11      	ldr	r2, [pc, #68]	; (80013bc <StartDecelerateTask+0x84>)
 8001376:	6013      	str	r3, [r2, #0]
		  sliderAccelerateDecelerateCurrentValue --;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <StartDecelerateTask+0x80>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3b01      	subs	r3, #1
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <StartDecelerateTask+0x80>)
 8001380:	6013      	str	r3, [r2, #0]
	  }
	  setBLDCMotorSpeed();
 8001382:	f7ff f96d 	bl	8000660 <setBLDCMotorSpeed>

	  // Set withdraw lights appropriately
	  if(sliderAccelerateDecelerateCurrentValue >= 0) {
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <StartDecelerateTask+0x80>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	db05      	blt.n	800139a <StartDecelerateTask+0x62>
		  vTaskResume(BrakeLightsTaskHandle);
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <StartDecelerateTask+0x88>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f008 fe02 	bl	8009f9c <vTaskResume>
 8001398:	e7d8      	b.n	800134c <StartDecelerateTask+0x14>
	  } else {
		  isWithdrawing = true;
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <StartDecelerateTask+0x8c>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
		  vTaskResume(WithdrawLightsTHandle);
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <StartDecelerateTask+0x90>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f008 fdf9 	bl	8009f9c <vTaskResume>
	  vTaskSuspend(NULL);
 80013aa:	e7cf      	b.n	800134c <StartDecelerateTask+0x14>
 80013ac:	20000108 	.word	0x20000108
 80013b0:	200000e0 	.word	0x200000e0
 80013b4:	2000015c 	.word	0x2000015c
 80013b8:	200000e8 	.word	0x200000e8
 80013bc:	200000e4 	.word	0x200000e4
 80013c0:	20000154 	.word	0x20000154
 80013c4:	200000ec 	.word	0x200000ec
 80013c8:	20000158 	.word	0x20000158

080013cc <StartTurnLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnLeftTask */
void StartTurnLeftTask(void *argument)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f008 fd35 	bl	8009e44 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <StartTurnLeftTask+0x48>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <StartTurnLeftTask+0x22>
		  vTaskResume(ResumeFromStopTHandle);
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <StartTurnLeftTask+0x4c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f008 fdd7 	bl	8009f9c <vTaskResume>
	  }

	  // Turn left if possible
	  if(sliderLeftRightCurrentValue > -3) {
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <StartTurnLeftTask+0x50>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f113 0f02 	cmn.w	r3, #2
 80013f6:	dbed      	blt.n	80013d4 <StartTurnLeftTask+0x8>
		  sliderLeftRightPreviousValue = sliderLeftRightCurrentValue;
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <StartTurnLeftTask+0x50>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a08      	ldr	r2, [pc, #32]	; (8001420 <StartTurnLeftTask+0x54>)
 80013fe:	6013      	str	r3, [r2, #0]
		  sliderLeftRightCurrentValue --;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <StartTurnLeftTask+0x50>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	3b01      	subs	r3, #1
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <StartTurnLeftTask+0x50>)
 8001408:	6013      	str	r3, [r2, #0]

		  moveStepperMotor(LEFT);
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff f9b2 	bl	8000774 <moveStepperMotor>
	  vTaskSuspend(NULL);
 8001410:	e7e0      	b.n	80013d4 <StartTurnLeftTask+0x8>
 8001412:	bf00      	nop
 8001414:	200000e0 	.word	0x200000e0
 8001418:	2000015c 	.word	0x2000015c
 800141c:	200000fc 	.word	0x200000fc
 8001420:	200000f8 	.word	0x200000f8

08001424 <StartTurnRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnRightTask */
void StartTurnRightTask(void *argument)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 800142c:	2000      	movs	r0, #0
 800142e:	f008 fd09 	bl	8009e44 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <StartTurnRightTask+0x44>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d004      	beq.n	8001446 <StartTurnRightTask+0x22>
		  vTaskResume(ResumeFromStopTHandle);
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <StartTurnRightTask+0x48>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f008 fdab 	bl	8009f9c <vTaskResume>
	  }

	  // Turn right if possible
	  if(sliderLeftRightCurrentValue < 3) {
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <StartTurnRightTask+0x4c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b02      	cmp	r3, #2
 800144c:	dcee      	bgt.n	800142c <StartTurnRightTask+0x8>
		  sliderLeftRightPreviousValue = sliderLeftRightCurrentValue;
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <StartTurnRightTask+0x4c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <StartTurnRightTask+0x50>)
 8001454:	6013      	str	r3, [r2, #0]
		  sliderLeftRightCurrentValue ++;
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <StartTurnRightTask+0x4c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <StartTurnRightTask+0x4c>)
 800145e:	6013      	str	r3, [r2, #0]

		  moveStepperMotor(RIGHT);
 8001460:	2001      	movs	r0, #1
 8001462:	f7ff f987 	bl	8000774 <moveStepperMotor>
	  vTaskSuspend(NULL);
 8001466:	e7e1      	b.n	800142c <StartTurnRightTask+0x8>
 8001468:	200000e0 	.word	0x200000e0
 800146c:	2000015c 	.word	0x2000015c
 8001470:	200000fc 	.word	0x200000fc
 8001474:	200000f8 	.word	0x200000f8

08001478 <StartConnectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConnectionTask */
void StartConnectionTask(void *argument)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConnectionTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001480:	2000      	movs	r0, #0
 8001482:	f008 fcdf 	bl	8009e44 <vTaskSuspend>

	  // Refresh connection state
	  osTimerStart(ConnectionTaskTimerHandle, (ACKNOWLEDGE_PACKETS_FREQUENCY + TIME_MARGIN));
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <StartConnectionTask+0x30>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f241 517c 	movw	r1, #5500	; 0x157c
 800148e:	4618      	mov	r0, r3
 8001490:	f007 fcb0 	bl	8008df4 <osTimerStart>
	  isConnected = true;
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <StartConnectionTask+0x34>)
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
	  vTaskResume(OLEDTaskHandle);
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <StartConnectionTask+0x38>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f008 fd7c 	bl	8009f9c <vTaskResume>
	  vTaskSuspend(NULL);
 80014a4:	e7ec      	b.n	8001480 <StartConnectionTask+0x8>
 80014a6:	bf00      	nop
 80014a8:	20000160 	.word	0x20000160
 80014ac:	200000dc 	.word	0x200000dc
 80014b0:	2000011c 	.word	0x2000011c

080014b4 <StartBrakeLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBrakeLightsTask */
void StartBrakeLightsTask(void *argument)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBrakeLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80014bc:	2000      	movs	r0, #0
 80014be:	f008 fcc1 	bl	8009e44 <vTaskSuspend>

	  // Brake lights effect
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 80014c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c6:	4806      	ldr	r0, [pc, #24]	; (80014e0 <StartBrakeLightsTask+0x2c>)
 80014c8:	f002 fc7d 	bl	8003dc6 <HAL_GPIO_TogglePin>
	  osDelay(BRAKE_LIGHTS_DURATION);
 80014cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014d0:	f007 fbc8 	bl	8008c64 <osDelay>
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 80014d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d8:	4801      	ldr	r0, [pc, #4]	; (80014e0 <StartBrakeLightsTask+0x2c>)
 80014da:	f002 fc74 	bl	8003dc6 <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 80014de:	e7ed      	b.n	80014bc <StartBrakeLightsTask+0x8>
 80014e0:	40020800 	.word	0x40020800

080014e4 <StartWithdrawLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWithdrawLightsTask */
void StartWithdrawLightsTask(void *argument)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWithdrawLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80014ec:	2000      	movs	r0, #0
 80014ee:	f008 fca9 	bl	8009e44 <vTaskSuspend>

	  // Withdraw lights effect
	  if(isWithdrawing) {
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <StartWithdrawLightsTask+0x34>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <StartWithdrawLightsTask+0x26>
		  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <StartWithdrawLightsTask+0x38>)
 8001504:	f002 fc46 	bl	8003d94 <HAL_GPIO_WritePin>
 8001508:	e7f0      	b.n	80014ec <StartWithdrawLightsTask+0x8>
	  } else {
		  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <StartWithdrawLightsTask+0x38>)
 8001512:	f002 fc3f 	bl	8003d94 <HAL_GPIO_WritePin>
	  vTaskSuspend(NULL);
 8001516:	e7e9      	b.n	80014ec <StartWithdrawLightsTask+0x8>
 8001518:	200000ec 	.word	0x200000ec
 800151c:	40020800 	.word	0x40020800

08001520 <StartResumeFromStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResumeFromStopTask */
void StartResumeFromStopTask(void *argument)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResumeFromStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001528:	2000      	movs	r0, #0
 800152a:	f008 fc8b 	bl	8009e44 <vTaskSuspend>

	  // Turn off LED stripes' stop effect if present
	  if(isStopped) {
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <StartResumeFromStopTask+0x48>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f7      	beq.n	8001528 <StartResumeFromStopTask+0x8>
		  isStopped = false;
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <StartResumeFromStopTask+0x48>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
		  if(isOn) {
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <StartResumeFromStopTask+0x4c>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <StartResumeFromStopTask+0x30>
			  stripesEffect = DEFAULT;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <StartResumeFromStopTask+0x50>)
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	e002      	b.n	8001556 <StartResumeFromStopTask+0x36>
		  } else {
			  stripesEffect = NONE;
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <StartResumeFromStopTask+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
		  }
		  ommitToggle = true;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <StartResumeFromStopTask+0x54>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
		  vTaskResume(LEDStripesTaskHandle);
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <StartResumeFromStopTask+0x58>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f008 fd1b 	bl	8009f9c <vTaskResume>
	  vTaskSuspend(NULL);
 8001566:	e7df      	b.n	8001528 <StartResumeFromStopTask+0x8>
 8001568:	200000e0 	.word	0x200000e0
 800156c:	200000de 	.word	0x200000de
 8001570:	200000dd 	.word	0x200000dd
 8001574:	200000df 	.word	0x200000df
 8001578:	2000012c 	.word	0x2000012c

0800157c <CallbackConnectionTaskTimer>:
  /* USER CODE END StartResumeFromStopTask */
}

/* CallbackConnectionTaskTimer function */
void CallbackConnectionTaskTimer(void *argument)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackConnectionTaskTimer */
	vTaskResume(StopTaskHandle);
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <CallbackConnectionTaskTimer+0x2c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f008 fd07 	bl	8009f9c <vTaskResume>
	isConnected = false;
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <CallbackConnectionTaskTimer+0x30>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
	vTaskResume(OLEDTaskHandle);
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <CallbackConnectionTaskTimer+0x34>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f008 fcff 	bl	8009f9c <vTaskResume>
  /* USER CODE END CallbackConnectionTaskTimer */
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000124 	.word	0x20000124
 80015ac:	200000dc 	.word	0x200000dc
 80015b0:	2000011c 	.word	0x2000011c

080015b4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08c      	sub	sp, #48	; 0x30
 80015b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ca:	4b94      	ldr	r3, [pc, #592]	; (800181c <MX_GPIO_Init+0x268>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a93      	ldr	r2, [pc, #588]	; (800181c <MX_GPIO_Init+0x268>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b91      	ldr	r3, [pc, #580]	; (800181c <MX_GPIO_Init+0x268>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	61bb      	str	r3, [r7, #24]
 80015e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e2:	4b8e      	ldr	r3, [pc, #568]	; (800181c <MX_GPIO_Init+0x268>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a8d      	ldr	r2, [pc, #564]	; (800181c <MX_GPIO_Init+0x268>)
 80015e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b8b      	ldr	r3, [pc, #556]	; (800181c <MX_GPIO_Init+0x268>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	4b88      	ldr	r3, [pc, #544]	; (800181c <MX_GPIO_Init+0x268>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a87      	ldr	r2, [pc, #540]	; (800181c <MX_GPIO_Init+0x268>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b85      	ldr	r3, [pc, #532]	; (800181c <MX_GPIO_Init+0x268>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	4b82      	ldr	r3, [pc, #520]	; (800181c <MX_GPIO_Init+0x268>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a81      	ldr	r2, [pc, #516]	; (800181c <MX_GPIO_Init+0x268>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b7f      	ldr	r3, [pc, #508]	; (800181c <MX_GPIO_Init+0x268>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800162a:	4b7c      	ldr	r3, [pc, #496]	; (800181c <MX_GPIO_Init+0x268>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a7b      	ldr	r2, [pc, #492]	; (800181c <MX_GPIO_Init+0x268>)
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b79      	ldr	r3, [pc, #484]	; (800181c <MX_GPIO_Init+0x268>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001642:	4b76      	ldr	r3, [pc, #472]	; (800181c <MX_GPIO_Init+0x268>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a75      	ldr	r2, [pc, #468]	; (800181c <MX_GPIO_Init+0x268>)
 8001648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b73      	ldr	r3, [pc, #460]	; (800181c <MX_GPIO_Init+0x268>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	f244 0191 	movw	r1, #16529	; 0x4091
 8001660:	486f      	ldr	r0, [pc, #444]	; (8001820 <MX_GPIO_Init+0x26c>)
 8001662:	f002 fb97 	bl	8003d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800166c:	486d      	ldr	r0, [pc, #436]	; (8001824 <MX_GPIO_Init+0x270>)
 800166e:	f002 fb91 	bl	8003d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	2140      	movs	r1, #64	; 0x40
 8001676:	486c      	ldr	r0, [pc, #432]	; (8001828 <MX_GPIO_Init+0x274>)
 8001678:	f002 fb8c 	bl	8003d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8001682:	486a      	ldr	r0, [pc, #424]	; (800182c <MX_GPIO_Init+0x278>)
 8001684:	f002 fb86 	bl	8003d94 <HAL_GPIO_WritePin>
                          |WithdrawLights_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800168c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800168e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	4619      	mov	r1, r3
 800169e:	4863      	ldr	r0, [pc, #396]	; (800182c <MX_GPIO_Init+0x278>)
 80016a0:	f002 f9cc 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80016a4:	2332      	movs	r3, #50	; 0x32
 80016a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016b4:	230b      	movs	r3, #11
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	4619      	mov	r1, r3
 80016be:	485b      	ldr	r0, [pc, #364]	; (800182c <MX_GPIO_Init+0x278>)
 80016c0:	f002 f9bc 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80016c4:	2386      	movs	r3, #134	; 0x86
 80016c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016d4:	230b      	movs	r3, #11
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 031c 	add.w	r3, r7, #28
 80016dc:	4619      	mov	r1, r3
 80016de:	4854      	ldr	r0, [pc, #336]	; (8001830 <MX_GPIO_Init+0x27c>)
 80016e0:	f002 f9ac 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin;
 80016e4:	f244 0391 	movw	r3, #16529	; 0x4091
 80016e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4619      	mov	r1, r3
 80016fc:	4848      	ldr	r0, [pc, #288]	; (8001820 <MX_GPIO_Init+0x26c>)
 80016fe:	f002 f99d 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001714:	230b      	movs	r3, #11
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	4619      	mov	r1, r3
 800171e:	4840      	ldr	r0, [pc, #256]	; (8001820 <MX_GPIO_Init+0x26c>)
 8001720:	f002 f98c 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001724:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001736:	2307      	movs	r3, #7
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	4619      	mov	r1, r3
 8001740:	4838      	ldr	r0, [pc, #224]	; (8001824 <MX_GPIO_Init+0x270>)
 8001742:	f002 f97b 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = StepperMotorDir_Pin;
 8001746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800174a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(StepperMotorDir_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4619      	mov	r1, r3
 800175e:	4831      	ldr	r0, [pc, #196]	; (8001824 <MX_GPIO_Init+0x270>)
 8001760:	f002 f96c 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001764:	2340      	movs	r3, #64	; 0x40
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	482b      	ldr	r0, [pc, #172]	; (8001828 <MX_GPIO_Init+0x274>)
 800177c:	f002 f95e 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	4825      	ldr	r0, [pc, #148]	; (8001828 <MX_GPIO_Init+0x274>)
 8001794:	f002 f952 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 8001798:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800179c:	61fb      	str	r3, [r7, #28]
                          |WithdrawLights_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179e:	2301      	movs	r3, #1
 80017a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	481e      	ldr	r0, [pc, #120]	; (800182c <MX_GPIO_Init+0x278>)
 80017b2:	f002 f943 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017b6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017c8:	230a      	movs	r3, #10
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	4619      	mov	r1, r3
 80017d2:	4817      	ldr	r0, [pc, #92]	; (8001830 <MX_GPIO_Init+0x27c>)
 80017d4:	f002 f932 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	4619      	mov	r1, r3
 80017ec:	4810      	ldr	r0, [pc, #64]	; (8001830 <MX_GPIO_Init+0x27c>)
 80017ee:	f002 f925 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80017f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80017f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001804:	230b      	movs	r3, #11
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	4619      	mov	r1, r3
 800180e:	4806      	ldr	r0, [pc, #24]	; (8001828 <MX_GPIO_Init+0x274>)
 8001810:	f002 f914 	bl	8003a3c <HAL_GPIO_Init>

}
 8001814:	bf00      	nop
 8001816:	3730      	adds	r7, #48	; 0x30
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400
 8001824:	40020c00 	.word	0x40020c00
 8001828:	40021800 	.word	0x40021800
 800182c:	40020800 	.word	0x40020800
 8001830:	40020000 	.word	0x40020000

08001834 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <MX_I2C1_Init+0x74>)
 800183a:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <MX_I2C1_Init+0x78>)
 800183c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800183e:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001840:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <MX_I2C1_Init+0x7c>)
 8001842:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001844:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <MX_I2C1_Init+0x74>)
 800184c:	2201      	movs	r2, #1
 800184e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001856:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <MX_I2C1_Init+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001864:	2200      	movs	r2, #0
 8001866:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_I2C1_Init+0x74>)
 800186a:	2200      	movs	r2, #0
 800186c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800186e:	480e      	ldr	r0, [pc, #56]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001870:	f002 fac4 	bl	8003dfc <HAL_I2C_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800187a:	f000 f951 	bl	8001b20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800187e:	2100      	movs	r1, #0
 8001880:	4809      	ldr	r0, [pc, #36]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001882:	f002 fea5 	bl	80045d0 <HAL_I2CEx_ConfigAnalogFilter>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800188c:	f000 f948 	bl	8001b20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001890:	2100      	movs	r1, #0
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001894:	f002 fee7 	bl	8004666 <HAL_I2CEx_ConfigDigitalFilter>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800189e:	f000 f93f 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000164 	.word	0x20000164
 80018ac:	40005400 	.word	0x40005400
 80018b0:	20404768 	.word	0x20404768

080018b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b0ae      	sub	sp, #184	; 0xb8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2290      	movs	r2, #144	; 0x90
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00a face 	bl	800be76 <memset>
  if(i2cHandle->Instance==I2C1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a22      	ldr	r2, [pc, #136]	; (8001968 <HAL_I2C_MspInit+0xb4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d13c      	bne.n	800195e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018ea:	2300      	movs	r3, #0
 80018ec:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 fc5a 	bl	80051ac <HAL_RCCEx_PeriphCLKConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80018fe:	f000 f90f 	bl	8001b20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_I2C_MspInit+0xb8>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a19      	ldr	r2, [pc, #100]	; (800196c <HAL_I2C_MspInit+0xb8>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_I2C_MspInit+0xb8>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 800191a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800191e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001922:	2312      	movs	r3, #18
 8001924:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001934:	2304      	movs	r3, #4
 8001936:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800193e:	4619      	mov	r1, r3
 8001940:	480b      	ldr	r0, [pc, #44]	; (8001970 <HAL_I2C_MspInit+0xbc>)
 8001942:	f002 f87b 	bl	8003a3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_I2C_MspInit+0xb8>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_I2C_MspInit+0xb8>)
 800194c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_I2C_MspInit+0xb8>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800195e:	bf00      	nop
 8001960:	37b8      	adds	r7, #184	; 0xb8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40005400 	.word	0x40005400
 800196c:	40023800 	.word	0x40023800
 8001970:	40020400 	.word	0x40020400

08001974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001978:	f001 f9cd 	bl	8002d16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800197c:	f000 f82a 	bl	80019d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001980:	f7ff fe18 	bl	80015b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001984:	f7ff f854 	bl	8000a30 <MX_DMA_Init>
  MX_SPI1_Init();
 8001988:	f000 f8d0 	bl	8001b2c <MX_SPI1_Init>
  MX_DAC_Init();
 800198c:	f7fe ffde 	bl	800094c <MX_DAC_Init>
  MX_I2C1_Init();
 8001990:	f7ff ff50 	bl	8001834 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001994:	f000 fd62 	bl	800245c <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001998:	f000 fe12 	bl	80025c0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, RxBuffer, 1);
 800199c:	2201      	movs	r2, #1
 800199e:	4909      	ldr	r1, [pc, #36]	; (80019c4 <main+0x50>)
 80019a0:	4809      	ldr	r0, [pc, #36]	; (80019c8 <main+0x54>)
 80019a2:	f005 fe07 	bl	80075b4 <HAL_UART_Receive_IT>
  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 80019a6:	2100      	movs	r1, #0
 80019a8:	4808      	ldr	r0, [pc, #32]	; (80019cc <main+0x58>)
 80019aa:	f001 fb09 	bl	8002fc0 <HAL_DAC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80019ae:	2108      	movs	r1, #8
 80019b0:	4807      	ldr	r0, [pc, #28]	; (80019d0 <main+0x5c>)
 80019b2:	f004 fe8b 	bl	80066cc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80019b6:	f007 f845 	bl	8008a44 <osKernelInitialize>
  MX_FREERTOS_Init();
 80019ba:	f7ff f857 	bl	8000a6c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80019be:	f007 f875 	bl	8008aac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <main+0x4e>
 80019c4:	20000100 	.word	0x20000100
 80019c8:	20000720 	.word	0x20000720
 80019cc:	20000108 	.word	0x20000108
 80019d0:	200006d4 	.word	0x200006d4

080019d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b094      	sub	sp, #80	; 0x50
 80019d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019da:	f107 031c 	add.w	r3, r7, #28
 80019de:	2234      	movs	r2, #52	; 0x34
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f00a fa47 	bl	800be76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e8:	f107 0308 	add.w	r3, r7, #8
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f8:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <SystemClock_Config+0xd4>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	4a2a      	ldr	r2, [pc, #168]	; (8001aa8 <SystemClock_Config+0xd4>)
 80019fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a02:	6413      	str	r3, [r2, #64]	; 0x40
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <SystemClock_Config+0xd4>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a10:	4b26      	ldr	r3, [pc, #152]	; (8001aac <SystemClock_Config+0xd8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a25      	ldr	r2, [pc, #148]	; (8001aac <SystemClock_Config+0xd8>)
 8001a16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <SystemClock_Config+0xd8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a2c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a32:	2302      	movs	r3, #2
 8001a34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001a40:	23d8      	movs	r3, #216	; 0xd8
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4618      	mov	r0, r3
 8001a56:	f002 fea3 	bl	80047a0 <HAL_RCC_OscConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a60:	f000 f85e 	bl	8001b20 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a64:	f002 fe4c 	bl	8004700 <HAL_PWREx_EnableOverDrive>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a6e:	f000 f857 	bl	8001b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a72:	230f      	movs	r3, #15
 8001a74:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a76:	2302      	movs	r3, #2
 8001a78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a88:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	2107      	movs	r1, #7
 8001a90:	4618      	mov	r0, r3
 8001a92:	f003 f933 	bl	8004cfc <HAL_RCC_ClockConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001a9c:	f000 f840 	bl	8001b20 <Error_Handler>
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3750      	adds	r7, #80	; 0x50
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40007000 	.word	0x40007000

08001ab0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart6x) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	portYIELD_FROM_ISR(xTaskResumeFromISR(DispatcherTaskHandle));
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_UART_RxCpltCallback+0x3c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f008 facd 	bl	800a05c <xTaskResumeFromISR>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d007      	beq.n	8001ad8 <HAL_UART_RxCpltCallback+0x28>
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_UART_RxCpltCallback+0x40>)
 8001aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	f3bf 8f4f 	dsb	sy
 8001ad4:	f3bf 8f6f 	isb	sy
	HAL_UART_Receive_IT(&huart6, RxBuffer, 1);					// Used for "opening" ST MCU for future interrupts on RX
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4906      	ldr	r1, [pc, #24]	; (8001af4 <HAL_UART_RxCpltCallback+0x44>)
 8001adc:	4806      	ldr	r0, [pc, #24]	; (8001af8 <HAL_UART_RxCpltCallback+0x48>)
 8001ade:	f005 fd69 	bl	80075b4 <HAL_UART_Receive_IT>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000120 	.word	0x20000120
 8001af0:	e000ed04 	.word	0xe000ed04
 8001af4:	20000100 	.word	0x20000100
 8001af8:	20000720 	.word	0x20000720

08001afc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b0e:	f001 f90f 	bl	8002d30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40001000 	.word	0x40001000

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <Error_Handler+0x8>
	...

08001b2c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b30:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <MX_SPI1_Init+0x74>)
 8001b32:	4a1c      	ldr	r2, [pc, #112]	; (8001ba4 <MX_SPI1_Init+0x78>)
 8001b34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <MX_SPI1_Init+0x74>)
 8001b38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <MX_SPI1_Init+0x74>)
 8001b40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b44:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <MX_SPI1_Init+0x74>)
 8001b48:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_SPI1_Init+0x74>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <MX_SPI1_Init+0x74>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_SPI1_Init+0x74>)
 8001b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_SPI1_Init+0x74>)
 8001b64:	2218      	movs	r2, #24
 8001b66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <MX_SPI1_Init+0x74>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_SPI1_Init+0x74>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <MX_SPI1_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_SPI1_Init+0x74>)
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <MX_SPI1_Init+0x74>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_SPI1_Init+0x74>)
 8001b88:	2208      	movs	r2, #8
 8001b8a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b8c:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <MX_SPI1_Init+0x74>)
 8001b8e:	f003 ff35 	bl	80059fc <HAL_SPI_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001b98:	f7ff ffc2 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200001b8 	.word	0x200001b8
 8001ba4:	40013000 	.word	0x40013000

08001ba8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a3c      	ldr	r2, [pc, #240]	; (8001cb8 <HAL_SPI_MspInit+0x110>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d171      	bne.n	8001cae <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bca:	4b3c      	ldr	r3, [pc, #240]	; (8001cbc <HAL_SPI_MspInit+0x114>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a3b      	ldr	r2, [pc, #236]	; (8001cbc <HAL_SPI_MspInit+0x114>)
 8001bd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <HAL_SPI_MspInit+0x114>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	4b36      	ldr	r3, [pc, #216]	; (8001cbc <HAL_SPI_MspInit+0x114>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a35      	ldr	r2, [pc, #212]	; (8001cbc <HAL_SPI_MspInit+0x114>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <HAL_SPI_MspInit+0x114>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bfa:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <HAL_SPI_MspInit+0x114>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a2f      	ldr	r2, [pc, #188]	; (8001cbc <HAL_SPI_MspInit+0x114>)
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <HAL_SPI_MspInit+0x114>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c12:	2320      	movs	r3, #32
 8001c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c22:	2305      	movs	r3, #5
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4824      	ldr	r0, [pc, #144]	; (8001cc0 <HAL_SPI_MspInit+0x118>)
 8001c2e:	f001 ff05 	bl	8003a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEDStripes_Pin;
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c42:	2305      	movs	r3, #5
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEDStripes_GPIO_Port, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	481d      	ldr	r0, [pc, #116]	; (8001cc4 <HAL_SPI_MspInit+0x11c>)
 8001c4e:	f001 fef5 	bl	8003a3c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <HAL_SPI_MspInit+0x120>)
 8001c54:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <HAL_SPI_MspInit+0x124>)
 8001c56:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_SPI_MspInit+0x120>)
 8001c5a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001c5e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c60:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <HAL_SPI_MspInit+0x120>)
 8001c62:	2240      	movs	r2, #64	; 0x40
 8001c64:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <HAL_SPI_MspInit+0x120>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c6c:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <HAL_SPI_MspInit+0x120>)
 8001c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c72:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <HAL_SPI_MspInit+0x120>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <HAL_SPI_MspInit+0x120>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_SPI_MspInit+0x120>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_SPI_MspInit+0x120>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_SPI_MspInit+0x120>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c92:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <HAL_SPI_MspInit+0x120>)
 8001c94:	f001 fac8 	bl	8003228 <HAL_DMA_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8001c9e:	f7ff ff3f 	bl	8001b20 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <HAL_SPI_MspInit+0x120>)
 8001ca6:	655a      	str	r2, [r3, #84]	; 0x54
 8001ca8:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <HAL_SPI_MspInit+0x120>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001cae:	bf00      	nop
 8001cb0:	3728      	adds	r7, #40	; 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40013000 	.word	0x40013000
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	40020c00 	.word	0x40020c00
 8001cc8:	2000021c 	.word	0x2000021c
 8001ccc:	40026458 	.word	0x40026458

08001cd0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af04      	add	r7, sp, #16
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	9302      	str	r3, [sp, #8]
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	1dfb      	adds	r3, r7, #7
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2178      	movs	r1, #120	; 0x78
 8001cfe:	4803      	ldr	r0, [pc, #12]	; (8001d0c <ssd1306_WriteCommand+0x2c>)
 8001d00:	f002 f90c 	bl	8003f1c <HAL_I2C_Mem_Write>
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000164 	.word	0x20000164

08001d10 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af04      	add	r7, sp, #16
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d22:	9202      	str	r2, [sp, #8]
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	2240      	movs	r2, #64	; 0x40
 8001d2e:	2178      	movs	r1, #120	; 0x78
 8001d30:	4803      	ldr	r0, [pc, #12]	; (8001d40 <ssd1306_WriteData+0x30>)
 8001d32:	f002 f8f3 	bl	8003f1c <HAL_I2C_Mem_Write>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000164 	.word	0x20000164

08001d44 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001d48:	f7ff ffc2 	bl	8001cd0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001d4c:	2064      	movs	r0, #100	; 0x64
 8001d4e:	f001 f80f 	bl	8002d70 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001d52:	2000      	movs	r0, #0
 8001d54:	f000 f9ce 	bl	80020f4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001d58:	2020      	movs	r0, #32
 8001d5a:	f7ff ffc1 	bl	8001ce0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7ff ffbe 	bl	8001ce0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d64:	20b0      	movs	r0, #176	; 0xb0
 8001d66:	f7ff ffbb 	bl	8001ce0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001d6a:	20c8      	movs	r0, #200	; 0xc8
 8001d6c:	f7ff ffb8 	bl	8001ce0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7ff ffb5 	bl	8001ce0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001d76:	2010      	movs	r0, #16
 8001d78:	f7ff ffb2 	bl	8001ce0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001d7c:	2040      	movs	r0, #64	; 0x40
 8001d7e:	f7ff ffaf 	bl	8001ce0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001d82:	20ff      	movs	r0, #255	; 0xff
 8001d84:	f000 f9a2 	bl	80020cc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001d88:	20a1      	movs	r0, #161	; 0xa1
 8001d8a:	f7ff ffa9 	bl	8001ce0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001d8e:	20a6      	movs	r0, #166	; 0xa6
 8001d90:	f7ff ffa6 	bl	8001ce0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001d94:	20a8      	movs	r0, #168	; 0xa8
 8001d96:	f7ff ffa3 	bl	8001ce0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001d9a:	203f      	movs	r0, #63	; 0x3f
 8001d9c:	f7ff ffa0 	bl	8001ce0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001da0:	20a4      	movs	r0, #164	; 0xa4
 8001da2:	f7ff ff9d 	bl	8001ce0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001da6:	20d3      	movs	r0, #211	; 0xd3
 8001da8:	f7ff ff9a 	bl	8001ce0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001dac:	2000      	movs	r0, #0
 8001dae:	f7ff ff97 	bl	8001ce0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001db2:	20d5      	movs	r0, #213	; 0xd5
 8001db4:	f7ff ff94 	bl	8001ce0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001db8:	20f0      	movs	r0, #240	; 0xf0
 8001dba:	f7ff ff91 	bl	8001ce0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001dbe:	20d9      	movs	r0, #217	; 0xd9
 8001dc0:	f7ff ff8e 	bl	8001ce0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001dc4:	2022      	movs	r0, #34	; 0x22
 8001dc6:	f7ff ff8b 	bl	8001ce0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001dca:	20da      	movs	r0, #218	; 0xda
 8001dcc:	f7ff ff88 	bl	8001ce0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001dd0:	2012      	movs	r0, #18
 8001dd2:	f7ff ff85 	bl	8001ce0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001dd6:	20db      	movs	r0, #219	; 0xdb
 8001dd8:	f7ff ff82 	bl	8001ce0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ddc:	2020      	movs	r0, #32
 8001dde:	f7ff ff7f 	bl	8001ce0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001de2:	208d      	movs	r0, #141	; 0x8d
 8001de4:	f7ff ff7c 	bl	8001ce0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001de8:	2014      	movs	r0, #20
 8001dea:	f7ff ff79 	bl	8001ce0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001dee:	2001      	movs	r0, #1
 8001df0:	f000 f980 	bl	80020f4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001df4:	2000      	movs	r0, #0
 8001df6:	f000 f80f 	bl	8001e18 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001dfa:	f000 f825 	bl	8001e48 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <ssd1306_Init+0xd0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <ssd1306_Init+0xd0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001e0a:	4b02      	ldr	r3, [pc, #8]	; (8001e14 <ssd1306_Init+0xd0>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	711a      	strb	r2, [r3, #4]
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	2000067c 	.word	0x2000067c

08001e18 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <ssd1306_Fill+0x14>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e000      	b.n	8001e2e <ssd1306_Fill+0x16>
 8001e2c:	23ff      	movs	r3, #255	; 0xff
 8001e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e32:	4619      	mov	r1, r3
 8001e34:	4803      	ldr	r0, [pc, #12]	; (8001e44 <ssd1306_Fill+0x2c>)
 8001e36:	f00a f81e 	bl	800be76 <memset>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000027c 	.word	0x2000027c

08001e48 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e4e:	2300      	movs	r3, #0
 8001e50:	71fb      	strb	r3, [r7, #7]
 8001e52:	e016      	b.n	8001e82 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	3b50      	subs	r3, #80	; 0x50
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff40 	bl	8001ce0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7ff ff3d 	bl	8001ce0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001e66:	2010      	movs	r0, #16
 8001e68:	f7ff ff3a 	bl	8001ce0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	01db      	lsls	r3, r3, #7
 8001e70:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <ssd1306_UpdateScreen+0x4c>)
 8001e72:	4413      	add	r3, r2
 8001e74:	2180      	movs	r1, #128	; 0x80
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff4a 	bl	8001d10 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	71fb      	strb	r3, [r7, #7]
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	2b07      	cmp	r3, #7
 8001e86:	d9e5      	bls.n	8001e54 <ssd1306_UpdateScreen+0xc>
    }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2000027c 	.word	0x2000027c

08001e98 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	71bb      	strb	r3, [r7, #6]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db3d      	blt.n	8001f2e <ssd1306_DrawPixel+0x96>
 8001eb2:	79bb      	ldrb	r3, [r7, #6]
 8001eb4:	2b3f      	cmp	r3, #63	; 0x3f
 8001eb6:	d83a      	bhi.n	8001f2e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001eb8:	797b      	ldrb	r3, [r7, #5]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d11a      	bne.n	8001ef4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ebe:	79fa      	ldrb	r2, [r7, #7]
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	08db      	lsrs	r3, r3, #3
 8001ec4:	b2d8      	uxtb	r0, r3
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	01db      	lsls	r3, r3, #7
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a1b      	ldr	r2, [pc, #108]	; (8001f3c <ssd1306_DrawPixel+0xa4>)
 8001ece:	5cd3      	ldrb	r3, [r2, r3]
 8001ed0:	b25a      	sxtb	r2, r3
 8001ed2:	79bb      	ldrb	r3, [r7, #6]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	2101      	movs	r1, #1
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	b25b      	sxtb	r3, r3
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	b259      	sxtb	r1, r3
 8001ee4:	79fa      	ldrb	r2, [r7, #7]
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	01db      	lsls	r3, r3, #7
 8001eea:	4413      	add	r3, r2
 8001eec:	b2c9      	uxtb	r1, r1
 8001eee:	4a13      	ldr	r2, [pc, #76]	; (8001f3c <ssd1306_DrawPixel+0xa4>)
 8001ef0:	54d1      	strb	r1, [r2, r3]
 8001ef2:	e01d      	b.n	8001f30 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ef4:	79fa      	ldrb	r2, [r7, #7]
 8001ef6:	79bb      	ldrb	r3, [r7, #6]
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	b2d8      	uxtb	r0, r3
 8001efc:	4603      	mov	r3, r0
 8001efe:	01db      	lsls	r3, r3, #7
 8001f00:	4413      	add	r3, r2
 8001f02:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <ssd1306_DrawPixel+0xa4>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	b25a      	sxtb	r2, r3
 8001f08:	79bb      	ldrb	r3, [r7, #6]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	b25b      	sxtb	r3, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	b25b      	sxtb	r3, r3
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	b259      	sxtb	r1, r3
 8001f1e:	79fa      	ldrb	r2, [r7, #7]
 8001f20:	4603      	mov	r3, r0
 8001f22:	01db      	lsls	r3, r3, #7
 8001f24:	4413      	add	r3, r2
 8001f26:	b2c9      	uxtb	r1, r1
 8001f28:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <ssd1306_DrawPixel+0xa4>)
 8001f2a:	54d1      	strb	r1, [r2, r3]
 8001f2c:	e000      	b.n	8001f30 <ssd1306_DrawPixel+0x98>
        return;
 8001f2e:	bf00      	nop
    }
}
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	2000027c 	.word	0x2000027c

08001f40 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4604      	mov	r4, r0
 8001f48:	1d38      	adds	r0, r7, #4
 8001f4a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4623      	mov	r3, r4
 8001f52:	73fb      	strb	r3, [r7, #15]
 8001f54:	4613      	mov	r3, r2
 8001f56:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	2b1f      	cmp	r3, #31
 8001f5c:	d902      	bls.n	8001f64 <ssd1306_WriteChar+0x24>
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	2b7e      	cmp	r3, #126	; 0x7e
 8001f62:	d901      	bls.n	8001f68 <ssd1306_WriteChar+0x28>
        return 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	e06d      	b.n	8002044 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001f68:	4b38      	ldr	r3, [pc, #224]	; (800204c <ssd1306_WriteChar+0x10c>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	793b      	ldrb	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	2b80      	cmp	r3, #128	; 0x80
 8001f74:	dc06      	bgt.n	8001f84 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001f76:	4b35      	ldr	r3, [pc, #212]	; (800204c <ssd1306_WriteChar+0x10c>)
 8001f78:	885b      	ldrh	r3, [r3, #2]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	797b      	ldrb	r3, [r7, #5]
 8001f7e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001f80:	2b40      	cmp	r3, #64	; 0x40
 8001f82:	dd01      	ble.n	8001f88 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e05d      	b.n	8002044 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]
 8001f8c:	e04c      	b.n	8002028 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	3b20      	subs	r3, #32
 8001f94:	7979      	ldrb	r1, [r7, #5]
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	440b      	add	r3, r1
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	e034      	b.n	8002018 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d012      	beq.n	8001fe4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001fbe:	4b23      	ldr	r3, [pc, #140]	; (800204c <ssd1306_WriteChar+0x10c>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	b2d8      	uxtb	r0, r3
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	; (800204c <ssd1306_WriteChar+0x10c>)
 8001fce:	885b      	ldrh	r3, [r3, #2]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	7bba      	ldrb	r2, [r7, #14]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f7ff ff5b 	bl	8001e98 <ssd1306_DrawPixel>
 8001fe2:	e016      	b.n	8002012 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <ssd1306_WriteChar+0x10c>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	b2d8      	uxtb	r0, r3
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <ssd1306_WriteChar+0x10c>)
 8001ff4:	885b      	ldrh	r3, [r3, #2]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	b2d9      	uxtb	r1, r3
 8002000:	7bbb      	ldrb	r3, [r7, #14]
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf0c      	ite	eq
 8002006:	2301      	moveq	r3, #1
 8002008:	2300      	movne	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	f7ff ff43 	bl	8001e98 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	3301      	adds	r3, #1
 8002016:	61bb      	str	r3, [r7, #24]
 8002018:	793b      	ldrb	r3, [r7, #4]
 800201a:	461a      	mov	r2, r3
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	4293      	cmp	r3, r2
 8002020:	d3c5      	bcc.n	8001fae <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3301      	adds	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
 8002028:	797b      	ldrb	r3, [r7, #5]
 800202a:	461a      	mov	r2, r3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	4293      	cmp	r3, r2
 8002030:	d3ad      	bcc.n	8001f8e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <ssd1306_WriteChar+0x10c>)
 8002034:	881a      	ldrh	r2, [r3, #0]
 8002036:	793b      	ldrb	r3, [r7, #4]
 8002038:	b29b      	uxth	r3, r3
 800203a:	4413      	add	r3, r2
 800203c:	b29a      	uxth	r2, r3
 800203e:	4b03      	ldr	r3, [pc, #12]	; (800204c <ssd1306_WriteChar+0x10c>)
 8002040:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3724      	adds	r7, #36	; 0x24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd90      	pop	{r4, r7, pc}
 800204c:	2000067c 	.word	0x2000067c

08002050 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	1d38      	adds	r0, r7, #4
 800205a:	e880 0006 	stmia.w	r0, {r1, r2}
 800205e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002060:	e012      	b.n	8002088 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	7818      	ldrb	r0, [r3, #0]
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	1d3a      	adds	r2, r7, #4
 800206a:	ca06      	ldmia	r2, {r1, r2}
 800206c:	f7ff ff68 	bl	8001f40 <ssd1306_WriteChar>
 8002070:	4603      	mov	r3, r0
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d002      	beq.n	8002082 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	e008      	b.n	8002094 <ssd1306_WriteString+0x44>
        }
        str++;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3301      	adds	r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1e8      	bne.n	8002062 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	781b      	ldrb	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	460a      	mov	r2, r1
 80020a6:	71fb      	strb	r3, [r7, #7]
 80020a8:	4613      	mov	r3, r2
 80020aa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <ssd1306_SetCursor+0x2c>)
 80020b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80020b4:	79bb      	ldrb	r3, [r7, #6]
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <ssd1306_SetCursor+0x2c>)
 80020ba:	805a      	strh	r2, [r3, #2]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	2000067c 	.word	0x2000067c

080020cc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80020d6:	2381      	movs	r3, #129	; 0x81
 80020d8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fdff 	bl	8001ce0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fdfb 	bl	8001ce0 <ssd1306_WriteCommand>
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002104:	23af      	movs	r3, #175	; 0xaf
 8002106:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <ssd1306_SetDisplayOn+0x38>)
 800210a:	2201      	movs	r2, #1
 800210c:	715a      	strb	r2, [r3, #5]
 800210e:	e004      	b.n	800211a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002110:	23ae      	movs	r3, #174	; 0xae
 8002112:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <ssd1306_SetDisplayOn+0x38>)
 8002116:	2200      	movs	r2, #0
 8002118:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fddf 	bl	8001ce0 <ssd1306_WriteCommand>
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	2000067c 	.word	0x2000067c

08002130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_MspInit+0x4c>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a10      	ldr	r2, [pc, #64]	; (800217c <HAL_MspInit+0x4c>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <HAL_MspInit+0x4c>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_MspInit+0x4c>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	4a0a      	ldr	r2, [pc, #40]	; (800217c <HAL_MspInit+0x4c>)
 8002154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002158:	6453      	str	r3, [r2, #68]	; 0x44
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <HAL_MspInit+0x4c>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	210f      	movs	r1, #15
 800216a:	f06f 0001 	mvn.w	r0, #1
 800216e:	f000 fedb 	bl	8002f28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800

08002180 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08e      	sub	sp, #56	; 0x38
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002190:	4b33      	ldr	r3, [pc, #204]	; (8002260 <HAL_InitTick+0xe0>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	4a32      	ldr	r2, [pc, #200]	; (8002260 <HAL_InitTick+0xe0>)
 8002196:	f043 0310 	orr.w	r3, r3, #16
 800219a:	6413      	str	r3, [r2, #64]	; 0x40
 800219c:	4b30      	ldr	r3, [pc, #192]	; (8002260 <HAL_InitTick+0xe0>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021a8:	f107 0210 	add.w	r2, r7, #16
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f002 ffc8 	bl	8005148 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d103      	bne.n	80021ca <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021c2:	f002 ff99 	bl	80050f8 <HAL_RCC_GetPCLK1Freq>
 80021c6:	6378      	str	r0, [r7, #52]	; 0x34
 80021c8:	e004      	b.n	80021d4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021ca:	f002 ff95 	bl	80050f8 <HAL_RCC_GetPCLK1Freq>
 80021ce:	4603      	mov	r3, r0
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d6:	4a23      	ldr	r2, [pc, #140]	; (8002264 <HAL_InitTick+0xe4>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	0c9b      	lsrs	r3, r3, #18
 80021de:	3b01      	subs	r3, #1
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021e2:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_InitTick+0xe8>)
 80021e4:	4a21      	ldr	r2, [pc, #132]	; (800226c <HAL_InitTick+0xec>)
 80021e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021e8:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <HAL_InitTick+0xe8>)
 80021ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021f0:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <HAL_InitTick+0xe8>)
 80021f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021f6:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <HAL_InitTick+0xe8>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_InitTick+0xe8>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002202:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_InitTick+0xe8>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002208:	4817      	ldr	r0, [pc, #92]	; (8002268 <HAL_InitTick+0xe8>)
 800220a:	f004 f92d 	bl	8006468 <HAL_TIM_Base_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002214:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002218:	2b00      	cmp	r3, #0
 800221a:	d11b      	bne.n	8002254 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800221c:	4812      	ldr	r0, [pc, #72]	; (8002268 <HAL_InitTick+0xe8>)
 800221e:	f004 f985 	bl	800652c <HAL_TIM_Base_Start_IT>
 8002222:	4603      	mov	r3, r0
 8002224:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002228:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800222c:	2b00      	cmp	r3, #0
 800222e:	d111      	bne.n	8002254 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002230:	2036      	movs	r0, #54	; 0x36
 8002232:	f000 fe95 	bl	8002f60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b0f      	cmp	r3, #15
 800223a:	d808      	bhi.n	800224e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800223c:	2200      	movs	r2, #0
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	2036      	movs	r0, #54	; 0x36
 8002242:	f000 fe71 	bl	8002f28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <HAL_InitTick+0xf0>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	e002      	b.n	8002254 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002254:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002258:	4618      	mov	r0, r3
 800225a:	3738      	adds	r7, #56	; 0x38
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40023800 	.word	0x40023800
 8002264:	431bde83 	.word	0x431bde83
 8002268:	20000684 	.word	0x20000684
 800226c:	40001000 	.word	0x40001000
 8002270:	20000058 	.word	0x20000058

08002274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002278:	e7fe      	b.n	8002278 <NMI_Handler+0x4>

0800227a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227e:	e7fe      	b.n	800227e <HardFault_Handler+0x4>

08002280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <MemManage_Handler+0x4>

08002286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800228a:	e7fe      	b.n	800228a <BusFault_Handler+0x4>

0800228c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <UsageFault_Handler+0x4>

08002292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <TIM6_DAC_IRQHandler+0x20>)
 80022a6:	791b      	ldrb	r3, [r3, #4]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80022ae:	4804      	ldr	r0, [pc, #16]	; (80022c0 <TIM6_DAC_IRQHandler+0x20>)
 80022b0:	f000 fed8 	bl	8003064 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80022b4:	4803      	ldr	r0, [pc, #12]	; (80022c4 <TIM6_DAC_IRQHandler+0x24>)
 80022b6:	f004 fb03 	bl	80068c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000108 	.word	0x20000108
 80022c4:	20000684 	.word	0x20000684

080022c8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <DMA2_Stream3_IRQHandler+0x10>)
 80022ce:	f001 f94b 	bl	8003568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2000021c 	.word	0x2000021c

080022dc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <USART6_IRQHandler+0x10>)
 80022e2:	f005 f9ab 	bl	800763c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000720 	.word	0x20000720

080022f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	e00a      	b.n	8002318 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002302:	f3af 8000 	nop.w
 8002306:	4601      	mov	r1, r0
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	60ba      	str	r2, [r7, #8]
 800230e:	b2ca      	uxtb	r2, r1
 8002310:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3301      	adds	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	429a      	cmp	r2, r3
 800231e:	dbf0      	blt.n	8002302 <_read+0x12>
  }

  return len;
 8002320:	687b      	ldr	r3, [r7, #4]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	e009      	b.n	8002350 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	60ba      	str	r2, [r7, #8]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	dbf1      	blt.n	800233c <_write+0x12>
  }
  return len;
 8002358:	687b      	ldr	r3, [r7, #4]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <_close>:

int _close(int file)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800238a:	605a      	str	r2, [r3, #4]
  return 0;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <_isatty>:

int _isatty(int file)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023a2:	2301      	movs	r3, #1
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d4:	4a14      	ldr	r2, [pc, #80]	; (8002428 <_sbrk+0x5c>)
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <_sbrk+0x60>)
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <_sbrk+0x64>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d102      	bne.n	80023ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <_sbrk+0x64>)
 80023ea:	4a12      	ldr	r2, [pc, #72]	; (8002434 <_sbrk+0x68>)
 80023ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d207      	bcs.n	800240c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023fc:	f009 fdee 	bl	800bfdc <__errno>
 8002400:	4603      	mov	r3, r0
 8002402:	220c      	movs	r2, #12
 8002404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002406:	f04f 33ff 	mov.w	r3, #4294967295
 800240a:	e009      	b.n	8002420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <_sbrk+0x64>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002412:	4b07      	ldr	r3, [pc, #28]	; (8002430 <_sbrk+0x64>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <_sbrk+0x64>)
 800241c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800241e:	68fb      	ldr	r3, [r7, #12]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20080000 	.word	0x20080000
 800242c:	00000400 	.word	0x00000400
 8002430:	200006d0 	.word	0x200006d0
 8002434:	20005318 	.word	0x20005318

08002438 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <SystemInit+0x20>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	4a05      	ldr	r2, [pc, #20]	; (8002458 <SystemInit+0x20>)
 8002444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002462:	f107 031c 	add.w	r3, r7, #28
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800246e:	463b      	mov	r3, r7
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
 800247c:	615a      	str	r2, [r3, #20]
 800247e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002480:	4b21      	ldr	r3, [pc, #132]	; (8002508 <MX_TIM4_Init+0xac>)
 8002482:	4a22      	ldr	r2, [pc, #136]	; (800250c <MX_TIM4_Init+0xb0>)
 8002484:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32-1;
 8002486:	4b20      	ldr	r3, [pc, #128]	; (8002508 <MX_TIM4_Init+0xac>)
 8002488:	221f      	movs	r2, #31
 800248a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248c:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <MX_TIM4_Init+0xac>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8002492:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <MX_TIM4_Init+0xac>)
 8002494:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002498:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249a:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <MX_TIM4_Init+0xac>)
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <MX_TIM4_Init+0xac>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024a6:	4818      	ldr	r0, [pc, #96]	; (8002508 <MX_TIM4_Init+0xac>)
 80024a8:	f004 f8b8 	bl	800661c <HAL_TIM_PWM_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80024b2:	f7ff fb35 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024be:	f107 031c 	add.w	r3, r7, #28
 80024c2:	4619      	mov	r1, r3
 80024c4:	4810      	ldr	r0, [pc, #64]	; (8002508 <MX_TIM4_Init+0xac>)
 80024c6:	f004 ff7b 	bl	80073c0 <HAL_TIMEx_MasterConfigSynchronization>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80024d0:	f7ff fb26 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d4:	2360      	movs	r3, #96	; 0x60
 80024d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024dc:	2300      	movs	r3, #0
 80024de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024e4:	463b      	mov	r3, r7
 80024e6:	2208      	movs	r2, #8
 80024e8:	4619      	mov	r1, r3
 80024ea:	4807      	ldr	r0, [pc, #28]	; (8002508 <MX_TIM4_Init+0xac>)
 80024ec:	f004 fb08 	bl	8006b00 <HAL_TIM_PWM_ConfigChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80024f6:	f7ff fb13 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80024fa:	4803      	ldr	r0, [pc, #12]	; (8002508 <MX_TIM4_Init+0xac>)
 80024fc:	f000 f828 	bl	8002550 <HAL_TIM_MspPostInit>

}
 8002500:	bf00      	nop
 8002502:	3728      	adds	r7, #40	; 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200006d4 	.word	0x200006d4
 800250c:	40000800 	.word	0x40000800

08002510 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <HAL_TIM_PWM_MspInit+0x38>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d10b      	bne.n	800253a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_TIM_PWM_MspInit+0x3c>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_TIM_PWM_MspInit+0x3c>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b07      	ldr	r3, [pc, #28]	; (800254c <HAL_TIM_PWM_MspInit+0x3c>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40000800 	.word	0x40000800
 800254c:	40023800 	.word	0x40023800

08002550 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a11      	ldr	r2, [pc, #68]	; (80025b4 <HAL_TIM_MspPostInit+0x64>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d11c      	bne.n	80025ac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_TIM_MspPostInit+0x68>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <HAL_TIM_MspPostInit+0x68>)
 8002578:	f043 0308 	orr.w	r3, r3, #8
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_TIM_MspPostInit+0x68>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = StepperMotorStep_Pin;
 800258a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800258e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002598:	2300      	movs	r3, #0
 800259a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800259c:	2302      	movs	r3, #2
 800259e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(StepperMotorStep_GPIO_Port, &GPIO_InitStruct);
 80025a0:	f107 030c 	add.w	r3, r7, #12
 80025a4:	4619      	mov	r1, r3
 80025a6:	4805      	ldr	r0, [pc, #20]	; (80025bc <HAL_TIM_MspPostInit+0x6c>)
 80025a8:	f001 fa48 	bl	8003a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80025ac:	bf00      	nop
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40000800 	.word	0x40000800
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020c00 	.word	0x40020c00

080025c0 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80025c4:	4b14      	ldr	r3, [pc, #80]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025c6:	4a15      	ldr	r2, [pc, #84]	; (800261c <MX_USART6_UART_Init+0x5c>)
 80025c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80025ca:	4b13      	ldr	r3, [pc, #76]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025e6:	220c      	movs	r2, #12
 80025e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <MX_USART6_UART_Init+0x58>)
 80025fe:	2200      	movs	r2, #0
 8002600:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002602:	4805      	ldr	r0, [pc, #20]	; (8002618 <MX_USART6_UART_Init+0x58>)
 8002604:	f004 ff88 	bl	8007518 <HAL_UART_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800260e:	f7ff fa87 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000720 	.word	0x20000720
 800261c:	40011400 	.word	0x40011400

08002620 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b0ae      	sub	sp, #184	; 0xb8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	2290      	movs	r2, #144	; 0x90
 800263e:	2100      	movs	r1, #0
 8002640:	4618      	mov	r0, r3
 8002642:	f009 fc18 	bl	800be76 <memset>
  if(uartHandle->Instance==USART6)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a26      	ldr	r2, [pc, #152]	; (80026e4 <HAL_UART_MspInit+0xc4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d144      	bne.n	80026da <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002650:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002654:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002656:	2300      	movs	r3, #0
 8002658:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	4618      	mov	r0, r3
 8002660:	f002 fda4 	bl	80051ac <HAL_RCCEx_PeriphCLKConfig>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800266a:	f7ff fa59 	bl	8001b20 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800266e:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <HAL_UART_MspInit+0xc8>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	4a1d      	ldr	r2, [pc, #116]	; (80026e8 <HAL_UART_MspInit+0xc8>)
 8002674:	f043 0320 	orr.w	r3, r3, #32
 8002678:	6453      	str	r3, [r2, #68]	; 0x44
 800267a:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_UART_MspInit+0xc8>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_UART_MspInit+0xc8>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <HAL_UART_MspInit+0xc8>)
 800268c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_UART_MspInit+0xc8>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = RPiPicoW_TX_Pin|RPiPicoW_RX_Pin;
 800269e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80026a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b2:	2303      	movs	r3, #3
 80026b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80026b8:	2308      	movs	r3, #8
 80026ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026c2:	4619      	mov	r1, r3
 80026c4:	4809      	ldr	r0, [pc, #36]	; (80026ec <HAL_UART_MspInit+0xcc>)
 80026c6:	f001 f9b9 	bl	8003a3c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2105      	movs	r1, #5
 80026ce:	2047      	movs	r0, #71	; 0x47
 80026d0:	f000 fc2a 	bl	8002f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80026d4:	2047      	movs	r0, #71	; 0x47
 80026d6:	f000 fc43 	bl	8002f60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80026da:	bf00      	nop
 80026dc:	37b8      	adds	r7, #184	; 0xb8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40011400 	.word	0x40011400
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40021800 	.word	0x40021800

080026f0 <ws2812b_init>:
static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);
static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);

// ======== Public Functions =======================================================================

int ws2812b_init(ws2812b_handle_t *ws) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  // Point ws2812b_error_msg to error buffer unless error message buffer is disabled.
#ifndef WS2812B_DISABLE_ERROR_MSG
  ws2812b_error_msg = error_msg_buf;
 80026f8:	4b7a      	ldr	r3, [pc, #488]	; (80028e4 <ws2812b_init+0x1f4>)
 80026fa:	4a7b      	ldr	r2, [pc, #492]	; (80028e8 <ws2812b_init+0x1f8>)
 80026fc:	601a      	str	r2, [r3, #0]
  error_msg_buf[0] = '\0';
 80026fe:	4b7a      	ldr	r3, [pc, #488]	; (80028e8 <ws2812b_init+0x1f8>)
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
#else  /* WS2812B_DISABLE_ERROR_MSG */
  ws2812b_error_msg = 0;
#endif /* WS2812B_DISABLE_ERROR_MSG */

  // Assert packing is valid
  WS2812B_INIT_ASSERT((ws->config.packing == WS2812B_PACKING_DOUBLE) ||
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d009      	beq.n	8002720 <ws2812b_init+0x30>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d005      	beq.n	8002720 <ws2812b_init+0x30>
 8002714:	4875      	ldr	r0, [pc, #468]	; (80028ec <ws2812b_init+0x1fc>)
 8002716:	f000 f9f5 	bl	8002b04 <set_init_error_msg>
 800271a:	f04f 33ff 	mov.w	r3, #4294967295
 800271e:	e17f      	b.n	8002a20 <ws2812b_init+0x330>
                          (ws->config.packing == WS2812B_PACKING_SINGLE),
                      "ws2812b: config.packing is invalid!");

  // Assert pulse_len_1 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_1),
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	789b      	ldrb	r3, [r3, #2]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d01d      	beq.n	8002764 <ws2812b_init+0x74>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	789b      	ldrb	r3, [r3, #2]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d019      	beq.n	8002764 <ws2812b_init+0x74>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	789b      	ldrb	r3, [r3, #2]
 8002734:	2b07      	cmp	r3, #7
 8002736:	d015      	beq.n	8002764 <ws2812b_init+0x74>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	789b      	ldrb	r3, [r3, #2]
 800273c:	2b0f      	cmp	r3, #15
 800273e:	d011      	beq.n	8002764 <ws2812b_init+0x74>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	789b      	ldrb	r3, [r3, #2]
 8002744:	2b3f      	cmp	r3, #63	; 0x3f
 8002746:	d00d      	beq.n	8002764 <ws2812b_init+0x74>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	789b      	ldrb	r3, [r3, #2]
 800274c:	2b1f      	cmp	r3, #31
 800274e:	d009      	beq.n	8002764 <ws2812b_init+0x74>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	789b      	ldrb	r3, [r3, #2]
 8002754:	2b7f      	cmp	r3, #127	; 0x7f
 8002756:	d005      	beq.n	8002764 <ws2812b_init+0x74>
 8002758:	4865      	ldr	r0, [pc, #404]	; (80028f0 <ws2812b_init+0x200>)
 800275a:	f000 f9d3 	bl	8002b04 <set_init_error_msg>
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
 8002762:	e15d      	b.n	8002a20 <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_1 is invalid!");

  // Asert pulse_len_0 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_0),
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	785b      	ldrb	r3, [r3, #1]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d01d      	beq.n	80027a8 <ws2812b_init+0xb8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	785b      	ldrb	r3, [r3, #1]
 8002770:	2b03      	cmp	r3, #3
 8002772:	d019      	beq.n	80027a8 <ws2812b_init+0xb8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	785b      	ldrb	r3, [r3, #1]
 8002778:	2b07      	cmp	r3, #7
 800277a:	d015      	beq.n	80027a8 <ws2812b_init+0xb8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	785b      	ldrb	r3, [r3, #1]
 8002780:	2b0f      	cmp	r3, #15
 8002782:	d011      	beq.n	80027a8 <ws2812b_init+0xb8>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	785b      	ldrb	r3, [r3, #1]
 8002788:	2b3f      	cmp	r3, #63	; 0x3f
 800278a:	d00d      	beq.n	80027a8 <ws2812b_init+0xb8>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	785b      	ldrb	r3, [r3, #1]
 8002790:	2b1f      	cmp	r3, #31
 8002792:	d009      	beq.n	80027a8 <ws2812b_init+0xb8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	785b      	ldrb	r3, [r3, #1]
 8002798:	2b7f      	cmp	r3, #127	; 0x7f
 800279a:	d005      	beq.n	80027a8 <ws2812b_init+0xb8>
 800279c:	4855      	ldr	r0, [pc, #340]	; (80028f4 <ws2812b_init+0x204>)
 800279e:	f000 f9b1 	bl	8002b04 <set_init_error_msg>
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	e13b      	b.n	8002a20 <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_0 is invalid!");

  // Assert first_bit_0 is valid
  WS2812B_INIT_ASSERT((ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_DISABLED) ||
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	78db      	ldrb	r3, [r3, #3]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d009      	beq.n	80027c4 <ws2812b_init+0xd4>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	78db      	ldrb	r3, [r3, #3]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d005      	beq.n	80027c4 <ws2812b_init+0xd4>
 80027b8:	484f      	ldr	r0, [pc, #316]	; (80028f8 <ws2812b_init+0x208>)
 80027ba:	f000 f9a3 	bl	8002b04 <set_init_error_msg>
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
 80027c2:	e12d      	b.n	8002a20 <ws2812b_init+0x330>
                          (ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_ENABLED),
                      "ws2812b: config.first_bit_0 is invalid!");

  // Assert spi_bit_order is valid
  WS2812B_INIT_ASSERT((ws->config.spi_bit_order == WS2812B_LSB_FIRST) ||
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	791b      	ldrb	r3, [r3, #4]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d009      	beq.n	80027e0 <ws2812b_init+0xf0>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	791b      	ldrb	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <ws2812b_init+0xf0>
 80027d4:	4849      	ldr	r0, [pc, #292]	; (80028fc <ws2812b_init+0x20c>)
 80027d6:	f000 f995 	bl	8002b04 <set_init_error_msg>
 80027da:	f04f 33ff 	mov.w	r3, #4294967295
 80027de:	e11f      	b.n	8002a20 <ws2812b_init+0x330>
                          (ws->config.spi_bit_order == WS2812B_MSB_FIRST),
                      "ws2812b: config.spi_bit_order is invalid!");

  // Assert that the '1' pulse is longer than the '0' pulse:
  WS2812B_INIT_ASSERT(ws->config.pulse_len_1 > ws->config.pulse_len_0,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	789a      	ldrb	r2, [r3, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	785b      	ldrb	r3, [r3, #1]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d805      	bhi.n	80027f8 <ws2812b_init+0x108>
 80027ec:	4844      	ldr	r0, [pc, #272]	; (8002900 <ws2812b_init+0x210>)
 80027ee:	f000 f989 	bl	8002b04 <set_init_error_msg>
 80027f2:	f04f 33ff 	mov.w	r3, #4294967295
 80027f6:	e113      	b.n	8002a20 <ws2812b_init+0x330>
                      "ws2812b: One-pulse must be longer than zero-pulse!");

  // Assert that pulse is not too long if in double packing:
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d109      	bne.n	8002814 <ws2812b_init+0x124>
    WS2812B_INIT_ASSERT(ws->config.pulse_len_1 < WS2812B_PULSE_LEN_4b,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	789b      	ldrb	r3, [r3, #2]
 8002804:	2b0e      	cmp	r3, #14
 8002806:	d905      	bls.n	8002814 <ws2812b_init+0x124>
 8002808:	483e      	ldr	r0, [pc, #248]	; (8002904 <ws2812b_init+0x214>)
 800280a:	f000 f97b 	bl	8002b04 <set_init_error_msg>
 800280e:	f04f 33ff 	mov.w	r3, #4294967295
 8002812:	e105      	b.n	8002a20 <ws2812b_init+0x330>
                        "ws2812b: Pulse is too long for double packing!");
  }

  // Apply 0 prefix to pulse if selected
  ws->state.pulse_0 = ws->config.pulse_len_0 << ws->config.first_bit_0;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	785b      	ldrb	r3, [r3, #1]
 8002818:	461a      	mov	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	78db      	ldrb	r3, [r3, #3]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	b2da      	uxtb	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	765a      	strb	r2, [r3, #25]
  ws->state.pulse_1 = ws->config.pulse_len_1 << ws->config.first_bit_0;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	789b      	ldrb	r3, [r3, #2]
 800282c:	461a      	mov	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	78db      	ldrb	r3, [r3, #3]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	b2da      	uxtb	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	761a      	strb	r2, [r3, #24]

  // Pulse needs to be reverse for MSB-first transmission:
  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	791b      	ldrb	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f040 80e9 	bne.w	8002a18 <ws2812b_init+0x328>
    if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d15c      	bne.n	8002908 <ws2812b_init+0x218>
      ws->state.pulse_0 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_0);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	7e5b      	ldrb	r3, [r3, #25]
 8002852:	10db      	asrs	r3, r3, #3
 8002854:	b25b      	sxtb	r3, r3
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	b25a      	sxtb	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7e5b      	ldrb	r3, [r3, #25]
 8002860:	105b      	asrs	r3, r3, #1
 8002862:	b25b      	sxtb	r3, r3
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	b25b      	sxtb	r3, r3
 800286a:	4313      	orrs	r3, r2
 800286c:	b25a      	sxtb	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7e5b      	ldrb	r3, [r3, #25]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	b25b      	sxtb	r3, r3
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	b25b      	sxtb	r3, r3
 800287c:	4313      	orrs	r3, r2
 800287e:	b25a      	sxtb	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7e5b      	ldrb	r3, [r3, #25]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	b25b      	sxtb	r3, r3
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	b25b      	sxtb	r3, r3
 800288e:	4313      	orrs	r3, r2
 8002890:	b25b      	sxtb	r3, r3
 8002892:	b2da      	uxtb	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_1);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	7e1b      	ldrb	r3, [r3, #24]
 800289c:	10db      	asrs	r3, r3, #3
 800289e:	b25b      	sxtb	r3, r3
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	b25a      	sxtb	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7e1b      	ldrb	r3, [r3, #24]
 80028aa:	105b      	asrs	r3, r3, #1
 80028ac:	b25b      	sxtb	r3, r3
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	b25b      	sxtb	r3, r3
 80028b4:	4313      	orrs	r3, r2
 80028b6:	b25a      	sxtb	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7e1b      	ldrb	r3, [r3, #24]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	b25b      	sxtb	r3, r3
 80028c6:	4313      	orrs	r3, r2
 80028c8:	b25a      	sxtb	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7e1b      	ldrb	r3, [r3, #24]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	b25b      	sxtb	r3, r3
 80028d8:	4313      	orrs	r3, r2
 80028da:	b25b      	sxtb	r3, r3
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	761a      	strb	r2, [r3, #24]
 80028e2:	e099      	b.n	8002a18 <ws2812b_init+0x328>
 80028e4:	200007a8 	.word	0x200007a8
 80028e8:	200007ac 	.word	0x200007ac
 80028ec:	0800ccec 	.word	0x0800ccec
 80028f0:	0800cd10 	.word	0x0800cd10
 80028f4:	0800cd38 	.word	0x0800cd38
 80028f8:	0800cd60 	.word	0x0800cd60
 80028fc:	0800cd88 	.word	0x0800cd88
 8002900:	0800cdb4 	.word	0x0800cdb4
 8002904:	0800cde8 	.word	0x0800cde8
    } else {
      ws->state.pulse_0 = WS2812B_BYTE_REVERSE(ws->state.pulse_0);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	7e5b      	ldrb	r3, [r3, #25]
 800290c:	09db      	lsrs	r3, r3, #7
 800290e:	b2db      	uxtb	r3, r3
 8002910:	b25a      	sxtb	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	7e5b      	ldrb	r3, [r3, #25]
 8002916:	115b      	asrs	r3, r3, #5
 8002918:	b25b      	sxtb	r3, r3
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	b25b      	sxtb	r3, r3
 8002920:	4313      	orrs	r3, r2
 8002922:	b25a      	sxtb	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7e5b      	ldrb	r3, [r3, #25]
 8002928:	10db      	asrs	r3, r3, #3
 800292a:	b25b      	sxtb	r3, r3
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	b25b      	sxtb	r3, r3
 8002932:	4313      	orrs	r3, r2
 8002934:	b25a      	sxtb	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	7e5b      	ldrb	r3, [r3, #25]
 800293a:	105b      	asrs	r3, r3, #1
 800293c:	b25b      	sxtb	r3, r3
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	b25b      	sxtb	r3, r3
 8002944:	4313      	orrs	r3, r2
 8002946:	b25a      	sxtb	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	7e5b      	ldrb	r3, [r3, #25]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	b25b      	sxtb	r3, r3
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	b25b      	sxtb	r3, r3
 8002956:	4313      	orrs	r3, r2
 8002958:	b25a      	sxtb	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	7e5b      	ldrb	r3, [r3, #25]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	b25b      	sxtb	r3, r3
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	b25b      	sxtb	r3, r3
 8002968:	4313      	orrs	r3, r2
 800296a:	b25a      	sxtb	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7e5b      	ldrb	r3, [r3, #25]
 8002970:	015b      	lsls	r3, r3, #5
 8002972:	b25b      	sxtb	r3, r3
 8002974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002978:	b25b      	sxtb	r3, r3
 800297a:	4313      	orrs	r3, r2
 800297c:	b25a      	sxtb	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7e5b      	ldrb	r3, [r3, #25]
 8002982:	01db      	lsls	r3, r3, #7
 8002984:	b25b      	sxtb	r3, r3
 8002986:	4313      	orrs	r3, r2
 8002988:	b25b      	sxtb	r3, r3
 800298a:	b2da      	uxtb	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_BYTE_REVERSE(ws->state.pulse_1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	7e1b      	ldrb	r3, [r3, #24]
 8002994:	09db      	lsrs	r3, r3, #7
 8002996:	b2db      	uxtb	r3, r3
 8002998:	b25a      	sxtb	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	7e1b      	ldrb	r3, [r3, #24]
 800299e:	115b      	asrs	r3, r3, #5
 80029a0:	b25b      	sxtb	r3, r3
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	b25b      	sxtb	r3, r3
 80029a8:	4313      	orrs	r3, r2
 80029aa:	b25a      	sxtb	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7e1b      	ldrb	r3, [r3, #24]
 80029b0:	10db      	asrs	r3, r3, #3
 80029b2:	b25b      	sxtb	r3, r3
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	b25b      	sxtb	r3, r3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	b25a      	sxtb	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	7e1b      	ldrb	r3, [r3, #24]
 80029c2:	105b      	asrs	r3, r3, #1
 80029c4:	b25b      	sxtb	r3, r3
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	4313      	orrs	r3, r2
 80029ce:	b25a      	sxtb	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7e1b      	ldrb	r3, [r3, #24]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	b25b      	sxtb	r3, r3
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	b25b      	sxtb	r3, r3
 80029de:	4313      	orrs	r3, r2
 80029e0:	b25a      	sxtb	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7e1b      	ldrb	r3, [r3, #24]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	b25b      	sxtb	r3, r3
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	b25b      	sxtb	r3, r3
 80029f0:	4313      	orrs	r3, r2
 80029f2:	b25a      	sxtb	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7e1b      	ldrb	r3, [r3, #24]
 80029f8:	015b      	lsls	r3, r3, #5
 80029fa:	b25b      	sxtb	r3, r3
 80029fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a00:	b25b      	sxtb	r3, r3
 8002a02:	4313      	orrs	r3, r2
 8002a04:	b25a      	sxtb	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	7e1b      	ldrb	r3, [r3, #24]
 8002a0a:	01db      	lsls	r3, r3, #7
 8002a0c:	b25b      	sxtb	r3, r3
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	761a      	strb	r2, [r3, #24]
    }
  }

  ws->state.iteration_index = 0;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	61da      	str	r2, [r3, #28]

  return 0;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <ws2812b_required_buffer_len>:

uint32_t ws2812b_required_buffer_len(ws2812b_handle_t *ws) {
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  return WS2812B_REQUIRED_BUFFER_LEN(ws->led_count, ws->config.packing, ws->config.prefix_len,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <ws2812b_required_buffer_len+0x18>
 8002a3c:	2318      	movs	r3, #24
 8002a3e:	e000      	b.n	8002a42 <ws2812b_required_buffer_len+0x1a>
 8002a40:	230c      	movs	r3, #12
 8002a42:	fb03 f202 	mul.w	r2, r3, r2
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	441a      	add	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4413      	add	r3, r2
                                     ws->config.suffix_len);
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <ws2812b_fill_buffer>:

void ws2812b_fill_buffer(ws2812b_handle_t *ws, uint8_t *buffer) {
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
  ws2812b_led_t *led = ws->leds;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	617b      	str	r3, [r7, #20]

  // Add 0x00 prefix
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	e008      	b.n	8002a86 <ws2812b_fill_buffer+0x28>
    *buffer = 0x00;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
    buffer++;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	3301      	adds	r3, #1
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d3f1      	bcc.n	8002a74 <ws2812b_fill_buffer+0x16>
  }

  // Fill buffer
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	e01a      	b.n	8002acc <ws2812b_fill_buffer+0x6e>
    add_byte(ws, led->green, &buffer);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	785b      	ldrb	r3, [r3, #1]
 8002a9a:	463a      	mov	r2, r7
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f85a 	bl	8002b58 <add_byte>
    add_byte(ws, led->red, &buffer);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	463a      	mov	r2, r7
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f853 	bl	8002b58 <add_byte>
    add_byte(ws, led->blue, &buffer);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	789b      	ldrb	r3, [r3, #2]
 8002ab6:	463a      	mov	r2, r7
 8002ab8:	4619      	mov	r1, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f84c 	bl	8002b58 <add_byte>
    led++;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	3303      	adds	r3, #3
 8002ac4:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d3df      	bcc.n	8002a96 <ws2812b_fill_buffer+0x38>
  }

  // Add 0x00 suffix
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	e008      	b.n	8002aee <ws2812b_fill_buffer+0x90>
    *buffer = 0x00;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
    buffer++;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	3301      	adds	r3, #1
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d3f1      	bcc.n	8002adc <ws2812b_fill_buffer+0x7e>
  }
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <set_init_error_msg>:
  return 0x00;
}

// ======== Private Functions ======================================================================

static void set_init_error_msg(const char *error_msg) {
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
#ifndef WS2812B_DISABLE_ERROR_MSG
  // If error mesages are enabled, copy over the error message
  int i = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]

  // Copy content
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 8002b10:	e00b      	b.n	8002b2a <set_init_error_msg+0x26>
    error_msg_buf[i] = error_msg[i];
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	4413      	add	r3, r2
 8002b18:	7819      	ldrb	r1, [r3, #0]
 8002b1a:	4a0e      	ldr	r2, [pc, #56]	; (8002b54 <set_init_error_msg+0x50>)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	460a      	mov	r2, r1
 8002b22:	701a      	strb	r2, [r3, #0]
    i++;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3301      	adds	r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b3a      	cmp	r3, #58	; 0x3a
 8002b2e:	dc05      	bgt.n	8002b3c <set_init_error_msg+0x38>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ea      	bne.n	8002b12 <set_init_error_msg+0xe>
  }

  // Terminate string
  error_msg_buf[i] = '\0';
 8002b3c:	4a05      	ldr	r2, [pc, #20]	; (8002b54 <set_init_error_msg+0x50>)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4413      	add	r3, r2
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
#else
  // Otherwise avoid the unused-args warning
  (void)(error_msg);
#endif /* WS2812B_DISABLE_ERROR_MSG */
}
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	200007ac 	.word	0x200007ac

08002b58 <add_byte>:

static void add_byte(ws2812b_handle_t *ws, uint8_t value, uint8_t **buffer) {
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	460b      	mov	r3, r1
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	72fb      	strb	r3, [r7, #11]
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d118      	bne.n	8002ba0 <add_byte+0x48>

    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	e011      	b.n	8002b98 <add_byte+0x40>
      **buffer = construct_double_pulse(ws, b, value);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681c      	ldr	r4, [r3, #0]
 8002b78:	7afb      	ldrb	r3, [r7, #11]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	6979      	ldr	r1, [r7, #20]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f844 	bl	8002c0c <construct_double_pulse>
 8002b84:	4603      	mov	r3, r0
 8002b86:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3302      	adds	r3, #2
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2b07      	cmp	r3, #7
 8002b9c:	d9ea      	bls.n	8002b74 <add_byte+0x1c>
    for (uint_fast8_t b = 0; b < 8; b++) {
      **buffer = construct_single_pulse(ws, b, value);
      ++*buffer;
    }
  }
}
 8002b9e:	e017      	b.n	8002bd0 <add_byte+0x78>
    for (uint_fast8_t b = 0; b < 8; b++) {
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	e011      	b.n	8002bca <add_byte+0x72>
      **buffer = construct_single_pulse(ws, b, value);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681c      	ldr	r4, [r3, #0]
 8002baa:	7afb      	ldrb	r3, [r7, #11]
 8002bac:	461a      	mov	r2, r3
 8002bae:	6939      	ldr	r1, [r7, #16]
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f811 	bl	8002bd8 <construct_single_pulse>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b++) {
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b07      	cmp	r3, #7
 8002bce:	d9ea      	bls.n	8002ba6 <add_byte+0x4e>
}
 8002bd0:	bf00      	nop
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd90      	pop	{r4, r7, pc}

08002bd8 <construct_single_pulse>:

static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	4613      	mov	r3, r2
 8002be4:	71fb      	strb	r3, [r7, #7]
  return (value & ((0x80U) >> b) ? ws->state.pulse_1 : ws->state.pulse_0);
 8002be6:	79fa      	ldrb	r2, [r7, #7]
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	fa21 f303 	lsr.w	r3, r1, r3
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <construct_single_pulse+0x24>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	7e1b      	ldrb	r3, [r3, #24]
 8002bfa:	e001      	b.n	8002c00 <construct_single_pulse+0x28>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	7e5b      	ldrb	r3, [r3, #25]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <construct_double_pulse>:

static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	4613      	mov	r3, r2
 8002c18:	71fb      	strb	r3, [r7, #7]
  uint8_t result;
  uint8_t pulse_1 = ws->state.pulse_1;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	7e1b      	ldrb	r3, [r3, #24]
 8002c1e:	75bb      	strb	r3, [r7, #22]
  uint8_t pulse_0 = ws->state.pulse_0;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	7e5b      	ldrb	r3, [r3, #25]
 8002c24:	757b      	strb	r3, [r7, #21]

  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	791b      	ldrb	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d121      	bne.n	8002c72 <construct_double_pulse+0x66>
    // MSB is first
    result = value & ((0x80U) >> (b + 1)) ? pulse_1 : pulse_0;
 8002c2e:	79fa      	ldrb	r2, [r7, #7]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	3301      	adds	r3, #1
 8002c34:	2180      	movs	r1, #128	; 0x80
 8002c36:	fa21 f303 	lsr.w	r3, r1, r3
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <construct_double_pulse+0x38>
 8002c40:	7dbb      	ldrb	r3, [r7, #22]
 8002c42:	e000      	b.n	8002c46 <construct_double_pulse+0x3a>
 8002c44:	7d7b      	ldrb	r3, [r7, #21]
 8002c46:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8002c48:	79fa      	ldrb	r2, [r7, #7]
 8002c4a:	2180      	movs	r1, #128	; 0x80
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <construct_double_pulse+0x54>
 8002c58:	7dbb      	ldrb	r3, [r7, #22]
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	b25b      	sxtb	r3, r3
 8002c5e:	e002      	b.n	8002c66 <construct_double_pulse+0x5a>
 8002c60:	7d7b      	ldrb	r3, [r7, #21]
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	b25b      	sxtb	r3, r3
 8002c66:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	b25b      	sxtb	r3, r3
 8002c6e:	75fb      	strb	r3, [r7, #23]
 8002c70:	e020      	b.n	8002cb4 <construct_double_pulse+0xa8>
  } else {
    // LSB is first
    result = value & ((0x80U) >> (b)) ? pulse_1 : pulse_0;
 8002c72:	79fa      	ldrb	r2, [r7, #7]
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	fa21 f303 	lsr.w	r3, r1, r3
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <construct_double_pulse+0x7a>
 8002c82:	7dbb      	ldrb	r3, [r7, #22]
 8002c84:	e000      	b.n	8002c88 <construct_double_pulse+0x7c>
 8002c86:	7d7b      	ldrb	r3, [r7, #21]
 8002c88:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b + 1)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8002c8a:	79fa      	ldrb	r2, [r7, #7]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	2180      	movs	r1, #128	; 0x80
 8002c92:	fa21 f303 	lsr.w	r3, r1, r3
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <construct_double_pulse+0x98>
 8002c9c:	7dbb      	ldrb	r3, [r7, #22]
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	b25b      	sxtb	r3, r3
 8002ca2:	e002      	b.n	8002caa <construct_double_pulse+0x9e>
 8002ca4:	7d7b      	ldrb	r3, [r7, #21]
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	b25b      	sxtb	r3, r3
 8002caa:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	b25b      	sxtb	r3, r3
 8002cb2:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cc8:	480d      	ldr	r0, [pc, #52]	; (8002d00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cca:	490e      	ldr	r1, [pc, #56]	; (8002d04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ccc:	4a0e      	ldr	r2, [pc, #56]	; (8002d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cd0:	e002      	b.n	8002cd8 <LoopCopyDataInit>

08002cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cd6:	3304      	adds	r3, #4

08002cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cdc:	d3f9      	bcc.n	8002cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cde:	4a0b      	ldr	r2, [pc, #44]	; (8002d0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ce0:	4c0b      	ldr	r4, [pc, #44]	; (8002d10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ce4:	e001      	b.n	8002cea <LoopFillZerobss>

08002ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ce8:	3204      	adds	r2, #4

08002cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cec:	d3fb      	bcc.n	8002ce6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cee:	f7ff fba3 	bl	8002438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cf2:	f009 f979 	bl	800bfe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cf6:	f7fe fe3d 	bl	8001974 <main>
  bx  lr    
 8002cfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cfc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d04:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8002d08:	0800e5d4 	.word	0x0800e5d4
  ldr r2, =_sbss
 8002d0c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002d10:	20005318 	.word	0x20005318

08002d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d14:	e7fe      	b.n	8002d14 <ADC_IRQHandler>

08002d16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d1a:	2003      	movs	r0, #3
 8002d1c:	f000 f8f9 	bl	8002f12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d20:	2005      	movs	r0, #5
 8002d22:	f7ff fa2d 	bl	8002180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d26:	f7ff fa03 	bl	8002130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_IncTick+0x20>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_IncTick+0x24>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <HAL_IncTick+0x24>)
 8002d42:	6013      	str	r3, [r2, #0]
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	2000005c 	.word	0x2000005c
 8002d54:	200007e8 	.word	0x200007e8

08002d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_GetTick+0x14>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	200007e8 	.word	0x200007e8

08002d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d78:	f7ff ffee 	bl	8002d58 <HAL_GetTick>
 8002d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d005      	beq.n	8002d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <HAL_Delay+0x44>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d96:	bf00      	nop
 8002d98:	f7ff ffde 	bl	8002d58 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d8f7      	bhi.n	8002d98 <HAL_Delay+0x28>
  {
  }
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	2000005c 	.word	0x2000005c

08002db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <__NVIC_SetPriorityGrouping+0x40>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <__NVIC_SetPriorityGrouping+0x44>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002de6:	4a04      	ldr	r2, [pc, #16]	; (8002df8 <__NVIC_SetPriorityGrouping+0x40>)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	60d3      	str	r3, [r2, #12]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	e000ed00 	.word	0xe000ed00
 8002dfc:	05fa0000 	.word	0x05fa0000

08002e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <__NVIC_GetPriorityGrouping+0x18>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	0a1b      	lsrs	r3, r3, #8
 8002e0a:	f003 0307 	and.w	r3, r3, #7
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	e000ed00 	.word	0xe000ed00

08002e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	db0b      	blt.n	8002e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	f003 021f 	and.w	r2, r3, #31
 8002e34:	4907      	ldr	r1, [pc, #28]	; (8002e54 <__NVIC_EnableIRQ+0x38>)
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	2001      	movs	r0, #1
 8002e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	e000e100 	.word	0xe000e100

08002e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	6039      	str	r1, [r7, #0]
 8002e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	db0a      	blt.n	8002e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	490c      	ldr	r1, [pc, #48]	; (8002ea4 <__NVIC_SetPriority+0x4c>)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	0112      	lsls	r2, r2, #4
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e80:	e00a      	b.n	8002e98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	4908      	ldr	r1, [pc, #32]	; (8002ea8 <__NVIC_SetPriority+0x50>)
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	3b04      	subs	r3, #4
 8002e90:	0112      	lsls	r2, r2, #4
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	440b      	add	r3, r1
 8002e96:	761a      	strb	r2, [r3, #24]
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	e000e100 	.word	0xe000e100
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b089      	sub	sp, #36	; 0x24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f1c3 0307 	rsb	r3, r3, #7
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	bf28      	it	cs
 8002eca:	2304      	movcs	r3, #4
 8002ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	2b06      	cmp	r3, #6
 8002ed4:	d902      	bls.n	8002edc <NVIC_EncodePriority+0x30>
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3b03      	subs	r3, #3
 8002eda:	e000      	b.n	8002ede <NVIC_EncodePriority+0x32>
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43da      	mvns	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	401a      	ands	r2, r3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	fa01 f303 	lsl.w	r3, r1, r3
 8002efe:	43d9      	mvns	r1, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f04:	4313      	orrs	r3, r2
         );
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3724      	adds	r7, #36	; 0x24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ff4c 	bl	8002db8 <__NVIC_SetPriorityGrouping>
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f3a:	f7ff ff61 	bl	8002e00 <__NVIC_GetPriorityGrouping>
 8002f3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	6978      	ldr	r0, [r7, #20]
 8002f46:	f7ff ffb1 	bl	8002eac <NVIC_EncodePriority>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff ff80 	bl	8002e58 <__NVIC_SetPriority>
}
 8002f58:	bf00      	nop
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff ff54 	bl	8002e1c <__NVIC_EnableIRQ>
}
 8002f74:	bf00      	nop
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e014      	b.n	8002fb8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	791b      	ldrb	r3, [r3, #4]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d105      	bne.n	8002fa4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fd fcfe 	bl	80009a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	795b      	ldrb	r3, [r3, #5]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_DAC_Start+0x16>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e040      	b.n	8003058 <HAL_DAC_Start+0x98>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6819      	ldr	r1, [r3, #0]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2201      	movs	r2, #1
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10f      	bne.n	8003020 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800300a:	2b3c      	cmp	r3, #60	; 0x3c
 800300c:	d11d      	bne.n	800304a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0201 	orr.w	r2, r2, #1
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	e014      	b.n	800304a <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	213c      	movs	r1, #60	; 0x3c
 8003032:	fa01 f303 	lsl.w	r3, r1, r3
 8003036:	429a      	cmp	r2, r3
 8003038:	d107      	bne.n	800304a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0202 	orr.w	r2, r2, #2
 8003048:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307a:	d120      	bne.n	80030be <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003082:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308a:	d118      	bne.n	80030be <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2204      	movs	r2, #4
 8003090:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030b6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f852 	bl	8003162 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030cc:	d120      	bne.n	8003110 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030dc:	d118      	bne.n	8003110 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2204      	movs	r2, #4
 80030e2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f043 0202 	orr.w	r2, r3, #2
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80030f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003108:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f882 	bl	8003214 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d105      	bne.n	8003142 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4413      	add	r3, r2
 800313c:	3308      	adds	r3, #8
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	e004      	b.n	800314c <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4413      	add	r3, r2
 8003148:	3314      	adds	r3, #20
 800314a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	461a      	mov	r2, r3
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003176:	b480      	push	{r7}
 8003178:	b087      	sub	sp, #28
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	795b      	ldrb	r3, [r3, #5]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_DAC_ConfigChannel+0x18>
 800318a:	2302      	movs	r3, #2
 800318c:	e03c      	b.n	8003208 <HAL_DAC_ConfigChannel+0x92>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2202      	movs	r2, #2
 8003198:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4013      	ands	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6819      	ldr	r1, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	22c0      	movs	r2, #192	; 0xc0
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43da      	mvns	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	400a      	ands	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	371c      	adds	r7, #28
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003234:	f7ff fd90 	bl	8002d58 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e099      	b.n	8003378 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003264:	e00f      	b.n	8003286 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003266:	f7ff fd77 	bl	8002d58 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b05      	cmp	r3, #5
 8003272:	d908      	bls.n	8003286 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2203      	movs	r2, #3
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e078      	b.n	8003378 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1e8      	bne.n	8003266 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4b38      	ldr	r3, [pc, #224]	; (8003380 <HAL_DMA_Init+0x158>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d107      	bne.n	80032f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	4313      	orrs	r3, r2
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0307 	bic.w	r3, r3, #7
 8003306:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2b04      	cmp	r3, #4
 8003318:	d117      	bne.n	800334a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00e      	beq.n	800334a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fb09 	bl	8003944 <DMA_CheckFifoParam>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2240      	movs	r2, #64	; 0x40
 800333c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003346:	2301      	movs	r3, #1
 8003348:	e016      	b.n	8003378 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fac0 	bl	80038d8 <DMA_CalcBaseAndBitshift>
 8003358:	4603      	mov	r3, r0
 800335a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003360:	223f      	movs	r2, #63	; 0x3f
 8003362:	409a      	lsls	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	e010803f 	.word	0xe010803f

08003384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_DMA_Start_IT+0x26>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e048      	b.n	800343c <HAL_DMA_Start_IT+0xb8>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d137      	bne.n	800342e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2202      	movs	r2, #2
 80033c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fa52 	bl	800387c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033dc:	223f      	movs	r2, #63	; 0x3f
 80033de:	409a      	lsls	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0216 	orr.w	r2, r2, #22
 80033f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003402:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	2b00      	cmp	r3, #0
 800340a:	d007      	beq.n	800341c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0208 	orr.w	r2, r2, #8
 800341a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e005      	b.n	800343a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003436:	2302      	movs	r3, #2
 8003438:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800343a:	7dfb      	ldrb	r3, [r7, #23]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003450:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003452:	f7ff fc81 	bl	8002d58 <HAL_GetTick>
 8003456:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d008      	beq.n	8003476 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2280      	movs	r2, #128	; 0x80
 8003468:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e052      	b.n	800351c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0216 	bic.w	r2, r2, #22
 8003484:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003494:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d103      	bne.n	80034a6 <HAL_DMA_Abort+0x62>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d007      	beq.n	80034b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0208 	bic.w	r2, r2, #8
 80034b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034c6:	e013      	b.n	80034f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034c8:	f7ff fc46 	bl	8002d58 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	d90c      	bls.n	80034f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2203      	movs	r2, #3
 80034e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e015      	b.n	800351c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1e4      	bne.n	80034c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003502:	223f      	movs	r2, #63	; 0x3f
 8003504:	409a      	lsls	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d004      	beq.n	8003542 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2280      	movs	r2, #128	; 0x80
 800353c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e00c      	b.n	800355c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2205      	movs	r2, #5
 8003546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003574:	4b8e      	ldr	r3, [pc, #568]	; (80037b0 <HAL_DMA_IRQHandler+0x248>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a8e      	ldr	r2, [pc, #568]	; (80037b4 <HAL_DMA_IRQHandler+0x24c>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	0a9b      	lsrs	r3, r3, #10
 8003580:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	2208      	movs	r2, #8
 8003594:	409a      	lsls	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01a      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d013      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0204 	bic.w	r2, r2, #4
 80035ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c0:	2208      	movs	r2, #8
 80035c2:	409a      	lsls	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035cc:	f043 0201 	orr.w	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	2201      	movs	r2, #1
 80035da:	409a      	lsls	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d012      	beq.n	800360a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00b      	beq.n	800360a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f6:	2201      	movs	r2, #1
 80035f8:	409a      	lsls	r2, r3
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	f043 0202 	orr.w	r2, r3, #2
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360e:	2204      	movs	r2, #4
 8003610:	409a      	lsls	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4013      	ands	r3, r2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d012      	beq.n	8003640 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	2204      	movs	r2, #4
 800362e:	409a      	lsls	r2, r3
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	f043 0204 	orr.w	r2, r3, #4
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003644:	2210      	movs	r2, #16
 8003646:	409a      	lsls	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d043      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d03c      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003662:	2210      	movs	r2, #16
 8003664:	409a      	lsls	r2, r3
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d018      	beq.n	80036aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d108      	bne.n	8003698 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d024      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
 8003696:	e01f      	b.n	80036d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01b      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
 80036a8:	e016      	b.n	80036d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d107      	bne.n	80036c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0208 	bic.w	r2, r2, #8
 80036c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036dc:	2220      	movs	r2, #32
 80036de:	409a      	lsls	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 808f 	beq.w	8003808 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8087 	beq.w	8003808 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fe:	2220      	movs	r2, #32
 8003700:	409a      	lsls	r2, r3
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b05      	cmp	r3, #5
 8003710:	d136      	bne.n	8003780 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0216 	bic.w	r2, r2, #22
 8003720:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003730:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d103      	bne.n	8003742 <HAL_DMA_IRQHandler+0x1da>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0208 	bic.w	r2, r2, #8
 8003750:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003756:	223f      	movs	r2, #63	; 0x3f
 8003758:	409a      	lsls	r2, r3
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003772:	2b00      	cmp	r3, #0
 8003774:	d07e      	beq.n	8003874 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
        }
        return;
 800377e:	e079      	b.n	8003874 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01d      	beq.n	80037ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10d      	bne.n	80037b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d031      	beq.n	8003808 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4798      	blx	r3
 80037ac:	e02c      	b.n	8003808 <HAL_DMA_IRQHandler+0x2a0>
 80037ae:	bf00      	nop
 80037b0:	20000054 	.word	0x20000054
 80037b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d023      	beq.n	8003808 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	4798      	blx	r3
 80037c8:	e01e      	b.n	8003808 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10f      	bne.n	80037f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0210 	bic.w	r2, r2, #16
 80037e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	2b00      	cmp	r3, #0
 800380e:	d032      	beq.n	8003876 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d022      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2205      	movs	r2, #5
 8003820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0201 	bic.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	3301      	adds	r3, #1
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	429a      	cmp	r2, r3
 800383e:	d307      	bcc.n	8003850 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f2      	bne.n	8003834 <HAL_DMA_IRQHandler+0x2cc>
 800384e:	e000      	b.n	8003852 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003850:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
 8003872:	e000      	b.n	8003876 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003874:	bf00      	nop
    }
  }
}
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003898:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d108      	bne.n	80038bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038ba:	e007      	b.n	80038cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	60da      	str	r2, [r3, #12]
}
 80038cc:	bf00      	nop
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	3b10      	subs	r3, #16
 80038e8:	4a13      	ldr	r2, [pc, #76]	; (8003938 <DMA_CalcBaseAndBitshift+0x60>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	091b      	lsrs	r3, r3, #4
 80038f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038f2:	4a12      	ldr	r2, [pc, #72]	; (800393c <DMA_CalcBaseAndBitshift+0x64>)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4413      	add	r3, r2
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d908      	bls.n	8003918 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <DMA_CalcBaseAndBitshift+0x68>)
 800390e:	4013      	ands	r3, r2
 8003910:	1d1a      	adds	r2, r3, #4
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	659a      	str	r2, [r3, #88]	; 0x58
 8003916:	e006      	b.n	8003926 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	4b08      	ldr	r3, [pc, #32]	; (8003940 <DMA_CalcBaseAndBitshift+0x68>)
 8003920:	4013      	ands	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	aaaaaaab 	.word	0xaaaaaaab
 800393c:	0800e588 	.word	0x0800e588
 8003940:	fffffc00 	.word	0xfffffc00

08003944 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d11f      	bne.n	800399e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b03      	cmp	r3, #3
 8003962:	d856      	bhi.n	8003a12 <DMA_CheckFifoParam+0xce>
 8003964:	a201      	add	r2, pc, #4	; (adr r2, 800396c <DMA_CheckFifoParam+0x28>)
 8003966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396a:	bf00      	nop
 800396c:	0800397d 	.word	0x0800397d
 8003970:	0800398f 	.word	0x0800398f
 8003974:	0800397d 	.word	0x0800397d
 8003978:	08003a13 	.word	0x08003a13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d046      	beq.n	8003a16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800398c:	e043      	b.n	8003a16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003996:	d140      	bne.n	8003a1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800399c:	e03d      	b.n	8003a1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a6:	d121      	bne.n	80039ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d837      	bhi.n	8003a1e <DMA_CheckFifoParam+0xda>
 80039ae:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <DMA_CheckFifoParam+0x70>)
 80039b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b4:	080039c5 	.word	0x080039c5
 80039b8:	080039cb 	.word	0x080039cb
 80039bc:	080039c5 	.word	0x080039c5
 80039c0:	080039dd 	.word	0x080039dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	73fb      	strb	r3, [r7, #15]
      break;
 80039c8:	e030      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d025      	beq.n	8003a22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039da:	e022      	b.n	8003a22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039e4:	d11f      	bne.n	8003a26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039ea:	e01c      	b.n	8003a26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d903      	bls.n	80039fa <DMA_CheckFifoParam+0xb6>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d003      	beq.n	8003a00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039f8:	e018      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
      break;
 80039fe:	e015      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00e      	beq.n	8003a2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a10:	e00b      	b.n	8003a2a <DMA_CheckFifoParam+0xe6>
      break;
 8003a12:	bf00      	nop
 8003a14:	e00a      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;
 8003a16:	bf00      	nop
 8003a18:	e008      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;
 8003a1a:	bf00      	nop
 8003a1c:	e006      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;
 8003a1e:	bf00      	nop
 8003a20:	e004      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;
 8003a22:	bf00      	nop
 8003a24:	e002      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;   
 8003a26:	bf00      	nop
 8003a28:	e000      	b.n	8003a2c <DMA_CheckFifoParam+0xe8>
      break;
 8003a2a:	bf00      	nop
    }
  } 
  
  return status; 
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop

08003a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b089      	sub	sp, #36	; 0x24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
 8003a5a:	e175      	b.n	8003d48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	f040 8164 	bne.w	8003d42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d005      	beq.n	8003a92 <HAL_GPIO_Init+0x56>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d130      	bne.n	8003af4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ac8:	2201      	movs	r2, #1
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	f003 0201 	and.w	r2, r3, #1
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d017      	beq.n	8003b30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	2203      	movs	r2, #3
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d123      	bne.n	8003b84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	08da      	lsrs	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3208      	adds	r2, #8
 8003b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	220f      	movs	r2, #15
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	08da      	lsrs	r2, r3, #3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3208      	adds	r2, #8
 8003b7e:	69b9      	ldr	r1, [r7, #24]
 8003b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	2203      	movs	r2, #3
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 0203 	and.w	r2, r3, #3
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80be 	beq.w	8003d42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc6:	4b66      	ldr	r3, [pc, #408]	; (8003d60 <HAL_GPIO_Init+0x324>)
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	4a65      	ldr	r2, [pc, #404]	; (8003d60 <HAL_GPIO_Init+0x324>)
 8003bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bd2:	4b63      	ldr	r3, [pc, #396]	; (8003d60 <HAL_GPIO_Init+0x324>)
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003bde:	4a61      	ldr	r2, [pc, #388]	; (8003d64 <HAL_GPIO_Init+0x328>)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	089b      	lsrs	r3, r3, #2
 8003be4:	3302      	adds	r3, #2
 8003be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	220f      	movs	r2, #15
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a58      	ldr	r2, [pc, #352]	; (8003d68 <HAL_GPIO_Init+0x32c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d037      	beq.n	8003c7a <HAL_GPIO_Init+0x23e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a57      	ldr	r2, [pc, #348]	; (8003d6c <HAL_GPIO_Init+0x330>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d031      	beq.n	8003c76 <HAL_GPIO_Init+0x23a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a56      	ldr	r2, [pc, #344]	; (8003d70 <HAL_GPIO_Init+0x334>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d02b      	beq.n	8003c72 <HAL_GPIO_Init+0x236>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a55      	ldr	r2, [pc, #340]	; (8003d74 <HAL_GPIO_Init+0x338>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d025      	beq.n	8003c6e <HAL_GPIO_Init+0x232>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a54      	ldr	r2, [pc, #336]	; (8003d78 <HAL_GPIO_Init+0x33c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01f      	beq.n	8003c6a <HAL_GPIO_Init+0x22e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a53      	ldr	r2, [pc, #332]	; (8003d7c <HAL_GPIO_Init+0x340>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d019      	beq.n	8003c66 <HAL_GPIO_Init+0x22a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a52      	ldr	r2, [pc, #328]	; (8003d80 <HAL_GPIO_Init+0x344>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <HAL_GPIO_Init+0x226>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a51      	ldr	r2, [pc, #324]	; (8003d84 <HAL_GPIO_Init+0x348>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00d      	beq.n	8003c5e <HAL_GPIO_Init+0x222>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a50      	ldr	r2, [pc, #320]	; (8003d88 <HAL_GPIO_Init+0x34c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d007      	beq.n	8003c5a <HAL_GPIO_Init+0x21e>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a4f      	ldr	r2, [pc, #316]	; (8003d8c <HAL_GPIO_Init+0x350>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d101      	bne.n	8003c56 <HAL_GPIO_Init+0x21a>
 8003c52:	2309      	movs	r3, #9
 8003c54:	e012      	b.n	8003c7c <HAL_GPIO_Init+0x240>
 8003c56:	230a      	movs	r3, #10
 8003c58:	e010      	b.n	8003c7c <HAL_GPIO_Init+0x240>
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	e00e      	b.n	8003c7c <HAL_GPIO_Init+0x240>
 8003c5e:	2307      	movs	r3, #7
 8003c60:	e00c      	b.n	8003c7c <HAL_GPIO_Init+0x240>
 8003c62:	2306      	movs	r3, #6
 8003c64:	e00a      	b.n	8003c7c <HAL_GPIO_Init+0x240>
 8003c66:	2305      	movs	r3, #5
 8003c68:	e008      	b.n	8003c7c <HAL_GPIO_Init+0x240>
 8003c6a:	2304      	movs	r3, #4
 8003c6c:	e006      	b.n	8003c7c <HAL_GPIO_Init+0x240>
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e004      	b.n	8003c7c <HAL_GPIO_Init+0x240>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e002      	b.n	8003c7c <HAL_GPIO_Init+0x240>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <HAL_GPIO_Init+0x240>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	f002 0203 	and.w	r2, r2, #3
 8003c82:	0092      	lsls	r2, r2, #2
 8003c84:	4093      	lsls	r3, r2
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c8c:	4935      	ldr	r1, [pc, #212]	; (8003d64 <HAL_GPIO_Init+0x328>)
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	089b      	lsrs	r3, r3, #2
 8003c92:	3302      	adds	r3, #2
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c9a:	4b3d      	ldr	r3, [pc, #244]	; (8003d90 <HAL_GPIO_Init+0x354>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cbe:	4a34      	ldr	r2, [pc, #208]	; (8003d90 <HAL_GPIO_Init+0x354>)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cc4:	4b32      	ldr	r3, [pc, #200]	; (8003d90 <HAL_GPIO_Init+0x354>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ce8:	4a29      	ldr	r2, [pc, #164]	; (8003d90 <HAL_GPIO_Init+0x354>)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cee:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <HAL_GPIO_Init+0x354>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d12:	4a1f      	ldr	r2, [pc, #124]	; (8003d90 <HAL_GPIO_Init+0x354>)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d18:	4b1d      	ldr	r3, [pc, #116]	; (8003d90 <HAL_GPIO_Init+0x354>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d3c:	4a14      	ldr	r2, [pc, #80]	; (8003d90 <HAL_GPIO_Init+0x354>)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	3301      	adds	r3, #1
 8003d46:	61fb      	str	r3, [r7, #28]
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b0f      	cmp	r3, #15
 8003d4c:	f67f ae86 	bls.w	8003a5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	3724      	adds	r7, #36	; 0x24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40013800 	.word	0x40013800
 8003d68:	40020000 	.word	0x40020000
 8003d6c:	40020400 	.word	0x40020400
 8003d70:	40020800 	.word	0x40020800
 8003d74:	40020c00 	.word	0x40020c00
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	40021400 	.word	0x40021400
 8003d80:	40021800 	.word	0x40021800
 8003d84:	40021c00 	.word	0x40021c00
 8003d88:	40022000 	.word	0x40022000
 8003d8c:	40022400 	.word	0x40022400
 8003d90:	40013c00 	.word	0x40013c00

08003d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	807b      	strh	r3, [r7, #2]
 8003da0:	4613      	mov	r3, r2
 8003da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003da4:	787b      	ldrb	r3, [r7, #1]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003daa:	887a      	ldrh	r2, [r7, #2]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003db0:	e003      	b.n	8003dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003db2:	887b      	ldrh	r3, [r7, #2]
 8003db4:	041a      	lsls	r2, r3, #16
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	619a      	str	r2, [r3, #24]
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b085      	sub	sp, #20
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dd8:	887a      	ldrh	r2, [r7, #2]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	041a      	lsls	r2, r3, #16
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	43d9      	mvns	r1, r3
 8003de4:	887b      	ldrh	r3, [r7, #2]
 8003de6:	400b      	ands	r3, r1
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	619a      	str	r2, [r3, #24]
}
 8003dee:	bf00      	nop
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e07f      	b.n	8003f0e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fd fd46 	bl	80018b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2224      	movs	r2, #36	; 0x24
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d107      	bne.n	8003e76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e72:	609a      	str	r2, [r3, #8]
 8003e74:	e006      	b.n	8003e84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d104      	bne.n	8003e96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6859      	ldr	r1, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4b1d      	ldr	r3, [pc, #116]	; (8003f18 <HAL_I2C_Init+0x11c>)
 8003ea2:	430b      	orrs	r3, r1
 8003ea4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69d9      	ldr	r1, [r3, #28]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1a      	ldr	r2, [r3, #32]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	02008000 	.word	0x02008000

08003f1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	4608      	mov	r0, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	817b      	strh	r3, [r7, #10]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	813b      	strh	r3, [r7, #8]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	f040 80f9 	bne.w	8004136 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_I2C_Mem_Write+0x34>
 8003f4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d105      	bne.n	8003f5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0ed      	b.n	8004138 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_I2C_Mem_Write+0x4e>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e0e6      	b.n	8004138 <HAL_I2C_Mem_Write+0x21c>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f72:	f7fe fef1 	bl	8002d58 <HAL_GetTick>
 8003f76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2319      	movs	r3, #25
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f955 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0d1      	b.n	8004138 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2221      	movs	r2, #33	; 0x21
 8003f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2240      	movs	r2, #64	; 0x40
 8003fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a3a      	ldr	r2, [r7, #32]
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fbc:	88f8      	ldrh	r0, [r7, #6]
 8003fbe:	893a      	ldrh	r2, [r7, #8]
 8003fc0:	8979      	ldrh	r1, [r7, #10]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	4603      	mov	r3, r0
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f8b9 	bl	8004144 <I2C_RequestMemoryWrite>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0a9      	b.n	8004138 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2bff      	cmp	r3, #255	; 0xff
 8003fec:	d90e      	bls.n	800400c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	22ff      	movs	r2, #255	; 0xff
 8003ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	8979      	ldrh	r1, [r7, #10]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 fab1 	bl	800456c <I2C_TransferConfig>
 800400a:	e00f      	b.n	800402c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401a:	b2da      	uxtb	r2, r3
 800401c:	8979      	ldrh	r1, [r7, #10]
 800401e:	2300      	movs	r3, #0
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 faa0 	bl	800456c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f93f 	bl	80042b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e07b      	b.n	8004138 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d034      	beq.n	80040e4 <HAL_I2C_Mem_Write+0x1c8>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407e:	2b00      	cmp	r3, #0
 8004080:	d130      	bne.n	80040e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	2200      	movs	r2, #0
 800408a:	2180      	movs	r1, #128	; 0x80
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f8d1 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e04d      	b.n	8004138 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2bff      	cmp	r3, #255	; 0xff
 80040a4:	d90e      	bls.n	80040c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	22ff      	movs	r2, #255	; 0xff
 80040aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	8979      	ldrh	r1, [r7, #10]
 80040b4:	2300      	movs	r3, #0
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fa55 	bl	800456c <I2C_TransferConfig>
 80040c2:	e00f      	b.n	80040e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	8979      	ldrh	r1, [r7, #10]
 80040d6:	2300      	movs	r3, #0
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 fa44 	bl	800456c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d19e      	bne.n	800402c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f91e 	bl	8004334 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e01a      	b.n	8004138 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2220      	movs	r2, #32
 8004108:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6859      	ldr	r1, [r3, #4]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <HAL_I2C_Mem_Write+0x224>)
 8004116:	400b      	ands	r3, r1
 8004118:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	e000      	b.n	8004138 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004136:	2302      	movs	r3, #2
  }
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	fe00e800 	.word	0xfe00e800

08004144 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	4608      	mov	r0, r1
 800414e:	4611      	mov	r1, r2
 8004150:	461a      	mov	r2, r3
 8004152:	4603      	mov	r3, r0
 8004154:	817b      	strh	r3, [r7, #10]
 8004156:	460b      	mov	r3, r1
 8004158:	813b      	strh	r3, [r7, #8]
 800415a:	4613      	mov	r3, r2
 800415c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	b2da      	uxtb	r2, r3
 8004162:	8979      	ldrh	r1, [r7, #10]
 8004164:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <I2C_RequestMemoryWrite+0xa4>)
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 f9fd 	bl	800456c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	69b9      	ldr	r1, [r7, #24]
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f89c 	bl	80042b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e02c      	b.n	80041e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d105      	bne.n	8004198 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800418c:	893b      	ldrh	r3, [r7, #8]
 800418e:	b2da      	uxtb	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	629a      	str	r2, [r3, #40]	; 0x28
 8004196:	e015      	b.n	80041c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004198:	893b      	ldrh	r3, [r7, #8]
 800419a:	0a1b      	lsrs	r3, r3, #8
 800419c:	b29b      	uxth	r3, r3
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	69b9      	ldr	r1, [r7, #24]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f882 	bl	80042b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e012      	b.n	80041e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041ba:	893b      	ldrh	r3, [r7, #8]
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	2200      	movs	r2, #0
 80041cc:	2180      	movs	r1, #128	; 0x80
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f830 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	80002000 	.word	0x80002000

080041ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d103      	bne.n	800420a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2200      	movs	r2, #0
 8004208:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b01      	cmp	r3, #1
 8004216:	d007      	beq.n	8004228 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	619a      	str	r2, [r3, #24]
  }
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	4613      	mov	r3, r2
 8004242:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004244:	e022      	b.n	800428c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424c:	d01e      	beq.n	800428c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424e:	f7fe fd83 	bl	8002d58 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d302      	bcc.n	8004264 <I2C_WaitOnFlagUntilTimeout+0x30>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d113      	bne.n	800428c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004268:	f043 0220 	orr.w	r2, r3, #32
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e00f      	b.n	80042ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	4013      	ands	r3, r2
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	429a      	cmp	r2, r3
 800429a:	bf0c      	ite	eq
 800429c:	2301      	moveq	r3, #1
 800429e:	2300      	movne	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d0cd      	beq.n	8004246 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042c0:	e02c      	b.n	800431c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f870 	bl	80043ac <I2C_IsErrorOccurred>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e02a      	b.n	800432c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d01e      	beq.n	800431c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042de:	f7fe fd3b 	bl	8002d58 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d302      	bcc.n	80042f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d113      	bne.n	800431c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f8:	f043 0220 	orr.w	r2, r3, #32
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e007      	b.n	800432c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b02      	cmp	r3, #2
 8004328:	d1cb      	bne.n	80042c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004340:	e028      	b.n	8004394 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	68b9      	ldr	r1, [r7, #8]
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f830 	bl	80043ac <I2C_IsErrorOccurred>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e026      	b.n	80043a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004356:	f7fe fcff 	bl	8002d58 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	429a      	cmp	r2, r3
 8004364:	d302      	bcc.n	800436c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d113      	bne.n	8004394 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004370:	f043 0220 	orr.w	r2, r3, #32
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e007      	b.n	80043a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d1cf      	bne.n	8004342 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d068      	beq.n	80044aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2210      	movs	r2, #16
 80043de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043e0:	e049      	b.n	8004476 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d045      	beq.n	8004476 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043ea:	f7fe fcb5 	bl	8002d58 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d302      	bcc.n	8004400 <I2C_IsErrorOccurred+0x54>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d13a      	bne.n	8004476 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800440a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004412:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800441e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004422:	d121      	bne.n	8004468 <I2C_IsErrorOccurred+0xbc>
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800442a:	d01d      	beq.n	8004468 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800442c:	7cfb      	ldrb	r3, [r7, #19]
 800442e:	2b20      	cmp	r3, #32
 8004430:	d01a      	beq.n	8004468 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004440:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004442:	f7fe fc89 	bl	8002d58 <HAL_GetTick>
 8004446:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004448:	e00e      	b.n	8004468 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800444a:	f7fe fc85 	bl	8002d58 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b19      	cmp	r3, #25
 8004456:	d907      	bls.n	8004468 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	f043 0320 	orr.w	r3, r3, #32
 800445e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004466:	e006      	b.n	8004476 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b20      	cmp	r3, #32
 8004474:	d1e9      	bne.n	800444a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	2b20      	cmp	r3, #32
 8004482:	d003      	beq.n	800448c <I2C_IsErrorOccurred+0xe0>
 8004484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0aa      	beq.n	80043e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800448c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004490:	2b00      	cmp	r3, #0
 8004492:	d103      	bne.n	800449c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2220      	movs	r2, #32
 800449a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	f043 0304 	orr.w	r3, r3, #4
 80044a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00b      	beq.n	80044d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	f043 0301 	orr.w	r3, r3, #1
 80044c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00b      	beq.n	80044f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	f043 0308 	orr.w	r3, r3, #8
 80044e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00b      	beq.n	8004518 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	f043 0302 	orr.w	r3, r3, #2
 8004506:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004510:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01c      	beq.n	800455a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7ff fe63 	bl	80041ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6859      	ldr	r1, [r3, #4]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <I2C_IsErrorOccurred+0x1bc>)
 8004532:	400b      	ands	r3, r1
 8004534:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	431a      	orrs	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800455a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800455e:	4618      	mov	r0, r3
 8004560:	3728      	adds	r7, #40	; 0x28
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	fe00e800 	.word	0xfe00e800

0800456c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	607b      	str	r3, [r7, #4]
 8004576:	460b      	mov	r3, r1
 8004578:	817b      	strh	r3, [r7, #10]
 800457a:	4613      	mov	r3, r2
 800457c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800457e:	897b      	ldrh	r3, [r7, #10]
 8004580:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004584:	7a7b      	ldrb	r3, [r7, #9]
 8004586:	041b      	lsls	r3, r3, #16
 8004588:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800458c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	4313      	orrs	r3, r2
 8004596:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800459a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	0d5b      	lsrs	r3, r3, #21
 80045a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <I2C_TransferConfig+0x60>)
 80045ac:	430b      	orrs	r3, r1
 80045ae:	43db      	mvns	r3, r3
 80045b0:	ea02 0103 	and.w	r1, r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	03ff63ff 	.word	0x03ff63ff

080045d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d138      	bne.n	8004658 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d101      	bne.n	80045f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e032      	b.n	800465a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2224      	movs	r2, #36	; 0x24
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004622:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6819      	ldr	r1, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	e000      	b.n	800465a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004658:	2302      	movs	r3, #2
  }
}
 800465a:	4618      	mov	r0, r3
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004666:	b480      	push	{r7}
 8004668:	b085      	sub	sp, #20
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b20      	cmp	r3, #32
 800467a:	d139      	bne.n	80046f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004686:	2302      	movs	r3, #2
 8004688:	e033      	b.n	80046f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2224      	movs	r2, #36	; 0x24
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0201 	orr.w	r2, r2, #1
 80046da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	e000      	b.n	80046f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046f0:	2302      	movs	r3, #2
  }
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800470a:	4b23      	ldr	r3, [pc, #140]	; (8004798 <HAL_PWREx_EnableOverDrive+0x98>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	4a22      	ldr	r2, [pc, #136]	; (8004798 <HAL_PWREx_EnableOverDrive+0x98>)
 8004710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004714:	6413      	str	r3, [r2, #64]	; 0x40
 8004716:	4b20      	ldr	r3, [pc, #128]	; (8004798 <HAL_PWREx_EnableOverDrive+0x98>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004722:	4b1e      	ldr	r3, [pc, #120]	; (800479c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1d      	ldr	r2, [pc, #116]	; (800479c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800472e:	f7fe fb13 	bl	8002d58 <HAL_GetTick>
 8004732:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004734:	e009      	b.n	800474a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004736:	f7fe fb0f 	bl	8002d58 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004744:	d901      	bls.n	800474a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e022      	b.n	8004790 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800474a:	4b14      	ldr	r3, [pc, #80]	; (800479c <HAL_PWREx_EnableOverDrive+0x9c>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004756:	d1ee      	bne.n	8004736 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004758:	4b10      	ldr	r3, [pc, #64]	; (800479c <HAL_PWREx_EnableOverDrive+0x9c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a0f      	ldr	r2, [pc, #60]	; (800479c <HAL_PWREx_EnableOverDrive+0x9c>)
 800475e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004762:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004764:	f7fe faf8 	bl	8002d58 <HAL_GetTick>
 8004768:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800476a:	e009      	b.n	8004780 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800476c:	f7fe faf4 	bl	8002d58 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800477a:	d901      	bls.n	8004780 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e007      	b.n	8004790 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004780:	4b06      	ldr	r3, [pc, #24]	; (800479c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800478c:	d1ee      	bne.n	800476c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40023800 	.word	0x40023800
 800479c:	40007000 	.word	0x40007000

080047a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80047a8:	2300      	movs	r3, #0
 80047aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e29b      	b.n	8004cee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 8087 	beq.w	80048d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047c4:	4b96      	ldr	r3, [pc, #600]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 030c 	and.w	r3, r3, #12
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d00c      	beq.n	80047ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047d0:	4b93      	ldr	r3, [pc, #588]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 030c 	and.w	r3, r3, #12
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d112      	bne.n	8004802 <HAL_RCC_OscConfig+0x62>
 80047dc:	4b90      	ldr	r3, [pc, #576]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047e8:	d10b      	bne.n	8004802 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ea:	4b8d      	ldr	r3, [pc, #564]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d06c      	beq.n	80048d0 <HAL_RCC_OscConfig+0x130>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d168      	bne.n	80048d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e275      	b.n	8004cee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800480a:	d106      	bne.n	800481a <HAL_RCC_OscConfig+0x7a>
 800480c:	4b84      	ldr	r3, [pc, #528]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a83      	ldr	r2, [pc, #524]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 8004812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	e02e      	b.n	8004878 <HAL_RCC_OscConfig+0xd8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10c      	bne.n	800483c <HAL_RCC_OscConfig+0x9c>
 8004822:	4b7f      	ldr	r3, [pc, #508]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a7e      	ldr	r2, [pc, #504]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 8004828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	4b7c      	ldr	r3, [pc, #496]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a7b      	ldr	r2, [pc, #492]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 8004834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	e01d      	b.n	8004878 <HAL_RCC_OscConfig+0xd8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004844:	d10c      	bne.n	8004860 <HAL_RCC_OscConfig+0xc0>
 8004846:	4b76      	ldr	r3, [pc, #472]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a75      	ldr	r2, [pc, #468]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 800484c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	4b73      	ldr	r3, [pc, #460]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a72      	ldr	r2, [pc, #456]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 8004858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	e00b      	b.n	8004878 <HAL_RCC_OscConfig+0xd8>
 8004860:	4b6f      	ldr	r3, [pc, #444]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a6e      	ldr	r2, [pc, #440]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 8004866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	4b6c      	ldr	r3, [pc, #432]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a6b      	ldr	r2, [pc, #428]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 8004872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d013      	beq.n	80048a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004880:	f7fe fa6a 	bl	8002d58 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004888:	f7fe fa66 	bl	8002d58 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	; 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e229      	b.n	8004cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489a:	4b61      	ldr	r3, [pc, #388]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCC_OscConfig+0xe8>
 80048a6:	e014      	b.n	80048d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fe fa56 	bl	8002d58 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b0:	f7fe fa52 	bl	8002d58 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	; 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e215      	b.n	8004cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048c2:	4b57      	ldr	r3, [pc, #348]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x110>
 80048ce:	e000      	b.n	80048d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d069      	beq.n	80049b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048de:	4b50      	ldr	r3, [pc, #320]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ea:	4b4d      	ldr	r3, [pc, #308]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d11c      	bne.n	8004930 <HAL_RCC_OscConfig+0x190>
 80048f6:	4b4a      	ldr	r3, [pc, #296]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d116      	bne.n	8004930 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004902:	4b47      	ldr	r3, [pc, #284]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_RCC_OscConfig+0x17a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d001      	beq.n	800491a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e1e9      	b.n	8004cee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491a:	4b41      	ldr	r3, [pc, #260]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	493d      	ldr	r1, [pc, #244]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 800492a:	4313      	orrs	r3, r2
 800492c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492e:	e040      	b.n	80049b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d023      	beq.n	8004980 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004938:	4b39      	ldr	r3, [pc, #228]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a38      	ldr	r2, [pc, #224]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004944:	f7fe fa08 	bl	8002d58 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800494c:	f7fe fa04 	bl	8002d58 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e1c7      	b.n	8004cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495e:	4b30      	ldr	r3, [pc, #192]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496a:	4b2d      	ldr	r3, [pc, #180]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	4929      	ldr	r1, [pc, #164]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 800497a:	4313      	orrs	r3, r2
 800497c:	600b      	str	r3, [r1, #0]
 800497e:	e018      	b.n	80049b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004980:	4b27      	ldr	r3, [pc, #156]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a26      	ldr	r2, [pc, #152]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 8004986:	f023 0301 	bic.w	r3, r3, #1
 800498a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498c:	f7fe f9e4 	bl	8002d58 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004994:	f7fe f9e0 	bl	8002d58 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e1a3      	b.n	8004cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049a6:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d038      	beq.n	8004a30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d019      	beq.n	80049fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049c6:	4b16      	ldr	r3, [pc, #88]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 80049c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ca:	4a15      	ldr	r2, [pc, #84]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 80049cc:	f043 0301 	orr.w	r3, r3, #1
 80049d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d2:	f7fe f9c1 	bl	8002d58 <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049da:	f7fe f9bd 	bl	8002d58 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e180      	b.n	8004cee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 80049ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0f0      	beq.n	80049da <HAL_RCC_OscConfig+0x23a>
 80049f8:	e01a      	b.n	8004a30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049fa:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 80049fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fe:	4a08      	ldr	r2, [pc, #32]	; (8004a20 <HAL_RCC_OscConfig+0x280>)
 8004a00:	f023 0301 	bic.w	r3, r3, #1
 8004a04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a06:	f7fe f9a7 	bl	8002d58 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a0c:	e00a      	b.n	8004a24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a0e:	f7fe f9a3 	bl	8002d58 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d903      	bls.n	8004a24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e166      	b.n	8004cee <HAL_RCC_OscConfig+0x54e>
 8004a20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a24:	4b92      	ldr	r3, [pc, #584]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1ee      	bne.n	8004a0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80a4 	beq.w	8004b86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a3e:	4b8c      	ldr	r3, [pc, #560]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10d      	bne.n	8004a66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a4a:	4b89      	ldr	r3, [pc, #548]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	4a88      	ldr	r2, [pc, #544]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a54:	6413      	str	r3, [r2, #64]	; 0x40
 8004a56:	4b86      	ldr	r3, [pc, #536]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	60bb      	str	r3, [r7, #8]
 8004a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a62:	2301      	movs	r3, #1
 8004a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a66:	4b83      	ldr	r3, [pc, #524]	; (8004c74 <HAL_RCC_OscConfig+0x4d4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d118      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a72:	4b80      	ldr	r3, [pc, #512]	; (8004c74 <HAL_RCC_OscConfig+0x4d4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a7f      	ldr	r2, [pc, #508]	; (8004c74 <HAL_RCC_OscConfig+0x4d4>)
 8004a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a7e:	f7fe f96b 	bl	8002d58 <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a86:	f7fe f967 	bl	8002d58 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b64      	cmp	r3, #100	; 0x64
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e12a      	b.n	8004cee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a98:	4b76      	ldr	r3, [pc, #472]	; (8004c74 <HAL_RCC_OscConfig+0x4d4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0f0      	beq.n	8004a86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d106      	bne.n	8004aba <HAL_RCC_OscConfig+0x31a>
 8004aac:	4b70      	ldr	r3, [pc, #448]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab0:	4a6f      	ldr	r2, [pc, #444]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab8:	e02d      	b.n	8004b16 <HAL_RCC_OscConfig+0x376>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10c      	bne.n	8004adc <HAL_RCC_OscConfig+0x33c>
 8004ac2:	4b6b      	ldr	r3, [pc, #428]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac6:	4a6a      	ldr	r2, [pc, #424]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004ac8:	f023 0301 	bic.w	r3, r3, #1
 8004acc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ace:	4b68      	ldr	r3, [pc, #416]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	4a67      	ldr	r2, [pc, #412]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004ad4:	f023 0304 	bic.w	r3, r3, #4
 8004ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8004ada:	e01c      	b.n	8004b16 <HAL_RCC_OscConfig+0x376>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b05      	cmp	r3, #5
 8004ae2:	d10c      	bne.n	8004afe <HAL_RCC_OscConfig+0x35e>
 8004ae4:	4b62      	ldr	r3, [pc, #392]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae8:	4a61      	ldr	r2, [pc, #388]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004aea:	f043 0304 	orr.w	r3, r3, #4
 8004aee:	6713      	str	r3, [r2, #112]	; 0x70
 8004af0:	4b5f      	ldr	r3, [pc, #380]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	4a5e      	ldr	r2, [pc, #376]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	6713      	str	r3, [r2, #112]	; 0x70
 8004afc:	e00b      	b.n	8004b16 <HAL_RCC_OscConfig+0x376>
 8004afe:	4b5c      	ldr	r3, [pc, #368]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	4a5b      	ldr	r2, [pc, #364]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0a:	4b59      	ldr	r3, [pc, #356]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0e:	4a58      	ldr	r2, [pc, #352]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004b10:	f023 0304 	bic.w	r3, r3, #4
 8004b14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d015      	beq.n	8004b4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1e:	f7fe f91b 	bl	8002d58 <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b24:	e00a      	b.n	8004b3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b26:	f7fe f917 	bl	8002d58 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e0d8      	b.n	8004cee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3c:	4b4c      	ldr	r3, [pc, #304]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0ee      	beq.n	8004b26 <HAL_RCC_OscConfig+0x386>
 8004b48:	e014      	b.n	8004b74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4a:	f7fe f905 	bl	8002d58 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b50:	e00a      	b.n	8004b68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b52:	f7fe f901 	bl	8002d58 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e0c2      	b.n	8004cee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b68:	4b41      	ldr	r3, [pc, #260]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1ee      	bne.n	8004b52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b74:	7dfb      	ldrb	r3, [r7, #23]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d105      	bne.n	8004b86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b7a:	4b3d      	ldr	r3, [pc, #244]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	4a3c      	ldr	r2, [pc, #240]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 80ae 	beq.w	8004cec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b90:	4b37      	ldr	r3, [pc, #220]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 030c 	and.w	r3, r3, #12
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d06d      	beq.n	8004c78 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d14b      	bne.n	8004c3c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba4:	4b32      	ldr	r3, [pc, #200]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a31      	ldr	r2, [pc, #196]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7fe f8d2 	bl	8002d58 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb8:	f7fe f8ce 	bl	8002d58 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e091      	b.n	8004cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bca:	4b29      	ldr	r3, [pc, #164]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1f0      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69da      	ldr	r2, [r3, #28]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	019b      	lsls	r3, r3, #6
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bec:	085b      	lsrs	r3, r3, #1
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	041b      	lsls	r3, r3, #16
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	061b      	lsls	r3, r3, #24
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	071b      	lsls	r3, r3, #28
 8004c02:	491b      	ldr	r1, [pc, #108]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c08:	4b19      	ldr	r3, [pc, #100]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a18      	ldr	r2, [pc, #96]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c14:	f7fe f8a0 	bl	8002d58 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c1c:	f7fe f89c 	bl	8002d58 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e05f      	b.n	8004cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c2e:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0x47c>
 8004c3a:	e057      	b.n	8004cec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a0b      	ldr	r2, [pc, #44]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c48:	f7fe f886 	bl	8002d58 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c50:	f7fe f882 	bl	8002d58 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e045      	b.n	8004cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c62:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <HAL_RCC_OscConfig+0x4d0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f0      	bne.n	8004c50 <HAL_RCC_OscConfig+0x4b0>
 8004c6e:	e03d      	b.n	8004cec <HAL_RCC_OscConfig+0x54c>
 8004c70:	40023800 	.word	0x40023800
 8004c74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c78:	4b1f      	ldr	r3, [pc, #124]	; (8004cf8 <HAL_RCC_OscConfig+0x558>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d030      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d129      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d122      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ca8:	4013      	ands	r3, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d119      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	085b      	lsrs	r3, r3, #1
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d10f      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d107      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40023800 	.word	0x40023800

08004cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0d0      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d14:	4b6a      	ldr	r3, [pc, #424]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 030f 	and.w	r3, r3, #15
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d910      	bls.n	8004d44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d22:	4b67      	ldr	r3, [pc, #412]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f023 020f 	bic.w	r2, r3, #15
 8004d2a:	4965      	ldr	r1, [pc, #404]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d32:	4b63      	ldr	r3, [pc, #396]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0b8      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d020      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d5c:	4b59      	ldr	r3, [pc, #356]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	4a58      	ldr	r2, [pc, #352]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d74:	4b53      	ldr	r3, [pc, #332]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	4a52      	ldr	r2, [pc, #328]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d80:	4b50      	ldr	r3, [pc, #320]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	494d      	ldr	r1, [pc, #308]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d040      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d107      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004da6:	4b47      	ldr	r3, [pc, #284]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d115      	bne.n	8004dde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e07f      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d107      	bne.n	8004dce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dbe:	4b41      	ldr	r3, [pc, #260]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e073      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dce:	4b3d      	ldr	r3, [pc, #244]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e06b      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dde:	4b39      	ldr	r3, [pc, #228]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f023 0203 	bic.w	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4936      	ldr	r1, [pc, #216]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df0:	f7fd ffb2 	bl	8002d58 <HAL_GetTick>
 8004df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df6:	e00a      	b.n	8004e0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df8:	f7fd ffae 	bl	8002d58 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e053      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0e:	4b2d      	ldr	r3, [pc, #180]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 020c 	and.w	r2, r3, #12
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d1eb      	bne.n	8004df8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e20:	4b27      	ldr	r3, [pc, #156]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d210      	bcs.n	8004e50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2e:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f023 020f 	bic.w	r2, r3, #15
 8004e36:	4922      	ldr	r1, [pc, #136]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3e:	4b20      	ldr	r3, [pc, #128]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e032      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e5c:	4b19      	ldr	r3, [pc, #100]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	4916      	ldr	r1, [pc, #88]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d009      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e7a:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	490e      	ldr	r1, [pc, #56]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e8e:	f000 f821 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 8004e92:	4602      	mov	r2, r0
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	091b      	lsrs	r3, r3, #4
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	490a      	ldr	r1, [pc, #40]	; (8004ec8 <HAL_RCC_ClockConfig+0x1cc>)
 8004ea0:	5ccb      	ldrb	r3, [r1, r3]
 8004ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea6:	4a09      	ldr	r2, [pc, #36]	; (8004ecc <HAL_RCC_ClockConfig+0x1d0>)
 8004ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004eaa:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <HAL_RCC_ClockConfig+0x1d4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fd f966 	bl	8002180 <HAL_InitTick>

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40023c00 	.word	0x40023c00
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	0800e570 	.word	0x0800e570
 8004ecc:	20000054 	.word	0x20000054
 8004ed0:	20000058 	.word	0x20000058

08004ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ed8:	b094      	sub	sp, #80	; 0x50
 8004eda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004edc:	2300      	movs	r3, #0
 8004ede:	647b      	str	r3, [r7, #68]	; 0x44
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eec:	4b79      	ldr	r3, [pc, #484]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 030c 	and.w	r3, r3, #12
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d00d      	beq.n	8004f14 <HAL_RCC_GetSysClockFreq+0x40>
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	f200 80e1 	bhi.w	80050c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <HAL_RCC_GetSysClockFreq+0x34>
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d003      	beq.n	8004f0e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f06:	e0db      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f08:	4b73      	ldr	r3, [pc, #460]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f0c:	e0db      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f0e:	4b73      	ldr	r3, [pc, #460]	; (80050dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004f10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f12:	e0d8      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f14:	4b6f      	ldr	r3, [pc, #444]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f1c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004f1e:	4b6d      	ldr	r3, [pc, #436]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d063      	beq.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f2a:	4b6a      	ldr	r3, [pc, #424]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	099b      	lsrs	r3, r3, #6
 8004f30:	2200      	movs	r2, #0
 8004f32:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f3e:	2300      	movs	r3, #0
 8004f40:	637b      	str	r3, [r7, #52]	; 0x34
 8004f42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f46:	4622      	mov	r2, r4
 8004f48:	462b      	mov	r3, r5
 8004f4a:	f04f 0000 	mov.w	r0, #0
 8004f4e:	f04f 0100 	mov.w	r1, #0
 8004f52:	0159      	lsls	r1, r3, #5
 8004f54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f58:	0150      	lsls	r0, r2, #5
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4621      	mov	r1, r4
 8004f60:	1a51      	subs	r1, r2, r1
 8004f62:	6139      	str	r1, [r7, #16]
 8004f64:	4629      	mov	r1, r5
 8004f66:	eb63 0301 	sbc.w	r3, r3, r1
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f78:	4659      	mov	r1, fp
 8004f7a:	018b      	lsls	r3, r1, #6
 8004f7c:	4651      	mov	r1, sl
 8004f7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f82:	4651      	mov	r1, sl
 8004f84:	018a      	lsls	r2, r1, #6
 8004f86:	4651      	mov	r1, sl
 8004f88:	ebb2 0801 	subs.w	r8, r2, r1
 8004f8c:	4659      	mov	r1, fp
 8004f8e:	eb63 0901 	sbc.w	r9, r3, r1
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fa6:	4690      	mov	r8, r2
 8004fa8:	4699      	mov	r9, r3
 8004faa:	4623      	mov	r3, r4
 8004fac:	eb18 0303 	adds.w	r3, r8, r3
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	462b      	mov	r3, r5
 8004fb4:	eb49 0303 	adc.w	r3, r9, r3
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	024b      	lsls	r3, r1, #9
 8004fca:	4621      	mov	r1, r4
 8004fcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	024a      	lsls	r2, r1, #9
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fda:	2200      	movs	r2, #0
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fe0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fe4:	f7fb f97c 	bl	80002e0 <__aeabi_uldivmod>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4613      	mov	r3, r2
 8004fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff0:	e058      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ff2:	4b38      	ldr	r3, [pc, #224]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	099b      	lsrs	r3, r3, #6
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005002:	623b      	str	r3, [r7, #32]
 8005004:	2300      	movs	r3, #0
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
 8005008:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800500c:	4642      	mov	r2, r8
 800500e:	464b      	mov	r3, r9
 8005010:	f04f 0000 	mov.w	r0, #0
 8005014:	f04f 0100 	mov.w	r1, #0
 8005018:	0159      	lsls	r1, r3, #5
 800501a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800501e:	0150      	lsls	r0, r2, #5
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4641      	mov	r1, r8
 8005026:	ebb2 0a01 	subs.w	sl, r2, r1
 800502a:	4649      	mov	r1, r9
 800502c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800503c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005040:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005044:	ebb2 040a 	subs.w	r4, r2, sl
 8005048:	eb63 050b 	sbc.w	r5, r3, fp
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	00eb      	lsls	r3, r5, #3
 8005056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800505a:	00e2      	lsls	r2, r4, #3
 800505c:	4614      	mov	r4, r2
 800505e:	461d      	mov	r5, r3
 8005060:	4643      	mov	r3, r8
 8005062:	18e3      	adds	r3, r4, r3
 8005064:	603b      	str	r3, [r7, #0]
 8005066:	464b      	mov	r3, r9
 8005068:	eb45 0303 	adc.w	r3, r5, r3
 800506c:	607b      	str	r3, [r7, #4]
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	e9d7 4500 	ldrd	r4, r5, [r7]
 800507a:	4629      	mov	r1, r5
 800507c:	028b      	lsls	r3, r1, #10
 800507e:	4621      	mov	r1, r4
 8005080:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005084:	4621      	mov	r1, r4
 8005086:	028a      	lsls	r2, r1, #10
 8005088:	4610      	mov	r0, r2
 800508a:	4619      	mov	r1, r3
 800508c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800508e:	2200      	movs	r2, #0
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	61fa      	str	r2, [r7, #28]
 8005094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005098:	f7fb f922 	bl	80002e0 <__aeabi_uldivmod>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4613      	mov	r3, r2
 80050a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80050a4:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	0c1b      	lsrs	r3, r3, #16
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	3301      	adds	r3, #1
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80050b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050be:	e002      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050c0:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80050c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3750      	adds	r7, #80	; 0x50
 80050cc:	46bd      	mov	sp, r7
 80050ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d2:	bf00      	nop
 80050d4:	40023800 	.word	0x40023800
 80050d8:	00f42400 	.word	0x00f42400
 80050dc:	007a1200 	.word	0x007a1200

080050e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050e4:	4b03      	ldr	r3, [pc, #12]	; (80050f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050e6:	681b      	ldr	r3, [r3, #0]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	20000054 	.word	0x20000054

080050f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050fc:	f7ff fff0 	bl	80050e0 <HAL_RCC_GetHCLKFreq>
 8005100:	4602      	mov	r2, r0
 8005102:	4b05      	ldr	r3, [pc, #20]	; (8005118 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	0a9b      	lsrs	r3, r3, #10
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	4903      	ldr	r1, [pc, #12]	; (800511c <HAL_RCC_GetPCLK1Freq+0x24>)
 800510e:	5ccb      	ldrb	r3, [r1, r3]
 8005110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005114:	4618      	mov	r0, r3
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40023800 	.word	0x40023800
 800511c:	0800e580 	.word	0x0800e580

08005120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005124:	f7ff ffdc 	bl	80050e0 <HAL_RCC_GetHCLKFreq>
 8005128:	4602      	mov	r2, r0
 800512a:	4b05      	ldr	r3, [pc, #20]	; (8005140 <HAL_RCC_GetPCLK2Freq+0x20>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	0b5b      	lsrs	r3, r3, #13
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	4903      	ldr	r1, [pc, #12]	; (8005144 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005136:	5ccb      	ldrb	r3, [r1, r3]
 8005138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800513c:	4618      	mov	r0, r3
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40023800 	.word	0x40023800
 8005144:	0800e580 	.word	0x0800e580

08005148 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	220f      	movs	r2, #15
 8005156:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005158:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <HAL_RCC_GetClockConfig+0x5c>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0203 	and.w	r2, r3, #3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005164:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <HAL_RCC_GetClockConfig+0x5c>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005170:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <HAL_RCC_GetClockConfig+0x5c>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800517c:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <HAL_RCC_GetClockConfig+0x5c>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	08db      	lsrs	r3, r3, #3
 8005182:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800518a:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <HAL_RCC_GetClockConfig+0x60>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 020f 	and.w	r2, r3, #15
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	601a      	str	r2, [r3, #0]
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40023800 	.word	0x40023800
 80051a8:	40023c00 	.word	0x40023c00

080051ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b088      	sub	sp, #32
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d012      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051d4:	4b69      	ldr	r3, [pc, #420]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	4a68      	ldr	r2, [pc, #416]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80051de:	6093      	str	r3, [r2, #8]
 80051e0:	4b66      	ldr	r3, [pc, #408]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e8:	4964      	ldr	r1, [pc, #400]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80051f6:	2301      	movs	r3, #1
 80051f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d017      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005206:	4b5d      	ldr	r3, [pc, #372]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800520c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	4959      	ldr	r1, [pc, #356]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005224:	d101      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005226:	2301      	movs	r3, #1
 8005228:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005232:	2301      	movs	r3, #1
 8005234:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d017      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005242:	4b4e      	ldr	r3, [pc, #312]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005248:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	494a      	ldr	r1, [pc, #296]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005260:	d101      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005262:	2301      	movs	r3, #1
 8005264:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800526e:	2301      	movs	r3, #1
 8005270:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800527e:	2301      	movs	r3, #1
 8005280:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 808b 	beq.w	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005290:	4b3a      	ldr	r3, [pc, #232]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	4a39      	ldr	r2, [pc, #228]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529a:	6413      	str	r3, [r2, #64]	; 0x40
 800529c:	4b37      	ldr	r3, [pc, #220]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80052a8:	4b35      	ldr	r3, [pc, #212]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a34      	ldr	r2, [pc, #208]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b4:	f7fd fd50 	bl	8002d58 <HAL_GetTick>
 80052b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052bc:	f7fd fd4c 	bl	8002d58 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b64      	cmp	r3, #100	; 0x64
 80052c8:	d901      	bls.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e38f      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052ce:	4b2c      	ldr	r3, [pc, #176]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052da:	4b28      	ldr	r3, [pc, #160]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d035      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d02e      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052f8:	4b20      	ldr	r3, [pc, #128]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005300:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005302:	4b1e      	ldr	r3, [pc, #120]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005306:	4a1d      	ldr	r2, [pc, #116]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800530e:	4b1b      	ldr	r3, [pc, #108]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005312:	4a1a      	ldr	r2, [pc, #104]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005318:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800531a:	4a18      	ldr	r2, [pc, #96]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005320:	4b16      	ldr	r3, [pc, #88]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b01      	cmp	r3, #1
 800532a:	d114      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800532c:	f7fd fd14 	bl	8002d58 <HAL_GetTick>
 8005330:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005332:	e00a      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005334:	f7fd fd10 	bl	8002d58 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005342:	4293      	cmp	r3, r2
 8005344:	d901      	bls.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e351      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534a:	4b0c      	ldr	r3, [pc, #48]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800534c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0ee      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005362:	d111      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005364:	4b05      	ldr	r3, [pc, #20]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005370:	4b04      	ldr	r3, [pc, #16]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005372:	400b      	ands	r3, r1
 8005374:	4901      	ldr	r1, [pc, #4]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005376:	4313      	orrs	r3, r2
 8005378:	608b      	str	r3, [r1, #8]
 800537a:	e00b      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800537c:	40023800 	.word	0x40023800
 8005380:	40007000 	.word	0x40007000
 8005384:	0ffffcff 	.word	0x0ffffcff
 8005388:	4bac      	ldr	r3, [pc, #688]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	4aab      	ldr	r2, [pc, #684]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800538e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005392:	6093      	str	r3, [r2, #8]
 8005394:	4ba9      	ldr	r3, [pc, #676]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005396:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a0:	49a6      	ldr	r1, [pc, #664]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0310 	and.w	r3, r3, #16
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d010      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053b2:	4ba2      	ldr	r3, [pc, #648]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053b8:	4aa0      	ldr	r2, [pc, #640]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80053c2:	4b9e      	ldr	r3, [pc, #632]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	499b      	ldr	r1, [pc, #620]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053e0:	4b96      	ldr	r3, [pc, #600]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ee:	4993      	ldr	r1, [pc, #588]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005402:	4b8e      	ldr	r3, [pc, #568]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005408:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005410:	498a      	ldr	r1, [pc, #552]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005412:	4313      	orrs	r3, r2
 8005414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005424:	4b85      	ldr	r3, [pc, #532]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005432:	4982      	ldr	r1, [pc, #520]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005434:	4313      	orrs	r3, r2
 8005436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005446:	4b7d      	ldr	r3, [pc, #500]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005454:	4979      	ldr	r1, [pc, #484]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005456:	4313      	orrs	r3, r2
 8005458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005468:	4b74      	ldr	r3, [pc, #464]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546e:	f023 0203 	bic.w	r2, r3, #3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005476:	4971      	ldr	r1, [pc, #452]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005478:	4313      	orrs	r3, r2
 800547a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800548a:	4b6c      	ldr	r3, [pc, #432]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800548c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005490:	f023 020c 	bic.w	r2, r3, #12
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005498:	4968      	ldr	r1, [pc, #416]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054ac:	4b63      	ldr	r3, [pc, #396]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ba:	4960      	ldr	r1, [pc, #384]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054ce:	4b5b      	ldr	r3, [pc, #364]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054dc:	4957      	ldr	r1, [pc, #348]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054f0:	4b52      	ldr	r3, [pc, #328]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	494f      	ldr	r1, [pc, #316]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005512:	4b4a      	ldr	r3, [pc, #296]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005518:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005520:	4946      	ldr	r1, [pc, #280]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005534:	4b41      	ldr	r3, [pc, #260]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005542:	493e      	ldr	r1, [pc, #248]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005556:	4b39      	ldr	r3, [pc, #228]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005564:	4935      	ldr	r1, [pc, #212]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00a      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005578:	4b30      	ldr	r3, [pc, #192]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800557a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005586:	492d      	ldr	r1, [pc, #180]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d011      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800559a:	4b28      	ldr	r3, [pc, #160]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800559c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055a8:	4924      	ldr	r1, [pc, #144]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055b8:	d101      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80055ba:	2301      	movs	r3, #1
 80055bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80055ca:	2301      	movs	r3, #1
 80055cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055da:	4b18      	ldr	r3, [pc, #96]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e8:	4914      	ldr	r1, [pc, #80]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00b      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055fc:	4b0f      	ldr	r3, [pc, #60]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005602:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800560c:	490b      	ldr	r1, [pc, #44]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00f      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005620:	4b06      	ldr	r3, [pc, #24]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005626:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005630:	4902      	ldr	r1, [pc, #8]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005638:	e002      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800563a:	bf00      	nop
 800563c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00b      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800564c:	4b8a      	ldr	r3, [pc, #552]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800564e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005652:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565c:	4986      	ldr	r1, [pc, #536]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00b      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005670:	4b81      	ldr	r3, [pc, #516]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005676:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005680:	497d      	ldr	r1, [pc, #500]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d006      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80d6 	beq.w	8005848 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800569c:	4b76      	ldr	r3, [pc, #472]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a75      	ldr	r2, [pc, #468]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056a8:	f7fd fb56 	bl	8002d58 <HAL_GetTick>
 80056ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056b0:	f7fd fb52 	bl	8002d58 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b64      	cmp	r3, #100	; 0x64
 80056bc:	d901      	bls.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e195      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056c2:	4b6d      	ldr	r3, [pc, #436]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f0      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d021      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d11d      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056e2:	4b65      	ldr	r3, [pc, #404]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e8:	0c1b      	lsrs	r3, r3, #16
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056f0:	4b61      	ldr	r3, [pc, #388]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f6:	0e1b      	lsrs	r3, r3, #24
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	019a      	lsls	r2, r3, #6
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	041b      	lsls	r3, r3, #16
 8005708:	431a      	orrs	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	061b      	lsls	r3, r3, #24
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	071b      	lsls	r3, r3, #28
 8005716:	4958      	ldr	r1, [pc, #352]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d004      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005732:	d00a      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800573c:	2b00      	cmp	r3, #0
 800573e:	d02e      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005748:	d129      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800574a:	4b4b      	ldr	r3, [pc, #300]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800574c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005750:	0c1b      	lsrs	r3, r3, #16
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005758:	4b47      	ldr	r3, [pc, #284]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800575a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800575e:	0f1b      	lsrs	r3, r3, #28
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	019a      	lsls	r2, r3, #6
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	041b      	lsls	r3, r3, #16
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	061b      	lsls	r3, r3, #24
 8005778:	431a      	orrs	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	071b      	lsls	r3, r3, #28
 800577e:	493e      	ldr	r1, [pc, #248]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005780:	4313      	orrs	r3, r2
 8005782:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005786:	4b3c      	ldr	r3, [pc, #240]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800578c:	f023 021f 	bic.w	r2, r3, #31
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	3b01      	subs	r3, #1
 8005796:	4938      	ldr	r1, [pc, #224]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d01d      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80057aa:	4b33      	ldr	r3, [pc, #204]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057b0:	0e1b      	lsrs	r3, r3, #24
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057b8:	4b2f      	ldr	r3, [pc, #188]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057be:	0f1b      	lsrs	r3, r3, #28
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	019a      	lsls	r2, r3, #6
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	041b      	lsls	r3, r3, #16
 80057d2:	431a      	orrs	r2, r3
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	061b      	lsls	r3, r3, #24
 80057d8:	431a      	orrs	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	071b      	lsls	r3, r3, #28
 80057de:	4926      	ldr	r1, [pc, #152]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d011      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	019a      	lsls	r2, r3, #6
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	041b      	lsls	r3, r3, #16
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	061b      	lsls	r3, r3, #24
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	071b      	lsls	r3, r3, #28
 800580e:	491a      	ldr	r1, [pc, #104]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005816:	4b18      	ldr	r3, [pc, #96]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a17      	ldr	r2, [pc, #92]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800581c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005822:	f7fd fa99 	bl	8002d58 <HAL_GetTick>
 8005826:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005828:	e008      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800582a:	f7fd fa95 	bl	8002d58 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b64      	cmp	r3, #100	; 0x64
 8005836:	d901      	bls.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e0d8      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800583c:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0f0      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	2b01      	cmp	r3, #1
 800584c:	f040 80ce 	bne.w	80059ec <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005850:	4b09      	ldr	r3, [pc, #36]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a08      	ldr	r2, [pc, #32]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800585a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800585c:	f7fd fa7c 	bl	8002d58 <HAL_GetTick>
 8005860:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005862:	e00b      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005864:	f7fd fa78 	bl	8002d58 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b64      	cmp	r3, #100	; 0x64
 8005870:	d904      	bls.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e0bb      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005876:	bf00      	nop
 8005878:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800587c:	4b5e      	ldr	r3, [pc, #376]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005888:	d0ec      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d009      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d02e      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d12a      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058b2:	4b51      	ldr	r3, [pc, #324]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b8:	0c1b      	lsrs	r3, r3, #16
 80058ba:	f003 0303 	and.w	r3, r3, #3
 80058be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058c0:	4b4d      	ldr	r3, [pc, #308]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c6:	0f1b      	lsrs	r3, r3, #28
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	019a      	lsls	r2, r3, #6
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	041b      	lsls	r3, r3, #16
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	061b      	lsls	r3, r3, #24
 80058e0:	431a      	orrs	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	071b      	lsls	r3, r3, #28
 80058e6:	4944      	ldr	r1, [pc, #272]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80058ee:	4b42      	ldr	r3, [pc, #264]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fc:	3b01      	subs	r3, #1
 80058fe:	021b      	lsls	r3, r3, #8
 8005900:	493d      	ldr	r1, [pc, #244]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d022      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800591c:	d11d      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800591e:	4b36      	ldr	r3, [pc, #216]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005924:	0e1b      	lsrs	r3, r3, #24
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800592c:	4b32      	ldr	r3, [pc, #200]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005932:	0f1b      	lsrs	r3, r3, #28
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	019a      	lsls	r2, r3, #6
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	041b      	lsls	r3, r3, #16
 8005946:	431a      	orrs	r2, r3
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	061b      	lsls	r3, r3, #24
 800594c:	431a      	orrs	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	071b      	lsls	r3, r3, #28
 8005952:	4929      	ldr	r1, [pc, #164]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d028      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005966:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596c:	0e1b      	lsrs	r3, r3, #24
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005974:	4b20      	ldr	r3, [pc, #128]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597a:	0c1b      	lsrs	r3, r3, #16
 800597c:	f003 0303 	and.w	r3, r3, #3
 8005980:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	019a      	lsls	r2, r3, #6
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	041b      	lsls	r3, r3, #16
 800598c:	431a      	orrs	r2, r3
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	061b      	lsls	r3, r3, #24
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	071b      	lsls	r3, r3, #28
 800599a:	4917      	ldr	r1, [pc, #92]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800599c:	4313      	orrs	r3, r2
 800599e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80059a2:	4b15      	ldr	r3, [pc, #84]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	4911      	ldr	r1, [pc, #68]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80059b8:	4b0f      	ldr	r3, [pc, #60]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a0e      	ldr	r2, [pc, #56]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059c4:	f7fd f9c8 	bl	8002d58 <HAL_GetTick>
 80059c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059ca:	e008      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059cc:	f7fd f9c4 	bl	8002d58 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b64      	cmp	r3, #100	; 0x64
 80059d8:	d901      	bls.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e007      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ea:	d1ef      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3720      	adds	r7, #32
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40023800 	.word	0x40023800

080059fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e09d      	b.n	8005b4a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d108      	bne.n	8005a28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a1e:	d009      	beq.n	8005a34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	61da      	str	r2, [r3, #28]
 8005a26:	e005      	b.n	8005a34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fc f8aa 	bl	8001ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a74:	d902      	bls.n	8005a7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	e002      	b.n	8005a82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a8a:	d007      	beq.n	8005a9c <HAL_SPI_Init+0xa0>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a94:	d002      	beq.n	8005a9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005aac:	431a      	orrs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ade:	ea42 0103 	orr.w	r1, r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	0c1b      	lsrs	r3, r3, #16
 8005af8:	f003 0204 	and.w	r2, r3, #4
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	431a      	orrs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b18:	ea42 0103 	orr.w	r1, r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69da      	ldr	r2, [r3, #28]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b088      	sub	sp, #32
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	603b      	str	r3, [r7, #0]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_SPI_Transmit+0x22>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e158      	b.n	8005e26 <HAL_SPI_Transmit+0x2d4>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b7c:	f7fd f8ec 	bl	8002d58 <HAL_GetTick>
 8005b80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b82:	88fb      	ldrh	r3, [r7, #6]
 8005b84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d002      	beq.n	8005b98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b92:	2302      	movs	r3, #2
 8005b94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b96:	e13d      	b.n	8005e14 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <HAL_SPI_Transmit+0x52>
 8005b9e:	88fb      	ldrh	r3, [r7, #6]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d102      	bne.n	8005baa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ba8:	e134      	b.n	8005e14 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2203      	movs	r2, #3
 8005bae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	88fa      	ldrh	r2, [r7, #6]
 8005bc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	88fa      	ldrh	r2, [r7, #6]
 8005bc8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf4:	d10f      	bne.n	8005c16 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c20:	2b40      	cmp	r3, #64	; 0x40
 8005c22:	d007      	beq.n	8005c34 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c3c:	d94b      	bls.n	8005cd6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <HAL_SPI_Transmit+0xfa>
 8005c46:	8afb      	ldrh	r3, [r7, #22]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d13e      	bne.n	8005cca <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c50:	881a      	ldrh	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	1c9a      	adds	r2, r3, #2
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c70:	e02b      	b.n	8005cca <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d112      	bne.n	8005ca6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c84:	881a      	ldrh	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	1c9a      	adds	r2, r3, #2
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ca4:	e011      	b.n	8005cca <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ca6:	f7fd f857 	bl	8002d58 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d803      	bhi.n	8005cbe <HAL_SPI_Transmit+0x16c>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbc:	d102      	bne.n	8005cc4 <HAL_SPI_Transmit+0x172>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cc8:	e0a4      	b.n	8005e14 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1ce      	bne.n	8005c72 <HAL_SPI_Transmit+0x120>
 8005cd4:	e07c      	b.n	8005dd0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <HAL_SPI_Transmit+0x192>
 8005cde:	8afb      	ldrh	r3, [r7, #22]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d170      	bne.n	8005dc6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d912      	bls.n	8005d14 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf2:	881a      	ldrh	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	1c9a      	adds	r2, r3, #2
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	3b02      	subs	r3, #2
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d12:	e058      	b.n	8005dc6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	330c      	adds	r3, #12
 8005d1e:	7812      	ldrb	r2, [r2, #0]
 8005d20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005d3a:	e044      	b.n	8005dc6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d12b      	bne.n	8005da2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d912      	bls.n	8005d7a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	881a      	ldrh	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	1c9a      	adds	r2, r3, #2
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b02      	subs	r3, #2
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d78:	e025      	b.n	8005dc6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	330c      	adds	r3, #12
 8005d84:	7812      	ldrb	r2, [r2, #0]
 8005d86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005da0:	e011      	b.n	8005dc6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005da2:	f7fc ffd9 	bl	8002d58 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d803      	bhi.n	8005dba <HAL_SPI_Transmit+0x268>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d102      	bne.n	8005dc0 <HAL_SPI_Transmit+0x26e>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d102      	bne.n	8005dc6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005dc4:	e026      	b.n	8005e14 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1b5      	bne.n	8005d3c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	6839      	ldr	r1, [r7, #0]
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 fadd 	bl	8006394 <SPI_EndRxTxTransaction>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dee:	2300      	movs	r3, #0
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	77fb      	strb	r3, [r7, #31]
 8005e10:	e000      	b.n	8005e14 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005e12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e24:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3720      	adds	r7, #32
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
	...

08005e30 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <HAL_SPI_Transmit_DMA+0x20>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e0d8      	b.n	8006002 <HAL_SPI_Transmit_DMA+0x1d2>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d002      	beq.n	8005e6a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005e64:	2302      	movs	r3, #2
 8005e66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e68:	e0c6      	b.n	8005ff8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <HAL_SPI_Transmit_DMA+0x46>
 8005e70:	88fb      	ldrh	r3, [r7, #6]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d102      	bne.n	8005e7c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e7a:	e0bd      	b.n	8005ff8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2203      	movs	r2, #3
 8005e80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	88fa      	ldrh	r2, [r7, #6]
 8005e94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	88fa      	ldrh	r2, [r7, #6]
 8005e9a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec6:	d10f      	bne.n	8005ee8 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ee6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eec:	4a47      	ldr	r2, [pc, #284]	; (800600c <HAL_SPI_Transmit_DMA+0x1dc>)
 8005eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef4:	4a46      	ldr	r2, [pc, #280]	; (8006010 <HAL_SPI_Transmit_DMA+0x1e0>)
 8005ef6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efc:	4a45      	ldr	r2, [pc, #276]	; (8006014 <HAL_SPI_Transmit_DMA+0x1e4>)
 8005efe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f04:	2200      	movs	r2, #0
 8005f06:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f16:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f20:	d82d      	bhi.n	8005f7e <HAL_SPI_Transmit_DMA+0x14e>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f2c:	d127      	bne.n	8005f7e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10f      	bne.n	8005f5c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f4a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	085b      	lsrs	r3, r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f5a:	e010      	b.n	8005f7e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f6a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	085b      	lsrs	r3, r3, #1
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3301      	adds	r3, #1
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	4619      	mov	r1, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f94:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005f96:	f7fd f9f5 	bl	8003384 <HAL_DMA_Start_IT>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00c      	beq.n	8005fba <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa4:	f043 0210 	orr.w	r2, r3, #16
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005fb8:	e01e      	b.n	8005ff8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc4:	2b40      	cmp	r3, #64	; 0x40
 8005fc6:	d007      	beq.n	8005fd8 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fd6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0220 	orr.w	r2, r2, #32
 8005fe6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0202 	orr.w	r2, r2, #2
 8005ff6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006000:	7dfb      	ldrb	r3, [r7, #23]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	080060fd 	.word	0x080060fd
 8006010:	08006055 	.word	0x08006055
 8006014:	08006119 	.word	0x08006119

08006018 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006062:	f7fc fe79 	bl	8002d58 <HAL_GetTick>
 8006066:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006076:	d03b      	beq.n	80060f0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0220 	bic.w	r2, r2, #32
 8006086:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0202 	bic.w	r2, r2, #2
 8006096:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	2164      	movs	r1, #100	; 0x64
 800609c:	6978      	ldr	r0, [r7, #20]
 800609e:	f000 f979 	bl	8006394 <SPI_EndRxTxTransaction>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d005      	beq.n	80060b4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ac:	f043 0220 	orr.w	r2, r3, #32
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10a      	bne.n	80060d2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2200      	movs	r2, #0
 80060d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80060e8:	6978      	ldr	r0, [r7, #20]
 80060ea:	f7ff ffa9 	bl	8006040 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80060ee:	e002      	b.n	80060f6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80060f0:	6978      	ldr	r0, [r7, #20]
 80060f2:	f7ff ff91 	bl	8006018 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006108:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f7ff ff8e 	bl	800602c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006110:	bf00      	nop
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0203 	bic.w	r2, r2, #3
 8006134:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613a:	f043 0210 	orr.w	r2, r3, #16
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f7ff ff78 	bl	8006040 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006150:	bf00      	nop
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b088      	sub	sp, #32
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	603b      	str	r3, [r7, #0]
 8006164:	4613      	mov	r3, r2
 8006166:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006168:	f7fc fdf6 	bl	8002d58 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	1a9b      	subs	r3, r3, r2
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	4413      	add	r3, r2
 8006176:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006178:	f7fc fdee 	bl	8002d58 <HAL_GetTick>
 800617c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800617e:	4b39      	ldr	r3, [pc, #228]	; (8006264 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	015b      	lsls	r3, r3, #5
 8006184:	0d1b      	lsrs	r3, r3, #20
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	fb02 f303 	mul.w	r3, r2, r3
 800618c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800618e:	e054      	b.n	800623a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006196:	d050      	beq.n	800623a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006198:	f7fc fdde 	bl	8002d58 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d902      	bls.n	80061ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d13d      	bne.n	800622a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061c6:	d111      	bne.n	80061ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061d0:	d004      	beq.n	80061dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061da:	d107      	bne.n	80061ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f4:	d10f      	bne.n	8006216 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006214:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e017      	b.n	800625a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	3b01      	subs	r3, #1
 8006238:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4013      	ands	r3, r2
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	429a      	cmp	r2, r3
 8006248:	bf0c      	ite	eq
 800624a:	2301      	moveq	r3, #1
 800624c:	2300      	movne	r3, #0
 800624e:	b2db      	uxtb	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	429a      	cmp	r2, r3
 8006256:	d19b      	bne.n	8006190 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3720      	adds	r7, #32
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20000054 	.word	0x20000054

08006268 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b08a      	sub	sp, #40	; 0x28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006276:	2300      	movs	r3, #0
 8006278:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800627a:	f7fc fd6d 	bl	8002d58 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	1a9b      	subs	r3, r3, r2
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	4413      	add	r3, r2
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800628a:	f7fc fd65 	bl	8002d58 <HAL_GetTick>
 800628e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	330c      	adds	r3, #12
 8006296:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006298:	4b3d      	ldr	r3, [pc, #244]	; (8006390 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	4613      	mov	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	00da      	lsls	r2, r3, #3
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	0d1b      	lsrs	r3, r3, #20
 80062a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062aa:	fb02 f303 	mul.w	r3, r2, r3
 80062ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80062b0:	e060      	b.n	8006374 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062b8:	d107      	bne.n	80062ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d104      	bne.n	80062ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d050      	beq.n	8006374 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062d2:	f7fc fd41 	bl	8002d58 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062de:	429a      	cmp	r2, r3
 80062e0:	d902      	bls.n	80062e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d13d      	bne.n	8006364 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006300:	d111      	bne.n	8006326 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800630a:	d004      	beq.n	8006316 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006314:	d107      	bne.n	8006326 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006324:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800632e:	d10f      	bne.n	8006350 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800634e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e010      	b.n	8006386 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	3b01      	subs	r3, #1
 8006372:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	4013      	ands	r3, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	429a      	cmp	r2, r3
 8006382:	d196      	bne.n	80062b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3728      	adds	r7, #40	; 0x28
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20000054 	.word	0x20000054

08006394 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f7ff ff5b 	bl	8006268 <SPI_WaitFifoStateUntilTimeout>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d007      	beq.n	80063c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063bc:	f043 0220 	orr.w	r2, r3, #32
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e046      	b.n	8006456 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063c8:	4b25      	ldr	r3, [pc, #148]	; (8006460 <SPI_EndRxTxTransaction+0xcc>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a25      	ldr	r2, [pc, #148]	; (8006464 <SPI_EndRxTxTransaction+0xd0>)
 80063ce:	fba2 2303 	umull	r2, r3, r2, r3
 80063d2:	0d5b      	lsrs	r3, r3, #21
 80063d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063d8:	fb02 f303 	mul.w	r3, r2, r3
 80063dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063e6:	d112      	bne.n	800640e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2200      	movs	r2, #0
 80063f0:	2180      	movs	r1, #128	; 0x80
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f7ff feb0 	bl	8006158 <SPI_WaitFlagStateUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d016      	beq.n	800642c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006402:	f043 0220 	orr.w	r2, r3, #32
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e023      	b.n	8006456 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	3b01      	subs	r3, #1
 8006418:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006424:	2b80      	cmp	r3, #128	; 0x80
 8006426:	d0f2      	beq.n	800640e <SPI_EndRxTxTransaction+0x7a>
 8006428:	e000      	b.n	800642c <SPI_EndRxTxTransaction+0x98>
        break;
 800642a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2200      	movs	r2, #0
 8006434:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f7ff ff15 	bl	8006268 <SPI_WaitFifoStateUntilTimeout>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d007      	beq.n	8006454 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006448:	f043 0220 	orr.w	r2, r3, #32
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e000      	b.n	8006456 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000054 	.word	0x20000054
 8006464:	165e9f81 	.word	0x165e9f81

08006468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e049      	b.n	800650e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d106      	bne.n	8006494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f841 	bl	8006516 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3304      	adds	r3, #4
 80064a4:	4619      	mov	r1, r3
 80064a6:	4610      	mov	r0, r2
 80064a8:	f000 fc66 	bl	8006d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
	...

0800652c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b01      	cmp	r3, #1
 800653e:	d001      	beq.n	8006544 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e054      	b.n	80065ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a26      	ldr	r2, [pc, #152]	; (80065fc <HAL_TIM_Base_Start_IT+0xd0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d022      	beq.n	80065ac <HAL_TIM_Base_Start_IT+0x80>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656e:	d01d      	beq.n	80065ac <HAL_TIM_Base_Start_IT+0x80>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a22      	ldr	r2, [pc, #136]	; (8006600 <HAL_TIM_Base_Start_IT+0xd4>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d018      	beq.n	80065ac <HAL_TIM_Base_Start_IT+0x80>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a21      	ldr	r2, [pc, #132]	; (8006604 <HAL_TIM_Base_Start_IT+0xd8>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d013      	beq.n	80065ac <HAL_TIM_Base_Start_IT+0x80>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a1f      	ldr	r2, [pc, #124]	; (8006608 <HAL_TIM_Base_Start_IT+0xdc>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00e      	beq.n	80065ac <HAL_TIM_Base_Start_IT+0x80>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1e      	ldr	r2, [pc, #120]	; (800660c <HAL_TIM_Base_Start_IT+0xe0>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d009      	beq.n	80065ac <HAL_TIM_Base_Start_IT+0x80>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a1c      	ldr	r2, [pc, #112]	; (8006610 <HAL_TIM_Base_Start_IT+0xe4>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d004      	beq.n	80065ac <HAL_TIM_Base_Start_IT+0x80>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a1b      	ldr	r2, [pc, #108]	; (8006614 <HAL_TIM_Base_Start_IT+0xe8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d115      	bne.n	80065d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	4b19      	ldr	r3, [pc, #100]	; (8006618 <HAL_TIM_Base_Start_IT+0xec>)
 80065b4:	4013      	ands	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b06      	cmp	r3, #6
 80065bc:	d015      	beq.n	80065ea <HAL_TIM_Base_Start_IT+0xbe>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c4:	d011      	beq.n	80065ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f042 0201 	orr.w	r2, r2, #1
 80065d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d6:	e008      	b.n	80065ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0201 	orr.w	r2, r2, #1
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	e000      	b.n	80065ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	40010000 	.word	0x40010000
 8006600:	40000400 	.word	0x40000400
 8006604:	40000800 	.word	0x40000800
 8006608:	40000c00 	.word	0x40000c00
 800660c:	40010400 	.word	0x40010400
 8006610:	40014000 	.word	0x40014000
 8006614:	40001800 	.word	0x40001800
 8006618:	00010007 	.word	0x00010007

0800661c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e049      	b.n	80066c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d106      	bne.n	8006648 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7fb ff64 	bl	8002510 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3304      	adds	r3, #4
 8006658:	4619      	mov	r1, r3
 800665a:	4610      	mov	r0, r2
 800665c:	f000 fb8c 	bl	8006d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
	...

080066cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d109      	bne.n	80066f0 <HAL_TIM_PWM_Start+0x24>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	bf14      	ite	ne
 80066e8:	2301      	movne	r3, #1
 80066ea:	2300      	moveq	r3, #0
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	e03c      	b.n	800676a <HAL_TIM_PWM_Start+0x9e>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	d109      	bne.n	800670a <HAL_TIM_PWM_Start+0x3e>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b01      	cmp	r3, #1
 8006700:	bf14      	ite	ne
 8006702:	2301      	movne	r3, #1
 8006704:	2300      	moveq	r3, #0
 8006706:	b2db      	uxtb	r3, r3
 8006708:	e02f      	b.n	800676a <HAL_TIM_PWM_Start+0x9e>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b08      	cmp	r3, #8
 800670e:	d109      	bne.n	8006724 <HAL_TIM_PWM_Start+0x58>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b01      	cmp	r3, #1
 800671a:	bf14      	ite	ne
 800671c:	2301      	movne	r3, #1
 800671e:	2300      	moveq	r3, #0
 8006720:	b2db      	uxtb	r3, r3
 8006722:	e022      	b.n	800676a <HAL_TIM_PWM_Start+0x9e>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b0c      	cmp	r3, #12
 8006728:	d109      	bne.n	800673e <HAL_TIM_PWM_Start+0x72>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b01      	cmp	r3, #1
 8006734:	bf14      	ite	ne
 8006736:	2301      	movne	r3, #1
 8006738:	2300      	moveq	r3, #0
 800673a:	b2db      	uxtb	r3, r3
 800673c:	e015      	b.n	800676a <HAL_TIM_PWM_Start+0x9e>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b10      	cmp	r3, #16
 8006742:	d109      	bne.n	8006758 <HAL_TIM_PWM_Start+0x8c>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b01      	cmp	r3, #1
 800674e:	bf14      	ite	ne
 8006750:	2301      	movne	r3, #1
 8006752:	2300      	moveq	r3, #0
 8006754:	b2db      	uxtb	r3, r3
 8006756:	e008      	b.n	800676a <HAL_TIM_PWM_Start+0x9e>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b01      	cmp	r3, #1
 8006762:	bf14      	ite	ne
 8006764:	2301      	movne	r3, #1
 8006766:	2300      	moveq	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e092      	b.n	8006898 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d104      	bne.n	8006782 <HAL_TIM_PWM_Start+0xb6>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006780:	e023      	b.n	80067ca <HAL_TIM_PWM_Start+0xfe>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b04      	cmp	r3, #4
 8006786:	d104      	bne.n	8006792 <HAL_TIM_PWM_Start+0xc6>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006790:	e01b      	b.n	80067ca <HAL_TIM_PWM_Start+0xfe>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b08      	cmp	r3, #8
 8006796:	d104      	bne.n	80067a2 <HAL_TIM_PWM_Start+0xd6>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067a0:	e013      	b.n	80067ca <HAL_TIM_PWM_Start+0xfe>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b0c      	cmp	r3, #12
 80067a6:	d104      	bne.n	80067b2 <HAL_TIM_PWM_Start+0xe6>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2202      	movs	r2, #2
 80067ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067b0:	e00b      	b.n	80067ca <HAL_TIM_PWM_Start+0xfe>
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b10      	cmp	r3, #16
 80067b6:	d104      	bne.n	80067c2 <HAL_TIM_PWM_Start+0xf6>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067c0:	e003      	b.n	80067ca <HAL_TIM_PWM_Start+0xfe>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2202      	movs	r2, #2
 80067c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2201      	movs	r2, #1
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fdce 	bl	8007374 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a30      	ldr	r2, [pc, #192]	; (80068a0 <HAL_TIM_PWM_Start+0x1d4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d004      	beq.n	80067ec <HAL_TIM_PWM_Start+0x120>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a2f      	ldr	r2, [pc, #188]	; (80068a4 <HAL_TIM_PWM_Start+0x1d8>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d101      	bne.n	80067f0 <HAL_TIM_PWM_Start+0x124>
 80067ec:	2301      	movs	r3, #1
 80067ee:	e000      	b.n	80067f2 <HAL_TIM_PWM_Start+0x126>
 80067f0:	2300      	movs	r3, #0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d007      	beq.n	8006806 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006804:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a25      	ldr	r2, [pc, #148]	; (80068a0 <HAL_TIM_PWM_Start+0x1d4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d022      	beq.n	8006856 <HAL_TIM_PWM_Start+0x18a>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006818:	d01d      	beq.n	8006856 <HAL_TIM_PWM_Start+0x18a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a22      	ldr	r2, [pc, #136]	; (80068a8 <HAL_TIM_PWM_Start+0x1dc>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d018      	beq.n	8006856 <HAL_TIM_PWM_Start+0x18a>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a20      	ldr	r2, [pc, #128]	; (80068ac <HAL_TIM_PWM_Start+0x1e0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d013      	beq.n	8006856 <HAL_TIM_PWM_Start+0x18a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a1f      	ldr	r2, [pc, #124]	; (80068b0 <HAL_TIM_PWM_Start+0x1e4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00e      	beq.n	8006856 <HAL_TIM_PWM_Start+0x18a>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a19      	ldr	r2, [pc, #100]	; (80068a4 <HAL_TIM_PWM_Start+0x1d8>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d009      	beq.n	8006856 <HAL_TIM_PWM_Start+0x18a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1b      	ldr	r2, [pc, #108]	; (80068b4 <HAL_TIM_PWM_Start+0x1e8>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d004      	beq.n	8006856 <HAL_TIM_PWM_Start+0x18a>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a19      	ldr	r2, [pc, #100]	; (80068b8 <HAL_TIM_PWM_Start+0x1ec>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d115      	bne.n	8006882 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	4b17      	ldr	r3, [pc, #92]	; (80068bc <HAL_TIM_PWM_Start+0x1f0>)
 800685e:	4013      	ands	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b06      	cmp	r3, #6
 8006866:	d015      	beq.n	8006894 <HAL_TIM_PWM_Start+0x1c8>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800686e:	d011      	beq.n	8006894 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0201 	orr.w	r2, r2, #1
 800687e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006880:	e008      	b.n	8006894 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f042 0201 	orr.w	r2, r2, #1
 8006890:	601a      	str	r2, [r3, #0]
 8006892:	e000      	b.n	8006896 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006894:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40010000 	.word	0x40010000
 80068a4:	40010400 	.word	0x40010400
 80068a8:	40000400 	.word	0x40000400
 80068ac:	40000800 	.word	0x40000800
 80068b0:	40000c00 	.word	0x40000c00
 80068b4:	40014000 	.word	0x40014000
 80068b8:	40001800 	.word	0x40001800
 80068bc:	00010007 	.word	0x00010007

080068c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d122      	bne.n	800691c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d11b      	bne.n	800691c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f06f 0202 	mvn.w	r2, #2
 80068ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fa1a 	bl	8006d3c <HAL_TIM_IC_CaptureCallback>
 8006908:	e005      	b.n	8006916 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fa0c 	bl	8006d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fa1d 	bl	8006d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 0304 	and.w	r3, r3, #4
 8006926:	2b04      	cmp	r3, #4
 8006928:	d122      	bne.n	8006970 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b04      	cmp	r3, #4
 8006936:	d11b      	bne.n	8006970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f06f 0204 	mvn.w	r2, #4
 8006940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2202      	movs	r2, #2
 8006946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f9f0 	bl	8006d3c <HAL_TIM_IC_CaptureCallback>
 800695c:	e005      	b.n	800696a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f9e2 	bl	8006d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f9f3 	bl	8006d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f003 0308 	and.w	r3, r3, #8
 800697a:	2b08      	cmp	r3, #8
 800697c:	d122      	bne.n	80069c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b08      	cmp	r3, #8
 800698a:	d11b      	bne.n	80069c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0208 	mvn.w	r2, #8
 8006994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2204      	movs	r2, #4
 800699a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f9c6 	bl	8006d3c <HAL_TIM_IC_CaptureCallback>
 80069b0:	e005      	b.n	80069be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f9b8 	bl	8006d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f9c9 	bl	8006d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f003 0310 	and.w	r3, r3, #16
 80069ce:	2b10      	cmp	r3, #16
 80069d0:	d122      	bne.n	8006a18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f003 0310 	and.w	r3, r3, #16
 80069dc:	2b10      	cmp	r3, #16
 80069de:	d11b      	bne.n	8006a18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0210 	mvn.w	r2, #16
 80069e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2208      	movs	r2, #8
 80069ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f99c 	bl	8006d3c <HAL_TIM_IC_CaptureCallback>
 8006a04:	e005      	b.n	8006a12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f98e 	bl	8006d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f99f 	bl	8006d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d10e      	bne.n	8006a44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d107      	bne.n	8006a44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f06f 0201 	mvn.w	r2, #1
 8006a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fb f85c 	bl	8001afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4e:	2b80      	cmp	r3, #128	; 0x80
 8006a50:	d10e      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5c:	2b80      	cmp	r3, #128	; 0x80
 8006a5e:	d107      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fd40 	bl	80074f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a7e:	d10e      	bne.n	8006a9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8a:	2b80      	cmp	r3, #128	; 0x80
 8006a8c:	d107      	bne.n	8006a9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fd33 	bl	8007504 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa8:	2b40      	cmp	r3, #64	; 0x40
 8006aaa:	d10e      	bne.n	8006aca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab6:	2b40      	cmp	r3, #64	; 0x40
 8006ab8:	d107      	bne.n	8006aca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f94d 	bl	8006d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b20      	cmp	r3, #32
 8006ad6:	d10e      	bne.n	8006af6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f003 0320 	and.w	r3, r3, #32
 8006ae2:	2b20      	cmp	r3, #32
 8006ae4:	d107      	bne.n	8006af6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f06f 0220 	mvn.w	r2, #32
 8006aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fcf3 	bl	80074dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006af6:	bf00      	nop
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e0ff      	b.n	8006d1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b14      	cmp	r3, #20
 8006b2a:	f200 80f0 	bhi.w	8006d0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b2e:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b34:	08006b89 	.word	0x08006b89
 8006b38:	08006d0f 	.word	0x08006d0f
 8006b3c:	08006d0f 	.word	0x08006d0f
 8006b40:	08006d0f 	.word	0x08006d0f
 8006b44:	08006bc9 	.word	0x08006bc9
 8006b48:	08006d0f 	.word	0x08006d0f
 8006b4c:	08006d0f 	.word	0x08006d0f
 8006b50:	08006d0f 	.word	0x08006d0f
 8006b54:	08006c0b 	.word	0x08006c0b
 8006b58:	08006d0f 	.word	0x08006d0f
 8006b5c:	08006d0f 	.word	0x08006d0f
 8006b60:	08006d0f 	.word	0x08006d0f
 8006b64:	08006c4b 	.word	0x08006c4b
 8006b68:	08006d0f 	.word	0x08006d0f
 8006b6c:	08006d0f 	.word	0x08006d0f
 8006b70:	08006d0f 	.word	0x08006d0f
 8006b74:	08006c8d 	.word	0x08006c8d
 8006b78:	08006d0f 	.word	0x08006d0f
 8006b7c:	08006d0f 	.word	0x08006d0f
 8006b80:	08006d0f 	.word	0x08006d0f
 8006b84:	08006ccd 	.word	0x08006ccd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 f992 	bl	8006eb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699a      	ldr	r2, [r3, #24]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0208 	orr.w	r2, r2, #8
 8006ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	699a      	ldr	r2, [r3, #24]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0204 	bic.w	r2, r2, #4
 8006bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6999      	ldr	r1, [r3, #24]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	691a      	ldr	r2, [r3, #16]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	619a      	str	r2, [r3, #24]
      break;
 8006bc6:	e0a5      	b.n	8006d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68b9      	ldr	r1, [r7, #8]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 f9e4 	bl	8006f9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699a      	ldr	r2, [r3, #24]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6999      	ldr	r1, [r3, #24]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	021a      	lsls	r2, r3, #8
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	619a      	str	r2, [r3, #24]
      break;
 8006c08:	e084      	b.n	8006d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68b9      	ldr	r1, [r7, #8]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 fa3b 	bl	800708c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69da      	ldr	r2, [r3, #28]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f042 0208 	orr.w	r2, r2, #8
 8006c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69da      	ldr	r2, [r3, #28]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 0204 	bic.w	r2, r2, #4
 8006c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69d9      	ldr	r1, [r3, #28]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	691a      	ldr	r2, [r3, #16]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	61da      	str	r2, [r3, #28]
      break;
 8006c48:	e064      	b.n	8006d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68b9      	ldr	r1, [r7, #8]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 fa91 	bl	8007178 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69da      	ldr	r2, [r3, #28]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69da      	ldr	r2, [r3, #28]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69d9      	ldr	r1, [r3, #28]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	021a      	lsls	r2, r3, #8
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	61da      	str	r2, [r3, #28]
      break;
 8006c8a:	e043      	b.n	8006d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fac8 	bl	8007228 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0208 	orr.w	r2, r2, #8
 8006ca6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 0204 	bic.w	r2, r2, #4
 8006cb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	691a      	ldr	r2, [r3, #16]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006cca:	e023      	b.n	8006d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68b9      	ldr	r1, [r7, #8]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fafa 	bl	80072cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ce6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cf6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	021a      	lsls	r2, r3, #8
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d0c:	e002      	b.n	8006d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	75fb      	strb	r3, [r7, #23]
      break;
 8006d12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3718      	adds	r7, #24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop

08006d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a40      	ldr	r2, [pc, #256]	; (8006e8c <TIM_Base_SetConfig+0x114>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d013      	beq.n	8006db8 <TIM_Base_SetConfig+0x40>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d96:	d00f      	beq.n	8006db8 <TIM_Base_SetConfig+0x40>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a3d      	ldr	r2, [pc, #244]	; (8006e90 <TIM_Base_SetConfig+0x118>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d00b      	beq.n	8006db8 <TIM_Base_SetConfig+0x40>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a3c      	ldr	r2, [pc, #240]	; (8006e94 <TIM_Base_SetConfig+0x11c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d007      	beq.n	8006db8 <TIM_Base_SetConfig+0x40>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a3b      	ldr	r2, [pc, #236]	; (8006e98 <TIM_Base_SetConfig+0x120>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d003      	beq.n	8006db8 <TIM_Base_SetConfig+0x40>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a3a      	ldr	r2, [pc, #232]	; (8006e9c <TIM_Base_SetConfig+0x124>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d108      	bne.n	8006dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a2f      	ldr	r2, [pc, #188]	; (8006e8c <TIM_Base_SetConfig+0x114>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d02b      	beq.n	8006e2a <TIM_Base_SetConfig+0xb2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd8:	d027      	beq.n	8006e2a <TIM_Base_SetConfig+0xb2>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a2c      	ldr	r2, [pc, #176]	; (8006e90 <TIM_Base_SetConfig+0x118>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d023      	beq.n	8006e2a <TIM_Base_SetConfig+0xb2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a2b      	ldr	r2, [pc, #172]	; (8006e94 <TIM_Base_SetConfig+0x11c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d01f      	beq.n	8006e2a <TIM_Base_SetConfig+0xb2>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a2a      	ldr	r2, [pc, #168]	; (8006e98 <TIM_Base_SetConfig+0x120>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d01b      	beq.n	8006e2a <TIM_Base_SetConfig+0xb2>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a29      	ldr	r2, [pc, #164]	; (8006e9c <TIM_Base_SetConfig+0x124>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d017      	beq.n	8006e2a <TIM_Base_SetConfig+0xb2>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a28      	ldr	r2, [pc, #160]	; (8006ea0 <TIM_Base_SetConfig+0x128>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <TIM_Base_SetConfig+0xb2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a27      	ldr	r2, [pc, #156]	; (8006ea4 <TIM_Base_SetConfig+0x12c>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00f      	beq.n	8006e2a <TIM_Base_SetConfig+0xb2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a26      	ldr	r2, [pc, #152]	; (8006ea8 <TIM_Base_SetConfig+0x130>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d00b      	beq.n	8006e2a <TIM_Base_SetConfig+0xb2>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a25      	ldr	r2, [pc, #148]	; (8006eac <TIM_Base_SetConfig+0x134>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d007      	beq.n	8006e2a <TIM_Base_SetConfig+0xb2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a24      	ldr	r2, [pc, #144]	; (8006eb0 <TIM_Base_SetConfig+0x138>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d003      	beq.n	8006e2a <TIM_Base_SetConfig+0xb2>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a23      	ldr	r2, [pc, #140]	; (8006eb4 <TIM_Base_SetConfig+0x13c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d108      	bne.n	8006e3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	689a      	ldr	r2, [r3, #8]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a0a      	ldr	r2, [pc, #40]	; (8006e8c <TIM_Base_SetConfig+0x114>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d003      	beq.n	8006e70 <TIM_Base_SetConfig+0xf8>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a0c      	ldr	r2, [pc, #48]	; (8006e9c <TIM_Base_SetConfig+0x124>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d103      	bne.n	8006e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	691a      	ldr	r2, [r3, #16]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	615a      	str	r2, [r3, #20]
}
 8006e7e:	bf00      	nop
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	40010000 	.word	0x40010000
 8006e90:	40000400 	.word	0x40000400
 8006e94:	40000800 	.word	0x40000800
 8006e98:	40000c00 	.word	0x40000c00
 8006e9c:	40010400 	.word	0x40010400
 8006ea0:	40014000 	.word	0x40014000
 8006ea4:	40014400 	.word	0x40014400
 8006ea8:	40014800 	.word	0x40014800
 8006eac:	40001800 	.word	0x40001800
 8006eb0:	40001c00 	.word	0x40001c00
 8006eb4:	40002000 	.word	0x40002000

08006eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	f023 0201 	bic.w	r2, r3, #1
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4b2b      	ldr	r3, [pc, #172]	; (8006f90 <TIM_OC1_SetConfig+0xd8>)
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0303 	bic.w	r3, r3, #3
 8006eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f023 0302 	bic.w	r3, r3, #2
 8006f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a21      	ldr	r2, [pc, #132]	; (8006f94 <TIM_OC1_SetConfig+0xdc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d003      	beq.n	8006f1c <TIM_OC1_SetConfig+0x64>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a20      	ldr	r2, [pc, #128]	; (8006f98 <TIM_OC1_SetConfig+0xe0>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d10c      	bne.n	8006f36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f023 0308 	bic.w	r3, r3, #8
 8006f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f023 0304 	bic.w	r3, r3, #4
 8006f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a16      	ldr	r2, [pc, #88]	; (8006f94 <TIM_OC1_SetConfig+0xdc>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d003      	beq.n	8006f46 <TIM_OC1_SetConfig+0x8e>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a15      	ldr	r2, [pc, #84]	; (8006f98 <TIM_OC1_SetConfig+0xe0>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d111      	bne.n	8006f6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	621a      	str	r2, [r3, #32]
}
 8006f84:	bf00      	nop
 8006f86:	371c      	adds	r7, #28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	fffeff8f 	.word	0xfffeff8f
 8006f94:	40010000 	.word	0x40010000
 8006f98:	40010400 	.word	0x40010400

08006f9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	f023 0210 	bic.w	r2, r3, #16
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4b2e      	ldr	r3, [pc, #184]	; (8007080 <TIM_OC2_SetConfig+0xe4>)
 8006fc8:	4013      	ands	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	021b      	lsls	r3, r3, #8
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f023 0320 	bic.w	r3, r3, #32
 8006fe6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	011b      	lsls	r3, r3, #4
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a23      	ldr	r2, [pc, #140]	; (8007084 <TIM_OC2_SetConfig+0xe8>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d003      	beq.n	8007004 <TIM_OC2_SetConfig+0x68>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a22      	ldr	r2, [pc, #136]	; (8007088 <TIM_OC2_SetConfig+0xec>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d10d      	bne.n	8007020 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800700a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	011b      	lsls	r3, r3, #4
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a18      	ldr	r2, [pc, #96]	; (8007084 <TIM_OC2_SetConfig+0xe8>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d003      	beq.n	8007030 <TIM_OC2_SetConfig+0x94>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a17      	ldr	r2, [pc, #92]	; (8007088 <TIM_OC2_SetConfig+0xec>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d113      	bne.n	8007058 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007036:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800703e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	4313      	orrs	r3, r2
 8007056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	621a      	str	r2, [r3, #32]
}
 8007072:	bf00      	nop
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	feff8fff 	.word	0xfeff8fff
 8007084:	40010000 	.word	0x40010000
 8007088:	40010400 	.word	0x40010400

0800708c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4b2d      	ldr	r3, [pc, #180]	; (800716c <TIM_OC3_SetConfig+0xe0>)
 80070b8:	4013      	ands	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0303 	bic.w	r3, r3, #3
 80070c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	021b      	lsls	r3, r3, #8
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	4313      	orrs	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a22      	ldr	r2, [pc, #136]	; (8007170 <TIM_OC3_SetConfig+0xe4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d003      	beq.n	80070f2 <TIM_OC3_SetConfig+0x66>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a21      	ldr	r2, [pc, #132]	; (8007174 <TIM_OC3_SetConfig+0xe8>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d10d      	bne.n	800710e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	021b      	lsls	r3, r3, #8
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	4313      	orrs	r3, r2
 8007104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800710c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a17      	ldr	r2, [pc, #92]	; (8007170 <TIM_OC3_SetConfig+0xe4>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d003      	beq.n	800711e <TIM_OC3_SetConfig+0x92>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a16      	ldr	r2, [pc, #88]	; (8007174 <TIM_OC3_SetConfig+0xe8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d113      	bne.n	8007146 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800712c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	4313      	orrs	r3, r2
 8007138:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	011b      	lsls	r3, r3, #4
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	4313      	orrs	r3, r2
 8007144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	621a      	str	r2, [r3, #32]
}
 8007160:	bf00      	nop
 8007162:	371c      	adds	r7, #28
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	fffeff8f 	.word	0xfffeff8f
 8007170:	40010000 	.word	0x40010000
 8007174:	40010400 	.word	0x40010400

08007178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	4b1e      	ldr	r3, [pc, #120]	; (800721c <TIM_OC4_SetConfig+0xa4>)
 80071a4:	4013      	ands	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	021b      	lsls	r3, r3, #8
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	031b      	lsls	r3, r3, #12
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a13      	ldr	r2, [pc, #76]	; (8007220 <TIM_OC4_SetConfig+0xa8>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d003      	beq.n	80071e0 <TIM_OC4_SetConfig+0x68>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a12      	ldr	r2, [pc, #72]	; (8007224 <TIM_OC4_SetConfig+0xac>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d109      	bne.n	80071f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	019b      	lsls	r3, r3, #6
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	621a      	str	r2, [r3, #32]
}
 800720e:	bf00      	nop
 8007210:	371c      	adds	r7, #28
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	feff8fff 	.word	0xfeff8fff
 8007220:	40010000 	.word	0x40010000
 8007224:	40010400 	.word	0x40010400

08007228 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	4b1b      	ldr	r3, [pc, #108]	; (80072c0 <TIM_OC5_SetConfig+0x98>)
 8007254:	4013      	ands	r3, r2
 8007256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007268:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	041b      	lsls	r3, r3, #16
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	4313      	orrs	r3, r2
 8007274:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a12      	ldr	r2, [pc, #72]	; (80072c4 <TIM_OC5_SetConfig+0x9c>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d003      	beq.n	8007286 <TIM_OC5_SetConfig+0x5e>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a11      	ldr	r2, [pc, #68]	; (80072c8 <TIM_OC5_SetConfig+0xa0>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d109      	bne.n	800729a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800728c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	021b      	lsls	r3, r3, #8
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	4313      	orrs	r3, r2
 8007298:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	621a      	str	r2, [r3, #32]
}
 80072b4:	bf00      	nop
 80072b6:	371c      	adds	r7, #28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	fffeff8f 	.word	0xfffeff8f
 80072c4:	40010000 	.word	0x40010000
 80072c8:	40010400 	.word	0x40010400

080072cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4b1c      	ldr	r3, [pc, #112]	; (8007368 <TIM_OC6_SetConfig+0x9c>)
 80072f8:	4013      	ands	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	021b      	lsls	r3, r3, #8
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	4313      	orrs	r3, r2
 8007306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800730e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	051b      	lsls	r3, r3, #20
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	4313      	orrs	r3, r2
 800731a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a13      	ldr	r2, [pc, #76]	; (800736c <TIM_OC6_SetConfig+0xa0>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d003      	beq.n	800732c <TIM_OC6_SetConfig+0x60>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a12      	ldr	r2, [pc, #72]	; (8007370 <TIM_OC6_SetConfig+0xa4>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d109      	bne.n	8007340 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007332:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	029b      	lsls	r3, r3, #10
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	621a      	str	r2, [r3, #32]
}
 800735a:	bf00      	nop
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	feff8fff 	.word	0xfeff8fff
 800736c:	40010000 	.word	0x40010000
 8007370:	40010400 	.word	0x40010400

08007374 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	f003 031f 	and.w	r3, r3, #31
 8007386:	2201      	movs	r2, #1
 8007388:	fa02 f303 	lsl.w	r3, r2, r3
 800738c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a1a      	ldr	r2, [r3, #32]
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	43db      	mvns	r3, r3
 8007396:	401a      	ands	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6a1a      	ldr	r2, [r3, #32]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f003 031f 	and.w	r3, r3, #31
 80073a6:	6879      	ldr	r1, [r7, #4]
 80073a8:	fa01 f303 	lsl.w	r3, r1, r3
 80073ac:	431a      	orrs	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	621a      	str	r2, [r3, #32]
}
 80073b2:	bf00      	nop
 80073b4:	371c      	adds	r7, #28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
	...

080073c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d101      	bne.n	80073d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073d4:	2302      	movs	r3, #2
 80073d6:	e06d      	b.n	80074b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a30      	ldr	r2, [pc, #192]	; (80074c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d004      	beq.n	800740c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a2f      	ldr	r2, [pc, #188]	; (80074c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d108      	bne.n	800741e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007412:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007424:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	4313      	orrs	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a20      	ldr	r2, [pc, #128]	; (80074c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d022      	beq.n	8007488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800744a:	d01d      	beq.n	8007488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a1d      	ldr	r2, [pc, #116]	; (80074c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d018      	beq.n	8007488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a1c      	ldr	r2, [pc, #112]	; (80074cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d013      	beq.n	8007488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a1a      	ldr	r2, [pc, #104]	; (80074d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d00e      	beq.n	8007488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a15      	ldr	r2, [pc, #84]	; (80074c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d009      	beq.n	8007488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a16      	ldr	r2, [pc, #88]	; (80074d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d004      	beq.n	8007488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a15      	ldr	r2, [pc, #84]	; (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d10c      	bne.n	80074a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800748e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	4313      	orrs	r3, r2
 8007498:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	40010000 	.word	0x40010000
 80074c4:	40010400 	.word	0x40010400
 80074c8:	40000400 	.word	0x40000400
 80074cc:	40000800 	.word	0x40000800
 80074d0:	40000c00 	.word	0x40000c00
 80074d4:	40014000 	.word	0x40014000
 80074d8:	40001800 	.word	0x40001800

080074dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e040      	b.n	80075ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d106      	bne.n	8007540 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7fb f870 	bl	8002620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2224      	movs	r2, #36	; 0x24
 8007544:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0201 	bic.w	r2, r2, #1
 8007554:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fb82 	bl	8007c60 <UART_SetConfig>
 800755c:	4603      	mov	r3, r0
 800755e:	2b01      	cmp	r3, #1
 8007560:	d101      	bne.n	8007566 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e022      	b.n	80075ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fdda 	bl	8008128 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007582:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007592:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0201 	orr.w	r2, r2, #1
 80075a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fe61 	bl	800826c <UART_CheckIdleState>
 80075aa:	4603      	mov	r3, r0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08a      	sub	sp, #40	; 0x28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	4613      	mov	r3, r2
 80075c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	d132      	bne.n	8007632 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <HAL_UART_Receive_IT+0x24>
 80075d2:	88fb      	ldrh	r3, [r7, #6]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e02b      	b.n	8007634 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d018      	beq.n	8007622 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	613b      	str	r3, [r7, #16]
   return(result);
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	623b      	str	r3, [r7, #32]
 8007610:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	69f9      	ldr	r1, [r7, #28]
 8007614:	6a3a      	ldr	r2, [r7, #32]
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	61bb      	str	r3, [r7, #24]
   return(result);
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e6      	bne.n	80075f0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007622:	88fb      	ldrh	r3, [r7, #6]
 8007624:	461a      	mov	r2, r3
 8007626:	68b9      	ldr	r1, [r7, #8]
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 ff33 	bl	8008494 <UART_Start_Receive_IT>
 800762e:	4603      	mov	r3, r0
 8007630:	e000      	b.n	8007634 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007632:	2302      	movs	r3, #2
  }
}
 8007634:	4618      	mov	r0, r3
 8007636:	3728      	adds	r7, #40	; 0x28
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b0ba      	sub	sp, #232	; 0xe8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007662:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007666:	f640 030f 	movw	r3, #2063	; 0x80f
 800766a:	4013      	ands	r3, r2
 800766c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007670:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d115      	bne.n	80076a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00f      	beq.n	80076a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d009      	beq.n	80076a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 82ac 	beq.w	8007bf2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	4798      	blx	r3
      }
      return;
 80076a2:	e2a6      	b.n	8007bf2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80076a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 8117 	beq.w	80078dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80076ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d106      	bne.n	80076c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80076ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80076be:	4b85      	ldr	r3, [pc, #532]	; (80078d4 <HAL_UART_IRQHandler+0x298>)
 80076c0:	4013      	ands	r3, r2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 810a 	beq.w	80078dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d011      	beq.n	80076f8 <HAL_UART_IRQHandler+0xbc>
 80076d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00b      	beq.n	80076f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2201      	movs	r2, #1
 80076e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ee:	f043 0201 	orr.w	r2, r3, #1
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d011      	beq.n	8007728 <HAL_UART_IRQHandler+0xec>
 8007704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00b      	beq.n	8007728 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2202      	movs	r2, #2
 8007716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800771e:	f043 0204 	orr.w	r2, r3, #4
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800772c:	f003 0304 	and.w	r3, r3, #4
 8007730:	2b00      	cmp	r3, #0
 8007732:	d011      	beq.n	8007758 <HAL_UART_IRQHandler+0x11c>
 8007734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2204      	movs	r2, #4
 8007746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800774e:	f043 0202 	orr.w	r2, r3, #2
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775c:	f003 0308 	and.w	r3, r3, #8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d017      	beq.n	8007794 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007768:	f003 0320 	and.w	r3, r3, #32
 800776c:	2b00      	cmp	r3, #0
 800776e:	d105      	bne.n	800777c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007774:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00b      	beq.n	8007794 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2208      	movs	r2, #8
 8007782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800778a:	f043 0208 	orr.w	r2, r3, #8
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800779c:	2b00      	cmp	r3, #0
 800779e:	d012      	beq.n	80077c6 <HAL_UART_IRQHandler+0x18a>
 80077a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00c      	beq.n	80077c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077bc:	f043 0220 	orr.w	r2, r3, #32
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 8212 	beq.w	8007bf6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80077d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00d      	beq.n	80077fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e2:	f003 0320 	and.w	r3, r3, #32
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d007      	beq.n	80077fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007800:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800780e:	2b40      	cmp	r3, #64	; 0x40
 8007810:	d005      	beq.n	800781e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007816:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800781a:	2b00      	cmp	r3, #0
 800781c:	d04f      	beq.n	80078be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fefe 	bl	8008620 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782e:	2b40      	cmp	r3, #64	; 0x40
 8007830:	d141      	bne.n	80078b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3308      	adds	r3, #8
 8007838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007840:	e853 3f00 	ldrex	r3, [r3]
 8007844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800784c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3308      	adds	r3, #8
 800785a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800785e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800786a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1d9      	bne.n	8007832 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007882:	2b00      	cmp	r3, #0
 8007884:	d013      	beq.n	80078ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800788a:	4a13      	ldr	r2, [pc, #76]	; (80078d8 <HAL_UART_IRQHandler+0x29c>)
 800788c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007892:	4618      	mov	r0, r3
 8007894:	f7fb fe46 	bl	8003524 <HAL_DMA_Abort_IT>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d017      	beq.n	80078ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80078a8:	4610      	mov	r0, r2
 80078aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ac:	e00f      	b.n	80078ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f9b6 	bl	8007c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b4:	e00b      	b.n	80078ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f9b2 	bl	8007c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078bc:	e007      	b.n	80078ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f9ae 	bl	8007c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80078cc:	e193      	b.n	8007bf6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ce:	bf00      	nop
    return;
 80078d0:	e191      	b.n	8007bf6 <HAL_UART_IRQHandler+0x5ba>
 80078d2:	bf00      	nop
 80078d4:	04000120 	.word	0x04000120
 80078d8:	080086e9 	.word	0x080086e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	f040 814c 	bne.w	8007b7e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ea:	f003 0310 	and.w	r3, r3, #16
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f000 8145 	beq.w	8007b7e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f8:	f003 0310 	and.w	r3, r3, #16
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 813e 	beq.w	8007b7e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2210      	movs	r2, #16
 8007908:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007914:	2b40      	cmp	r3, #64	; 0x40
 8007916:	f040 80b6 	bne.w	8007a86 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007926:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 8165 	beq.w	8007bfa <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800793a:	429a      	cmp	r2, r3
 800793c:	f080 815d 	bcs.w	8007bfa <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007946:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800794e:	69db      	ldr	r3, [r3, #28]
 8007950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007954:	f000 8086 	beq.w	8007a64 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800796c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007974:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	461a      	mov	r2, r3
 800797e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007982:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007986:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800798e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800799a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1da      	bne.n	8007958 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3308      	adds	r3, #8
 80079a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079ac:	e853 3f00 	ldrex	r3, [r3]
 80079b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079b4:	f023 0301 	bic.w	r3, r3, #1
 80079b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3308      	adds	r3, #8
 80079c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80079d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e1      	bne.n	80079a2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3308      	adds	r3, #8
 80079e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80079ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3308      	adds	r3, #8
 80079fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e3      	bne.n	80079de <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a2c:	e853 3f00 	ldrex	r3, [r3]
 8007a30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a34:	f023 0310 	bic.w	r3, r3, #16
 8007a38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a46:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a48:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e4      	bne.n	8007a24 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fb fcf0 	bl	8003444 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f8d8 	bl	8007c34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a84:	e0b9      	b.n	8007bfa <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 80ab 	beq.w	8007bfe <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007aa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 80a6 	beq.w	8007bfe <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aba:	e853 3f00 	ldrex	r3, [r3]
 8007abe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ad6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ada:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007adc:	e841 2300 	strex	r3, r2, [r1]
 8007ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1e4      	bne.n	8007ab2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3308      	adds	r3, #8
 8007aee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	e853 3f00 	ldrex	r3, [r3]
 8007af6:	623b      	str	r3, [r7, #32]
   return(result);
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	f023 0301 	bic.w	r3, r3, #1
 8007afe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3308      	adds	r3, #8
 8007b08:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b0c:	633a      	str	r2, [r7, #48]	; 0x30
 8007b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e3      	bne.n	8007ae8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2220      	movs	r2, #32
 8007b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f023 0310 	bic.w	r3, r3, #16
 8007b48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	461a      	mov	r2, r3
 8007b52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b56:	61fb      	str	r3, [r7, #28]
 8007b58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5a:	69b9      	ldr	r1, [r7, #24]
 8007b5c:	69fa      	ldr	r2, [r7, #28]
 8007b5e:	e841 2300 	strex	r3, r2, [r1]
 8007b62:	617b      	str	r3, [r7, #20]
   return(result);
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1e4      	bne.n	8007b34 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f85c 	bl	8007c34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b7c:	e03f      	b.n	8007bfe <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00e      	beq.n	8007ba8 <HAL_UART_IRQHandler+0x56c>
 8007b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d008      	beq.n	8007ba8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f853 	bl	8007c4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ba6:	e02d      	b.n	8007c04 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00e      	beq.n	8007bd2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d008      	beq.n	8007bd2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d01c      	beq.n	8007c02 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	4798      	blx	r3
    }
    return;
 8007bd0:	e017      	b.n	8007c02 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d012      	beq.n	8007c04 <HAL_UART_IRQHandler+0x5c8>
 8007bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00c      	beq.n	8007c04 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fd92 	bl	8008714 <UART_EndTransmit_IT>
    return;
 8007bf0:	e008      	b.n	8007c04 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007bf2:	bf00      	nop
 8007bf4:	e006      	b.n	8007c04 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007bf6:	bf00      	nop
 8007bf8:	e004      	b.n	8007c04 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007bfa:	bf00      	nop
 8007bfc:	e002      	b.n	8007c04 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007bfe:	bf00      	nop
 8007c00:	e000      	b.n	8007c04 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007c02:	bf00      	nop
  }

}
 8007c04:	37e8      	adds	r7, #232	; 0xe8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop

08007c0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b088      	sub	sp, #32
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689a      	ldr	r2, [r3, #8]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	431a      	orrs	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	4ba6      	ldr	r3, [pc, #664]	; (8007f24 <UART_SetConfig+0x2c4>)
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	6812      	ldr	r2, [r2, #0]
 8007c92:	6979      	ldr	r1, [r7, #20]
 8007c94:	430b      	orrs	r3, r1
 8007c96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68da      	ldr	r2, [r3, #12]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a94      	ldr	r2, [pc, #592]	; (8007f28 <UART_SetConfig+0x2c8>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d120      	bne.n	8007d1e <UART_SetConfig+0xbe>
 8007cdc:	4b93      	ldr	r3, [pc, #588]	; (8007f2c <UART_SetConfig+0x2cc>)
 8007cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce2:	f003 0303 	and.w	r3, r3, #3
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	d816      	bhi.n	8007d18 <UART_SetConfig+0xb8>
 8007cea:	a201      	add	r2, pc, #4	; (adr r2, 8007cf0 <UART_SetConfig+0x90>)
 8007cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf0:	08007d01 	.word	0x08007d01
 8007cf4:	08007d0d 	.word	0x08007d0d
 8007cf8:	08007d07 	.word	0x08007d07
 8007cfc:	08007d13 	.word	0x08007d13
 8007d00:	2301      	movs	r3, #1
 8007d02:	77fb      	strb	r3, [r7, #31]
 8007d04:	e150      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007d06:	2302      	movs	r3, #2
 8007d08:	77fb      	strb	r3, [r7, #31]
 8007d0a:	e14d      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007d0c:	2304      	movs	r3, #4
 8007d0e:	77fb      	strb	r3, [r7, #31]
 8007d10:	e14a      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007d12:	2308      	movs	r3, #8
 8007d14:	77fb      	strb	r3, [r7, #31]
 8007d16:	e147      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007d18:	2310      	movs	r3, #16
 8007d1a:	77fb      	strb	r3, [r7, #31]
 8007d1c:	e144      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a83      	ldr	r2, [pc, #524]	; (8007f30 <UART_SetConfig+0x2d0>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d132      	bne.n	8007d8e <UART_SetConfig+0x12e>
 8007d28:	4b80      	ldr	r3, [pc, #512]	; (8007f2c <UART_SetConfig+0x2cc>)
 8007d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2e:	f003 030c 	and.w	r3, r3, #12
 8007d32:	2b0c      	cmp	r3, #12
 8007d34:	d828      	bhi.n	8007d88 <UART_SetConfig+0x128>
 8007d36:	a201      	add	r2, pc, #4	; (adr r2, 8007d3c <UART_SetConfig+0xdc>)
 8007d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3c:	08007d71 	.word	0x08007d71
 8007d40:	08007d89 	.word	0x08007d89
 8007d44:	08007d89 	.word	0x08007d89
 8007d48:	08007d89 	.word	0x08007d89
 8007d4c:	08007d7d 	.word	0x08007d7d
 8007d50:	08007d89 	.word	0x08007d89
 8007d54:	08007d89 	.word	0x08007d89
 8007d58:	08007d89 	.word	0x08007d89
 8007d5c:	08007d77 	.word	0x08007d77
 8007d60:	08007d89 	.word	0x08007d89
 8007d64:	08007d89 	.word	0x08007d89
 8007d68:	08007d89 	.word	0x08007d89
 8007d6c:	08007d83 	.word	0x08007d83
 8007d70:	2300      	movs	r3, #0
 8007d72:	77fb      	strb	r3, [r7, #31]
 8007d74:	e118      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007d76:	2302      	movs	r3, #2
 8007d78:	77fb      	strb	r3, [r7, #31]
 8007d7a:	e115      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007d7c:	2304      	movs	r3, #4
 8007d7e:	77fb      	strb	r3, [r7, #31]
 8007d80:	e112      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007d82:	2308      	movs	r3, #8
 8007d84:	77fb      	strb	r3, [r7, #31]
 8007d86:	e10f      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007d88:	2310      	movs	r3, #16
 8007d8a:	77fb      	strb	r3, [r7, #31]
 8007d8c:	e10c      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a68      	ldr	r2, [pc, #416]	; (8007f34 <UART_SetConfig+0x2d4>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d120      	bne.n	8007dda <UART_SetConfig+0x17a>
 8007d98:	4b64      	ldr	r3, [pc, #400]	; (8007f2c <UART_SetConfig+0x2cc>)
 8007d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007da2:	2b30      	cmp	r3, #48	; 0x30
 8007da4:	d013      	beq.n	8007dce <UART_SetConfig+0x16e>
 8007da6:	2b30      	cmp	r3, #48	; 0x30
 8007da8:	d814      	bhi.n	8007dd4 <UART_SetConfig+0x174>
 8007daa:	2b20      	cmp	r3, #32
 8007dac:	d009      	beq.n	8007dc2 <UART_SetConfig+0x162>
 8007dae:	2b20      	cmp	r3, #32
 8007db0:	d810      	bhi.n	8007dd4 <UART_SetConfig+0x174>
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d002      	beq.n	8007dbc <UART_SetConfig+0x15c>
 8007db6:	2b10      	cmp	r3, #16
 8007db8:	d006      	beq.n	8007dc8 <UART_SetConfig+0x168>
 8007dba:	e00b      	b.n	8007dd4 <UART_SetConfig+0x174>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	77fb      	strb	r3, [r7, #31]
 8007dc0:	e0f2      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	77fb      	strb	r3, [r7, #31]
 8007dc6:	e0ef      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007dc8:	2304      	movs	r3, #4
 8007dca:	77fb      	strb	r3, [r7, #31]
 8007dcc:	e0ec      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007dce:	2308      	movs	r3, #8
 8007dd0:	77fb      	strb	r3, [r7, #31]
 8007dd2:	e0e9      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007dd4:	2310      	movs	r3, #16
 8007dd6:	77fb      	strb	r3, [r7, #31]
 8007dd8:	e0e6      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a56      	ldr	r2, [pc, #344]	; (8007f38 <UART_SetConfig+0x2d8>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d120      	bne.n	8007e26 <UART_SetConfig+0x1c6>
 8007de4:	4b51      	ldr	r3, [pc, #324]	; (8007f2c <UART_SetConfig+0x2cc>)
 8007de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007dee:	2bc0      	cmp	r3, #192	; 0xc0
 8007df0:	d013      	beq.n	8007e1a <UART_SetConfig+0x1ba>
 8007df2:	2bc0      	cmp	r3, #192	; 0xc0
 8007df4:	d814      	bhi.n	8007e20 <UART_SetConfig+0x1c0>
 8007df6:	2b80      	cmp	r3, #128	; 0x80
 8007df8:	d009      	beq.n	8007e0e <UART_SetConfig+0x1ae>
 8007dfa:	2b80      	cmp	r3, #128	; 0x80
 8007dfc:	d810      	bhi.n	8007e20 <UART_SetConfig+0x1c0>
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <UART_SetConfig+0x1a8>
 8007e02:	2b40      	cmp	r3, #64	; 0x40
 8007e04:	d006      	beq.n	8007e14 <UART_SetConfig+0x1b4>
 8007e06:	e00b      	b.n	8007e20 <UART_SetConfig+0x1c0>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	77fb      	strb	r3, [r7, #31]
 8007e0c:	e0cc      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007e0e:	2302      	movs	r3, #2
 8007e10:	77fb      	strb	r3, [r7, #31]
 8007e12:	e0c9      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007e14:	2304      	movs	r3, #4
 8007e16:	77fb      	strb	r3, [r7, #31]
 8007e18:	e0c6      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007e1a:	2308      	movs	r3, #8
 8007e1c:	77fb      	strb	r3, [r7, #31]
 8007e1e:	e0c3      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007e20:	2310      	movs	r3, #16
 8007e22:	77fb      	strb	r3, [r7, #31]
 8007e24:	e0c0      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a44      	ldr	r2, [pc, #272]	; (8007f3c <UART_SetConfig+0x2dc>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d125      	bne.n	8007e7c <UART_SetConfig+0x21c>
 8007e30:	4b3e      	ldr	r3, [pc, #248]	; (8007f2c <UART_SetConfig+0x2cc>)
 8007e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e3e:	d017      	beq.n	8007e70 <UART_SetConfig+0x210>
 8007e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e44:	d817      	bhi.n	8007e76 <UART_SetConfig+0x216>
 8007e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e4a:	d00b      	beq.n	8007e64 <UART_SetConfig+0x204>
 8007e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e50:	d811      	bhi.n	8007e76 <UART_SetConfig+0x216>
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <UART_SetConfig+0x1fe>
 8007e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e5a:	d006      	beq.n	8007e6a <UART_SetConfig+0x20a>
 8007e5c:	e00b      	b.n	8007e76 <UART_SetConfig+0x216>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	77fb      	strb	r3, [r7, #31]
 8007e62:	e0a1      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007e64:	2302      	movs	r3, #2
 8007e66:	77fb      	strb	r3, [r7, #31]
 8007e68:	e09e      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007e6a:	2304      	movs	r3, #4
 8007e6c:	77fb      	strb	r3, [r7, #31]
 8007e6e:	e09b      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007e70:	2308      	movs	r3, #8
 8007e72:	77fb      	strb	r3, [r7, #31]
 8007e74:	e098      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007e76:	2310      	movs	r3, #16
 8007e78:	77fb      	strb	r3, [r7, #31]
 8007e7a:	e095      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a2f      	ldr	r2, [pc, #188]	; (8007f40 <UART_SetConfig+0x2e0>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d125      	bne.n	8007ed2 <UART_SetConfig+0x272>
 8007e86:	4b29      	ldr	r3, [pc, #164]	; (8007f2c <UART_SetConfig+0x2cc>)
 8007e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e94:	d017      	beq.n	8007ec6 <UART_SetConfig+0x266>
 8007e96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e9a:	d817      	bhi.n	8007ecc <UART_SetConfig+0x26c>
 8007e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ea0:	d00b      	beq.n	8007eba <UART_SetConfig+0x25a>
 8007ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ea6:	d811      	bhi.n	8007ecc <UART_SetConfig+0x26c>
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <UART_SetConfig+0x254>
 8007eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb0:	d006      	beq.n	8007ec0 <UART_SetConfig+0x260>
 8007eb2:	e00b      	b.n	8007ecc <UART_SetConfig+0x26c>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	77fb      	strb	r3, [r7, #31]
 8007eb8:	e076      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007eba:	2302      	movs	r3, #2
 8007ebc:	77fb      	strb	r3, [r7, #31]
 8007ebe:	e073      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007ec0:	2304      	movs	r3, #4
 8007ec2:	77fb      	strb	r3, [r7, #31]
 8007ec4:	e070      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007ec6:	2308      	movs	r3, #8
 8007ec8:	77fb      	strb	r3, [r7, #31]
 8007eca:	e06d      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007ecc:	2310      	movs	r3, #16
 8007ece:	77fb      	strb	r3, [r7, #31]
 8007ed0:	e06a      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a1b      	ldr	r2, [pc, #108]	; (8007f44 <UART_SetConfig+0x2e4>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d138      	bne.n	8007f4e <UART_SetConfig+0x2ee>
 8007edc:	4b13      	ldr	r3, [pc, #76]	; (8007f2c <UART_SetConfig+0x2cc>)
 8007ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ee2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007ee6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007eea:	d017      	beq.n	8007f1c <UART_SetConfig+0x2bc>
 8007eec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ef0:	d82a      	bhi.n	8007f48 <UART_SetConfig+0x2e8>
 8007ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ef6:	d00b      	beq.n	8007f10 <UART_SetConfig+0x2b0>
 8007ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007efc:	d824      	bhi.n	8007f48 <UART_SetConfig+0x2e8>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <UART_SetConfig+0x2aa>
 8007f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f06:	d006      	beq.n	8007f16 <UART_SetConfig+0x2b6>
 8007f08:	e01e      	b.n	8007f48 <UART_SetConfig+0x2e8>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	77fb      	strb	r3, [r7, #31]
 8007f0e:	e04b      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007f10:	2302      	movs	r3, #2
 8007f12:	77fb      	strb	r3, [r7, #31]
 8007f14:	e048      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007f16:	2304      	movs	r3, #4
 8007f18:	77fb      	strb	r3, [r7, #31]
 8007f1a:	e045      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007f1c:	2308      	movs	r3, #8
 8007f1e:	77fb      	strb	r3, [r7, #31]
 8007f20:	e042      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007f22:	bf00      	nop
 8007f24:	efff69f3 	.word	0xefff69f3
 8007f28:	40011000 	.word	0x40011000
 8007f2c:	40023800 	.word	0x40023800
 8007f30:	40004400 	.word	0x40004400
 8007f34:	40004800 	.word	0x40004800
 8007f38:	40004c00 	.word	0x40004c00
 8007f3c:	40005000 	.word	0x40005000
 8007f40:	40011400 	.word	0x40011400
 8007f44:	40007800 	.word	0x40007800
 8007f48:	2310      	movs	r3, #16
 8007f4a:	77fb      	strb	r3, [r7, #31]
 8007f4c:	e02c      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a72      	ldr	r2, [pc, #456]	; (800811c <UART_SetConfig+0x4bc>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d125      	bne.n	8007fa4 <UART_SetConfig+0x344>
 8007f58:	4b71      	ldr	r3, [pc, #452]	; (8008120 <UART_SetConfig+0x4c0>)
 8007f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f66:	d017      	beq.n	8007f98 <UART_SetConfig+0x338>
 8007f68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f6c:	d817      	bhi.n	8007f9e <UART_SetConfig+0x33e>
 8007f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f72:	d00b      	beq.n	8007f8c <UART_SetConfig+0x32c>
 8007f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f78:	d811      	bhi.n	8007f9e <UART_SetConfig+0x33e>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <UART_SetConfig+0x326>
 8007f7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f82:	d006      	beq.n	8007f92 <UART_SetConfig+0x332>
 8007f84:	e00b      	b.n	8007f9e <UART_SetConfig+0x33e>
 8007f86:	2300      	movs	r3, #0
 8007f88:	77fb      	strb	r3, [r7, #31]
 8007f8a:	e00d      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	77fb      	strb	r3, [r7, #31]
 8007f90:	e00a      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007f92:	2304      	movs	r3, #4
 8007f94:	77fb      	strb	r3, [r7, #31]
 8007f96:	e007      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007f98:	2308      	movs	r3, #8
 8007f9a:	77fb      	strb	r3, [r7, #31]
 8007f9c:	e004      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007f9e:	2310      	movs	r3, #16
 8007fa0:	77fb      	strb	r3, [r7, #31]
 8007fa2:	e001      	b.n	8007fa8 <UART_SetConfig+0x348>
 8007fa4:	2310      	movs	r3, #16
 8007fa6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	69db      	ldr	r3, [r3, #28]
 8007fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fb0:	d15b      	bne.n	800806a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007fb2:	7ffb      	ldrb	r3, [r7, #31]
 8007fb4:	2b08      	cmp	r3, #8
 8007fb6:	d828      	bhi.n	800800a <UART_SetConfig+0x3aa>
 8007fb8:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <UART_SetConfig+0x360>)
 8007fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbe:	bf00      	nop
 8007fc0:	08007fe5 	.word	0x08007fe5
 8007fc4:	08007fed 	.word	0x08007fed
 8007fc8:	08007ff5 	.word	0x08007ff5
 8007fcc:	0800800b 	.word	0x0800800b
 8007fd0:	08007ffb 	.word	0x08007ffb
 8007fd4:	0800800b 	.word	0x0800800b
 8007fd8:	0800800b 	.word	0x0800800b
 8007fdc:	0800800b 	.word	0x0800800b
 8007fe0:	08008003 	.word	0x08008003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fe4:	f7fd f888 	bl	80050f8 <HAL_RCC_GetPCLK1Freq>
 8007fe8:	61b8      	str	r0, [r7, #24]
        break;
 8007fea:	e013      	b.n	8008014 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fec:	f7fd f898 	bl	8005120 <HAL_RCC_GetPCLK2Freq>
 8007ff0:	61b8      	str	r0, [r7, #24]
        break;
 8007ff2:	e00f      	b.n	8008014 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ff4:	4b4b      	ldr	r3, [pc, #300]	; (8008124 <UART_SetConfig+0x4c4>)
 8007ff6:	61bb      	str	r3, [r7, #24]
        break;
 8007ff8:	e00c      	b.n	8008014 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ffa:	f7fc ff6b 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 8007ffe:	61b8      	str	r0, [r7, #24]
        break;
 8008000:	e008      	b.n	8008014 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008006:	61bb      	str	r3, [r7, #24]
        break;
 8008008:	e004      	b.n	8008014 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800800a:	2300      	movs	r3, #0
 800800c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	77bb      	strb	r3, [r7, #30]
        break;
 8008012:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d074      	beq.n	8008104 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	005a      	lsls	r2, r3, #1
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	085b      	lsrs	r3, r3, #1
 8008024:	441a      	add	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	fbb2 f3f3 	udiv	r3, r2, r3
 800802e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	2b0f      	cmp	r3, #15
 8008034:	d916      	bls.n	8008064 <UART_SetConfig+0x404>
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800803c:	d212      	bcs.n	8008064 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	b29b      	uxth	r3, r3
 8008042:	f023 030f 	bic.w	r3, r3, #15
 8008046:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	085b      	lsrs	r3, r3, #1
 800804c:	b29b      	uxth	r3, r3
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	b29a      	uxth	r2, r3
 8008054:	89fb      	ldrh	r3, [r7, #14]
 8008056:	4313      	orrs	r3, r2
 8008058:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	89fa      	ldrh	r2, [r7, #14]
 8008060:	60da      	str	r2, [r3, #12]
 8008062:	e04f      	b.n	8008104 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	77bb      	strb	r3, [r7, #30]
 8008068:	e04c      	b.n	8008104 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800806a:	7ffb      	ldrb	r3, [r7, #31]
 800806c:	2b08      	cmp	r3, #8
 800806e:	d828      	bhi.n	80080c2 <UART_SetConfig+0x462>
 8008070:	a201      	add	r2, pc, #4	; (adr r2, 8008078 <UART_SetConfig+0x418>)
 8008072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008076:	bf00      	nop
 8008078:	0800809d 	.word	0x0800809d
 800807c:	080080a5 	.word	0x080080a5
 8008080:	080080ad 	.word	0x080080ad
 8008084:	080080c3 	.word	0x080080c3
 8008088:	080080b3 	.word	0x080080b3
 800808c:	080080c3 	.word	0x080080c3
 8008090:	080080c3 	.word	0x080080c3
 8008094:	080080c3 	.word	0x080080c3
 8008098:	080080bb 	.word	0x080080bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800809c:	f7fd f82c 	bl	80050f8 <HAL_RCC_GetPCLK1Freq>
 80080a0:	61b8      	str	r0, [r7, #24]
        break;
 80080a2:	e013      	b.n	80080cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080a4:	f7fd f83c 	bl	8005120 <HAL_RCC_GetPCLK2Freq>
 80080a8:	61b8      	str	r0, [r7, #24]
        break;
 80080aa:	e00f      	b.n	80080cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080ac:	4b1d      	ldr	r3, [pc, #116]	; (8008124 <UART_SetConfig+0x4c4>)
 80080ae:	61bb      	str	r3, [r7, #24]
        break;
 80080b0:	e00c      	b.n	80080cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080b2:	f7fc ff0f 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 80080b6:	61b8      	str	r0, [r7, #24]
        break;
 80080b8:	e008      	b.n	80080cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080be:	61bb      	str	r3, [r7, #24]
        break;
 80080c0:	e004      	b.n	80080cc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	77bb      	strb	r3, [r7, #30]
        break;
 80080ca:	bf00      	nop
    }

    if (pclk != 0U)
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d018      	beq.n	8008104 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	085a      	lsrs	r2, r3, #1
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	441a      	add	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	2b0f      	cmp	r3, #15
 80080ea:	d909      	bls.n	8008100 <UART_SetConfig+0x4a0>
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080f2:	d205      	bcs.n	8008100 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	60da      	str	r2, [r3, #12]
 80080fe:	e001      	b.n	8008104 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008110:	7fbb      	ldrb	r3, [r7, #30]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3720      	adds	r7, #32
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	40007c00 	.word	0x40007c00
 8008120:	40023800 	.word	0x40023800
 8008124:	00f42400 	.word	0x00f42400

08008128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00a      	beq.n	8008152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	430a      	orrs	r2, r1
 8008150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008156:	f003 0302 	and.w	r3, r3, #2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00a      	beq.n	8008174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	430a      	orrs	r2, r1
 8008172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	f003 0304 	and.w	r3, r3, #4
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00a      	beq.n	8008196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	430a      	orrs	r2, r1
 8008194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	f003 0308 	and.w	r3, r3, #8
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00a      	beq.n	80081b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081bc:	f003 0310 	and.w	r3, r3, #16
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00a      	beq.n	80081da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	430a      	orrs	r2, r1
 80081d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081de:	f003 0320 	and.w	r3, r3, #32
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00a      	beq.n	80081fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	430a      	orrs	r2, r1
 80081fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008204:	2b00      	cmp	r3, #0
 8008206:	d01a      	beq.n	800823e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008226:	d10a      	bne.n	800823e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00a      	beq.n	8008260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	430a      	orrs	r2, r1
 800825e:	605a      	str	r2, [r3, #4]
  }
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af02      	add	r7, sp, #8
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800827c:	f7fa fd6c 	bl	8002d58 <HAL_GetTick>
 8008280:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0308 	and.w	r3, r3, #8
 800828c:	2b08      	cmp	r3, #8
 800828e:	d10e      	bne.n	80082ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008290:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f831 	bl	8008306 <UART_WaitOnFlagUntilTimeout>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e027      	b.n	80082fe <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d10e      	bne.n	80082da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f81b 	bl	8008306 <UART_WaitOnFlagUntilTimeout>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e011      	b.n	80082fe <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2220      	movs	r2, #32
 80082de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b09c      	sub	sp, #112	; 0x70
 800830a:	af00      	add	r7, sp, #0
 800830c:	60f8      	str	r0, [r7, #12]
 800830e:	60b9      	str	r1, [r7, #8]
 8008310:	603b      	str	r3, [r7, #0]
 8008312:	4613      	mov	r3, r2
 8008314:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008316:	e0a7      	b.n	8008468 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800831a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831e:	f000 80a3 	beq.w	8008468 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008322:	f7fa fd19 	bl	8002d58 <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800832e:	429a      	cmp	r2, r3
 8008330:	d302      	bcc.n	8008338 <UART_WaitOnFlagUntilTimeout+0x32>
 8008332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008334:	2b00      	cmp	r3, #0
 8008336:	d13f      	bne.n	80083b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008340:	e853 3f00 	ldrex	r3, [r3]
 8008344:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008348:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800834c:	667b      	str	r3, [r7, #100]	; 0x64
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008356:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008358:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800835c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1e6      	bne.n	8008338 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3308      	adds	r3, #8
 8008370:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008374:	e853 3f00 	ldrex	r3, [r3]
 8008378:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	f023 0301 	bic.w	r3, r3, #1
 8008380:	663b      	str	r3, [r7, #96]	; 0x60
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3308      	adds	r3, #8
 8008388:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800838a:	64ba      	str	r2, [r7, #72]	; 0x48
 800838c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008392:	e841 2300 	strex	r3, r2, [r1]
 8008396:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1e5      	bne.n	800836a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2220      	movs	r2, #32
 80083a2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2220      	movs	r2, #32
 80083a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e068      	b.n	800848a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 0304 	and.w	r3, r3, #4
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d050      	beq.n	8008468 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083d4:	d148      	bne.n	8008468 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008400:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e6      	bne.n	80083e0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3308      	adds	r3, #8
 8008418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	613b      	str	r3, [r7, #16]
   return(result);
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f023 0301 	bic.w	r3, r3, #1
 8008428:	66bb      	str	r3, [r7, #104]	; 0x68
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3308      	adds	r3, #8
 8008430:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008432:	623a      	str	r2, [r7, #32]
 8008434:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	69f9      	ldr	r1, [r7, #28]
 8008438:	6a3a      	ldr	r2, [r7, #32]
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e5      	bne.n	8008412 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2220      	movs	r2, #32
 800844a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2220      	movs	r2, #32
 8008450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2220      	movs	r2, #32
 8008458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e010      	b.n	800848a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	69da      	ldr	r2, [r3, #28]
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	4013      	ands	r3, r2
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	429a      	cmp	r2, r3
 8008476:	bf0c      	ite	eq
 8008478:	2301      	moveq	r3, #1
 800847a:	2300      	movne	r3, #0
 800847c:	b2db      	uxtb	r3, r3
 800847e:	461a      	mov	r2, r3
 8008480:	79fb      	ldrb	r3, [r7, #7]
 8008482:	429a      	cmp	r2, r3
 8008484:	f43f af48 	beq.w	8008318 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3770      	adds	r7, #112	; 0x70
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008494:	b480      	push	{r7}
 8008496:	b097      	sub	sp, #92	; 0x5c
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	4613      	mov	r3, r2
 80084a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	88fa      	ldrh	r2, [r7, #6]
 80084ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	88fa      	ldrh	r2, [r7, #6]
 80084b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084c6:	d10e      	bne.n	80084e6 <UART_Start_Receive_IT+0x52>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d105      	bne.n	80084dc <UART_Start_Receive_IT+0x48>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80084d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084da:	e02d      	b.n	8008538 <UART_Start_Receive_IT+0xa4>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	22ff      	movs	r2, #255	; 0xff
 80084e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084e4:	e028      	b.n	8008538 <UART_Start_Receive_IT+0xa4>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10d      	bne.n	800850a <UART_Start_Receive_IT+0x76>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d104      	bne.n	8008500 <UART_Start_Receive_IT+0x6c>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	22ff      	movs	r2, #255	; 0xff
 80084fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084fe:	e01b      	b.n	8008538 <UART_Start_Receive_IT+0xa4>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	227f      	movs	r2, #127	; 0x7f
 8008504:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008508:	e016      	b.n	8008538 <UART_Start_Receive_IT+0xa4>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008512:	d10d      	bne.n	8008530 <UART_Start_Receive_IT+0x9c>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d104      	bne.n	8008526 <UART_Start_Receive_IT+0x92>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	227f      	movs	r2, #127	; 0x7f
 8008520:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008524:	e008      	b.n	8008538 <UART_Start_Receive_IT+0xa4>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	223f      	movs	r2, #63	; 0x3f
 800852a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800852e:	e003      	b.n	8008538 <UART_Start_Receive_IT+0xa4>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2222      	movs	r2, #34	; 0x22
 8008544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3308      	adds	r3, #8
 800854e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008552:	e853 3f00 	ldrex	r3, [r3]
 8008556:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855a:	f043 0301 	orr.w	r3, r3, #1
 800855e:	657b      	str	r3, [r7, #84]	; 0x54
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3308      	adds	r3, #8
 8008566:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008568:	64ba      	str	r2, [r7, #72]	; 0x48
 800856a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800856e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008570:	e841 2300 	strex	r3, r2, [r1]
 8008574:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1e5      	bne.n	8008548 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008584:	d107      	bne.n	8008596 <UART_Start_Receive_IT+0x102>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d103      	bne.n	8008596 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	4a21      	ldr	r2, [pc, #132]	; (8008618 <UART_Start_Receive_IT+0x184>)
 8008592:	669a      	str	r2, [r3, #104]	; 0x68
 8008594:	e002      	b.n	800859c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	4a20      	ldr	r2, [pc, #128]	; (800861c <UART_Start_Receive_IT+0x188>)
 800859a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d019      	beq.n	80085d8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ac:	e853 3f00 	ldrex	r3, [r3]
 80085b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80085b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085c2:	637b      	str	r3, [r7, #52]	; 0x34
 80085c4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e6      	bne.n	80085a4 <UART_Start_Receive_IT+0x110>
 80085d6:	e018      	b.n	800860a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	e853 3f00 	ldrex	r3, [r3]
 80085e4:	613b      	str	r3, [r7, #16]
   return(result);
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	f043 0320 	orr.w	r3, r3, #32
 80085ec:	653b      	str	r3, [r7, #80]	; 0x50
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f6:	623b      	str	r3, [r7, #32]
 80085f8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	69f9      	ldr	r1, [r7, #28]
 80085fc:	6a3a      	ldr	r2, [r7, #32]
 80085fe:	e841 2300 	strex	r3, r2, [r1]
 8008602:	61bb      	str	r3, [r7, #24]
   return(result);
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e6      	bne.n	80085d8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	375c      	adds	r7, #92	; 0x5c
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr
 8008618:	080088cf 	.word	0x080088cf
 800861c:	08008769 	.word	0x08008769

08008620 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008620:	b480      	push	{r7}
 8008622:	b095      	sub	sp, #84	; 0x54
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800863c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	461a      	mov	r2, r3
 8008644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008646:	643b      	str	r3, [r7, #64]	; 0x40
 8008648:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800864c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800864e:	e841 2300 	strex	r3, r2, [r1]
 8008652:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1e6      	bne.n	8008628 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3308      	adds	r3, #8
 8008660:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	e853 3f00 	ldrex	r3, [r3]
 8008668:	61fb      	str	r3, [r7, #28]
   return(result);
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	f023 0301 	bic.w	r3, r3, #1
 8008670:	64bb      	str	r3, [r7, #72]	; 0x48
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3308      	adds	r3, #8
 8008678:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800867a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800867c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008682:	e841 2300 	strex	r3, r2, [r1]
 8008686:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1e5      	bne.n	800865a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008692:	2b01      	cmp	r3, #1
 8008694:	d118      	bne.n	80086c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	e853 3f00 	ldrex	r3, [r3]
 80086a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f023 0310 	bic.w	r3, r3, #16
 80086aa:	647b      	str	r3, [r7, #68]	; 0x44
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	461a      	mov	r2, r3
 80086b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086b4:	61bb      	str	r3, [r7, #24]
 80086b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b8:	6979      	ldr	r1, [r7, #20]
 80086ba:	69ba      	ldr	r2, [r7, #24]
 80086bc:	e841 2300 	strex	r3, r2, [r1]
 80086c0:	613b      	str	r3, [r7, #16]
   return(result);
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1e6      	bne.n	8008696 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80086dc:	bf00      	nop
 80086de:	3754      	adds	r7, #84	; 0x54
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f7ff fa8a 	bl	8007c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800870c:	bf00      	nop
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	60bb      	str	r3, [r7, #8]
   return(result);
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008730:	61fb      	str	r3, [r7, #28]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	61bb      	str	r3, [r7, #24]
 800873c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873e:	6979      	ldr	r1, [r7, #20]
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	613b      	str	r3, [r7, #16]
   return(result);
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e6      	bne.n	800871c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2220      	movs	r2, #32
 8008752:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7ff fa56 	bl	8007c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008760:	bf00      	nop
 8008762:	3720      	adds	r7, #32
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b096      	sub	sp, #88	; 0x58
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008776:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008780:	2b22      	cmp	r3, #34	; 0x22
 8008782:	f040 8098 	bne.w	80088b6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008790:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008794:	b2d9      	uxtb	r1, r3
 8008796:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800879a:	b2da      	uxtb	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a0:	400a      	ands	r2, r1
 80087a2:	b2d2      	uxtb	r2, r2
 80087a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087aa:	1c5a      	adds	r2, r3, #1
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	3b01      	subs	r3, #1
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d17b      	bne.n	80088c6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d6:	e853 3f00 	ldrex	r3, [r3]
 80087da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087e2:	653b      	str	r3, [r7, #80]	; 0x50
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	461a      	mov	r2, r3
 80087ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087ec:	647b      	str	r3, [r7, #68]	; 0x44
 80087ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087f4:	e841 2300 	strex	r3, r2, [r1]
 80087f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e6      	bne.n	80087ce <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	3308      	adds	r3, #8
 8008806:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	e853 3f00 	ldrex	r3, [r3]
 800880e:	623b      	str	r3, [r7, #32]
   return(result);
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	f023 0301 	bic.w	r3, r3, #1
 8008816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3308      	adds	r3, #8
 800881e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008820:	633a      	str	r2, [r7, #48]	; 0x30
 8008822:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008824:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008828:	e841 2300 	strex	r3, r2, [r1]
 800882c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800882e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1e5      	bne.n	8008800 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2220      	movs	r2, #32
 8008838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800884c:	2b01      	cmp	r3, #1
 800884e:	d12e      	bne.n	80088ae <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	e853 3f00 	ldrex	r3, [r3]
 8008862:	60fb      	str	r3, [r7, #12]
   return(result);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f023 0310 	bic.w	r3, r3, #16
 800886a:	64bb      	str	r3, [r7, #72]	; 0x48
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	461a      	mov	r2, r3
 8008872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008874:	61fb      	str	r3, [r7, #28]
 8008876:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008878:	69b9      	ldr	r1, [r7, #24]
 800887a:	69fa      	ldr	r2, [r7, #28]
 800887c:	e841 2300 	strex	r3, r2, [r1]
 8008880:	617b      	str	r3, [r7, #20]
   return(result);
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e6      	bne.n	8008856 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	f003 0310 	and.w	r3, r3, #16
 8008892:	2b10      	cmp	r3, #16
 8008894:	d103      	bne.n	800889e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2210      	movs	r2, #16
 800889c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7ff f9c4 	bl	8007c34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088ac:	e00b      	b.n	80088c6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7f9 f8fe 	bl	8001ab0 <HAL_UART_RxCpltCallback>
}
 80088b4:	e007      	b.n	80088c6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	699a      	ldr	r2, [r3, #24]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f042 0208 	orr.w	r2, r2, #8
 80088c4:	619a      	str	r2, [r3, #24]
}
 80088c6:	bf00      	nop
 80088c8:	3758      	adds	r7, #88	; 0x58
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b096      	sub	sp, #88	; 0x58
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088e6:	2b22      	cmp	r3, #34	; 0x22
 80088e8:	f040 8098 	bne.w	8008a1c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088fa:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80088fc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008900:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008904:	4013      	ands	r3, r2
 8008906:	b29a      	uxth	r2, r3
 8008908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800890a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008910:	1c9a      	adds	r2, r3, #2
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800891c:	b29b      	uxth	r3, r3
 800891e:	3b01      	subs	r3, #1
 8008920:	b29a      	uxth	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800892e:	b29b      	uxth	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	d17b      	bne.n	8008a2c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893c:	e853 3f00 	ldrex	r3, [r3]
 8008940:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008948:	64fb      	str	r3, [r7, #76]	; 0x4c
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	461a      	mov	r2, r3
 8008950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008952:	643b      	str	r3, [r7, #64]	; 0x40
 8008954:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008956:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008958:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800895a:	e841 2300 	strex	r3, r2, [r1]
 800895e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1e6      	bne.n	8008934 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3308      	adds	r3, #8
 800896c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	e853 3f00 	ldrex	r3, [r3]
 8008974:	61fb      	str	r3, [r7, #28]
   return(result);
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	f023 0301 	bic.w	r3, r3, #1
 800897c:	64bb      	str	r3, [r7, #72]	; 0x48
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	3308      	adds	r3, #8
 8008984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008986:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008988:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800898c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800898e:	e841 2300 	strex	r3, r2, [r1]
 8008992:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1e5      	bne.n	8008966 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2220      	movs	r2, #32
 800899e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d12e      	bne.n	8008a14 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	f023 0310 	bic.w	r3, r3, #16
 80089d0:	647b      	str	r3, [r7, #68]	; 0x44
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089da:	61bb      	str	r3, [r7, #24]
 80089dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6979      	ldr	r1, [r7, #20]
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	613b      	str	r3, [r7, #16]
   return(result);
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e6      	bne.n	80089bc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	69db      	ldr	r3, [r3, #28]
 80089f4:	f003 0310 	and.w	r3, r3, #16
 80089f8:	2b10      	cmp	r3, #16
 80089fa:	d103      	bne.n	8008a04 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2210      	movs	r2, #16
 8008a02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7ff f911 	bl	8007c34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a12:	e00b      	b.n	8008a2c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7f9 f84b 	bl	8001ab0 <HAL_UART_RxCpltCallback>
}
 8008a1a:	e007      	b.n	8008a2c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	699a      	ldr	r2, [r3, #24]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f042 0208 	orr.w	r2, r2, #8
 8008a2a:	619a      	str	r2, [r3, #24]
}
 8008a2c:	bf00      	nop
 8008a2e:	3758      	adds	r7, #88	; 0x58
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008a34:	b480      	push	{r7}
 8008a36:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008a38:	bf00      	nop
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
	...

08008a44 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a4a:	f3ef 8305 	mrs	r3, IPSR
 8008a4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10f      	bne.n	8008a76 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a56:	f3ef 8310 	mrs	r3, PRIMASK
 8008a5a:	607b      	str	r3, [r7, #4]
  return(result);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d105      	bne.n	8008a6e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a62:	f3ef 8311 	mrs	r3, BASEPRI
 8008a66:	603b      	str	r3, [r7, #0]
  return(result);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d007      	beq.n	8008a7e <osKernelInitialize+0x3a>
 8008a6e:	4b0e      	ldr	r3, [pc, #56]	; (8008aa8 <osKernelInitialize+0x64>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d103      	bne.n	8008a7e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008a76:	f06f 0305 	mvn.w	r3, #5
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	e00c      	b.n	8008a98 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008a7e:	4b0a      	ldr	r3, [pc, #40]	; (8008aa8 <osKernelInitialize+0x64>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d105      	bne.n	8008a92 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008a86:	4b08      	ldr	r3, [pc, #32]	; (8008aa8 <osKernelInitialize+0x64>)
 8008a88:	2201      	movs	r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	e002      	b.n	8008a98 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008a92:	f04f 33ff 	mov.w	r3, #4294967295
 8008a96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008a98:	68fb      	ldr	r3, [r7, #12]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	200007ec 	.word	0x200007ec

08008aac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ab2:	f3ef 8305 	mrs	r3, IPSR
 8008ab6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10f      	bne.n	8008ade <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008abe:	f3ef 8310 	mrs	r3, PRIMASK
 8008ac2:	607b      	str	r3, [r7, #4]
  return(result);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d105      	bne.n	8008ad6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008aca:	f3ef 8311 	mrs	r3, BASEPRI
 8008ace:	603b      	str	r3, [r7, #0]
  return(result);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d007      	beq.n	8008ae6 <osKernelStart+0x3a>
 8008ad6:	4b0f      	ldr	r3, [pc, #60]	; (8008b14 <osKernelStart+0x68>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d103      	bne.n	8008ae6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8008ade:	f06f 0305 	mvn.w	r3, #5
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	e010      	b.n	8008b08 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008ae6:	4b0b      	ldr	r3, [pc, #44]	; (8008b14 <osKernelStart+0x68>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d109      	bne.n	8008b02 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008aee:	f7ff ffa1 	bl	8008a34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008af2:	4b08      	ldr	r3, [pc, #32]	; (8008b14 <osKernelStart+0x68>)
 8008af4:	2202      	movs	r2, #2
 8008af6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008af8:	f001 fb26 	bl	800a148 <vTaskStartScheduler>
      stat = osOK;
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	e002      	b.n	8008b08 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008b02:	f04f 33ff 	mov.w	r3, #4294967295
 8008b06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008b08:	68fb      	ldr	r3, [r7, #12]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	200007ec 	.word	0x200007ec

08008b18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b090      	sub	sp, #64	; 0x40
 8008b1c:	af04      	add	r7, sp, #16
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008b24:	2300      	movs	r3, #0
 8008b26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b28:	f3ef 8305 	mrs	r3, IPSR
 8008b2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8008b2e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f040 808f 	bne.w	8008c54 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b36:	f3ef 8310 	mrs	r3, PRIMASK
 8008b3a:	61bb      	str	r3, [r7, #24]
  return(result);
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d105      	bne.n	8008b4e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b42:	f3ef 8311 	mrs	r3, BASEPRI
 8008b46:	617b      	str	r3, [r7, #20]
  return(result);
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d003      	beq.n	8008b56 <osThreadNew+0x3e>
 8008b4e:	4b44      	ldr	r3, [pc, #272]	; (8008c60 <osThreadNew+0x148>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d07e      	beq.n	8008c54 <osThreadNew+0x13c>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d07b      	beq.n	8008c54 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008b5c:	2380      	movs	r3, #128	; 0x80
 8008b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008b60:	2318      	movs	r3, #24
 8008b62:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008b64:	2300      	movs	r3, #0
 8008b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008b68:	f04f 33ff 	mov.w	r3, #4294967295
 8008b6c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d045      	beq.n	8008c00 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <osThreadNew+0x6a>
        name = attr->name;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d008      	beq.n	8008ba8 <osThreadNew+0x90>
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	2b38      	cmp	r3, #56	; 0x38
 8008b9a:	d805      	bhi.n	8008ba8 <osThreadNew+0x90>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <osThreadNew+0x94>
        return (NULL);
 8008ba8:	2300      	movs	r3, #0
 8008baa:	e054      	b.n	8008c56 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	089b      	lsrs	r3, r3, #2
 8008bba:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00e      	beq.n	8008be2 <osThreadNew+0xca>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	2ba7      	cmp	r3, #167	; 0xa7
 8008bca:	d90a      	bls.n	8008be2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d006      	beq.n	8008be2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	695b      	ldr	r3, [r3, #20]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <osThreadNew+0xca>
        mem = 1;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	623b      	str	r3, [r7, #32]
 8008be0:	e010      	b.n	8008c04 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10c      	bne.n	8008c04 <osThreadNew+0xec>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d108      	bne.n	8008c04 <osThreadNew+0xec>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d104      	bne.n	8008c04 <osThreadNew+0xec>
          mem = 0;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	623b      	str	r3, [r7, #32]
 8008bfe:	e001      	b.n	8008c04 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008c00:	2300      	movs	r3, #0
 8008c02:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d110      	bne.n	8008c2c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008c12:	9202      	str	r2, [sp, #8]
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 ff19 	bl	8009a58 <xTaskCreateStatic>
 8008c26:	4603      	mov	r3, r0
 8008c28:	613b      	str	r3, [r7, #16]
 8008c2a:	e013      	b.n	8008c54 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d110      	bne.n	8008c54 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	f107 0310 	add.w	r3, r7, #16
 8008c3a:	9301      	str	r3, [sp, #4]
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f000 ff6a 	bl	8009b1e <xTaskCreate>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d001      	beq.n	8008c54 <osThreadNew+0x13c>
          hTask = NULL;
 8008c50:	2300      	movs	r3, #0
 8008c52:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008c54:	693b      	ldr	r3, [r7, #16]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3730      	adds	r7, #48	; 0x30
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	200007ec 	.word	0x200007ec

08008c64 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c6c:	f3ef 8305 	mrs	r3, IPSR
 8008c70:	613b      	str	r3, [r7, #16]
  return(result);
 8008c72:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10f      	bne.n	8008c98 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c78:	f3ef 8310 	mrs	r3, PRIMASK
 8008c7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d105      	bne.n	8008c90 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c84:	f3ef 8311 	mrs	r3, BASEPRI
 8008c88:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d007      	beq.n	8008ca0 <osDelay+0x3c>
 8008c90:	4b0a      	ldr	r3, [pc, #40]	; (8008cbc <osDelay+0x58>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d103      	bne.n	8008ca0 <osDelay+0x3c>
    stat = osErrorISR;
 8008c98:	f06f 0305 	mvn.w	r3, #5
 8008c9c:	617b      	str	r3, [r7, #20]
 8008c9e:	e007      	b.n	8008cb0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f001 f894 	bl	8009dd8 <vTaskDelay>
    }
  }

  return (stat);
 8008cb0:	697b      	ldr	r3, [r7, #20]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	200007ec 	.word	0x200007ec

08008cc0 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f002 fb8f 	bl	800b3ec <pvTimerGetTimerID>
 8008cce:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d005      	beq.n	8008ce2 <TimerCallback+0x22>
    callb->func (callb->arg);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	6852      	ldr	r2, [r2, #4]
 8008cde:	4610      	mov	r0, r2
 8008ce0:	4798      	blx	r3
  }
}
 8008ce2:	bf00      	nop
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
	...

08008cec <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b08e      	sub	sp, #56	; 0x38
 8008cf0:	af02      	add	r7, sp, #8
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	607a      	str	r2, [r7, #4]
 8008cf6:	603b      	str	r3, [r7, #0]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d00:	f3ef 8305 	mrs	r3, IPSR
 8008d04:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d06:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d16a      	bne.n	8008de2 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d10:	617b      	str	r3, [r7, #20]
  return(result);
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d105      	bne.n	8008d24 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d18:	f3ef 8311 	mrs	r3, BASEPRI
 8008d1c:	613b      	str	r3, [r7, #16]
  return(result);
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d003      	beq.n	8008d2c <osTimerNew+0x40>
 8008d24:	4b31      	ldr	r3, [pc, #196]	; (8008dec <osTimerNew+0x100>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d05a      	beq.n	8008de2 <osTimerNew+0xf6>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d057      	beq.n	8008de2 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8008d32:	2008      	movs	r0, #8
 8008d34:	f002 fdb6 	bl	800b8a4 <pvPortMalloc>
 8008d38:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d050      	beq.n	8008de2 <osTimerNew+0xf6>
      callb->func = func;
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008d4c:	7afb      	ldrb	r3, [r7, #11]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d102      	bne.n	8008d58 <osTimerNew+0x6c>
        reload = pdFALSE;
 8008d52:	2300      	movs	r3, #0
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
 8008d56:	e001      	b.n	8008d5c <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8008d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d60:	623b      	str	r3, [r7, #32]
      name = NULL;
 8008d62:	2300      	movs	r3, #0
 8008d64:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01c      	beq.n	8008da6 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d002      	beq.n	8008d7a <osTimerNew+0x8e>
          name = attr->name;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d006      	beq.n	8008d90 <osTimerNew+0xa4>
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	2b2b      	cmp	r3, #43	; 0x2b
 8008d88:	d902      	bls.n	8008d90 <osTimerNew+0xa4>
          mem = 1;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	623b      	str	r3, [r7, #32]
 8008d8e:	e00c      	b.n	8008daa <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d108      	bne.n	8008daa <osTimerNew+0xbe>
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d104      	bne.n	8008daa <osTimerNew+0xbe>
            mem = 0;
 8008da0:	2300      	movs	r3, #0
 8008da2:	623b      	str	r3, [r7, #32]
 8008da4:	e001      	b.n	8008daa <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8008da6:	2300      	movs	r3, #0
 8008da8:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d10c      	bne.n	8008dca <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	4b0e      	ldr	r3, [pc, #56]	; (8008df0 <osTimerNew+0x104>)
 8008db8:	9300      	str	r3, [sp, #0]
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dc2:	f001 ff82 	bl	800acca <xTimerCreateStatic>
 8008dc6:	62b8      	str	r0, [r7, #40]	; 0x28
 8008dc8:	e00b      	b.n	8008de2 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d108      	bne.n	8008de2 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8008dd0:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <osTimerNew+0x104>)
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd8:	2101      	movs	r1, #1
 8008dda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ddc:	f001 ff54 	bl	800ac88 <xTimerCreate>
 8008de0:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8008de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3730      	adds	r7, #48	; 0x30
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	200007ec 	.word	0x200007ec
 8008df0:	08008cc1 	.word	0x08008cc1

08008df4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08a      	sub	sp, #40	; 0x28
 8008df8:	af02      	add	r7, sp, #8
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e02:	f3ef 8305 	mrs	r3, IPSR
 8008e06:	617b      	str	r3, [r7, #20]
  return(result);
 8008e08:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10f      	bne.n	8008e2e <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e12:	613b      	str	r3, [r7, #16]
  return(result);
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d105      	bne.n	8008e26 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e1a:	f3ef 8311 	mrs	r3, BASEPRI
 8008e1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d007      	beq.n	8008e36 <osTimerStart+0x42>
 8008e26:	4b12      	ldr	r3, [pc, #72]	; (8008e70 <osTimerStart+0x7c>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d103      	bne.n	8008e36 <osTimerStart+0x42>
    stat = osErrorISR;
 8008e2e:	f06f 0305 	mvn.w	r3, #5
 8008e32:	61fb      	str	r3, [r7, #28]
 8008e34:	e017      	b.n	8008e66 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d103      	bne.n	8008e44 <osTimerStart+0x50>
    stat = osErrorParameter;
 8008e3c:	f06f 0303 	mvn.w	r3, #3
 8008e40:	61fb      	str	r3, [r7, #28]
 8008e42:	e010      	b.n	8008e66 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8008e44:	2300      	movs	r3, #0
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	2300      	movs	r3, #0
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	2104      	movs	r1, #4
 8008e4e:	69b8      	ldr	r0, [r7, #24]
 8008e50:	f001 ffba 	bl	800adc8 <xTimerGenericCommand>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d102      	bne.n	8008e60 <osTimerStart+0x6c>
      stat = osOK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	61fb      	str	r3, [r7, #28]
 8008e5e:	e002      	b.n	8008e66 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8008e60:	f06f 0302 	mvn.w	r3, #2
 8008e64:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8008e66:	69fb      	ldr	r3, [r7, #28]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3720      	adds	r7, #32
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	200007ec 	.word	0x200007ec

08008e74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4a07      	ldr	r2, [pc, #28]	; (8008ea0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	4a06      	ldr	r2, [pc, #24]	; (8008ea4 <vApplicationGetIdleTaskMemory+0x30>)
 8008e8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2280      	movs	r2, #128	; 0x80
 8008e90:	601a      	str	r2, [r3, #0]
}
 8008e92:	bf00      	nop
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	200007f0 	.word	0x200007f0
 8008ea4:	20000898 	.word	0x20000898

08008ea8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	4a07      	ldr	r2, [pc, #28]	; (8008ed4 <vApplicationGetTimerTaskMemory+0x2c>)
 8008eb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	4a06      	ldr	r2, [pc, #24]	; (8008ed8 <vApplicationGetTimerTaskMemory+0x30>)
 8008ebe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ec6:	601a      	str	r2, [r3, #0]
}
 8008ec8:	bf00      	nop
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	20000a98 	.word	0x20000a98
 8008ed8:	20000b40 	.word	0x20000b40

08008edc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f103 0208 	add.w	r2, r3, #8
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f103 0208 	add.w	r2, r3, #8
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f103 0208 	add.w	r2, r3, #8
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f2a:	bf00      	nop
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f36:	b480      	push	{r7}
 8008f38:	b085      	sub	sp, #20
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	689a      	ldr	r2, [r3, #8]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	683a      	ldr	r2, [r7, #0]
 8008f5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	601a      	str	r2, [r3, #0]
}
 8008f72:	bf00      	nop
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b085      	sub	sp, #20
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f94:	d103      	bne.n	8008f9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	e00c      	b.n	8008fb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	3308      	adds	r3, #8
 8008fa2:	60fb      	str	r3, [r7, #12]
 8008fa4:	e002      	b.n	8008fac <vListInsert+0x2e>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	60fb      	str	r3, [r7, #12]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d2f6      	bcs.n	8008fa6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	601a      	str	r2, [r3, #0]
}
 8008fe4:	bf00      	nop
 8008fe6:	3714      	adds	r7, #20
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	6892      	ldr	r2, [r2, #8]
 8009006:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	6852      	ldr	r2, [r2, #4]
 8009010:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	429a      	cmp	r2, r3
 800901a:	d103      	bne.n	8009024 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	689a      	ldr	r2, [r3, #8]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	1e5a      	subs	r2, r3, #1
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10c      	bne.n	8009072 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905c:	b672      	cpsid	i
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	b662      	cpsie	i
 800906c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800906e:	bf00      	nop
 8009070:	e7fe      	b.n	8009070 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009072:	f002 faeb 	bl	800b64c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800907e:	68f9      	ldr	r1, [r7, #12]
 8009080:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009082:	fb01 f303 	mul.w	r3, r1, r3
 8009086:	441a      	add	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090a2:	3b01      	subs	r3, #1
 80090a4:	68f9      	ldr	r1, [r7, #12]
 80090a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80090a8:	fb01 f303 	mul.w	r3, r1, r3
 80090ac:	441a      	add	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	22ff      	movs	r2, #255	; 0xff
 80090b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	22ff      	movs	r2, #255	; 0xff
 80090be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d114      	bne.n	80090f2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d01a      	beq.n	8009106 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	3310      	adds	r3, #16
 80090d4:	4618      	mov	r0, r3
 80090d6:	f001 fadf 	bl	800a698 <xTaskRemoveFromEventList>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d012      	beq.n	8009106 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090e0:	4b0c      	ldr	r3, [pc, #48]	; (8009114 <xQueueGenericReset+0xd0>)
 80090e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	e009      	b.n	8009106 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	3310      	adds	r3, #16
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7ff fef0 	bl	8008edc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3324      	adds	r3, #36	; 0x24
 8009100:	4618      	mov	r0, r3
 8009102:	f7ff feeb 	bl	8008edc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009106:	f002 fad5 	bl	800b6b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800910a:	2301      	movs	r3, #1
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	e000ed04 	.word	0xe000ed04

08009118 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009118:	b580      	push	{r7, lr}
 800911a:	b08e      	sub	sp, #56	; 0x38
 800911c:	af02      	add	r7, sp, #8
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d10c      	bne.n	8009146 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800912c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009130:	b672      	cpsid	i
 8009132:	f383 8811 	msr	BASEPRI, r3
 8009136:	f3bf 8f6f 	isb	sy
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	b662      	cpsie	i
 8009140:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009142:	bf00      	nop
 8009144:	e7fe      	b.n	8009144 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10c      	bne.n	8009166 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800914c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009150:	b672      	cpsid	i
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	b662      	cpsie	i
 8009160:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009162:	bf00      	nop
 8009164:	e7fe      	b.n	8009164 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d002      	beq.n	8009172 <xQueueGenericCreateStatic+0x5a>
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <xQueueGenericCreateStatic+0x5e>
 8009172:	2301      	movs	r3, #1
 8009174:	e000      	b.n	8009178 <xQueueGenericCreateStatic+0x60>
 8009176:	2300      	movs	r3, #0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10c      	bne.n	8009196 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009180:	b672      	cpsid	i
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	b662      	cpsie	i
 8009190:	623b      	str	r3, [r7, #32]
}
 8009192:	bf00      	nop
 8009194:	e7fe      	b.n	8009194 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d102      	bne.n	80091a2 <xQueueGenericCreateStatic+0x8a>
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d101      	bne.n	80091a6 <xQueueGenericCreateStatic+0x8e>
 80091a2:	2301      	movs	r3, #1
 80091a4:	e000      	b.n	80091a8 <xQueueGenericCreateStatic+0x90>
 80091a6:	2300      	movs	r3, #0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10c      	bne.n	80091c6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	b672      	cpsid	i
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	b662      	cpsie	i
 80091c0:	61fb      	str	r3, [r7, #28]
}
 80091c2:	bf00      	nop
 80091c4:	e7fe      	b.n	80091c4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80091c6:	2350      	movs	r3, #80	; 0x50
 80091c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2b50      	cmp	r3, #80	; 0x50
 80091ce:	d00c      	beq.n	80091ea <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	b672      	cpsid	i
 80091d6:	f383 8811 	msr	BASEPRI, r3
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	b662      	cpsie	i
 80091e4:	61bb      	str	r3, [r7, #24]
}
 80091e6:	bf00      	nop
 80091e8:	e7fe      	b.n	80091e8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80091ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80091f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00d      	beq.n	8009212 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80091f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	4613      	mov	r3, r2
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	68b9      	ldr	r1, [r7, #8]
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f000 f805 	bl	800921c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009214:	4618      	mov	r0, r3
 8009216:	3730      	adds	r7, #48	; 0x30
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d103      	bne.n	8009238 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	69ba      	ldr	r2, [r7, #24]
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	e002      	b.n	800923e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800924a:	2101      	movs	r1, #1
 800924c:	69b8      	ldr	r0, [r7, #24]
 800924e:	f7ff fef9 	bl	8009044 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	78fa      	ldrb	r2, [r7, #3]
 8009256:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800925a:	bf00      	nop
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
	...

08009264 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b08e      	sub	sp, #56	; 0x38
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
 8009270:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009272:	2300      	movs	r3, #0
 8009274:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10c      	bne.n	800929a <xQueueGenericSend+0x36>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	b672      	cpsid	i
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	b662      	cpsie	i
 8009294:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009296:	bf00      	nop
 8009298:	e7fe      	b.n	8009298 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d103      	bne.n	80092a8 <xQueueGenericSend+0x44>
 80092a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d101      	bne.n	80092ac <xQueueGenericSend+0x48>
 80092a8:	2301      	movs	r3, #1
 80092aa:	e000      	b.n	80092ae <xQueueGenericSend+0x4a>
 80092ac:	2300      	movs	r3, #0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10c      	bne.n	80092cc <xQueueGenericSend+0x68>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	b672      	cpsid	i
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	b662      	cpsie	i
 80092c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092c8:	bf00      	nop
 80092ca:	e7fe      	b.n	80092ca <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d103      	bne.n	80092da <xQueueGenericSend+0x76>
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d101      	bne.n	80092de <xQueueGenericSend+0x7a>
 80092da:	2301      	movs	r3, #1
 80092dc:	e000      	b.n	80092e0 <xQueueGenericSend+0x7c>
 80092de:	2300      	movs	r3, #0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10c      	bne.n	80092fe <xQueueGenericSend+0x9a>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e8:	b672      	cpsid	i
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	b662      	cpsie	i
 80092f8:	623b      	str	r3, [r7, #32]
}
 80092fa:	bf00      	nop
 80092fc:	e7fe      	b.n	80092fc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092fe:	f001 fb95 	bl	800aa2c <xTaskGetSchedulerState>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d102      	bne.n	800930e <xQueueGenericSend+0xaa>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d101      	bne.n	8009312 <xQueueGenericSend+0xae>
 800930e:	2301      	movs	r3, #1
 8009310:	e000      	b.n	8009314 <xQueueGenericSend+0xb0>
 8009312:	2300      	movs	r3, #0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10c      	bne.n	8009332 <xQueueGenericSend+0xce>
	__asm volatile
 8009318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931c:	b672      	cpsid	i
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	b662      	cpsie	i
 800932c:	61fb      	str	r3, [r7, #28]
}
 800932e:	bf00      	nop
 8009330:	e7fe      	b.n	8009330 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009332:	f002 f98b 	bl	800b64c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800933a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800933e:	429a      	cmp	r2, r3
 8009340:	d302      	bcc.n	8009348 <xQueueGenericSend+0xe4>
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	2b02      	cmp	r3, #2
 8009346:	d129      	bne.n	800939c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	68b9      	ldr	r1, [r7, #8]
 800934c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800934e:	f000 fa15 	bl	800977c <prvCopyDataToQueue>
 8009352:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009358:	2b00      	cmp	r3, #0
 800935a:	d010      	beq.n	800937e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800935c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935e:	3324      	adds	r3, #36	; 0x24
 8009360:	4618      	mov	r0, r3
 8009362:	f001 f999 	bl	800a698 <xTaskRemoveFromEventList>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d013      	beq.n	8009394 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800936c:	4b3f      	ldr	r3, [pc, #252]	; (800946c <xQueueGenericSend+0x208>)
 800936e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	e00a      	b.n	8009394 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	2b00      	cmp	r3, #0
 8009382:	d007      	beq.n	8009394 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009384:	4b39      	ldr	r3, [pc, #228]	; (800946c <xQueueGenericSend+0x208>)
 8009386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009394:	f002 f98e 	bl	800b6b4 <vPortExitCritical>
				return pdPASS;
 8009398:	2301      	movs	r3, #1
 800939a:	e063      	b.n	8009464 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d103      	bne.n	80093aa <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093a2:	f002 f987 	bl	800b6b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80093a6:	2300      	movs	r3, #0
 80093a8:	e05c      	b.n	8009464 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d106      	bne.n	80093be <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093b0:	f107 0314 	add.w	r3, r7, #20
 80093b4:	4618      	mov	r0, r3
 80093b6:	f001 f9d5 	bl	800a764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093ba:	2301      	movs	r3, #1
 80093bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093be:	f002 f979 	bl	800b6b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093c2:	f000 ff35 	bl	800a230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093c6:	f002 f941 	bl	800b64c <vPortEnterCritical>
 80093ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093d0:	b25b      	sxtb	r3, r3
 80093d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d6:	d103      	bne.n	80093e0 <xQueueGenericSend+0x17c>
 80093d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093e6:	b25b      	sxtb	r3, r3
 80093e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ec:	d103      	bne.n	80093f6 <xQueueGenericSend+0x192>
 80093ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093f6:	f002 f95d 	bl	800b6b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093fa:	1d3a      	adds	r2, r7, #4
 80093fc:	f107 0314 	add.w	r3, r7, #20
 8009400:	4611      	mov	r1, r2
 8009402:	4618      	mov	r0, r3
 8009404:	f001 f9c4 	bl	800a790 <xTaskCheckForTimeOut>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d124      	bne.n	8009458 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800940e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009410:	f000 faac 	bl	800996c <prvIsQueueFull>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d018      	beq.n	800944c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800941a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941c:	3310      	adds	r3, #16
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	4611      	mov	r1, r2
 8009422:	4618      	mov	r0, r3
 8009424:	f001 f8e4 	bl	800a5f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800942a:	f000 fa37 	bl	800989c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800942e:	f000 ff0d 	bl	800a24c <xTaskResumeAll>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	f47f af7c 	bne.w	8009332 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800943a:	4b0c      	ldr	r3, [pc, #48]	; (800946c <xQueueGenericSend+0x208>)
 800943c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	e772      	b.n	8009332 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800944c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800944e:	f000 fa25 	bl	800989c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009452:	f000 fefb 	bl	800a24c <xTaskResumeAll>
 8009456:	e76c      	b.n	8009332 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800945a:	f000 fa1f 	bl	800989c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800945e:	f000 fef5 	bl	800a24c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009462:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009464:	4618      	mov	r0, r3
 8009466:	3738      	adds	r7, #56	; 0x38
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	e000ed04 	.word	0xe000ed04

08009470 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b08e      	sub	sp, #56	; 0x38
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
 800947c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10c      	bne.n	80094a2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948c:	b672      	cpsid	i
 800948e:	f383 8811 	msr	BASEPRI, r3
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	b662      	cpsie	i
 800949c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800949e:	bf00      	nop
 80094a0:	e7fe      	b.n	80094a0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d103      	bne.n	80094b0 <xQueueGenericSendFromISR+0x40>
 80094a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d101      	bne.n	80094b4 <xQueueGenericSendFromISR+0x44>
 80094b0:	2301      	movs	r3, #1
 80094b2:	e000      	b.n	80094b6 <xQueueGenericSendFromISR+0x46>
 80094b4:	2300      	movs	r3, #0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10c      	bne.n	80094d4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094be:	b672      	cpsid	i
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	b662      	cpsie	i
 80094ce:	623b      	str	r3, [r7, #32]
}
 80094d0:	bf00      	nop
 80094d2:	e7fe      	b.n	80094d2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d103      	bne.n	80094e2 <xQueueGenericSendFromISR+0x72>
 80094da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d101      	bne.n	80094e6 <xQueueGenericSendFromISR+0x76>
 80094e2:	2301      	movs	r3, #1
 80094e4:	e000      	b.n	80094e8 <xQueueGenericSendFromISR+0x78>
 80094e6:	2300      	movs	r3, #0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10c      	bne.n	8009506 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80094ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f0:	b672      	cpsid	i
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	b662      	cpsie	i
 8009500:	61fb      	str	r3, [r7, #28]
}
 8009502:	bf00      	nop
 8009504:	e7fe      	b.n	8009504 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009506:	f002 f989 	bl	800b81c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800950a:	f3ef 8211 	mrs	r2, BASEPRI
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	b672      	cpsid	i
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	b662      	cpsie	i
 8009522:	61ba      	str	r2, [r7, #24]
 8009524:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009526:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009528:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800952e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009532:	429a      	cmp	r2, r3
 8009534:	d302      	bcc.n	800953c <xQueueGenericSendFromISR+0xcc>
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2b02      	cmp	r3, #2
 800953a:	d12c      	bne.n	8009596 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	68b9      	ldr	r1, [r7, #8]
 800954a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800954c:	f000 f916 	bl	800977c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009550:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009558:	d112      	bne.n	8009580 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955e:	2b00      	cmp	r3, #0
 8009560:	d016      	beq.n	8009590 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	3324      	adds	r3, #36	; 0x24
 8009566:	4618      	mov	r0, r3
 8009568:	f001 f896 	bl	800a698 <xTaskRemoveFromEventList>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00e      	beq.n	8009590 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00b      	beq.n	8009590 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	601a      	str	r2, [r3, #0]
 800957e:	e007      	b.n	8009590 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009580:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009584:	3301      	adds	r3, #1
 8009586:	b2db      	uxtb	r3, r3
 8009588:	b25a      	sxtb	r2, r3
 800958a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009590:	2301      	movs	r3, #1
 8009592:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009594:	e001      	b.n	800959a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009596:	2300      	movs	r3, #0
 8009598:	637b      	str	r3, [r7, #52]	; 0x34
 800959a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80095a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3738      	adds	r7, #56	; 0x38
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b08c      	sub	sp, #48	; 0x30
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80095bc:	2300      	movs	r3, #0
 80095be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80095c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10c      	bne.n	80095e4 <xQueueReceive+0x34>
	__asm volatile
 80095ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ce:	b672      	cpsid	i
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	b662      	cpsie	i
 80095de:	623b      	str	r3, [r7, #32]
}
 80095e0:	bf00      	nop
 80095e2:	e7fe      	b.n	80095e2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d103      	bne.n	80095f2 <xQueueReceive+0x42>
 80095ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d101      	bne.n	80095f6 <xQueueReceive+0x46>
 80095f2:	2301      	movs	r3, #1
 80095f4:	e000      	b.n	80095f8 <xQueueReceive+0x48>
 80095f6:	2300      	movs	r3, #0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10c      	bne.n	8009616 <xQueueReceive+0x66>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009600:	b672      	cpsid	i
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	b662      	cpsie	i
 8009610:	61fb      	str	r3, [r7, #28]
}
 8009612:	bf00      	nop
 8009614:	e7fe      	b.n	8009614 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009616:	f001 fa09 	bl	800aa2c <xTaskGetSchedulerState>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d102      	bne.n	8009626 <xQueueReceive+0x76>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <xQueueReceive+0x7a>
 8009626:	2301      	movs	r3, #1
 8009628:	e000      	b.n	800962c <xQueueReceive+0x7c>
 800962a:	2300      	movs	r3, #0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10c      	bne.n	800964a <xQueueReceive+0x9a>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009634:	b672      	cpsid	i
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	b662      	cpsie	i
 8009644:	61bb      	str	r3, [r7, #24]
}
 8009646:	bf00      	nop
 8009648:	e7fe      	b.n	8009648 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800964a:	f001 ffff 	bl	800b64c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009652:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	2b00      	cmp	r3, #0
 8009658:	d01f      	beq.n	800969a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800965a:	68b9      	ldr	r1, [r7, #8]
 800965c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800965e:	f000 f8f7 	bl	8009850 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	1e5a      	subs	r2, r3, #1
 8009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009668:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00f      	beq.n	8009692 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009674:	3310      	adds	r3, #16
 8009676:	4618      	mov	r0, r3
 8009678:	f001 f80e 	bl	800a698 <xTaskRemoveFromEventList>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d007      	beq.n	8009692 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009682:	4b3d      	ldr	r3, [pc, #244]	; (8009778 <xQueueReceive+0x1c8>)
 8009684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009688:	601a      	str	r2, [r3, #0]
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009692:	f002 f80f 	bl	800b6b4 <vPortExitCritical>
				return pdPASS;
 8009696:	2301      	movs	r3, #1
 8009698:	e069      	b.n	800976e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d103      	bne.n	80096a8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096a0:	f002 f808 	bl	800b6b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80096a4:	2300      	movs	r3, #0
 80096a6:	e062      	b.n	800976e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d106      	bne.n	80096bc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096ae:	f107 0310 	add.w	r3, r7, #16
 80096b2:	4618      	mov	r0, r3
 80096b4:	f001 f856 	bl	800a764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096b8:	2301      	movs	r3, #1
 80096ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096bc:	f001 fffa 	bl	800b6b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096c0:	f000 fdb6 	bl	800a230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096c4:	f001 ffc2 	bl	800b64c <vPortEnterCritical>
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096ce:	b25b      	sxtb	r3, r3
 80096d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d4:	d103      	bne.n	80096de <xQueueReceive+0x12e>
 80096d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096e4:	b25b      	sxtb	r3, r3
 80096e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ea:	d103      	bne.n	80096f4 <xQueueReceive+0x144>
 80096ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096f4:	f001 ffde 	bl	800b6b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096f8:	1d3a      	adds	r2, r7, #4
 80096fa:	f107 0310 	add.w	r3, r7, #16
 80096fe:	4611      	mov	r1, r2
 8009700:	4618      	mov	r0, r3
 8009702:	f001 f845 	bl	800a790 <xTaskCheckForTimeOut>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d123      	bne.n	8009754 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800970c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800970e:	f000 f917 	bl	8009940 <prvIsQueueEmpty>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d017      	beq.n	8009748 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971a:	3324      	adds	r3, #36	; 0x24
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	4611      	mov	r1, r2
 8009720:	4618      	mov	r0, r3
 8009722:	f000 ff65 	bl	800a5f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009728:	f000 f8b8 	bl	800989c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800972c:	f000 fd8e 	bl	800a24c <xTaskResumeAll>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d189      	bne.n	800964a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009736:	4b10      	ldr	r3, [pc, #64]	; (8009778 <xQueueReceive+0x1c8>)
 8009738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800973c:	601a      	str	r2, [r3, #0]
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	e780      	b.n	800964a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800974a:	f000 f8a7 	bl	800989c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800974e:	f000 fd7d 	bl	800a24c <xTaskResumeAll>
 8009752:	e77a      	b.n	800964a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009756:	f000 f8a1 	bl	800989c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800975a:	f000 fd77 	bl	800a24c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800975e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009760:	f000 f8ee 	bl	8009940 <prvIsQueueEmpty>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	f43f af6f 	beq.w	800964a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800976c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800976e:	4618      	mov	r0, r3
 8009770:	3730      	adds	r7, #48	; 0x30
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	e000ed04 	.word	0xe000ed04

0800977c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009788:	2300      	movs	r3, #0
 800978a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009790:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10d      	bne.n	80097b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d14d      	bne.n	800983e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f001 f95e 	bl	800aa68 <xTaskPriorityDisinherit>
 80097ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	609a      	str	r2, [r3, #8]
 80097b4:	e043      	b.n	800983e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d119      	bne.n	80097f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6858      	ldr	r0, [r3, #4]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c4:	461a      	mov	r2, r3
 80097c6:	68b9      	ldr	r1, [r7, #8]
 80097c8:	f002 fc34 	bl	800c034 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	685a      	ldr	r2, [r3, #4]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	441a      	add	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d32b      	bcc.n	800983e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	605a      	str	r2, [r3, #4]
 80097ee:	e026      	b.n	800983e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	68d8      	ldr	r0, [r3, #12]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f8:	461a      	mov	r2, r3
 80097fa:	68b9      	ldr	r1, [r7, #8]
 80097fc:	f002 fc1a 	bl	800c034 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	68da      	ldr	r2, [r3, #12]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009808:	425b      	negs	r3, r3
 800980a:	441a      	add	r2, r3
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	68da      	ldr	r2, [r3, #12]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	429a      	cmp	r2, r3
 800981a:	d207      	bcs.n	800982c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	689a      	ldr	r2, [r3, #8]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009824:	425b      	negs	r3, r3
 8009826:	441a      	add	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2b02      	cmp	r3, #2
 8009830:	d105      	bne.n	800983e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d002      	beq.n	800983e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	3b01      	subs	r3, #1
 800983c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009846:	697b      	ldr	r3, [r7, #20]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3718      	adds	r7, #24
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985e:	2b00      	cmp	r3, #0
 8009860:	d018      	beq.n	8009894 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	68da      	ldr	r2, [r3, #12]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986a:	441a      	add	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	68da      	ldr	r2, [r3, #12]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	429a      	cmp	r2, r3
 800987a:	d303      	bcc.n	8009884 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	68d9      	ldr	r1, [r3, #12]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988c:	461a      	mov	r2, r3
 800988e:	6838      	ldr	r0, [r7, #0]
 8009890:	f002 fbd0 	bl	800c034 <memcpy>
	}
}
 8009894:	bf00      	nop
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80098a4:	f001 fed2 	bl	800b64c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098b0:	e011      	b.n	80098d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d012      	beq.n	80098e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	3324      	adds	r3, #36	; 0x24
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 feea 	bl	800a698 <xTaskRemoveFromEventList>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80098ca:	f000 ffc7 	bl	800a85c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	dce9      	bgt.n	80098b2 <prvUnlockQueue+0x16>
 80098de:	e000      	b.n	80098e2 <prvUnlockQueue+0x46>
					break;
 80098e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	22ff      	movs	r2, #255	; 0xff
 80098e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80098ea:	f001 fee3 	bl	800b6b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80098ee:	f001 fead 	bl	800b64c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098fa:	e011      	b.n	8009920 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d012      	beq.n	800992a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	3310      	adds	r3, #16
 8009908:	4618      	mov	r0, r3
 800990a:	f000 fec5 	bl	800a698 <xTaskRemoveFromEventList>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d001      	beq.n	8009918 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009914:	f000 ffa2 	bl	800a85c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009918:	7bbb      	ldrb	r3, [r7, #14]
 800991a:	3b01      	subs	r3, #1
 800991c:	b2db      	uxtb	r3, r3
 800991e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009924:	2b00      	cmp	r3, #0
 8009926:	dce9      	bgt.n	80098fc <prvUnlockQueue+0x60>
 8009928:	e000      	b.n	800992c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800992a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	22ff      	movs	r2, #255	; 0xff
 8009930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009934:	f001 febe 	bl	800b6b4 <vPortExitCritical>
}
 8009938:	bf00      	nop
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009948:	f001 fe80 	bl	800b64c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009950:	2b00      	cmp	r3, #0
 8009952:	d102      	bne.n	800995a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009954:	2301      	movs	r3, #1
 8009956:	60fb      	str	r3, [r7, #12]
 8009958:	e001      	b.n	800995e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800995a:	2300      	movs	r3, #0
 800995c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800995e:	f001 fea9 	bl	800b6b4 <vPortExitCritical>

	return xReturn;
 8009962:	68fb      	ldr	r3, [r7, #12]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009974:	f001 fe6a 	bl	800b64c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009980:	429a      	cmp	r2, r3
 8009982:	d102      	bne.n	800998a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009984:	2301      	movs	r3, #1
 8009986:	60fb      	str	r3, [r7, #12]
 8009988:	e001      	b.n	800998e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800998a:	2300      	movs	r3, #0
 800998c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800998e:	f001 fe91 	bl	800b6b4 <vPortExitCritical>

	return xReturn;
 8009992:	68fb      	ldr	r3, [r7, #12]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099a6:	2300      	movs	r3, #0
 80099a8:	60fb      	str	r3, [r7, #12]
 80099aa:	e014      	b.n	80099d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80099ac:	4a0f      	ldr	r2, [pc, #60]	; (80099ec <vQueueAddToRegistry+0x50>)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10b      	bne.n	80099d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80099b8:	490c      	ldr	r1, [pc, #48]	; (80099ec <vQueueAddToRegistry+0x50>)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80099c2:	4a0a      	ldr	r2, [pc, #40]	; (80099ec <vQueueAddToRegistry+0x50>)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	00db      	lsls	r3, r3, #3
 80099c8:	4413      	add	r3, r2
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80099ce:	e006      	b.n	80099de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	3301      	adds	r3, #1
 80099d4:	60fb      	str	r3, [r7, #12]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2b07      	cmp	r3, #7
 80099da:	d9e7      	bls.n	80099ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80099dc:	bf00      	nop
 80099de:	bf00      	nop
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	20000f40 	.word	0x20000f40

080099f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009a00:	f001 fe24 	bl	800b64c <vPortEnterCritical>
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a0a:	b25b      	sxtb	r3, r3
 8009a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a10:	d103      	bne.n	8009a1a <vQueueWaitForMessageRestricted+0x2a>
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a20:	b25b      	sxtb	r3, r3
 8009a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a26:	d103      	bne.n	8009a30 <vQueueWaitForMessageRestricted+0x40>
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a30:	f001 fe40 	bl	800b6b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d106      	bne.n	8009a4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	3324      	adds	r3, #36	; 0x24
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	68b9      	ldr	r1, [r7, #8]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f000 fdf9 	bl	800a63c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009a4a:	6978      	ldr	r0, [r7, #20]
 8009a4c:	f7ff ff26 	bl	800989c <prvUnlockQueue>
	}
 8009a50:	bf00      	nop
 8009a52:	3718      	adds	r7, #24
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b08e      	sub	sp, #56	; 0x38
 8009a5c:	af04      	add	r7, sp, #16
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
 8009a64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10c      	bne.n	8009a86 <xTaskCreateStatic+0x2e>
	__asm volatile
 8009a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a70:	b672      	cpsid	i
 8009a72:	f383 8811 	msr	BASEPRI, r3
 8009a76:	f3bf 8f6f 	isb	sy
 8009a7a:	f3bf 8f4f 	dsb	sy
 8009a7e:	b662      	cpsie	i
 8009a80:	623b      	str	r3, [r7, #32]
}
 8009a82:	bf00      	nop
 8009a84:	e7fe      	b.n	8009a84 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10c      	bne.n	8009aa6 <xTaskCreateStatic+0x4e>
	__asm volatile
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	b672      	cpsid	i
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	b662      	cpsie	i
 8009aa0:	61fb      	str	r3, [r7, #28]
}
 8009aa2:	bf00      	nop
 8009aa4:	e7fe      	b.n	8009aa4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009aa6:	23a8      	movs	r3, #168	; 0xa8
 8009aa8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	2ba8      	cmp	r3, #168	; 0xa8
 8009aae:	d00c      	beq.n	8009aca <xTaskCreateStatic+0x72>
	__asm volatile
 8009ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab4:	b672      	cpsid	i
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	b662      	cpsie	i
 8009ac4:	61bb      	str	r3, [r7, #24]
}
 8009ac6:	bf00      	nop
 8009ac8:	e7fe      	b.n	8009ac8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009aca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d01e      	beq.n	8009b10 <xTaskCreateStatic+0xb8>
 8009ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d01b      	beq.n	8009b10 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ada:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ae0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	2202      	movs	r2, #2
 8009ae6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009aea:	2300      	movs	r3, #0
 8009aec:	9303      	str	r3, [sp, #12]
 8009aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af0:	9302      	str	r3, [sp, #8]
 8009af2:	f107 0314 	add.w	r3, r7, #20
 8009af6:	9301      	str	r3, [sp, #4]
 8009af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	68b9      	ldr	r1, [r7, #8]
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f000 f850 	bl	8009ba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b0a:	f000 f8f5 	bl	8009cf8 <prvAddNewTaskToReadyList>
 8009b0e:	e001      	b.n	8009b14 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009b14:	697b      	ldr	r3, [r7, #20]
	}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3728      	adds	r7, #40	; 0x28
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b08c      	sub	sp, #48	; 0x30
 8009b22:	af04      	add	r7, sp, #16
 8009b24:	60f8      	str	r0, [r7, #12]
 8009b26:	60b9      	str	r1, [r7, #8]
 8009b28:	603b      	str	r3, [r7, #0]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009b2e:	88fb      	ldrh	r3, [r7, #6]
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f001 feb6 	bl	800b8a4 <pvPortMalloc>
 8009b38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00e      	beq.n	8009b5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b40:	20a8      	movs	r0, #168	; 0xa8
 8009b42:	f001 feaf 	bl	800b8a4 <pvPortMalloc>
 8009b46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	631a      	str	r2, [r3, #48]	; 0x30
 8009b54:	e005      	b.n	8009b62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b56:	6978      	ldr	r0, [r7, #20]
 8009b58:	f001 ff6e 	bl	800ba38 <vPortFree>
 8009b5c:	e001      	b.n	8009b62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d017      	beq.n	8009b98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b70:	88fa      	ldrh	r2, [r7, #6]
 8009b72:	2300      	movs	r3, #0
 8009b74:	9303      	str	r3, [sp, #12]
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	9302      	str	r3, [sp, #8]
 8009b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7c:	9301      	str	r3, [sp, #4]
 8009b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	68b9      	ldr	r1, [r7, #8]
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f000 f80e 	bl	8009ba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b8c:	69f8      	ldr	r0, [r7, #28]
 8009b8e:	f000 f8b3 	bl	8009cf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b92:	2301      	movs	r3, #1
 8009b94:	61bb      	str	r3, [r7, #24]
 8009b96:	e002      	b.n	8009b9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b98:	f04f 33ff 	mov.w	r3, #4294967295
 8009b9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b9e:	69bb      	ldr	r3, [r7, #24]
	}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3720      	adds	r7, #32
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b088      	sub	sp, #32
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
 8009bb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	21a5      	movs	r1, #165	; 0xa5
 8009bc2:	f002 f958 	bl	800be76 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bca:	6879      	ldr	r1, [r7, #4]
 8009bcc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009bd0:	440b      	add	r3, r1
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	f023 0307 	bic.w	r3, r3, #7
 8009bde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	f003 0307 	and.w	r3, r3, #7
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00c      	beq.n	8009c04 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bee:	b672      	cpsid	i
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	b662      	cpsie	i
 8009bfe:	617b      	str	r3, [r7, #20]
}
 8009c00:	bf00      	nop
 8009c02:	e7fe      	b.n	8009c02 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d01f      	beq.n	8009c4a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	61fb      	str	r3, [r7, #28]
 8009c0e:	e012      	b.n	8009c36 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	4413      	add	r3, r2
 8009c16:	7819      	ldrb	r1, [r3, #0]
 8009c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	3334      	adds	r3, #52	; 0x34
 8009c20:	460a      	mov	r2, r1
 8009c22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009c24:	68ba      	ldr	r2, [r7, #8]
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	4413      	add	r3, r2
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d006      	beq.n	8009c3e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	3301      	adds	r3, #1
 8009c34:	61fb      	str	r3, [r7, #28]
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	2b0f      	cmp	r3, #15
 8009c3a:	d9e9      	bls.n	8009c10 <prvInitialiseNewTask+0x68>
 8009c3c:	e000      	b.n	8009c40 <prvInitialiseNewTask+0x98>
			{
				break;
 8009c3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c48:	e003      	b.n	8009c52 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c54:	2b37      	cmp	r3, #55	; 0x37
 8009c56:	d901      	bls.n	8009c5c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c58:	2337      	movs	r3, #55	; 0x37
 8009c5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c70:	3304      	adds	r3, #4
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7ff f952 	bl	8008f1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7a:	3318      	adds	r3, #24
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7ff f94d 	bl	8008f1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009caa:	3354      	adds	r3, #84	; 0x54
 8009cac:	224c      	movs	r2, #76	; 0x4c
 8009cae:	2100      	movs	r1, #0
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f002 f8e0 	bl	800be76 <memset>
 8009cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb8:	4a0c      	ldr	r2, [pc, #48]	; (8009cec <prvInitialiseNewTask+0x144>)
 8009cba:	659a      	str	r2, [r3, #88]	; 0x58
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbe:	4a0c      	ldr	r2, [pc, #48]	; (8009cf0 <prvInitialiseNewTask+0x148>)
 8009cc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8009cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc4:	4a0b      	ldr	r2, [pc, #44]	; (8009cf4 <prvInitialiseNewTask+0x14c>)
 8009cc6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	68f9      	ldr	r1, [r7, #12]
 8009ccc:	69b8      	ldr	r0, [r7, #24]
 8009cce:	f001 fbaf 	bl	800b430 <pxPortInitialiseStack>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ce2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ce4:	bf00      	nop
 8009ce6:	3720      	adds	r7, #32
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	200051cc 	.word	0x200051cc
 8009cf0:	20005234 	.word	0x20005234
 8009cf4:	2000529c 	.word	0x2000529c

08009cf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009d00:	f001 fca4 	bl	800b64c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009d04:	4b2d      	ldr	r3, [pc, #180]	; (8009dbc <prvAddNewTaskToReadyList+0xc4>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	4a2c      	ldr	r2, [pc, #176]	; (8009dbc <prvAddNewTaskToReadyList+0xc4>)
 8009d0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009d0e:	4b2c      	ldr	r3, [pc, #176]	; (8009dc0 <prvAddNewTaskToReadyList+0xc8>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d109      	bne.n	8009d2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d16:	4a2a      	ldr	r2, [pc, #168]	; (8009dc0 <prvAddNewTaskToReadyList+0xc8>)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d1c:	4b27      	ldr	r3, [pc, #156]	; (8009dbc <prvAddNewTaskToReadyList+0xc4>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d110      	bne.n	8009d46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009d24:	f000 fdbe 	bl	800a8a4 <prvInitialiseTaskLists>
 8009d28:	e00d      	b.n	8009d46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009d2a:	4b26      	ldr	r3, [pc, #152]	; (8009dc4 <prvAddNewTaskToReadyList+0xcc>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d109      	bne.n	8009d46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d32:	4b23      	ldr	r3, [pc, #140]	; (8009dc0 <prvAddNewTaskToReadyList+0xc8>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d802      	bhi.n	8009d46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d40:	4a1f      	ldr	r2, [pc, #124]	; (8009dc0 <prvAddNewTaskToReadyList+0xc8>)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d46:	4b20      	ldr	r3, [pc, #128]	; (8009dc8 <prvAddNewTaskToReadyList+0xd0>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	4a1e      	ldr	r2, [pc, #120]	; (8009dc8 <prvAddNewTaskToReadyList+0xd0>)
 8009d4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009d50:	4b1d      	ldr	r3, [pc, #116]	; (8009dc8 <prvAddNewTaskToReadyList+0xd0>)
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d5c:	4b1b      	ldr	r3, [pc, #108]	; (8009dcc <prvAddNewTaskToReadyList+0xd4>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d903      	bls.n	8009d6c <prvAddNewTaskToReadyList+0x74>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d68:	4a18      	ldr	r2, [pc, #96]	; (8009dcc <prvAddNewTaskToReadyList+0xd4>)
 8009d6a:	6013      	str	r3, [r2, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d70:	4613      	mov	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4413      	add	r3, r2
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4a15      	ldr	r2, [pc, #84]	; (8009dd0 <prvAddNewTaskToReadyList+0xd8>)
 8009d7a:	441a      	add	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	3304      	adds	r3, #4
 8009d80:	4619      	mov	r1, r3
 8009d82:	4610      	mov	r0, r2
 8009d84:	f7ff f8d7 	bl	8008f36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d88:	f001 fc94 	bl	800b6b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d8c:	4b0d      	ldr	r3, [pc, #52]	; (8009dc4 <prvAddNewTaskToReadyList+0xcc>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00e      	beq.n	8009db2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d94:	4b0a      	ldr	r3, [pc, #40]	; (8009dc0 <prvAddNewTaskToReadyList+0xc8>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d207      	bcs.n	8009db2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009da2:	4b0c      	ldr	r3, [pc, #48]	; (8009dd4 <prvAddNewTaskToReadyList+0xdc>)
 8009da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009da8:	601a      	str	r2, [r3, #0]
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009db2:	bf00      	nop
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	20001454 	.word	0x20001454
 8009dc0:	20000f80 	.word	0x20000f80
 8009dc4:	20001460 	.word	0x20001460
 8009dc8:	20001470 	.word	0x20001470
 8009dcc:	2000145c 	.word	0x2000145c
 8009dd0:	20000f84 	.word	0x20000f84
 8009dd4:	e000ed04 	.word	0xe000ed04

08009dd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009de0:	2300      	movs	r3, #0
 8009de2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d019      	beq.n	8009e1e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009dea:	4b14      	ldr	r3, [pc, #80]	; (8009e3c <vTaskDelay+0x64>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00c      	beq.n	8009e0c <vTaskDelay+0x34>
	__asm volatile
 8009df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df6:	b672      	cpsid	i
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	b662      	cpsie	i
 8009e06:	60bb      	str	r3, [r7, #8]
}
 8009e08:	bf00      	nop
 8009e0a:	e7fe      	b.n	8009e0a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009e0c:	f000 fa10 	bl	800a230 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009e10:	2100      	movs	r1, #0
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fe9a 	bl	800ab4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009e18:	f000 fa18 	bl	800a24c <xTaskResumeAll>
 8009e1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d107      	bne.n	8009e34 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009e24:	4b06      	ldr	r3, [pc, #24]	; (8009e40 <vTaskDelay+0x68>)
 8009e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e2a:	601a      	str	r2, [r3, #0]
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e34:	bf00      	nop
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	2000147c 	.word	0x2000147c
 8009e40:	e000ed04 	.word	0xe000ed04

08009e44 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009e4c:	f001 fbfe 	bl	800b64c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d102      	bne.n	8009e5c <vTaskSuspend+0x18>
 8009e56:	4b31      	ldr	r3, [pc, #196]	; (8009f1c <vTaskSuspend+0xd8>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	e000      	b.n	8009e5e <vTaskSuspend+0x1a>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	3304      	adds	r3, #4
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7ff f8c3 	bl	8008ff0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d004      	beq.n	8009e7c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	3318      	adds	r3, #24
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7ff f8ba 	bl	8008ff0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	4619      	mov	r1, r3
 8009e82:	4827      	ldr	r0, [pc, #156]	; (8009f20 <vTaskSuspend+0xdc>)
 8009e84:	f7ff f857 	bl	8008f36 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d103      	bne.n	8009e9c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009e9c:	f001 fc0a 	bl	800b6b4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009ea0:	4b20      	ldr	r3, [pc, #128]	; (8009f24 <vTaskSuspend+0xe0>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d005      	beq.n	8009eb4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009ea8:	f001 fbd0 	bl	800b64c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009eac:	f000 fd9e 	bl	800a9ec <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009eb0:	f001 fc00 	bl	800b6b4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009eb4:	4b19      	ldr	r3, [pc, #100]	; (8009f1c <vTaskSuspend+0xd8>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d129      	bne.n	8009f12 <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 8009ebe:	4b19      	ldr	r3, [pc, #100]	; (8009f24 <vTaskSuspend+0xe0>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d019      	beq.n	8009efa <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009ec6:	4b18      	ldr	r3, [pc, #96]	; (8009f28 <vTaskSuspend+0xe4>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00c      	beq.n	8009ee8 <vTaskSuspend+0xa4>
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed2:	b672      	cpsid	i
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	b662      	cpsie	i
 8009ee2:	60bb      	str	r3, [r7, #8]
}
 8009ee4:	bf00      	nop
 8009ee6:	e7fe      	b.n	8009ee6 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8009ee8:	4b10      	ldr	r3, [pc, #64]	; (8009f2c <vTaskSuspend+0xe8>)
 8009eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eee:	601a      	str	r2, [r3, #0]
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ef8:	e00b      	b.n	8009f12 <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009efa:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <vTaskSuspend+0xdc>)
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	4b0c      	ldr	r3, [pc, #48]	; (8009f30 <vTaskSuspend+0xec>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d103      	bne.n	8009f0e <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8009f06:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <vTaskSuspend+0xd8>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	601a      	str	r2, [r3, #0]
	}
 8009f0c:	e001      	b.n	8009f12 <vTaskSuspend+0xce>
					vTaskSwitchContext();
 8009f0e:	f000 fb09 	bl	800a524 <vTaskSwitchContext>
	}
 8009f12:	bf00      	nop
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	20000f80 	.word	0x20000f80
 8009f20:	20001440 	.word	0x20001440
 8009f24:	20001460 	.word	0x20001460
 8009f28:	2000147c 	.word	0x2000147c
 8009f2c:	e000ed04 	.word	0xe000ed04
 8009f30:	20001454 	.word	0x20001454

08009f34 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009f34:	b480      	push	{r7}
 8009f36:	b087      	sub	sp, #28
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d10c      	bne.n	8009f64 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8009f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4e:	b672      	cpsid	i
 8009f50:	f383 8811 	msr	BASEPRI, r3
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	b662      	cpsie	i
 8009f5e:	60fb      	str	r3, [r7, #12]
}
 8009f60:	bf00      	nop
 8009f62:	e7fe      	b.n	8009f62 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	695b      	ldr	r3, [r3, #20]
 8009f68:	4a0a      	ldr	r2, [pc, #40]	; (8009f94 <prvTaskIsTaskSuspended+0x60>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d10a      	bne.n	8009f84 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f72:	4a09      	ldr	r2, [pc, #36]	; (8009f98 <prvTaskIsTaskSuspended+0x64>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d005      	beq.n	8009f84 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8009f80:	2301      	movs	r3, #1
 8009f82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f84:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009f86:	4618      	mov	r0, r3
 8009f88:	371c      	adds	r7, #28
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	20001440 	.word	0x20001440
 8009f98:	20001414 	.word	0x20001414

08009f9c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10c      	bne.n	8009fc8 <vTaskResume+0x2c>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb2:	b672      	cpsid	i
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	b662      	cpsie	i
 8009fc2:	60bb      	str	r3, [r7, #8]
}
 8009fc4:	bf00      	nop
 8009fc6:	e7fe      	b.n	8009fc6 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8009fc8:	4b20      	ldr	r3, [pc, #128]	; (800a04c <vTaskResume+0xb0>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d038      	beq.n	800a044 <vTaskResume+0xa8>
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d035      	beq.n	800a044 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8009fd8:	f001 fb38 	bl	800b64c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f7ff ffa9 	bl	8009f34 <prvTaskIsTaskSuspended>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d02b      	beq.n	800a040 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	3304      	adds	r3, #4
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7fe ffff 	bl	8008ff0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff6:	4b16      	ldr	r3, [pc, #88]	; (800a050 <vTaskResume+0xb4>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d903      	bls.n	800a006 <vTaskResume+0x6a>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a002:	4a13      	ldr	r2, [pc, #76]	; (800a050 <vTaskResume+0xb4>)
 800a004:	6013      	str	r3, [r2, #0]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a00a:	4613      	mov	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4413      	add	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4a10      	ldr	r2, [pc, #64]	; (800a054 <vTaskResume+0xb8>)
 800a014:	441a      	add	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	3304      	adds	r3, #4
 800a01a:	4619      	mov	r1, r3
 800a01c:	4610      	mov	r0, r2
 800a01e:	f7fe ff8a 	bl	8008f36 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a026:	4b09      	ldr	r3, [pc, #36]	; (800a04c <vTaskResume+0xb0>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d307      	bcc.n	800a040 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a030:	4b09      	ldr	r3, [pc, #36]	; (800a058 <vTaskResume+0xbc>)
 800a032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a040:	f001 fb38 	bl	800b6b4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a044:	bf00      	nop
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	20000f80 	.word	0x20000f80
 800a050:	2000145c 	.word	0x2000145c
 800a054:	20000f84 	.word	0x20000f84
 800a058:	e000ed04 	.word	0xe000ed04

0800a05c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b08a      	sub	sp, #40	; 0x28
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800a064:	2300      	movs	r3, #0
 800a066:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10c      	bne.n	800a08c <xTaskResumeFromISR+0x30>
	__asm volatile
 800a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a076:	b672      	cpsid	i
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	b662      	cpsie	i
 800a086:	61bb      	str	r3, [r7, #24]
}
 800a088:	bf00      	nop
 800a08a:	e7fe      	b.n	800a08a <xTaskResumeFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a08c:	f001 fbc6 	bl	800b81c <vPortValidateInterruptPriority>
	__asm volatile
 800a090:	f3ef 8211 	mrs	r2, BASEPRI
 800a094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a098:	b672      	cpsid	i
 800a09a:	f383 8811 	msr	BASEPRI, r3
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	b662      	cpsie	i
 800a0a8:	617a      	str	r2, [r7, #20]
 800a0aa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a0ac:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0ae:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a0b0:	6a38      	ldr	r0, [r7, #32]
 800a0b2:	f7ff ff3f 	bl	8009f34 <prvTaskIsTaskSuspended>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d030      	beq.n	800a11e <xTaskResumeFromISR+0xc2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0bc:	4b1d      	ldr	r3, [pc, #116]	; (800a134 <xTaskResumeFromISR+0xd8>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d126      	bne.n	800a112 <xTaskResumeFromISR+0xb6>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c8:	4b1b      	ldr	r3, [pc, #108]	; (800a138 <xTaskResumeFromISR+0xdc>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d301      	bcc.n	800a0d6 <xTaskResumeFromISR+0x7a>
					{
						xYieldRequired = pdTRUE;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0d6:	6a3b      	ldr	r3, [r7, #32]
 800a0d8:	3304      	adds	r3, #4
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fe ff88 	bl	8008ff0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a0e0:	6a3b      	ldr	r3, [r7, #32]
 800a0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e4:	4b15      	ldr	r3, [pc, #84]	; (800a13c <xTaskResumeFromISR+0xe0>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d903      	bls.n	800a0f4 <xTaskResumeFromISR+0x98>
 800a0ec:	6a3b      	ldr	r3, [r7, #32]
 800a0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f0:	4a12      	ldr	r2, [pc, #72]	; (800a13c <xTaskResumeFromISR+0xe0>)
 800a0f2:	6013      	str	r3, [r2, #0]
 800a0f4:	6a3b      	ldr	r3, [r7, #32]
 800a0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	4413      	add	r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4a0f      	ldr	r2, [pc, #60]	; (800a140 <xTaskResumeFromISR+0xe4>)
 800a102:	441a      	add	r2, r3
 800a104:	6a3b      	ldr	r3, [r7, #32]
 800a106:	3304      	adds	r3, #4
 800a108:	4619      	mov	r1, r3
 800a10a:	4610      	mov	r0, r2
 800a10c:	f7fe ff13 	bl	8008f36 <vListInsertEnd>
 800a110:	e005      	b.n	800a11e <xTaskResumeFromISR+0xc2>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a112:	6a3b      	ldr	r3, [r7, #32]
 800a114:	3318      	adds	r3, #24
 800a116:	4619      	mov	r1, r3
 800a118:	480a      	ldr	r0, [pc, #40]	; (800a144 <xTaskResumeFromISR+0xe8>)
 800a11a:	f7fe ff0c 	bl	8008f36 <vListInsertEnd>
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f383 8811 	msr	BASEPRI, r3
}
 800a128:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3728      	adds	r7, #40	; 0x28
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	2000147c 	.word	0x2000147c
 800a138:	20000f80 	.word	0x20000f80
 800a13c:	2000145c 	.word	0x2000145c
 800a140:	20000f84 	.word	0x20000f84
 800a144:	20001414 	.word	0x20001414

0800a148 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b08a      	sub	sp, #40	; 0x28
 800a14c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a14e:	2300      	movs	r3, #0
 800a150:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a152:	2300      	movs	r3, #0
 800a154:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a156:	463a      	mov	r2, r7
 800a158:	1d39      	adds	r1, r7, #4
 800a15a:	f107 0308 	add.w	r3, r7, #8
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe fe88 	bl	8008e74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	68ba      	ldr	r2, [r7, #8]
 800a16a:	9202      	str	r2, [sp, #8]
 800a16c:	9301      	str	r3, [sp, #4]
 800a16e:	2300      	movs	r3, #0
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	2300      	movs	r3, #0
 800a174:	460a      	mov	r2, r1
 800a176:	4926      	ldr	r1, [pc, #152]	; (800a210 <vTaskStartScheduler+0xc8>)
 800a178:	4826      	ldr	r0, [pc, #152]	; (800a214 <vTaskStartScheduler+0xcc>)
 800a17a:	f7ff fc6d 	bl	8009a58 <xTaskCreateStatic>
 800a17e:	4603      	mov	r3, r0
 800a180:	4a25      	ldr	r2, [pc, #148]	; (800a218 <vTaskStartScheduler+0xd0>)
 800a182:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a184:	4b24      	ldr	r3, [pc, #144]	; (800a218 <vTaskStartScheduler+0xd0>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a18c:	2301      	movs	r3, #1
 800a18e:	617b      	str	r3, [r7, #20]
 800a190:	e001      	b.n	800a196 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a192:	2300      	movs	r3, #0
 800a194:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d102      	bne.n	800a1a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a19c:	f000 fd2a 	bl	800abf4 <xTimerCreateTimerTask>
 800a1a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d11d      	bne.n	800a1e4 <vTaskStartScheduler+0x9c>
	__asm volatile
 800a1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ac:	b672      	cpsid	i
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	b662      	cpsie	i
 800a1bc:	613b      	str	r3, [r7, #16]
}
 800a1be:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a1c0:	4b16      	ldr	r3, [pc, #88]	; (800a21c <vTaskStartScheduler+0xd4>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	3354      	adds	r3, #84	; 0x54
 800a1c6:	4a16      	ldr	r2, [pc, #88]	; (800a220 <vTaskStartScheduler+0xd8>)
 800a1c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a1ca:	4b16      	ldr	r3, [pc, #88]	; (800a224 <vTaskStartScheduler+0xdc>)
 800a1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a1d2:	4b15      	ldr	r3, [pc, #84]	; (800a228 <vTaskStartScheduler+0xe0>)
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a1d8:	4b14      	ldr	r3, [pc, #80]	; (800a22c <vTaskStartScheduler+0xe4>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a1de:	f001 f9b7 	bl	800b550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a1e2:	e010      	b.n	800a206 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ea:	d10c      	bne.n	800a206 <vTaskStartScheduler+0xbe>
	__asm volatile
 800a1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f0:	b672      	cpsid	i
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	b662      	cpsie	i
 800a200:	60fb      	str	r3, [r7, #12]
}
 800a202:	bf00      	nop
 800a204:	e7fe      	b.n	800a204 <vTaskStartScheduler+0xbc>
}
 800a206:	bf00      	nop
 800a208:	3718      	adds	r7, #24
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	0800ce18 	.word	0x0800ce18
 800a214:	0800a875 	.word	0x0800a875
 800a218:	20001478 	.word	0x20001478
 800a21c:	20000f80 	.word	0x20000f80
 800a220:	200000bc 	.word	0x200000bc
 800a224:	20001474 	.word	0x20001474
 800a228:	20001460 	.word	0x20001460
 800a22c:	20001458 	.word	0x20001458

0800a230 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a230:	b480      	push	{r7}
 800a232:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a234:	4b04      	ldr	r3, [pc, #16]	; (800a248 <vTaskSuspendAll+0x18>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	3301      	adds	r3, #1
 800a23a:	4a03      	ldr	r2, [pc, #12]	; (800a248 <vTaskSuspendAll+0x18>)
 800a23c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a23e:	bf00      	nop
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	2000147c 	.word	0x2000147c

0800a24c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a252:	2300      	movs	r3, #0
 800a254:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a256:	2300      	movs	r3, #0
 800a258:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a25a:	4b43      	ldr	r3, [pc, #268]	; (800a368 <xTaskResumeAll+0x11c>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10c      	bne.n	800a27c <xTaskResumeAll+0x30>
	__asm volatile
 800a262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a266:	b672      	cpsid	i
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	b662      	cpsie	i
 800a276:	603b      	str	r3, [r7, #0]
}
 800a278:	bf00      	nop
 800a27a:	e7fe      	b.n	800a27a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a27c:	f001 f9e6 	bl	800b64c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a280:	4b39      	ldr	r3, [pc, #228]	; (800a368 <xTaskResumeAll+0x11c>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	3b01      	subs	r3, #1
 800a286:	4a38      	ldr	r2, [pc, #224]	; (800a368 <xTaskResumeAll+0x11c>)
 800a288:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a28a:	4b37      	ldr	r3, [pc, #220]	; (800a368 <xTaskResumeAll+0x11c>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d162      	bne.n	800a358 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a292:	4b36      	ldr	r3, [pc, #216]	; (800a36c <xTaskResumeAll+0x120>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d05e      	beq.n	800a358 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a29a:	e02f      	b.n	800a2fc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a29c:	4b34      	ldr	r3, [pc, #208]	; (800a370 <xTaskResumeAll+0x124>)
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	3318      	adds	r3, #24
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7fe fea1 	bl	8008ff0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3304      	adds	r3, #4
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe fe9c 	bl	8008ff0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2bc:	4b2d      	ldr	r3, [pc, #180]	; (800a374 <xTaskResumeAll+0x128>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d903      	bls.n	800a2cc <xTaskResumeAll+0x80>
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c8:	4a2a      	ldr	r2, [pc, #168]	; (800a374 <xTaskResumeAll+0x128>)
 800a2ca:	6013      	str	r3, [r2, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4413      	add	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	4a27      	ldr	r2, [pc, #156]	; (800a378 <xTaskResumeAll+0x12c>)
 800a2da:	441a      	add	r2, r3
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	3304      	adds	r3, #4
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	4610      	mov	r0, r2
 800a2e4:	f7fe fe27 	bl	8008f36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ec:	4b23      	ldr	r3, [pc, #140]	; (800a37c <xTaskResumeAll+0x130>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d302      	bcc.n	800a2fc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800a2f6:	4b22      	ldr	r3, [pc, #136]	; (800a380 <xTaskResumeAll+0x134>)
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2fc:	4b1c      	ldr	r3, [pc, #112]	; (800a370 <xTaskResumeAll+0x124>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d1cb      	bne.n	800a29c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d001      	beq.n	800a30e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a30a:	f000 fb6f 	bl	800a9ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a30e:	4b1d      	ldr	r3, [pc, #116]	; (800a384 <xTaskResumeAll+0x138>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d010      	beq.n	800a33c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a31a:	f000 f847 	bl	800a3ac <xTaskIncrementTick>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800a324:	4b16      	ldr	r3, [pc, #88]	; (800a380 <xTaskResumeAll+0x134>)
 800a326:	2201      	movs	r2, #1
 800a328:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	3b01      	subs	r3, #1
 800a32e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1f1      	bne.n	800a31a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800a336:	4b13      	ldr	r3, [pc, #76]	; (800a384 <xTaskResumeAll+0x138>)
 800a338:	2200      	movs	r2, #0
 800a33a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a33c:	4b10      	ldr	r3, [pc, #64]	; (800a380 <xTaskResumeAll+0x134>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d009      	beq.n	800a358 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a344:	2301      	movs	r3, #1
 800a346:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a348:	4b0f      	ldr	r3, [pc, #60]	; (800a388 <xTaskResumeAll+0x13c>)
 800a34a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a34e:	601a      	str	r2, [r3, #0]
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a358:	f001 f9ac 	bl	800b6b4 <vPortExitCritical>

	return xAlreadyYielded;
 800a35c:	68bb      	ldr	r3, [r7, #8]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	2000147c 	.word	0x2000147c
 800a36c:	20001454 	.word	0x20001454
 800a370:	20001414 	.word	0x20001414
 800a374:	2000145c 	.word	0x2000145c
 800a378:	20000f84 	.word	0x20000f84
 800a37c:	20000f80 	.word	0x20000f80
 800a380:	20001468 	.word	0x20001468
 800a384:	20001464 	.word	0x20001464
 800a388:	e000ed04 	.word	0xe000ed04

0800a38c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a392:	4b05      	ldr	r3, [pc, #20]	; (800a3a8 <xTaskGetTickCount+0x1c>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a398:	687b      	ldr	r3, [r7, #4]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	20001458 	.word	0x20001458

0800a3ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3b6:	4b50      	ldr	r3, [pc, #320]	; (800a4f8 <xTaskIncrementTick+0x14c>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f040 808b 	bne.w	800a4d6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a3c0:	4b4e      	ldr	r3, [pc, #312]	; (800a4fc <xTaskIncrementTick+0x150>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a3c8:	4a4c      	ldr	r2, [pc, #304]	; (800a4fc <xTaskIncrementTick+0x150>)
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d122      	bne.n	800a41a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a3d4:	4b4a      	ldr	r3, [pc, #296]	; (800a500 <xTaskIncrementTick+0x154>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00c      	beq.n	800a3f8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800a3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e2:	b672      	cpsid	i
 800a3e4:	f383 8811 	msr	BASEPRI, r3
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	f3bf 8f4f 	dsb	sy
 800a3f0:	b662      	cpsie	i
 800a3f2:	603b      	str	r3, [r7, #0]
}
 800a3f4:	bf00      	nop
 800a3f6:	e7fe      	b.n	800a3f6 <xTaskIncrementTick+0x4a>
 800a3f8:	4b41      	ldr	r3, [pc, #260]	; (800a500 <xTaskIncrementTick+0x154>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	60fb      	str	r3, [r7, #12]
 800a3fe:	4b41      	ldr	r3, [pc, #260]	; (800a504 <xTaskIncrementTick+0x158>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a3f      	ldr	r2, [pc, #252]	; (800a500 <xTaskIncrementTick+0x154>)
 800a404:	6013      	str	r3, [r2, #0]
 800a406:	4a3f      	ldr	r2, [pc, #252]	; (800a504 <xTaskIncrementTick+0x158>)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6013      	str	r3, [r2, #0]
 800a40c:	4b3e      	ldr	r3, [pc, #248]	; (800a508 <xTaskIncrementTick+0x15c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3301      	adds	r3, #1
 800a412:	4a3d      	ldr	r2, [pc, #244]	; (800a508 <xTaskIncrementTick+0x15c>)
 800a414:	6013      	str	r3, [r2, #0]
 800a416:	f000 fae9 	bl	800a9ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a41a:	4b3c      	ldr	r3, [pc, #240]	; (800a50c <xTaskIncrementTick+0x160>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	693a      	ldr	r2, [r7, #16]
 800a420:	429a      	cmp	r2, r3
 800a422:	d349      	bcc.n	800a4b8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a424:	4b36      	ldr	r3, [pc, #216]	; (800a500 <xTaskIncrementTick+0x154>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d104      	bne.n	800a438 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a42e:	4b37      	ldr	r3, [pc, #220]	; (800a50c <xTaskIncrementTick+0x160>)
 800a430:	f04f 32ff 	mov.w	r2, #4294967295
 800a434:	601a      	str	r2, [r3, #0]
					break;
 800a436:	e03f      	b.n	800a4b8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a438:	4b31      	ldr	r3, [pc, #196]	; (800a500 <xTaskIncrementTick+0x154>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a448:	693a      	ldr	r2, [r7, #16]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d203      	bcs.n	800a458 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a450:	4a2e      	ldr	r2, [pc, #184]	; (800a50c <xTaskIncrementTick+0x160>)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a456:	e02f      	b.n	800a4b8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	3304      	adds	r3, #4
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fe fdc7 	bl	8008ff0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a466:	2b00      	cmp	r3, #0
 800a468:	d004      	beq.n	800a474 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	3318      	adds	r3, #24
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fe fdbe 	bl	8008ff0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a478:	4b25      	ldr	r3, [pc, #148]	; (800a510 <xTaskIncrementTick+0x164>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d903      	bls.n	800a488 <xTaskIncrementTick+0xdc>
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a484:	4a22      	ldr	r2, [pc, #136]	; (800a510 <xTaskIncrementTick+0x164>)
 800a486:	6013      	str	r3, [r2, #0]
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a48c:	4613      	mov	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4413      	add	r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4a1f      	ldr	r2, [pc, #124]	; (800a514 <xTaskIncrementTick+0x168>)
 800a496:	441a      	add	r2, r3
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	3304      	adds	r3, #4
 800a49c:	4619      	mov	r1, r3
 800a49e:	4610      	mov	r0, r2
 800a4a0:	f7fe fd49 	bl	8008f36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a8:	4b1b      	ldr	r3, [pc, #108]	; (800a518 <xTaskIncrementTick+0x16c>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d3b8      	bcc.n	800a424 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4b6:	e7b5      	b.n	800a424 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a4b8:	4b17      	ldr	r3, [pc, #92]	; (800a518 <xTaskIncrementTick+0x16c>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4be:	4915      	ldr	r1, [pc, #84]	; (800a514 <xTaskIncrementTick+0x168>)
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4413      	add	r3, r2
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	440b      	add	r3, r1
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d907      	bls.n	800a4e0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	617b      	str	r3, [r7, #20]
 800a4d4:	e004      	b.n	800a4e0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a4d6:	4b11      	ldr	r3, [pc, #68]	; (800a51c <xTaskIncrementTick+0x170>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	4a0f      	ldr	r2, [pc, #60]	; (800a51c <xTaskIncrementTick+0x170>)
 800a4de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a4e0:	4b0f      	ldr	r3, [pc, #60]	; (800a520 <xTaskIncrementTick+0x174>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d001      	beq.n	800a4ec <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a4ec:	697b      	ldr	r3, [r7, #20]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3718      	adds	r7, #24
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	2000147c 	.word	0x2000147c
 800a4fc:	20001458 	.word	0x20001458
 800a500:	2000140c 	.word	0x2000140c
 800a504:	20001410 	.word	0x20001410
 800a508:	2000146c 	.word	0x2000146c
 800a50c:	20001474 	.word	0x20001474
 800a510:	2000145c 	.word	0x2000145c
 800a514:	20000f84 	.word	0x20000f84
 800a518:	20000f80 	.word	0x20000f80
 800a51c:	20001464 	.word	0x20001464
 800a520:	20001468 	.word	0x20001468

0800a524 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a52a:	4b2b      	ldr	r3, [pc, #172]	; (800a5d8 <vTaskSwitchContext+0xb4>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d003      	beq.n	800a53a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a532:	4b2a      	ldr	r3, [pc, #168]	; (800a5dc <vTaskSwitchContext+0xb8>)
 800a534:	2201      	movs	r2, #1
 800a536:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a538:	e048      	b.n	800a5cc <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800a53a:	4b28      	ldr	r3, [pc, #160]	; (800a5dc <vTaskSwitchContext+0xb8>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a540:	4b27      	ldr	r3, [pc, #156]	; (800a5e0 <vTaskSwitchContext+0xbc>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	60fb      	str	r3, [r7, #12]
 800a546:	e012      	b.n	800a56e <vTaskSwitchContext+0x4a>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10c      	bne.n	800a568 <vTaskSwitchContext+0x44>
	__asm volatile
 800a54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a552:	b672      	cpsid	i
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	b662      	cpsie	i
 800a562:	607b      	str	r3, [r7, #4]
}
 800a564:	bf00      	nop
 800a566:	e7fe      	b.n	800a566 <vTaskSwitchContext+0x42>
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	3b01      	subs	r3, #1
 800a56c:	60fb      	str	r3, [r7, #12]
 800a56e:	491d      	ldr	r1, [pc, #116]	; (800a5e4 <vTaskSwitchContext+0xc0>)
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	4613      	mov	r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	4413      	add	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	440b      	add	r3, r1
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d0e2      	beq.n	800a548 <vTaskSwitchContext+0x24>
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	4613      	mov	r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	4413      	add	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4a15      	ldr	r2, [pc, #84]	; (800a5e4 <vTaskSwitchContext+0xc0>)
 800a58e:	4413      	add	r3, r2
 800a590:	60bb      	str	r3, [r7, #8]
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	685a      	ldr	r2, [r3, #4]
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	605a      	str	r2, [r3, #4]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	3308      	adds	r3, #8
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d104      	bne.n	800a5b2 <vTaskSwitchContext+0x8e>
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	605a      	str	r2, [r3, #4]
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	4a0b      	ldr	r2, [pc, #44]	; (800a5e8 <vTaskSwitchContext+0xc4>)
 800a5ba:	6013      	str	r3, [r2, #0]
 800a5bc:	4a08      	ldr	r2, [pc, #32]	; (800a5e0 <vTaskSwitchContext+0xbc>)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a5c2:	4b09      	ldr	r3, [pc, #36]	; (800a5e8 <vTaskSwitchContext+0xc4>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	3354      	adds	r3, #84	; 0x54
 800a5c8:	4a08      	ldr	r2, [pc, #32]	; (800a5ec <vTaskSwitchContext+0xc8>)
 800a5ca:	6013      	str	r3, [r2, #0]
}
 800a5cc:	bf00      	nop
 800a5ce:	3714      	adds	r7, #20
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	2000147c 	.word	0x2000147c
 800a5dc:	20001468 	.word	0x20001468
 800a5e0:	2000145c 	.word	0x2000145c
 800a5e4:	20000f84 	.word	0x20000f84
 800a5e8:	20000f80 	.word	0x20000f80
 800a5ec:	200000bc 	.word	0x200000bc

0800a5f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10c      	bne.n	800a61a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	b672      	cpsid	i
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	b662      	cpsie	i
 800a614:	60fb      	str	r3, [r7, #12]
}
 800a616:	bf00      	nop
 800a618:	e7fe      	b.n	800a618 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a61a:	4b07      	ldr	r3, [pc, #28]	; (800a638 <vTaskPlaceOnEventList+0x48>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3318      	adds	r3, #24
 800a620:	4619      	mov	r1, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7fe fcab 	bl	8008f7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a628:	2101      	movs	r1, #1
 800a62a:	6838      	ldr	r0, [r7, #0]
 800a62c:	f000 fa8e 	bl	800ab4c <prvAddCurrentTaskToDelayedList>
}
 800a630:	bf00      	nop
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	20000f80 	.word	0x20000f80

0800a63c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10c      	bne.n	800a668 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a652:	b672      	cpsid	i
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	b662      	cpsie	i
 800a662:	617b      	str	r3, [r7, #20]
}
 800a664:	bf00      	nop
 800a666:	e7fe      	b.n	800a666 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a668:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <vTaskPlaceOnEventListRestricted+0x58>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3318      	adds	r3, #24
 800a66e:	4619      	mov	r1, r3
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f7fe fc60 	bl	8008f36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d002      	beq.n	800a682 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800a67c:	f04f 33ff 	mov.w	r3, #4294967295
 800a680:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a682:	6879      	ldr	r1, [r7, #4]
 800a684:	68b8      	ldr	r0, [r7, #8]
 800a686:	f000 fa61 	bl	800ab4c <prvAddCurrentTaskToDelayedList>
	}
 800a68a:	bf00      	nop
 800a68c:	3718      	adds	r7, #24
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	20000f80 	.word	0x20000f80

0800a698 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10c      	bne.n	800a6c8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b2:	b672      	cpsid	i
 800a6b4:	f383 8811 	msr	BASEPRI, r3
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	b662      	cpsie	i
 800a6c2:	60fb      	str	r3, [r7, #12]
}
 800a6c4:	bf00      	nop
 800a6c6:	e7fe      	b.n	800a6c6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	3318      	adds	r3, #24
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fe fc8f 	bl	8008ff0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6d2:	4b1e      	ldr	r3, [pc, #120]	; (800a74c <xTaskRemoveFromEventList+0xb4>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d11d      	bne.n	800a716 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	3304      	adds	r3, #4
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fe fc86 	bl	8008ff0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e8:	4b19      	ldr	r3, [pc, #100]	; (800a750 <xTaskRemoveFromEventList+0xb8>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d903      	bls.n	800a6f8 <xTaskRemoveFromEventList+0x60>
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f4:	4a16      	ldr	r2, [pc, #88]	; (800a750 <xTaskRemoveFromEventList+0xb8>)
 800a6f6:	6013      	str	r3, [r2, #0]
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4413      	add	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4a13      	ldr	r2, [pc, #76]	; (800a754 <xTaskRemoveFromEventList+0xbc>)
 800a706:	441a      	add	r2, r3
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	3304      	adds	r3, #4
 800a70c:	4619      	mov	r1, r3
 800a70e:	4610      	mov	r0, r2
 800a710:	f7fe fc11 	bl	8008f36 <vListInsertEnd>
 800a714:	e005      	b.n	800a722 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	3318      	adds	r3, #24
 800a71a:	4619      	mov	r1, r3
 800a71c:	480e      	ldr	r0, [pc, #56]	; (800a758 <xTaskRemoveFromEventList+0xc0>)
 800a71e:	f7fe fc0a 	bl	8008f36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a726:	4b0d      	ldr	r3, [pc, #52]	; (800a75c <xTaskRemoveFromEventList+0xc4>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d905      	bls.n	800a73c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a730:	2301      	movs	r3, #1
 800a732:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a734:	4b0a      	ldr	r3, [pc, #40]	; (800a760 <xTaskRemoveFromEventList+0xc8>)
 800a736:	2201      	movs	r2, #1
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	e001      	b.n	800a740 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800a73c:	2300      	movs	r3, #0
 800a73e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a740:	697b      	ldr	r3, [r7, #20]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3718      	adds	r7, #24
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	2000147c 	.word	0x2000147c
 800a750:	2000145c 	.word	0x2000145c
 800a754:	20000f84 	.word	0x20000f84
 800a758:	20001414 	.word	0x20001414
 800a75c:	20000f80 	.word	0x20000f80
 800a760:	20001468 	.word	0x20001468

0800a764 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a76c:	4b06      	ldr	r3, [pc, #24]	; (800a788 <vTaskInternalSetTimeOutState+0x24>)
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a774:	4b05      	ldr	r3, [pc, #20]	; (800a78c <vTaskInternalSetTimeOutState+0x28>)
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	605a      	str	r2, [r3, #4]
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr
 800a788:	2000146c 	.word	0x2000146c
 800a78c:	20001458 	.word	0x20001458

0800a790 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b088      	sub	sp, #32
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d10c      	bne.n	800a7ba <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a4:	b672      	cpsid	i
 800a7a6:	f383 8811 	msr	BASEPRI, r3
 800a7aa:	f3bf 8f6f 	isb	sy
 800a7ae:	f3bf 8f4f 	dsb	sy
 800a7b2:	b662      	cpsie	i
 800a7b4:	613b      	str	r3, [r7, #16]
}
 800a7b6:	bf00      	nop
 800a7b8:	e7fe      	b.n	800a7b8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10c      	bne.n	800a7da <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c4:	b672      	cpsid	i
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	b662      	cpsie	i
 800a7d4:	60fb      	str	r3, [r7, #12]
}
 800a7d6:	bf00      	nop
 800a7d8:	e7fe      	b.n	800a7d8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a7da:	f000 ff37 	bl	800b64c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a7de:	4b1d      	ldr	r3, [pc, #116]	; (800a854 <xTaskCheckForTimeOut+0xc4>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	69ba      	ldr	r2, [r7, #24]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f6:	d102      	bne.n	800a7fe <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	61fb      	str	r3, [r7, #28]
 800a7fc:	e023      	b.n	800a846 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	4b15      	ldr	r3, [pc, #84]	; (800a858 <xTaskCheckForTimeOut+0xc8>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	429a      	cmp	r2, r3
 800a808:	d007      	beq.n	800a81a <xTaskCheckForTimeOut+0x8a>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	69ba      	ldr	r2, [r7, #24]
 800a810:	429a      	cmp	r2, r3
 800a812:	d302      	bcc.n	800a81a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a814:	2301      	movs	r3, #1
 800a816:	61fb      	str	r3, [r7, #28]
 800a818:	e015      	b.n	800a846 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	697a      	ldr	r2, [r7, #20]
 800a820:	429a      	cmp	r2, r3
 800a822:	d20b      	bcs.n	800a83c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	1ad2      	subs	r2, r2, r3
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f7ff ff97 	bl	800a764 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a836:	2300      	movs	r3, #0
 800a838:	61fb      	str	r3, [r7, #28]
 800a83a:	e004      	b.n	800a846 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	2200      	movs	r2, #0
 800a840:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a842:	2301      	movs	r3, #1
 800a844:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a846:	f000 ff35 	bl	800b6b4 <vPortExitCritical>

	return xReturn;
 800a84a:	69fb      	ldr	r3, [r7, #28]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3720      	adds	r7, #32
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	20001458 	.word	0x20001458
 800a858:	2000146c 	.word	0x2000146c

0800a85c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a85c:	b480      	push	{r7}
 800a85e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a860:	4b03      	ldr	r3, [pc, #12]	; (800a870 <vTaskMissedYield+0x14>)
 800a862:	2201      	movs	r2, #1
 800a864:	601a      	str	r2, [r3, #0]
}
 800a866:	bf00      	nop
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr
 800a870:	20001468 	.word	0x20001468

0800a874 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a87c:	f000 f852 	bl	800a924 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a880:	4b06      	ldr	r3, [pc, #24]	; (800a89c <prvIdleTask+0x28>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d9f9      	bls.n	800a87c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a888:	4b05      	ldr	r3, [pc, #20]	; (800a8a0 <prvIdleTask+0x2c>)
 800a88a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a88e:	601a      	str	r2, [r3, #0]
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a898:	e7f0      	b.n	800a87c <prvIdleTask+0x8>
 800a89a:	bf00      	nop
 800a89c:	20000f84 	.word	0x20000f84
 800a8a0:	e000ed04 	.word	0xe000ed04

0800a8a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	607b      	str	r3, [r7, #4]
 800a8ae:	e00c      	b.n	800a8ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	4413      	add	r3, r2
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	4a12      	ldr	r2, [pc, #72]	; (800a904 <prvInitialiseTaskLists+0x60>)
 800a8bc:	4413      	add	r3, r2
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7fe fb0c 	bl	8008edc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	607b      	str	r3, [r7, #4]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2b37      	cmp	r3, #55	; 0x37
 800a8ce:	d9ef      	bls.n	800a8b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a8d0:	480d      	ldr	r0, [pc, #52]	; (800a908 <prvInitialiseTaskLists+0x64>)
 800a8d2:	f7fe fb03 	bl	8008edc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a8d6:	480d      	ldr	r0, [pc, #52]	; (800a90c <prvInitialiseTaskLists+0x68>)
 800a8d8:	f7fe fb00 	bl	8008edc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a8dc:	480c      	ldr	r0, [pc, #48]	; (800a910 <prvInitialiseTaskLists+0x6c>)
 800a8de:	f7fe fafd 	bl	8008edc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a8e2:	480c      	ldr	r0, [pc, #48]	; (800a914 <prvInitialiseTaskLists+0x70>)
 800a8e4:	f7fe fafa 	bl	8008edc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a8e8:	480b      	ldr	r0, [pc, #44]	; (800a918 <prvInitialiseTaskLists+0x74>)
 800a8ea:	f7fe faf7 	bl	8008edc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a8ee:	4b0b      	ldr	r3, [pc, #44]	; (800a91c <prvInitialiseTaskLists+0x78>)
 800a8f0:	4a05      	ldr	r2, [pc, #20]	; (800a908 <prvInitialiseTaskLists+0x64>)
 800a8f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a8f4:	4b0a      	ldr	r3, [pc, #40]	; (800a920 <prvInitialiseTaskLists+0x7c>)
 800a8f6:	4a05      	ldr	r2, [pc, #20]	; (800a90c <prvInitialiseTaskLists+0x68>)
 800a8f8:	601a      	str	r2, [r3, #0]
}
 800a8fa:	bf00      	nop
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	20000f84 	.word	0x20000f84
 800a908:	200013e4 	.word	0x200013e4
 800a90c:	200013f8 	.word	0x200013f8
 800a910:	20001414 	.word	0x20001414
 800a914:	20001428 	.word	0x20001428
 800a918:	20001440 	.word	0x20001440
 800a91c:	2000140c 	.word	0x2000140c
 800a920:	20001410 	.word	0x20001410

0800a924 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a92a:	e019      	b.n	800a960 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a92c:	f000 fe8e 	bl	800b64c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a930:	4b10      	ldr	r3, [pc, #64]	; (800a974 <prvCheckTasksWaitingTermination+0x50>)
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	3304      	adds	r3, #4
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7fe fb57 	bl	8008ff0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a942:	4b0d      	ldr	r3, [pc, #52]	; (800a978 <prvCheckTasksWaitingTermination+0x54>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	3b01      	subs	r3, #1
 800a948:	4a0b      	ldr	r2, [pc, #44]	; (800a978 <prvCheckTasksWaitingTermination+0x54>)
 800a94a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a94c:	4b0b      	ldr	r3, [pc, #44]	; (800a97c <prvCheckTasksWaitingTermination+0x58>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	3b01      	subs	r3, #1
 800a952:	4a0a      	ldr	r2, [pc, #40]	; (800a97c <prvCheckTasksWaitingTermination+0x58>)
 800a954:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a956:	f000 fead 	bl	800b6b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f810 	bl	800a980 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a960:	4b06      	ldr	r3, [pc, #24]	; (800a97c <prvCheckTasksWaitingTermination+0x58>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1e1      	bne.n	800a92c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a968:	bf00      	nop
 800a96a:	bf00      	nop
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	20001428 	.word	0x20001428
 800a978:	20001454 	.word	0x20001454
 800a97c:	2000143c 	.word	0x2000143c

0800a980 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	3354      	adds	r3, #84	; 0x54
 800a98c:	4618      	mov	r0, r3
 800a98e:	f001 fa99 	bl	800bec4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d108      	bne.n	800a9ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f001 f849 	bl	800ba38 <vPortFree>
				vPortFree( pxTCB );
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f001 f846 	bl	800ba38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a9ac:	e01a      	b.n	800a9e4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d103      	bne.n	800a9c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f001 f83d 	bl	800ba38 <vPortFree>
	}
 800a9be:	e011      	b.n	800a9e4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d00c      	beq.n	800a9e4 <prvDeleteTCB+0x64>
	__asm volatile
 800a9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ce:	b672      	cpsid	i
 800a9d0:	f383 8811 	msr	BASEPRI, r3
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	b662      	cpsie	i
 800a9de:	60fb      	str	r3, [r7, #12]
}
 800a9e0:	bf00      	nop
 800a9e2:	e7fe      	b.n	800a9e2 <prvDeleteTCB+0x62>
	}
 800a9e4:	bf00      	nop
 800a9e6:	3710      	adds	r7, #16
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9f2:	4b0c      	ldr	r3, [pc, #48]	; (800aa24 <prvResetNextTaskUnblockTime+0x38>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d104      	bne.n	800aa06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a9fc:	4b0a      	ldr	r3, [pc, #40]	; (800aa28 <prvResetNextTaskUnblockTime+0x3c>)
 800a9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800aa02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa04:	e008      	b.n	800aa18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa06:	4b07      	ldr	r3, [pc, #28]	; (800aa24 <prvResetNextTaskUnblockTime+0x38>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	4a04      	ldr	r2, [pc, #16]	; (800aa28 <prvResetNextTaskUnblockTime+0x3c>)
 800aa16:	6013      	str	r3, [r2, #0]
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	2000140c 	.word	0x2000140c
 800aa28:	20001474 	.word	0x20001474

0800aa2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa32:	4b0b      	ldr	r3, [pc, #44]	; (800aa60 <xTaskGetSchedulerState+0x34>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d102      	bne.n	800aa40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	607b      	str	r3, [r7, #4]
 800aa3e:	e008      	b.n	800aa52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa40:	4b08      	ldr	r3, [pc, #32]	; (800aa64 <xTaskGetSchedulerState+0x38>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d102      	bne.n	800aa4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa48:	2302      	movs	r3, #2
 800aa4a:	607b      	str	r3, [r7, #4]
 800aa4c:	e001      	b.n	800aa52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa52:	687b      	ldr	r3, [r7, #4]
	}
 800aa54:	4618      	mov	r0, r3
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr
 800aa60:	20001460 	.word	0x20001460
 800aa64:	2000147c 	.word	0x2000147c

0800aa68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b086      	sub	sp, #24
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa74:	2300      	movs	r3, #0
 800aa76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d05a      	beq.n	800ab34 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa7e:	4b30      	ldr	r3, [pc, #192]	; (800ab40 <xTaskPriorityDisinherit+0xd8>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d00c      	beq.n	800aaa2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8c:	b672      	cpsid	i
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	b662      	cpsie	i
 800aa9c:	60fb      	str	r3, [r7, #12]
}
 800aa9e:	bf00      	nop
 800aaa0:	e7fe      	b.n	800aaa0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10c      	bne.n	800aac4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800aaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaae:	b672      	cpsid	i
 800aab0:	f383 8811 	msr	BASEPRI, r3
 800aab4:	f3bf 8f6f 	isb	sy
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	b662      	cpsie	i
 800aabe:	60bb      	str	r3, [r7, #8]
}
 800aac0:	bf00      	nop
 800aac2:	e7fe      	b.n	800aac2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aac8:	1e5a      	subs	r2, r3, #1
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d02c      	beq.n	800ab34 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d128      	bne.n	800ab34 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	3304      	adds	r3, #4
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fe fa82 	bl	8008ff0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab04:	4b0f      	ldr	r3, [pc, #60]	; (800ab44 <xTaskPriorityDisinherit+0xdc>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d903      	bls.n	800ab14 <xTaskPriorityDisinherit+0xac>
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab10:	4a0c      	ldr	r2, [pc, #48]	; (800ab44 <xTaskPriorityDisinherit+0xdc>)
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab18:	4613      	mov	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4413      	add	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4a09      	ldr	r2, [pc, #36]	; (800ab48 <xTaskPriorityDisinherit+0xe0>)
 800ab22:	441a      	add	r2, r3
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	3304      	adds	r3, #4
 800ab28:	4619      	mov	r1, r3
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	f7fe fa03 	bl	8008f36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab30:	2301      	movs	r3, #1
 800ab32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab34:	697b      	ldr	r3, [r7, #20]
	}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3718      	adds	r7, #24
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	20000f80 	.word	0x20000f80
 800ab44:	2000145c 	.word	0x2000145c
 800ab48:	20000f84 	.word	0x20000f84

0800ab4c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab56:	4b21      	ldr	r3, [pc, #132]	; (800abdc <prvAddCurrentTaskToDelayedList+0x90>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab5c:	4b20      	ldr	r3, [pc, #128]	; (800abe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	3304      	adds	r3, #4
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fe fa44 	bl	8008ff0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6e:	d10a      	bne.n	800ab86 <prvAddCurrentTaskToDelayedList+0x3a>
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d007      	beq.n	800ab86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab76:	4b1a      	ldr	r3, [pc, #104]	; (800abe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	3304      	adds	r3, #4
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	4819      	ldr	r0, [pc, #100]	; (800abe4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ab80:	f7fe f9d9 	bl	8008f36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab84:	e026      	b.n	800abd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab8e:	4b14      	ldr	r3, [pc, #80]	; (800abe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	68ba      	ldr	r2, [r7, #8]
 800ab94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab96:	68ba      	ldr	r2, [r7, #8]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d209      	bcs.n	800abb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab9e:	4b12      	ldr	r3, [pc, #72]	; (800abe8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	4b0f      	ldr	r3, [pc, #60]	; (800abe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	3304      	adds	r3, #4
 800aba8:	4619      	mov	r1, r3
 800abaa:	4610      	mov	r0, r2
 800abac:	f7fe f9e7 	bl	8008f7e <vListInsert>
}
 800abb0:	e010      	b.n	800abd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abb2:	4b0e      	ldr	r3, [pc, #56]	; (800abec <prvAddCurrentTaskToDelayedList+0xa0>)
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	4b0a      	ldr	r3, [pc, #40]	; (800abe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3304      	adds	r3, #4
 800abbc:	4619      	mov	r1, r3
 800abbe:	4610      	mov	r0, r2
 800abc0:	f7fe f9dd 	bl	8008f7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800abc4:	4b0a      	ldr	r3, [pc, #40]	; (800abf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	68ba      	ldr	r2, [r7, #8]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d202      	bcs.n	800abd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800abce:	4a08      	ldr	r2, [pc, #32]	; (800abf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	6013      	str	r3, [r2, #0]
}
 800abd4:	bf00      	nop
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	20001458 	.word	0x20001458
 800abe0:	20000f80 	.word	0x20000f80
 800abe4:	20001440 	.word	0x20001440
 800abe8:	20001410 	.word	0x20001410
 800abec:	2000140c 	.word	0x2000140c
 800abf0:	20001474 	.word	0x20001474

0800abf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b08a      	sub	sp, #40	; 0x28
 800abf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800abfa:	2300      	movs	r3, #0
 800abfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800abfe:	f000 fbb5 	bl	800b36c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac02:	4b1d      	ldr	r3, [pc, #116]	; (800ac78 <xTimerCreateTimerTask+0x84>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d021      	beq.n	800ac4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac12:	1d3a      	adds	r2, r7, #4
 800ac14:	f107 0108 	add.w	r1, r7, #8
 800ac18:	f107 030c 	add.w	r3, r7, #12
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7fe f943 	bl	8008ea8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac22:	6879      	ldr	r1, [r7, #4]
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	9202      	str	r2, [sp, #8]
 800ac2a:	9301      	str	r3, [sp, #4]
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	2300      	movs	r3, #0
 800ac32:	460a      	mov	r2, r1
 800ac34:	4911      	ldr	r1, [pc, #68]	; (800ac7c <xTimerCreateTimerTask+0x88>)
 800ac36:	4812      	ldr	r0, [pc, #72]	; (800ac80 <xTimerCreateTimerTask+0x8c>)
 800ac38:	f7fe ff0e 	bl	8009a58 <xTaskCreateStatic>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	4a11      	ldr	r2, [pc, #68]	; (800ac84 <xTimerCreateTimerTask+0x90>)
 800ac40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ac42:	4b10      	ldr	r3, [pc, #64]	; (800ac84 <xTimerCreateTimerTask+0x90>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d001      	beq.n	800ac4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10c      	bne.n	800ac6e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800ac54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac58:	b672      	cpsid	i
 800ac5a:	f383 8811 	msr	BASEPRI, r3
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	b662      	cpsie	i
 800ac68:	613b      	str	r3, [r7, #16]
}
 800ac6a:	bf00      	nop
 800ac6c:	e7fe      	b.n	800ac6c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800ac6e:	697b      	ldr	r3, [r7, #20]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3718      	adds	r7, #24
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	200014b0 	.word	0x200014b0
 800ac7c:	0800ce20 	.word	0x0800ce20
 800ac80:	0800af05 	.word	0x0800af05
 800ac84:	200014b4 	.word	0x200014b4

0800ac88 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b088      	sub	sp, #32
 800ac8c:	af02      	add	r7, sp, #8
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
 800ac94:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ac96:	202c      	movs	r0, #44	; 0x2c
 800ac98:	f000 fe04 	bl	800b8a4 <pvPortMalloc>
 800ac9c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00d      	beq.n	800acc0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	9301      	str	r3, [sp, #4]
 800acb0:	6a3b      	ldr	r3, [r7, #32]
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	68b9      	ldr	r1, [r7, #8]
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f000 f847 	bl	800ad4e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800acc0:	697b      	ldr	r3, [r7, #20]
	}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3718      	adds	r7, #24
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800acca:	b580      	push	{r7, lr}
 800accc:	b08a      	sub	sp, #40	; 0x28
 800acce:	af02      	add	r7, sp, #8
 800acd0:	60f8      	str	r0, [r7, #12]
 800acd2:	60b9      	str	r1, [r7, #8]
 800acd4:	607a      	str	r2, [r7, #4]
 800acd6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800acd8:	232c      	movs	r3, #44	; 0x2c
 800acda:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	2b2c      	cmp	r3, #44	; 0x2c
 800ace0:	d00c      	beq.n	800acfc <xTimerCreateStatic+0x32>
	__asm volatile
 800ace2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace6:	b672      	cpsid	i
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	b662      	cpsie	i
 800acf6:	61bb      	str	r3, [r7, #24]
}
 800acf8:	bf00      	nop
 800acfa:	e7fe      	b.n	800acfa <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800acfc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800acfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10c      	bne.n	800ad1e <xTimerCreateStatic+0x54>
	__asm volatile
 800ad04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad08:	b672      	cpsid	i
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	b662      	cpsie	i
 800ad18:	617b      	str	r3, [r7, #20]
}
 800ad1a:	bf00      	nop
 800ad1c:	e7fe      	b.n	800ad1c <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800ad1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad20:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00d      	beq.n	800ad44 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	2202      	movs	r2, #2
 800ad2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	9301      	str	r3, [sp, #4]
 800ad34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	68b9      	ldr	r1, [r7, #8]
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f000 f805 	bl	800ad4e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ad44:	69fb      	ldr	r3, [r7, #28]
	}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3720      	adds	r7, #32
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b086      	sub	sp, #24
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	60f8      	str	r0, [r7, #12]
 800ad56:	60b9      	str	r1, [r7, #8]
 800ad58:	607a      	str	r2, [r7, #4]
 800ad5a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d10c      	bne.n	800ad7c <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800ad62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad66:	b672      	cpsid	i
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	b662      	cpsie	i
 800ad76:	617b      	str	r3, [r7, #20]
}
 800ad78:	bf00      	nop
 800ad7a:	e7fe      	b.n	800ad7a <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d01e      	beq.n	800adc0 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ad82:	f000 faf3 	bl	800b36c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8e:	68ba      	ldr	r2, [r7, #8]
 800ad90:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ad92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad94:	683a      	ldr	r2, [r7, #0]
 800ad96:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ad98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9a:	6a3a      	ldr	r2, [r7, #32]
 800ad9c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada0:	3304      	adds	r3, #4
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fe f8ba 	bl	8008f1c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d008      	beq.n	800adc0 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800adae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adb4:	f043 0304 	orr.w	r3, r3, #4
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800adc0:	bf00      	nop
 800adc2:	3718      	adds	r7, #24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b08a      	sub	sp, #40	; 0x28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
 800add4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800add6:	2300      	movs	r3, #0
 800add8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d10c      	bne.n	800adfa <xTimerGenericCommand+0x32>
	__asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade4:	b672      	cpsid	i
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	b662      	cpsie	i
 800adf4:	623b      	str	r3, [r7, #32]
}
 800adf6:	bf00      	nop
 800adf8:	e7fe      	b.n	800adf8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800adfa:	4b1a      	ldr	r3, [pc, #104]	; (800ae64 <xTimerGenericCommand+0x9c>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d02a      	beq.n	800ae58 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	2b05      	cmp	r3, #5
 800ae12:	dc18      	bgt.n	800ae46 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ae14:	f7ff fe0a 	bl	800aa2c <xTaskGetSchedulerState>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	d109      	bne.n	800ae32 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae1e:	4b11      	ldr	r3, [pc, #68]	; (800ae64 <xTimerGenericCommand+0x9c>)
 800ae20:	6818      	ldr	r0, [r3, #0]
 800ae22:	f107 0110 	add.w	r1, r7, #16
 800ae26:	2300      	movs	r3, #0
 800ae28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae2a:	f7fe fa1b 	bl	8009264 <xQueueGenericSend>
 800ae2e:	6278      	str	r0, [r7, #36]	; 0x24
 800ae30:	e012      	b.n	800ae58 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ae32:	4b0c      	ldr	r3, [pc, #48]	; (800ae64 <xTimerGenericCommand+0x9c>)
 800ae34:	6818      	ldr	r0, [r3, #0]
 800ae36:	f107 0110 	add.w	r1, r7, #16
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f7fe fa11 	bl	8009264 <xQueueGenericSend>
 800ae42:	6278      	str	r0, [r7, #36]	; 0x24
 800ae44:	e008      	b.n	800ae58 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae46:	4b07      	ldr	r3, [pc, #28]	; (800ae64 <xTimerGenericCommand+0x9c>)
 800ae48:	6818      	ldr	r0, [r3, #0]
 800ae4a:	f107 0110 	add.w	r1, r7, #16
 800ae4e:	2300      	movs	r3, #0
 800ae50:	683a      	ldr	r2, [r7, #0]
 800ae52:	f7fe fb0d 	bl	8009470 <xQueueGenericSendFromISR>
 800ae56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3728      	adds	r7, #40	; 0x28
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	200014b0 	.word	0x200014b0

0800ae68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b088      	sub	sp, #32
 800ae6c:	af02      	add	r7, sp, #8
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae72:	4b23      	ldr	r3, [pc, #140]	; (800af00 <prvProcessExpiredTimer+0x98>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	3304      	adds	r3, #4
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fe f8b5 	bl	8008ff0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae8c:	f003 0304 	and.w	r3, r3, #4
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d024      	beq.n	800aede <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	699a      	ldr	r2, [r3, #24]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	18d1      	adds	r1, r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	683a      	ldr	r2, [r7, #0]
 800aea0:	6978      	ldr	r0, [r7, #20]
 800aea2:	f000 f8d3 	bl	800b04c <prvInsertTimerInActiveList>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d021      	beq.n	800aef0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aeac:	2300      	movs	r3, #0
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	6978      	ldr	r0, [r7, #20]
 800aeb8:	f7ff ff86 	bl	800adc8 <xTimerGenericCommand>
 800aebc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d115      	bne.n	800aef0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800aec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec8:	b672      	cpsid	i
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	b662      	cpsie	i
 800aed8:	60fb      	str	r3, [r7, #12]
}
 800aeda:	bf00      	nop
 800aedc:	e7fe      	b.n	800aedc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aee4:	f023 0301 	bic.w	r3, r3, #1
 800aee8:	b2da      	uxtb	r2, r3
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	6a1b      	ldr	r3, [r3, #32]
 800aef4:	6978      	ldr	r0, [r7, #20]
 800aef6:	4798      	blx	r3
}
 800aef8:	bf00      	nop
 800aefa:	3718      	adds	r7, #24
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	200014a8 	.word	0x200014a8

0800af04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af0c:	f107 0308 	add.w	r3, r7, #8
 800af10:	4618      	mov	r0, r3
 800af12:	f000 f857 	bl	800afc4 <prvGetNextExpireTime>
 800af16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	4619      	mov	r1, r3
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f000 f803 	bl	800af28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af22:	f000 f8d5 	bl	800b0d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af26:	e7f1      	b.n	800af0c <prvTimerTask+0x8>

0800af28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800af32:	f7ff f97d 	bl	800a230 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af36:	f107 0308 	add.w	r3, r7, #8
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 f866 	bl	800b00c <prvSampleTimeNow>
 800af40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d130      	bne.n	800afaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10a      	bne.n	800af64 <prvProcessTimerOrBlockTask+0x3c>
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	429a      	cmp	r2, r3
 800af54:	d806      	bhi.n	800af64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af56:	f7ff f979 	bl	800a24c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af5a:	68f9      	ldr	r1, [r7, #12]
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7ff ff83 	bl	800ae68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af62:	e024      	b.n	800afae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d008      	beq.n	800af7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af6a:	4b13      	ldr	r3, [pc, #76]	; (800afb8 <prvProcessTimerOrBlockTask+0x90>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d101      	bne.n	800af78 <prvProcessTimerOrBlockTask+0x50>
 800af74:	2301      	movs	r3, #1
 800af76:	e000      	b.n	800af7a <prvProcessTimerOrBlockTask+0x52>
 800af78:	2300      	movs	r3, #0
 800af7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af7c:	4b0f      	ldr	r3, [pc, #60]	; (800afbc <prvProcessTimerOrBlockTask+0x94>)
 800af7e:	6818      	ldr	r0, [r3, #0]
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	1ad3      	subs	r3, r2, r3
 800af86:	683a      	ldr	r2, [r7, #0]
 800af88:	4619      	mov	r1, r3
 800af8a:	f7fe fd31 	bl	80099f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af8e:	f7ff f95d 	bl	800a24c <xTaskResumeAll>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10a      	bne.n	800afae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af98:	4b09      	ldr	r3, [pc, #36]	; (800afc0 <prvProcessTimerOrBlockTask+0x98>)
 800af9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af9e:	601a      	str	r2, [r3, #0]
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	f3bf 8f6f 	isb	sy
}
 800afa8:	e001      	b.n	800afae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800afaa:	f7ff f94f 	bl	800a24c <xTaskResumeAll>
}
 800afae:	bf00      	nop
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	200014ac 	.word	0x200014ac
 800afbc:	200014b0 	.word	0x200014b0
 800afc0:	e000ed04 	.word	0xe000ed04

0800afc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800afcc:	4b0e      	ldr	r3, [pc, #56]	; (800b008 <prvGetNextExpireTime+0x44>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d101      	bne.n	800afda <prvGetNextExpireTime+0x16>
 800afd6:	2201      	movs	r2, #1
 800afd8:	e000      	b.n	800afdc <prvGetNextExpireTime+0x18>
 800afda:	2200      	movs	r2, #0
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d105      	bne.n	800aff4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afe8:	4b07      	ldr	r3, [pc, #28]	; (800b008 <prvGetNextExpireTime+0x44>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	60fb      	str	r3, [r7, #12]
 800aff2:	e001      	b.n	800aff8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aff4:	2300      	movs	r3, #0
 800aff6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aff8:	68fb      	ldr	r3, [r7, #12]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3714      	adds	r7, #20
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	200014a8 	.word	0x200014a8

0800b00c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b014:	f7ff f9ba 	bl	800a38c <xTaskGetTickCount>
 800b018:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b01a:	4b0b      	ldr	r3, [pc, #44]	; (800b048 <prvSampleTimeNow+0x3c>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	429a      	cmp	r2, r3
 800b022:	d205      	bcs.n	800b030 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b024:	f000 f93c 	bl	800b2a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	601a      	str	r2, [r3, #0]
 800b02e:	e002      	b.n	800b036 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b036:	4a04      	ldr	r2, [pc, #16]	; (800b048 <prvSampleTimeNow+0x3c>)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b03c:	68fb      	ldr	r3, [r7, #12]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	200014b8 	.word	0x200014b8

0800b04c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b086      	sub	sp, #24
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
 800b058:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b05a:	2300      	movs	r3, #0
 800b05c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	68ba      	ldr	r2, [r7, #8]
 800b062:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	68fa      	ldr	r2, [r7, #12]
 800b068:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b06a:	68ba      	ldr	r2, [r7, #8]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d812      	bhi.n	800b098 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	1ad2      	subs	r2, r2, r3
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d302      	bcc.n	800b086 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b080:	2301      	movs	r3, #1
 800b082:	617b      	str	r3, [r7, #20]
 800b084:	e01b      	b.n	800b0be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b086:	4b10      	ldr	r3, [pc, #64]	; (800b0c8 <prvInsertTimerInActiveList+0x7c>)
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	3304      	adds	r3, #4
 800b08e:	4619      	mov	r1, r3
 800b090:	4610      	mov	r0, r2
 800b092:	f7fd ff74 	bl	8008f7e <vListInsert>
 800b096:	e012      	b.n	800b0be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d206      	bcs.n	800b0ae <prvInsertTimerInActiveList+0x62>
 800b0a0:	68ba      	ldr	r2, [r7, #8]
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d302      	bcc.n	800b0ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	617b      	str	r3, [r7, #20]
 800b0ac:	e007      	b.n	800b0be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0ae:	4b07      	ldr	r3, [pc, #28]	; (800b0cc <prvInsertTimerInActiveList+0x80>)
 800b0b0:	681a      	ldr	r2, [r3, #0]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	4610      	mov	r0, r2
 800b0ba:	f7fd ff60 	bl	8008f7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b0be:	697b      	ldr	r3, [r7, #20]
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3718      	adds	r7, #24
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	200014ac 	.word	0x200014ac
 800b0cc:	200014a8 	.word	0x200014a8

0800b0d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b08e      	sub	sp, #56	; 0x38
 800b0d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0d6:	e0d0      	b.n	800b27a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	da1a      	bge.n	800b114 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b0de:	1d3b      	adds	r3, r7, #4
 800b0e0:	3304      	adds	r3, #4
 800b0e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10c      	bne.n	800b104 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ee:	b672      	cpsid	i
 800b0f0:	f383 8811 	msr	BASEPRI, r3
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	f3bf 8f4f 	dsb	sy
 800b0fc:	b662      	cpsie	i
 800b0fe:	61fb      	str	r3, [r7, #28]
}
 800b100:	bf00      	nop
 800b102:	e7fe      	b.n	800b102 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b10a:	6850      	ldr	r0, [r2, #4]
 800b10c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b10e:	6892      	ldr	r2, [r2, #8]
 800b110:	4611      	mov	r1, r2
 800b112:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2b00      	cmp	r3, #0
 800b118:	f2c0 80af 	blt.w	800b27a <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b122:	695b      	ldr	r3, [r3, #20]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d004      	beq.n	800b132 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12a:	3304      	adds	r3, #4
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7fd ff5f 	bl	8008ff0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b132:	463b      	mov	r3, r7
 800b134:	4618      	mov	r0, r3
 800b136:	f7ff ff69 	bl	800b00c <prvSampleTimeNow>
 800b13a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2b09      	cmp	r3, #9
 800b140:	f200 809a 	bhi.w	800b278 <prvProcessReceivedCommands+0x1a8>
 800b144:	a201      	add	r2, pc, #4	; (adr r2, 800b14c <prvProcessReceivedCommands+0x7c>)
 800b146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14a:	bf00      	nop
 800b14c:	0800b175 	.word	0x0800b175
 800b150:	0800b175 	.word	0x0800b175
 800b154:	0800b175 	.word	0x0800b175
 800b158:	0800b1ed 	.word	0x0800b1ed
 800b15c:	0800b201 	.word	0x0800b201
 800b160:	0800b24f 	.word	0x0800b24f
 800b164:	0800b175 	.word	0x0800b175
 800b168:	0800b175 	.word	0x0800b175
 800b16c:	0800b1ed 	.word	0x0800b1ed
 800b170:	0800b201 	.word	0x0800b201
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b17a:	f043 0301 	orr.w	r3, r3, #1
 800b17e:	b2da      	uxtb	r2, r3
 800b180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b186:	68ba      	ldr	r2, [r7, #8]
 800b188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	18d1      	adds	r1, r2, r3
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b194:	f7ff ff5a 	bl	800b04c <prvInsertTimerInActiveList>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d06d      	beq.n	800b27a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a0:	6a1b      	ldr	r3, [r3, #32]
 800b1a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1ac:	f003 0304 	and.w	r3, r3, #4
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d062      	beq.n	800b27a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b1b4:	68ba      	ldr	r2, [r7, #8]
 800b1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b8:	699b      	ldr	r3, [r3, #24]
 800b1ba:	441a      	add	r2, r3
 800b1bc:	2300      	movs	r3, #0
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1c6:	f7ff fdff 	bl	800adc8 <xTimerGenericCommand>
 800b1ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d153      	bne.n	800b27a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800b1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d6:	b672      	cpsid	i
 800b1d8:	f383 8811 	msr	BASEPRI, r3
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	f3bf 8f4f 	dsb	sy
 800b1e4:	b662      	cpsie	i
 800b1e6:	61bb      	str	r3, [r7, #24]
}
 800b1e8:	bf00      	nop
 800b1ea:	e7fe      	b.n	800b1ea <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1f2:	f023 0301 	bic.w	r3, r3, #1
 800b1f6:	b2da      	uxtb	r2, r3
 800b1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b1fe:	e03c      	b.n	800b27a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b206:	f043 0301 	orr.w	r3, r3, #1
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b212:	68ba      	ldr	r2, [r7, #8]
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21a:	699b      	ldr	r3, [r3, #24]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d10c      	bne.n	800b23a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800b220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b224:	b672      	cpsid	i
 800b226:	f383 8811 	msr	BASEPRI, r3
 800b22a:	f3bf 8f6f 	isb	sy
 800b22e:	f3bf 8f4f 	dsb	sy
 800b232:	b662      	cpsie	i
 800b234:	617b      	str	r3, [r7, #20]
}
 800b236:	bf00      	nop
 800b238:	e7fe      	b.n	800b238 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23c:	699a      	ldr	r2, [r3, #24]
 800b23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b240:	18d1      	adds	r1, r2, r3
 800b242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b248:	f7ff ff00 	bl	800b04c <prvInsertTimerInActiveList>
					break;
 800b24c:	e015      	b.n	800b27a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b254:	f003 0302 	and.w	r3, r3, #2
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d103      	bne.n	800b264 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800b25c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b25e:	f000 fbeb 	bl	800ba38 <vPortFree>
 800b262:	e00a      	b.n	800b27a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b26a:	f023 0301 	bic.w	r3, r3, #1
 800b26e:	b2da      	uxtb	r2, r3
 800b270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b276:	e000      	b.n	800b27a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800b278:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b27a:	4b08      	ldr	r3, [pc, #32]	; (800b29c <prvProcessReceivedCommands+0x1cc>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	1d39      	adds	r1, r7, #4
 800b280:	2200      	movs	r2, #0
 800b282:	4618      	mov	r0, r3
 800b284:	f7fe f994 	bl	80095b0 <xQueueReceive>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f47f af24 	bne.w	800b0d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b290:	bf00      	nop
 800b292:	bf00      	nop
 800b294:	3730      	adds	r7, #48	; 0x30
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	200014b0 	.word	0x200014b0

0800b2a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b088      	sub	sp, #32
 800b2a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b2a6:	e04a      	b.n	800b33e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b2a8:	4b2e      	ldr	r3, [pc, #184]	; (800b364 <prvSwitchTimerLists+0xc4>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2b2:	4b2c      	ldr	r3, [pc, #176]	; (800b364 <prvSwitchTimerLists+0xc4>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	3304      	adds	r3, #4
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7fd fe95 	bl	8008ff0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6a1b      	ldr	r3, [r3, #32]
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2d4:	f003 0304 	and.w	r3, r3, #4
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d030      	beq.n	800b33e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	699b      	ldr	r3, [r3, #24]
 800b2e0:	693a      	ldr	r2, [r7, #16]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b2e6:	68ba      	ldr	r2, [r7, #8]
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d90e      	bls.n	800b30c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	68ba      	ldr	r2, [r7, #8]
 800b2f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b2fa:	4b1a      	ldr	r3, [pc, #104]	; (800b364 <prvSwitchTimerLists+0xc4>)
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	3304      	adds	r3, #4
 800b302:	4619      	mov	r1, r3
 800b304:	4610      	mov	r0, r2
 800b306:	f7fd fe3a 	bl	8008f7e <vListInsert>
 800b30a:	e018      	b.n	800b33e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b30c:	2300      	movs	r3, #0
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	2300      	movs	r3, #0
 800b312:	693a      	ldr	r2, [r7, #16]
 800b314:	2100      	movs	r1, #0
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f7ff fd56 	bl	800adc8 <xTimerGenericCommand>
 800b31c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10c      	bne.n	800b33e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800b324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b328:	b672      	cpsid	i
 800b32a:	f383 8811 	msr	BASEPRI, r3
 800b32e:	f3bf 8f6f 	isb	sy
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	b662      	cpsie	i
 800b338:	603b      	str	r3, [r7, #0]
}
 800b33a:	bf00      	nop
 800b33c:	e7fe      	b.n	800b33c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b33e:	4b09      	ldr	r3, [pc, #36]	; (800b364 <prvSwitchTimerLists+0xc4>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1af      	bne.n	800b2a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b348:	4b06      	ldr	r3, [pc, #24]	; (800b364 <prvSwitchTimerLists+0xc4>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b34e:	4b06      	ldr	r3, [pc, #24]	; (800b368 <prvSwitchTimerLists+0xc8>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a04      	ldr	r2, [pc, #16]	; (800b364 <prvSwitchTimerLists+0xc4>)
 800b354:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b356:	4a04      	ldr	r2, [pc, #16]	; (800b368 <prvSwitchTimerLists+0xc8>)
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	6013      	str	r3, [r2, #0]
}
 800b35c:	bf00      	nop
 800b35e:	3718      	adds	r7, #24
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	200014a8 	.word	0x200014a8
 800b368:	200014ac 	.word	0x200014ac

0800b36c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b372:	f000 f96b 	bl	800b64c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b376:	4b15      	ldr	r3, [pc, #84]	; (800b3cc <prvCheckForValidListAndQueue+0x60>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d120      	bne.n	800b3c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b37e:	4814      	ldr	r0, [pc, #80]	; (800b3d0 <prvCheckForValidListAndQueue+0x64>)
 800b380:	f7fd fdac 	bl	8008edc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b384:	4813      	ldr	r0, [pc, #76]	; (800b3d4 <prvCheckForValidListAndQueue+0x68>)
 800b386:	f7fd fda9 	bl	8008edc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b38a:	4b13      	ldr	r3, [pc, #76]	; (800b3d8 <prvCheckForValidListAndQueue+0x6c>)
 800b38c:	4a10      	ldr	r2, [pc, #64]	; (800b3d0 <prvCheckForValidListAndQueue+0x64>)
 800b38e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b390:	4b12      	ldr	r3, [pc, #72]	; (800b3dc <prvCheckForValidListAndQueue+0x70>)
 800b392:	4a10      	ldr	r2, [pc, #64]	; (800b3d4 <prvCheckForValidListAndQueue+0x68>)
 800b394:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b396:	2300      	movs	r3, #0
 800b398:	9300      	str	r3, [sp, #0]
 800b39a:	4b11      	ldr	r3, [pc, #68]	; (800b3e0 <prvCheckForValidListAndQueue+0x74>)
 800b39c:	4a11      	ldr	r2, [pc, #68]	; (800b3e4 <prvCheckForValidListAndQueue+0x78>)
 800b39e:	2110      	movs	r1, #16
 800b3a0:	200a      	movs	r0, #10
 800b3a2:	f7fd feb9 	bl	8009118 <xQueueGenericCreateStatic>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	4a08      	ldr	r2, [pc, #32]	; (800b3cc <prvCheckForValidListAndQueue+0x60>)
 800b3aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b3ac:	4b07      	ldr	r3, [pc, #28]	; (800b3cc <prvCheckForValidListAndQueue+0x60>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d005      	beq.n	800b3c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b3b4:	4b05      	ldr	r3, [pc, #20]	; (800b3cc <prvCheckForValidListAndQueue+0x60>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	490b      	ldr	r1, [pc, #44]	; (800b3e8 <prvCheckForValidListAndQueue+0x7c>)
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7fe faee 	bl	800999c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3c0:	f000 f978 	bl	800b6b4 <vPortExitCritical>
}
 800b3c4:	bf00      	nop
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	200014b0 	.word	0x200014b0
 800b3d0:	20001480 	.word	0x20001480
 800b3d4:	20001494 	.word	0x20001494
 800b3d8:	200014a8 	.word	0x200014a8
 800b3dc:	200014ac 	.word	0x200014ac
 800b3e0:	2000155c 	.word	0x2000155c
 800b3e4:	200014bc 	.word	0x200014bc
 800b3e8:	0800ce28 	.word	0x0800ce28

0800b3ec <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10c      	bne.n	800b418 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800b3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b402:	b672      	cpsid	i
 800b404:	f383 8811 	msr	BASEPRI, r3
 800b408:	f3bf 8f6f 	isb	sy
 800b40c:	f3bf 8f4f 	dsb	sy
 800b410:	b662      	cpsie	i
 800b412:	60fb      	str	r3, [r7, #12]
}
 800b414:	bf00      	nop
 800b416:	e7fe      	b.n	800b416 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800b418:	f000 f918 	bl	800b64c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	69db      	ldr	r3, [r3, #28]
 800b420:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b422:	f000 f947 	bl	800b6b4 <vPortExitCritical>

	return pvReturn;
 800b426:	693b      	ldr	r3, [r7, #16]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3718      	adds	r7, #24
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	3b04      	subs	r3, #4
 800b440:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	3b04      	subs	r3, #4
 800b44e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	f023 0201 	bic.w	r2, r3, #1
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	3b04      	subs	r3, #4
 800b45e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b460:	4a0c      	ldr	r2, [pc, #48]	; (800b494 <pxPortInitialiseStack+0x64>)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	3b14      	subs	r3, #20
 800b46a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	3b04      	subs	r3, #4
 800b476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f06f 0202 	mvn.w	r2, #2
 800b47e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	3b20      	subs	r3, #32
 800b484:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b486:	68fb      	ldr	r3, [r7, #12]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr
 800b494:	0800b499 	.word	0x0800b499

0800b498 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b4a2:	4b14      	ldr	r3, [pc, #80]	; (800b4f4 <prvTaskExitError+0x5c>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4aa:	d00c      	beq.n	800b4c6 <prvTaskExitError+0x2e>
	__asm volatile
 800b4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b0:	b672      	cpsid	i
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	b662      	cpsie	i
 800b4c0:	60fb      	str	r3, [r7, #12]
}
 800b4c2:	bf00      	nop
 800b4c4:	e7fe      	b.n	800b4c4 <prvTaskExitError+0x2c>
	__asm volatile
 800b4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ca:	b672      	cpsid	i
 800b4cc:	f383 8811 	msr	BASEPRI, r3
 800b4d0:	f3bf 8f6f 	isb	sy
 800b4d4:	f3bf 8f4f 	dsb	sy
 800b4d8:	b662      	cpsie	i
 800b4da:	60bb      	str	r3, [r7, #8]
}
 800b4dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b4de:	bf00      	nop
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d0fc      	beq.n	800b4e0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b4e6:	bf00      	nop
 800b4e8:	bf00      	nop
 800b4ea:	3714      	adds	r7, #20
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	20000060 	.word	0x20000060
	...

0800b500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b500:	4b07      	ldr	r3, [pc, #28]	; (800b520 <pxCurrentTCBConst2>)
 800b502:	6819      	ldr	r1, [r3, #0]
 800b504:	6808      	ldr	r0, [r1, #0]
 800b506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50a:	f380 8809 	msr	PSP, r0
 800b50e:	f3bf 8f6f 	isb	sy
 800b512:	f04f 0000 	mov.w	r0, #0
 800b516:	f380 8811 	msr	BASEPRI, r0
 800b51a:	4770      	bx	lr
 800b51c:	f3af 8000 	nop.w

0800b520 <pxCurrentTCBConst2>:
 800b520:	20000f80 	.word	0x20000f80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b524:	bf00      	nop
 800b526:	bf00      	nop

0800b528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b528:	4808      	ldr	r0, [pc, #32]	; (800b54c <prvPortStartFirstTask+0x24>)
 800b52a:	6800      	ldr	r0, [r0, #0]
 800b52c:	6800      	ldr	r0, [r0, #0]
 800b52e:	f380 8808 	msr	MSP, r0
 800b532:	f04f 0000 	mov.w	r0, #0
 800b536:	f380 8814 	msr	CONTROL, r0
 800b53a:	b662      	cpsie	i
 800b53c:	b661      	cpsie	f
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	df00      	svc	0
 800b548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b54a:	bf00      	nop
 800b54c:	e000ed08 	.word	0xe000ed08

0800b550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b556:	4b37      	ldr	r3, [pc, #220]	; (800b634 <xPortStartScheduler+0xe4>)
 800b558:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	22ff      	movs	r2, #255	; 0xff
 800b566:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b570:	78fb      	ldrb	r3, [r7, #3]
 800b572:	b2db      	uxtb	r3, r3
 800b574:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b578:	b2da      	uxtb	r2, r3
 800b57a:	4b2f      	ldr	r3, [pc, #188]	; (800b638 <xPortStartScheduler+0xe8>)
 800b57c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b57e:	4b2f      	ldr	r3, [pc, #188]	; (800b63c <xPortStartScheduler+0xec>)
 800b580:	2207      	movs	r2, #7
 800b582:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b584:	e009      	b.n	800b59a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b586:	4b2d      	ldr	r3, [pc, #180]	; (800b63c <xPortStartScheduler+0xec>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	4a2b      	ldr	r2, [pc, #172]	; (800b63c <xPortStartScheduler+0xec>)
 800b58e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b590:	78fb      	ldrb	r3, [r7, #3]
 800b592:	b2db      	uxtb	r3, r3
 800b594:	005b      	lsls	r3, r3, #1
 800b596:	b2db      	uxtb	r3, r3
 800b598:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b59a:	78fb      	ldrb	r3, [r7, #3]
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5a2:	2b80      	cmp	r3, #128	; 0x80
 800b5a4:	d0ef      	beq.n	800b586 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b5a6:	4b25      	ldr	r3, [pc, #148]	; (800b63c <xPortStartScheduler+0xec>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f1c3 0307 	rsb	r3, r3, #7
 800b5ae:	2b04      	cmp	r3, #4
 800b5b0:	d00c      	beq.n	800b5cc <xPortStartScheduler+0x7c>
	__asm volatile
 800b5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b6:	b672      	cpsid	i
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	b662      	cpsie	i
 800b5c6:	60bb      	str	r3, [r7, #8]
}
 800b5c8:	bf00      	nop
 800b5ca:	e7fe      	b.n	800b5ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b5cc:	4b1b      	ldr	r3, [pc, #108]	; (800b63c <xPortStartScheduler+0xec>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	021b      	lsls	r3, r3, #8
 800b5d2:	4a1a      	ldr	r2, [pc, #104]	; (800b63c <xPortStartScheduler+0xec>)
 800b5d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b5d6:	4b19      	ldr	r3, [pc, #100]	; (800b63c <xPortStartScheduler+0xec>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b5de:	4a17      	ldr	r2, [pc, #92]	; (800b63c <xPortStartScheduler+0xec>)
 800b5e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	b2da      	uxtb	r2, r3
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5ea:	4b15      	ldr	r3, [pc, #84]	; (800b640 <xPortStartScheduler+0xf0>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a14      	ldr	r2, [pc, #80]	; (800b640 <xPortStartScheduler+0xf0>)
 800b5f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b5f6:	4b12      	ldr	r3, [pc, #72]	; (800b640 <xPortStartScheduler+0xf0>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a11      	ldr	r2, [pc, #68]	; (800b640 <xPortStartScheduler+0xf0>)
 800b5fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b600:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b602:	f000 f8dd 	bl	800b7c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b606:	4b0f      	ldr	r3, [pc, #60]	; (800b644 <xPortStartScheduler+0xf4>)
 800b608:	2200      	movs	r2, #0
 800b60a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b60c:	f000 f8fc 	bl	800b808 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b610:	4b0d      	ldr	r3, [pc, #52]	; (800b648 <xPortStartScheduler+0xf8>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a0c      	ldr	r2, [pc, #48]	; (800b648 <xPortStartScheduler+0xf8>)
 800b616:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b61a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b61c:	f7ff ff84 	bl	800b528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b620:	f7fe ff80 	bl	800a524 <vTaskSwitchContext>
	prvTaskExitError();
 800b624:	f7ff ff38 	bl	800b498 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b628:	2300      	movs	r3, #0
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3710      	adds	r7, #16
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	e000e400 	.word	0xe000e400
 800b638:	200015ac 	.word	0x200015ac
 800b63c:	200015b0 	.word	0x200015b0
 800b640:	e000ed20 	.word	0xe000ed20
 800b644:	20000060 	.word	0x20000060
 800b648:	e000ef34 	.word	0xe000ef34

0800b64c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
	__asm volatile
 800b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b656:	b672      	cpsid	i
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	b662      	cpsie	i
 800b666:	607b      	str	r3, [r7, #4]
}
 800b668:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b66a:	4b10      	ldr	r3, [pc, #64]	; (800b6ac <vPortEnterCritical+0x60>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	3301      	adds	r3, #1
 800b670:	4a0e      	ldr	r2, [pc, #56]	; (800b6ac <vPortEnterCritical+0x60>)
 800b672:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b674:	4b0d      	ldr	r3, [pc, #52]	; (800b6ac <vPortEnterCritical+0x60>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d111      	bne.n	800b6a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b67c:	4b0c      	ldr	r3, [pc, #48]	; (800b6b0 <vPortEnterCritical+0x64>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	b2db      	uxtb	r3, r3
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00c      	beq.n	800b6a0 <vPortEnterCritical+0x54>
	__asm volatile
 800b686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68a:	b672      	cpsid	i
 800b68c:	f383 8811 	msr	BASEPRI, r3
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	b662      	cpsie	i
 800b69a:	603b      	str	r3, [r7, #0]
}
 800b69c:	bf00      	nop
 800b69e:	e7fe      	b.n	800b69e <vPortEnterCritical+0x52>
	}
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	20000060 	.word	0x20000060
 800b6b0:	e000ed04 	.word	0xe000ed04

0800b6b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b6ba:	4b13      	ldr	r3, [pc, #76]	; (800b708 <vPortExitCritical+0x54>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d10c      	bne.n	800b6dc <vPortExitCritical+0x28>
	__asm volatile
 800b6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c6:	b672      	cpsid	i
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	b662      	cpsie	i
 800b6d6:	607b      	str	r3, [r7, #4]
}
 800b6d8:	bf00      	nop
 800b6da:	e7fe      	b.n	800b6da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b6dc:	4b0a      	ldr	r3, [pc, #40]	; (800b708 <vPortExitCritical+0x54>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	4a09      	ldr	r2, [pc, #36]	; (800b708 <vPortExitCritical+0x54>)
 800b6e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6e6:	4b08      	ldr	r3, [pc, #32]	; (800b708 <vPortExitCritical+0x54>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d105      	bne.n	800b6fa <vPortExitCritical+0x46>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	f383 8811 	msr	BASEPRI, r3
}
 800b6f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b6fa:	bf00      	nop
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	20000060 	.word	0x20000060
 800b70c:	00000000 	.word	0x00000000

0800b710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b710:	f3ef 8009 	mrs	r0, PSP
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	4b15      	ldr	r3, [pc, #84]	; (800b770 <pxCurrentTCBConst>)
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	f01e 0f10 	tst.w	lr, #16
 800b720:	bf08      	it	eq
 800b722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72a:	6010      	str	r0, [r2, #0]
 800b72c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b730:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b734:	b672      	cpsid	i
 800b736:	f380 8811 	msr	BASEPRI, r0
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	b662      	cpsie	i
 800b744:	f7fe feee 	bl	800a524 <vTaskSwitchContext>
 800b748:	f04f 0000 	mov.w	r0, #0
 800b74c:	f380 8811 	msr	BASEPRI, r0
 800b750:	bc09      	pop	{r0, r3}
 800b752:	6819      	ldr	r1, [r3, #0]
 800b754:	6808      	ldr	r0, [r1, #0]
 800b756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75a:	f01e 0f10 	tst.w	lr, #16
 800b75e:	bf08      	it	eq
 800b760:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b764:	f380 8809 	msr	PSP, r0
 800b768:	f3bf 8f6f 	isb	sy
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop

0800b770 <pxCurrentTCBConst>:
 800b770:	20000f80 	.word	0x20000f80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b774:	bf00      	nop
 800b776:	bf00      	nop

0800b778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
	__asm volatile
 800b77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b782:	b672      	cpsid	i
 800b784:	f383 8811 	msr	BASEPRI, r3
 800b788:	f3bf 8f6f 	isb	sy
 800b78c:	f3bf 8f4f 	dsb	sy
 800b790:	b662      	cpsie	i
 800b792:	607b      	str	r3, [r7, #4]
}
 800b794:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b796:	f7fe fe09 	bl	800a3ac <xTaskIncrementTick>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d003      	beq.n	800b7a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b7a0:	4b06      	ldr	r3, [pc, #24]	; (800b7bc <SysTick_Handler+0x44>)
 800b7a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7a6:	601a      	str	r2, [r3, #0]
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	f383 8811 	msr	BASEPRI, r3
}
 800b7b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b7b4:	bf00      	nop
 800b7b6:	3708      	adds	r7, #8
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	e000ed04 	.word	0xe000ed04

0800b7c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b7c4:	4b0b      	ldr	r3, [pc, #44]	; (800b7f4 <vPortSetupTimerInterrupt+0x34>)
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b7ca:	4b0b      	ldr	r3, [pc, #44]	; (800b7f8 <vPortSetupTimerInterrupt+0x38>)
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b7d0:	4b0a      	ldr	r3, [pc, #40]	; (800b7fc <vPortSetupTimerInterrupt+0x3c>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a0a      	ldr	r2, [pc, #40]	; (800b800 <vPortSetupTimerInterrupt+0x40>)
 800b7d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7da:	099b      	lsrs	r3, r3, #6
 800b7dc:	4a09      	ldr	r2, [pc, #36]	; (800b804 <vPortSetupTimerInterrupt+0x44>)
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b7e2:	4b04      	ldr	r3, [pc, #16]	; (800b7f4 <vPortSetupTimerInterrupt+0x34>)
 800b7e4:	2207      	movs	r2, #7
 800b7e6:	601a      	str	r2, [r3, #0]
}
 800b7e8:	bf00      	nop
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	e000e010 	.word	0xe000e010
 800b7f8:	e000e018 	.word	0xe000e018
 800b7fc:	20000054 	.word	0x20000054
 800b800:	10624dd3 	.word	0x10624dd3
 800b804:	e000e014 	.word	0xe000e014

0800b808 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b808:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b818 <vPortEnableVFP+0x10>
 800b80c:	6801      	ldr	r1, [r0, #0]
 800b80e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b812:	6001      	str	r1, [r0, #0]
 800b814:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b816:	bf00      	nop
 800b818:	e000ed88 	.word	0xe000ed88

0800b81c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b81c:	b480      	push	{r7}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b822:	f3ef 8305 	mrs	r3, IPSR
 800b826:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2b0f      	cmp	r3, #15
 800b82c:	d916      	bls.n	800b85c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b82e:	4a19      	ldr	r2, [pc, #100]	; (800b894 <vPortValidateInterruptPriority+0x78>)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	4413      	add	r3, r2
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b838:	4b17      	ldr	r3, [pc, #92]	; (800b898 <vPortValidateInterruptPriority+0x7c>)
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	7afa      	ldrb	r2, [r7, #11]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d20c      	bcs.n	800b85c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800b842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b846:	b672      	cpsid	i
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	b662      	cpsie	i
 800b856:	607b      	str	r3, [r7, #4]
}
 800b858:	bf00      	nop
 800b85a:	e7fe      	b.n	800b85a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b85c:	4b0f      	ldr	r3, [pc, #60]	; (800b89c <vPortValidateInterruptPriority+0x80>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b864:	4b0e      	ldr	r3, [pc, #56]	; (800b8a0 <vPortValidateInterruptPriority+0x84>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d90c      	bls.n	800b886 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800b86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b870:	b672      	cpsid	i
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	b662      	cpsie	i
 800b880:	603b      	str	r3, [r7, #0]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <vPortValidateInterruptPriority+0x68>
	}
 800b886:	bf00      	nop
 800b888:	3714      	adds	r7, #20
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	e000e3f0 	.word	0xe000e3f0
 800b898:	200015ac 	.word	0x200015ac
 800b89c:	e000ed0c 	.word	0xe000ed0c
 800b8a0:	200015b0 	.word	0x200015b0

0800b8a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b08a      	sub	sp, #40	; 0x28
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b8b0:	f7fe fcbe 	bl	800a230 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b8b4:	4b5b      	ldr	r3, [pc, #364]	; (800ba24 <pvPortMalloc+0x180>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d101      	bne.n	800b8c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b8bc:	f000 f91a 	bl	800baf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8c0:	4b59      	ldr	r3, [pc, #356]	; (800ba28 <pvPortMalloc+0x184>)
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4013      	ands	r3, r2
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f040 8092 	bne.w	800b9f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d01f      	beq.n	800b914 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800b8d4:	2208      	movs	r2, #8
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4413      	add	r3, r2
 800b8da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f003 0307 	and.w	r3, r3, #7
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d016      	beq.n	800b914 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f023 0307 	bic.w	r3, r3, #7
 800b8ec:	3308      	adds	r3, #8
 800b8ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f003 0307 	and.w	r3, r3, #7
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00c      	beq.n	800b914 <pvPortMalloc+0x70>
	__asm volatile
 800b8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fe:	b672      	cpsid	i
 800b900:	f383 8811 	msr	BASEPRI, r3
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	b662      	cpsie	i
 800b90e:	617b      	str	r3, [r7, #20]
}
 800b910:	bf00      	nop
 800b912:	e7fe      	b.n	800b912 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d06b      	beq.n	800b9f2 <pvPortMalloc+0x14e>
 800b91a:	4b44      	ldr	r3, [pc, #272]	; (800ba2c <pvPortMalloc+0x188>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	429a      	cmp	r2, r3
 800b922:	d866      	bhi.n	800b9f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b924:	4b42      	ldr	r3, [pc, #264]	; (800ba30 <pvPortMalloc+0x18c>)
 800b926:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b928:	4b41      	ldr	r3, [pc, #260]	; (800ba30 <pvPortMalloc+0x18c>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b92e:	e004      	b.n	800b93a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800b930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b932:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	429a      	cmp	r2, r3
 800b942:	d903      	bls.n	800b94c <pvPortMalloc+0xa8>
 800b944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1f1      	bne.n	800b930 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b94c:	4b35      	ldr	r3, [pc, #212]	; (800ba24 <pvPortMalloc+0x180>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b952:	429a      	cmp	r2, r3
 800b954:	d04d      	beq.n	800b9f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b956:	6a3b      	ldr	r3, [r7, #32]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2208      	movs	r2, #8
 800b95c:	4413      	add	r3, r2
 800b95e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	6a3b      	ldr	r3, [r7, #32]
 800b966:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	685a      	ldr	r2, [r3, #4]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	1ad2      	subs	r2, r2, r3
 800b970:	2308      	movs	r3, #8
 800b972:	005b      	lsls	r3, r3, #1
 800b974:	429a      	cmp	r2, r3
 800b976:	d921      	bls.n	800b9bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4413      	add	r3, r2
 800b97e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	f003 0307 	and.w	r3, r3, #7
 800b986:	2b00      	cmp	r3, #0
 800b988:	d00c      	beq.n	800b9a4 <pvPortMalloc+0x100>
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98e:	b672      	cpsid	i
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	b662      	cpsie	i
 800b99e:	613b      	str	r3, [r7, #16]
}
 800b9a0:	bf00      	nop
 800b9a2:	e7fe      	b.n	800b9a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	685a      	ldr	r2, [r3, #4]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	1ad2      	subs	r2, r2, r3
 800b9ac:	69bb      	ldr	r3, [r7, #24]
 800b9ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b9b6:	69b8      	ldr	r0, [r7, #24]
 800b9b8:	f000 f8fe 	bl	800bbb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b9bc:	4b1b      	ldr	r3, [pc, #108]	; (800ba2c <pvPortMalloc+0x188>)
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	1ad3      	subs	r3, r2, r3
 800b9c6:	4a19      	ldr	r2, [pc, #100]	; (800ba2c <pvPortMalloc+0x188>)
 800b9c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b9ca:	4b18      	ldr	r3, [pc, #96]	; (800ba2c <pvPortMalloc+0x188>)
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	4b19      	ldr	r3, [pc, #100]	; (800ba34 <pvPortMalloc+0x190>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d203      	bcs.n	800b9de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b9d6:	4b15      	ldr	r3, [pc, #84]	; (800ba2c <pvPortMalloc+0x188>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a16      	ldr	r2, [pc, #88]	; (800ba34 <pvPortMalloc+0x190>)
 800b9dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e0:	685a      	ldr	r2, [r3, #4]
 800b9e2:	4b11      	ldr	r3, [pc, #68]	; (800ba28 <pvPortMalloc+0x184>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	431a      	orrs	r2, r3
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b9f2:	f7fe fc2b 	bl	800a24c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	f003 0307 	and.w	r3, r3, #7
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00c      	beq.n	800ba1a <pvPortMalloc+0x176>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	b672      	cpsid	i
 800ba06:	f383 8811 	msr	BASEPRI, r3
 800ba0a:	f3bf 8f6f 	isb	sy
 800ba0e:	f3bf 8f4f 	dsb	sy
 800ba12:	b662      	cpsie	i
 800ba14:	60fb      	str	r3, [r7, #12]
}
 800ba16:	bf00      	nop
 800ba18:	e7fe      	b.n	800ba18 <pvPortMalloc+0x174>
	return pvReturn;
 800ba1a:	69fb      	ldr	r3, [r7, #28]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3728      	adds	r7, #40	; 0x28
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	200051bc 	.word	0x200051bc
 800ba28:	200051c8 	.word	0x200051c8
 800ba2c:	200051c0 	.word	0x200051c0
 800ba30:	200051b4 	.word	0x200051b4
 800ba34:	200051c4 	.word	0x200051c4

0800ba38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b086      	sub	sp, #24
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d04c      	beq.n	800bae4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba4a:	2308      	movs	r3, #8
 800ba4c:	425b      	negs	r3, r3
 800ba4e:	697a      	ldr	r2, [r7, #20]
 800ba50:	4413      	add	r3, r2
 800ba52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	685a      	ldr	r2, [r3, #4]
 800ba5c:	4b23      	ldr	r3, [pc, #140]	; (800baec <vPortFree+0xb4>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4013      	ands	r3, r2
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10c      	bne.n	800ba80 <vPortFree+0x48>
	__asm volatile
 800ba66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6a:	b672      	cpsid	i
 800ba6c:	f383 8811 	msr	BASEPRI, r3
 800ba70:	f3bf 8f6f 	isb	sy
 800ba74:	f3bf 8f4f 	dsb	sy
 800ba78:	b662      	cpsie	i
 800ba7a:	60fb      	str	r3, [r7, #12]
}
 800ba7c:	bf00      	nop
 800ba7e:	e7fe      	b.n	800ba7e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00c      	beq.n	800baa2 <vPortFree+0x6a>
	__asm volatile
 800ba88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8c:	b672      	cpsid	i
 800ba8e:	f383 8811 	msr	BASEPRI, r3
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	b662      	cpsie	i
 800ba9c:	60bb      	str	r3, [r7, #8]
}
 800ba9e:	bf00      	nop
 800baa0:	e7fe      	b.n	800baa0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	685a      	ldr	r2, [r3, #4]
 800baa6:	4b11      	ldr	r3, [pc, #68]	; (800baec <vPortFree+0xb4>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4013      	ands	r3, r2
 800baac:	2b00      	cmp	r3, #0
 800baae:	d019      	beq.n	800bae4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d115      	bne.n	800bae4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	685a      	ldr	r2, [r3, #4]
 800babc:	4b0b      	ldr	r3, [pc, #44]	; (800baec <vPortFree+0xb4>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	43db      	mvns	r3, r3
 800bac2:	401a      	ands	r2, r3
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bac8:	f7fe fbb2 	bl	800a230 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	685a      	ldr	r2, [r3, #4]
 800bad0:	4b07      	ldr	r3, [pc, #28]	; (800baf0 <vPortFree+0xb8>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4413      	add	r3, r2
 800bad6:	4a06      	ldr	r2, [pc, #24]	; (800baf0 <vPortFree+0xb8>)
 800bad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bada:	6938      	ldr	r0, [r7, #16]
 800badc:	f000 f86c 	bl	800bbb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bae0:	f7fe fbb4 	bl	800a24c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bae4:	bf00      	nop
 800bae6:	3718      	adds	r7, #24
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	200051c8 	.word	0x200051c8
 800baf0:	200051c0 	.word	0x200051c0

0800baf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bafa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bafe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb00:	4b27      	ldr	r3, [pc, #156]	; (800bba0 <prvHeapInit+0xac>)
 800bb02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f003 0307 	and.w	r3, r3, #7
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d00c      	beq.n	800bb28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	3307      	adds	r3, #7
 800bb12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f023 0307 	bic.w	r3, r3, #7
 800bb1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	4a1f      	ldr	r2, [pc, #124]	; (800bba0 <prvHeapInit+0xac>)
 800bb24:	4413      	add	r3, r2
 800bb26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb2c:	4a1d      	ldr	r2, [pc, #116]	; (800bba4 <prvHeapInit+0xb0>)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb32:	4b1c      	ldr	r3, [pc, #112]	; (800bba4 <prvHeapInit+0xb0>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb40:	2208      	movs	r2, #8
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	1a9b      	subs	r3, r3, r2
 800bb46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f023 0307 	bic.w	r3, r3, #7
 800bb4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4a15      	ldr	r2, [pc, #84]	; (800bba8 <prvHeapInit+0xb4>)
 800bb54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb56:	4b14      	ldr	r3, [pc, #80]	; (800bba8 <prvHeapInit+0xb4>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb5e:	4b12      	ldr	r3, [pc, #72]	; (800bba8 <prvHeapInit+0xb4>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2200      	movs	r2, #0
 800bb64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	1ad2      	subs	r2, r2, r3
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb74:	4b0c      	ldr	r3, [pc, #48]	; (800bba8 <prvHeapInit+0xb4>)
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	4a0a      	ldr	r2, [pc, #40]	; (800bbac <prvHeapInit+0xb8>)
 800bb82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	4a09      	ldr	r2, [pc, #36]	; (800bbb0 <prvHeapInit+0xbc>)
 800bb8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb8c:	4b09      	ldr	r3, [pc, #36]	; (800bbb4 <prvHeapInit+0xc0>)
 800bb8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb92:	601a      	str	r2, [r3, #0]
}
 800bb94:	bf00      	nop
 800bb96:	3714      	adds	r7, #20
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	200015b4 	.word	0x200015b4
 800bba4:	200051b4 	.word	0x200051b4
 800bba8:	200051bc 	.word	0x200051bc
 800bbac:	200051c4 	.word	0x200051c4
 800bbb0:	200051c0 	.word	0x200051c0
 800bbb4:	200051c8 	.word	0x200051c8

0800bbb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bbc0:	4b28      	ldr	r3, [pc, #160]	; (800bc64 <prvInsertBlockIntoFreeList+0xac>)
 800bbc2:	60fb      	str	r3, [r7, #12]
 800bbc4:	e002      	b.n	800bbcc <prvInsertBlockIntoFreeList+0x14>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	60fb      	str	r3, [r7, #12]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d8f7      	bhi.n	800bbc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	68ba      	ldr	r2, [r7, #8]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d108      	bne.n	800bbfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	685a      	ldr	r2, [r3, #4]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	441a      	add	r2, r3
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	68ba      	ldr	r2, [r7, #8]
 800bc04:	441a      	add	r2, r3
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d118      	bne.n	800bc40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	4b15      	ldr	r3, [pc, #84]	; (800bc68 <prvInsertBlockIntoFreeList+0xb0>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d00d      	beq.n	800bc36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	685a      	ldr	r2, [r3, #4]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	441a      	add	r2, r3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	601a      	str	r2, [r3, #0]
 800bc34:	e008      	b.n	800bc48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc36:	4b0c      	ldr	r3, [pc, #48]	; (800bc68 <prvInsertBlockIntoFreeList+0xb0>)
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	601a      	str	r2, [r3, #0]
 800bc3e:	e003      	b.n	800bc48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d002      	beq.n	800bc56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc56:	bf00      	nop
 800bc58:	3714      	adds	r7, #20
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop
 800bc64:	200051b4 	.word	0x200051b4
 800bc68:	200051bc 	.word	0x200051bc

0800bc6c <std>:
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	b510      	push	{r4, lr}
 800bc70:	4604      	mov	r4, r0
 800bc72:	e9c0 3300 	strd	r3, r3, [r0]
 800bc76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc7a:	6083      	str	r3, [r0, #8]
 800bc7c:	8181      	strh	r1, [r0, #12]
 800bc7e:	6643      	str	r3, [r0, #100]	; 0x64
 800bc80:	81c2      	strh	r2, [r0, #14]
 800bc82:	6183      	str	r3, [r0, #24]
 800bc84:	4619      	mov	r1, r3
 800bc86:	2208      	movs	r2, #8
 800bc88:	305c      	adds	r0, #92	; 0x5c
 800bc8a:	f000 f8f4 	bl	800be76 <memset>
 800bc8e:	4b05      	ldr	r3, [pc, #20]	; (800bca4 <std+0x38>)
 800bc90:	6263      	str	r3, [r4, #36]	; 0x24
 800bc92:	4b05      	ldr	r3, [pc, #20]	; (800bca8 <std+0x3c>)
 800bc94:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc96:	4b05      	ldr	r3, [pc, #20]	; (800bcac <std+0x40>)
 800bc98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc9a:	4b05      	ldr	r3, [pc, #20]	; (800bcb0 <std+0x44>)
 800bc9c:	6224      	str	r4, [r4, #32]
 800bc9e:	6323      	str	r3, [r4, #48]	; 0x30
 800bca0:	bd10      	pop	{r4, pc}
 800bca2:	bf00      	nop
 800bca4:	0800bdf1 	.word	0x0800bdf1
 800bca8:	0800be13 	.word	0x0800be13
 800bcac:	0800be4b 	.word	0x0800be4b
 800bcb0:	0800be6f 	.word	0x0800be6f

0800bcb4 <stdio_exit_handler>:
 800bcb4:	4a02      	ldr	r2, [pc, #8]	; (800bcc0 <stdio_exit_handler+0xc>)
 800bcb6:	4903      	ldr	r1, [pc, #12]	; (800bcc4 <stdio_exit_handler+0x10>)
 800bcb8:	4803      	ldr	r0, [pc, #12]	; (800bcc8 <stdio_exit_handler+0x14>)
 800bcba:	f000 b869 	b.w	800bd90 <_fwalk_sglue>
 800bcbe:	bf00      	nop
 800bcc0:	20000064 	.word	0x20000064
 800bcc4:	0800c8f5 	.word	0x0800c8f5
 800bcc8:	20000070 	.word	0x20000070

0800bccc <cleanup_stdio>:
 800bccc:	6841      	ldr	r1, [r0, #4]
 800bcce:	4b0c      	ldr	r3, [pc, #48]	; (800bd00 <cleanup_stdio+0x34>)
 800bcd0:	4299      	cmp	r1, r3
 800bcd2:	b510      	push	{r4, lr}
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	d001      	beq.n	800bcdc <cleanup_stdio+0x10>
 800bcd8:	f000 fe0c 	bl	800c8f4 <_fflush_r>
 800bcdc:	68a1      	ldr	r1, [r4, #8]
 800bcde:	4b09      	ldr	r3, [pc, #36]	; (800bd04 <cleanup_stdio+0x38>)
 800bce0:	4299      	cmp	r1, r3
 800bce2:	d002      	beq.n	800bcea <cleanup_stdio+0x1e>
 800bce4:	4620      	mov	r0, r4
 800bce6:	f000 fe05 	bl	800c8f4 <_fflush_r>
 800bcea:	68e1      	ldr	r1, [r4, #12]
 800bcec:	4b06      	ldr	r3, [pc, #24]	; (800bd08 <cleanup_stdio+0x3c>)
 800bcee:	4299      	cmp	r1, r3
 800bcf0:	d004      	beq.n	800bcfc <cleanup_stdio+0x30>
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcf8:	f000 bdfc 	b.w	800c8f4 <_fflush_r>
 800bcfc:	bd10      	pop	{r4, pc}
 800bcfe:	bf00      	nop
 800bd00:	200051cc 	.word	0x200051cc
 800bd04:	20005234 	.word	0x20005234
 800bd08:	2000529c 	.word	0x2000529c

0800bd0c <global_stdio_init.part.0>:
 800bd0c:	b510      	push	{r4, lr}
 800bd0e:	4b0b      	ldr	r3, [pc, #44]	; (800bd3c <global_stdio_init.part.0+0x30>)
 800bd10:	4c0b      	ldr	r4, [pc, #44]	; (800bd40 <global_stdio_init.part.0+0x34>)
 800bd12:	4a0c      	ldr	r2, [pc, #48]	; (800bd44 <global_stdio_init.part.0+0x38>)
 800bd14:	601a      	str	r2, [r3, #0]
 800bd16:	4620      	mov	r0, r4
 800bd18:	2200      	movs	r2, #0
 800bd1a:	2104      	movs	r1, #4
 800bd1c:	f7ff ffa6 	bl	800bc6c <std>
 800bd20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bd24:	2201      	movs	r2, #1
 800bd26:	2109      	movs	r1, #9
 800bd28:	f7ff ffa0 	bl	800bc6c <std>
 800bd2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bd30:	2202      	movs	r2, #2
 800bd32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd36:	2112      	movs	r1, #18
 800bd38:	f7ff bf98 	b.w	800bc6c <std>
 800bd3c:	20005304 	.word	0x20005304
 800bd40:	200051cc 	.word	0x200051cc
 800bd44:	0800bcb5 	.word	0x0800bcb5

0800bd48 <__sfp_lock_acquire>:
 800bd48:	4801      	ldr	r0, [pc, #4]	; (800bd50 <__sfp_lock_acquire+0x8>)
 800bd4a:	f000 b971 	b.w	800c030 <__retarget_lock_acquire_recursive>
 800bd4e:	bf00      	nop
 800bd50:	2000530d 	.word	0x2000530d

0800bd54 <__sfp_lock_release>:
 800bd54:	4801      	ldr	r0, [pc, #4]	; (800bd5c <__sfp_lock_release+0x8>)
 800bd56:	f000 b96c 	b.w	800c032 <__retarget_lock_release_recursive>
 800bd5a:	bf00      	nop
 800bd5c:	2000530d 	.word	0x2000530d

0800bd60 <__sinit>:
 800bd60:	b510      	push	{r4, lr}
 800bd62:	4604      	mov	r4, r0
 800bd64:	f7ff fff0 	bl	800bd48 <__sfp_lock_acquire>
 800bd68:	6a23      	ldr	r3, [r4, #32]
 800bd6a:	b11b      	cbz	r3, 800bd74 <__sinit+0x14>
 800bd6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd70:	f7ff bff0 	b.w	800bd54 <__sfp_lock_release>
 800bd74:	4b04      	ldr	r3, [pc, #16]	; (800bd88 <__sinit+0x28>)
 800bd76:	6223      	str	r3, [r4, #32]
 800bd78:	4b04      	ldr	r3, [pc, #16]	; (800bd8c <__sinit+0x2c>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d1f5      	bne.n	800bd6c <__sinit+0xc>
 800bd80:	f7ff ffc4 	bl	800bd0c <global_stdio_init.part.0>
 800bd84:	e7f2      	b.n	800bd6c <__sinit+0xc>
 800bd86:	bf00      	nop
 800bd88:	0800bccd 	.word	0x0800bccd
 800bd8c:	20005304 	.word	0x20005304

0800bd90 <_fwalk_sglue>:
 800bd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd94:	4607      	mov	r7, r0
 800bd96:	4688      	mov	r8, r1
 800bd98:	4614      	mov	r4, r2
 800bd9a:	2600      	movs	r6, #0
 800bd9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bda0:	f1b9 0901 	subs.w	r9, r9, #1
 800bda4:	d505      	bpl.n	800bdb2 <_fwalk_sglue+0x22>
 800bda6:	6824      	ldr	r4, [r4, #0]
 800bda8:	2c00      	cmp	r4, #0
 800bdaa:	d1f7      	bne.n	800bd9c <_fwalk_sglue+0xc>
 800bdac:	4630      	mov	r0, r6
 800bdae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdb2:	89ab      	ldrh	r3, [r5, #12]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d907      	bls.n	800bdc8 <_fwalk_sglue+0x38>
 800bdb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	d003      	beq.n	800bdc8 <_fwalk_sglue+0x38>
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	4638      	mov	r0, r7
 800bdc4:	47c0      	blx	r8
 800bdc6:	4306      	orrs	r6, r0
 800bdc8:	3568      	adds	r5, #104	; 0x68
 800bdca:	e7e9      	b.n	800bda0 <_fwalk_sglue+0x10>

0800bdcc <iprintf>:
 800bdcc:	b40f      	push	{r0, r1, r2, r3}
 800bdce:	b507      	push	{r0, r1, r2, lr}
 800bdd0:	4906      	ldr	r1, [pc, #24]	; (800bdec <iprintf+0x20>)
 800bdd2:	ab04      	add	r3, sp, #16
 800bdd4:	6808      	ldr	r0, [r1, #0]
 800bdd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdda:	6881      	ldr	r1, [r0, #8]
 800bddc:	9301      	str	r3, [sp, #4]
 800bdde:	f000 fa59 	bl	800c294 <_vfiprintf_r>
 800bde2:	b003      	add	sp, #12
 800bde4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bde8:	b004      	add	sp, #16
 800bdea:	4770      	bx	lr
 800bdec:	200000bc 	.word	0x200000bc

0800bdf0 <__sread>:
 800bdf0:	b510      	push	{r4, lr}
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdf8:	f000 f8cc 	bl	800bf94 <_read_r>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	bfab      	itete	ge
 800be00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be02:	89a3      	ldrhlt	r3, [r4, #12]
 800be04:	181b      	addge	r3, r3, r0
 800be06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be0a:	bfac      	ite	ge
 800be0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800be0e:	81a3      	strhlt	r3, [r4, #12]
 800be10:	bd10      	pop	{r4, pc}

0800be12 <__swrite>:
 800be12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be16:	461f      	mov	r7, r3
 800be18:	898b      	ldrh	r3, [r1, #12]
 800be1a:	05db      	lsls	r3, r3, #23
 800be1c:	4605      	mov	r5, r0
 800be1e:	460c      	mov	r4, r1
 800be20:	4616      	mov	r6, r2
 800be22:	d505      	bpl.n	800be30 <__swrite+0x1e>
 800be24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be28:	2302      	movs	r3, #2
 800be2a:	2200      	movs	r2, #0
 800be2c:	f000 f8a0 	bl	800bf70 <_lseek_r>
 800be30:	89a3      	ldrh	r3, [r4, #12]
 800be32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be3a:	81a3      	strh	r3, [r4, #12]
 800be3c:	4632      	mov	r2, r6
 800be3e:	463b      	mov	r3, r7
 800be40:	4628      	mov	r0, r5
 800be42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be46:	f000 b8b7 	b.w	800bfb8 <_write_r>

0800be4a <__sseek>:
 800be4a:	b510      	push	{r4, lr}
 800be4c:	460c      	mov	r4, r1
 800be4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be52:	f000 f88d 	bl	800bf70 <_lseek_r>
 800be56:	1c43      	adds	r3, r0, #1
 800be58:	89a3      	ldrh	r3, [r4, #12]
 800be5a:	bf15      	itete	ne
 800be5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800be5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be66:	81a3      	strheq	r3, [r4, #12]
 800be68:	bf18      	it	ne
 800be6a:	81a3      	strhne	r3, [r4, #12]
 800be6c:	bd10      	pop	{r4, pc}

0800be6e <__sclose>:
 800be6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be72:	f000 b817 	b.w	800bea4 <_close_r>

0800be76 <memset>:
 800be76:	4402      	add	r2, r0
 800be78:	4603      	mov	r3, r0
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d100      	bne.n	800be80 <memset+0xa>
 800be7e:	4770      	bx	lr
 800be80:	f803 1b01 	strb.w	r1, [r3], #1
 800be84:	e7f9      	b.n	800be7a <memset+0x4>

0800be86 <strcat>:
 800be86:	b510      	push	{r4, lr}
 800be88:	4602      	mov	r2, r0
 800be8a:	7814      	ldrb	r4, [r2, #0]
 800be8c:	4613      	mov	r3, r2
 800be8e:	3201      	adds	r2, #1
 800be90:	2c00      	cmp	r4, #0
 800be92:	d1fa      	bne.n	800be8a <strcat+0x4>
 800be94:	3b01      	subs	r3, #1
 800be96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be9e:	2a00      	cmp	r2, #0
 800bea0:	d1f9      	bne.n	800be96 <strcat+0x10>
 800bea2:	bd10      	pop	{r4, pc}

0800bea4 <_close_r>:
 800bea4:	b538      	push	{r3, r4, r5, lr}
 800bea6:	4d06      	ldr	r5, [pc, #24]	; (800bec0 <_close_r+0x1c>)
 800bea8:	2300      	movs	r3, #0
 800beaa:	4604      	mov	r4, r0
 800beac:	4608      	mov	r0, r1
 800beae:	602b      	str	r3, [r5, #0]
 800beb0:	f7f6 fa57 	bl	8002362 <_close>
 800beb4:	1c43      	adds	r3, r0, #1
 800beb6:	d102      	bne.n	800bebe <_close_r+0x1a>
 800beb8:	682b      	ldr	r3, [r5, #0]
 800beba:	b103      	cbz	r3, 800bebe <_close_r+0x1a>
 800bebc:	6023      	str	r3, [r4, #0]
 800bebe:	bd38      	pop	{r3, r4, r5, pc}
 800bec0:	20005308 	.word	0x20005308

0800bec4 <_reclaim_reent>:
 800bec4:	4b29      	ldr	r3, [pc, #164]	; (800bf6c <_reclaim_reent+0xa8>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4283      	cmp	r3, r0
 800beca:	b570      	push	{r4, r5, r6, lr}
 800becc:	4604      	mov	r4, r0
 800bece:	d04b      	beq.n	800bf68 <_reclaim_reent+0xa4>
 800bed0:	69c3      	ldr	r3, [r0, #28]
 800bed2:	b143      	cbz	r3, 800bee6 <_reclaim_reent+0x22>
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d144      	bne.n	800bf64 <_reclaim_reent+0xa0>
 800beda:	69e3      	ldr	r3, [r4, #28]
 800bedc:	6819      	ldr	r1, [r3, #0]
 800bede:	b111      	cbz	r1, 800bee6 <_reclaim_reent+0x22>
 800bee0:	4620      	mov	r0, r4
 800bee2:	f000 f8b5 	bl	800c050 <_free_r>
 800bee6:	6961      	ldr	r1, [r4, #20]
 800bee8:	b111      	cbz	r1, 800bef0 <_reclaim_reent+0x2c>
 800beea:	4620      	mov	r0, r4
 800beec:	f000 f8b0 	bl	800c050 <_free_r>
 800bef0:	69e1      	ldr	r1, [r4, #28]
 800bef2:	b111      	cbz	r1, 800befa <_reclaim_reent+0x36>
 800bef4:	4620      	mov	r0, r4
 800bef6:	f000 f8ab 	bl	800c050 <_free_r>
 800befa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800befc:	b111      	cbz	r1, 800bf04 <_reclaim_reent+0x40>
 800befe:	4620      	mov	r0, r4
 800bf00:	f000 f8a6 	bl	800c050 <_free_r>
 800bf04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf06:	b111      	cbz	r1, 800bf0e <_reclaim_reent+0x4a>
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f000 f8a1 	bl	800c050 <_free_r>
 800bf0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bf10:	b111      	cbz	r1, 800bf18 <_reclaim_reent+0x54>
 800bf12:	4620      	mov	r0, r4
 800bf14:	f000 f89c 	bl	800c050 <_free_r>
 800bf18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bf1a:	b111      	cbz	r1, 800bf22 <_reclaim_reent+0x5e>
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	f000 f897 	bl	800c050 <_free_r>
 800bf22:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bf24:	b111      	cbz	r1, 800bf2c <_reclaim_reent+0x68>
 800bf26:	4620      	mov	r0, r4
 800bf28:	f000 f892 	bl	800c050 <_free_r>
 800bf2c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bf2e:	b111      	cbz	r1, 800bf36 <_reclaim_reent+0x72>
 800bf30:	4620      	mov	r0, r4
 800bf32:	f000 f88d 	bl	800c050 <_free_r>
 800bf36:	6a23      	ldr	r3, [r4, #32]
 800bf38:	b1b3      	cbz	r3, 800bf68 <_reclaim_reent+0xa4>
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf40:	4718      	bx	r3
 800bf42:	5949      	ldr	r1, [r1, r5]
 800bf44:	b941      	cbnz	r1, 800bf58 <_reclaim_reent+0x94>
 800bf46:	3504      	adds	r5, #4
 800bf48:	69e3      	ldr	r3, [r4, #28]
 800bf4a:	2d80      	cmp	r5, #128	; 0x80
 800bf4c:	68d9      	ldr	r1, [r3, #12]
 800bf4e:	d1f8      	bne.n	800bf42 <_reclaim_reent+0x7e>
 800bf50:	4620      	mov	r0, r4
 800bf52:	f000 f87d 	bl	800c050 <_free_r>
 800bf56:	e7c0      	b.n	800beda <_reclaim_reent+0x16>
 800bf58:	680e      	ldr	r6, [r1, #0]
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f000 f878 	bl	800c050 <_free_r>
 800bf60:	4631      	mov	r1, r6
 800bf62:	e7ef      	b.n	800bf44 <_reclaim_reent+0x80>
 800bf64:	2500      	movs	r5, #0
 800bf66:	e7ef      	b.n	800bf48 <_reclaim_reent+0x84>
 800bf68:	bd70      	pop	{r4, r5, r6, pc}
 800bf6a:	bf00      	nop
 800bf6c:	200000bc 	.word	0x200000bc

0800bf70 <_lseek_r>:
 800bf70:	b538      	push	{r3, r4, r5, lr}
 800bf72:	4d07      	ldr	r5, [pc, #28]	; (800bf90 <_lseek_r+0x20>)
 800bf74:	4604      	mov	r4, r0
 800bf76:	4608      	mov	r0, r1
 800bf78:	4611      	mov	r1, r2
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	602a      	str	r2, [r5, #0]
 800bf7e:	461a      	mov	r2, r3
 800bf80:	f7f6 fa16 	bl	80023b0 <_lseek>
 800bf84:	1c43      	adds	r3, r0, #1
 800bf86:	d102      	bne.n	800bf8e <_lseek_r+0x1e>
 800bf88:	682b      	ldr	r3, [r5, #0]
 800bf8a:	b103      	cbz	r3, 800bf8e <_lseek_r+0x1e>
 800bf8c:	6023      	str	r3, [r4, #0]
 800bf8e:	bd38      	pop	{r3, r4, r5, pc}
 800bf90:	20005308 	.word	0x20005308

0800bf94 <_read_r>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	4d07      	ldr	r5, [pc, #28]	; (800bfb4 <_read_r+0x20>)
 800bf98:	4604      	mov	r4, r0
 800bf9a:	4608      	mov	r0, r1
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	602a      	str	r2, [r5, #0]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	f7f6 f9a4 	bl	80022f0 <_read>
 800bfa8:	1c43      	adds	r3, r0, #1
 800bfaa:	d102      	bne.n	800bfb2 <_read_r+0x1e>
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	b103      	cbz	r3, 800bfb2 <_read_r+0x1e>
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	bd38      	pop	{r3, r4, r5, pc}
 800bfb4:	20005308 	.word	0x20005308

0800bfb8 <_write_r>:
 800bfb8:	b538      	push	{r3, r4, r5, lr}
 800bfba:	4d07      	ldr	r5, [pc, #28]	; (800bfd8 <_write_r+0x20>)
 800bfbc:	4604      	mov	r4, r0
 800bfbe:	4608      	mov	r0, r1
 800bfc0:	4611      	mov	r1, r2
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	602a      	str	r2, [r5, #0]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	f7f6 f9af 	bl	800232a <_write>
 800bfcc:	1c43      	adds	r3, r0, #1
 800bfce:	d102      	bne.n	800bfd6 <_write_r+0x1e>
 800bfd0:	682b      	ldr	r3, [r5, #0]
 800bfd2:	b103      	cbz	r3, 800bfd6 <_write_r+0x1e>
 800bfd4:	6023      	str	r3, [r4, #0]
 800bfd6:	bd38      	pop	{r3, r4, r5, pc}
 800bfd8:	20005308 	.word	0x20005308

0800bfdc <__errno>:
 800bfdc:	4b01      	ldr	r3, [pc, #4]	; (800bfe4 <__errno+0x8>)
 800bfde:	6818      	ldr	r0, [r3, #0]
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop
 800bfe4:	200000bc 	.word	0x200000bc

0800bfe8 <__libc_init_array>:
 800bfe8:	b570      	push	{r4, r5, r6, lr}
 800bfea:	4d0d      	ldr	r5, [pc, #52]	; (800c020 <__libc_init_array+0x38>)
 800bfec:	4c0d      	ldr	r4, [pc, #52]	; (800c024 <__libc_init_array+0x3c>)
 800bfee:	1b64      	subs	r4, r4, r5
 800bff0:	10a4      	asrs	r4, r4, #2
 800bff2:	2600      	movs	r6, #0
 800bff4:	42a6      	cmp	r6, r4
 800bff6:	d109      	bne.n	800c00c <__libc_init_array+0x24>
 800bff8:	4d0b      	ldr	r5, [pc, #44]	; (800c028 <__libc_init_array+0x40>)
 800bffa:	4c0c      	ldr	r4, [pc, #48]	; (800c02c <__libc_init_array+0x44>)
 800bffc:	f000 fdcc 	bl	800cb98 <_init>
 800c000:	1b64      	subs	r4, r4, r5
 800c002:	10a4      	asrs	r4, r4, #2
 800c004:	2600      	movs	r6, #0
 800c006:	42a6      	cmp	r6, r4
 800c008:	d105      	bne.n	800c016 <__libc_init_array+0x2e>
 800c00a:	bd70      	pop	{r4, r5, r6, pc}
 800c00c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c010:	4798      	blx	r3
 800c012:	3601      	adds	r6, #1
 800c014:	e7ee      	b.n	800bff4 <__libc_init_array+0xc>
 800c016:	f855 3b04 	ldr.w	r3, [r5], #4
 800c01a:	4798      	blx	r3
 800c01c:	3601      	adds	r6, #1
 800c01e:	e7f2      	b.n	800c006 <__libc_init_array+0x1e>
 800c020:	0800e5cc 	.word	0x0800e5cc
 800c024:	0800e5cc 	.word	0x0800e5cc
 800c028:	0800e5cc 	.word	0x0800e5cc
 800c02c:	0800e5d0 	.word	0x0800e5d0

0800c030 <__retarget_lock_acquire_recursive>:
 800c030:	4770      	bx	lr

0800c032 <__retarget_lock_release_recursive>:
 800c032:	4770      	bx	lr

0800c034 <memcpy>:
 800c034:	440a      	add	r2, r1
 800c036:	4291      	cmp	r1, r2
 800c038:	f100 33ff 	add.w	r3, r0, #4294967295
 800c03c:	d100      	bne.n	800c040 <memcpy+0xc>
 800c03e:	4770      	bx	lr
 800c040:	b510      	push	{r4, lr}
 800c042:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c04a:	4291      	cmp	r1, r2
 800c04c:	d1f9      	bne.n	800c042 <memcpy+0xe>
 800c04e:	bd10      	pop	{r4, pc}

0800c050 <_free_r>:
 800c050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c052:	2900      	cmp	r1, #0
 800c054:	d044      	beq.n	800c0e0 <_free_r+0x90>
 800c056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c05a:	9001      	str	r0, [sp, #4]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f1a1 0404 	sub.w	r4, r1, #4
 800c062:	bfb8      	it	lt
 800c064:	18e4      	addlt	r4, r4, r3
 800c066:	f000 f8df 	bl	800c228 <__malloc_lock>
 800c06a:	4a1e      	ldr	r2, [pc, #120]	; (800c0e4 <_free_r+0x94>)
 800c06c:	9801      	ldr	r0, [sp, #4]
 800c06e:	6813      	ldr	r3, [r2, #0]
 800c070:	b933      	cbnz	r3, 800c080 <_free_r+0x30>
 800c072:	6063      	str	r3, [r4, #4]
 800c074:	6014      	str	r4, [r2, #0]
 800c076:	b003      	add	sp, #12
 800c078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c07c:	f000 b8da 	b.w	800c234 <__malloc_unlock>
 800c080:	42a3      	cmp	r3, r4
 800c082:	d908      	bls.n	800c096 <_free_r+0x46>
 800c084:	6825      	ldr	r5, [r4, #0]
 800c086:	1961      	adds	r1, r4, r5
 800c088:	428b      	cmp	r3, r1
 800c08a:	bf01      	itttt	eq
 800c08c:	6819      	ldreq	r1, [r3, #0]
 800c08e:	685b      	ldreq	r3, [r3, #4]
 800c090:	1949      	addeq	r1, r1, r5
 800c092:	6021      	streq	r1, [r4, #0]
 800c094:	e7ed      	b.n	800c072 <_free_r+0x22>
 800c096:	461a      	mov	r2, r3
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	b10b      	cbz	r3, 800c0a0 <_free_r+0x50>
 800c09c:	42a3      	cmp	r3, r4
 800c09e:	d9fa      	bls.n	800c096 <_free_r+0x46>
 800c0a0:	6811      	ldr	r1, [r2, #0]
 800c0a2:	1855      	adds	r5, r2, r1
 800c0a4:	42a5      	cmp	r5, r4
 800c0a6:	d10b      	bne.n	800c0c0 <_free_r+0x70>
 800c0a8:	6824      	ldr	r4, [r4, #0]
 800c0aa:	4421      	add	r1, r4
 800c0ac:	1854      	adds	r4, r2, r1
 800c0ae:	42a3      	cmp	r3, r4
 800c0b0:	6011      	str	r1, [r2, #0]
 800c0b2:	d1e0      	bne.n	800c076 <_free_r+0x26>
 800c0b4:	681c      	ldr	r4, [r3, #0]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	6053      	str	r3, [r2, #4]
 800c0ba:	440c      	add	r4, r1
 800c0bc:	6014      	str	r4, [r2, #0]
 800c0be:	e7da      	b.n	800c076 <_free_r+0x26>
 800c0c0:	d902      	bls.n	800c0c8 <_free_r+0x78>
 800c0c2:	230c      	movs	r3, #12
 800c0c4:	6003      	str	r3, [r0, #0]
 800c0c6:	e7d6      	b.n	800c076 <_free_r+0x26>
 800c0c8:	6825      	ldr	r5, [r4, #0]
 800c0ca:	1961      	adds	r1, r4, r5
 800c0cc:	428b      	cmp	r3, r1
 800c0ce:	bf04      	itt	eq
 800c0d0:	6819      	ldreq	r1, [r3, #0]
 800c0d2:	685b      	ldreq	r3, [r3, #4]
 800c0d4:	6063      	str	r3, [r4, #4]
 800c0d6:	bf04      	itt	eq
 800c0d8:	1949      	addeq	r1, r1, r5
 800c0da:	6021      	streq	r1, [r4, #0]
 800c0dc:	6054      	str	r4, [r2, #4]
 800c0de:	e7ca      	b.n	800c076 <_free_r+0x26>
 800c0e0:	b003      	add	sp, #12
 800c0e2:	bd30      	pop	{r4, r5, pc}
 800c0e4:	20005310 	.word	0x20005310

0800c0e8 <sbrk_aligned>:
 800c0e8:	b570      	push	{r4, r5, r6, lr}
 800c0ea:	4e0e      	ldr	r6, [pc, #56]	; (800c124 <sbrk_aligned+0x3c>)
 800c0ec:	460c      	mov	r4, r1
 800c0ee:	6831      	ldr	r1, [r6, #0]
 800c0f0:	4605      	mov	r5, r0
 800c0f2:	b911      	cbnz	r1, 800c0fa <sbrk_aligned+0x12>
 800c0f4:	f000 fcbc 	bl	800ca70 <_sbrk_r>
 800c0f8:	6030      	str	r0, [r6, #0]
 800c0fa:	4621      	mov	r1, r4
 800c0fc:	4628      	mov	r0, r5
 800c0fe:	f000 fcb7 	bl	800ca70 <_sbrk_r>
 800c102:	1c43      	adds	r3, r0, #1
 800c104:	d00a      	beq.n	800c11c <sbrk_aligned+0x34>
 800c106:	1cc4      	adds	r4, r0, #3
 800c108:	f024 0403 	bic.w	r4, r4, #3
 800c10c:	42a0      	cmp	r0, r4
 800c10e:	d007      	beq.n	800c120 <sbrk_aligned+0x38>
 800c110:	1a21      	subs	r1, r4, r0
 800c112:	4628      	mov	r0, r5
 800c114:	f000 fcac 	bl	800ca70 <_sbrk_r>
 800c118:	3001      	adds	r0, #1
 800c11a:	d101      	bne.n	800c120 <sbrk_aligned+0x38>
 800c11c:	f04f 34ff 	mov.w	r4, #4294967295
 800c120:	4620      	mov	r0, r4
 800c122:	bd70      	pop	{r4, r5, r6, pc}
 800c124:	20005314 	.word	0x20005314

0800c128 <_malloc_r>:
 800c128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c12c:	1ccd      	adds	r5, r1, #3
 800c12e:	f025 0503 	bic.w	r5, r5, #3
 800c132:	3508      	adds	r5, #8
 800c134:	2d0c      	cmp	r5, #12
 800c136:	bf38      	it	cc
 800c138:	250c      	movcc	r5, #12
 800c13a:	2d00      	cmp	r5, #0
 800c13c:	4607      	mov	r7, r0
 800c13e:	db01      	blt.n	800c144 <_malloc_r+0x1c>
 800c140:	42a9      	cmp	r1, r5
 800c142:	d905      	bls.n	800c150 <_malloc_r+0x28>
 800c144:	230c      	movs	r3, #12
 800c146:	603b      	str	r3, [r7, #0]
 800c148:	2600      	movs	r6, #0
 800c14a:	4630      	mov	r0, r6
 800c14c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c150:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c224 <_malloc_r+0xfc>
 800c154:	f000 f868 	bl	800c228 <__malloc_lock>
 800c158:	f8d8 3000 	ldr.w	r3, [r8]
 800c15c:	461c      	mov	r4, r3
 800c15e:	bb5c      	cbnz	r4, 800c1b8 <_malloc_r+0x90>
 800c160:	4629      	mov	r1, r5
 800c162:	4638      	mov	r0, r7
 800c164:	f7ff ffc0 	bl	800c0e8 <sbrk_aligned>
 800c168:	1c43      	adds	r3, r0, #1
 800c16a:	4604      	mov	r4, r0
 800c16c:	d155      	bne.n	800c21a <_malloc_r+0xf2>
 800c16e:	f8d8 4000 	ldr.w	r4, [r8]
 800c172:	4626      	mov	r6, r4
 800c174:	2e00      	cmp	r6, #0
 800c176:	d145      	bne.n	800c204 <_malloc_r+0xdc>
 800c178:	2c00      	cmp	r4, #0
 800c17a:	d048      	beq.n	800c20e <_malloc_r+0xe6>
 800c17c:	6823      	ldr	r3, [r4, #0]
 800c17e:	4631      	mov	r1, r6
 800c180:	4638      	mov	r0, r7
 800c182:	eb04 0903 	add.w	r9, r4, r3
 800c186:	f000 fc73 	bl	800ca70 <_sbrk_r>
 800c18a:	4581      	cmp	r9, r0
 800c18c:	d13f      	bne.n	800c20e <_malloc_r+0xe6>
 800c18e:	6821      	ldr	r1, [r4, #0]
 800c190:	1a6d      	subs	r5, r5, r1
 800c192:	4629      	mov	r1, r5
 800c194:	4638      	mov	r0, r7
 800c196:	f7ff ffa7 	bl	800c0e8 <sbrk_aligned>
 800c19a:	3001      	adds	r0, #1
 800c19c:	d037      	beq.n	800c20e <_malloc_r+0xe6>
 800c19e:	6823      	ldr	r3, [r4, #0]
 800c1a0:	442b      	add	r3, r5
 800c1a2:	6023      	str	r3, [r4, #0]
 800c1a4:	f8d8 3000 	ldr.w	r3, [r8]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d038      	beq.n	800c21e <_malloc_r+0xf6>
 800c1ac:	685a      	ldr	r2, [r3, #4]
 800c1ae:	42a2      	cmp	r2, r4
 800c1b0:	d12b      	bne.n	800c20a <_malloc_r+0xe2>
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	605a      	str	r2, [r3, #4]
 800c1b6:	e00f      	b.n	800c1d8 <_malloc_r+0xb0>
 800c1b8:	6822      	ldr	r2, [r4, #0]
 800c1ba:	1b52      	subs	r2, r2, r5
 800c1bc:	d41f      	bmi.n	800c1fe <_malloc_r+0xd6>
 800c1be:	2a0b      	cmp	r2, #11
 800c1c0:	d917      	bls.n	800c1f2 <_malloc_r+0xca>
 800c1c2:	1961      	adds	r1, r4, r5
 800c1c4:	42a3      	cmp	r3, r4
 800c1c6:	6025      	str	r5, [r4, #0]
 800c1c8:	bf18      	it	ne
 800c1ca:	6059      	strne	r1, [r3, #4]
 800c1cc:	6863      	ldr	r3, [r4, #4]
 800c1ce:	bf08      	it	eq
 800c1d0:	f8c8 1000 	streq.w	r1, [r8]
 800c1d4:	5162      	str	r2, [r4, r5]
 800c1d6:	604b      	str	r3, [r1, #4]
 800c1d8:	4638      	mov	r0, r7
 800c1da:	f104 060b 	add.w	r6, r4, #11
 800c1de:	f000 f829 	bl	800c234 <__malloc_unlock>
 800c1e2:	f026 0607 	bic.w	r6, r6, #7
 800c1e6:	1d23      	adds	r3, r4, #4
 800c1e8:	1af2      	subs	r2, r6, r3
 800c1ea:	d0ae      	beq.n	800c14a <_malloc_r+0x22>
 800c1ec:	1b9b      	subs	r3, r3, r6
 800c1ee:	50a3      	str	r3, [r4, r2]
 800c1f0:	e7ab      	b.n	800c14a <_malloc_r+0x22>
 800c1f2:	42a3      	cmp	r3, r4
 800c1f4:	6862      	ldr	r2, [r4, #4]
 800c1f6:	d1dd      	bne.n	800c1b4 <_malloc_r+0x8c>
 800c1f8:	f8c8 2000 	str.w	r2, [r8]
 800c1fc:	e7ec      	b.n	800c1d8 <_malloc_r+0xb0>
 800c1fe:	4623      	mov	r3, r4
 800c200:	6864      	ldr	r4, [r4, #4]
 800c202:	e7ac      	b.n	800c15e <_malloc_r+0x36>
 800c204:	4634      	mov	r4, r6
 800c206:	6876      	ldr	r6, [r6, #4]
 800c208:	e7b4      	b.n	800c174 <_malloc_r+0x4c>
 800c20a:	4613      	mov	r3, r2
 800c20c:	e7cc      	b.n	800c1a8 <_malloc_r+0x80>
 800c20e:	230c      	movs	r3, #12
 800c210:	603b      	str	r3, [r7, #0]
 800c212:	4638      	mov	r0, r7
 800c214:	f000 f80e 	bl	800c234 <__malloc_unlock>
 800c218:	e797      	b.n	800c14a <_malloc_r+0x22>
 800c21a:	6025      	str	r5, [r4, #0]
 800c21c:	e7dc      	b.n	800c1d8 <_malloc_r+0xb0>
 800c21e:	605b      	str	r3, [r3, #4]
 800c220:	deff      	udf	#255	; 0xff
 800c222:	bf00      	nop
 800c224:	20005310 	.word	0x20005310

0800c228 <__malloc_lock>:
 800c228:	4801      	ldr	r0, [pc, #4]	; (800c230 <__malloc_lock+0x8>)
 800c22a:	f7ff bf01 	b.w	800c030 <__retarget_lock_acquire_recursive>
 800c22e:	bf00      	nop
 800c230:	2000530c 	.word	0x2000530c

0800c234 <__malloc_unlock>:
 800c234:	4801      	ldr	r0, [pc, #4]	; (800c23c <__malloc_unlock+0x8>)
 800c236:	f7ff befc 	b.w	800c032 <__retarget_lock_release_recursive>
 800c23a:	bf00      	nop
 800c23c:	2000530c 	.word	0x2000530c

0800c240 <__sfputc_r>:
 800c240:	6893      	ldr	r3, [r2, #8]
 800c242:	3b01      	subs	r3, #1
 800c244:	2b00      	cmp	r3, #0
 800c246:	b410      	push	{r4}
 800c248:	6093      	str	r3, [r2, #8]
 800c24a:	da08      	bge.n	800c25e <__sfputc_r+0x1e>
 800c24c:	6994      	ldr	r4, [r2, #24]
 800c24e:	42a3      	cmp	r3, r4
 800c250:	db01      	blt.n	800c256 <__sfputc_r+0x16>
 800c252:	290a      	cmp	r1, #10
 800c254:	d103      	bne.n	800c25e <__sfputc_r+0x1e>
 800c256:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c25a:	f000 bb73 	b.w	800c944 <__swbuf_r>
 800c25e:	6813      	ldr	r3, [r2, #0]
 800c260:	1c58      	adds	r0, r3, #1
 800c262:	6010      	str	r0, [r2, #0]
 800c264:	7019      	strb	r1, [r3, #0]
 800c266:	4608      	mov	r0, r1
 800c268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c26c:	4770      	bx	lr

0800c26e <__sfputs_r>:
 800c26e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c270:	4606      	mov	r6, r0
 800c272:	460f      	mov	r7, r1
 800c274:	4614      	mov	r4, r2
 800c276:	18d5      	adds	r5, r2, r3
 800c278:	42ac      	cmp	r4, r5
 800c27a:	d101      	bne.n	800c280 <__sfputs_r+0x12>
 800c27c:	2000      	movs	r0, #0
 800c27e:	e007      	b.n	800c290 <__sfputs_r+0x22>
 800c280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c284:	463a      	mov	r2, r7
 800c286:	4630      	mov	r0, r6
 800c288:	f7ff ffda 	bl	800c240 <__sfputc_r>
 800c28c:	1c43      	adds	r3, r0, #1
 800c28e:	d1f3      	bne.n	800c278 <__sfputs_r+0xa>
 800c290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c294 <_vfiprintf_r>:
 800c294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c298:	460d      	mov	r5, r1
 800c29a:	b09d      	sub	sp, #116	; 0x74
 800c29c:	4614      	mov	r4, r2
 800c29e:	4698      	mov	r8, r3
 800c2a0:	4606      	mov	r6, r0
 800c2a2:	b118      	cbz	r0, 800c2ac <_vfiprintf_r+0x18>
 800c2a4:	6a03      	ldr	r3, [r0, #32]
 800c2a6:	b90b      	cbnz	r3, 800c2ac <_vfiprintf_r+0x18>
 800c2a8:	f7ff fd5a 	bl	800bd60 <__sinit>
 800c2ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2ae:	07d9      	lsls	r1, r3, #31
 800c2b0:	d405      	bmi.n	800c2be <_vfiprintf_r+0x2a>
 800c2b2:	89ab      	ldrh	r3, [r5, #12]
 800c2b4:	059a      	lsls	r2, r3, #22
 800c2b6:	d402      	bmi.n	800c2be <_vfiprintf_r+0x2a>
 800c2b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2ba:	f7ff feb9 	bl	800c030 <__retarget_lock_acquire_recursive>
 800c2be:	89ab      	ldrh	r3, [r5, #12]
 800c2c0:	071b      	lsls	r3, r3, #28
 800c2c2:	d501      	bpl.n	800c2c8 <_vfiprintf_r+0x34>
 800c2c4:	692b      	ldr	r3, [r5, #16]
 800c2c6:	b99b      	cbnz	r3, 800c2f0 <_vfiprintf_r+0x5c>
 800c2c8:	4629      	mov	r1, r5
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	f000 fb78 	bl	800c9c0 <__swsetup_r>
 800c2d0:	b170      	cbz	r0, 800c2f0 <_vfiprintf_r+0x5c>
 800c2d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2d4:	07dc      	lsls	r4, r3, #31
 800c2d6:	d504      	bpl.n	800c2e2 <_vfiprintf_r+0x4e>
 800c2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2dc:	b01d      	add	sp, #116	; 0x74
 800c2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e2:	89ab      	ldrh	r3, [r5, #12]
 800c2e4:	0598      	lsls	r0, r3, #22
 800c2e6:	d4f7      	bmi.n	800c2d8 <_vfiprintf_r+0x44>
 800c2e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2ea:	f7ff fea2 	bl	800c032 <__retarget_lock_release_recursive>
 800c2ee:	e7f3      	b.n	800c2d8 <_vfiprintf_r+0x44>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2f4:	2320      	movs	r3, #32
 800c2f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2fe:	2330      	movs	r3, #48	; 0x30
 800c300:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c4b4 <_vfiprintf_r+0x220>
 800c304:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c308:	f04f 0901 	mov.w	r9, #1
 800c30c:	4623      	mov	r3, r4
 800c30e:	469a      	mov	sl, r3
 800c310:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c314:	b10a      	cbz	r2, 800c31a <_vfiprintf_r+0x86>
 800c316:	2a25      	cmp	r2, #37	; 0x25
 800c318:	d1f9      	bne.n	800c30e <_vfiprintf_r+0x7a>
 800c31a:	ebba 0b04 	subs.w	fp, sl, r4
 800c31e:	d00b      	beq.n	800c338 <_vfiprintf_r+0xa4>
 800c320:	465b      	mov	r3, fp
 800c322:	4622      	mov	r2, r4
 800c324:	4629      	mov	r1, r5
 800c326:	4630      	mov	r0, r6
 800c328:	f7ff ffa1 	bl	800c26e <__sfputs_r>
 800c32c:	3001      	adds	r0, #1
 800c32e:	f000 80a9 	beq.w	800c484 <_vfiprintf_r+0x1f0>
 800c332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c334:	445a      	add	r2, fp
 800c336:	9209      	str	r2, [sp, #36]	; 0x24
 800c338:	f89a 3000 	ldrb.w	r3, [sl]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f000 80a1 	beq.w	800c484 <_vfiprintf_r+0x1f0>
 800c342:	2300      	movs	r3, #0
 800c344:	f04f 32ff 	mov.w	r2, #4294967295
 800c348:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c34c:	f10a 0a01 	add.w	sl, sl, #1
 800c350:	9304      	str	r3, [sp, #16]
 800c352:	9307      	str	r3, [sp, #28]
 800c354:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c358:	931a      	str	r3, [sp, #104]	; 0x68
 800c35a:	4654      	mov	r4, sl
 800c35c:	2205      	movs	r2, #5
 800c35e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c362:	4854      	ldr	r0, [pc, #336]	; (800c4b4 <_vfiprintf_r+0x220>)
 800c364:	f7f3 ff6c 	bl	8000240 <memchr>
 800c368:	9a04      	ldr	r2, [sp, #16]
 800c36a:	b9d8      	cbnz	r0, 800c3a4 <_vfiprintf_r+0x110>
 800c36c:	06d1      	lsls	r1, r2, #27
 800c36e:	bf44      	itt	mi
 800c370:	2320      	movmi	r3, #32
 800c372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c376:	0713      	lsls	r3, r2, #28
 800c378:	bf44      	itt	mi
 800c37a:	232b      	movmi	r3, #43	; 0x2b
 800c37c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c380:	f89a 3000 	ldrb.w	r3, [sl]
 800c384:	2b2a      	cmp	r3, #42	; 0x2a
 800c386:	d015      	beq.n	800c3b4 <_vfiprintf_r+0x120>
 800c388:	9a07      	ldr	r2, [sp, #28]
 800c38a:	4654      	mov	r4, sl
 800c38c:	2000      	movs	r0, #0
 800c38e:	f04f 0c0a 	mov.w	ip, #10
 800c392:	4621      	mov	r1, r4
 800c394:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c398:	3b30      	subs	r3, #48	; 0x30
 800c39a:	2b09      	cmp	r3, #9
 800c39c:	d94d      	bls.n	800c43a <_vfiprintf_r+0x1a6>
 800c39e:	b1b0      	cbz	r0, 800c3ce <_vfiprintf_r+0x13a>
 800c3a0:	9207      	str	r2, [sp, #28]
 800c3a2:	e014      	b.n	800c3ce <_vfiprintf_r+0x13a>
 800c3a4:	eba0 0308 	sub.w	r3, r0, r8
 800c3a8:	fa09 f303 	lsl.w	r3, r9, r3
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	9304      	str	r3, [sp, #16]
 800c3b0:	46a2      	mov	sl, r4
 800c3b2:	e7d2      	b.n	800c35a <_vfiprintf_r+0xc6>
 800c3b4:	9b03      	ldr	r3, [sp, #12]
 800c3b6:	1d19      	adds	r1, r3, #4
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	9103      	str	r1, [sp, #12]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	bfbb      	ittet	lt
 800c3c0:	425b      	neglt	r3, r3
 800c3c2:	f042 0202 	orrlt.w	r2, r2, #2
 800c3c6:	9307      	strge	r3, [sp, #28]
 800c3c8:	9307      	strlt	r3, [sp, #28]
 800c3ca:	bfb8      	it	lt
 800c3cc:	9204      	strlt	r2, [sp, #16]
 800c3ce:	7823      	ldrb	r3, [r4, #0]
 800c3d0:	2b2e      	cmp	r3, #46	; 0x2e
 800c3d2:	d10c      	bne.n	800c3ee <_vfiprintf_r+0x15a>
 800c3d4:	7863      	ldrb	r3, [r4, #1]
 800c3d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c3d8:	d134      	bne.n	800c444 <_vfiprintf_r+0x1b0>
 800c3da:	9b03      	ldr	r3, [sp, #12]
 800c3dc:	1d1a      	adds	r2, r3, #4
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	9203      	str	r2, [sp, #12]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	bfb8      	it	lt
 800c3e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3ea:	3402      	adds	r4, #2
 800c3ec:	9305      	str	r3, [sp, #20]
 800c3ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c4c4 <_vfiprintf_r+0x230>
 800c3f2:	7821      	ldrb	r1, [r4, #0]
 800c3f4:	2203      	movs	r2, #3
 800c3f6:	4650      	mov	r0, sl
 800c3f8:	f7f3 ff22 	bl	8000240 <memchr>
 800c3fc:	b138      	cbz	r0, 800c40e <_vfiprintf_r+0x17a>
 800c3fe:	9b04      	ldr	r3, [sp, #16]
 800c400:	eba0 000a 	sub.w	r0, r0, sl
 800c404:	2240      	movs	r2, #64	; 0x40
 800c406:	4082      	lsls	r2, r0
 800c408:	4313      	orrs	r3, r2
 800c40a:	3401      	adds	r4, #1
 800c40c:	9304      	str	r3, [sp, #16]
 800c40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c412:	4829      	ldr	r0, [pc, #164]	; (800c4b8 <_vfiprintf_r+0x224>)
 800c414:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c418:	2206      	movs	r2, #6
 800c41a:	f7f3 ff11 	bl	8000240 <memchr>
 800c41e:	2800      	cmp	r0, #0
 800c420:	d03f      	beq.n	800c4a2 <_vfiprintf_r+0x20e>
 800c422:	4b26      	ldr	r3, [pc, #152]	; (800c4bc <_vfiprintf_r+0x228>)
 800c424:	bb1b      	cbnz	r3, 800c46e <_vfiprintf_r+0x1da>
 800c426:	9b03      	ldr	r3, [sp, #12]
 800c428:	3307      	adds	r3, #7
 800c42a:	f023 0307 	bic.w	r3, r3, #7
 800c42e:	3308      	adds	r3, #8
 800c430:	9303      	str	r3, [sp, #12]
 800c432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c434:	443b      	add	r3, r7
 800c436:	9309      	str	r3, [sp, #36]	; 0x24
 800c438:	e768      	b.n	800c30c <_vfiprintf_r+0x78>
 800c43a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c43e:	460c      	mov	r4, r1
 800c440:	2001      	movs	r0, #1
 800c442:	e7a6      	b.n	800c392 <_vfiprintf_r+0xfe>
 800c444:	2300      	movs	r3, #0
 800c446:	3401      	adds	r4, #1
 800c448:	9305      	str	r3, [sp, #20]
 800c44a:	4619      	mov	r1, r3
 800c44c:	f04f 0c0a 	mov.w	ip, #10
 800c450:	4620      	mov	r0, r4
 800c452:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c456:	3a30      	subs	r2, #48	; 0x30
 800c458:	2a09      	cmp	r2, #9
 800c45a:	d903      	bls.n	800c464 <_vfiprintf_r+0x1d0>
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d0c6      	beq.n	800c3ee <_vfiprintf_r+0x15a>
 800c460:	9105      	str	r1, [sp, #20]
 800c462:	e7c4      	b.n	800c3ee <_vfiprintf_r+0x15a>
 800c464:	fb0c 2101 	mla	r1, ip, r1, r2
 800c468:	4604      	mov	r4, r0
 800c46a:	2301      	movs	r3, #1
 800c46c:	e7f0      	b.n	800c450 <_vfiprintf_r+0x1bc>
 800c46e:	ab03      	add	r3, sp, #12
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	462a      	mov	r2, r5
 800c474:	4b12      	ldr	r3, [pc, #72]	; (800c4c0 <_vfiprintf_r+0x22c>)
 800c476:	a904      	add	r1, sp, #16
 800c478:	4630      	mov	r0, r6
 800c47a:	f3af 8000 	nop.w
 800c47e:	4607      	mov	r7, r0
 800c480:	1c78      	adds	r0, r7, #1
 800c482:	d1d6      	bne.n	800c432 <_vfiprintf_r+0x19e>
 800c484:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c486:	07d9      	lsls	r1, r3, #31
 800c488:	d405      	bmi.n	800c496 <_vfiprintf_r+0x202>
 800c48a:	89ab      	ldrh	r3, [r5, #12]
 800c48c:	059a      	lsls	r2, r3, #22
 800c48e:	d402      	bmi.n	800c496 <_vfiprintf_r+0x202>
 800c490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c492:	f7ff fdce 	bl	800c032 <__retarget_lock_release_recursive>
 800c496:	89ab      	ldrh	r3, [r5, #12]
 800c498:	065b      	lsls	r3, r3, #25
 800c49a:	f53f af1d 	bmi.w	800c2d8 <_vfiprintf_r+0x44>
 800c49e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4a0:	e71c      	b.n	800c2dc <_vfiprintf_r+0x48>
 800c4a2:	ab03      	add	r3, sp, #12
 800c4a4:	9300      	str	r3, [sp, #0]
 800c4a6:	462a      	mov	r2, r5
 800c4a8:	4b05      	ldr	r3, [pc, #20]	; (800c4c0 <_vfiprintf_r+0x22c>)
 800c4aa:	a904      	add	r1, sp, #16
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	f000 f879 	bl	800c5a4 <_printf_i>
 800c4b2:	e7e4      	b.n	800c47e <_vfiprintf_r+0x1ea>
 800c4b4:	0800e590 	.word	0x0800e590
 800c4b8:	0800e59a 	.word	0x0800e59a
 800c4bc:	00000000 	.word	0x00000000
 800c4c0:	0800c26f 	.word	0x0800c26f
 800c4c4:	0800e596 	.word	0x0800e596

0800c4c8 <_printf_common>:
 800c4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4cc:	4616      	mov	r6, r2
 800c4ce:	4699      	mov	r9, r3
 800c4d0:	688a      	ldr	r2, [r1, #8]
 800c4d2:	690b      	ldr	r3, [r1, #16]
 800c4d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	bfb8      	it	lt
 800c4dc:	4613      	movlt	r3, r2
 800c4de:	6033      	str	r3, [r6, #0]
 800c4e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4e4:	4607      	mov	r7, r0
 800c4e6:	460c      	mov	r4, r1
 800c4e8:	b10a      	cbz	r2, 800c4ee <_printf_common+0x26>
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	6033      	str	r3, [r6, #0]
 800c4ee:	6823      	ldr	r3, [r4, #0]
 800c4f0:	0699      	lsls	r1, r3, #26
 800c4f2:	bf42      	ittt	mi
 800c4f4:	6833      	ldrmi	r3, [r6, #0]
 800c4f6:	3302      	addmi	r3, #2
 800c4f8:	6033      	strmi	r3, [r6, #0]
 800c4fa:	6825      	ldr	r5, [r4, #0]
 800c4fc:	f015 0506 	ands.w	r5, r5, #6
 800c500:	d106      	bne.n	800c510 <_printf_common+0x48>
 800c502:	f104 0a19 	add.w	sl, r4, #25
 800c506:	68e3      	ldr	r3, [r4, #12]
 800c508:	6832      	ldr	r2, [r6, #0]
 800c50a:	1a9b      	subs	r3, r3, r2
 800c50c:	42ab      	cmp	r3, r5
 800c50e:	dc26      	bgt.n	800c55e <_printf_common+0x96>
 800c510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c514:	1e13      	subs	r3, r2, #0
 800c516:	6822      	ldr	r2, [r4, #0]
 800c518:	bf18      	it	ne
 800c51a:	2301      	movne	r3, #1
 800c51c:	0692      	lsls	r2, r2, #26
 800c51e:	d42b      	bmi.n	800c578 <_printf_common+0xb0>
 800c520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c524:	4649      	mov	r1, r9
 800c526:	4638      	mov	r0, r7
 800c528:	47c0      	blx	r8
 800c52a:	3001      	adds	r0, #1
 800c52c:	d01e      	beq.n	800c56c <_printf_common+0xa4>
 800c52e:	6823      	ldr	r3, [r4, #0]
 800c530:	6922      	ldr	r2, [r4, #16]
 800c532:	f003 0306 	and.w	r3, r3, #6
 800c536:	2b04      	cmp	r3, #4
 800c538:	bf02      	ittt	eq
 800c53a:	68e5      	ldreq	r5, [r4, #12]
 800c53c:	6833      	ldreq	r3, [r6, #0]
 800c53e:	1aed      	subeq	r5, r5, r3
 800c540:	68a3      	ldr	r3, [r4, #8]
 800c542:	bf0c      	ite	eq
 800c544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c548:	2500      	movne	r5, #0
 800c54a:	4293      	cmp	r3, r2
 800c54c:	bfc4      	itt	gt
 800c54e:	1a9b      	subgt	r3, r3, r2
 800c550:	18ed      	addgt	r5, r5, r3
 800c552:	2600      	movs	r6, #0
 800c554:	341a      	adds	r4, #26
 800c556:	42b5      	cmp	r5, r6
 800c558:	d11a      	bne.n	800c590 <_printf_common+0xc8>
 800c55a:	2000      	movs	r0, #0
 800c55c:	e008      	b.n	800c570 <_printf_common+0xa8>
 800c55e:	2301      	movs	r3, #1
 800c560:	4652      	mov	r2, sl
 800c562:	4649      	mov	r1, r9
 800c564:	4638      	mov	r0, r7
 800c566:	47c0      	blx	r8
 800c568:	3001      	adds	r0, #1
 800c56a:	d103      	bne.n	800c574 <_printf_common+0xac>
 800c56c:	f04f 30ff 	mov.w	r0, #4294967295
 800c570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c574:	3501      	adds	r5, #1
 800c576:	e7c6      	b.n	800c506 <_printf_common+0x3e>
 800c578:	18e1      	adds	r1, r4, r3
 800c57a:	1c5a      	adds	r2, r3, #1
 800c57c:	2030      	movs	r0, #48	; 0x30
 800c57e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c582:	4422      	add	r2, r4
 800c584:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c58c:	3302      	adds	r3, #2
 800c58e:	e7c7      	b.n	800c520 <_printf_common+0x58>
 800c590:	2301      	movs	r3, #1
 800c592:	4622      	mov	r2, r4
 800c594:	4649      	mov	r1, r9
 800c596:	4638      	mov	r0, r7
 800c598:	47c0      	blx	r8
 800c59a:	3001      	adds	r0, #1
 800c59c:	d0e6      	beq.n	800c56c <_printf_common+0xa4>
 800c59e:	3601      	adds	r6, #1
 800c5a0:	e7d9      	b.n	800c556 <_printf_common+0x8e>
	...

0800c5a4 <_printf_i>:
 800c5a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5a8:	7e0f      	ldrb	r7, [r1, #24]
 800c5aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c5ac:	2f78      	cmp	r7, #120	; 0x78
 800c5ae:	4691      	mov	r9, r2
 800c5b0:	4680      	mov	r8, r0
 800c5b2:	460c      	mov	r4, r1
 800c5b4:	469a      	mov	sl, r3
 800c5b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c5ba:	d807      	bhi.n	800c5cc <_printf_i+0x28>
 800c5bc:	2f62      	cmp	r7, #98	; 0x62
 800c5be:	d80a      	bhi.n	800c5d6 <_printf_i+0x32>
 800c5c0:	2f00      	cmp	r7, #0
 800c5c2:	f000 80d4 	beq.w	800c76e <_printf_i+0x1ca>
 800c5c6:	2f58      	cmp	r7, #88	; 0x58
 800c5c8:	f000 80c0 	beq.w	800c74c <_printf_i+0x1a8>
 800c5cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5d4:	e03a      	b.n	800c64c <_printf_i+0xa8>
 800c5d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5da:	2b15      	cmp	r3, #21
 800c5dc:	d8f6      	bhi.n	800c5cc <_printf_i+0x28>
 800c5de:	a101      	add	r1, pc, #4	; (adr r1, 800c5e4 <_printf_i+0x40>)
 800c5e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5e4:	0800c63d 	.word	0x0800c63d
 800c5e8:	0800c651 	.word	0x0800c651
 800c5ec:	0800c5cd 	.word	0x0800c5cd
 800c5f0:	0800c5cd 	.word	0x0800c5cd
 800c5f4:	0800c5cd 	.word	0x0800c5cd
 800c5f8:	0800c5cd 	.word	0x0800c5cd
 800c5fc:	0800c651 	.word	0x0800c651
 800c600:	0800c5cd 	.word	0x0800c5cd
 800c604:	0800c5cd 	.word	0x0800c5cd
 800c608:	0800c5cd 	.word	0x0800c5cd
 800c60c:	0800c5cd 	.word	0x0800c5cd
 800c610:	0800c755 	.word	0x0800c755
 800c614:	0800c67d 	.word	0x0800c67d
 800c618:	0800c70f 	.word	0x0800c70f
 800c61c:	0800c5cd 	.word	0x0800c5cd
 800c620:	0800c5cd 	.word	0x0800c5cd
 800c624:	0800c777 	.word	0x0800c777
 800c628:	0800c5cd 	.word	0x0800c5cd
 800c62c:	0800c67d 	.word	0x0800c67d
 800c630:	0800c5cd 	.word	0x0800c5cd
 800c634:	0800c5cd 	.word	0x0800c5cd
 800c638:	0800c717 	.word	0x0800c717
 800c63c:	682b      	ldr	r3, [r5, #0]
 800c63e:	1d1a      	adds	r2, r3, #4
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	602a      	str	r2, [r5, #0]
 800c644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c64c:	2301      	movs	r3, #1
 800c64e:	e09f      	b.n	800c790 <_printf_i+0x1ec>
 800c650:	6820      	ldr	r0, [r4, #0]
 800c652:	682b      	ldr	r3, [r5, #0]
 800c654:	0607      	lsls	r7, r0, #24
 800c656:	f103 0104 	add.w	r1, r3, #4
 800c65a:	6029      	str	r1, [r5, #0]
 800c65c:	d501      	bpl.n	800c662 <_printf_i+0xbe>
 800c65e:	681e      	ldr	r6, [r3, #0]
 800c660:	e003      	b.n	800c66a <_printf_i+0xc6>
 800c662:	0646      	lsls	r6, r0, #25
 800c664:	d5fb      	bpl.n	800c65e <_printf_i+0xba>
 800c666:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c66a:	2e00      	cmp	r6, #0
 800c66c:	da03      	bge.n	800c676 <_printf_i+0xd2>
 800c66e:	232d      	movs	r3, #45	; 0x2d
 800c670:	4276      	negs	r6, r6
 800c672:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c676:	485a      	ldr	r0, [pc, #360]	; (800c7e0 <_printf_i+0x23c>)
 800c678:	230a      	movs	r3, #10
 800c67a:	e012      	b.n	800c6a2 <_printf_i+0xfe>
 800c67c:	682b      	ldr	r3, [r5, #0]
 800c67e:	6820      	ldr	r0, [r4, #0]
 800c680:	1d19      	adds	r1, r3, #4
 800c682:	6029      	str	r1, [r5, #0]
 800c684:	0605      	lsls	r5, r0, #24
 800c686:	d501      	bpl.n	800c68c <_printf_i+0xe8>
 800c688:	681e      	ldr	r6, [r3, #0]
 800c68a:	e002      	b.n	800c692 <_printf_i+0xee>
 800c68c:	0641      	lsls	r1, r0, #25
 800c68e:	d5fb      	bpl.n	800c688 <_printf_i+0xe4>
 800c690:	881e      	ldrh	r6, [r3, #0]
 800c692:	4853      	ldr	r0, [pc, #332]	; (800c7e0 <_printf_i+0x23c>)
 800c694:	2f6f      	cmp	r7, #111	; 0x6f
 800c696:	bf0c      	ite	eq
 800c698:	2308      	moveq	r3, #8
 800c69a:	230a      	movne	r3, #10
 800c69c:	2100      	movs	r1, #0
 800c69e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6a2:	6865      	ldr	r5, [r4, #4]
 800c6a4:	60a5      	str	r5, [r4, #8]
 800c6a6:	2d00      	cmp	r5, #0
 800c6a8:	bfa2      	ittt	ge
 800c6aa:	6821      	ldrge	r1, [r4, #0]
 800c6ac:	f021 0104 	bicge.w	r1, r1, #4
 800c6b0:	6021      	strge	r1, [r4, #0]
 800c6b2:	b90e      	cbnz	r6, 800c6b8 <_printf_i+0x114>
 800c6b4:	2d00      	cmp	r5, #0
 800c6b6:	d04b      	beq.n	800c750 <_printf_i+0x1ac>
 800c6b8:	4615      	mov	r5, r2
 800c6ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800c6be:	fb03 6711 	mls	r7, r3, r1, r6
 800c6c2:	5dc7      	ldrb	r7, [r0, r7]
 800c6c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c6c8:	4637      	mov	r7, r6
 800c6ca:	42bb      	cmp	r3, r7
 800c6cc:	460e      	mov	r6, r1
 800c6ce:	d9f4      	bls.n	800c6ba <_printf_i+0x116>
 800c6d0:	2b08      	cmp	r3, #8
 800c6d2:	d10b      	bne.n	800c6ec <_printf_i+0x148>
 800c6d4:	6823      	ldr	r3, [r4, #0]
 800c6d6:	07de      	lsls	r6, r3, #31
 800c6d8:	d508      	bpl.n	800c6ec <_printf_i+0x148>
 800c6da:	6923      	ldr	r3, [r4, #16]
 800c6dc:	6861      	ldr	r1, [r4, #4]
 800c6de:	4299      	cmp	r1, r3
 800c6e0:	bfde      	ittt	le
 800c6e2:	2330      	movle	r3, #48	; 0x30
 800c6e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c6e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c6ec:	1b52      	subs	r2, r2, r5
 800c6ee:	6122      	str	r2, [r4, #16]
 800c6f0:	f8cd a000 	str.w	sl, [sp]
 800c6f4:	464b      	mov	r3, r9
 800c6f6:	aa03      	add	r2, sp, #12
 800c6f8:	4621      	mov	r1, r4
 800c6fa:	4640      	mov	r0, r8
 800c6fc:	f7ff fee4 	bl	800c4c8 <_printf_common>
 800c700:	3001      	adds	r0, #1
 800c702:	d14a      	bne.n	800c79a <_printf_i+0x1f6>
 800c704:	f04f 30ff 	mov.w	r0, #4294967295
 800c708:	b004      	add	sp, #16
 800c70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c70e:	6823      	ldr	r3, [r4, #0]
 800c710:	f043 0320 	orr.w	r3, r3, #32
 800c714:	6023      	str	r3, [r4, #0]
 800c716:	4833      	ldr	r0, [pc, #204]	; (800c7e4 <_printf_i+0x240>)
 800c718:	2778      	movs	r7, #120	; 0x78
 800c71a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	6829      	ldr	r1, [r5, #0]
 800c722:	061f      	lsls	r7, r3, #24
 800c724:	f851 6b04 	ldr.w	r6, [r1], #4
 800c728:	d402      	bmi.n	800c730 <_printf_i+0x18c>
 800c72a:	065f      	lsls	r7, r3, #25
 800c72c:	bf48      	it	mi
 800c72e:	b2b6      	uxthmi	r6, r6
 800c730:	07df      	lsls	r7, r3, #31
 800c732:	bf48      	it	mi
 800c734:	f043 0320 	orrmi.w	r3, r3, #32
 800c738:	6029      	str	r1, [r5, #0]
 800c73a:	bf48      	it	mi
 800c73c:	6023      	strmi	r3, [r4, #0]
 800c73e:	b91e      	cbnz	r6, 800c748 <_printf_i+0x1a4>
 800c740:	6823      	ldr	r3, [r4, #0]
 800c742:	f023 0320 	bic.w	r3, r3, #32
 800c746:	6023      	str	r3, [r4, #0]
 800c748:	2310      	movs	r3, #16
 800c74a:	e7a7      	b.n	800c69c <_printf_i+0xf8>
 800c74c:	4824      	ldr	r0, [pc, #144]	; (800c7e0 <_printf_i+0x23c>)
 800c74e:	e7e4      	b.n	800c71a <_printf_i+0x176>
 800c750:	4615      	mov	r5, r2
 800c752:	e7bd      	b.n	800c6d0 <_printf_i+0x12c>
 800c754:	682b      	ldr	r3, [r5, #0]
 800c756:	6826      	ldr	r6, [r4, #0]
 800c758:	6961      	ldr	r1, [r4, #20]
 800c75a:	1d18      	adds	r0, r3, #4
 800c75c:	6028      	str	r0, [r5, #0]
 800c75e:	0635      	lsls	r5, r6, #24
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	d501      	bpl.n	800c768 <_printf_i+0x1c4>
 800c764:	6019      	str	r1, [r3, #0]
 800c766:	e002      	b.n	800c76e <_printf_i+0x1ca>
 800c768:	0670      	lsls	r0, r6, #25
 800c76a:	d5fb      	bpl.n	800c764 <_printf_i+0x1c0>
 800c76c:	8019      	strh	r1, [r3, #0]
 800c76e:	2300      	movs	r3, #0
 800c770:	6123      	str	r3, [r4, #16]
 800c772:	4615      	mov	r5, r2
 800c774:	e7bc      	b.n	800c6f0 <_printf_i+0x14c>
 800c776:	682b      	ldr	r3, [r5, #0]
 800c778:	1d1a      	adds	r2, r3, #4
 800c77a:	602a      	str	r2, [r5, #0]
 800c77c:	681d      	ldr	r5, [r3, #0]
 800c77e:	6862      	ldr	r2, [r4, #4]
 800c780:	2100      	movs	r1, #0
 800c782:	4628      	mov	r0, r5
 800c784:	f7f3 fd5c 	bl	8000240 <memchr>
 800c788:	b108      	cbz	r0, 800c78e <_printf_i+0x1ea>
 800c78a:	1b40      	subs	r0, r0, r5
 800c78c:	6060      	str	r0, [r4, #4]
 800c78e:	6863      	ldr	r3, [r4, #4]
 800c790:	6123      	str	r3, [r4, #16]
 800c792:	2300      	movs	r3, #0
 800c794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c798:	e7aa      	b.n	800c6f0 <_printf_i+0x14c>
 800c79a:	6923      	ldr	r3, [r4, #16]
 800c79c:	462a      	mov	r2, r5
 800c79e:	4649      	mov	r1, r9
 800c7a0:	4640      	mov	r0, r8
 800c7a2:	47d0      	blx	sl
 800c7a4:	3001      	adds	r0, #1
 800c7a6:	d0ad      	beq.n	800c704 <_printf_i+0x160>
 800c7a8:	6823      	ldr	r3, [r4, #0]
 800c7aa:	079b      	lsls	r3, r3, #30
 800c7ac:	d413      	bmi.n	800c7d6 <_printf_i+0x232>
 800c7ae:	68e0      	ldr	r0, [r4, #12]
 800c7b0:	9b03      	ldr	r3, [sp, #12]
 800c7b2:	4298      	cmp	r0, r3
 800c7b4:	bfb8      	it	lt
 800c7b6:	4618      	movlt	r0, r3
 800c7b8:	e7a6      	b.n	800c708 <_printf_i+0x164>
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	4632      	mov	r2, r6
 800c7be:	4649      	mov	r1, r9
 800c7c0:	4640      	mov	r0, r8
 800c7c2:	47d0      	blx	sl
 800c7c4:	3001      	adds	r0, #1
 800c7c6:	d09d      	beq.n	800c704 <_printf_i+0x160>
 800c7c8:	3501      	adds	r5, #1
 800c7ca:	68e3      	ldr	r3, [r4, #12]
 800c7cc:	9903      	ldr	r1, [sp, #12]
 800c7ce:	1a5b      	subs	r3, r3, r1
 800c7d0:	42ab      	cmp	r3, r5
 800c7d2:	dcf2      	bgt.n	800c7ba <_printf_i+0x216>
 800c7d4:	e7eb      	b.n	800c7ae <_printf_i+0x20a>
 800c7d6:	2500      	movs	r5, #0
 800c7d8:	f104 0619 	add.w	r6, r4, #25
 800c7dc:	e7f5      	b.n	800c7ca <_printf_i+0x226>
 800c7de:	bf00      	nop
 800c7e0:	0800e5a1 	.word	0x0800e5a1
 800c7e4:	0800e5b2 	.word	0x0800e5b2

0800c7e8 <__sflush_r>:
 800c7e8:	898a      	ldrh	r2, [r1, #12]
 800c7ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	0710      	lsls	r0, r2, #28
 800c7f2:	460c      	mov	r4, r1
 800c7f4:	d458      	bmi.n	800c8a8 <__sflush_r+0xc0>
 800c7f6:	684b      	ldr	r3, [r1, #4]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	dc05      	bgt.n	800c808 <__sflush_r+0x20>
 800c7fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	dc02      	bgt.n	800c808 <__sflush_r+0x20>
 800c802:	2000      	movs	r0, #0
 800c804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c80a:	2e00      	cmp	r6, #0
 800c80c:	d0f9      	beq.n	800c802 <__sflush_r+0x1a>
 800c80e:	2300      	movs	r3, #0
 800c810:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c814:	682f      	ldr	r7, [r5, #0]
 800c816:	6a21      	ldr	r1, [r4, #32]
 800c818:	602b      	str	r3, [r5, #0]
 800c81a:	d032      	beq.n	800c882 <__sflush_r+0x9a>
 800c81c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c81e:	89a3      	ldrh	r3, [r4, #12]
 800c820:	075a      	lsls	r2, r3, #29
 800c822:	d505      	bpl.n	800c830 <__sflush_r+0x48>
 800c824:	6863      	ldr	r3, [r4, #4]
 800c826:	1ac0      	subs	r0, r0, r3
 800c828:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c82a:	b10b      	cbz	r3, 800c830 <__sflush_r+0x48>
 800c82c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c82e:	1ac0      	subs	r0, r0, r3
 800c830:	2300      	movs	r3, #0
 800c832:	4602      	mov	r2, r0
 800c834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c836:	6a21      	ldr	r1, [r4, #32]
 800c838:	4628      	mov	r0, r5
 800c83a:	47b0      	blx	r6
 800c83c:	1c43      	adds	r3, r0, #1
 800c83e:	89a3      	ldrh	r3, [r4, #12]
 800c840:	d106      	bne.n	800c850 <__sflush_r+0x68>
 800c842:	6829      	ldr	r1, [r5, #0]
 800c844:	291d      	cmp	r1, #29
 800c846:	d82b      	bhi.n	800c8a0 <__sflush_r+0xb8>
 800c848:	4a29      	ldr	r2, [pc, #164]	; (800c8f0 <__sflush_r+0x108>)
 800c84a:	410a      	asrs	r2, r1
 800c84c:	07d6      	lsls	r6, r2, #31
 800c84e:	d427      	bmi.n	800c8a0 <__sflush_r+0xb8>
 800c850:	2200      	movs	r2, #0
 800c852:	6062      	str	r2, [r4, #4]
 800c854:	04d9      	lsls	r1, r3, #19
 800c856:	6922      	ldr	r2, [r4, #16]
 800c858:	6022      	str	r2, [r4, #0]
 800c85a:	d504      	bpl.n	800c866 <__sflush_r+0x7e>
 800c85c:	1c42      	adds	r2, r0, #1
 800c85e:	d101      	bne.n	800c864 <__sflush_r+0x7c>
 800c860:	682b      	ldr	r3, [r5, #0]
 800c862:	b903      	cbnz	r3, 800c866 <__sflush_r+0x7e>
 800c864:	6560      	str	r0, [r4, #84]	; 0x54
 800c866:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c868:	602f      	str	r7, [r5, #0]
 800c86a:	2900      	cmp	r1, #0
 800c86c:	d0c9      	beq.n	800c802 <__sflush_r+0x1a>
 800c86e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c872:	4299      	cmp	r1, r3
 800c874:	d002      	beq.n	800c87c <__sflush_r+0x94>
 800c876:	4628      	mov	r0, r5
 800c878:	f7ff fbea 	bl	800c050 <_free_r>
 800c87c:	2000      	movs	r0, #0
 800c87e:	6360      	str	r0, [r4, #52]	; 0x34
 800c880:	e7c0      	b.n	800c804 <__sflush_r+0x1c>
 800c882:	2301      	movs	r3, #1
 800c884:	4628      	mov	r0, r5
 800c886:	47b0      	blx	r6
 800c888:	1c41      	adds	r1, r0, #1
 800c88a:	d1c8      	bne.n	800c81e <__sflush_r+0x36>
 800c88c:	682b      	ldr	r3, [r5, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d0c5      	beq.n	800c81e <__sflush_r+0x36>
 800c892:	2b1d      	cmp	r3, #29
 800c894:	d001      	beq.n	800c89a <__sflush_r+0xb2>
 800c896:	2b16      	cmp	r3, #22
 800c898:	d101      	bne.n	800c89e <__sflush_r+0xb6>
 800c89a:	602f      	str	r7, [r5, #0]
 800c89c:	e7b1      	b.n	800c802 <__sflush_r+0x1a>
 800c89e:	89a3      	ldrh	r3, [r4, #12]
 800c8a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8a4:	81a3      	strh	r3, [r4, #12]
 800c8a6:	e7ad      	b.n	800c804 <__sflush_r+0x1c>
 800c8a8:	690f      	ldr	r7, [r1, #16]
 800c8aa:	2f00      	cmp	r7, #0
 800c8ac:	d0a9      	beq.n	800c802 <__sflush_r+0x1a>
 800c8ae:	0793      	lsls	r3, r2, #30
 800c8b0:	680e      	ldr	r6, [r1, #0]
 800c8b2:	bf08      	it	eq
 800c8b4:	694b      	ldreq	r3, [r1, #20]
 800c8b6:	600f      	str	r7, [r1, #0]
 800c8b8:	bf18      	it	ne
 800c8ba:	2300      	movne	r3, #0
 800c8bc:	eba6 0807 	sub.w	r8, r6, r7
 800c8c0:	608b      	str	r3, [r1, #8]
 800c8c2:	f1b8 0f00 	cmp.w	r8, #0
 800c8c6:	dd9c      	ble.n	800c802 <__sflush_r+0x1a>
 800c8c8:	6a21      	ldr	r1, [r4, #32]
 800c8ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c8cc:	4643      	mov	r3, r8
 800c8ce:	463a      	mov	r2, r7
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	47b0      	blx	r6
 800c8d4:	2800      	cmp	r0, #0
 800c8d6:	dc06      	bgt.n	800c8e6 <__sflush_r+0xfe>
 800c8d8:	89a3      	ldrh	r3, [r4, #12]
 800c8da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8de:	81a3      	strh	r3, [r4, #12]
 800c8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e4:	e78e      	b.n	800c804 <__sflush_r+0x1c>
 800c8e6:	4407      	add	r7, r0
 800c8e8:	eba8 0800 	sub.w	r8, r8, r0
 800c8ec:	e7e9      	b.n	800c8c2 <__sflush_r+0xda>
 800c8ee:	bf00      	nop
 800c8f0:	dfbffffe 	.word	0xdfbffffe

0800c8f4 <_fflush_r>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	690b      	ldr	r3, [r1, #16]
 800c8f8:	4605      	mov	r5, r0
 800c8fa:	460c      	mov	r4, r1
 800c8fc:	b913      	cbnz	r3, 800c904 <_fflush_r+0x10>
 800c8fe:	2500      	movs	r5, #0
 800c900:	4628      	mov	r0, r5
 800c902:	bd38      	pop	{r3, r4, r5, pc}
 800c904:	b118      	cbz	r0, 800c90e <_fflush_r+0x1a>
 800c906:	6a03      	ldr	r3, [r0, #32]
 800c908:	b90b      	cbnz	r3, 800c90e <_fflush_r+0x1a>
 800c90a:	f7ff fa29 	bl	800bd60 <__sinit>
 800c90e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d0f3      	beq.n	800c8fe <_fflush_r+0xa>
 800c916:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c918:	07d0      	lsls	r0, r2, #31
 800c91a:	d404      	bmi.n	800c926 <_fflush_r+0x32>
 800c91c:	0599      	lsls	r1, r3, #22
 800c91e:	d402      	bmi.n	800c926 <_fflush_r+0x32>
 800c920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c922:	f7ff fb85 	bl	800c030 <__retarget_lock_acquire_recursive>
 800c926:	4628      	mov	r0, r5
 800c928:	4621      	mov	r1, r4
 800c92a:	f7ff ff5d 	bl	800c7e8 <__sflush_r>
 800c92e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c930:	07da      	lsls	r2, r3, #31
 800c932:	4605      	mov	r5, r0
 800c934:	d4e4      	bmi.n	800c900 <_fflush_r+0xc>
 800c936:	89a3      	ldrh	r3, [r4, #12]
 800c938:	059b      	lsls	r3, r3, #22
 800c93a:	d4e1      	bmi.n	800c900 <_fflush_r+0xc>
 800c93c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c93e:	f7ff fb78 	bl	800c032 <__retarget_lock_release_recursive>
 800c942:	e7dd      	b.n	800c900 <_fflush_r+0xc>

0800c944 <__swbuf_r>:
 800c944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c946:	460e      	mov	r6, r1
 800c948:	4614      	mov	r4, r2
 800c94a:	4605      	mov	r5, r0
 800c94c:	b118      	cbz	r0, 800c956 <__swbuf_r+0x12>
 800c94e:	6a03      	ldr	r3, [r0, #32]
 800c950:	b90b      	cbnz	r3, 800c956 <__swbuf_r+0x12>
 800c952:	f7ff fa05 	bl	800bd60 <__sinit>
 800c956:	69a3      	ldr	r3, [r4, #24]
 800c958:	60a3      	str	r3, [r4, #8]
 800c95a:	89a3      	ldrh	r3, [r4, #12]
 800c95c:	071a      	lsls	r2, r3, #28
 800c95e:	d525      	bpl.n	800c9ac <__swbuf_r+0x68>
 800c960:	6923      	ldr	r3, [r4, #16]
 800c962:	b31b      	cbz	r3, 800c9ac <__swbuf_r+0x68>
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	6922      	ldr	r2, [r4, #16]
 800c968:	1a98      	subs	r0, r3, r2
 800c96a:	6963      	ldr	r3, [r4, #20]
 800c96c:	b2f6      	uxtb	r6, r6
 800c96e:	4283      	cmp	r3, r0
 800c970:	4637      	mov	r7, r6
 800c972:	dc04      	bgt.n	800c97e <__swbuf_r+0x3a>
 800c974:	4621      	mov	r1, r4
 800c976:	4628      	mov	r0, r5
 800c978:	f7ff ffbc 	bl	800c8f4 <_fflush_r>
 800c97c:	b9e0      	cbnz	r0, 800c9b8 <__swbuf_r+0x74>
 800c97e:	68a3      	ldr	r3, [r4, #8]
 800c980:	3b01      	subs	r3, #1
 800c982:	60a3      	str	r3, [r4, #8]
 800c984:	6823      	ldr	r3, [r4, #0]
 800c986:	1c5a      	adds	r2, r3, #1
 800c988:	6022      	str	r2, [r4, #0]
 800c98a:	701e      	strb	r6, [r3, #0]
 800c98c:	6962      	ldr	r2, [r4, #20]
 800c98e:	1c43      	adds	r3, r0, #1
 800c990:	429a      	cmp	r2, r3
 800c992:	d004      	beq.n	800c99e <__swbuf_r+0x5a>
 800c994:	89a3      	ldrh	r3, [r4, #12]
 800c996:	07db      	lsls	r3, r3, #31
 800c998:	d506      	bpl.n	800c9a8 <__swbuf_r+0x64>
 800c99a:	2e0a      	cmp	r6, #10
 800c99c:	d104      	bne.n	800c9a8 <__swbuf_r+0x64>
 800c99e:	4621      	mov	r1, r4
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	f7ff ffa7 	bl	800c8f4 <_fflush_r>
 800c9a6:	b938      	cbnz	r0, 800c9b8 <__swbuf_r+0x74>
 800c9a8:	4638      	mov	r0, r7
 800c9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	f000 f806 	bl	800c9c0 <__swsetup_r>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	d0d5      	beq.n	800c964 <__swbuf_r+0x20>
 800c9b8:	f04f 37ff 	mov.w	r7, #4294967295
 800c9bc:	e7f4      	b.n	800c9a8 <__swbuf_r+0x64>
	...

0800c9c0 <__swsetup_r>:
 800c9c0:	b538      	push	{r3, r4, r5, lr}
 800c9c2:	4b2a      	ldr	r3, [pc, #168]	; (800ca6c <__swsetup_r+0xac>)
 800c9c4:	4605      	mov	r5, r0
 800c9c6:	6818      	ldr	r0, [r3, #0]
 800c9c8:	460c      	mov	r4, r1
 800c9ca:	b118      	cbz	r0, 800c9d4 <__swsetup_r+0x14>
 800c9cc:	6a03      	ldr	r3, [r0, #32]
 800c9ce:	b90b      	cbnz	r3, 800c9d4 <__swsetup_r+0x14>
 800c9d0:	f7ff f9c6 	bl	800bd60 <__sinit>
 800c9d4:	89a3      	ldrh	r3, [r4, #12]
 800c9d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9da:	0718      	lsls	r0, r3, #28
 800c9dc:	d422      	bmi.n	800ca24 <__swsetup_r+0x64>
 800c9de:	06d9      	lsls	r1, r3, #27
 800c9e0:	d407      	bmi.n	800c9f2 <__swsetup_r+0x32>
 800c9e2:	2309      	movs	r3, #9
 800c9e4:	602b      	str	r3, [r5, #0]
 800c9e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9ea:	81a3      	strh	r3, [r4, #12]
 800c9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f0:	e034      	b.n	800ca5c <__swsetup_r+0x9c>
 800c9f2:	0758      	lsls	r0, r3, #29
 800c9f4:	d512      	bpl.n	800ca1c <__swsetup_r+0x5c>
 800c9f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9f8:	b141      	cbz	r1, 800ca0c <__swsetup_r+0x4c>
 800c9fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9fe:	4299      	cmp	r1, r3
 800ca00:	d002      	beq.n	800ca08 <__swsetup_r+0x48>
 800ca02:	4628      	mov	r0, r5
 800ca04:	f7ff fb24 	bl	800c050 <_free_r>
 800ca08:	2300      	movs	r3, #0
 800ca0a:	6363      	str	r3, [r4, #52]	; 0x34
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca12:	81a3      	strh	r3, [r4, #12]
 800ca14:	2300      	movs	r3, #0
 800ca16:	6063      	str	r3, [r4, #4]
 800ca18:	6923      	ldr	r3, [r4, #16]
 800ca1a:	6023      	str	r3, [r4, #0]
 800ca1c:	89a3      	ldrh	r3, [r4, #12]
 800ca1e:	f043 0308 	orr.w	r3, r3, #8
 800ca22:	81a3      	strh	r3, [r4, #12]
 800ca24:	6923      	ldr	r3, [r4, #16]
 800ca26:	b94b      	cbnz	r3, 800ca3c <__swsetup_r+0x7c>
 800ca28:	89a3      	ldrh	r3, [r4, #12]
 800ca2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca32:	d003      	beq.n	800ca3c <__swsetup_r+0x7c>
 800ca34:	4621      	mov	r1, r4
 800ca36:	4628      	mov	r0, r5
 800ca38:	f000 f850 	bl	800cadc <__smakebuf_r>
 800ca3c:	89a0      	ldrh	r0, [r4, #12]
 800ca3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca42:	f010 0301 	ands.w	r3, r0, #1
 800ca46:	d00a      	beq.n	800ca5e <__swsetup_r+0x9e>
 800ca48:	2300      	movs	r3, #0
 800ca4a:	60a3      	str	r3, [r4, #8]
 800ca4c:	6963      	ldr	r3, [r4, #20]
 800ca4e:	425b      	negs	r3, r3
 800ca50:	61a3      	str	r3, [r4, #24]
 800ca52:	6923      	ldr	r3, [r4, #16]
 800ca54:	b943      	cbnz	r3, 800ca68 <__swsetup_r+0xa8>
 800ca56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca5a:	d1c4      	bne.n	800c9e6 <__swsetup_r+0x26>
 800ca5c:	bd38      	pop	{r3, r4, r5, pc}
 800ca5e:	0781      	lsls	r1, r0, #30
 800ca60:	bf58      	it	pl
 800ca62:	6963      	ldrpl	r3, [r4, #20]
 800ca64:	60a3      	str	r3, [r4, #8]
 800ca66:	e7f4      	b.n	800ca52 <__swsetup_r+0x92>
 800ca68:	2000      	movs	r0, #0
 800ca6a:	e7f7      	b.n	800ca5c <__swsetup_r+0x9c>
 800ca6c:	200000bc 	.word	0x200000bc

0800ca70 <_sbrk_r>:
 800ca70:	b538      	push	{r3, r4, r5, lr}
 800ca72:	4d06      	ldr	r5, [pc, #24]	; (800ca8c <_sbrk_r+0x1c>)
 800ca74:	2300      	movs	r3, #0
 800ca76:	4604      	mov	r4, r0
 800ca78:	4608      	mov	r0, r1
 800ca7a:	602b      	str	r3, [r5, #0]
 800ca7c:	f7f5 fca6 	bl	80023cc <_sbrk>
 800ca80:	1c43      	adds	r3, r0, #1
 800ca82:	d102      	bne.n	800ca8a <_sbrk_r+0x1a>
 800ca84:	682b      	ldr	r3, [r5, #0]
 800ca86:	b103      	cbz	r3, 800ca8a <_sbrk_r+0x1a>
 800ca88:	6023      	str	r3, [r4, #0]
 800ca8a:	bd38      	pop	{r3, r4, r5, pc}
 800ca8c:	20005308 	.word	0x20005308

0800ca90 <__swhatbuf_r>:
 800ca90:	b570      	push	{r4, r5, r6, lr}
 800ca92:	460c      	mov	r4, r1
 800ca94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca98:	2900      	cmp	r1, #0
 800ca9a:	b096      	sub	sp, #88	; 0x58
 800ca9c:	4615      	mov	r5, r2
 800ca9e:	461e      	mov	r6, r3
 800caa0:	da0d      	bge.n	800cabe <__swhatbuf_r+0x2e>
 800caa2:	89a3      	ldrh	r3, [r4, #12]
 800caa4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800caa8:	f04f 0100 	mov.w	r1, #0
 800caac:	bf0c      	ite	eq
 800caae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cab2:	2340      	movne	r3, #64	; 0x40
 800cab4:	2000      	movs	r0, #0
 800cab6:	6031      	str	r1, [r6, #0]
 800cab8:	602b      	str	r3, [r5, #0]
 800caba:	b016      	add	sp, #88	; 0x58
 800cabc:	bd70      	pop	{r4, r5, r6, pc}
 800cabe:	466a      	mov	r2, sp
 800cac0:	f000 f848 	bl	800cb54 <_fstat_r>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	dbec      	blt.n	800caa2 <__swhatbuf_r+0x12>
 800cac8:	9901      	ldr	r1, [sp, #4]
 800caca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cace:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cad2:	4259      	negs	r1, r3
 800cad4:	4159      	adcs	r1, r3
 800cad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cada:	e7eb      	b.n	800cab4 <__swhatbuf_r+0x24>

0800cadc <__smakebuf_r>:
 800cadc:	898b      	ldrh	r3, [r1, #12]
 800cade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cae0:	079d      	lsls	r5, r3, #30
 800cae2:	4606      	mov	r6, r0
 800cae4:	460c      	mov	r4, r1
 800cae6:	d507      	bpl.n	800caf8 <__smakebuf_r+0x1c>
 800cae8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800caec:	6023      	str	r3, [r4, #0]
 800caee:	6123      	str	r3, [r4, #16]
 800caf0:	2301      	movs	r3, #1
 800caf2:	6163      	str	r3, [r4, #20]
 800caf4:	b002      	add	sp, #8
 800caf6:	bd70      	pop	{r4, r5, r6, pc}
 800caf8:	ab01      	add	r3, sp, #4
 800cafa:	466a      	mov	r2, sp
 800cafc:	f7ff ffc8 	bl	800ca90 <__swhatbuf_r>
 800cb00:	9900      	ldr	r1, [sp, #0]
 800cb02:	4605      	mov	r5, r0
 800cb04:	4630      	mov	r0, r6
 800cb06:	f7ff fb0f 	bl	800c128 <_malloc_r>
 800cb0a:	b948      	cbnz	r0, 800cb20 <__smakebuf_r+0x44>
 800cb0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb10:	059a      	lsls	r2, r3, #22
 800cb12:	d4ef      	bmi.n	800caf4 <__smakebuf_r+0x18>
 800cb14:	f023 0303 	bic.w	r3, r3, #3
 800cb18:	f043 0302 	orr.w	r3, r3, #2
 800cb1c:	81a3      	strh	r3, [r4, #12]
 800cb1e:	e7e3      	b.n	800cae8 <__smakebuf_r+0xc>
 800cb20:	89a3      	ldrh	r3, [r4, #12]
 800cb22:	6020      	str	r0, [r4, #0]
 800cb24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb28:	81a3      	strh	r3, [r4, #12]
 800cb2a:	9b00      	ldr	r3, [sp, #0]
 800cb2c:	6163      	str	r3, [r4, #20]
 800cb2e:	9b01      	ldr	r3, [sp, #4]
 800cb30:	6120      	str	r0, [r4, #16]
 800cb32:	b15b      	cbz	r3, 800cb4c <__smakebuf_r+0x70>
 800cb34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f000 f81d 	bl	800cb78 <_isatty_r>
 800cb3e:	b128      	cbz	r0, 800cb4c <__smakebuf_r+0x70>
 800cb40:	89a3      	ldrh	r3, [r4, #12]
 800cb42:	f023 0303 	bic.w	r3, r3, #3
 800cb46:	f043 0301 	orr.w	r3, r3, #1
 800cb4a:	81a3      	strh	r3, [r4, #12]
 800cb4c:	89a3      	ldrh	r3, [r4, #12]
 800cb4e:	431d      	orrs	r5, r3
 800cb50:	81a5      	strh	r5, [r4, #12]
 800cb52:	e7cf      	b.n	800caf4 <__smakebuf_r+0x18>

0800cb54 <_fstat_r>:
 800cb54:	b538      	push	{r3, r4, r5, lr}
 800cb56:	4d07      	ldr	r5, [pc, #28]	; (800cb74 <_fstat_r+0x20>)
 800cb58:	2300      	movs	r3, #0
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	4608      	mov	r0, r1
 800cb5e:	4611      	mov	r1, r2
 800cb60:	602b      	str	r3, [r5, #0]
 800cb62:	f7f5 fc0a 	bl	800237a <_fstat>
 800cb66:	1c43      	adds	r3, r0, #1
 800cb68:	d102      	bne.n	800cb70 <_fstat_r+0x1c>
 800cb6a:	682b      	ldr	r3, [r5, #0]
 800cb6c:	b103      	cbz	r3, 800cb70 <_fstat_r+0x1c>
 800cb6e:	6023      	str	r3, [r4, #0]
 800cb70:	bd38      	pop	{r3, r4, r5, pc}
 800cb72:	bf00      	nop
 800cb74:	20005308 	.word	0x20005308

0800cb78 <_isatty_r>:
 800cb78:	b538      	push	{r3, r4, r5, lr}
 800cb7a:	4d06      	ldr	r5, [pc, #24]	; (800cb94 <_isatty_r+0x1c>)
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	4604      	mov	r4, r0
 800cb80:	4608      	mov	r0, r1
 800cb82:	602b      	str	r3, [r5, #0]
 800cb84:	f7f5 fc09 	bl	800239a <_isatty>
 800cb88:	1c43      	adds	r3, r0, #1
 800cb8a:	d102      	bne.n	800cb92 <_isatty_r+0x1a>
 800cb8c:	682b      	ldr	r3, [r5, #0]
 800cb8e:	b103      	cbz	r3, 800cb92 <_isatty_r+0x1a>
 800cb90:	6023      	str	r3, [r4, #0]
 800cb92:	bd38      	pop	{r3, r4, r5, pc}
 800cb94:	20005308 	.word	0x20005308

0800cb98 <_init>:
 800cb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb9a:	bf00      	nop
 800cb9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb9e:	bc08      	pop	{r3}
 800cba0:	469e      	mov	lr, r3
 800cba2:	4770      	bx	lr

0800cba4 <_fini>:
 800cba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba6:	bf00      	nop
 800cba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbaa:	bc08      	pop	{r3}
 800cbac:	469e      	mov	lr, r3
 800cbae:	4770      	bx	lr
