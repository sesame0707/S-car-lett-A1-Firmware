
ScarlettA1Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009898  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017d4  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b26c  0800b26c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b26c  0800b26c  0001b26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b274  0800b274  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b274  0800b274  0001b274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b278  0800b278  0001b278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800b27c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051dc  2000008c  0800b308  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005268  0800b308  00025268  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002555c  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000520e  00000000  00000000  00045659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d58  00000000  00000000  0004a868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016bb  00000000  00000000  0004c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c979  00000000  00000000  0004dc7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026d44  00000000  00000000  0007a5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b956  00000000  00000000  000a1338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007cc8  00000000  00000000  001acc90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001b4958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000008c 	.word	0x2000008c
 800021c:	00000000 	.word	0x00000000
 8000220:	08009a80 	.word	0x08009a80

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000090 	.word	0x20000090
 800023c:	08009a80 	.word	0x08009a80

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b970 	b.w	8000548 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9e08      	ldr	r6, [sp, #32]
 8000286:	460d      	mov	r5, r1
 8000288:	4604      	mov	r4, r0
 800028a:	460f      	mov	r7, r1
 800028c:	2b00      	cmp	r3, #0
 800028e:	d14a      	bne.n	8000326 <__udivmoddi4+0xa6>
 8000290:	428a      	cmp	r2, r1
 8000292:	4694      	mov	ip, r2
 8000294:	d965      	bls.n	8000362 <__udivmoddi4+0xe2>
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	b143      	cbz	r3, 80002ae <__udivmoddi4+0x2e>
 800029c:	fa02 fc03 	lsl.w	ip, r2, r3
 80002a0:	f1c3 0220 	rsb	r2, r3, #32
 80002a4:	409f      	lsls	r7, r3
 80002a6:	fa20 f202 	lsr.w	r2, r0, r2
 80002aa:	4317      	orrs	r7, r2
 80002ac:	409c      	lsls	r4, r3
 80002ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002b2:	fa1f f58c 	uxth.w	r5, ip
 80002b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ba:	0c22      	lsrs	r2, r4, #16
 80002bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002c4:	fb01 f005 	mul.w	r0, r1, r5
 80002c8:	4290      	cmp	r0, r2
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x62>
 80002cc:	eb1c 0202 	adds.w	r2, ip, r2
 80002d0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002d4:	f080 811c 	bcs.w	8000510 <__udivmoddi4+0x290>
 80002d8:	4290      	cmp	r0, r2
 80002da:	f240 8119 	bls.w	8000510 <__udivmoddi4+0x290>
 80002de:	3902      	subs	r1, #2
 80002e0:	4462      	add	r2, ip
 80002e2:	1a12      	subs	r2, r2, r0
 80002e4:	b2a4      	uxth	r4, r4
 80002e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f2:	fb00 f505 	mul.w	r5, r0, r5
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	d90a      	bls.n	8000310 <__udivmoddi4+0x90>
 80002fa:	eb1c 0404 	adds.w	r4, ip, r4
 80002fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000302:	f080 8107 	bcs.w	8000514 <__udivmoddi4+0x294>
 8000306:	42a5      	cmp	r5, r4
 8000308:	f240 8104 	bls.w	8000514 <__udivmoddi4+0x294>
 800030c:	4464      	add	r4, ip
 800030e:	3802      	subs	r0, #2
 8000310:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000314:	1b64      	subs	r4, r4, r5
 8000316:	2100      	movs	r1, #0
 8000318:	b11e      	cbz	r6, 8000322 <__udivmoddi4+0xa2>
 800031a:	40dc      	lsrs	r4, r3
 800031c:	2300      	movs	r3, #0
 800031e:	e9c6 4300 	strd	r4, r3, [r6]
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	428b      	cmp	r3, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0xbc>
 800032a:	2e00      	cmp	r6, #0
 800032c:	f000 80ed 	beq.w	800050a <__udivmoddi4+0x28a>
 8000330:	2100      	movs	r1, #0
 8000332:	e9c6 0500 	strd	r0, r5, [r6]
 8000336:	4608      	mov	r0, r1
 8000338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033c:	fab3 f183 	clz	r1, r3
 8000340:	2900      	cmp	r1, #0
 8000342:	d149      	bne.n	80003d8 <__udivmoddi4+0x158>
 8000344:	42ab      	cmp	r3, r5
 8000346:	d302      	bcc.n	800034e <__udivmoddi4+0xce>
 8000348:	4282      	cmp	r2, r0
 800034a:	f200 80f8 	bhi.w	800053e <__udivmoddi4+0x2be>
 800034e:	1a84      	subs	r4, r0, r2
 8000350:	eb65 0203 	sbc.w	r2, r5, r3
 8000354:	2001      	movs	r0, #1
 8000356:	4617      	mov	r7, r2
 8000358:	2e00      	cmp	r6, #0
 800035a:	d0e2      	beq.n	8000322 <__udivmoddi4+0xa2>
 800035c:	e9c6 4700 	strd	r4, r7, [r6]
 8000360:	e7df      	b.n	8000322 <__udivmoddi4+0xa2>
 8000362:	b902      	cbnz	r2, 8000366 <__udivmoddi4+0xe6>
 8000364:	deff      	udf	#255	; 0xff
 8000366:	fab2 f382 	clz	r3, r2
 800036a:	2b00      	cmp	r3, #0
 800036c:	f040 8090 	bne.w	8000490 <__udivmoddi4+0x210>
 8000370:	1a8a      	subs	r2, r1, r2
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2101      	movs	r1, #1
 800037c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000380:	fb07 2015 	mls	r0, r7, r5, r2
 8000384:	0c22      	lsrs	r2, r4, #16
 8000386:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800038a:	fb0e f005 	mul.w	r0, lr, r5
 800038e:	4290      	cmp	r0, r2
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x124>
 8000392:	eb1c 0202 	adds.w	r2, ip, r2
 8000396:	f105 38ff 	add.w	r8, r5, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x122>
 800039c:	4290      	cmp	r0, r2
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2b8>
 80003a2:	4645      	mov	r5, r8
 80003a4:	1a12      	subs	r2, r2, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ac:	fb07 2210 	mls	r2, r7, r0, r2
 80003b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x14e>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x14c>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2c2>
 80003cc:	4610      	mov	r0, r2
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003d6:	e79f      	b.n	8000318 <__udivmoddi4+0x98>
 80003d8:	f1c1 0720 	rsb	r7, r1, #32
 80003dc:	408b      	lsls	r3, r1
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ea:	fa20 f307 	lsr.w	r3, r0, r7
 80003ee:	40fd      	lsrs	r5, r7
 80003f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f4:	4323      	orrs	r3, r4
 80003f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003fa:	fa1f fe8c 	uxth.w	lr, ip
 80003fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000402:	0c1c      	lsrs	r4, r3, #16
 8000404:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000408:	fb08 f50e 	mul.w	r5, r8, lr
 800040c:	42a5      	cmp	r5, r4
 800040e:	fa02 f201 	lsl.w	r2, r2, r1
 8000412:	fa00 f001 	lsl.w	r0, r0, r1
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b0>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2b4>
 8000424:	42a5      	cmp	r5, r4
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2b4>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4464      	add	r4, ip
 8000430:	1b64      	subs	r4, r4, r5
 8000432:	b29d      	uxth	r5, r3
 8000434:	fbb4 f3f9 	udiv	r3, r4, r9
 8000438:	fb09 4413 	mls	r4, r9, r3, r4
 800043c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000440:	fb03 fe0e 	mul.w	lr, r3, lr
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1da>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2ac>
 8000452:	45a6      	cmp	lr, r4
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2ac>
 8000456:	3b02      	subs	r3, #2
 8000458:	4464      	add	r4, ip
 800045a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800045e:	fba3 9502 	umull	r9, r5, r3, r2
 8000462:	eba4 040e 	sub.w	r4, r4, lr
 8000466:	42ac      	cmp	r4, r5
 8000468:	46c8      	mov	r8, r9
 800046a:	46ae      	mov	lr, r5
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x29c>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x298>
 8000470:	b156      	cbz	r6, 8000488 <__udivmoddi4+0x208>
 8000472:	ebb0 0208 	subs.w	r2, r0, r8
 8000476:	eb64 040e 	sbc.w	r4, r4, lr
 800047a:	fa04 f707 	lsl.w	r7, r4, r7
 800047e:	40ca      	lsrs	r2, r1
 8000480:	40cc      	lsrs	r4, r1
 8000482:	4317      	orrs	r7, r2
 8000484:	e9c6 7400 	strd	r7, r4, [r6]
 8000488:	4618      	mov	r0, r3
 800048a:	2100      	movs	r1, #0
 800048c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000490:	f1c3 0120 	rsb	r1, r3, #32
 8000494:	fa02 fc03 	lsl.w	ip, r2, r3
 8000498:	fa20 f201 	lsr.w	r2, r0, r1
 800049c:	fa25 f101 	lsr.w	r1, r5, r1
 80004a0:	409d      	lsls	r5, r3
 80004a2:	432a      	orrs	r2, r5
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b0:	fb07 1510 	mls	r5, r7, r0, r1
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ba:	fb00 f50e 	mul.w	r5, r0, lr
 80004be:	428d      	cmp	r5, r1
 80004c0:	fa04 f403 	lsl.w	r4, r4, r3
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x258>
 80004c6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b0>
 80004d0:	428d      	cmp	r5, r1
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b0>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1b49      	subs	r1, r1, r5
 80004da:	b292      	uxth	r2, r2
 80004dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004e0:	fb07 1115 	mls	r1, r7, r5, r1
 80004e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ec:	4291      	cmp	r1, r2
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x282>
 80004f0:	eb1c 0202 	adds.w	r2, ip, r2
 80004f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2a8>
 80004fa:	4291      	cmp	r1, r2
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2a8>
 80004fe:	3d02      	subs	r5, #2
 8000500:	4462      	add	r2, ip
 8000502:	1a52      	subs	r2, r2, r1
 8000504:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0xfc>
 800050a:	4631      	mov	r1, r6
 800050c:	4630      	mov	r0, r6
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xa2>
 8000510:	4639      	mov	r1, r7
 8000512:	e6e6      	b.n	80002e2 <__udivmoddi4+0x62>
 8000514:	4610      	mov	r0, r2
 8000516:	e6fb      	b.n	8000310 <__udivmoddi4+0x90>
 8000518:	4548      	cmp	r0, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f0>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000524:	3b01      	subs	r3, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f0>
 8000528:	4645      	mov	r5, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x282>
 800052c:	462b      	mov	r3, r5
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1da>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x258>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b0>
 8000538:	3d02      	subs	r5, #2
 800053a:	4462      	add	r2, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x124>
 800053e:	4608      	mov	r0, r1
 8000540:	e70a      	b.n	8000358 <__udivmoddi4+0xd8>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x14e>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000552:	463b      	mov	r3, r7
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_DAC_Init+0x4c>)
 800055c:	4a0f      	ldr	r2, [pc, #60]	; (800059c <MX_DAC_Init+0x50>)
 800055e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000560:	480d      	ldr	r0, [pc, #52]	; (8000598 <MX_DAC_Init+0x4c>)
 8000562:	f001 fbd1 	bl	8001d08 <HAL_DAC_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800056c:	f000 fd2e 	bl	8000fcc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000570:	2300      	movs	r3, #0
 8000572:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000578:	463b      	mov	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	4619      	mov	r1, r3
 800057e:	4806      	ldr	r0, [pc, #24]	; (8000598 <MX_DAC_Init+0x4c>)
 8000580:	f001 fc48 	bl	8001e14 <HAL_DAC_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800058a:	f000 fd1f 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000a8 	.word	0x200000a8
 800059c:	40007400 	.word	0x40007400

080005a0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a19      	ldr	r2, [pc, #100]	; (8000624 <HAL_DAC_MspInit+0x84>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d12b      	bne.n	800061a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80005c2:	4b19      	ldr	r3, [pc, #100]	; (8000628 <HAL_DAC_MspInit+0x88>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	4a18      	ldr	r2, [pc, #96]	; (8000628 <HAL_DAC_MspInit+0x88>)
 80005c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80005cc:	6413      	str	r3, [r2, #64]	; 0x40
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <HAL_DAC_MspInit+0x88>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <HAL_DAC_MspInit+0x88>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a12      	ldr	r2, [pc, #72]	; (8000628 <HAL_DAC_MspInit+0x88>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <HAL_DAC_MspInit+0x88>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = BLDCMotorStep_Pin;
 80005f2:	2310      	movs	r3, #16
 80005f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f6:	2303      	movs	r3, #3
 80005f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLDCMotorStep_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	4809      	ldr	r0, [pc, #36]	; (800062c <HAL_DAC_MspInit+0x8c>)
 8000606:	f001 ffdb 	bl	80025c0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2105      	movs	r1, #5
 800060e:	2036      	movs	r0, #54	; 0x36
 8000610:	f001 fb50 	bl	8001cb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000614:	2036      	movs	r0, #54	; 0x36
 8000616:	f001 fb69 	bl	8001cec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	; 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40007400 	.word	0x40007400
 8000628:	40023800 	.word	0x40023800
 800062c:	40020000 	.word	0x40020000

08000630 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_DMA_Init+0x38>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <MX_DMA_Init+0x38>)
 800063c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_DMA_Init+0x38>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2105      	movs	r1, #5
 8000652:	203b      	movs	r0, #59	; 0x3b
 8000654:	f001 fb2e 	bl	8001cb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000658:	203b      	movs	r0, #59	; 0x3b
 800065a:	f001 fb47 	bl	8001cec <HAL_NVIC_EnableIRQ>

}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8000670:	4a38      	ldr	r2, [pc, #224]	; (8000754 <MX_FREERTOS_Init+0xe8>)
 8000672:	2100      	movs	r1, #0
 8000674:	4838      	ldr	r0, [pc, #224]	; (8000758 <MX_FREERTOS_Init+0xec>)
 8000676:	f006 fa09 	bl	8006a8c <osThreadNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a37      	ldr	r2, [pc, #220]	; (800075c <MX_FREERTOS_Init+0xf0>)
 800067e:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartDispatcherTask, NULL, &DispatcherTask_attributes);
 8000680:	4a37      	ldr	r2, [pc, #220]	; (8000760 <MX_FREERTOS_Init+0xf4>)
 8000682:	2100      	movs	r1, #0
 8000684:	4837      	ldr	r0, [pc, #220]	; (8000764 <MX_FREERTOS_Init+0xf8>)
 8000686:	f006 fa01 	bl	8006a8c <osThreadNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a36      	ldr	r2, [pc, #216]	; (8000768 <MX_FREERTOS_Init+0xfc>)
 800068e:	6013      	str	r3, [r2, #0]

  /* creation of StopTask */
  StopTaskHandle = osThreadNew(StartStopTask, NULL, &StopTask_attributes);
 8000690:	4a36      	ldr	r2, [pc, #216]	; (800076c <MX_FREERTOS_Init+0x100>)
 8000692:	2100      	movs	r1, #0
 8000694:	4836      	ldr	r0, [pc, #216]	; (8000770 <MX_FREERTOS_Init+0x104>)
 8000696:	f006 f9f9 	bl	8006a8c <osThreadNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a35      	ldr	r2, [pc, #212]	; (8000774 <MX_FREERTOS_Init+0x108>)
 800069e:	6013      	str	r3, [r2, #0]

  /* creation of DrivingLightsTa */
  DrivingLightsTaHandle = osThreadNew(StartDrivingLightsTask, NULL, &DrivingLightsTa_attributes);
 80006a0:	4a35      	ldr	r2, [pc, #212]	; (8000778 <MX_FREERTOS_Init+0x10c>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4835      	ldr	r0, [pc, #212]	; (800077c <MX_FREERTOS_Init+0x110>)
 80006a6:	f006 f9f1 	bl	8006a8c <osThreadNew>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a34      	ldr	r2, [pc, #208]	; (8000780 <MX_FREERTOS_Init+0x114>)
 80006ae:	6013      	str	r3, [r2, #0]

  /* creation of LEDStripeTask */
  LEDStripeTaskHandle = osThreadNew(StartLEDStripeTask, NULL, &LEDStripeTask_attributes);
 80006b0:	4a34      	ldr	r2, [pc, #208]	; (8000784 <MX_FREERTOS_Init+0x118>)
 80006b2:	2100      	movs	r1, #0
 80006b4:	4834      	ldr	r0, [pc, #208]	; (8000788 <MX_FREERTOS_Init+0x11c>)
 80006b6:	f006 f9e9 	bl	8006a8c <osThreadNew>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a33      	ldr	r2, [pc, #204]	; (800078c <MX_FREERTOS_Init+0x120>)
 80006be:	6013      	str	r3, [r2, #0]

  /* creation of LeftBlinkersTas */
  LeftBlinkersTasHandle = osThreadNew(StartLeftBlinkersTask, NULL, &LeftBlinkersTas_attributes);
 80006c0:	4a33      	ldr	r2, [pc, #204]	; (8000790 <MX_FREERTOS_Init+0x124>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	4833      	ldr	r0, [pc, #204]	; (8000794 <MX_FREERTOS_Init+0x128>)
 80006c6:	f006 f9e1 	bl	8006a8c <osThreadNew>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a32      	ldr	r2, [pc, #200]	; (8000798 <MX_FREERTOS_Init+0x12c>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* creation of RightBlinkersTa */
  RightBlinkersTaHandle = osThreadNew(StartRightBlinkersTask, NULL, &RightBlinkersTa_attributes);
 80006d0:	4a32      	ldr	r2, [pc, #200]	; (800079c <MX_FREERTOS_Init+0x130>)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4832      	ldr	r0, [pc, #200]	; (80007a0 <MX_FREERTOS_Init+0x134>)
 80006d6:	f006 f9d9 	bl	8006a8c <osThreadNew>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a31      	ldr	r2, [pc, #196]	; (80007a4 <MX_FREERTOS_Init+0x138>)
 80006de:	6013      	str	r3, [r2, #0]

  /* creation of ParkLeftTask */
  ParkLeftTaskHandle = osThreadNew(StartParkLeftTask, NULL, &ParkLeftTask_attributes);
 80006e0:	4a31      	ldr	r2, [pc, #196]	; (80007a8 <MX_FREERTOS_Init+0x13c>)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4831      	ldr	r0, [pc, #196]	; (80007ac <MX_FREERTOS_Init+0x140>)
 80006e6:	f006 f9d1 	bl	8006a8c <osThreadNew>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a30      	ldr	r2, [pc, #192]	; (80007b0 <MX_FREERTOS_Init+0x144>)
 80006ee:	6013      	str	r3, [r2, #0]

  /* creation of ParkRightTask */
  ParkRightTaskHandle = osThreadNew(StartParkRightTask, NULL, &ParkRightTask_attributes);
 80006f0:	4a30      	ldr	r2, [pc, #192]	; (80007b4 <MX_FREERTOS_Init+0x148>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	4830      	ldr	r0, [pc, #192]	; (80007b8 <MX_FREERTOS_Init+0x14c>)
 80006f6:	f006 f9c9 	bl	8006a8c <osThreadNew>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a2f      	ldr	r2, [pc, #188]	; (80007bc <MX_FREERTOS_Init+0x150>)
 80006fe:	6013      	str	r3, [r2, #0]

  /* creation of AccelerateTask */
  AccelerateTaskHandle = osThreadNew(StartAccelerateTask, NULL, &AccelerateTask_attributes);
 8000700:	4a2f      	ldr	r2, [pc, #188]	; (80007c0 <MX_FREERTOS_Init+0x154>)
 8000702:	2100      	movs	r1, #0
 8000704:	482f      	ldr	r0, [pc, #188]	; (80007c4 <MX_FREERTOS_Init+0x158>)
 8000706:	f006 f9c1 	bl	8006a8c <osThreadNew>
 800070a:	4603      	mov	r3, r0
 800070c:	4a2e      	ldr	r2, [pc, #184]	; (80007c8 <MX_FREERTOS_Init+0x15c>)
 800070e:	6013      	str	r3, [r2, #0]

  /* creation of DecelerateTask */
  DecelerateTaskHandle = osThreadNew(StartDecelerateTask, NULL, &DecelerateTask_attributes);
 8000710:	4a2e      	ldr	r2, [pc, #184]	; (80007cc <MX_FREERTOS_Init+0x160>)
 8000712:	2100      	movs	r1, #0
 8000714:	482e      	ldr	r0, [pc, #184]	; (80007d0 <MX_FREERTOS_Init+0x164>)
 8000716:	f006 f9b9 	bl	8006a8c <osThreadNew>
 800071a:	4603      	mov	r3, r0
 800071c:	4a2d      	ldr	r2, [pc, #180]	; (80007d4 <MX_FREERTOS_Init+0x168>)
 800071e:	6013      	str	r3, [r2, #0]

  /* creation of TurnLeftTask */
  TurnLeftTaskHandle = osThreadNew(StartTurnLeftTask, NULL, &TurnLeftTask_attributes);
 8000720:	4a2d      	ldr	r2, [pc, #180]	; (80007d8 <MX_FREERTOS_Init+0x16c>)
 8000722:	2100      	movs	r1, #0
 8000724:	482d      	ldr	r0, [pc, #180]	; (80007dc <MX_FREERTOS_Init+0x170>)
 8000726:	f006 f9b1 	bl	8006a8c <osThreadNew>
 800072a:	4603      	mov	r3, r0
 800072c:	4a2c      	ldr	r2, [pc, #176]	; (80007e0 <MX_FREERTOS_Init+0x174>)
 800072e:	6013      	str	r3, [r2, #0]

  /* creation of TurnRightTask */
  TurnRightTaskHandle = osThreadNew(StartTurnRightTask, NULL, &TurnRightTask_attributes);
 8000730:	4a2c      	ldr	r2, [pc, #176]	; (80007e4 <MX_FREERTOS_Init+0x178>)
 8000732:	2100      	movs	r1, #0
 8000734:	482c      	ldr	r0, [pc, #176]	; (80007e8 <MX_FREERTOS_Init+0x17c>)
 8000736:	f006 f9a9 	bl	8006a8c <osThreadNew>
 800073a:	4603      	mov	r3, r0
 800073c:	4a2b      	ldr	r2, [pc, #172]	; (80007ec <MX_FREERTOS_Init+0x180>)
 800073e:	6013      	str	r3, [r2, #0]

  /* creation of ConnectionTask */
  ConnectionTaskHandle = osThreadNew(StartConnectionTask, NULL, &ConnectionTask_attributes);
 8000740:	4a2b      	ldr	r2, [pc, #172]	; (80007f0 <MX_FREERTOS_Init+0x184>)
 8000742:	2100      	movs	r1, #0
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_FREERTOS_Init+0x188>)
 8000746:	f006 f9a1 	bl	8006a8c <osThreadNew>
 800074a:	4603      	mov	r3, r0
 800074c:	4a2a      	ldr	r2, [pc, #168]	; (80007f8 <MX_FREERTOS_Init+0x18c>)
 800074e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	08009b8c 	.word	0x08009b8c
 8000758:	080007fd 	.word	0x080007fd
 800075c:	200000cc 	.word	0x200000cc
 8000760:	08009bb0 	.word	0x08009bb0
 8000764:	08000885 	.word	0x08000885
 8000768:	200000d0 	.word	0x200000d0
 800076c:	08009bd4 	.word	0x08009bd4
 8000770:	080009b9 	.word	0x080009b9
 8000774:	200000d4 	.word	0x200000d4
 8000778:	08009bf8 	.word	0x08009bf8
 800077c:	080009c9 	.word	0x080009c9
 8000780:	200000d8 	.word	0x200000d8
 8000784:	08009c1c 	.word	0x08009c1c
 8000788:	080009d9 	.word	0x080009d9
 800078c:	200000dc 	.word	0x200000dc
 8000790:	08009c40 	.word	0x08009c40
 8000794:	080009e9 	.word	0x080009e9
 8000798:	200000e0 	.word	0x200000e0
 800079c:	08009c64 	.word	0x08009c64
 80007a0:	080009f9 	.word	0x080009f9
 80007a4:	200000e4 	.word	0x200000e4
 80007a8:	08009c88 	.word	0x08009c88
 80007ac:	08000a09 	.word	0x08000a09
 80007b0:	200000e8 	.word	0x200000e8
 80007b4:	08009cac 	.word	0x08009cac
 80007b8:	08000a19 	.word	0x08000a19
 80007bc:	200000ec 	.word	0x200000ec
 80007c0:	08009cd0 	.word	0x08009cd0
 80007c4:	08000a29 	.word	0x08000a29
 80007c8:	200000f0 	.word	0x200000f0
 80007cc:	08009cf4 	.word	0x08009cf4
 80007d0:	08000a39 	.word	0x08000a39
 80007d4:	200000f4 	.word	0x200000f4
 80007d8:	08009d18 	.word	0x08009d18
 80007dc:	08000a49 	.word	0x08000a49
 80007e0:	200000f8 	.word	0x200000f8
 80007e4:	08009d3c 	.word	0x08009d3c
 80007e8:	08000a59 	.word	0x08000a59
 80007ec:	200000fc 	.word	0x200000fc
 80007f0:	08009d60 	.word	0x08009d60
 80007f4:	08000a69 	.word	0x08000a69
 80007f8:	20000100 	.word	0x20000100

080007fc <StartOLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
	// Prepare bodyVersion string
	strcat(bodyVersion, versionName);
 8000804:	481a      	ldr	r0, [pc, #104]	; (8000870 <StartOLEDTask+0x74>)
 8000806:	f7ff fd1b 	bl	8000240 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <StartOLEDTask+0x74>)
 8000810:	4413      	add	r3, r2
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <StartOLEDTask+0x78>)
 8000814:	6810      	ldr	r0, [r2, #0]
 8000816:	6018      	str	r0, [r3, #0]

	// Initiate display
	ssd1306_Init();
 8000818:	f000 fcea 	bl	80011f0 <ssd1306_Init>
	uint8_t y = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	73fb      	strb	r3, [r7, #15]
	ssd1306_Fill(Black);
 8000820:	2000      	movs	r0, #0
 8000822:	f000 fd4f 	bl	80012c4 <ssd1306_Fill>

  /* Infinite loop */
  for(;;)
  {
	  // Set header
	  ssd1306_SetCursor(2, y);
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	4619      	mov	r1, r3
 800082a:	2002      	movs	r0, #2
 800082c:	f000 fe8c 	bl	8001548 <ssd1306_SetCursor>
	  ssd1306_WriteString(headerBootingUp, Font_7x10, White);
 8000830:	4a11      	ldr	r2, [pc, #68]	; (8000878 <StartOLEDTask+0x7c>)
 8000832:	2301      	movs	r3, #1
 8000834:	ca06      	ldmia	r2, {r1, r2}
 8000836:	4811      	ldr	r0, [pc, #68]	; (800087c <StartOLEDTask+0x80>)
 8000838:	f000 fe60 	bl	80014fc <ssd1306_WriteString>
	  y += 30;
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	331e      	adds	r3, #30
 8000840:	73fb      	strb	r3, [r7, #15]

	  // Set body
	  ssd1306_SetCursor(2, y);
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	4619      	mov	r1, r3
 8000846:	2002      	movs	r0, #2
 8000848:	f000 fe7e 	bl	8001548 <ssd1306_SetCursor>
	  ssd1306_WriteString(bodyVersion, Font_11x18, White);
 800084c:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <StartOLEDTask+0x84>)
 800084e:	2301      	movs	r3, #1
 8000850:	ca06      	ldmia	r2, {r1, r2}
 8000852:	4807      	ldr	r0, [pc, #28]	; (8000870 <StartOLEDTask+0x74>)
 8000854:	f000 fe52 	bl	80014fc <ssd1306_WriteString>
	  y += 36;
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	3324      	adds	r3, #36	; 0x24
 800085c:	73fb      	strb	r3, [r7, #15]

	  ssd1306_UpdateScreen();
 800085e:	f000 fd49 	bl	80012f4 <ssd1306_UpdateScreen>
	  y = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	73fb      	strb	r3, [r7, #15]

	  vTaskSuspend(NULL);
 8000866:	2000      	movs	r0, #0
 8000868:	f007 f9cc 	bl	8007c04 <vTaskSuspend>
	  ssd1306_SetCursor(2, y);
 800086c:	e7db      	b.n	8000826 <StartOLEDTask+0x2a>
 800086e:	bf00      	nop
 8000870:	20000010 	.word	0x20000010
 8000874:	08009b88 	.word	0x08009b88
 8000878:	2000001c 	.word	0x2000001c
 800087c:	20000000 	.word	0x20000000
 8000880:	20000024 	.word	0x20000024

08000884 <StartDispatcherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDispatcherTask */
void StartDispatcherTask(void *argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDispatcherTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 800088c:	2000      	movs	r0, #0
 800088e:	f007 f9b9 	bl	8007c04 <vTaskSuspend>

	  switch(rx_buffer[0]) {
 8000892:	4b3c      	ldr	r3, [pc, #240]	; (8000984 <StartDispatcherTask+0x100>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	3b01      	subs	r3, #1
 8000898:	2b13      	cmp	r3, #19
 800089a:	d86d      	bhi.n	8000978 <StartDispatcherTask+0xf4>
 800089c:	a201      	add	r2, pc, #4	; (adr r2, 80008a4 <StartDispatcherTask+0x20>)
 800089e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a2:	bf00      	nop
 80008a4:	080008f5 	.word	0x080008f5
 80008a8:	08000901 	.word	0x08000901
 80008ac:	0800090d 	.word	0x0800090d
 80008b0:	08000919 	.word	0x08000919
 80008b4:	08000925 	.word	0x08000925
 80008b8:	08000931 	.word	0x08000931
 80008bc:	0800093d 	.word	0x0800093d
 80008c0:	08000979 	.word	0x08000979
 80008c4:	08000979 	.word	0x08000979
 80008c8:	08000979 	.word	0x08000979
 80008cc:	08000979 	.word	0x08000979
 80008d0:	08000979 	.word	0x08000979
 80008d4:	08000979 	.word	0x08000979
 80008d8:	08000979 	.word	0x08000979
 80008dc:	08000979 	.word	0x08000979
 80008e0:	08000979 	.word	0x08000979
 80008e4:	08000949 	.word	0x08000949
 80008e8:	08000955 	.word	0x08000955
 80008ec:	08000961 	.word	0x08000961
 80008f0:	0800096d 	.word	0x0800096d
		case 0x1:		// Stop vehicle.
			vTaskResume(StopTaskHandle);
 80008f4:	4b24      	ldr	r3, [pc, #144]	; (8000988 <StartDispatcherTask+0x104>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f007 fa2f 	bl	8007d5c <vTaskResume>
			break;
 80008fe:	e040      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x2:		// Toggle driving lights.
			vTaskResume(DrivingLightsTaHandle);
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <StartDispatcherTask+0x108>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f007 fa29 	bl	8007d5c <vTaskResume>
			break;
 800090a:	e03a      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x3:		// Toggle RGB stripe.
			vTaskResume(LEDStripeTaskHandle);
 800090c:	4b20      	ldr	r3, [pc, #128]	; (8000990 <StartDispatcherTask+0x10c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f007 fa23 	bl	8007d5c <vTaskResume>
			break;
 8000916:	e034      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x4:		// Turn left blinkers on.
			vTaskResume(LeftBlinkersTasHandle);
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <StartDispatcherTask+0x110>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f007 fa1d 	bl	8007d5c <vTaskResume>
			break;
 8000922:	e02e      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x5:		// Turn right blinkers on.
			vTaskResume(RightBlinkersTaHandle);
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <StartDispatcherTask+0x114>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f007 fa17 	bl	8007d5c <vTaskResume>
			break;
 800092e:	e028      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x6:		// Toggle parking to the left.
			vTaskResume(ParkLeftTaskHandle);
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <StartDispatcherTask+0x118>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f007 fa11 	bl	8007d5c <vTaskResume>
			break;
 800093a:	e022      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x7:		// Toggle parking to the right.
			vTaskResume(ParkRightTaskHandle);
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <StartDispatcherTask+0x11c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f007 fa0b 	bl	8007d5c <vTaskResume>
			break;
 8000946:	e01c      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x11:		// Accelerate.
			vTaskResume(AccelerateTaskHandle);
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <StartDispatcherTask+0x120>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f007 fa05 	bl	8007d5c <vTaskResume>
			break;
 8000952:	e016      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x12:		// Decelerate.
			vTaskResume(DecelerateTaskHandle);
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <StartDispatcherTask+0x124>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f007 f9ff 	bl	8007d5c <vTaskResume>
			break;
 800095e:	e010      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x13:		// Turn left.
			vTaskResume(TurnLeftTaskHandle);
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <StartDispatcherTask+0x128>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f007 f9f9 	bl	8007d5c <vTaskResume>
			break;
 800096a:	e00a      	b.n	8000982 <StartDispatcherTask+0xfe>
		case 0x14:		// Turn right.
			vTaskResume(TurnRightTaskHandle);
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <StartDispatcherTask+0x12c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f007 f9f3 	bl	8007d5c <vTaskResume>
			break;
 8000976:	e004      	b.n	8000982 <StartDispatcherTask+0xfe>
		default:		// Acknowledge connection.
			vTaskResume(ConnectionTaskHandle);
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <StartDispatcherTask+0x130>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	f007 f9ed 	bl	8007d5c <vTaskResume>
	  vTaskSuspend(NULL);
 8000982:	e783      	b.n	800088c <StartDispatcherTask+0x8>
 8000984:	200000bc 	.word	0x200000bc
 8000988:	200000d4 	.word	0x200000d4
 800098c:	200000d8 	.word	0x200000d8
 8000990:	200000dc 	.word	0x200000dc
 8000994:	200000e0 	.word	0x200000e0
 8000998:	200000e4 	.word	0x200000e4
 800099c:	200000e8 	.word	0x200000e8
 80009a0:	200000ec 	.word	0x200000ec
 80009a4:	200000f0 	.word	0x200000f0
 80009a8:	200000f4 	.word	0x200000f4
 80009ac:	200000f8 	.word	0x200000f8
 80009b0:	200000fc 	.word	0x200000fc
 80009b4:	20000100 	.word	0x20000100

080009b8 <StartStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStopTask */
void StartStopTask(void *argument)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStopTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009c0:	2001      	movs	r0, #1
 80009c2:	f006 f909 	bl	8006bd8 <osDelay>
 80009c6:	e7fb      	b.n	80009c0 <StartStopTask+0x8>

080009c8 <StartDrivingLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDrivingLightsTask */
void StartDrivingLightsTask(void *argument)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDrivingLightsTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009d0:	2001      	movs	r0, #1
 80009d2:	f006 f901 	bl	8006bd8 <osDelay>
 80009d6:	e7fb      	b.n	80009d0 <StartDrivingLightsTask+0x8>

080009d8 <StartLEDStripeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDStripeTask */
void StartLEDStripeTask(void *argument)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDStripeTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f006 f8f9 	bl	8006bd8 <osDelay>
 80009e6:	e7fb      	b.n	80009e0 <StartLEDStripeTask+0x8>

080009e8 <StartLeftBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeftBlinkersTask */
void StartLeftBlinkersTask(void *argument)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLeftBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f006 f8f1 	bl	8006bd8 <osDelay>
 80009f6:	e7fb      	b.n	80009f0 <StartLeftBlinkersTask+0x8>

080009f8 <StartRightBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRightBlinkersTask */
void StartRightBlinkersTask(void *argument)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRightBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a00:	2001      	movs	r0, #1
 8000a02:	f006 f8e9 	bl	8006bd8 <osDelay>
 8000a06:	e7fb      	b.n	8000a00 <StartRightBlinkersTask+0x8>

08000a08 <StartParkLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkLeftTask */
void StartParkLeftTask(void *argument)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkLeftTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f006 f8e1 	bl	8006bd8 <osDelay>
 8000a16:	e7fb      	b.n	8000a10 <StartParkLeftTask+0x8>

08000a18 <StartParkRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkRightTask */
void StartParkRightTask(void *argument)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkRightTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f006 f8d9 	bl	8006bd8 <osDelay>
 8000a26:	e7fb      	b.n	8000a20 <StartParkRightTask+0x8>

08000a28 <StartAccelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccelerateTask */
void StartAccelerateTask(void *argument)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccelerateTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f006 f8d1 	bl	8006bd8 <osDelay>
 8000a36:	e7fb      	b.n	8000a30 <StartAccelerateTask+0x8>

08000a38 <StartDecelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDecelerateTask */
void StartDecelerateTask(void *argument)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDecelerateTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f006 f8c9 	bl	8006bd8 <osDelay>
 8000a46:	e7fb      	b.n	8000a40 <StartDecelerateTask+0x8>

08000a48 <StartTurnLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnLeftTask */
void StartTurnLeftTask(void *argument)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnLeftTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a50:	2001      	movs	r0, #1
 8000a52:	f006 f8c1 	bl	8006bd8 <osDelay>
 8000a56:	e7fb      	b.n	8000a50 <StartTurnLeftTask+0x8>

08000a58 <StartTurnRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnRightTask */
void StartTurnRightTask(void *argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnRightTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f006 f8b9 	bl	8006bd8 <osDelay>
 8000a66:	e7fb      	b.n	8000a60 <StartTurnRightTask+0x8>

08000a68 <StartConnectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConnectionTask */
void StartConnectionTask(void *argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConnectionTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f006 f8b1 	bl	8006bd8 <osDelay>
 8000a76:	e7fb      	b.n	8000a70 <StartConnectionTask+0x8>

08000a78 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	; 0x30
 8000a7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	4b94      	ldr	r3, [pc, #592]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a93      	ldr	r2, [pc, #588]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b91      	ldr	r3, [pc, #580]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	61bb      	str	r3, [r7, #24]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa6:	4b8e      	ldr	r3, [pc, #568]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a8d      	ldr	r2, [pc, #564]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b8b      	ldr	r3, [pc, #556]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b88      	ldr	r3, [pc, #544]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a87      	ldr	r2, [pc, #540]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b85      	ldr	r3, [pc, #532]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b82      	ldr	r3, [pc, #520]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a81      	ldr	r2, [pc, #516]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b7f      	ldr	r3, [pc, #508]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	4b7c      	ldr	r3, [pc, #496]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a7b      	ldr	r2, [pc, #492]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b79      	ldr	r3, [pc, #484]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b06:	4b76      	ldr	r3, [pc, #472]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a75      	ldr	r2, [pc, #468]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b73      	ldr	r3, [pc, #460]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f244 0191 	movw	r1, #16529	; 0x4091
 8000b24:	486f      	ldr	r0, [pc, #444]	; (8000ce4 <MX_GPIO_Init+0x26c>)
 8000b26:	f001 fef7 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b30:	486d      	ldr	r0, [pc, #436]	; (8000ce8 <MX_GPIO_Init+0x270>)
 8000b32:	f001 fef1 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2140      	movs	r1, #64	; 0x40
 8000b3a:	486c      	ldr	r0, [pc, #432]	; (8000cec <MX_GPIO_Init+0x274>)
 8000b3c:	f001 feec 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 8000b40:	2200      	movs	r2, #0
 8000b42:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000b46:	486a      	ldr	r0, [pc, #424]	; (8000cf0 <MX_GPIO_Init+0x278>)
 8000b48:	f001 fee6 	bl	8002918 <HAL_GPIO_WritePin>
                          |WithdrawLights_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	4863      	ldr	r0, [pc, #396]	; (8000cf0 <MX_GPIO_Init+0x278>)
 8000b64:	f001 fd2c 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b68:	2332      	movs	r3, #50	; 0x32
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b78:	230b      	movs	r3, #11
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	485b      	ldr	r0, [pc, #364]	; (8000cf0 <MX_GPIO_Init+0x278>)
 8000b84:	f001 fd1c 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b88:	2386      	movs	r3, #134	; 0x86
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b98:	230b      	movs	r3, #11
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4854      	ldr	r0, [pc, #336]	; (8000cf4 <MX_GPIO_Init+0x27c>)
 8000ba4:	f001 fd0c 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin;
 8000ba8:	f244 0391 	movw	r3, #16529	; 0x4091
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4848      	ldr	r0, [pc, #288]	; (8000ce4 <MX_GPIO_Init+0x26c>)
 8000bc2:	f001 fcfd 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd8:	230b      	movs	r3, #11
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	4840      	ldr	r0, [pc, #256]	; (8000ce4 <MX_GPIO_Init+0x26c>)
 8000be4:	f001 fcec 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000be8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4838      	ldr	r0, [pc, #224]	; (8000ce8 <MX_GPIO_Init+0x270>)
 8000c06:	f001 fcdb 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = StepperMotorDir_Pin;
 8000c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(StepperMotorDir_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	4831      	ldr	r0, [pc, #196]	; (8000ce8 <MX_GPIO_Init+0x270>)
 8000c24:	f001 fccc 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c28:	2340      	movs	r3, #64	; 0x40
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	482b      	ldr	r0, [pc, #172]	; (8000cec <MX_GPIO_Init+0x274>)
 8000c40:	f001 fcbe 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4825      	ldr	r0, [pc, #148]	; (8000cec <MX_GPIO_Init+0x274>)
 8000c58:	f001 fcb2 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 8000c5c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000c60:	61fb      	str	r3, [r7, #28]
                          |WithdrawLights_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	481e      	ldr	r0, [pc, #120]	; (8000cf0 <MX_GPIO_Init+0x278>)
 8000c76:	f001 fca3 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c7a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	4817      	ldr	r0, [pc, #92]	; (8000cf4 <MX_GPIO_Init+0x27c>)
 8000c98:	f001 fc92 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4810      	ldr	r0, [pc, #64]	; (8000cf4 <MX_GPIO_Init+0x27c>)
 8000cb2:	f001 fc85 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cb6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc8:	230b      	movs	r3, #11
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <MX_GPIO_Init+0x274>)
 8000cd4:	f001 fc74 	bl	80025c0 <HAL_GPIO_Init>

}
 8000cd8:	bf00      	nop
 8000cda:	3730      	adds	r7, #48	; 0x30
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020400 	.word	0x40020400
 8000ce8:	40020c00 	.word	0x40020c00
 8000cec:	40021800 	.word	0x40021800
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000cfe:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <MX_I2C1_Init+0x78>)
 8000d00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d04:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <MX_I2C1_Init+0x7c>)
 8000d06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d32:	480e      	ldr	r0, [pc, #56]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d34:	f001 fe0a 	bl	800294c <HAL_I2C_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d3e:	f000 f945 	bl	8000fcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d42:	2100      	movs	r1, #0
 8000d44:	4809      	ldr	r0, [pc, #36]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d46:	f002 f9eb 	bl	8003120 <HAL_I2CEx_ConfigAnalogFilter>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d50:	f000 f93c 	bl	8000fcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d54:	2100      	movs	r1, #0
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_I2C1_Init+0x74>)
 8000d58:	f002 fa2d 	bl	80031b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d62:	f000 f933 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000104 	.word	0x20000104
 8000d70:	40005400 	.word	0x40005400
 8000d74:	20404768 	.word	0x20404768

08000d78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0ae      	sub	sp, #184	; 0xb8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2290      	movs	r2, #144	; 0x90
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f008 fd87 	bl	80098ac <memset>
  if(i2cHandle->Instance==I2C1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a22      	ldr	r2, [pc, #136]	; (8000e2c <HAL_I2C_MspInit+0xb4>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d13c      	bne.n	8000e22 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000da8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 ff60 	bl	8003c7c <HAL_RCCEx_PeriphCLKConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000dc2:	f000 f903 	bl	8000fcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_I2C_MspInit+0xb8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a19      	ldr	r2, [pc, #100]	; (8000e30 <HAL_I2C_MspInit+0xb8>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_I2C_MspInit+0xb8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000dde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de6:	2312      	movs	r3, #18
 8000de8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e02:	4619      	mov	r1, r3
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <HAL_I2C_MspInit+0xbc>)
 8000e06:	f001 fbdb 	bl	80025c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <HAL_I2C_MspInit+0xb8>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <HAL_I2C_MspInit+0xb8>)
 8000e10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_I2C_MspInit+0xb8>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e22:	bf00      	nop
 8000e24:	37b8      	adds	r7, #184	; 0xb8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40005400 	.word	0x40005400
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020400 	.word	0x40020400

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3c:	f000 fe31 	bl	8001aa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e40:	f000 f81e 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e44:	f7ff fe18 	bl	8000a78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e48:	f7ff fbf2 	bl	8000630 <MX_DMA_Init>
  MX_SPI1_Init();
 8000e4c:	f000 f8c4 	bl	8000fd8 <MX_SPI1_Init>
  MX_DAC_Init();
 8000e50:	f7ff fb7c 	bl	800054c <MX_DAC_Init>
  MX_I2C1_Init();
 8000e54:	f7ff ff50 	bl	8000cf8 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000e58:	f000 fcb2 	bl	80017c0 <MX_TIM4_Init>
  MX_UART4_Init();
 8000e5c:	f000 fd62 	bl	8001924 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart4, rx_buffer, 16);
 8000e60:	2210      	movs	r2, #16
 8000e62:	4905      	ldr	r1, [pc, #20]	; (8000e78 <main+0x40>)
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <main+0x44>)
 8000e66:	f004 fb5f 	bl	8005528 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000e6a:	f005 fda5 	bl	80069b8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000e6e:	f7ff fbfd 	bl	800066c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e72:	f005 fdd5 	bl	8006a20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <main+0x3e>
 8000e78:	200000bc 	.word	0x200000bc
 8000e7c:	200006bc 	.word	0x200006bc

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b094      	sub	sp, #80	; 0x50
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	2234      	movs	r2, #52	; 0x34
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f008 fd0c 	bl	80098ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea4:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <SystemClock_Config+0xd4>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a2a      	ldr	r2, [pc, #168]	; (8000f54 <SystemClock_Config+0xd4>)
 8000eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb0:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <SystemClock_Config+0xd4>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <SystemClock_Config+0xd8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a25      	ldr	r2, [pc, #148]	; (8000f58 <SystemClock_Config+0xd8>)
 8000ec2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <SystemClock_Config+0xd8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000edc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000ee8:	230d      	movs	r3, #13
 8000eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000eec:	23d8      	movs	r3, #216	; 0xd8
 8000eee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4618      	mov	r0, r3
 8000f02:	f002 f9f5 	bl	80032f0 <HAL_RCC_OscConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f0c:	f000 f85e 	bl	8000fcc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f10:	f002 f99e 	bl	8003250 <HAL_PWREx_EnableOverDrive>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f1a:	f000 f857 	bl	8000fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1e:	230f      	movs	r3, #15
 8000f20:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f22:	2302      	movs	r3, #2
 8000f24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f2a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f34:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	2107      	movs	r1, #7
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 fc85 	bl	800384c <HAL_RCC_ClockConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000f48:	f000 f840 	bl	8000fcc <Error_Handler>
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3750      	adds	r7, #80	; 0x50
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40007000 	.word	0x40007000

08000f5c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart4x) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	portYIELD_FROM_ISR(xTaskResumeFromISR(DispatcherTaskHandle));
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <HAL_UART_RxCpltCallback+0x3c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f006 ff57 	bl	8007e1c <xTaskResumeFromISR>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d007      	beq.n	8000f84 <HAL_UART_RxCpltCallback+0x28>
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_UART_RxCpltCallback+0x40>)
 8000f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	f3bf 8f4f 	dsb	sy
 8000f80:	f3bf 8f6f 	isb	sy
	HAL_UART_Receive_IT(&huart4, rx_buffer, 16);					// Used for "opening" ST MCU for future interrupts on RX
 8000f84:	2210      	movs	r2, #16
 8000f86:	4906      	ldr	r1, [pc, #24]	; (8000fa0 <HAL_UART_RxCpltCallback+0x44>)
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <HAL_UART_RxCpltCallback+0x48>)
 8000f8a:	f004 facd 	bl	8005528 <HAL_UART_Receive_IT>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200000d0 	.word	0x200000d0
 8000f9c:	e000ed04 	.word	0xe000ed04
 8000fa0:	200000bc 	.word	0x200000bc
 8000fa4:	200006bc 	.word	0x200006bc

08000fa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fba:	f000 fd7f 	bl	8001abc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40001000 	.word	0x40001000

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <Error_Handler+0x8>
	...

08000fd8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <MX_SPI1_Init+0x74>)
 8000fde:	4a1c      	ldr	r2, [pc, #112]	; (8001050 <MX_SPI1_Init+0x78>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <MX_SPI1_Init+0x74>)
 8000fe4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fe8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <MX_SPI1_Init+0x74>)
 8000fec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ff0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <MX_SPI1_Init+0x74>)
 8000ff4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ff8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <MX_SPI1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <MX_SPI1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_SPI1_Init+0x74>)
 8001008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <MX_SPI1_Init+0x74>)
 8001010:	2210      	movs	r2, #16
 8001012:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <MX_SPI1_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_SPI1_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <MX_SPI1_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_SPI1_Init+0x74>)
 8001028:	2207      	movs	r2, #7
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <MX_SPI1_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_SPI1_Init+0x74>)
 8001034:	2208      	movs	r2, #8
 8001036:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <MX_SPI1_Init+0x74>)
 800103a:	f003 fa47 	bl	80044cc <HAL_SPI_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001044:	f7ff ffc2 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000158 	.word	0x20000158
 8001050:	40013000 	.word	0x40013000

08001054 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a3c      	ldr	r2, [pc, #240]	; (8001164 <HAL_SPI_MspInit+0x110>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d171      	bne.n	800115a <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001076:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <HAL_SPI_MspInit+0x114>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a3b      	ldr	r2, [pc, #236]	; (8001168 <HAL_SPI_MspInit+0x114>)
 800107c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	4b39      	ldr	r3, [pc, #228]	; (8001168 <HAL_SPI_MspInit+0x114>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b36      	ldr	r3, [pc, #216]	; (8001168 <HAL_SPI_MspInit+0x114>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a35      	ldr	r2, [pc, #212]	; (8001168 <HAL_SPI_MspInit+0x114>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b33      	ldr	r3, [pc, #204]	; (8001168 <HAL_SPI_MspInit+0x114>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a6:	4b30      	ldr	r3, [pc, #192]	; (8001168 <HAL_SPI_MspInit+0x114>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a2f      	ldr	r2, [pc, #188]	; (8001168 <HAL_SPI_MspInit+0x114>)
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <HAL_SPI_MspInit+0x114>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010be:	2320      	movs	r3, #32
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ce:	2305      	movs	r3, #5
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	4824      	ldr	r0, [pc, #144]	; (800116c <HAL_SPI_MspInit+0x118>)
 80010da:	f001 fa71 	bl	80025c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEDStripes_Pin;
 80010de:	2380      	movs	r3, #128	; 0x80
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ee:	2305      	movs	r3, #5
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEDStripes_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	481d      	ldr	r0, [pc, #116]	; (8001170 <HAL_SPI_MspInit+0x11c>)
 80010fa:	f001 fa61 	bl	80025c0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <HAL_SPI_MspInit+0x120>)
 8001100:	4a1d      	ldr	r2, [pc, #116]	; (8001178 <HAL_SPI_MspInit+0x124>)
 8001102:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <HAL_SPI_MspInit+0x120>)
 8001106:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800110a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_SPI_MspInit+0x120>)
 800110e:	2240      	movs	r2, #64	; 0x40
 8001110:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_SPI_MspInit+0x120>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_SPI_MspInit+0x120>)
 800111a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800111e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_SPI_MspInit+0x120>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HAL_SPI_MspInit+0x120>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_SPI_MspInit+0x120>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_SPI_MspInit+0x120>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_SPI_MspInit+0x120>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800113e:	480d      	ldr	r0, [pc, #52]	; (8001174 <HAL_SPI_MspInit+0x120>)
 8001140:	f000 fec2 	bl	8001ec8 <HAL_DMA_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 800114a:	f7ff ff3f 	bl	8000fcc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_SPI_MspInit+0x120>)
 8001152:	655a      	str	r2, [r3, #84]	; 0x54
 8001154:	4a07      	ldr	r2, [pc, #28]	; (8001174 <HAL_SPI_MspInit+0x120>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	; 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40013000 	.word	0x40013000
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000
 8001170:	40020c00 	.word	0x40020c00
 8001174:	200001bc 	.word	0x200001bc
 8001178:	40026458 	.word	0x40026458

0800117c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af04      	add	r7, sp, #16
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	2301      	movs	r3, #1
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	2200      	movs	r2, #0
 80011a8:	2178      	movs	r1, #120	; 0x78
 80011aa:	4803      	ldr	r0, [pc, #12]	; (80011b8 <ssd1306_WriteCommand+0x2c>)
 80011ac:	f001 fc5e 	bl	8002a6c <HAL_I2C_Mem_Write>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000104 	.word	0x20000104

080011bc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af04      	add	r7, sp, #16
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	f04f 32ff 	mov.w	r2, #4294967295
 80011ce:	9202      	str	r2, [sp, #8]
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2301      	movs	r3, #1
 80011d8:	2240      	movs	r2, #64	; 0x40
 80011da:	2178      	movs	r1, #120	; 0x78
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <ssd1306_WriteData+0x30>)
 80011de:	f001 fc45 	bl	8002a6c <HAL_I2C_Mem_Write>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000104 	.word	0x20000104

080011f0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80011f4:	f7ff ffc2 	bl	800117c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80011f8:	2064      	movs	r0, #100	; 0x64
 80011fa:	f000 fc7f 	bl	8001afc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f9ce 	bl	80015a0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001204:	2020      	movs	r0, #32
 8001206:	f7ff ffc1 	bl	800118c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff ffbe 	bl	800118c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001210:	20b0      	movs	r0, #176	; 0xb0
 8001212:	f7ff ffbb 	bl	800118c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001216:	20c8      	movs	r0, #200	; 0xc8
 8001218:	f7ff ffb8 	bl	800118c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800121c:	2000      	movs	r0, #0
 800121e:	f7ff ffb5 	bl	800118c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001222:	2010      	movs	r0, #16
 8001224:	f7ff ffb2 	bl	800118c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001228:	2040      	movs	r0, #64	; 0x40
 800122a:	f7ff ffaf 	bl	800118c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800122e:	20ff      	movs	r0, #255	; 0xff
 8001230:	f000 f9a2 	bl	8001578 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001234:	20a1      	movs	r0, #161	; 0xa1
 8001236:	f7ff ffa9 	bl	800118c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800123a:	20a6      	movs	r0, #166	; 0xa6
 800123c:	f7ff ffa6 	bl	800118c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001240:	20a8      	movs	r0, #168	; 0xa8
 8001242:	f7ff ffa3 	bl	800118c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001246:	203f      	movs	r0, #63	; 0x3f
 8001248:	f7ff ffa0 	bl	800118c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800124c:	20a4      	movs	r0, #164	; 0xa4
 800124e:	f7ff ff9d 	bl	800118c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001252:	20d3      	movs	r0, #211	; 0xd3
 8001254:	f7ff ff9a 	bl	800118c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff ff97 	bl	800118c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800125e:	20d5      	movs	r0, #213	; 0xd5
 8001260:	f7ff ff94 	bl	800118c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001264:	20f0      	movs	r0, #240	; 0xf0
 8001266:	f7ff ff91 	bl	800118c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800126a:	20d9      	movs	r0, #217	; 0xd9
 800126c:	f7ff ff8e 	bl	800118c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001270:	2022      	movs	r0, #34	; 0x22
 8001272:	f7ff ff8b 	bl	800118c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001276:	20da      	movs	r0, #218	; 0xda
 8001278:	f7ff ff88 	bl	800118c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800127c:	2012      	movs	r0, #18
 800127e:	f7ff ff85 	bl	800118c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001282:	20db      	movs	r0, #219	; 0xdb
 8001284:	f7ff ff82 	bl	800118c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001288:	2020      	movs	r0, #32
 800128a:	f7ff ff7f 	bl	800118c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800128e:	208d      	movs	r0, #141	; 0x8d
 8001290:	f7ff ff7c 	bl	800118c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001294:	2014      	movs	r0, #20
 8001296:	f7ff ff79 	bl	800118c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800129a:	2001      	movs	r0, #1
 800129c:	f000 f980 	bl	80015a0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80012a0:	2000      	movs	r0, #0
 80012a2:	f000 f80f 	bl	80012c4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80012a6:	f000 f825 	bl	80012f4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <ssd1306_Init+0xd0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <ssd1306_Init+0xd0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80012b6:	4b02      	ldr	r3, [pc, #8]	; (80012c0 <ssd1306_Init+0xd0>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	711a      	strb	r2, [r3, #4]
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	2000061c 	.word	0x2000061c

080012c4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <ssd1306_Fill+0x14>
 80012d4:	2300      	movs	r3, #0
 80012d6:	e000      	b.n	80012da <ssd1306_Fill+0x16>
 80012d8:	23ff      	movs	r3, #255	; 0xff
 80012da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012de:	4619      	mov	r1, r3
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <ssd1306_Fill+0x2c>)
 80012e2:	f008 fae3 	bl	80098ac <memset>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000021c 	.word	0x2000021c

080012f4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80012fa:	2300      	movs	r3, #0
 80012fc:	71fb      	strb	r3, [r7, #7]
 80012fe:	e016      	b.n	800132e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	3b50      	subs	r3, #80	; 0x50
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff40 	bl	800118c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff ff3d 	bl	800118c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001312:	2010      	movs	r0, #16
 8001314:	f7ff ff3a 	bl	800118c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	01db      	lsls	r3, r3, #7
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <ssd1306_UpdateScreen+0x4c>)
 800131e:	4413      	add	r3, r2
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff4a 	bl	80011bc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	3301      	adds	r3, #1
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b07      	cmp	r3, #7
 8001332:	d9e5      	bls.n	8001300 <ssd1306_UpdateScreen+0xc>
    }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000021c 	.word	0x2000021c

08001344 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
 800134e:	460b      	mov	r3, r1
 8001350:	71bb      	strb	r3, [r7, #6]
 8001352:	4613      	mov	r3, r2
 8001354:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db3d      	blt.n	80013da <ssd1306_DrawPixel+0x96>
 800135e:	79bb      	ldrb	r3, [r7, #6]
 8001360:	2b3f      	cmp	r3, #63	; 0x3f
 8001362:	d83a      	bhi.n	80013da <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001364:	797b      	ldrb	r3, [r7, #5]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d11a      	bne.n	80013a0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800136a:	79fa      	ldrb	r2, [r7, #7]
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	08db      	lsrs	r3, r3, #3
 8001370:	b2d8      	uxtb	r0, r3
 8001372:	4603      	mov	r3, r0
 8001374:	01db      	lsls	r3, r3, #7
 8001376:	4413      	add	r3, r2
 8001378:	4a1b      	ldr	r2, [pc, #108]	; (80013e8 <ssd1306_DrawPixel+0xa4>)
 800137a:	5cd3      	ldrb	r3, [r2, r3]
 800137c:	b25a      	sxtb	r2, r3
 800137e:	79bb      	ldrb	r3, [r7, #6]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	2101      	movs	r1, #1
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	b25b      	sxtb	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b259      	sxtb	r1, r3
 8001390:	79fa      	ldrb	r2, [r7, #7]
 8001392:	4603      	mov	r3, r0
 8001394:	01db      	lsls	r3, r3, #7
 8001396:	4413      	add	r3, r2
 8001398:	b2c9      	uxtb	r1, r1
 800139a:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <ssd1306_DrawPixel+0xa4>)
 800139c:	54d1      	strb	r1, [r2, r3]
 800139e:	e01d      	b.n	80013dc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013a0:	79fa      	ldrb	r2, [r7, #7]
 80013a2:	79bb      	ldrb	r3, [r7, #6]
 80013a4:	08db      	lsrs	r3, r3, #3
 80013a6:	b2d8      	uxtb	r0, r3
 80013a8:	4603      	mov	r3, r0
 80013aa:	01db      	lsls	r3, r3, #7
 80013ac:	4413      	add	r3, r2
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <ssd1306_DrawPixel+0xa4>)
 80013b0:	5cd3      	ldrb	r3, [r2, r3]
 80013b2:	b25a      	sxtb	r2, r3
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	2101      	movs	r1, #1
 80013bc:	fa01 f303 	lsl.w	r3, r1, r3
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	4013      	ands	r3, r2
 80013c8:	b259      	sxtb	r1, r3
 80013ca:	79fa      	ldrb	r2, [r7, #7]
 80013cc:	4603      	mov	r3, r0
 80013ce:	01db      	lsls	r3, r3, #7
 80013d0:	4413      	add	r3, r2
 80013d2:	b2c9      	uxtb	r1, r1
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <ssd1306_DrawPixel+0xa4>)
 80013d6:	54d1      	strb	r1, [r2, r3]
 80013d8:	e000      	b.n	80013dc <ssd1306_DrawPixel+0x98>
        return;
 80013da:	bf00      	nop
    }
}
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	2000021c 	.word	0x2000021c

080013ec <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4604      	mov	r4, r0
 80013f4:	1d38      	adds	r0, r7, #4
 80013f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80013fa:	461a      	mov	r2, r3
 80013fc:	4623      	mov	r3, r4
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	4613      	mov	r3, r2
 8001402:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	2b1f      	cmp	r3, #31
 8001408:	d902      	bls.n	8001410 <ssd1306_WriteChar+0x24>
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	2b7e      	cmp	r3, #126	; 0x7e
 800140e:	d901      	bls.n	8001414 <ssd1306_WriteChar+0x28>
        return 0;
 8001410:	2300      	movs	r3, #0
 8001412:	e06d      	b.n	80014f0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001414:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <ssd1306_WriteChar+0x10c>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	793b      	ldrb	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	2b80      	cmp	r3, #128	; 0x80
 8001420:	dc06      	bgt.n	8001430 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001422:	4b35      	ldr	r3, [pc, #212]	; (80014f8 <ssd1306_WriteChar+0x10c>)
 8001424:	885b      	ldrh	r3, [r3, #2]
 8001426:	461a      	mov	r2, r3
 8001428:	797b      	ldrb	r3, [r7, #5]
 800142a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800142c:	2b40      	cmp	r3, #64	; 0x40
 800142e:	dd01      	ble.n	8001434 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001430:	2300      	movs	r3, #0
 8001432:	e05d      	b.n	80014f0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	e04c      	b.n	80014d4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	3b20      	subs	r3, #32
 8001440:	7979      	ldrb	r1, [r7, #5]
 8001442:	fb01 f303 	mul.w	r3, r1, r3
 8001446:	4619      	mov	r1, r3
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	440b      	add	r3, r1
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
 8001458:	e034      	b.n	80014c4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d012      	beq.n	8001490 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800146a:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <ssd1306_WriteChar+0x10c>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4413      	add	r3, r2
 8001476:	b2d8      	uxtb	r0, r3
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <ssd1306_WriteChar+0x10c>)
 800147a:	885b      	ldrh	r3, [r3, #2]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4413      	add	r3, r2
 8001484:	b2db      	uxtb	r3, r3
 8001486:	7bba      	ldrb	r2, [r7, #14]
 8001488:	4619      	mov	r1, r3
 800148a:	f7ff ff5b 	bl	8001344 <ssd1306_DrawPixel>
 800148e:	e016      	b.n	80014be <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <ssd1306_WriteChar+0x10c>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	4413      	add	r3, r2
 800149c:	b2d8      	uxtb	r0, r3
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <ssd1306_WriteChar+0x10c>)
 80014a0:	885b      	ldrh	r3, [r3, #2]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	4413      	add	r3, r2
 80014aa:	b2d9      	uxtb	r1, r3
 80014ac:	7bbb      	ldrb	r3, [r7, #14]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	bf0c      	ite	eq
 80014b2:	2301      	moveq	r3, #1
 80014b4:	2300      	movne	r3, #0
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	f7ff ff43 	bl	8001344 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
 80014c4:	793b      	ldrb	r3, [r7, #4]
 80014c6:	461a      	mov	r2, r3
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d3c5      	bcc.n	800145a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3301      	adds	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	797b      	ldrb	r3, [r7, #5]
 80014d6:	461a      	mov	r2, r3
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	4293      	cmp	r3, r2
 80014dc:	d3ad      	bcc.n	800143a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <ssd1306_WriteChar+0x10c>)
 80014e0:	881a      	ldrh	r2, [r3, #0]
 80014e2:	793b      	ldrb	r3, [r7, #4]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4413      	add	r3, r2
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <ssd1306_WriteChar+0x10c>)
 80014ec:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3724      	adds	r7, #36	; 0x24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd90      	pop	{r4, r7, pc}
 80014f8:	2000061c 	.word	0x2000061c

080014fc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	1d38      	adds	r0, r7, #4
 8001506:	e880 0006 	stmia.w	r0, {r1, r2}
 800150a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800150c:	e012      	b.n	8001534 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	7818      	ldrb	r0, [r3, #0]
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	1d3a      	adds	r2, r7, #4
 8001516:	ca06      	ldmia	r2, {r1, r2}
 8001518:	f7ff ff68 	bl	80013ec <ssd1306_WriteChar>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d002      	beq.n	800152e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	e008      	b.n	8001540 <ssd1306_WriteString+0x44>
        }
        str++;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	3301      	adds	r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1e8      	bne.n	800150e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	781b      	ldrb	r3, [r3, #0]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	460a      	mov	r2, r1
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	4613      	mov	r3, r2
 8001556:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	b29a      	uxth	r2, r3
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <ssd1306_SetCursor+0x2c>)
 800155e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001560:	79bb      	ldrb	r3, [r7, #6]
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <ssd1306_SetCursor+0x2c>)
 8001566:	805a      	strh	r2, [r3, #2]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	2000061c 	.word	0x2000061c

08001578 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001582:	2381      	movs	r3, #129	; 0x81
 8001584:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fdff 	bl	800118c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fdfb 	bl	800118c <ssd1306_WriteCommand>
}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80015b0:	23af      	movs	r3, #175	; 0xaf
 80015b2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <ssd1306_SetDisplayOn+0x38>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	715a      	strb	r2, [r3, #5]
 80015ba:	e004      	b.n	80015c6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80015bc:	23ae      	movs	r3, #174	; 0xae
 80015be:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <ssd1306_SetDisplayOn+0x38>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fddf 	bl	800118c <ssd1306_WriteCommand>
}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000061c 	.word	0x2000061c

080015dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a10      	ldr	r2, [pc, #64]	; (8001628 <HAL_MspInit+0x4c>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <HAL_MspInit+0x4c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_MspInit+0x4c>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <HAL_MspInit+0x4c>)
 8001600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001604:	6453      	str	r3, [r2, #68]	; 0x44
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	210f      	movs	r1, #15
 8001616:	f06f 0001 	mvn.w	r0, #1
 800161a:	f000 fb4b 	bl	8001cb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08e      	sub	sp, #56	; 0x38
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800163c:	4b33      	ldr	r3, [pc, #204]	; (800170c <HAL_InitTick+0xe0>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	4a32      	ldr	r2, [pc, #200]	; (800170c <HAL_InitTick+0xe0>)
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	6413      	str	r3, [r2, #64]	; 0x40
 8001648:	4b30      	ldr	r3, [pc, #192]	; (800170c <HAL_InitTick+0xe0>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001654:	f107 0210 	add.w	r2, r7, #16
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f002 fada 	bl	8003c18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166a:	2b00      	cmp	r3, #0
 800166c:	d103      	bne.n	8001676 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800166e:	f002 faab 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8001672:	6378      	str	r0, [r7, #52]	; 0x34
 8001674:	e004      	b.n	8001680 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001676:	f002 faa7 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 800167a:	4603      	mov	r3, r0
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001682:	4a23      	ldr	r2, [pc, #140]	; (8001710 <HAL_InitTick+0xe4>)
 8001684:	fba2 2303 	umull	r2, r3, r2, r3
 8001688:	0c9b      	lsrs	r3, r3, #18
 800168a:	3b01      	subs	r3, #1
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800168e:	4b21      	ldr	r3, [pc, #132]	; (8001714 <HAL_InitTick+0xe8>)
 8001690:	4a21      	ldr	r2, [pc, #132]	; (8001718 <HAL_InitTick+0xec>)
 8001692:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001694:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <HAL_InitTick+0xe8>)
 8001696:	f240 32e7 	movw	r2, #999	; 0x3e7
 800169a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800169c:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <HAL_InitTick+0xe8>)
 800169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <HAL_InitTick+0xe8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <HAL_InitTick+0xe8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_InitTick+0xe8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016b4:	4817      	ldr	r0, [pc, #92]	; (8001714 <HAL_InitTick+0xe8>)
 80016b6:	f002 ffb4 	bl	8004622 <HAL_TIM_Base_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d11b      	bne.n	8001700 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016c8:	4812      	ldr	r0, [pc, #72]	; (8001714 <HAL_InitTick+0xe8>)
 80016ca:	f003 f80b 	bl	80046e4 <HAL_TIM_Base_Start_IT>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d111      	bne.n	8001700 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016dc:	2036      	movs	r0, #54	; 0x36
 80016de:	f000 fb05 	bl	8001cec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d808      	bhi.n	80016fa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016e8:	2200      	movs	r2, #0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	2036      	movs	r0, #54	; 0x36
 80016ee:	f000 fae1 	bl	8001cb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_InitTick+0xf0>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e002      	b.n	8001700 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001700:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001704:	4618      	mov	r0, r3
 8001706:	3738      	adds	r7, #56	; 0x38
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40023800 	.word	0x40023800
 8001710:	431bde83 	.word	0x431bde83
 8001714:	20000624 	.word	0x20000624
 8001718:	40001000 	.word	0x40001000
 800171c:	20000030 	.word	0x20000030

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <NMI_Handler+0x4>

08001726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <MemManage_Handler+0x4>

08001732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler+0x4>

0800173e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <UART4_IRQHandler+0x10>)
 8001752:	f003 ff2d 	bl	80055b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200006bc 	.word	0x200006bc

08001760 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <TIM6_DAC_IRQHandler+0x20>)
 8001766:	791b      	ldrb	r3, [r3, #4]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800176e:	4804      	ldr	r0, [pc, #16]	; (8001780 <TIM6_DAC_IRQHandler+0x20>)
 8001770:	f000 faec 	bl	8001d4c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001774:	4803      	ldr	r0, [pc, #12]	; (8001784 <TIM6_DAC_IRQHandler+0x24>)
 8001776:	f003 f884 	bl	8004882 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200000a8 	.word	0x200000a8
 8001784:	20000624 	.word	0x20000624

08001788 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <DMA2_Stream3_IRQHandler+0x10>)
 800178e:	f000 fcdb 	bl	8002148 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200001bc 	.word	0x200001bc

0800179c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <SystemInit+0x20>)
 80017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <SystemInit+0x20>)
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d2:	463b      	mov	r3, r7
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
 80017e0:	615a      	str	r2, [r3, #20]
 80017e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017e4:	4b21      	ldr	r3, [pc, #132]	; (800186c <MX_TIM4_Init+0xac>)
 80017e6:	4a22      	ldr	r2, [pc, #136]	; (8001870 <MX_TIM4_Init+0xb0>)
 80017e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <MX_TIM4_Init+0xac>)
 80017ec:	223f      	movs	r2, #63	; 0x3f
 80017ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <MX_TIM4_Init+0xac>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80017f6:	4b1d      	ldr	r3, [pc, #116]	; (800186c <MX_TIM4_Init+0xac>)
 80017f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <MX_TIM4_Init+0xac>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <MX_TIM4_Init+0xac>)
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800180a:	4818      	ldr	r0, [pc, #96]	; (800186c <MX_TIM4_Init+0xac>)
 800180c:	f002 ffe2 	bl	80047d4 <HAL_TIM_PWM_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001816:	f7ff fbd9 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	4619      	mov	r1, r3
 8001828:	4810      	ldr	r0, [pc, #64]	; (800186c <MX_TIM4_Init+0xac>)
 800182a:	f003 fd83 	bl	8005334 <HAL_TIMEx_MasterConfigSynchronization>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001834:	f7ff fbca 	bl	8000fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001838:	2360      	movs	r3, #96	; 0x60
 800183a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001848:	463b      	mov	r3, r7
 800184a:	2208      	movs	r2, #8
 800184c:	4619      	mov	r1, r3
 800184e:	4807      	ldr	r0, [pc, #28]	; (800186c <MX_TIM4_Init+0xac>)
 8001850:	f003 f936 	bl	8004ac0 <HAL_TIM_PWM_ConfigChannel>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800185a:	f7ff fbb7 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800185e:	4803      	ldr	r0, [pc, #12]	; (800186c <MX_TIM4_Init+0xac>)
 8001860:	f000 f828 	bl	80018b4 <HAL_TIM_MspPostInit>

}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	; 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000670 	.word	0x20000670
 8001870:	40000800 	.word	0x40000800

08001874 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_TIM_PWM_MspInit+0x38>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d10b      	bne.n	800189e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <HAL_TIM_PWM_MspInit+0x3c>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40000800 	.word	0x40000800
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a11      	ldr	r2, [pc, #68]	; (8001918 <HAL_TIM_MspPostInit+0x64>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d11c      	bne.n	8001910 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_TIM_MspPostInit+0x68>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a10      	ldr	r2, [pc, #64]	; (800191c <HAL_TIM_MspPostInit+0x68>)
 80018dc:	f043 0308 	orr.w	r3, r3, #8
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_TIM_MspPostInit+0x68>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = StepperMotorStep_Pin;
 80018ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001900:	2302      	movs	r3, #2
 8001902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(StepperMotorStep_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	4619      	mov	r1, r3
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <HAL_TIM_MspPostInit+0x6c>)
 800190c:	f000 fe58 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001910:	bf00      	nop
 8001912:	3720      	adds	r7, #32
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40000800 	.word	0x40000800
 800191c:	40023800 	.word	0x40023800
 8001920:	40020c00 	.word	0x40020c00

08001924 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <MX_UART4_Init+0x58>)
 800192a:	4a15      	ldr	r2, [pc, #84]	; (8001980 <MX_UART4_Init+0x5c>)
 800192c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <MX_UART4_Init+0x58>)
 8001930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001934:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_UART4_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <MX_UART4_Init+0x58>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <MX_UART4_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <MX_UART4_Init+0x58>)
 800194a:	220c      	movs	r2, #12
 800194c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <MX_UART4_Init+0x58>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <MX_UART4_Init+0x58>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <MX_UART4_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <MX_UART4_Init+0x58>)
 8001962:	2200      	movs	r2, #0
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001966:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_UART4_Init+0x58>)
 8001968:	f003 fd90 	bl	800548c <HAL_UART_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001972:	f7ff fb2b 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200006bc 	.word	0x200006bc
 8001980:	40004c00 	.word	0x40004c00

08001984 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b0ae      	sub	sp, #184	; 0xb8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2290      	movs	r2, #144	; 0x90
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f007 ff81 	bl	80098ac <memset>
  if(uartHandle->Instance==UART4)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a25      	ldr	r2, [pc, #148]	; (8001a44 <HAL_UART_MspInit+0xc0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d143      	bne.n	8001a3c <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80019b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019b8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 f95a 	bl	8003c7c <HAL_RCCEx_PeriphCLKConfig>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80019ce:	f7ff fafd 	bl	8000fcc <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_UART_MspInit+0xc4>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <HAL_UART_MspInit+0xc4>)
 80019d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_UART_MspInit+0xc4>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_UART_MspInit+0xc4>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a16      	ldr	r2, [pc, #88]	; (8001a48 <HAL_UART_MspInit+0xc4>)
 80019f0:	f043 0308 	orr.w	r3, r3, #8
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_UART_MspInit+0xc4>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = RPiPicoW_TX_Pin|RPiPicoW_RX_Pin;
 8001a02:	2303      	movs	r3, #3
 8001a04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a1a:	2308      	movs	r3, #8
 8001a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a24:	4619      	mov	r1, r3
 8001a26:	4809      	ldr	r0, [pc, #36]	; (8001a4c <HAL_UART_MspInit+0xc8>)
 8001a28:	f000 fdca 	bl	80025c0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2105      	movs	r1, #5
 8001a30:	2034      	movs	r0, #52	; 0x34
 8001a32:	f000 f93f 	bl	8001cb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001a36:	2034      	movs	r0, #52	; 0x34
 8001a38:	f000 f958 	bl	8001cec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	37b8      	adds	r7, #184	; 0xb8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40004c00 	.word	0x40004c00
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020c00 	.word	0x40020c00

08001a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a54:	480d      	ldr	r0, [pc, #52]	; (8001a8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a56:	490e      	ldr	r1, [pc, #56]	; (8001a90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a58:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a5c:	e002      	b.n	8001a64 <LoopCopyDataInit>

08001a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a62:	3304      	adds	r3, #4

08001a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a68:	d3f9      	bcc.n	8001a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6a:	4a0b      	ldr	r2, [pc, #44]	; (8001a98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a6c:	4c0b      	ldr	r4, [pc, #44]	; (8001a9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a70:	e001      	b.n	8001a76 <LoopFillZerobss>

08001a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a74:	3204      	adds	r2, #4

08001a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a78:	d3fb      	bcc.n	8001a72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a7a:	f7ff fe8f 	bl	800179c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a7e:	f007 ff73 	bl	8009968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a82:	f7ff f9d9 	bl	8000e38 <main>
  bx  lr    
 8001a86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a88:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a90:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001a94:	0800b27c 	.word	0x0800b27c
  ldr r2, =_sbss
 8001a98:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001a9c:	20005268 	.word	0x20005268

08001aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa0:	e7fe      	b.n	8001aa0 <ADC_IRQHandler>

08001aa2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa6:	2003      	movs	r0, #3
 8001aa8:	f000 f8f9 	bl	8001c9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aac:	2005      	movs	r0, #5
 8001aae:	f7ff fdbd 	bl	800162c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab2:	f7ff fd93 	bl	80015dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_IncTick+0x20>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_IncTick+0x24>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_IncTick+0x24>)
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000034 	.word	0x20000034
 8001ae0:	20000744 	.word	0x20000744

08001ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_GetTick+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000744 	.word	0x20000744

08001afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b04:	f7ff ffee 	bl	8001ae4 <HAL_GetTick>
 8001b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d005      	beq.n	8001b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_Delay+0x44>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b22:	bf00      	nop
 8001b24:	f7ff ffde 	bl	8001ae4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d8f7      	bhi.n	8001b24 <HAL_Delay+0x28>
  {
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000034 	.word	0x20000034

08001b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <__NVIC_SetPriorityGrouping+0x40>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b60:	4013      	ands	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b72:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <__NVIC_SetPriorityGrouping+0x40>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	60d3      	str	r3, [r2, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00
 8001b88:	05fa0000 	.word	0x05fa0000

08001b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	f003 0307 	and.w	r3, r3, #7
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	db0b      	blt.n	8001bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	f003 021f 	and.w	r2, r3, #31
 8001bc0:	4907      	ldr	r1, [pc, #28]	; (8001be0 <__NVIC_EnableIRQ+0x38>)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	2001      	movs	r0, #1
 8001bca:	fa00 f202 	lsl.w	r2, r0, r2
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000e100 	.word	0xe000e100

08001be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	6039      	str	r1, [r7, #0]
 8001bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	db0a      	blt.n	8001c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	490c      	ldr	r1, [pc, #48]	; (8001c30 <__NVIC_SetPriority+0x4c>)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	0112      	lsls	r2, r2, #4
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	440b      	add	r3, r1
 8001c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c0c:	e00a      	b.n	8001c24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4908      	ldr	r1, [pc, #32]	; (8001c34 <__NVIC_SetPriority+0x50>)
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	3b04      	subs	r3, #4
 8001c1c:	0112      	lsls	r2, r2, #4
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	440b      	add	r3, r1
 8001c22:	761a      	strb	r2, [r3, #24]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000e100 	.word	0xe000e100
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	; 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f1c3 0307 	rsb	r3, r3, #7
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	bf28      	it	cs
 8001c56:	2304      	movcs	r3, #4
 8001c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	2b06      	cmp	r3, #6
 8001c60:	d902      	bls.n	8001c68 <NVIC_EncodePriority+0x30>
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3b03      	subs	r3, #3
 8001c66:	e000      	b.n	8001c6a <NVIC_EncodePriority+0x32>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43da      	mvns	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	43d9      	mvns	r1, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c90:	4313      	orrs	r3, r2
         );
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3724      	adds	r7, #36	; 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ff4c 	bl	8001b44 <__NVIC_SetPriorityGrouping>
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc6:	f7ff ff61 	bl	8001b8c <__NVIC_GetPriorityGrouping>
 8001cca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	68b9      	ldr	r1, [r7, #8]
 8001cd0:	6978      	ldr	r0, [r7, #20]
 8001cd2:	f7ff ffb1 	bl	8001c38 <NVIC_EncodePriority>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ff80 	bl	8001be4 <__NVIC_SetPriority>
}
 8001ce4:	bf00      	nop
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff54 	bl	8001ba8 <__NVIC_EnableIRQ>
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e014      	b.n	8001d44 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	791b      	ldrb	r3, [r3, #4]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d105      	bne.n	8001d30 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7fe fc38 	bl	80005a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d62:	d120      	bne.n	8001da6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d72:	d118      	bne.n	8001da6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2204      	movs	r2, #4
 8001d78:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d9e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f82d 	bl	8001e00 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001db4:	d120      	bne.n	8001df8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dc4:	d118      	bne.n	8001df8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2204      	movs	r2, #4
 8001dca:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	f043 0202 	orr.w	r2, r3, #2
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001de0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001df0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f85d 	bl	8001eb2 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	795b      	ldrb	r3, [r3, #5]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_DAC_ConfigChannel+0x18>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e03c      	b.n	8001ea6 <HAL_DAC_ConfigChannel+0x92>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2202      	movs	r2, #2
 8001e36:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	4013      	ands	r3, r2
 8001e54:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6819      	ldr	r1, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	22c0      	movs	r2, #192	; 0xc0
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	400a      	ands	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff fe06 	bl	8001ae4 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e099      	b.n	8002018 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f04:	e00f      	b.n	8001f26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f06:	f7ff fded 	bl	8001ae4 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b05      	cmp	r3, #5
 8001f12:	d908      	bls.n	8001f26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2220      	movs	r2, #32
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e078      	b.n	8002018 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1e8      	bne.n	8001f06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	4b38      	ldr	r3, [pc, #224]	; (8002020 <HAL_DMA_Init+0x158>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d107      	bne.n	8001f90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f023 0307 	bic.w	r3, r3, #7
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d117      	bne.n	8001fea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00e      	beq.n	8001fea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 fa7b 	bl	80024c8 <DMA_CheckFifoParam>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e016      	b.n	8002018 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fa32 	bl	800245c <DMA_CalcBaseAndBitshift>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002000:	223f      	movs	r2, #63	; 0x3f
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	e010803f 	.word	0xe010803f

08002024 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002032:	f7ff fd57 	bl	8001ae4 <HAL_GetTick>
 8002036:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d008      	beq.n	8002056 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2280      	movs	r2, #128	; 0x80
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e052      	b.n	80020fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0216 	bic.w	r2, r2, #22
 8002064:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002074:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d103      	bne.n	8002086 <HAL_DMA_Abort+0x62>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0208 	bic.w	r2, r2, #8
 8002094:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0201 	bic.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a6:	e013      	b.n	80020d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020a8:	f7ff fd1c 	bl	8001ae4 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d90c      	bls.n	80020d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2220      	movs	r2, #32
 80020ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2203      	movs	r2, #3
 80020c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e015      	b.n	80020fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1e4      	bne.n	80020a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e2:	223f      	movs	r2, #63	; 0x3f
 80020e4:	409a      	lsls	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d004      	beq.n	8002122 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e00c      	b.n	800213c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2205      	movs	r2, #5
 8002126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0201 	bic.w	r2, r2, #1
 8002138:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002154:	4b8e      	ldr	r3, [pc, #568]	; (8002390 <HAL_DMA_IRQHandler+0x248>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a8e      	ldr	r2, [pc, #568]	; (8002394 <HAL_DMA_IRQHandler+0x24c>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	0a9b      	lsrs	r3, r3, #10
 8002160:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002166:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002172:	2208      	movs	r2, #8
 8002174:	409a      	lsls	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d01a      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0204 	bic.w	r2, r2, #4
 800219a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	2208      	movs	r2, #8
 80021a2:	409a      	lsls	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	f043 0201 	orr.w	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b8:	2201      	movs	r2, #1
 80021ba:	409a      	lsls	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d012      	beq.n	80021ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d6:	2201      	movs	r2, #1
 80021d8:	409a      	lsls	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e2:	f043 0202 	orr.w	r2, r3, #2
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ee:	2204      	movs	r2, #4
 80021f0:	409a      	lsls	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d012      	beq.n	8002220 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00b      	beq.n	8002220 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	2204      	movs	r2, #4
 800220e:	409a      	lsls	r2, r3
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	f043 0204 	orr.w	r2, r3, #4
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002224:	2210      	movs	r2, #16
 8002226:	409a      	lsls	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d043      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d03c      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002242:	2210      	movs	r2, #16
 8002244:	409a      	lsls	r2, r3
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d018      	beq.n	800228a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d108      	bne.n	8002278 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	2b00      	cmp	r3, #0
 800226c:	d024      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	4798      	blx	r3
 8002276:	e01f      	b.n	80022b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01b      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	4798      	blx	r3
 8002288:	e016      	b.n	80022b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d107      	bne.n	80022a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0208 	bic.w	r2, r2, #8
 80022a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	2220      	movs	r2, #32
 80022be:	409a      	lsls	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 808f 	beq.w	80023e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 8087 	beq.w	80023e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022de:	2220      	movs	r2, #32
 80022e0:	409a      	lsls	r2, r3
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b05      	cmp	r3, #5
 80022f0:	d136      	bne.n	8002360 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0216 	bic.w	r2, r2, #22
 8002300:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002310:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d103      	bne.n	8002322 <HAL_DMA_IRQHandler+0x1da>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0208 	bic.w	r2, r2, #8
 8002330:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	223f      	movs	r2, #63	; 0x3f
 8002338:	409a      	lsls	r2, r3
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002352:	2b00      	cmp	r3, #0
 8002354:	d07e      	beq.n	8002454 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	4798      	blx	r3
        }
        return;
 800235e:	e079      	b.n	8002454 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d01d      	beq.n	80023aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10d      	bne.n	8002398 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	2b00      	cmp	r3, #0
 8002382:	d031      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
 800238c:	e02c      	b.n	80023e8 <HAL_DMA_IRQHandler+0x2a0>
 800238e:	bf00      	nop
 8002390:	2000002c 	.word	0x2000002c
 8002394:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d023      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
 80023a8:	e01e      	b.n	80023e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10f      	bne.n	80023d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0210 	bic.w	r2, r2, #16
 80023c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d032      	beq.n	8002456 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d022      	beq.n	8002442 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2205      	movs	r2, #5
 8002400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	3301      	adds	r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	429a      	cmp	r2, r3
 800241e:	d307      	bcc.n	8002430 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f2      	bne.n	8002414 <HAL_DMA_IRQHandler+0x2cc>
 800242e:	e000      	b.n	8002432 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002430:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d005      	beq.n	8002456 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	4798      	blx	r3
 8002452:	e000      	b.n	8002456 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002454:	bf00      	nop
    }
  }
}
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3b10      	subs	r3, #16
 800246c:	4a13      	ldr	r2, [pc, #76]	; (80024bc <DMA_CalcBaseAndBitshift+0x60>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <DMA_CalcBaseAndBitshift+0x64>)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4413      	add	r3, r2
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d908      	bls.n	800249c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002492:	4013      	ands	r3, r2
 8002494:	1d1a      	adds	r2, r3, #4
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	659a      	str	r2, [r3, #88]	; 0x58
 800249a:	e006      	b.n	80024aa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <DMA_CalcBaseAndBitshift+0x68>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	aaaaaaab 	.word	0xaaaaaaab
 80024c0:	0800b264 	.word	0x0800b264
 80024c4:	fffffc00 	.word	0xfffffc00

080024c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d11f      	bne.n	8002522 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d856      	bhi.n	8002596 <DMA_CheckFifoParam+0xce>
 80024e8:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <DMA_CheckFifoParam+0x28>)
 80024ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ee:	bf00      	nop
 80024f0:	08002501 	.word	0x08002501
 80024f4:	08002513 	.word	0x08002513
 80024f8:	08002501 	.word	0x08002501
 80024fc:	08002597 	.word	0x08002597
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d046      	beq.n	800259a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002510:	e043      	b.n	800259a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800251a:	d140      	bne.n	800259e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002520:	e03d      	b.n	800259e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800252a:	d121      	bne.n	8002570 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b03      	cmp	r3, #3
 8002530:	d837      	bhi.n	80025a2 <DMA_CheckFifoParam+0xda>
 8002532:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <DMA_CheckFifoParam+0x70>)
 8002534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002538:	08002549 	.word	0x08002549
 800253c:	0800254f 	.word	0x0800254f
 8002540:	08002549 	.word	0x08002549
 8002544:	08002561 	.word	0x08002561
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
      break;
 800254c:	e030      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d025      	beq.n	80025a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800255e:	e022      	b.n	80025a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002568:	d11f      	bne.n	80025aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800256e:	e01c      	b.n	80025aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d903      	bls.n	800257e <DMA_CheckFifoParam+0xb6>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d003      	beq.n	8002584 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800257c:	e018      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
      break;
 8002582:	e015      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00e      	beq.n	80025ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      break;
 8002594:	e00b      	b.n	80025ae <DMA_CheckFifoParam+0xe6>
      break;
 8002596:	bf00      	nop
 8002598:	e00a      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;
 800259a:	bf00      	nop
 800259c:	e008      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;
 800259e:	bf00      	nop
 80025a0:	e006      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;
 80025a2:	bf00      	nop
 80025a4:	e004      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;
 80025a6:	bf00      	nop
 80025a8:	e002      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80025aa:	bf00      	nop
 80025ac:	e000      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ae:	bf00      	nop
    }
  } 
  
  return status; 
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop

080025c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	e175      	b.n	80028cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025e0:	2201      	movs	r2, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	f040 8164 	bne.w	80028c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b01      	cmp	r3, #1
 8002608:	d005      	beq.n	8002616 <HAL_GPIO_Init+0x56>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d130      	bne.n	8002678 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800264c:	2201      	movs	r2, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 0201 	and.w	r2, r3, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b03      	cmp	r3, #3
 8002682:	d017      	beq.n	80026b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d123      	bne.n	8002708 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	08da      	lsrs	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3208      	adds	r2, #8
 80026c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	220f      	movs	r2, #15
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	08da      	lsrs	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3208      	adds	r2, #8
 8002702:	69b9      	ldr	r1, [r7, #24]
 8002704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0203 	and.w	r2, r3, #3
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80be 	beq.w	80028c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274a:	4b66      	ldr	r3, [pc, #408]	; (80028e4 <HAL_GPIO_Init+0x324>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	4a65      	ldr	r2, [pc, #404]	; (80028e4 <HAL_GPIO_Init+0x324>)
 8002750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002754:	6453      	str	r3, [r2, #68]	; 0x44
 8002756:	4b63      	ldr	r3, [pc, #396]	; (80028e4 <HAL_GPIO_Init+0x324>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002762:	4a61      	ldr	r2, [pc, #388]	; (80028e8 <HAL_GPIO_Init+0x328>)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	089b      	lsrs	r3, r3, #2
 8002768:	3302      	adds	r3, #2
 800276a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	220f      	movs	r2, #15
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a58      	ldr	r2, [pc, #352]	; (80028ec <HAL_GPIO_Init+0x32c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d037      	beq.n	80027fe <HAL_GPIO_Init+0x23e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a57      	ldr	r2, [pc, #348]	; (80028f0 <HAL_GPIO_Init+0x330>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d031      	beq.n	80027fa <HAL_GPIO_Init+0x23a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a56      	ldr	r2, [pc, #344]	; (80028f4 <HAL_GPIO_Init+0x334>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d02b      	beq.n	80027f6 <HAL_GPIO_Init+0x236>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a55      	ldr	r2, [pc, #340]	; (80028f8 <HAL_GPIO_Init+0x338>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d025      	beq.n	80027f2 <HAL_GPIO_Init+0x232>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a54      	ldr	r2, [pc, #336]	; (80028fc <HAL_GPIO_Init+0x33c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d01f      	beq.n	80027ee <HAL_GPIO_Init+0x22e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a53      	ldr	r2, [pc, #332]	; (8002900 <HAL_GPIO_Init+0x340>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d019      	beq.n	80027ea <HAL_GPIO_Init+0x22a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a52      	ldr	r2, [pc, #328]	; (8002904 <HAL_GPIO_Init+0x344>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_GPIO_Init+0x226>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a51      	ldr	r2, [pc, #324]	; (8002908 <HAL_GPIO_Init+0x348>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00d      	beq.n	80027e2 <HAL_GPIO_Init+0x222>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a50      	ldr	r2, [pc, #320]	; (800290c <HAL_GPIO_Init+0x34c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d007      	beq.n	80027de <HAL_GPIO_Init+0x21e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4f      	ldr	r2, [pc, #316]	; (8002910 <HAL_GPIO_Init+0x350>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d101      	bne.n	80027da <HAL_GPIO_Init+0x21a>
 80027d6:	2309      	movs	r3, #9
 80027d8:	e012      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027da:	230a      	movs	r3, #10
 80027dc:	e010      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027de:	2308      	movs	r3, #8
 80027e0:	e00e      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027e2:	2307      	movs	r3, #7
 80027e4:	e00c      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027e6:	2306      	movs	r3, #6
 80027e8:	e00a      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027ea:	2305      	movs	r3, #5
 80027ec:	e008      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027ee:	2304      	movs	r3, #4
 80027f0:	e006      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027f2:	2303      	movs	r3, #3
 80027f4:	e004      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e002      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_GPIO_Init+0x240>
 80027fe:	2300      	movs	r3, #0
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	f002 0203 	and.w	r2, r2, #3
 8002806:	0092      	lsls	r2, r2, #2
 8002808:	4093      	lsls	r3, r2
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002810:	4935      	ldr	r1, [pc, #212]	; (80028e8 <HAL_GPIO_Init+0x328>)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281e:	4b3d      	ldr	r3, [pc, #244]	; (8002914 <HAL_GPIO_Init+0x354>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002842:	4a34      	ldr	r2, [pc, #208]	; (8002914 <HAL_GPIO_Init+0x354>)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002848:	4b32      	ldr	r3, [pc, #200]	; (8002914 <HAL_GPIO_Init+0x354>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800286c:	4a29      	ldr	r2, [pc, #164]	; (8002914 <HAL_GPIO_Init+0x354>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002872:	4b28      	ldr	r3, [pc, #160]	; (8002914 <HAL_GPIO_Init+0x354>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002896:	4a1f      	ldr	r2, [pc, #124]	; (8002914 <HAL_GPIO_Init+0x354>)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800289c:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <HAL_GPIO_Init+0x354>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028c0:	4a14      	ldr	r2, [pc, #80]	; (8002914 <HAL_GPIO_Init+0x354>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3301      	adds	r3, #1
 80028ca:	61fb      	str	r3, [r7, #28]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	2b0f      	cmp	r3, #15
 80028d0:	f67f ae86 	bls.w	80025e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3724      	adds	r7, #36	; 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40013800 	.word	0x40013800
 80028ec:	40020000 	.word	0x40020000
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40020800 	.word	0x40020800
 80028f8:	40020c00 	.word	0x40020c00
 80028fc:	40021000 	.word	0x40021000
 8002900:	40021400 	.word	0x40021400
 8002904:	40021800 	.word	0x40021800
 8002908:	40021c00 	.word	0x40021c00
 800290c:	40022000 	.word	0x40022000
 8002910:	40022400 	.word	0x40022400
 8002914:	40013c00 	.word	0x40013c00

08002918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
 8002924:	4613      	mov	r3, r2
 8002926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002928:	787b      	ldrb	r3, [r7, #1]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800292e:	887a      	ldrh	r2, [r7, #2]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002934:	e003      	b.n	800293e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002936:	887b      	ldrh	r3, [r7, #2]
 8002938:	041a      	lsls	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	619a      	str	r2, [r3, #24]
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e07f      	b.n	8002a5e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fe fa00 	bl	8000d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2224      	movs	r2, #36	; 0x24
 800297c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0201 	bic.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800299c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d107      	bne.n	80029c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	e006      	b.n	80029d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d104      	bne.n	80029e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <HAL_I2C_Init+0x11c>)
 80029f2:	430b      	orrs	r3, r1
 80029f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69d9      	ldr	r1, [r3, #28]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1a      	ldr	r2, [r3, #32]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	02008000 	.word	0x02008000

08002a6c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	4608      	mov	r0, r1
 8002a76:	4611      	mov	r1, r2
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	817b      	strh	r3, [r7, #10]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	813b      	strh	r3, [r7, #8]
 8002a82:	4613      	mov	r3, r2
 8002a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b20      	cmp	r3, #32
 8002a90:	f040 80f9 	bne.w	8002c86 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_I2C_Mem_Write+0x34>
 8002a9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0ed      	b.n	8002c88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_I2C_Mem_Write+0x4e>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e0e6      	b.n	8002c88 <HAL_I2C_Mem_Write+0x21c>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ac2:	f7ff f80f 	bl	8001ae4 <HAL_GetTick>
 8002ac6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	2319      	movs	r3, #25
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f955 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0d1      	b.n	8002c88 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2221      	movs	r2, #33	; 0x21
 8002ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2240      	movs	r2, #64	; 0x40
 8002af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a3a      	ldr	r2, [r7, #32]
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b0c:	88f8      	ldrh	r0, [r7, #6]
 8002b0e:	893a      	ldrh	r2, [r7, #8]
 8002b10:	8979      	ldrh	r1, [r7, #10]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f8b9 	bl	8002c94 <I2C_RequestMemoryWrite>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0a9      	b.n	8002c88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2bff      	cmp	r3, #255	; 0xff
 8002b3c:	d90e      	bls.n	8002b5c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	22ff      	movs	r2, #255	; 0xff
 8002b42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	8979      	ldrh	r1, [r7, #10]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 fab1 	bl	80030bc <I2C_TransferConfig>
 8002b5a:	e00f      	b.n	8002b7c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	8979      	ldrh	r1, [r7, #10]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 faa0 	bl	80030bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f93f 	bl	8002e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e07b      	b.n	8002c88 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	781a      	ldrb	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d034      	beq.n	8002c34 <HAL_I2C_Mem_Write+0x1c8>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d130      	bne.n	8002c34 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2180      	movs	r1, #128	; 0x80
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f8d1 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e04d      	b.n	8002c88 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2bff      	cmp	r3, #255	; 0xff
 8002bf4:	d90e      	bls.n	8002c14 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	22ff      	movs	r2, #255	; 0xff
 8002bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	8979      	ldrh	r1, [r7, #10]
 8002c04:	2300      	movs	r3, #0
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 fa55 	bl	80030bc <I2C_TransferConfig>
 8002c12:	e00f      	b.n	8002c34 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	8979      	ldrh	r1, [r7, #10]
 8002c26:	2300      	movs	r3, #0
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fa44 	bl	80030bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d19e      	bne.n	8002b7c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f91e 	bl	8002e84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e01a      	b.n	8002c88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2220      	movs	r2, #32
 8002c58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6859      	ldr	r1, [r3, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_I2C_Mem_Write+0x224>)
 8002c66:	400b      	ands	r3, r1
 8002c68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e000      	b.n	8002c88 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c86:	2302      	movs	r3, #2
  }
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	fe00e800 	.word	0xfe00e800

08002c94 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	4608      	mov	r0, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	817b      	strh	r3, [r7, #10]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	813b      	strh	r3, [r7, #8]
 8002caa:	4613      	mov	r3, r2
 8002cac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	8979      	ldrh	r1, [r7, #10]
 8002cb4:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <I2C_RequestMemoryWrite+0xa4>)
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f9fd 	bl	80030bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	69b9      	ldr	r1, [r7, #24]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f89c 	bl	8002e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e02c      	b.n	8002d30 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d105      	bne.n	8002ce8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cdc:	893b      	ldrh	r3, [r7, #8]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	629a      	str	r2, [r3, #40]	; 0x28
 8002ce6:	e015      	b.n	8002d14 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ce8:	893b      	ldrh	r3, [r7, #8]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	69b9      	ldr	r1, [r7, #24]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f882 	bl	8002e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e012      	b.n	8002d30 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d0a:	893b      	ldrh	r3, [r7, #8]
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2180      	movs	r1, #128	; 0x80
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f830 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	80002000 	.word	0x80002000

08002d3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d103      	bne.n	8002d5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2200      	movs	r2, #0
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d007      	beq.n	8002d78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	619a      	str	r2, [r3, #24]
  }
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d94:	e022      	b.n	8002ddc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d01e      	beq.n	8002ddc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9e:	f7fe fea1 	bl	8001ae4 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d302      	bcc.n	8002db4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d113      	bne.n	8002ddc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db8:	f043 0220 	orr.w	r2, r3, #32
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e00f      	b.n	8002dfc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4013      	ands	r3, r2
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d0cd      	beq.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e10:	e02c      	b.n	8002e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f870 	bl	8002efc <I2C_IsErrorOccurred>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e02a      	b.n	8002e7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2c:	d01e      	beq.n	8002e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2e:	f7fe fe59 	bl	8001ae4 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d302      	bcc.n	8002e44 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d113      	bne.n	8002e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e48:	f043 0220 	orr.w	r2, r3, #32
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e007      	b.n	8002e7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d1cb      	bne.n	8002e12 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e90:	e028      	b.n	8002ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f830 	bl	8002efc <I2C_IsErrorOccurred>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e026      	b.n	8002ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea6:	f7fe fe1d 	bl	8001ae4 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d302      	bcc.n	8002ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d113      	bne.n	8002ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec0:	f043 0220 	orr.w	r2, r3, #32
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e007      	b.n	8002ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	d1cf      	bne.n	8002e92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d068      	beq.n	8002ffa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f30:	e049      	b.n	8002fc6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d045      	beq.n	8002fc6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f3a:	f7fe fdd3 	bl	8001ae4 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d302      	bcc.n	8002f50 <I2C_IsErrorOccurred+0x54>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d13a      	bne.n	8002fc6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f72:	d121      	bne.n	8002fb8 <I2C_IsErrorOccurred+0xbc>
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f7a:	d01d      	beq.n	8002fb8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f7c:	7cfb      	ldrb	r3, [r7, #19]
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d01a      	beq.n	8002fb8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f92:	f7fe fda7 	bl	8001ae4 <HAL_GetTick>
 8002f96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f98:	e00e      	b.n	8002fb8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f9a:	f7fe fda3 	bl	8001ae4 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b19      	cmp	r3, #25
 8002fa6:	d907      	bls.n	8002fb8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	f043 0320 	orr.w	r3, r3, #32
 8002fae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002fb6:	e006      	b.n	8002fc6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	d1e9      	bne.n	8002f9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d003      	beq.n	8002fdc <I2C_IsErrorOccurred+0xe0>
 8002fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0aa      	beq.n	8002f32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d103      	bne.n	8002fec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	f043 0304 	orr.w	r3, r3, #4
 8002ff2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800301c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	f043 0308 	orr.w	r3, r3, #8
 8003034:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800303e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00b      	beq.n	8003068 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	f043 0302 	orr.w	r3, r3, #2
 8003056:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003060:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01c      	beq.n	80030aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f7ff fe63 	bl	8002d3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <I2C_IsErrorOccurred+0x1bc>)
 8003082:	400b      	ands	r3, r1
 8003084:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80030aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3728      	adds	r7, #40	; 0x28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	fe00e800 	.word	0xfe00e800

080030bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	460b      	mov	r3, r1
 80030c8:	817b      	strh	r3, [r7, #10]
 80030ca:	4613      	mov	r3, r2
 80030cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030ce:	897b      	ldrh	r3, [r7, #10]
 80030d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030d4:	7a7b      	ldrb	r3, [r7, #9]
 80030d6:	041b      	lsls	r3, r3, #16
 80030d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	0d5b      	lsrs	r3, r3, #21
 80030f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <I2C_TransferConfig+0x60>)
 80030fc:	430b      	orrs	r3, r1
 80030fe:	43db      	mvns	r3, r3
 8003100:	ea02 0103 	and.w	r1, r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	430a      	orrs	r2, r1
 800310c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800310e:	bf00      	nop
 8003110:	371c      	adds	r7, #28
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	03ff63ff 	.word	0x03ff63ff

08003120 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b20      	cmp	r3, #32
 8003134:	d138      	bne.n	80031a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003140:	2302      	movs	r3, #2
 8003142:	e032      	b.n	80031aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2224      	movs	r2, #36	; 0x24
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0201 	bic.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003172:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6819      	ldr	r1, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e000      	b.n	80031aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031a8:	2302      	movs	r3, #2
  }
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d139      	bne.n	8003240 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e033      	b.n	8003242 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2224      	movs	r2, #36	; 0x24
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0201 	bic.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003208:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	e000      	b.n	8003242 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003240:	2302      	movs	r3, #2
  }
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800325a:	4b23      	ldr	r3, [pc, #140]	; (80032e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	4a22      	ldr	r2, [pc, #136]	; (80032e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003264:	6413      	str	r3, [r2, #64]	; 0x40
 8003266:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003272:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1d      	ldr	r2, [pc, #116]	; (80032ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800327e:	f7fe fc31 	bl	8001ae4 <HAL_GetTick>
 8003282:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003284:	e009      	b.n	800329a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003286:	f7fe fc2d 	bl	8001ae4 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003294:	d901      	bls.n	800329a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e022      	b.n	80032e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800329a:	4b14      	ldr	r3, [pc, #80]	; (80032ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a6:	d1ee      	bne.n	8003286 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032a8:	4b10      	ldr	r3, [pc, #64]	; (80032ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a0f      	ldr	r2, [pc, #60]	; (80032ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032b4:	f7fe fc16 	bl	8001ae4 <HAL_GetTick>
 80032b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032ba:	e009      	b.n	80032d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032bc:	f7fe fc12 	bl	8001ae4 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ca:	d901      	bls.n	80032d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e007      	b.n	80032e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032dc:	d1ee      	bne.n	80032bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40007000 	.word	0x40007000

080032f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032f8:	2300      	movs	r3, #0
 80032fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e29b      	b.n	800383e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8087 	beq.w	8003422 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003314:	4b96      	ldr	r3, [pc, #600]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 030c 	and.w	r3, r3, #12
 800331c:	2b04      	cmp	r3, #4
 800331e:	d00c      	beq.n	800333a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003320:	4b93      	ldr	r3, [pc, #588]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 030c 	and.w	r3, r3, #12
 8003328:	2b08      	cmp	r3, #8
 800332a:	d112      	bne.n	8003352 <HAL_RCC_OscConfig+0x62>
 800332c:	4b90      	ldr	r3, [pc, #576]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003338:	d10b      	bne.n	8003352 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333a:	4b8d      	ldr	r3, [pc, #564]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d06c      	beq.n	8003420 <HAL_RCC_OscConfig+0x130>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d168      	bne.n	8003420 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e275      	b.n	800383e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x7a>
 800335c:	4b84      	ldr	r3, [pc, #528]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a83      	ldr	r2, [pc, #524]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 8003362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	e02e      	b.n	80033c8 <HAL_RCC_OscConfig+0xd8>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x9c>
 8003372:	4b7f      	ldr	r3, [pc, #508]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a7e      	ldr	r2, [pc, #504]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 8003378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4b7c      	ldr	r3, [pc, #496]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a7b      	ldr	r2, [pc, #492]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 8003384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e01d      	b.n	80033c8 <HAL_RCC_OscConfig+0xd8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0xc0>
 8003396:	4b76      	ldr	r3, [pc, #472]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a75      	ldr	r2, [pc, #468]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 800339c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b73      	ldr	r3, [pc, #460]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a72      	ldr	r2, [pc, #456]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0xd8>
 80033b0:	4b6f      	ldr	r3, [pc, #444]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a6e      	ldr	r2, [pc, #440]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 80033b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b6c      	ldr	r3, [pc, #432]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a6b      	ldr	r2, [pc, #428]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 80033c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d013      	beq.n	80033f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe fb88 	bl	8001ae4 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d8:	f7fe fb84 	bl	8001ae4 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	; 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e229      	b.n	800383e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	4b61      	ldr	r3, [pc, #388]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0xe8>
 80033f6:	e014      	b.n	8003422 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe fb74 	bl	8001ae4 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003400:	f7fe fb70 	bl	8001ae4 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e215      	b.n	800383e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003412:	4b57      	ldr	r3, [pc, #348]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x110>
 800341e:	e000      	b.n	8003422 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d069      	beq.n	8003502 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800342e:	4b50      	ldr	r3, [pc, #320]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343a:	4b4d      	ldr	r3, [pc, #308]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b08      	cmp	r3, #8
 8003444:	d11c      	bne.n	8003480 <HAL_RCC_OscConfig+0x190>
 8003446:	4b4a      	ldr	r3, [pc, #296]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d116      	bne.n	8003480 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003452:	4b47      	ldr	r3, [pc, #284]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_RCC_OscConfig+0x17a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d001      	beq.n	800346a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e1e9      	b.n	800383e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346a:	4b41      	ldr	r3, [pc, #260]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	493d      	ldr	r1, [pc, #244]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347e:	e040      	b.n	8003502 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d023      	beq.n	80034d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003488:	4b39      	ldr	r3, [pc, #228]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a38      	ldr	r2, [pc, #224]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fe fb26 	bl	8001ae4 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800349c:	f7fe fb22 	bl	8001ae4 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e1c7      	b.n	800383e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ae:	4b30      	ldr	r3, [pc, #192]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ba:	4b2d      	ldr	r3, [pc, #180]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4929      	ldr	r1, [pc, #164]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]
 80034ce:	e018      	b.n	8003502 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d0:	4b27      	ldr	r3, [pc, #156]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a26      	ldr	r2, [pc, #152]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 80034d6:	f023 0301 	bic.w	r3, r3, #1
 80034da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fe fb02 	bl	8001ae4 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e4:	f7fe fafe 	bl	8001ae4 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e1a3      	b.n	800383e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f6:	4b1e      	ldr	r3, [pc, #120]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d038      	beq.n	8003580 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d019      	beq.n	800354a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003516:	4b16      	ldr	r3, [pc, #88]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 8003518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351a:	4a15      	ldr	r2, [pc, #84]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003522:	f7fe fadf 	bl	8001ae4 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800352a:	f7fe fadb 	bl	8001ae4 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e180      	b.n	800383e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 800353e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x23a>
 8003548:	e01a      	b.n	8003580 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800354a:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 800354c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354e:	4a08      	ldr	r2, [pc, #32]	; (8003570 <HAL_RCC_OscConfig+0x280>)
 8003550:	f023 0301 	bic.w	r3, r3, #1
 8003554:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003556:	f7fe fac5 	bl	8001ae4 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355c:	e00a      	b.n	8003574 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355e:	f7fe fac1 	bl	8001ae4 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d903      	bls.n	8003574 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e166      	b.n	800383e <HAL_RCC_OscConfig+0x54e>
 8003570:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	4b92      	ldr	r3, [pc, #584]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 8003576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1ee      	bne.n	800355e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80a4 	beq.w	80036d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358e:	4b8c      	ldr	r3, [pc, #560]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10d      	bne.n	80035b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	4b89      	ldr	r3, [pc, #548]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	4a88      	ldr	r2, [pc, #544]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 80035a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a4:	6413      	str	r3, [r2, #64]	; 0x40
 80035a6:	4b86      	ldr	r3, [pc, #536]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b2:	2301      	movs	r3, #1
 80035b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b6:	4b83      	ldr	r3, [pc, #524]	; (80037c4 <HAL_RCC_OscConfig+0x4d4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d118      	bne.n	80035f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035c2:	4b80      	ldr	r3, [pc, #512]	; (80037c4 <HAL_RCC_OscConfig+0x4d4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a7f      	ldr	r2, [pc, #508]	; (80037c4 <HAL_RCC_OscConfig+0x4d4>)
 80035c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ce:	f7fe fa89 	bl	8001ae4 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d6:	f7fe fa85 	bl	8001ae4 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b64      	cmp	r3, #100	; 0x64
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e12a      	b.n	800383e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e8:	4b76      	ldr	r3, [pc, #472]	; (80037c4 <HAL_RCC_OscConfig+0x4d4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d106      	bne.n	800360a <HAL_RCC_OscConfig+0x31a>
 80035fc:	4b70      	ldr	r3, [pc, #448]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	4a6f      	ldr	r2, [pc, #444]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	6713      	str	r3, [r2, #112]	; 0x70
 8003608:	e02d      	b.n	8003666 <HAL_RCC_OscConfig+0x376>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10c      	bne.n	800362c <HAL_RCC_OscConfig+0x33c>
 8003612:	4b6b      	ldr	r3, [pc, #428]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	4a6a      	ldr	r2, [pc, #424]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	6713      	str	r3, [r2, #112]	; 0x70
 800361e:	4b68      	ldr	r3, [pc, #416]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	4a67      	ldr	r2, [pc, #412]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 8003624:	f023 0304 	bic.w	r3, r3, #4
 8003628:	6713      	str	r3, [r2, #112]	; 0x70
 800362a:	e01c      	b.n	8003666 <HAL_RCC_OscConfig+0x376>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b05      	cmp	r3, #5
 8003632:	d10c      	bne.n	800364e <HAL_RCC_OscConfig+0x35e>
 8003634:	4b62      	ldr	r3, [pc, #392]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	4a61      	ldr	r2, [pc, #388]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 800363a:	f043 0304 	orr.w	r3, r3, #4
 800363e:	6713      	str	r3, [r2, #112]	; 0x70
 8003640:	4b5f      	ldr	r3, [pc, #380]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	4a5e      	ldr	r2, [pc, #376]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6713      	str	r3, [r2, #112]	; 0x70
 800364c:	e00b      	b.n	8003666 <HAL_RCC_OscConfig+0x376>
 800364e:	4b5c      	ldr	r3, [pc, #368]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	4a5b      	ldr	r2, [pc, #364]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	6713      	str	r3, [r2, #112]	; 0x70
 800365a:	4b59      	ldr	r3, [pc, #356]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	4a58      	ldr	r2, [pc, #352]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 8003660:	f023 0304 	bic.w	r3, r3, #4
 8003664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d015      	beq.n	800369a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366e:	f7fe fa39 	bl	8001ae4 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003674:	e00a      	b.n	800368c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003676:	f7fe fa35 	bl	8001ae4 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	f241 3288 	movw	r2, #5000	; 0x1388
 8003684:	4293      	cmp	r3, r2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e0d8      	b.n	800383e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368c:	4b4c      	ldr	r3, [pc, #304]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0ee      	beq.n	8003676 <HAL_RCC_OscConfig+0x386>
 8003698:	e014      	b.n	80036c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369a:	f7fe fa23 	bl	8001ae4 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a0:	e00a      	b.n	80036b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7fe fa1f 	bl	8001ae4 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e0c2      	b.n	800383e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b8:	4b41      	ldr	r3, [pc, #260]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ee      	bne.n	80036a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036c4:	7dfb      	ldrb	r3, [r7, #23]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d105      	bne.n	80036d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ca:	4b3d      	ldr	r3, [pc, #244]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	4a3c      	ldr	r2, [pc, #240]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 80036d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 80ae 	beq.w	800383c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e0:	4b37      	ldr	r3, [pc, #220]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d06d      	beq.n	80037c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d14b      	bne.n	800378c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f4:	4b32      	ldr	r3, [pc, #200]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a31      	ldr	r2, [pc, #196]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 80036fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fe f9f0 	bl	8001ae4 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003708:	f7fe f9ec 	bl	8001ae4 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e091      	b.n	800383e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371a:	4b29      	ldr	r3, [pc, #164]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69da      	ldr	r2, [r3, #28]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	019b      	lsls	r3, r3, #6
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	085b      	lsrs	r3, r3, #1
 800373e:	3b01      	subs	r3, #1
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	071b      	lsls	r3, r3, #28
 8003752:	491b      	ldr	r1, [pc, #108]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a18      	ldr	r2, [pc, #96]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 800375e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fe f9be 	bl	8001ae4 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376c:	f7fe f9ba 	bl	8001ae4 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e05f      	b.n	800383e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377e:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x47c>
 800378a:	e057      	b.n	800383c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0b      	ldr	r2, [pc, #44]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 8003792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fe f9a4 	bl	8001ae4 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fe f9a0 	bl	8001ae4 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e045      	b.n	800383e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <HAL_RCC_OscConfig+0x4d0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4b0>
 80037be:	e03d      	b.n	800383c <HAL_RCC_OscConfig+0x54c>
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037c8:	4b1f      	ldr	r3, [pc, #124]	; (8003848 <HAL_RCC_OscConfig+0x558>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d030      	beq.n	8003838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d129      	bne.n	8003838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d122      	bne.n	8003838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037f8:	4013      	ands	r3, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003800:	4293      	cmp	r3, r2
 8003802:	d119      	bne.n	8003838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	3b01      	subs	r3, #1
 8003812:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003814:	429a      	cmp	r2, r3
 8003816:	d10f      	bne.n	8003838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003824:	429a      	cmp	r2, r3
 8003826:	d107      	bne.n	8003838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800

0800384c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0d0      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003864:	4b6a      	ldr	r3, [pc, #424]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d910      	bls.n	8003894 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b67      	ldr	r3, [pc, #412]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 020f 	bic.w	r2, r3, #15
 800387a:	4965      	ldr	r1, [pc, #404]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b63      	ldr	r3, [pc, #396]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0b8      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d020      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ac:	4b59      	ldr	r3, [pc, #356]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4a58      	ldr	r2, [pc, #352]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 80038b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c4:	4b53      	ldr	r3, [pc, #332]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a52      	ldr	r2, [pc, #328]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 80038ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d0:	4b50      	ldr	r3, [pc, #320]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	494d      	ldr	r1, [pc, #308]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d040      	beq.n	8003970 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d115      	bne.n	800392e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e07f      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390e:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e073      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391e:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e06b      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392e:	4b39      	ldr	r3, [pc, #228]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f023 0203 	bic.w	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4936      	ldr	r1, [pc, #216]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 800393c:	4313      	orrs	r3, r2
 800393e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003940:	f7fe f8d0 	bl	8001ae4 <HAL_GetTick>
 8003944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	e00a      	b.n	800395e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003948:	f7fe f8cc 	bl	8001ae4 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e053      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	4b2d      	ldr	r3, [pc, #180]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 020c 	and.w	r2, r3, #12
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	429a      	cmp	r2, r3
 800396e:	d1eb      	bne.n	8003948 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003970:	4b27      	ldr	r3, [pc, #156]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 030f 	and.w	r3, r3, #15
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d210      	bcs.n	80039a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 020f 	bic.w	r2, r3, #15
 8003986:	4922      	ldr	r1, [pc, #136]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e032      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4916      	ldr	r1, [pc, #88]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ca:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	490e      	ldr	r1, [pc, #56]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039de:	f000 f821 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80039e2:	4602      	mov	r2, r0
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	490a      	ldr	r1, [pc, #40]	; (8003a18 <HAL_RCC_ClockConfig+0x1cc>)
 80039f0:	5ccb      	ldrb	r3, [r1, r3]
 80039f2:	fa22 f303 	lsr.w	r3, r2, r3
 80039f6:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <HAL_RCC_ClockConfig+0x1d0>)
 80039f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039fa:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <HAL_RCC_ClockConfig+0x1d4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fd fe14 	bl	800162c <HAL_InitTick>

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40023c00 	.word	0x40023c00
 8003a14:	40023800 	.word	0x40023800
 8003a18:	0800b24c 	.word	0x0800b24c
 8003a1c:	2000002c 	.word	0x2000002c
 8003a20:	20000030 	.word	0x20000030

08003a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a28:	b090      	sub	sp, #64	; 0x40
 8003a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a30:	2300      	movs	r3, #0
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a34:	2300      	movs	r3, #0
 8003a36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a3c:	4b59      	ldr	r3, [pc, #356]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 030c 	and.w	r3, r3, #12
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d00d      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x40>
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	f200 80a1 	bhi.w	8003b90 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x34>
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d003      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a56:	e09b      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a58:	4b53      	ldr	r3, [pc, #332]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a5c:	e09b      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a5e:	4b53      	ldr	r3, [pc, #332]	; (8003bac <HAL_RCC_GetSysClockFreq+0x188>)
 8003a60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a62:	e098      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a64:	4b4f      	ldr	r3, [pc, #316]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a6c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a6e:	4b4d      	ldr	r3, [pc, #308]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d028      	beq.n	8003acc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a7a:	4b4a      	ldr	r3, [pc, #296]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	099b      	lsrs	r3, r3, #6
 8003a80:	2200      	movs	r2, #0
 8003a82:	623b      	str	r3, [r7, #32]
 8003a84:	627a      	str	r2, [r7, #36]	; 0x24
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4b47      	ldr	r3, [pc, #284]	; (8003bac <HAL_RCC_GetSysClockFreq+0x188>)
 8003a90:	fb03 f201 	mul.w	r2, r3, r1
 8003a94:	2300      	movs	r3, #0
 8003a96:	fb00 f303 	mul.w	r3, r0, r3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	4a43      	ldr	r2, [pc, #268]	; (8003bac <HAL_RCC_GetSysClockFreq+0x188>)
 8003a9e:	fba0 1202 	umull	r1, r2, r0, r2
 8003aa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aa4:	460a      	mov	r2, r1
 8003aa6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aaa:	4413      	add	r3, r2
 8003aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	61fa      	str	r2, [r7, #28]
 8003ab6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003abe:	f7fc fbc7 	bl	8000250 <__aeabi_uldivmod>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aca:	e053      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003acc:	4b35      	ldr	r3, [pc, #212]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	099b      	lsrs	r3, r3, #6
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	617a      	str	r2, [r7, #20]
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ade:	f04f 0b00 	mov.w	fp, #0
 8003ae2:	4652      	mov	r2, sl
 8003ae4:	465b      	mov	r3, fp
 8003ae6:	f04f 0000 	mov.w	r0, #0
 8003aea:	f04f 0100 	mov.w	r1, #0
 8003aee:	0159      	lsls	r1, r3, #5
 8003af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003af4:	0150      	lsls	r0, r2, #5
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	ebb2 080a 	subs.w	r8, r2, sl
 8003afe:	eb63 090b 	sbc.w	r9, r3, fp
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b16:	ebb2 0408 	subs.w	r4, r2, r8
 8003b1a:	eb63 0509 	sbc.w	r5, r3, r9
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	00eb      	lsls	r3, r5, #3
 8003b28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b2c:	00e2      	lsls	r2, r4, #3
 8003b2e:	4614      	mov	r4, r2
 8003b30:	461d      	mov	r5, r3
 8003b32:	eb14 030a 	adds.w	r3, r4, sl
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	eb45 030b 	adc.w	r3, r5, fp
 8003b3c:	607b      	str	r3, [r7, #4]
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	028b      	lsls	r3, r1, #10
 8003b4e:	4621      	mov	r1, r4
 8003b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b54:	4621      	mov	r1, r4
 8003b56:	028a      	lsls	r2, r1, #10
 8003b58:	4610      	mov	r0, r2
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5e:	2200      	movs	r2, #0
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	60fa      	str	r2, [r7, #12]
 8003b64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b68:	f7fc fb72 	bl	8000250 <__aeabi_uldivmod>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4613      	mov	r3, r2
 8003b72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	0c1b      	lsrs	r3, r3, #16
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	3301      	adds	r3, #1
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003b84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b8e:	e002      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3740      	adds	r7, #64	; 0x40
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	00f42400 	.word	0x00f42400
 8003bac:	018cba80 	.word	0x018cba80

08003bb0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb4:	4b03      	ldr	r3, [pc, #12]	; (8003bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	2000002c 	.word	0x2000002c

08003bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bcc:	f7ff fff0 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	0a9b      	lsrs	r3, r3, #10
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	4903      	ldr	r1, [pc, #12]	; (8003bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bde:	5ccb      	ldrb	r3, [r1, r3]
 8003be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40023800 	.word	0x40023800
 8003bec:	0800b25c 	.word	0x0800b25c

08003bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bf4:	f7ff ffdc 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	0b5b      	lsrs	r3, r3, #13
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	4903      	ldr	r1, [pc, #12]	; (8003c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c06:	5ccb      	ldrb	r3, [r1, r3]
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40023800 	.word	0x40023800
 8003c14:	0800b25c 	.word	0x0800b25c

08003c18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	220f      	movs	r2, #15
 8003c26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c28:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <HAL_RCC_GetClockConfig+0x5c>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0203 	and.w	r2, r3, #3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c34:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <HAL_RCC_GetClockConfig+0x5c>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <HAL_RCC_GetClockConfig+0x5c>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c4c:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <HAL_RCC_GetClockConfig+0x5c>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	08db      	lsrs	r3, r3, #3
 8003c52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c5a:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <HAL_RCC_GetClockConfig+0x60>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 020f 	and.w	r2, r3, #15
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	601a      	str	r2, [r3, #0]
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40023c00 	.word	0x40023c00

08003c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d012      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ca4:	4b69      	ldr	r3, [pc, #420]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4a68      	ldr	r2, [pc, #416]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003caa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003cae:	6093      	str	r3, [r2, #8]
 8003cb0:	4b66      	ldr	r3, [pc, #408]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb8:	4964      	ldr	r1, [pc, #400]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d017      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cd6:	4b5d      	ldr	r3, [pc, #372]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	4959      	ldr	r1, [pc, #356]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d02:	2301      	movs	r3, #1
 8003d04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d017      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d12:	4b4e      	ldr	r3, [pc, #312]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	494a      	ldr	r1, [pc, #296]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d30:	d101      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d32:	2301      	movs	r3, #1
 8003d34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 808b 	beq.w	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d60:	4b3a      	ldr	r3, [pc, #232]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	4a39      	ldr	r2, [pc, #228]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6c:	4b37      	ldr	r3, [pc, #220]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d78:	4b35      	ldr	r3, [pc, #212]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a34      	ldr	r2, [pc, #208]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d84:	f7fd feae 	bl	8001ae4 <HAL_GetTick>
 8003d88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8c:	f7fd feaa 	bl	8001ae4 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	; 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e38f      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d9e:	4b2c      	ldr	r3, [pc, #176]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003daa:	4b28      	ldr	r3, [pc, #160]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d035      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d02e      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dc8:	4b20      	ldr	r3, [pc, #128]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dd2:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	4a1d      	ldr	r2, [pc, #116]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ddc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dde:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de2:	4a1a      	ldr	r2, [pc, #104]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003dea:	4a18      	ldr	r2, [pc, #96]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003df0:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d114      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fd fe72 	bl	8001ae4 <HAL_GetTick>
 8003e00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e02:	e00a      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e04:	f7fd fe6e 	bl	8001ae4 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e351      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0ee      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e32:	d111      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e40:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e42:	400b      	ands	r3, r1
 8003e44:	4901      	ldr	r1, [pc, #4]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	608b      	str	r3, [r1, #8]
 8003e4a:	e00b      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	40007000 	.word	0x40007000
 8003e54:	0ffffcff 	.word	0x0ffffcff
 8003e58:	4bac      	ldr	r3, [pc, #688]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	4aab      	ldr	r2, [pc, #684]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e62:	6093      	str	r3, [r2, #8]
 8003e64:	4ba9      	ldr	r3, [pc, #676]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e70:	49a6      	ldr	r1, [pc, #664]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0310 	and.w	r3, r3, #16
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d010      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e82:	4ba2      	ldr	r3, [pc, #648]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e88:	4aa0      	ldr	r2, [pc, #640]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e92:	4b9e      	ldr	r3, [pc, #632]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	499b      	ldr	r1, [pc, #620]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eb0:	4b96      	ldr	r3, [pc, #600]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ebe:	4993      	ldr	r1, [pc, #588]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ed2:	4b8e      	ldr	r3, [pc, #568]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ee0:	498a      	ldr	r1, [pc, #552]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ef4:	4b85      	ldr	r3, [pc, #532]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f02:	4982      	ldr	r1, [pc, #520]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f16:	4b7d      	ldr	r3, [pc, #500]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	4979      	ldr	r1, [pc, #484]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f38:	4b74      	ldr	r3, [pc, #464]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3e:	f023 0203 	bic.w	r2, r3, #3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	4971      	ldr	r1, [pc, #452]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f5a:	4b6c      	ldr	r3, [pc, #432]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f60:	f023 020c 	bic.w	r2, r3, #12
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f68:	4968      	ldr	r1, [pc, #416]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f7c:	4b63      	ldr	r3, [pc, #396]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8a:	4960      	ldr	r1, [pc, #384]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f9e:	4b5b      	ldr	r3, [pc, #364]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fac:	4957      	ldr	r1, [pc, #348]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fc0:	4b52      	ldr	r3, [pc, #328]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fce:	494f      	ldr	r1, [pc, #316]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003fe2:	4b4a      	ldr	r3, [pc, #296]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff0:	4946      	ldr	r1, [pc, #280]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004004:	4b41      	ldr	r3, [pc, #260]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004012:	493e      	ldr	r1, [pc, #248]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004026:	4b39      	ldr	r3, [pc, #228]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004034:	4935      	ldr	r1, [pc, #212]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004048:	4b30      	ldr	r3, [pc, #192]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004056:	492d      	ldr	r1, [pc, #180]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d011      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800406a:	4b28      	ldr	r3, [pc, #160]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004078:	4924      	ldr	r1, [pc, #144]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004084:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004088:	d101      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800408a:	2301      	movs	r3, #1
 800408c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800409a:	2301      	movs	r3, #1
 800409c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040aa:	4b18      	ldr	r3, [pc, #96]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b8:	4914      	ldr	r1, [pc, #80]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00b      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040dc:	490b      	ldr	r1, [pc, #44]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00f      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004100:	4902      	ldr	r1, [pc, #8]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004108:	e002      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800410a:	bf00      	nop
 800410c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00b      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800411c:	4b8a      	ldr	r3, [pc, #552]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800411e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004122:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412c:	4986      	ldr	r1, [pc, #536]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00b      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004140:	4b81      	ldr	r3, [pc, #516]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004146:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004150:	497d      	ldr	r1, [pc, #500]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d006      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 80d6 	beq.w	8004318 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800416c:	4b76      	ldr	r3, [pc, #472]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a75      	ldr	r2, [pc, #468]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004172:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004178:	f7fd fcb4 	bl	8001ae4 <HAL_GetTick>
 800417c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004180:	f7fd fcb0 	bl	8001ae4 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b64      	cmp	r3, #100	; 0x64
 800418c:	d901      	bls.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e195      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004192:	4b6d      	ldr	r3, [pc, #436]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d021      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x572>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d11d      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041b2:	4b65      	ldr	r3, [pc, #404]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b8:	0c1b      	lsrs	r3, r3, #16
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041c0:	4b61      	ldr	r3, [pc, #388]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c6:	0e1b      	lsrs	r3, r3, #24
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	019a      	lsls	r2, r3, #6
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	041b      	lsls	r3, r3, #16
 80041d8:	431a      	orrs	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	071b      	lsls	r3, r3, #28
 80041e6:	4958      	ldr	r1, [pc, #352]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d004      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800420c:	2b00      	cmp	r3, #0
 800420e:	d02e      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004218:	d129      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800421a:	4b4b      	ldr	r3, [pc, #300]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800421c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004220:	0c1b      	lsrs	r3, r3, #16
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004228:	4b47      	ldr	r3, [pc, #284]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422e:	0f1b      	lsrs	r3, r3, #28
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	019a      	lsls	r2, r3, #6
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	041b      	lsls	r3, r3, #16
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	061b      	lsls	r3, r3, #24
 8004248:	431a      	orrs	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	071b      	lsls	r3, r3, #28
 800424e:	493e      	ldr	r1, [pc, #248]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004256:	4b3c      	ldr	r3, [pc, #240]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800425c:	f023 021f 	bic.w	r2, r3, #31
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	3b01      	subs	r3, #1
 8004266:	4938      	ldr	r1, [pc, #224]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01d      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800427a:	4b33      	ldr	r3, [pc, #204]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800427c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004280:	0e1b      	lsrs	r3, r3, #24
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004288:	4b2f      	ldr	r3, [pc, #188]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800428a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800428e:	0f1b      	lsrs	r3, r3, #28
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	019a      	lsls	r2, r3, #6
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	041b      	lsls	r3, r3, #16
 80042a2:	431a      	orrs	r2, r3
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	061b      	lsls	r3, r3, #24
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	071b      	lsls	r3, r3, #28
 80042ae:	4926      	ldr	r1, [pc, #152]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d011      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	019a      	lsls	r2, r3, #6
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	041b      	lsls	r3, r3, #16
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	061b      	lsls	r3, r3, #24
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	071b      	lsls	r3, r3, #28
 80042de:	491a      	ldr	r1, [pc, #104]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042e6:	4b18      	ldr	r3, [pc, #96]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a17      	ldr	r2, [pc, #92]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f2:	f7fd fbf7 	bl	8001ae4 <HAL_GetTick>
 80042f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042f8:	e008      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042fa:	f7fd fbf3 	bl	8001ae4 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b64      	cmp	r3, #100	; 0x64
 8004306:	d901      	bls.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e0d8      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800430c:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b01      	cmp	r3, #1
 800431c:	f040 80ce 	bne.w	80044bc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004320:	4b09      	ldr	r3, [pc, #36]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a08      	ldr	r2, [pc, #32]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800432a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800432c:	f7fd fbda 	bl	8001ae4 <HAL_GetTick>
 8004330:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004332:	e00b      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004334:	f7fd fbd6 	bl	8001ae4 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b64      	cmp	r3, #100	; 0x64
 8004340:	d904      	bls.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e0bb      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004346:	bf00      	nop
 8004348:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800434c:	4b5e      	ldr	r3, [pc, #376]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004358:	d0ec      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004376:	2b00      	cmp	r3, #0
 8004378:	d02e      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d12a      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004382:	4b51      	ldr	r3, [pc, #324]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004390:	4b4d      	ldr	r3, [pc, #308]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	0f1b      	lsrs	r3, r3, #28
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	019a      	lsls	r2, r3, #6
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	041b      	lsls	r3, r3, #16
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	061b      	lsls	r3, r3, #24
 80043b0:	431a      	orrs	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	071b      	lsls	r3, r3, #28
 80043b6:	4944      	ldr	r1, [pc, #272]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043be:	4b42      	ldr	r3, [pc, #264]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043cc:	3b01      	subs	r3, #1
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	493d      	ldr	r1, [pc, #244]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d022      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043ec:	d11d      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043ee:	4b36      	ldr	r3, [pc, #216]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f4:	0e1b      	lsrs	r3, r3, #24
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043fc:	4b32      	ldr	r3, [pc, #200]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004402:	0f1b      	lsrs	r3, r3, #28
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	019a      	lsls	r2, r3, #6
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	041b      	lsls	r3, r3, #16
 8004416:	431a      	orrs	r2, r3
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	061b      	lsls	r3, r3, #24
 800441c:	431a      	orrs	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	071b      	lsls	r3, r3, #28
 8004422:	4929      	ldr	r1, [pc, #164]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d028      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004436:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	0e1b      	lsrs	r3, r3, #24
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004444:	4b20      	ldr	r3, [pc, #128]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	0c1b      	lsrs	r3, r3, #16
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	019a      	lsls	r2, r3, #6
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	041b      	lsls	r3, r3, #16
 800445c:	431a      	orrs	r2, r3
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	061b      	lsls	r3, r3, #24
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	071b      	lsls	r3, r3, #28
 800446a:	4917      	ldr	r1, [pc, #92]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004472:	4b15      	ldr	r3, [pc, #84]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004478:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	4911      	ldr	r1, [pc, #68]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004488:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a0e      	ldr	r2, [pc, #56]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800448e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004494:	f7fd fb26 	bl	8001ae4 <HAL_GetTick>
 8004498:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800449c:	f7fd fb22 	bl	8001ae4 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	; 0x64
 80044a8:	d901      	bls.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e007      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044ae:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044ba:	d1ef      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3720      	adds	r7, #32
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40023800 	.word	0x40023800

080044cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e09d      	b.n	800461a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d108      	bne.n	80044f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ee:	d009      	beq.n	8004504 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	61da      	str	r2, [r3, #28]
 80044f6:	e005      	b.n	8004504 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fc fd98 	bl	8001054 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800453a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004544:	d902      	bls.n	800454c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	e002      	b.n	8004552 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800454c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004550:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800455a:	d007      	beq.n	800456c <HAL_SPI_Init+0xa0>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004564:	d002      	beq.n	800456c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ae:	ea42 0103 	orr.w	r1, r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	0c1b      	lsrs	r3, r3, #16
 80045c8:	f003 0204 	and.w	r2, r3, #4
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045e8:	ea42 0103 	orr.w	r1, r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69da      	ldr	r2, [r3, #28]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004608:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e049      	b.n	80046c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f841 	bl	80046d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2202      	movs	r2, #2
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3304      	adds	r3, #4
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f000 fb69 	bl	8004d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d001      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e054      	b.n	80047a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a26      	ldr	r2, [pc, #152]	; (80047b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d022      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x80>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004726:	d01d      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x80>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a22      	ldr	r2, [pc, #136]	; (80047b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d018      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x80>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a21      	ldr	r2, [pc, #132]	; (80047bc <HAL_TIM_Base_Start_IT+0xd8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x80>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1f      	ldr	r2, [pc, #124]	; (80047c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00e      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x80>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a1e      	ldr	r2, [pc, #120]	; (80047c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x80>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x80>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <HAL_TIM_Base_Start_IT+0xe8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d115      	bne.n	8004790 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	4b19      	ldr	r3, [pc, #100]	; (80047d0 <HAL_TIM_Base_Start_IT+0xec>)
 800476c:	4013      	ands	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b06      	cmp	r3, #6
 8004774:	d015      	beq.n	80047a2 <HAL_TIM_Base_Start_IT+0xbe>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d011      	beq.n	80047a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478e:	e008      	b.n	80047a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0201 	orr.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	e000      	b.n	80047a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40000400 	.word	0x40000400
 80047bc:	40000800 	.word	0x40000800
 80047c0:	40000c00 	.word	0x40000c00
 80047c4:	40010400 	.word	0x40010400
 80047c8:	40014000 	.word	0x40014000
 80047cc:	40001800 	.word	0x40001800
 80047d0:	00010007 	.word	0x00010007

080047d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e049      	b.n	800487a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fd f83a 	bl	8001874 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3304      	adds	r3, #4
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f000 fa90 	bl	8004d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b02      	cmp	r3, #2
 8004896:	d122      	bne.n	80048de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d11b      	bne.n	80048de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f06f 0202 	mvn.w	r2, #2
 80048ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fa19 	bl	8004cfc <HAL_TIM_IC_CaptureCallback>
 80048ca:	e005      	b.n	80048d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fa0b 	bl	8004ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fa1c 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d122      	bne.n	8004932 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d11b      	bne.n	8004932 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f06f 0204 	mvn.w	r2, #4
 8004902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f9ef 	bl	8004cfc <HAL_TIM_IC_CaptureCallback>
 800491e:	e005      	b.n	800492c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f9e1 	bl	8004ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f9f2 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b08      	cmp	r3, #8
 800493e:	d122      	bne.n	8004986 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b08      	cmp	r3, #8
 800494c:	d11b      	bne.n	8004986 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f06f 0208 	mvn.w	r2, #8
 8004956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2204      	movs	r2, #4
 800495c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f9c5 	bl	8004cfc <HAL_TIM_IC_CaptureCallback>
 8004972:	e005      	b.n	8004980 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f9b7 	bl	8004ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f9c8 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b10      	cmp	r3, #16
 8004992:	d122      	bne.n	80049da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b10      	cmp	r3, #16
 80049a0:	d11b      	bne.n	80049da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f06f 0210 	mvn.w	r2, #16
 80049aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2208      	movs	r2, #8
 80049b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f99b 	bl	8004cfc <HAL_TIM_IC_CaptureCallback>
 80049c6:	e005      	b.n	80049d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f98d 	bl	8004ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f99e 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d10e      	bne.n	8004a06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d107      	bne.n	8004a06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f06f 0201 	mvn.w	r2, #1
 80049fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7fc fad1 	bl	8000fa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a10:	2b80      	cmp	r3, #128	; 0x80
 8004a12:	d10e      	bne.n	8004a32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1e:	2b80      	cmp	r3, #128	; 0x80
 8004a20:	d107      	bne.n	8004a32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fd19 	bl	8005464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a40:	d10e      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4c:	2b80      	cmp	r3, #128	; 0x80
 8004a4e:	d107      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fd0c 	bl	8005478 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6a:	2b40      	cmp	r3, #64	; 0x40
 8004a6c:	d10e      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d107      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f94c 	bl	8004d24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d10e      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d107      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0220 	mvn.w	r2, #32
 8004ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fccc 	bl	8005450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ab8:	bf00      	nop
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e0ff      	b.n	8004cde <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b14      	cmp	r3, #20
 8004aea:	f200 80f0 	bhi.w	8004cce <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004aee:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af4:	08004b49 	.word	0x08004b49
 8004af8:	08004ccf 	.word	0x08004ccf
 8004afc:	08004ccf 	.word	0x08004ccf
 8004b00:	08004ccf 	.word	0x08004ccf
 8004b04:	08004b89 	.word	0x08004b89
 8004b08:	08004ccf 	.word	0x08004ccf
 8004b0c:	08004ccf 	.word	0x08004ccf
 8004b10:	08004ccf 	.word	0x08004ccf
 8004b14:	08004bcb 	.word	0x08004bcb
 8004b18:	08004ccf 	.word	0x08004ccf
 8004b1c:	08004ccf 	.word	0x08004ccf
 8004b20:	08004ccf 	.word	0x08004ccf
 8004b24:	08004c0b 	.word	0x08004c0b
 8004b28:	08004ccf 	.word	0x08004ccf
 8004b2c:	08004ccf 	.word	0x08004ccf
 8004b30:	08004ccf 	.word	0x08004ccf
 8004b34:	08004c4d 	.word	0x08004c4d
 8004b38:	08004ccf 	.word	0x08004ccf
 8004b3c:	08004ccf 	.word	0x08004ccf
 8004b40:	08004ccf 	.word	0x08004ccf
 8004b44:	08004c8d 	.word	0x08004c8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f992 	bl	8004e78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0208 	orr.w	r2, r2, #8
 8004b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0204 	bic.w	r2, r2, #4
 8004b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6999      	ldr	r1, [r3, #24]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	619a      	str	r2, [r3, #24]
      break;
 8004b86:	e0a5      	b.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f9e4 	bl	8004f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6999      	ldr	r1, [r3, #24]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	021a      	lsls	r2, r3, #8
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	619a      	str	r2, [r3, #24]
      break;
 8004bc8:	e084      	b.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fa3b 	bl	800504c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0208 	orr.w	r2, r2, #8
 8004be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0204 	bic.w	r2, r2, #4
 8004bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69d9      	ldr	r1, [r3, #28]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	61da      	str	r2, [r3, #28]
      break;
 8004c08:	e064      	b.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fa91 	bl	8005138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69d9      	ldr	r1, [r3, #28]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	021a      	lsls	r2, r3, #8
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	61da      	str	r2, [r3, #28]
      break;
 8004c4a:	e043      	b.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fac8 	bl	80051e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0208 	orr.w	r2, r2, #8
 8004c66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0204 	bic.w	r2, r2, #4
 8004c76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c8a:	e023      	b.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fafa 	bl	800528c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	021a      	lsls	r2, r3, #8
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ccc:	e002      	b.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop

08004ce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a40      	ldr	r2, [pc, #256]	; (8004e4c <TIM_Base_SetConfig+0x114>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d56:	d00f      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a3d      	ldr	r2, [pc, #244]	; (8004e50 <TIM_Base_SetConfig+0x118>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00b      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a3c      	ldr	r2, [pc, #240]	; (8004e54 <TIM_Base_SetConfig+0x11c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d007      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a3b      	ldr	r2, [pc, #236]	; (8004e58 <TIM_Base_SetConfig+0x120>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d003      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a3a      	ldr	r2, [pc, #232]	; (8004e5c <TIM_Base_SetConfig+0x124>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d108      	bne.n	8004d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2f      	ldr	r2, [pc, #188]	; (8004e4c <TIM_Base_SetConfig+0x114>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d02b      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d98:	d027      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a2c      	ldr	r2, [pc, #176]	; (8004e50 <TIM_Base_SetConfig+0x118>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d023      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a2b      	ldr	r2, [pc, #172]	; (8004e54 <TIM_Base_SetConfig+0x11c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d01f      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a2a      	ldr	r2, [pc, #168]	; (8004e58 <TIM_Base_SetConfig+0x120>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01b      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a29      	ldr	r2, [pc, #164]	; (8004e5c <TIM_Base_SetConfig+0x124>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d017      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a28      	ldr	r2, [pc, #160]	; (8004e60 <TIM_Base_SetConfig+0x128>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d013      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a27      	ldr	r2, [pc, #156]	; (8004e64 <TIM_Base_SetConfig+0x12c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00f      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a26      	ldr	r2, [pc, #152]	; (8004e68 <TIM_Base_SetConfig+0x130>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00b      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a25      	ldr	r2, [pc, #148]	; (8004e6c <TIM_Base_SetConfig+0x134>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a24      	ldr	r2, [pc, #144]	; (8004e70 <TIM_Base_SetConfig+0x138>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d003      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a23      	ldr	r2, [pc, #140]	; (8004e74 <TIM_Base_SetConfig+0x13c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d108      	bne.n	8004dfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <TIM_Base_SetConfig+0x114>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_Base_SetConfig+0xf8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a0c      	ldr	r2, [pc, #48]	; (8004e5c <TIM_Base_SetConfig+0x124>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d103      	bne.n	8004e38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	615a      	str	r2, [r3, #20]
}
 8004e3e:	bf00      	nop
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40000800 	.word	0x40000800
 8004e58:	40000c00 	.word	0x40000c00
 8004e5c:	40010400 	.word	0x40010400
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40014400 	.word	0x40014400
 8004e68:	40014800 	.word	0x40014800
 8004e6c:	40001800 	.word	0x40001800
 8004e70:	40001c00 	.word	0x40001c00
 8004e74:	40002000 	.word	0x40002000

08004e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f023 0201 	bic.w	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4b2b      	ldr	r3, [pc, #172]	; (8004f50 <TIM_OC1_SetConfig+0xd8>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f023 0302 	bic.w	r3, r3, #2
 8004ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a21      	ldr	r2, [pc, #132]	; (8004f54 <TIM_OC1_SetConfig+0xdc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_OC1_SetConfig+0x64>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a20      	ldr	r2, [pc, #128]	; (8004f58 <TIM_OC1_SetConfig+0xe0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d10c      	bne.n	8004ef6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0308 	bic.w	r3, r3, #8
 8004ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f023 0304 	bic.w	r3, r3, #4
 8004ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a16      	ldr	r2, [pc, #88]	; (8004f54 <TIM_OC1_SetConfig+0xdc>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <TIM_OC1_SetConfig+0x8e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a15      	ldr	r2, [pc, #84]	; (8004f58 <TIM_OC1_SetConfig+0xe0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d111      	bne.n	8004f2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	621a      	str	r2, [r3, #32]
}
 8004f44:	bf00      	nop
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	fffeff8f 	.word	0xfffeff8f
 8004f54:	40010000 	.word	0x40010000
 8004f58:	40010400 	.word	0x40010400

08004f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f023 0210 	bic.w	r2, r3, #16
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4b2e      	ldr	r3, [pc, #184]	; (8005040 <TIM_OC2_SetConfig+0xe4>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	021b      	lsls	r3, r3, #8
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f023 0320 	bic.w	r3, r3, #32
 8004fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a23      	ldr	r2, [pc, #140]	; (8005044 <TIM_OC2_SetConfig+0xe8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d003      	beq.n	8004fc4 <TIM_OC2_SetConfig+0x68>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a22      	ldr	r2, [pc, #136]	; (8005048 <TIM_OC2_SetConfig+0xec>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d10d      	bne.n	8004fe0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a18      	ldr	r2, [pc, #96]	; (8005044 <TIM_OC2_SetConfig+0xe8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_OC2_SetConfig+0x94>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a17      	ldr	r2, [pc, #92]	; (8005048 <TIM_OC2_SetConfig+0xec>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d113      	bne.n	8005018 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ff6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	621a      	str	r2, [r3, #32]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	feff8fff 	.word	0xfeff8fff
 8005044:	40010000 	.word	0x40010000
 8005048:	40010400 	.word	0x40010400

0800504c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4b2d      	ldr	r3, [pc, #180]	; (800512c <TIM_OC3_SetConfig+0xe0>)
 8005078:	4013      	ands	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0303 	bic.w	r3, r3, #3
 8005082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a22      	ldr	r2, [pc, #136]	; (8005130 <TIM_OC3_SetConfig+0xe4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d003      	beq.n	80050b2 <TIM_OC3_SetConfig+0x66>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a21      	ldr	r2, [pc, #132]	; (8005134 <TIM_OC3_SetConfig+0xe8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d10d      	bne.n	80050ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a17      	ldr	r2, [pc, #92]	; (8005130 <TIM_OC3_SetConfig+0xe4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d003      	beq.n	80050de <TIM_OC3_SetConfig+0x92>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a16      	ldr	r2, [pc, #88]	; (8005134 <TIM_OC3_SetConfig+0xe8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d113      	bne.n	8005106 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	621a      	str	r2, [r3, #32]
}
 8005120:	bf00      	nop
 8005122:	371c      	adds	r7, #28
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	fffeff8f 	.word	0xfffeff8f
 8005130:	40010000 	.word	0x40010000
 8005134:	40010400 	.word	0x40010400

08005138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4b1e      	ldr	r3, [pc, #120]	; (80051dc <TIM_OC4_SetConfig+0xa4>)
 8005164:	4013      	ands	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800516e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	031b      	lsls	r3, r3, #12
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a13      	ldr	r2, [pc, #76]	; (80051e0 <TIM_OC4_SetConfig+0xa8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d003      	beq.n	80051a0 <TIM_OC4_SetConfig+0x68>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a12      	ldr	r2, [pc, #72]	; (80051e4 <TIM_OC4_SetConfig+0xac>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d109      	bne.n	80051b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	019b      	lsls	r3, r3, #6
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	621a      	str	r2, [r3, #32]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	feff8fff 	.word	0xfeff8fff
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40010400 	.word	0x40010400

080051e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4b1b      	ldr	r3, [pc, #108]	; (8005280 <TIM_OC5_SetConfig+0x98>)
 8005214:	4013      	ands	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005228:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	041b      	lsls	r3, r3, #16
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a12      	ldr	r2, [pc, #72]	; (8005284 <TIM_OC5_SetConfig+0x9c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d003      	beq.n	8005246 <TIM_OC5_SetConfig+0x5e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a11      	ldr	r2, [pc, #68]	; (8005288 <TIM_OC5_SetConfig+0xa0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d109      	bne.n	800525a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	621a      	str	r2, [r3, #32]
}
 8005274:	bf00      	nop
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	fffeff8f 	.word	0xfffeff8f
 8005284:	40010000 	.word	0x40010000
 8005288:	40010400 	.word	0x40010400

0800528c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4b1c      	ldr	r3, [pc, #112]	; (8005328 <TIM_OC6_SetConfig+0x9c>)
 80052b8:	4013      	ands	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	051b      	lsls	r3, r3, #20
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a13      	ldr	r2, [pc, #76]	; (800532c <TIM_OC6_SetConfig+0xa0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d003      	beq.n	80052ec <TIM_OC6_SetConfig+0x60>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a12      	ldr	r2, [pc, #72]	; (8005330 <TIM_OC6_SetConfig+0xa4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d109      	bne.n	8005300 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	029b      	lsls	r3, r3, #10
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	621a      	str	r2, [r3, #32]
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	feff8fff 	.word	0xfeff8fff
 800532c:	40010000 	.word	0x40010000
 8005330:	40010400 	.word	0x40010400

08005334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005348:	2302      	movs	r3, #2
 800534a:	e06d      	b.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a30      	ldr	r2, [pc, #192]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a2f      	ldr	r2, [pc, #188]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d108      	bne.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005386:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005398:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a20      	ldr	r2, [pc, #128]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d022      	beq.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053be:	d01d      	beq.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a1d      	ldr	r2, [pc, #116]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d018      	beq.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1c      	ldr	r2, [pc, #112]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d013      	beq.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1a      	ldr	r2, [pc, #104]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00e      	beq.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a15      	ldr	r2, [pc, #84]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d009      	beq.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a16      	ldr	r2, [pc, #88]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d004      	beq.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a15      	ldr	r2, [pc, #84]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d10c      	bne.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005402:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	4313      	orrs	r3, r2
 800540c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	40010000 	.word	0x40010000
 8005438:	40010400 	.word	0x40010400
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40014000 	.word	0x40014000
 800544c:	40001800 	.word	0x40001800

08005450 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e040      	b.n	8005520 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d106      	bne.n	80054b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fc fa68 	bl	8001984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2224      	movs	r2, #36	; 0x24
 80054b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fb82 	bl	8005bd4 <UART_SetConfig>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e022      	b.n	8005520 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fdda 	bl	800609c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fe61 	bl	80061e0 <UART_CheckIdleState>
 800551e:	4603      	mov	r3, r0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	4613      	mov	r3, r2
 8005534:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800553c:	2b20      	cmp	r3, #32
 800553e:	d132      	bne.n	80055a6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <HAL_UART_Receive_IT+0x24>
 8005546:	88fb      	ldrh	r3, [r7, #6]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e02b      	b.n	80055a8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d018      	beq.n	8005596 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	613b      	str	r3, [r7, #16]
   return(result);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	623b      	str	r3, [r7, #32]
 8005584:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	69f9      	ldr	r1, [r7, #28]
 8005588:	6a3a      	ldr	r2, [r7, #32]
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e6      	bne.n	8005564 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005596:	88fb      	ldrh	r3, [r7, #6]
 8005598:	461a      	mov	r2, r3
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 ff33 	bl	8006408 <UART_Start_Receive_IT>
 80055a2:	4603      	mov	r3, r0
 80055a4:	e000      	b.n	80055a8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80055a6:	2302      	movs	r3, #2
  }
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3728      	adds	r7, #40	; 0x28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b0ba      	sub	sp, #232	; 0xe8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80055da:	f640 030f 	movw	r3, #2063	; 0x80f
 80055de:	4013      	ands	r3, r2
 80055e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80055e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d115      	bne.n	8005618 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00f      	beq.n	8005618 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b00      	cmp	r3, #0
 8005602:	d009      	beq.n	8005618 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 82ac 	beq.w	8005b66 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
      }
      return;
 8005616:	e2a6      	b.n	8005b66 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8117 	beq.w	8005850 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800562e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005632:	4b85      	ldr	r3, [pc, #532]	; (8005848 <HAL_UART_IRQHandler+0x298>)
 8005634:	4013      	ands	r3, r2
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 810a 	beq.w	8005850 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800563c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	d011      	beq.n	800566c <HAL_UART_IRQHandler+0xbc>
 8005648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800564c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00b      	beq.n	800566c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2201      	movs	r2, #1
 800565a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005662:	f043 0201 	orr.w	r2, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800566c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d011      	beq.n	800569c <HAL_UART_IRQHandler+0xec>
 8005678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00b      	beq.n	800569c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2202      	movs	r2, #2
 800568a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005692:	f043 0204 	orr.w	r2, r3, #4
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800569c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d011      	beq.n	80056cc <HAL_UART_IRQHandler+0x11c>
 80056a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00b      	beq.n	80056cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2204      	movs	r2, #4
 80056ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c2:	f043 0202 	orr.w	r2, r3, #2
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d0:	f003 0308 	and.w	r3, r3, #8
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d017      	beq.n	8005708 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d105      	bne.n	80056f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00b      	beq.n	8005708 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2208      	movs	r2, #8
 80056f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056fe:	f043 0208 	orr.w	r2, r3, #8
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800570c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005710:	2b00      	cmp	r3, #0
 8005712:	d012      	beq.n	800573a <HAL_UART_IRQHandler+0x18a>
 8005714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00c      	beq.n	800573a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005728:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005730:	f043 0220 	orr.w	r2, r3, #32
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 8212 	beq.w	8005b6a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00d      	beq.n	800576e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b00      	cmp	r3, #0
 800575c:	d007      	beq.n	800576e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005774:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d005      	beq.n	8005792 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800578a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800578e:	2b00      	cmp	r3, #0
 8005790:	d04f      	beq.n	8005832 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fefe 	bl	8006594 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a2:	2b40      	cmp	r3, #64	; 0x40
 80057a4:	d141      	bne.n	800582a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3308      	adds	r3, #8
 80057ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057b4:	e853 3f00 	ldrex	r3, [r3]
 80057b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3308      	adds	r3, #8
 80057ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1d9      	bne.n	80057a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d013      	beq.n	8005822 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057fe:	4a13      	ldr	r2, [pc, #76]	; (800584c <HAL_UART_IRQHandler+0x29c>)
 8005800:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005806:	4618      	mov	r0, r3
 8005808:	f7fc fc7c 	bl	8002104 <HAL_DMA_Abort_IT>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d017      	beq.n	8005842 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800581c:	4610      	mov	r0, r2
 800581e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005820:	e00f      	b.n	8005842 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f9b6 	bl	8005b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005828:	e00b      	b.n	8005842 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f9b2 	bl	8005b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005830:	e007      	b.n	8005842 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f9ae 	bl	8005b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005840:	e193      	b.n	8005b6a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005842:	bf00      	nop
    return;
 8005844:	e191      	b.n	8005b6a <HAL_UART_IRQHandler+0x5ba>
 8005846:	bf00      	nop
 8005848:	04000120 	.word	0x04000120
 800584c:	0800665d 	.word	0x0800665d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005854:	2b01      	cmp	r3, #1
 8005856:	f040 814c 	bne.w	8005af2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800585a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585e:	f003 0310 	and.w	r3, r3, #16
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 8145 	beq.w	8005af2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 813e 	beq.w	8005af2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2210      	movs	r2, #16
 800587c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	f040 80b6 	bne.w	80059fa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800589a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 8165 	beq.w	8005b6e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058ae:	429a      	cmp	r2, r3
 80058b0:	f080 815d 	bcs.w	8005b6e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058c8:	f000 8086 	beq.w	80059d8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058d8:	e853 3f00 	ldrex	r3, [r3]
 80058dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	461a      	mov	r2, r3
 80058f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005902:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800590e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1da      	bne.n	80058cc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3308      	adds	r3, #8
 800591c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005928:	f023 0301 	bic.w	r3, r3, #1
 800592c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3308      	adds	r3, #8
 8005936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800593a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800593e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005942:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005946:	e841 2300 	strex	r3, r2, [r1]
 800594a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800594c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1e1      	bne.n	8005916 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3308      	adds	r3, #8
 8005958:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800595c:	e853 3f00 	ldrex	r3, [r3]
 8005960:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3308      	adds	r3, #8
 8005972:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005976:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005978:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800597c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e3      	bne.n	8005952 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2220      	movs	r2, #32
 800598e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a8:	f023 0310 	bic.w	r3, r3, #16
 80059ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80059bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e4      	bne.n	8005998 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fc fb26 	bl	8002024 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f8d8 	bl	8005ba8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059f8:	e0b9      	b.n	8005b6e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 80ab 	beq.w	8005b72 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 80a6 	beq.w	8005b72 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a48:	647b      	str	r3, [r7, #68]	; 0x44
 8005a4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e4      	bne.n	8005a26 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3308      	adds	r3, #8
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	623b      	str	r3, [r7, #32]
   return(result);
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	f023 0301 	bic.w	r3, r3, #1
 8005a72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a80:	633a      	str	r2, [r7, #48]	; 0x30
 8005a82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e3      	bne.n	8005a5c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f023 0310 	bic.w	r3, r3, #16
 8005abc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005aca:	61fb      	str	r3, [r7, #28]
 8005acc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	69b9      	ldr	r1, [r7, #24]
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e4      	bne.n	8005aa8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f85c 	bl	8005ba8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005af0:	e03f      	b.n	8005b72 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00e      	beq.n	8005b1c <HAL_UART_IRQHandler+0x56c>
 8005afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d008      	beq.n	8005b1c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f853 	bl	8005bc0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b1a:	e02d      	b.n	8005b78 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00e      	beq.n	8005b46 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d008      	beq.n	8005b46 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d01c      	beq.n	8005b76 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	4798      	blx	r3
    }
    return;
 8005b44:	e017      	b.n	8005b76 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d012      	beq.n	8005b78 <HAL_UART_IRQHandler+0x5c8>
 8005b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00c      	beq.n	8005b78 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fd92 	bl	8006688 <UART_EndTransmit_IT>
    return;
 8005b64:	e008      	b.n	8005b78 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b66:	bf00      	nop
 8005b68:	e006      	b.n	8005b78 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005b6a:	bf00      	nop
 8005b6c:	e004      	b.n	8005b78 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b6e:	bf00      	nop
 8005b70:	e002      	b.n	8005b78 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b72:	bf00      	nop
 8005b74:	e000      	b.n	8005b78 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005b76:	bf00      	nop
  }

}
 8005b78:	37e8      	adds	r7, #232	; 0xe8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop

08005b80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	4ba6      	ldr	r3, [pc, #664]	; (8005e98 <UART_SetConfig+0x2c4>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6812      	ldr	r2, [r2, #0]
 8005c06:	6979      	ldr	r1, [r7, #20]
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a94      	ldr	r2, [pc, #592]	; (8005e9c <UART_SetConfig+0x2c8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d120      	bne.n	8005c92 <UART_SetConfig+0xbe>
 8005c50:	4b93      	ldr	r3, [pc, #588]	; (8005ea0 <UART_SetConfig+0x2cc>)
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d816      	bhi.n	8005c8c <UART_SetConfig+0xb8>
 8005c5e:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <UART_SetConfig+0x90>)
 8005c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c64:	08005c75 	.word	0x08005c75
 8005c68:	08005c81 	.word	0x08005c81
 8005c6c:	08005c7b 	.word	0x08005c7b
 8005c70:	08005c87 	.word	0x08005c87
 8005c74:	2301      	movs	r3, #1
 8005c76:	77fb      	strb	r3, [r7, #31]
 8005c78:	e150      	b.n	8005f1c <UART_SetConfig+0x348>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	77fb      	strb	r3, [r7, #31]
 8005c7e:	e14d      	b.n	8005f1c <UART_SetConfig+0x348>
 8005c80:	2304      	movs	r3, #4
 8005c82:	77fb      	strb	r3, [r7, #31]
 8005c84:	e14a      	b.n	8005f1c <UART_SetConfig+0x348>
 8005c86:	2308      	movs	r3, #8
 8005c88:	77fb      	strb	r3, [r7, #31]
 8005c8a:	e147      	b.n	8005f1c <UART_SetConfig+0x348>
 8005c8c:	2310      	movs	r3, #16
 8005c8e:	77fb      	strb	r3, [r7, #31]
 8005c90:	e144      	b.n	8005f1c <UART_SetConfig+0x348>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a83      	ldr	r2, [pc, #524]	; (8005ea4 <UART_SetConfig+0x2d0>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d132      	bne.n	8005d02 <UART_SetConfig+0x12e>
 8005c9c:	4b80      	ldr	r3, [pc, #512]	; (8005ea0 <UART_SetConfig+0x2cc>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca2:	f003 030c 	and.w	r3, r3, #12
 8005ca6:	2b0c      	cmp	r3, #12
 8005ca8:	d828      	bhi.n	8005cfc <UART_SetConfig+0x128>
 8005caa:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <UART_SetConfig+0xdc>)
 8005cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb0:	08005ce5 	.word	0x08005ce5
 8005cb4:	08005cfd 	.word	0x08005cfd
 8005cb8:	08005cfd 	.word	0x08005cfd
 8005cbc:	08005cfd 	.word	0x08005cfd
 8005cc0:	08005cf1 	.word	0x08005cf1
 8005cc4:	08005cfd 	.word	0x08005cfd
 8005cc8:	08005cfd 	.word	0x08005cfd
 8005ccc:	08005cfd 	.word	0x08005cfd
 8005cd0:	08005ceb 	.word	0x08005ceb
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005cfd 	.word	0x08005cfd
 8005cdc:	08005cfd 	.word	0x08005cfd
 8005ce0:	08005cf7 	.word	0x08005cf7
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	77fb      	strb	r3, [r7, #31]
 8005ce8:	e118      	b.n	8005f1c <UART_SetConfig+0x348>
 8005cea:	2302      	movs	r3, #2
 8005cec:	77fb      	strb	r3, [r7, #31]
 8005cee:	e115      	b.n	8005f1c <UART_SetConfig+0x348>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	77fb      	strb	r3, [r7, #31]
 8005cf4:	e112      	b.n	8005f1c <UART_SetConfig+0x348>
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	77fb      	strb	r3, [r7, #31]
 8005cfa:	e10f      	b.n	8005f1c <UART_SetConfig+0x348>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e10c      	b.n	8005f1c <UART_SetConfig+0x348>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a68      	ldr	r2, [pc, #416]	; (8005ea8 <UART_SetConfig+0x2d4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d120      	bne.n	8005d4e <UART_SetConfig+0x17a>
 8005d0c:	4b64      	ldr	r3, [pc, #400]	; (8005ea0 <UART_SetConfig+0x2cc>)
 8005d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d16:	2b30      	cmp	r3, #48	; 0x30
 8005d18:	d013      	beq.n	8005d42 <UART_SetConfig+0x16e>
 8005d1a:	2b30      	cmp	r3, #48	; 0x30
 8005d1c:	d814      	bhi.n	8005d48 <UART_SetConfig+0x174>
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d009      	beq.n	8005d36 <UART_SetConfig+0x162>
 8005d22:	2b20      	cmp	r3, #32
 8005d24:	d810      	bhi.n	8005d48 <UART_SetConfig+0x174>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <UART_SetConfig+0x15c>
 8005d2a:	2b10      	cmp	r3, #16
 8005d2c:	d006      	beq.n	8005d3c <UART_SetConfig+0x168>
 8005d2e:	e00b      	b.n	8005d48 <UART_SetConfig+0x174>
 8005d30:	2300      	movs	r3, #0
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	e0f2      	b.n	8005f1c <UART_SetConfig+0x348>
 8005d36:	2302      	movs	r3, #2
 8005d38:	77fb      	strb	r3, [r7, #31]
 8005d3a:	e0ef      	b.n	8005f1c <UART_SetConfig+0x348>
 8005d3c:	2304      	movs	r3, #4
 8005d3e:	77fb      	strb	r3, [r7, #31]
 8005d40:	e0ec      	b.n	8005f1c <UART_SetConfig+0x348>
 8005d42:	2308      	movs	r3, #8
 8005d44:	77fb      	strb	r3, [r7, #31]
 8005d46:	e0e9      	b.n	8005f1c <UART_SetConfig+0x348>
 8005d48:	2310      	movs	r3, #16
 8005d4a:	77fb      	strb	r3, [r7, #31]
 8005d4c:	e0e6      	b.n	8005f1c <UART_SetConfig+0x348>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a56      	ldr	r2, [pc, #344]	; (8005eac <UART_SetConfig+0x2d8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d120      	bne.n	8005d9a <UART_SetConfig+0x1c6>
 8005d58:	4b51      	ldr	r3, [pc, #324]	; (8005ea0 <UART_SetConfig+0x2cc>)
 8005d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d62:	2bc0      	cmp	r3, #192	; 0xc0
 8005d64:	d013      	beq.n	8005d8e <UART_SetConfig+0x1ba>
 8005d66:	2bc0      	cmp	r3, #192	; 0xc0
 8005d68:	d814      	bhi.n	8005d94 <UART_SetConfig+0x1c0>
 8005d6a:	2b80      	cmp	r3, #128	; 0x80
 8005d6c:	d009      	beq.n	8005d82 <UART_SetConfig+0x1ae>
 8005d6e:	2b80      	cmp	r3, #128	; 0x80
 8005d70:	d810      	bhi.n	8005d94 <UART_SetConfig+0x1c0>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <UART_SetConfig+0x1a8>
 8005d76:	2b40      	cmp	r3, #64	; 0x40
 8005d78:	d006      	beq.n	8005d88 <UART_SetConfig+0x1b4>
 8005d7a:	e00b      	b.n	8005d94 <UART_SetConfig+0x1c0>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	77fb      	strb	r3, [r7, #31]
 8005d80:	e0cc      	b.n	8005f1c <UART_SetConfig+0x348>
 8005d82:	2302      	movs	r3, #2
 8005d84:	77fb      	strb	r3, [r7, #31]
 8005d86:	e0c9      	b.n	8005f1c <UART_SetConfig+0x348>
 8005d88:	2304      	movs	r3, #4
 8005d8a:	77fb      	strb	r3, [r7, #31]
 8005d8c:	e0c6      	b.n	8005f1c <UART_SetConfig+0x348>
 8005d8e:	2308      	movs	r3, #8
 8005d90:	77fb      	strb	r3, [r7, #31]
 8005d92:	e0c3      	b.n	8005f1c <UART_SetConfig+0x348>
 8005d94:	2310      	movs	r3, #16
 8005d96:	77fb      	strb	r3, [r7, #31]
 8005d98:	e0c0      	b.n	8005f1c <UART_SetConfig+0x348>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a44      	ldr	r2, [pc, #272]	; (8005eb0 <UART_SetConfig+0x2dc>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d125      	bne.n	8005df0 <UART_SetConfig+0x21c>
 8005da4:	4b3e      	ldr	r3, [pc, #248]	; (8005ea0 <UART_SetConfig+0x2cc>)
 8005da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005db2:	d017      	beq.n	8005de4 <UART_SetConfig+0x210>
 8005db4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005db8:	d817      	bhi.n	8005dea <UART_SetConfig+0x216>
 8005dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dbe:	d00b      	beq.n	8005dd8 <UART_SetConfig+0x204>
 8005dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc4:	d811      	bhi.n	8005dea <UART_SetConfig+0x216>
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <UART_SetConfig+0x1fe>
 8005dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dce:	d006      	beq.n	8005dde <UART_SetConfig+0x20a>
 8005dd0:	e00b      	b.n	8005dea <UART_SetConfig+0x216>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	77fb      	strb	r3, [r7, #31]
 8005dd6:	e0a1      	b.n	8005f1c <UART_SetConfig+0x348>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	77fb      	strb	r3, [r7, #31]
 8005ddc:	e09e      	b.n	8005f1c <UART_SetConfig+0x348>
 8005dde:	2304      	movs	r3, #4
 8005de0:	77fb      	strb	r3, [r7, #31]
 8005de2:	e09b      	b.n	8005f1c <UART_SetConfig+0x348>
 8005de4:	2308      	movs	r3, #8
 8005de6:	77fb      	strb	r3, [r7, #31]
 8005de8:	e098      	b.n	8005f1c <UART_SetConfig+0x348>
 8005dea:	2310      	movs	r3, #16
 8005dec:	77fb      	strb	r3, [r7, #31]
 8005dee:	e095      	b.n	8005f1c <UART_SetConfig+0x348>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a2f      	ldr	r2, [pc, #188]	; (8005eb4 <UART_SetConfig+0x2e0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d125      	bne.n	8005e46 <UART_SetConfig+0x272>
 8005dfa:	4b29      	ldr	r3, [pc, #164]	; (8005ea0 <UART_SetConfig+0x2cc>)
 8005dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e08:	d017      	beq.n	8005e3a <UART_SetConfig+0x266>
 8005e0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e0e:	d817      	bhi.n	8005e40 <UART_SetConfig+0x26c>
 8005e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e14:	d00b      	beq.n	8005e2e <UART_SetConfig+0x25a>
 8005e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e1a:	d811      	bhi.n	8005e40 <UART_SetConfig+0x26c>
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <UART_SetConfig+0x254>
 8005e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e24:	d006      	beq.n	8005e34 <UART_SetConfig+0x260>
 8005e26:	e00b      	b.n	8005e40 <UART_SetConfig+0x26c>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	77fb      	strb	r3, [r7, #31]
 8005e2c:	e076      	b.n	8005f1c <UART_SetConfig+0x348>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	77fb      	strb	r3, [r7, #31]
 8005e32:	e073      	b.n	8005f1c <UART_SetConfig+0x348>
 8005e34:	2304      	movs	r3, #4
 8005e36:	77fb      	strb	r3, [r7, #31]
 8005e38:	e070      	b.n	8005f1c <UART_SetConfig+0x348>
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	77fb      	strb	r3, [r7, #31]
 8005e3e:	e06d      	b.n	8005f1c <UART_SetConfig+0x348>
 8005e40:	2310      	movs	r3, #16
 8005e42:	77fb      	strb	r3, [r7, #31]
 8005e44:	e06a      	b.n	8005f1c <UART_SetConfig+0x348>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1b      	ldr	r2, [pc, #108]	; (8005eb8 <UART_SetConfig+0x2e4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d138      	bne.n	8005ec2 <UART_SetConfig+0x2ee>
 8005e50:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <UART_SetConfig+0x2cc>)
 8005e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e5e:	d017      	beq.n	8005e90 <UART_SetConfig+0x2bc>
 8005e60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e64:	d82a      	bhi.n	8005ebc <UART_SetConfig+0x2e8>
 8005e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e6a:	d00b      	beq.n	8005e84 <UART_SetConfig+0x2b0>
 8005e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e70:	d824      	bhi.n	8005ebc <UART_SetConfig+0x2e8>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <UART_SetConfig+0x2aa>
 8005e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7a:	d006      	beq.n	8005e8a <UART_SetConfig+0x2b6>
 8005e7c:	e01e      	b.n	8005ebc <UART_SetConfig+0x2e8>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	77fb      	strb	r3, [r7, #31]
 8005e82:	e04b      	b.n	8005f1c <UART_SetConfig+0x348>
 8005e84:	2302      	movs	r3, #2
 8005e86:	77fb      	strb	r3, [r7, #31]
 8005e88:	e048      	b.n	8005f1c <UART_SetConfig+0x348>
 8005e8a:	2304      	movs	r3, #4
 8005e8c:	77fb      	strb	r3, [r7, #31]
 8005e8e:	e045      	b.n	8005f1c <UART_SetConfig+0x348>
 8005e90:	2308      	movs	r3, #8
 8005e92:	77fb      	strb	r3, [r7, #31]
 8005e94:	e042      	b.n	8005f1c <UART_SetConfig+0x348>
 8005e96:	bf00      	nop
 8005e98:	efff69f3 	.word	0xefff69f3
 8005e9c:	40011000 	.word	0x40011000
 8005ea0:	40023800 	.word	0x40023800
 8005ea4:	40004400 	.word	0x40004400
 8005ea8:	40004800 	.word	0x40004800
 8005eac:	40004c00 	.word	0x40004c00
 8005eb0:	40005000 	.word	0x40005000
 8005eb4:	40011400 	.word	0x40011400
 8005eb8:	40007800 	.word	0x40007800
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	77fb      	strb	r3, [r7, #31]
 8005ec0:	e02c      	b.n	8005f1c <UART_SetConfig+0x348>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a72      	ldr	r2, [pc, #456]	; (8006090 <UART_SetConfig+0x4bc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d125      	bne.n	8005f18 <UART_SetConfig+0x344>
 8005ecc:	4b71      	ldr	r3, [pc, #452]	; (8006094 <UART_SetConfig+0x4c0>)
 8005ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ed6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005eda:	d017      	beq.n	8005f0c <UART_SetConfig+0x338>
 8005edc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ee0:	d817      	bhi.n	8005f12 <UART_SetConfig+0x33e>
 8005ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee6:	d00b      	beq.n	8005f00 <UART_SetConfig+0x32c>
 8005ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eec:	d811      	bhi.n	8005f12 <UART_SetConfig+0x33e>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <UART_SetConfig+0x326>
 8005ef2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ef6:	d006      	beq.n	8005f06 <UART_SetConfig+0x332>
 8005ef8:	e00b      	b.n	8005f12 <UART_SetConfig+0x33e>
 8005efa:	2300      	movs	r3, #0
 8005efc:	77fb      	strb	r3, [r7, #31]
 8005efe:	e00d      	b.n	8005f1c <UART_SetConfig+0x348>
 8005f00:	2302      	movs	r3, #2
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e00a      	b.n	8005f1c <UART_SetConfig+0x348>
 8005f06:	2304      	movs	r3, #4
 8005f08:	77fb      	strb	r3, [r7, #31]
 8005f0a:	e007      	b.n	8005f1c <UART_SetConfig+0x348>
 8005f0c:	2308      	movs	r3, #8
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e004      	b.n	8005f1c <UART_SetConfig+0x348>
 8005f12:	2310      	movs	r3, #16
 8005f14:	77fb      	strb	r3, [r7, #31]
 8005f16:	e001      	b.n	8005f1c <UART_SetConfig+0x348>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f24:	d15b      	bne.n	8005fde <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f26:	7ffb      	ldrb	r3, [r7, #31]
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d828      	bhi.n	8005f7e <UART_SetConfig+0x3aa>
 8005f2c:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <UART_SetConfig+0x360>)
 8005f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f32:	bf00      	nop
 8005f34:	08005f59 	.word	0x08005f59
 8005f38:	08005f61 	.word	0x08005f61
 8005f3c:	08005f69 	.word	0x08005f69
 8005f40:	08005f7f 	.word	0x08005f7f
 8005f44:	08005f6f 	.word	0x08005f6f
 8005f48:	08005f7f 	.word	0x08005f7f
 8005f4c:	08005f7f 	.word	0x08005f7f
 8005f50:	08005f7f 	.word	0x08005f7f
 8005f54:	08005f77 	.word	0x08005f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f58:	f7fd fe36 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8005f5c:	61b8      	str	r0, [r7, #24]
        break;
 8005f5e:	e013      	b.n	8005f88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f60:	f7fd fe46 	bl	8003bf0 <HAL_RCC_GetPCLK2Freq>
 8005f64:	61b8      	str	r0, [r7, #24]
        break;
 8005f66:	e00f      	b.n	8005f88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f68:	4b4b      	ldr	r3, [pc, #300]	; (8006098 <UART_SetConfig+0x4c4>)
 8005f6a:	61bb      	str	r3, [r7, #24]
        break;
 8005f6c:	e00c      	b.n	8005f88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f6e:	f7fd fd59 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 8005f72:	61b8      	str	r0, [r7, #24]
        break;
 8005f74:	e008      	b.n	8005f88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f7a:	61bb      	str	r3, [r7, #24]
        break;
 8005f7c:	e004      	b.n	8005f88 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	77bb      	strb	r3, [r7, #30]
        break;
 8005f86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d074      	beq.n	8006078 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	005a      	lsls	r2, r3, #1
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	085b      	lsrs	r3, r3, #1
 8005f98:	441a      	add	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	2b0f      	cmp	r3, #15
 8005fa8:	d916      	bls.n	8005fd8 <UART_SetConfig+0x404>
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb0:	d212      	bcs.n	8005fd8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	f023 030f 	bic.w	r3, r3, #15
 8005fba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	085b      	lsrs	r3, r3, #1
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	89fb      	ldrh	r3, [r7, #14]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	89fa      	ldrh	r2, [r7, #14]
 8005fd4:	60da      	str	r2, [r3, #12]
 8005fd6:	e04f      	b.n	8006078 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	77bb      	strb	r3, [r7, #30]
 8005fdc:	e04c      	b.n	8006078 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fde:	7ffb      	ldrb	r3, [r7, #31]
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d828      	bhi.n	8006036 <UART_SetConfig+0x462>
 8005fe4:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <UART_SetConfig+0x418>)
 8005fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fea:	bf00      	nop
 8005fec:	08006011 	.word	0x08006011
 8005ff0:	08006019 	.word	0x08006019
 8005ff4:	08006021 	.word	0x08006021
 8005ff8:	08006037 	.word	0x08006037
 8005ffc:	08006027 	.word	0x08006027
 8006000:	08006037 	.word	0x08006037
 8006004:	08006037 	.word	0x08006037
 8006008:	08006037 	.word	0x08006037
 800600c:	0800602f 	.word	0x0800602f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006010:	f7fd fdda 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8006014:	61b8      	str	r0, [r7, #24]
        break;
 8006016:	e013      	b.n	8006040 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006018:	f7fd fdea 	bl	8003bf0 <HAL_RCC_GetPCLK2Freq>
 800601c:	61b8      	str	r0, [r7, #24]
        break;
 800601e:	e00f      	b.n	8006040 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006020:	4b1d      	ldr	r3, [pc, #116]	; (8006098 <UART_SetConfig+0x4c4>)
 8006022:	61bb      	str	r3, [r7, #24]
        break;
 8006024:	e00c      	b.n	8006040 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006026:	f7fd fcfd 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 800602a:	61b8      	str	r0, [r7, #24]
        break;
 800602c:	e008      	b.n	8006040 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800602e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006032:	61bb      	str	r3, [r7, #24]
        break;
 8006034:	e004      	b.n	8006040 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	77bb      	strb	r3, [r7, #30]
        break;
 800603e:	bf00      	nop
    }

    if (pclk != 0U)
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d018      	beq.n	8006078 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	085a      	lsrs	r2, r3, #1
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	441a      	add	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	fbb2 f3f3 	udiv	r3, r2, r3
 8006058:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	2b0f      	cmp	r3, #15
 800605e:	d909      	bls.n	8006074 <UART_SetConfig+0x4a0>
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006066:	d205      	bcs.n	8006074 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	b29a      	uxth	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	60da      	str	r2, [r3, #12]
 8006072:	e001      	b.n	8006078 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006084:	7fbb      	ldrb	r3, [r7, #30]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3720      	adds	r7, #32
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	40007c00 	.word	0x40007c00
 8006094:	40023800 	.word	0x40023800
 8006098:	00f42400 	.word	0x00f42400

0800609c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	f003 0308 	and.w	r3, r3, #8
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	f003 0310 	and.w	r3, r3, #16
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01a      	beq.n	80061b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800619a:	d10a      	bne.n	80061b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	605a      	str	r2, [r3, #4]
  }
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061f0:	f7fb fc78 	bl	8001ae4 <HAL_GetTick>
 80061f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0308 	and.w	r3, r3, #8
 8006200:	2b08      	cmp	r3, #8
 8006202:	d10e      	bne.n	8006222 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f831 	bl	800627a <UART_WaitOnFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e027      	b.n	8006272 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b04      	cmp	r3, #4
 800622e:	d10e      	bne.n	800624e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f81b 	bl	800627a <UART_WaitOnFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e011      	b.n	8006272 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b09c      	sub	sp, #112	; 0x70
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	603b      	str	r3, [r7, #0]
 8006286:	4613      	mov	r3, r2
 8006288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800628a:	e0a7      	b.n	80063dc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006292:	f000 80a3 	beq.w	80063dc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006296:	f7fb fc25 	bl	8001ae4 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d302      	bcc.n	80062ac <UART_WaitOnFlagUntilTimeout+0x32>
 80062a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d13f      	bne.n	800632c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062c0:	667b      	str	r3, [r7, #100]	; 0x64
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1e6      	bne.n	80062ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3308      	adds	r3, #8
 80062e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f0:	f023 0301 	bic.w	r3, r3, #1
 80062f4:	663b      	str	r3, [r7, #96]	; 0x60
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	3308      	adds	r3, #8
 80062fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8006300:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006302:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006306:	e841 2300 	strex	r3, r2, [r1]
 800630a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800630c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1e5      	bne.n	80062de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2220      	movs	r2, #32
 8006316:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2220      	movs	r2, #32
 800631c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e068      	b.n	80063fe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	2b00      	cmp	r3, #0
 8006338:	d050      	beq.n	80063dc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006348:	d148      	bne.n	80063dc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006352:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	e853 3f00 	ldrex	r3, [r3]
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006368:	66fb      	str	r3, [r7, #108]	; 0x6c
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006372:	637b      	str	r3, [r7, #52]	; 0x34
 8006374:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1e6      	bne.n	8006354 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3308      	adds	r3, #8
 800638c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	613b      	str	r3, [r7, #16]
   return(result);
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f023 0301 	bic.w	r3, r3, #1
 800639c:	66bb      	str	r3, [r7, #104]	; 0x68
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3308      	adds	r3, #8
 80063a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063a6:	623a      	str	r2, [r7, #32]
 80063a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	69f9      	ldr	r1, [r7, #28]
 80063ac:	6a3a      	ldr	r2, [r7, #32]
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1e5      	bne.n	8006386 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2220      	movs	r2, #32
 80063be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e010      	b.n	80063fe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	69da      	ldr	r2, [r3, #28]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	4013      	ands	r3, r2
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	bf0c      	ite	eq
 80063ec:	2301      	moveq	r3, #1
 80063ee:	2300      	movne	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	79fb      	ldrb	r3, [r7, #7]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	f43f af48 	beq.w	800628c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3770      	adds	r7, #112	; 0x70
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006408:	b480      	push	{r7}
 800640a:	b097      	sub	sp, #92	; 0x5c
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	4613      	mov	r3, r2
 8006414:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	88fa      	ldrh	r2, [r7, #6]
 8006420:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	88fa      	ldrh	r2, [r7, #6]
 8006428:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643a:	d10e      	bne.n	800645a <UART_Start_Receive_IT+0x52>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d105      	bne.n	8006450 <UART_Start_Receive_IT+0x48>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f240 12ff 	movw	r2, #511	; 0x1ff
 800644a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800644e:	e02d      	b.n	80064ac <UART_Start_Receive_IT+0xa4>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	22ff      	movs	r2, #255	; 0xff
 8006454:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006458:	e028      	b.n	80064ac <UART_Start_Receive_IT+0xa4>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10d      	bne.n	800647e <UART_Start_Receive_IT+0x76>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d104      	bne.n	8006474 <UART_Start_Receive_IT+0x6c>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	22ff      	movs	r2, #255	; 0xff
 800646e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006472:	e01b      	b.n	80064ac <UART_Start_Receive_IT+0xa4>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	227f      	movs	r2, #127	; 0x7f
 8006478:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800647c:	e016      	b.n	80064ac <UART_Start_Receive_IT+0xa4>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006486:	d10d      	bne.n	80064a4 <UART_Start_Receive_IT+0x9c>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d104      	bne.n	800649a <UART_Start_Receive_IT+0x92>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	227f      	movs	r2, #127	; 0x7f
 8006494:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006498:	e008      	b.n	80064ac <UART_Start_Receive_IT+0xa4>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	223f      	movs	r2, #63	; 0x3f
 800649e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064a2:	e003      	b.n	80064ac <UART_Start_Receive_IT+0xa4>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2222      	movs	r2, #34	; 0x22
 80064b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3308      	adds	r3, #8
 80064c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c6:	e853 3f00 	ldrex	r3, [r3]
 80064ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ce:	f043 0301 	orr.w	r3, r3, #1
 80064d2:	657b      	str	r3, [r7, #84]	; 0x54
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3308      	adds	r3, #8
 80064da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80064de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e5      	bne.n	80064bc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f8:	d107      	bne.n	800650a <UART_Start_Receive_IT+0x102>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d103      	bne.n	800650a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4a21      	ldr	r2, [pc, #132]	; (800658c <UART_Start_Receive_IT+0x184>)
 8006506:	669a      	str	r2, [r3, #104]	; 0x68
 8006508:	e002      	b.n	8006510 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4a20      	ldr	r2, [pc, #128]	; (8006590 <UART_Start_Receive_IT+0x188>)
 800650e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d019      	beq.n	800654c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800652c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006536:	637b      	str	r3, [r7, #52]	; 0x34
 8006538:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800653c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1e6      	bne.n	8006518 <UART_Start_Receive_IT+0x110>
 800654a:	e018      	b.n	800657e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	613b      	str	r3, [r7, #16]
   return(result);
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f043 0320 	orr.w	r3, r3, #32
 8006560:	653b      	str	r3, [r7, #80]	; 0x50
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800656a:	623b      	str	r3, [r7, #32]
 800656c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	69f9      	ldr	r1, [r7, #28]
 8006570:	6a3a      	ldr	r2, [r7, #32]
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	61bb      	str	r3, [r7, #24]
   return(result);
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e6      	bne.n	800654c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	375c      	adds	r7, #92	; 0x5c
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	08006843 	.word	0x08006843
 8006590:	080066dd 	.word	0x080066dd

08006594 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b095      	sub	sp, #84	; 0x54
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ba:	643b      	str	r3, [r7, #64]	; 0x40
 80065bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e6      	bne.n	800659c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3308      	adds	r3, #8
 80065d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	f023 0301 	bic.w	r3, r3, #1
 80065e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3308      	adds	r3, #8
 80065ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e5      	bne.n	80065ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006606:	2b01      	cmp	r3, #1
 8006608:	d118      	bne.n	800663c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	60bb      	str	r3, [r7, #8]
   return(result);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f023 0310 	bic.w	r3, r3, #16
 800661e:	647b      	str	r3, [r7, #68]	; 0x44
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	461a      	mov	r2, r3
 8006626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006628:	61bb      	str	r3, [r7, #24]
 800662a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	6979      	ldr	r1, [r7, #20]
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	e841 2300 	strex	r3, r2, [r1]
 8006634:	613b      	str	r3, [r7, #16]
   return(result);
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e6      	bne.n	800660a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2220      	movs	r2, #32
 8006640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006650:	bf00      	nop
 8006652:	3754      	adds	r7, #84	; 0x54
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f7ff fa8a 	bl	8005b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006680:	bf00      	nop
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b088      	sub	sp, #32
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	60bb      	str	r3, [r7, #8]
   return(result);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a4:	61fb      	str	r3, [r7, #28]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b2:	6979      	ldr	r1, [r7, #20]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	613b      	str	r3, [r7, #16]
   return(result);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e6      	bne.n	8006690 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff fa56 	bl	8005b80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066d4:	bf00      	nop
 80066d6:	3720      	adds	r7, #32
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b096      	sub	sp, #88	; 0x58
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80066ea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f4:	2b22      	cmp	r3, #34	; 0x22
 80066f6:	f040 8098 	bne.w	800682a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006704:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006708:	b2d9      	uxtb	r1, r3
 800670a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800670e:	b2da      	uxtb	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006714:	400a      	ands	r2, r1
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800672a:	b29b      	uxth	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800673c:	b29b      	uxth	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d17b      	bne.n	800683a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006752:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006756:	653b      	str	r3, [r7, #80]	; 0x50
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006760:	647b      	str	r3, [r7, #68]	; 0x44
 8006762:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800676e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e6      	bne.n	8006742 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3308      	adds	r3, #8
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	623b      	str	r3, [r7, #32]
   return(result);
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	f023 0301 	bic.w	r3, r3, #1
 800678a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3308      	adds	r3, #8
 8006792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006794:	633a      	str	r2, [r7, #48]	; 0x30
 8006796:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800679a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e5      	bne.n	8006774 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d12e      	bne.n	8006822 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0310 	bic.w	r3, r3, #16
 80067de:	64bb      	str	r3, [r7, #72]	; 0x48
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e8:	61fb      	str	r3, [r7, #28]
 80067ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	69b9      	ldr	r1, [r7, #24]
 80067ee:	69fa      	ldr	r2, [r7, #28]
 80067f0:	e841 2300 	strex	r3, r2, [r1]
 80067f4:	617b      	str	r3, [r7, #20]
   return(result);
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e6      	bne.n	80067ca <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	f003 0310 	and.w	r3, r3, #16
 8006806:	2b10      	cmp	r3, #16
 8006808:	d103      	bne.n	8006812 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2210      	movs	r2, #16
 8006810:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff f9c4 	bl	8005ba8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006820:	e00b      	b.n	800683a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7fa fb9a 	bl	8000f5c <HAL_UART_RxCpltCallback>
}
 8006828:	e007      	b.n	800683a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	699a      	ldr	r2, [r3, #24]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f042 0208 	orr.w	r2, r2, #8
 8006838:	619a      	str	r2, [r3, #24]
}
 800683a:	bf00      	nop
 800683c:	3758      	adds	r7, #88	; 0x58
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b096      	sub	sp, #88	; 0x58
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006850:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800685a:	2b22      	cmp	r3, #34	; 0x22
 800685c:	f040 8098 	bne.w	8006990 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006870:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006874:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006878:	4013      	ands	r3, r2
 800687a:	b29a      	uxth	r2, r3
 800687c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800687e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006884:	1c9a      	adds	r2, r3, #2
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d17b      	bne.n	80069a0 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c6:	643b      	str	r3, [r7, #64]	; 0x40
 80068c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e6      	bne.n	80068a8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3308      	adds	r3, #8
 80068e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f023 0301 	bic.w	r3, r3, #1
 80068f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3308      	adds	r3, #8
 80068f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e5      	bne.n	80068da <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2220      	movs	r2, #32
 8006912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006926:	2b01      	cmp	r3, #1
 8006928:	d12e      	bne.n	8006988 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	60bb      	str	r3, [r7, #8]
   return(result);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f023 0310 	bic.w	r3, r3, #16
 8006944:	647b      	str	r3, [r7, #68]	; 0x44
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800694e:	61bb      	str	r3, [r7, #24]
 8006950:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6979      	ldr	r1, [r7, #20]
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	613b      	str	r3, [r7, #16]
   return(result);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e6      	bne.n	8006930 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	69db      	ldr	r3, [r3, #28]
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b10      	cmp	r3, #16
 800696e:	d103      	bne.n	8006978 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2210      	movs	r2, #16
 8006976:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800697e:	4619      	mov	r1, r3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff f911 	bl	8005ba8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006986:	e00b      	b.n	80069a0 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7fa fae7 	bl	8000f5c <HAL_UART_RxCpltCallback>
}
 800698e:	e007      	b.n	80069a0 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	699a      	ldr	r2, [r3, #24]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f042 0208 	orr.w	r2, r2, #8
 800699e:	619a      	str	r2, [r3, #24]
}
 80069a0:	bf00      	nop
 80069a2:	3758      	adds	r7, #88	; 0x58
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80069a8:	b480      	push	{r7}
 80069aa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80069ac:	bf00      	nop
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
	...

080069b8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069be:	f3ef 8305 	mrs	r3, IPSR
 80069c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80069c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10f      	bne.n	80069ea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ca:	f3ef 8310 	mrs	r3, PRIMASK
 80069ce:	607b      	str	r3, [r7, #4]
  return(result);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d105      	bne.n	80069e2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069d6:	f3ef 8311 	mrs	r3, BASEPRI
 80069da:	603b      	str	r3, [r7, #0]
  return(result);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d007      	beq.n	80069f2 <osKernelInitialize+0x3a>
 80069e2:	4b0e      	ldr	r3, [pc, #56]	; (8006a1c <osKernelInitialize+0x64>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d103      	bne.n	80069f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80069ea:	f06f 0305 	mvn.w	r3, #5
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	e00c      	b.n	8006a0c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80069f2:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <osKernelInitialize+0x64>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d105      	bne.n	8006a06 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80069fa:	4b08      	ldr	r3, [pc, #32]	; (8006a1c <osKernelInitialize+0x64>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e002      	b.n	8006a0c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006a06:	f04f 33ff 	mov.w	r3, #4294967295
 8006a0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	20000748 	.word	0x20000748

08006a20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a26:	f3ef 8305 	mrs	r3, IPSR
 8006a2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10f      	bne.n	8006a52 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a32:	f3ef 8310 	mrs	r3, PRIMASK
 8006a36:	607b      	str	r3, [r7, #4]
  return(result);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d105      	bne.n	8006a4a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a42:	603b      	str	r3, [r7, #0]
  return(result);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d007      	beq.n	8006a5a <osKernelStart+0x3a>
 8006a4a:	4b0f      	ldr	r3, [pc, #60]	; (8006a88 <osKernelStart+0x68>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d103      	bne.n	8006a5a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006a52:	f06f 0305 	mvn.w	r3, #5
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	e010      	b.n	8006a7c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a5a:	4b0b      	ldr	r3, [pc, #44]	; (8006a88 <osKernelStart+0x68>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d109      	bne.n	8006a76 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a62:	f7ff ffa1 	bl	80069a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a66:	4b08      	ldr	r3, [pc, #32]	; (8006a88 <osKernelStart+0x68>)
 8006a68:	2202      	movs	r2, #2
 8006a6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a6c:	f001 fa4c 	bl	8007f08 <vTaskStartScheduler>
      stat = osOK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	e002      	b.n	8006a7c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006a76:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20000748 	.word	0x20000748

08006a8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b090      	sub	sp, #64	; 0x40
 8006a90:	af04      	add	r7, sp, #16
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a9c:	f3ef 8305 	mrs	r3, IPSR
 8006aa0:	61fb      	str	r3, [r7, #28]
  return(result);
 8006aa2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f040 808f 	bne.w	8006bc8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8006aae:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d105      	bne.n	8006ac2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ab6:	f3ef 8311 	mrs	r3, BASEPRI
 8006aba:	617b      	str	r3, [r7, #20]
  return(result);
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <osThreadNew+0x3e>
 8006ac2:	4b44      	ldr	r3, [pc, #272]	; (8006bd4 <osThreadNew+0x148>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d07e      	beq.n	8006bc8 <osThreadNew+0x13c>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d07b      	beq.n	8006bc8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006ad0:	2380      	movs	r3, #128	; 0x80
 8006ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006ad4:	2318      	movs	r3, #24
 8006ad6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006adc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d045      	beq.n	8006b74 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <osThreadNew+0x6a>
        name = attr->name;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d008      	beq.n	8006b1c <osThreadNew+0x90>
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	2b38      	cmp	r3, #56	; 0x38
 8006b0e:	d805      	bhi.n	8006b1c <osThreadNew+0x90>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <osThreadNew+0x94>
        return (NULL);
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	e054      	b.n	8006bca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	089b      	lsrs	r3, r3, #2
 8006b2e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00e      	beq.n	8006b56 <osThreadNew+0xca>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	2ba7      	cmp	r3, #167	; 0xa7
 8006b3e:	d90a      	bls.n	8006b56 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d006      	beq.n	8006b56 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <osThreadNew+0xca>
        mem = 1;
 8006b50:	2301      	movs	r3, #1
 8006b52:	623b      	str	r3, [r7, #32]
 8006b54:	e010      	b.n	8006b78 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10c      	bne.n	8006b78 <osThreadNew+0xec>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d108      	bne.n	8006b78 <osThreadNew+0xec>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d104      	bne.n	8006b78 <osThreadNew+0xec>
          mem = 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	623b      	str	r3, [r7, #32]
 8006b72:	e001      	b.n	8006b78 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d110      	bne.n	8006ba0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b86:	9202      	str	r2, [sp, #8]
 8006b88:	9301      	str	r3, [sp, #4]
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 fe3f 	bl	8007818 <xTaskCreateStatic>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	613b      	str	r3, [r7, #16]
 8006b9e:	e013      	b.n	8006bc8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d110      	bne.n	8006bc8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	f107 0310 	add.w	r3, r7, #16
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 fe90 	bl	80078de <xTaskCreate>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d001      	beq.n	8006bc8 <osThreadNew+0x13c>
          hTask = NULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006bc8:	693b      	ldr	r3, [r7, #16]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3730      	adds	r7, #48	; 0x30
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20000748 	.word	0x20000748

08006bd8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006be0:	f3ef 8305 	mrs	r3, IPSR
 8006be4:	613b      	str	r3, [r7, #16]
  return(result);
 8006be6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10f      	bne.n	8006c0c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bec:	f3ef 8310 	mrs	r3, PRIMASK
 8006bf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d105      	bne.n	8006c04 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bf8:	f3ef 8311 	mrs	r3, BASEPRI
 8006bfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d007      	beq.n	8006c14 <osDelay+0x3c>
 8006c04:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <osDelay+0x58>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d103      	bne.n	8006c14 <osDelay+0x3c>
    stat = osErrorISR;
 8006c0c:	f06f 0305 	mvn.w	r3, #5
 8006c10:	617b      	str	r3, [r7, #20]
 8006c12:	e007      	b.n	8006c24 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 ffba 	bl	8007b98 <vTaskDelay>
    }
  }

  return (stat);
 8006c24:	697b      	ldr	r3, [r7, #20]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000748 	.word	0x20000748

08006c34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4a07      	ldr	r2, [pc, #28]	; (8006c60 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	4a06      	ldr	r2, [pc, #24]	; (8006c64 <vApplicationGetIdleTaskMemory+0x30>)
 8006c4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2280      	movs	r2, #128	; 0x80
 8006c50:	601a      	str	r2, [r3, #0]
}
 8006c52:	bf00      	nop
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	2000074c 	.word	0x2000074c
 8006c64:	200007f4 	.word	0x200007f4

08006c68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4a07      	ldr	r2, [pc, #28]	; (8006c94 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	4a06      	ldr	r2, [pc, #24]	; (8006c98 <vApplicationGetTimerTaskMemory+0x30>)
 8006c7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c86:	601a      	str	r2, [r3, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	200009f4 	.word	0x200009f4
 8006c98:	20000a9c 	.word	0x20000a9c

08006c9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f103 0208 	add.w	r2, r3, #8
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f103 0208 	add.w	r2, r3, #8
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f103 0208 	add.w	r2, r3, #8
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b085      	sub	sp, #20
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	601a      	str	r2, [r3, #0]
}
 8006d32:	bf00      	nop
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b085      	sub	sp, #20
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d54:	d103      	bne.n	8006d5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	e00c      	b.n	8006d78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3308      	adds	r3, #8
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	e002      	b.n	8006d6c <vListInsert+0x2e>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d2f6      	bcs.n	8006d66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	683a      	ldr	r2, [r7, #0]
 8006d92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	1c5a      	adds	r2, r3, #1
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	601a      	str	r2, [r3, #0]
}
 8006da4:	bf00      	nop
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6892      	ldr	r2, [r2, #8]
 8006dc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	6852      	ldr	r2, [r2, #4]
 8006dd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d103      	bne.n	8006de4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	1e5a      	subs	r2, r3, #1
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10c      	bne.n	8006e32 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	b672      	cpsid	i
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	b662      	cpsie	i
 8006e2c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e2e:	bf00      	nop
 8006e30:	e7fe      	b.n	8006e30 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006e32:	f002 fa2b 	bl	800928c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3e:	68f9      	ldr	r1, [r7, #12]
 8006e40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e42:	fb01 f303 	mul.w	r3, r1, r3
 8006e46:	441a      	add	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e62:	3b01      	subs	r3, #1
 8006e64:	68f9      	ldr	r1, [r7, #12]
 8006e66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e68:	fb01 f303 	mul.w	r3, r1, r3
 8006e6c:	441a      	add	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	22ff      	movs	r2, #255	; 0xff
 8006e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	22ff      	movs	r2, #255	; 0xff
 8006e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d114      	bne.n	8006eb2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01a      	beq.n	8006ec6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3310      	adds	r3, #16
 8006e94:	4618      	mov	r0, r3
 8006e96:	f001 fadf 	bl	8008458 <xTaskRemoveFromEventList>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d012      	beq.n	8006ec6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ea0:	4b0c      	ldr	r3, [pc, #48]	; (8006ed4 <xQueueGenericReset+0xd0>)
 8006ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	e009      	b.n	8006ec6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3310      	adds	r3, #16
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff fef0 	bl	8006c9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3324      	adds	r3, #36	; 0x24
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff feeb 	bl	8006c9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ec6:	f002 fa15 	bl	80092f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006eca:	2301      	movs	r3, #1
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	e000ed04 	.word	0xe000ed04

08006ed8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08e      	sub	sp, #56	; 0x38
 8006edc:	af02      	add	r7, sp, #8
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10c      	bne.n	8006f06 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef0:	b672      	cpsid	i
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	b662      	cpsie	i
 8006f00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10c      	bne.n	8006f26 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f10:	b672      	cpsid	i
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	b662      	cpsie	i
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f22:	bf00      	nop
 8006f24:	e7fe      	b.n	8006f24 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <xQueueGenericCreateStatic+0x5a>
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <xQueueGenericCreateStatic+0x5e>
 8006f32:	2301      	movs	r3, #1
 8006f34:	e000      	b.n	8006f38 <xQueueGenericCreateStatic+0x60>
 8006f36:	2300      	movs	r3, #0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10c      	bne.n	8006f56 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f40:	b672      	cpsid	i
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	b662      	cpsie	i
 8006f50:	623b      	str	r3, [r7, #32]
}
 8006f52:	bf00      	nop
 8006f54:	e7fe      	b.n	8006f54 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d102      	bne.n	8006f62 <xQueueGenericCreateStatic+0x8a>
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <xQueueGenericCreateStatic+0x8e>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e000      	b.n	8006f68 <xQueueGenericCreateStatic+0x90>
 8006f66:	2300      	movs	r3, #0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10c      	bne.n	8006f86 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	b672      	cpsid	i
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	b662      	cpsie	i
 8006f80:	61fb      	str	r3, [r7, #28]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f86:	2350      	movs	r3, #80	; 0x50
 8006f88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b50      	cmp	r3, #80	; 0x50
 8006f8e:	d00c      	beq.n	8006faa <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	b672      	cpsid	i
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	b662      	cpsie	i
 8006fa4:	61bb      	str	r3, [r7, #24]
}
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006faa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00d      	beq.n	8006fd2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fbe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 f805 	bl	8006fdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3730      	adds	r7, #48	; 0x30
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d103      	bne.n	8006ff8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	69ba      	ldr	r2, [r7, #24]
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	e002      	b.n	8006ffe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800700a:	2101      	movs	r1, #1
 800700c:	69b8      	ldr	r0, [r7, #24]
 800700e:	f7ff fef9 	bl	8006e04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	78fa      	ldrb	r2, [r7, #3]
 8007016:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800701a:	bf00      	nop
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b08e      	sub	sp, #56	; 0x38
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007032:	2300      	movs	r3, #0
 8007034:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10c      	bne.n	800705a <xQueueGenericSend+0x36>
	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	b672      	cpsid	i
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	b662      	cpsie	i
 8007054:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007056:	bf00      	nop
 8007058:	e7fe      	b.n	8007058 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d103      	bne.n	8007068 <xQueueGenericSend+0x44>
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <xQueueGenericSend+0x48>
 8007068:	2301      	movs	r3, #1
 800706a:	e000      	b.n	800706e <xQueueGenericSend+0x4a>
 800706c:	2300      	movs	r3, #0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10c      	bne.n	800708c <xQueueGenericSend+0x68>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	b672      	cpsid	i
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	b662      	cpsie	i
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007088:	bf00      	nop
 800708a:	e7fe      	b.n	800708a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2b02      	cmp	r3, #2
 8007090:	d103      	bne.n	800709a <xQueueGenericSend+0x76>
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007096:	2b01      	cmp	r3, #1
 8007098:	d101      	bne.n	800709e <xQueueGenericSend+0x7a>
 800709a:	2301      	movs	r3, #1
 800709c:	e000      	b.n	80070a0 <xQueueGenericSend+0x7c>
 800709e:	2300      	movs	r3, #0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10c      	bne.n	80070be <xQueueGenericSend+0x9a>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	b672      	cpsid	i
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	b662      	cpsie	i
 80070b8:	623b      	str	r3, [r7, #32]
}
 80070ba:	bf00      	nop
 80070bc:	e7fe      	b.n	80070bc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070be:	f001 fb95 	bl	80087ec <xTaskGetSchedulerState>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d102      	bne.n	80070ce <xQueueGenericSend+0xaa>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <xQueueGenericSend+0xae>
 80070ce:	2301      	movs	r3, #1
 80070d0:	e000      	b.n	80070d4 <xQueueGenericSend+0xb0>
 80070d2:	2300      	movs	r3, #0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10c      	bne.n	80070f2 <xQueueGenericSend+0xce>
	__asm volatile
 80070d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070dc:	b672      	cpsid	i
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	b662      	cpsie	i
 80070ec:	61fb      	str	r3, [r7, #28]
}
 80070ee:	bf00      	nop
 80070f0:	e7fe      	b.n	80070f0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070f2:	f002 f8cb 	bl	800928c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fe:	429a      	cmp	r2, r3
 8007100:	d302      	bcc.n	8007108 <xQueueGenericSend+0xe4>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b02      	cmp	r3, #2
 8007106:	d129      	bne.n	800715c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800710e:	f000 fa15 	bl	800753c <prvCopyDataToQueue>
 8007112:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	2b00      	cmp	r3, #0
 800711a:	d010      	beq.n	800713e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	3324      	adds	r3, #36	; 0x24
 8007120:	4618      	mov	r0, r3
 8007122:	f001 f999 	bl	8008458 <xTaskRemoveFromEventList>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d013      	beq.n	8007154 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800712c:	4b3f      	ldr	r3, [pc, #252]	; (800722c <xQueueGenericSend+0x208>)
 800712e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	e00a      	b.n	8007154 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007140:	2b00      	cmp	r3, #0
 8007142:	d007      	beq.n	8007154 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007144:	4b39      	ldr	r3, [pc, #228]	; (800722c <xQueueGenericSend+0x208>)
 8007146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007154:	f002 f8ce 	bl	80092f4 <vPortExitCritical>
				return pdPASS;
 8007158:	2301      	movs	r3, #1
 800715a:	e063      	b.n	8007224 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d103      	bne.n	800716a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007162:	f002 f8c7 	bl	80092f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007166:	2300      	movs	r3, #0
 8007168:	e05c      	b.n	8007224 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800716a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007170:	f107 0314 	add.w	r3, r7, #20
 8007174:	4618      	mov	r0, r3
 8007176:	f001 f9d5 	bl	8008524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800717a:	2301      	movs	r3, #1
 800717c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800717e:	f002 f8b9 	bl	80092f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007182:	f000 ff35 	bl	8007ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007186:	f002 f881 	bl	800928c <vPortEnterCritical>
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007190:	b25b      	sxtb	r3, r3
 8007192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007196:	d103      	bne.n	80071a0 <xQueueGenericSend+0x17c>
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071a6:	b25b      	sxtb	r3, r3
 80071a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ac:	d103      	bne.n	80071b6 <xQueueGenericSend+0x192>
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071b6:	f002 f89d 	bl	80092f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071ba:	1d3a      	adds	r2, r7, #4
 80071bc:	f107 0314 	add.w	r3, r7, #20
 80071c0:	4611      	mov	r1, r2
 80071c2:	4618      	mov	r0, r3
 80071c4:	f001 f9c4 	bl	8008550 <xTaskCheckForTimeOut>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d124      	bne.n	8007218 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80071ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071d0:	f000 faac 	bl	800772c <prvIsQueueFull>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d018      	beq.n	800720c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	3310      	adds	r3, #16
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	4611      	mov	r1, r2
 80071e2:	4618      	mov	r0, r3
 80071e4:	f001 f8e4 	bl	80083b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ea:	f000 fa37 	bl	800765c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071ee:	f000 ff0d 	bl	800800c <xTaskResumeAll>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f47f af7c 	bne.w	80070f2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80071fa:	4b0c      	ldr	r3, [pc, #48]	; (800722c <xQueueGenericSend+0x208>)
 80071fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	e772      	b.n	80070f2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800720c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800720e:	f000 fa25 	bl	800765c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007212:	f000 fefb 	bl	800800c <xTaskResumeAll>
 8007216:	e76c      	b.n	80070f2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800721a:	f000 fa1f 	bl	800765c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800721e:	f000 fef5 	bl	800800c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007222:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007224:	4618      	mov	r0, r3
 8007226:	3738      	adds	r7, #56	; 0x38
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	e000ed04 	.word	0xe000ed04

08007230 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b08e      	sub	sp, #56	; 0x38
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10c      	bne.n	8007262 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724c:	b672      	cpsid	i
 800724e:	f383 8811 	msr	BASEPRI, r3
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	b662      	cpsie	i
 800725c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800725e:	bf00      	nop
 8007260:	e7fe      	b.n	8007260 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d103      	bne.n	8007270 <xQueueGenericSendFromISR+0x40>
 8007268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <xQueueGenericSendFromISR+0x44>
 8007270:	2301      	movs	r3, #1
 8007272:	e000      	b.n	8007276 <xQueueGenericSendFromISR+0x46>
 8007274:	2300      	movs	r3, #0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10c      	bne.n	8007294 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727e:	b672      	cpsid	i
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	b662      	cpsie	i
 800728e:	623b      	str	r3, [r7, #32]
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b02      	cmp	r3, #2
 8007298:	d103      	bne.n	80072a2 <xQueueGenericSendFromISR+0x72>
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d101      	bne.n	80072a6 <xQueueGenericSendFromISR+0x76>
 80072a2:	2301      	movs	r3, #1
 80072a4:	e000      	b.n	80072a8 <xQueueGenericSendFromISR+0x78>
 80072a6:	2300      	movs	r3, #0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10c      	bne.n	80072c6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b0:	b672      	cpsid	i
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	b662      	cpsie	i
 80072c0:	61fb      	str	r3, [r7, #28]
}
 80072c2:	bf00      	nop
 80072c4:	e7fe      	b.n	80072c4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072c6:	f002 f8c9 	bl	800945c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80072ca:	f3ef 8211 	mrs	r2, BASEPRI
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	b672      	cpsid	i
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	b662      	cpsie	i
 80072e2:	61ba      	str	r2, [r7, #24]
 80072e4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80072e6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d302      	bcc.n	80072fc <xQueueGenericSendFromISR+0xcc>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d12c      	bne.n	8007356 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80072fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	68b9      	ldr	r1, [r7, #8]
 800730a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800730c:	f000 f916 	bl	800753c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007310:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007318:	d112      	bne.n	8007340 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	2b00      	cmp	r3, #0
 8007320:	d016      	beq.n	8007350 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	3324      	adds	r3, #36	; 0x24
 8007326:	4618      	mov	r0, r3
 8007328:	f001 f896 	bl	8008458 <xTaskRemoveFromEventList>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00e      	beq.n	8007350 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00b      	beq.n	8007350 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	e007      	b.n	8007350 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007340:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007344:	3301      	adds	r3, #1
 8007346:	b2db      	uxtb	r3, r3
 8007348:	b25a      	sxtb	r2, r3
 800734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007350:	2301      	movs	r3, #1
 8007352:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007354:	e001      	b.n	800735a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007356:	2300      	movs	r3, #0
 8007358:	637b      	str	r3, [r7, #52]	; 0x34
 800735a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007364:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007368:	4618      	mov	r0, r3
 800736a:	3738      	adds	r7, #56	; 0x38
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08c      	sub	sp, #48	; 0x30
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800737c:	2300      	movs	r3, #0
 800737e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10c      	bne.n	80073a4 <xQueueReceive+0x34>
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738e:	b672      	cpsid	i
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	b662      	cpsie	i
 800739e:	623b      	str	r3, [r7, #32]
}
 80073a0:	bf00      	nop
 80073a2:	e7fe      	b.n	80073a2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d103      	bne.n	80073b2 <xQueueReceive+0x42>
 80073aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <xQueueReceive+0x46>
 80073b2:	2301      	movs	r3, #1
 80073b4:	e000      	b.n	80073b8 <xQueueReceive+0x48>
 80073b6:	2300      	movs	r3, #0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10c      	bne.n	80073d6 <xQueueReceive+0x66>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c0:	b672      	cpsid	i
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	b662      	cpsie	i
 80073d0:	61fb      	str	r3, [r7, #28]
}
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073d6:	f001 fa09 	bl	80087ec <xTaskGetSchedulerState>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <xQueueReceive+0x76>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <xQueueReceive+0x7a>
 80073e6:	2301      	movs	r3, #1
 80073e8:	e000      	b.n	80073ec <xQueueReceive+0x7c>
 80073ea:	2300      	movs	r3, #0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10c      	bne.n	800740a <xQueueReceive+0x9a>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	b672      	cpsid	i
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	b662      	cpsie	i
 8007404:	61bb      	str	r3, [r7, #24]
}
 8007406:	bf00      	nop
 8007408:	e7fe      	b.n	8007408 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800740a:	f001 ff3f 	bl	800928c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	2b00      	cmp	r3, #0
 8007418:	d01f      	beq.n	800745a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800741a:	68b9      	ldr	r1, [r7, #8]
 800741c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800741e:	f000 f8f7 	bl	8007610 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	1e5a      	subs	r2, r3, #1
 8007426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007428:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00f      	beq.n	8007452 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	3310      	adds	r3, #16
 8007436:	4618      	mov	r0, r3
 8007438:	f001 f80e 	bl	8008458 <xTaskRemoveFromEventList>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d007      	beq.n	8007452 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007442:	4b3d      	ldr	r3, [pc, #244]	; (8007538 <xQueueReceive+0x1c8>)
 8007444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007452:	f001 ff4f 	bl	80092f4 <vPortExitCritical>
				return pdPASS;
 8007456:	2301      	movs	r3, #1
 8007458:	e069      	b.n	800752e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d103      	bne.n	8007468 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007460:	f001 ff48 	bl	80092f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007464:	2300      	movs	r3, #0
 8007466:	e062      	b.n	800752e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800746e:	f107 0310 	add.w	r3, r7, #16
 8007472:	4618      	mov	r0, r3
 8007474:	f001 f856 	bl	8008524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007478:	2301      	movs	r3, #1
 800747a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800747c:	f001 ff3a 	bl	80092f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007480:	f000 fdb6 	bl	8007ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007484:	f001 ff02 	bl	800928c <vPortEnterCritical>
 8007488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800748e:	b25b      	sxtb	r3, r3
 8007490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007494:	d103      	bne.n	800749e <xQueueReceive+0x12e>
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074a4:	b25b      	sxtb	r3, r3
 80074a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074aa:	d103      	bne.n	80074b4 <xQueueReceive+0x144>
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074b4:	f001 ff1e 	bl	80092f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074b8:	1d3a      	adds	r2, r7, #4
 80074ba:	f107 0310 	add.w	r3, r7, #16
 80074be:	4611      	mov	r1, r2
 80074c0:	4618      	mov	r0, r3
 80074c2:	f001 f845 	bl	8008550 <xTaskCheckForTimeOut>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d123      	bne.n	8007514 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ce:	f000 f917 	bl	8007700 <prvIsQueueEmpty>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d017      	beq.n	8007508 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074da:	3324      	adds	r3, #36	; 0x24
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	4611      	mov	r1, r2
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 ff65 	bl	80083b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e8:	f000 f8b8 	bl	800765c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074ec:	f000 fd8e 	bl	800800c <xTaskResumeAll>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d189      	bne.n	800740a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80074f6:	4b10      	ldr	r3, [pc, #64]	; (8007538 <xQueueReceive+0x1c8>)
 80074f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	e780      	b.n	800740a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800750a:	f000 f8a7 	bl	800765c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800750e:	f000 fd7d 	bl	800800c <xTaskResumeAll>
 8007512:	e77a      	b.n	800740a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007516:	f000 f8a1 	bl	800765c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800751a:	f000 fd77 	bl	800800c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800751e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007520:	f000 f8ee 	bl	8007700 <prvIsQueueEmpty>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	f43f af6f 	beq.w	800740a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800752c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800752e:	4618      	mov	r0, r3
 8007530:	3730      	adds	r7, #48	; 0x30
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	e000ed04 	.word	0xe000ed04

0800753c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007548:	2300      	movs	r3, #0
 800754a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007550:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10d      	bne.n	8007576 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d14d      	bne.n	80075fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	4618      	mov	r0, r3
 8007568:	f001 f95e 	bl	8008828 <xTaskPriorityDisinherit>
 800756c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	609a      	str	r2, [r3, #8]
 8007574:	e043      	b.n	80075fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d119      	bne.n	80075b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6858      	ldr	r0, [r3, #4]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007584:	461a      	mov	r2, r3
 8007586:	68b9      	ldr	r1, [r7, #8]
 8007588:	f002 fa14 	bl	80099b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	441a      	add	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d32b      	bcc.n	80075fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	605a      	str	r2, [r3, #4]
 80075ae:	e026      	b.n	80075fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	68d8      	ldr	r0, [r3, #12]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b8:	461a      	mov	r2, r3
 80075ba:	68b9      	ldr	r1, [r7, #8]
 80075bc:	f002 f9fa 	bl	80099b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	68da      	ldr	r2, [r3, #12]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c8:	425b      	negs	r3, r3
 80075ca:	441a      	add	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	68da      	ldr	r2, [r3, #12]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d207      	bcs.n	80075ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	425b      	negs	r3, r3
 80075e6:	441a      	add	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d105      	bne.n	80075fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	3b01      	subs	r3, #1
 80075fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007606:	697b      	ldr	r3, [r7, #20]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3718      	adds	r7, #24
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	2b00      	cmp	r3, #0
 8007620:	d018      	beq.n	8007654 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68da      	ldr	r2, [r3, #12]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	441a      	add	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	429a      	cmp	r2, r3
 800763a:	d303      	bcc.n	8007644 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68d9      	ldr	r1, [r3, #12]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764c:	461a      	mov	r2, r3
 800764e:	6838      	ldr	r0, [r7, #0]
 8007650:	f002 f9b0 	bl	80099b4 <memcpy>
	}
}
 8007654:	bf00      	nop
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007664:	f001 fe12 	bl	800928c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800766e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007670:	e011      	b.n	8007696 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	2b00      	cmp	r3, #0
 8007678:	d012      	beq.n	80076a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	3324      	adds	r3, #36	; 0x24
 800767e:	4618      	mov	r0, r3
 8007680:	f000 feea 	bl	8008458 <xTaskRemoveFromEventList>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800768a:	f000 ffc7 	bl	800861c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800768e:	7bfb      	ldrb	r3, [r7, #15]
 8007690:	3b01      	subs	r3, #1
 8007692:	b2db      	uxtb	r3, r3
 8007694:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800769a:	2b00      	cmp	r3, #0
 800769c:	dce9      	bgt.n	8007672 <prvUnlockQueue+0x16>
 800769e:	e000      	b.n	80076a2 <prvUnlockQueue+0x46>
					break;
 80076a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	22ff      	movs	r2, #255	; 0xff
 80076a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80076aa:	f001 fe23 	bl	80092f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076ae:	f001 fded 	bl	800928c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076ba:	e011      	b.n	80076e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d012      	beq.n	80076ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3310      	adds	r3, #16
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 fec5 	bl	8008458 <xTaskRemoveFromEventList>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80076d4:	f000 ffa2 	bl	800861c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
 80076da:	3b01      	subs	r3, #1
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	dce9      	bgt.n	80076bc <prvUnlockQueue+0x60>
 80076e8:	e000      	b.n	80076ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	22ff      	movs	r2, #255	; 0xff
 80076f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80076f4:	f001 fdfe 	bl	80092f4 <vPortExitCritical>
}
 80076f8:	bf00      	nop
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007708:	f001 fdc0 	bl	800928c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007710:	2b00      	cmp	r3, #0
 8007712:	d102      	bne.n	800771a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007714:	2301      	movs	r3, #1
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	e001      	b.n	800771e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800771e:	f001 fde9 	bl	80092f4 <vPortExitCritical>

	return xReturn;
 8007722:	68fb      	ldr	r3, [r7, #12]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007734:	f001 fdaa 	bl	800928c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007740:	429a      	cmp	r2, r3
 8007742:	d102      	bne.n	800774a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007744:	2301      	movs	r3, #1
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	e001      	b.n	800774e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800774e:	f001 fdd1 	bl	80092f4 <vPortExitCritical>

	return xReturn;
 8007752:	68fb      	ldr	r3, [r7, #12]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007766:	2300      	movs	r3, #0
 8007768:	60fb      	str	r3, [r7, #12]
 800776a:	e014      	b.n	8007796 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800776c:	4a0f      	ldr	r2, [pc, #60]	; (80077ac <vQueueAddToRegistry+0x50>)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10b      	bne.n	8007790 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007778:	490c      	ldr	r1, [pc, #48]	; (80077ac <vQueueAddToRegistry+0x50>)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007782:	4a0a      	ldr	r2, [pc, #40]	; (80077ac <vQueueAddToRegistry+0x50>)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	4413      	add	r3, r2
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800778e:	e006      	b.n	800779e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	3301      	adds	r3, #1
 8007794:	60fb      	str	r3, [r7, #12]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b07      	cmp	r3, #7
 800779a:	d9e7      	bls.n	800776c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800779c:	bf00      	nop
 800779e:	bf00      	nop
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	20000e9c 	.word	0x20000e9c

080077b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80077c0:	f001 fd64 	bl	800928c <vPortEnterCritical>
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077ca:	b25b      	sxtb	r3, r3
 80077cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d0:	d103      	bne.n	80077da <vQueueWaitForMessageRestricted+0x2a>
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077e0:	b25b      	sxtb	r3, r3
 80077e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e6:	d103      	bne.n	80077f0 <vQueueWaitForMessageRestricted+0x40>
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077f0:	f001 fd80 	bl	80092f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d106      	bne.n	800780a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	3324      	adds	r3, #36	; 0x24
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	68b9      	ldr	r1, [r7, #8]
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fdf9 	bl	80083fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800780a:	6978      	ldr	r0, [r7, #20]
 800780c:	f7ff ff26 	bl	800765c <prvUnlockQueue>
	}
 8007810:	bf00      	nop
 8007812:	3718      	adds	r7, #24
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08e      	sub	sp, #56	; 0x38
 800781c:	af04      	add	r7, sp, #16
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10c      	bne.n	8007846 <xTaskCreateStatic+0x2e>
	__asm volatile
 800782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007830:	b672      	cpsid	i
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	b662      	cpsie	i
 8007840:	623b      	str	r3, [r7, #32]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10c      	bne.n	8007866 <xTaskCreateStatic+0x4e>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007850:	b672      	cpsid	i
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	b662      	cpsie	i
 8007860:	61fb      	str	r3, [r7, #28]
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007866:	23a8      	movs	r3, #168	; 0xa8
 8007868:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	2ba8      	cmp	r3, #168	; 0xa8
 800786e:	d00c      	beq.n	800788a <xTaskCreateStatic+0x72>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	b672      	cpsid	i
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	b662      	cpsie	i
 8007884:	61bb      	str	r3, [r7, #24]
}
 8007886:	bf00      	nop
 8007888:	e7fe      	b.n	8007888 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800788a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800788c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788e:	2b00      	cmp	r3, #0
 8007890:	d01e      	beq.n	80078d0 <xTaskCreateStatic+0xb8>
 8007892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007894:	2b00      	cmp	r3, #0
 8007896:	d01b      	beq.n	80078d0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	2202      	movs	r2, #2
 80078a6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078aa:	2300      	movs	r3, #0
 80078ac:	9303      	str	r3, [sp, #12]
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	9302      	str	r3, [sp, #8]
 80078b2:	f107 0314 	add.w	r3, r7, #20
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	68b9      	ldr	r1, [r7, #8]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 f850 	bl	8007968 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078ca:	f000 f8f5 	bl	8007ab8 <prvAddNewTaskToReadyList>
 80078ce:	e001      	b.n	80078d4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078d4:	697b      	ldr	r3, [r7, #20]
	}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3728      	adds	r7, #40	; 0x28
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b08c      	sub	sp, #48	; 0x30
 80078e2:	af04      	add	r7, sp, #16
 80078e4:	60f8      	str	r0, [r7, #12]
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	603b      	str	r3, [r7, #0]
 80078ea:	4613      	mov	r3, r2
 80078ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078ee:	88fb      	ldrh	r3, [r7, #6]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4618      	mov	r0, r3
 80078f4:	f001 fdf6 	bl	80094e4 <pvPortMalloc>
 80078f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00e      	beq.n	800791e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007900:	20a8      	movs	r0, #168	; 0xa8
 8007902:	f001 fdef 	bl	80094e4 <pvPortMalloc>
 8007906:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	631a      	str	r2, [r3, #48]	; 0x30
 8007914:	e005      	b.n	8007922 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007916:	6978      	ldr	r0, [r7, #20]
 8007918:	f001 feae 	bl	8009678 <vPortFree>
 800791c:	e001      	b.n	8007922 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800791e:	2300      	movs	r3, #0
 8007920:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d017      	beq.n	8007958 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007930:	88fa      	ldrh	r2, [r7, #6]
 8007932:	2300      	movs	r3, #0
 8007934:	9303      	str	r3, [sp, #12]
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	9302      	str	r3, [sp, #8]
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	68b9      	ldr	r1, [r7, #8]
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 f80e 	bl	8007968 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800794c:	69f8      	ldr	r0, [r7, #28]
 800794e:	f000 f8b3 	bl	8007ab8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007952:	2301      	movs	r3, #1
 8007954:	61bb      	str	r3, [r7, #24]
 8007956:	e002      	b.n	800795e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007958:	f04f 33ff 	mov.w	r3, #4294967295
 800795c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800795e:	69bb      	ldr	r3, [r7, #24]
	}
 8007960:	4618      	mov	r0, r3
 8007962:	3720      	adds	r7, #32
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	461a      	mov	r2, r3
 8007980:	21a5      	movs	r1, #165	; 0xa5
 8007982:	f001 ff93 	bl	80098ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007990:	440b      	add	r3, r1
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	f023 0307 	bic.w	r3, r3, #7
 800799e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	f003 0307 	and.w	r3, r3, #7
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00c      	beq.n	80079c4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	b672      	cpsid	i
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	b662      	cpsie	i
 80079be:	617b      	str	r3, [r7, #20]
}
 80079c0:	bf00      	nop
 80079c2:	e7fe      	b.n	80079c2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d01f      	beq.n	8007a0a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079ca:	2300      	movs	r3, #0
 80079cc:	61fb      	str	r3, [r7, #28]
 80079ce:	e012      	b.n	80079f6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	4413      	add	r3, r2
 80079d6:	7819      	ldrb	r1, [r3, #0]
 80079d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	4413      	add	r3, r2
 80079de:	3334      	adds	r3, #52	; 0x34
 80079e0:	460a      	mov	r2, r1
 80079e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	4413      	add	r3, r2
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d006      	beq.n	80079fe <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	3301      	adds	r3, #1
 80079f4:	61fb      	str	r3, [r7, #28]
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	2b0f      	cmp	r3, #15
 80079fa:	d9e9      	bls.n	80079d0 <prvInitialiseNewTask+0x68>
 80079fc:	e000      	b.n	8007a00 <prvInitialiseNewTask+0x98>
			{
				break;
 80079fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a08:	e003      	b.n	8007a12 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a14:	2b37      	cmp	r3, #55	; 0x37
 8007a16:	d901      	bls.n	8007a1c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a18:	2337      	movs	r3, #55	; 0x37
 8007a1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a30:	3304      	adds	r3, #4
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7ff f952 	bl	8006cdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	3318      	adds	r3, #24
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7ff f94d 	bl	8006cdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6a:	3354      	adds	r3, #84	; 0x54
 8007a6c:	224c      	movs	r2, #76	; 0x4c
 8007a6e:	2100      	movs	r1, #0
 8007a70:	4618      	mov	r0, r3
 8007a72:	f001 ff1b 	bl	80098ac <memset>
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	4a0c      	ldr	r2, [pc, #48]	; (8007aac <prvInitialiseNewTask+0x144>)
 8007a7a:	659a      	str	r2, [r3, #88]	; 0x58
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7e:	4a0c      	ldr	r2, [pc, #48]	; (8007ab0 <prvInitialiseNewTask+0x148>)
 8007a80:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	4a0b      	ldr	r2, [pc, #44]	; (8007ab4 <prvInitialiseNewTask+0x14c>)
 8007a86:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	68f9      	ldr	r1, [r7, #12]
 8007a8c:	69b8      	ldr	r0, [r7, #24]
 8007a8e:	f001 faed 	bl	800906c <pxPortInitialiseStack>
 8007a92:	4602      	mov	r2, r0
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d002      	beq.n	8007aa4 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aa4:	bf00      	nop
 8007aa6:	3720      	adds	r7, #32
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	20005128 	.word	0x20005128
 8007ab0:	20005190 	.word	0x20005190
 8007ab4:	200051f8 	.word	0x200051f8

08007ab8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ac0:	f001 fbe4 	bl	800928c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ac4:	4b2d      	ldr	r3, [pc, #180]	; (8007b7c <prvAddNewTaskToReadyList+0xc4>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	4a2c      	ldr	r2, [pc, #176]	; (8007b7c <prvAddNewTaskToReadyList+0xc4>)
 8007acc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ace:	4b2c      	ldr	r3, [pc, #176]	; (8007b80 <prvAddNewTaskToReadyList+0xc8>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d109      	bne.n	8007aea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ad6:	4a2a      	ldr	r2, [pc, #168]	; (8007b80 <prvAddNewTaskToReadyList+0xc8>)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007adc:	4b27      	ldr	r3, [pc, #156]	; (8007b7c <prvAddNewTaskToReadyList+0xc4>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d110      	bne.n	8007b06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ae4:	f000 fdbe 	bl	8008664 <prvInitialiseTaskLists>
 8007ae8:	e00d      	b.n	8007b06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007aea:	4b26      	ldr	r3, [pc, #152]	; (8007b84 <prvAddNewTaskToReadyList+0xcc>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d109      	bne.n	8007b06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007af2:	4b23      	ldr	r3, [pc, #140]	; (8007b80 <prvAddNewTaskToReadyList+0xc8>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d802      	bhi.n	8007b06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b00:	4a1f      	ldr	r2, [pc, #124]	; (8007b80 <prvAddNewTaskToReadyList+0xc8>)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b06:	4b20      	ldr	r3, [pc, #128]	; (8007b88 <prvAddNewTaskToReadyList+0xd0>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	4a1e      	ldr	r2, [pc, #120]	; (8007b88 <prvAddNewTaskToReadyList+0xd0>)
 8007b0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b10:	4b1d      	ldr	r3, [pc, #116]	; (8007b88 <prvAddNewTaskToReadyList+0xd0>)
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b1c:	4b1b      	ldr	r3, [pc, #108]	; (8007b8c <prvAddNewTaskToReadyList+0xd4>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d903      	bls.n	8007b2c <prvAddNewTaskToReadyList+0x74>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	4a18      	ldr	r2, [pc, #96]	; (8007b8c <prvAddNewTaskToReadyList+0xd4>)
 8007b2a:	6013      	str	r3, [r2, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b30:	4613      	mov	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4a15      	ldr	r2, [pc, #84]	; (8007b90 <prvAddNewTaskToReadyList+0xd8>)
 8007b3a:	441a      	add	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	4619      	mov	r1, r3
 8007b42:	4610      	mov	r0, r2
 8007b44:	f7ff f8d7 	bl	8006cf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b48:	f001 fbd4 	bl	80092f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b4c:	4b0d      	ldr	r3, [pc, #52]	; (8007b84 <prvAddNewTaskToReadyList+0xcc>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00e      	beq.n	8007b72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b54:	4b0a      	ldr	r3, [pc, #40]	; (8007b80 <prvAddNewTaskToReadyList+0xc8>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d207      	bcs.n	8007b72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b62:	4b0c      	ldr	r3, [pc, #48]	; (8007b94 <prvAddNewTaskToReadyList+0xdc>)
 8007b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b72:	bf00      	nop
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	200013b0 	.word	0x200013b0
 8007b80:	20000edc 	.word	0x20000edc
 8007b84:	200013bc 	.word	0x200013bc
 8007b88:	200013cc 	.word	0x200013cc
 8007b8c:	200013b8 	.word	0x200013b8
 8007b90:	20000ee0 	.word	0x20000ee0
 8007b94:	e000ed04 	.word	0xe000ed04

08007b98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d019      	beq.n	8007bde <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007baa:	4b14      	ldr	r3, [pc, #80]	; (8007bfc <vTaskDelay+0x64>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00c      	beq.n	8007bcc <vTaskDelay+0x34>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb6:	b672      	cpsid	i
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	b662      	cpsie	i
 8007bc6:	60bb      	str	r3, [r7, #8]
}
 8007bc8:	bf00      	nop
 8007bca:	e7fe      	b.n	8007bca <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007bcc:	f000 fa10 	bl	8007ff0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fe9a 	bl	800890c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bd8:	f000 fa18 	bl	800800c <xTaskResumeAll>
 8007bdc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d107      	bne.n	8007bf4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007be4:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <vTaskDelay+0x68>)
 8007be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bea:	601a      	str	r2, [r3, #0]
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bf4:	bf00      	nop
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	200013d8 	.word	0x200013d8
 8007c00:	e000ed04 	.word	0xe000ed04

08007c04 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007c0c:	f001 fb3e 	bl	800928c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d102      	bne.n	8007c1c <vTaskSuspend+0x18>
 8007c16:	4b31      	ldr	r3, [pc, #196]	; (8007cdc <vTaskSuspend+0xd8>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	e000      	b.n	8007c1e <vTaskSuspend+0x1a>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3304      	adds	r3, #4
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7ff f8c3 	bl	8006db0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d004      	beq.n	8007c3c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3318      	adds	r3, #24
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7ff f8ba 	bl	8006db0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	4619      	mov	r1, r3
 8007c42:	4827      	ldr	r0, [pc, #156]	; (8007ce0 <vTaskSuspend+0xdc>)
 8007c44:	f7ff f857 	bl	8006cf6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d103      	bne.n	8007c5c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007c5c:	f001 fb4a 	bl	80092f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007c60:	4b20      	ldr	r3, [pc, #128]	; (8007ce4 <vTaskSuspend+0xe0>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d005      	beq.n	8007c74 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007c68:	f001 fb10 	bl	800928c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007c6c:	f000 fd9e 	bl	80087ac <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007c70:	f001 fb40 	bl	80092f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007c74:	4b19      	ldr	r3, [pc, #100]	; (8007cdc <vTaskSuspend+0xd8>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d129      	bne.n	8007cd2 <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 8007c7e:	4b19      	ldr	r3, [pc, #100]	; (8007ce4 <vTaskSuspend+0xe0>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d019      	beq.n	8007cba <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007c86:	4b18      	ldr	r3, [pc, #96]	; (8007ce8 <vTaskSuspend+0xe4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00c      	beq.n	8007ca8 <vTaskSuspend+0xa4>
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	b672      	cpsid	i
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	b662      	cpsie	i
 8007ca2:	60bb      	str	r3, [r7, #8]
}
 8007ca4:	bf00      	nop
 8007ca6:	e7fe      	b.n	8007ca6 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8007ca8:	4b10      	ldr	r3, [pc, #64]	; (8007cec <vTaskSuspend+0xe8>)
 8007caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cb8:	e00b      	b.n	8007cd2 <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007cba:	4b09      	ldr	r3, [pc, #36]	; (8007ce0 <vTaskSuspend+0xdc>)
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <vTaskSuspend+0xec>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d103      	bne.n	8007cce <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8007cc6:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <vTaskSuspend+0xd8>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	601a      	str	r2, [r3, #0]
	}
 8007ccc:	e001      	b.n	8007cd2 <vTaskSuspend+0xce>
					vTaskSwitchContext();
 8007cce:	f000 fb09 	bl	80082e4 <vTaskSwitchContext>
	}
 8007cd2:	bf00      	nop
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20000edc 	.word	0x20000edc
 8007ce0:	2000139c 	.word	0x2000139c
 8007ce4:	200013bc 	.word	0x200013bc
 8007ce8:	200013d8 	.word	0x200013d8
 8007cec:	e000ed04 	.word	0xe000ed04
 8007cf0:	200013b0 	.word	0x200013b0

08007cf4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10c      	bne.n	8007d24 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0e:	b672      	cpsid	i
 8007d10:	f383 8811 	msr	BASEPRI, r3
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	b662      	cpsie	i
 8007d1e:	60fb      	str	r3, [r7, #12]
}
 8007d20:	bf00      	nop
 8007d22:	e7fe      	b.n	8007d22 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	4a0a      	ldr	r2, [pc, #40]	; (8007d54 <prvTaskIsTaskSuspended+0x60>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d10a      	bne.n	8007d44 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d32:	4a09      	ldr	r2, [pc, #36]	; (8007d58 <prvTaskIsTaskSuspended+0x64>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d005      	beq.n	8007d44 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8007d40:	2301      	movs	r3, #1
 8007d42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d44:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007d46:	4618      	mov	r0, r3
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	2000139c 	.word	0x2000139c
 8007d58:	20001370 	.word	0x20001370

08007d5c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10c      	bne.n	8007d88 <vTaskResume+0x2c>
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	b672      	cpsid	i
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	b662      	cpsie	i
 8007d82:	60bb      	str	r3, [r7, #8]
}
 8007d84:	bf00      	nop
 8007d86:	e7fe      	b.n	8007d86 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007d88:	4b20      	ldr	r3, [pc, #128]	; (8007e0c <vTaskResume+0xb0>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d038      	beq.n	8007e04 <vTaskResume+0xa8>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d035      	beq.n	8007e04 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8007d98:	f001 fa78 	bl	800928c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f7ff ffa9 	bl	8007cf4 <prvTaskIsTaskSuspended>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d02b      	beq.n	8007e00 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3304      	adds	r3, #4
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fe ffff 	bl	8006db0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db6:	4b16      	ldr	r3, [pc, #88]	; (8007e10 <vTaskResume+0xb4>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d903      	bls.n	8007dc6 <vTaskResume+0x6a>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc2:	4a13      	ldr	r2, [pc, #76]	; (8007e10 <vTaskResume+0xb4>)
 8007dc4:	6013      	str	r3, [r2, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dca:	4613      	mov	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4a10      	ldr	r2, [pc, #64]	; (8007e14 <vTaskResume+0xb8>)
 8007dd4:	441a      	add	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4610      	mov	r0, r2
 8007dde:	f7fe ff8a 	bl	8006cf6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de6:	4b09      	ldr	r3, [pc, #36]	; (8007e0c <vTaskResume+0xb0>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d307      	bcc.n	8007e00 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007df0:	4b09      	ldr	r3, [pc, #36]	; (8007e18 <vTaskResume+0xbc>)
 8007df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007e00:	f001 fa78 	bl	80092f4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e04:	bf00      	nop
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	20000edc 	.word	0x20000edc
 8007e10:	200013b8 	.word	0x200013b8
 8007e14:	20000ee0 	.word	0x20000ee0
 8007e18:	e000ed04 	.word	0xe000ed04

08007e1c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08a      	sub	sp, #40	; 0x28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8007e24:	2300      	movs	r3, #0
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10c      	bne.n	8007e4c <xTaskResumeFromISR+0x30>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	b672      	cpsid	i
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	b662      	cpsie	i
 8007e46:	61bb      	str	r3, [r7, #24]
}
 8007e48:	bf00      	nop
 8007e4a:	e7fe      	b.n	8007e4a <xTaskResumeFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e4c:	f001 fb06 	bl	800945c <vPortValidateInterruptPriority>
	__asm volatile
 8007e50:	f3ef 8211 	mrs	r2, BASEPRI
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	b672      	cpsid	i
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	b662      	cpsie	i
 8007e68:	617a      	str	r2, [r7, #20]
 8007e6a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007e6c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e6e:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007e70:	6a38      	ldr	r0, [r7, #32]
 8007e72:	f7ff ff3f 	bl	8007cf4 <prvTaskIsTaskSuspended>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d030      	beq.n	8007ede <xTaskResumeFromISR+0xc2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e7c:	4b1d      	ldr	r3, [pc, #116]	; (8007ef4 <xTaskResumeFromISR+0xd8>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d126      	bne.n	8007ed2 <xTaskResumeFromISR+0xb6>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e88:	4b1b      	ldr	r3, [pc, #108]	; (8007ef8 <xTaskResumeFromISR+0xdc>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d301      	bcc.n	8007e96 <xTaskResumeFromISR+0x7a>
					{
						xYieldRequired = pdTRUE;
 8007e92:	2301      	movs	r3, #1
 8007e94:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe ff88 	bl	8006db0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea4:	4b15      	ldr	r3, [pc, #84]	; (8007efc <xTaskResumeFromISR+0xe0>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d903      	bls.n	8007eb4 <xTaskResumeFromISR+0x98>
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb0:	4a12      	ldr	r2, [pc, #72]	; (8007efc <xTaskResumeFromISR+0xe0>)
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb8:	4613      	mov	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4a0f      	ldr	r2, [pc, #60]	; (8007f00 <xTaskResumeFromISR+0xe4>)
 8007ec2:	441a      	add	r2, r3
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	4619      	mov	r1, r3
 8007eca:	4610      	mov	r0, r2
 8007ecc:	f7fe ff13 	bl	8006cf6 <vListInsertEnd>
 8007ed0:	e005      	b.n	8007ede <xTaskResumeFromISR+0xc2>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	3318      	adds	r3, #24
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	480a      	ldr	r0, [pc, #40]	; (8007f04 <xTaskResumeFromISR+0xe8>)
 8007eda:	f7fe ff0c 	bl	8006cf6 <vListInsertEnd>
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f383 8811 	msr	BASEPRI, r3
}
 8007ee8:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3728      	adds	r7, #40	; 0x28
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	200013d8 	.word	0x200013d8
 8007ef8:	20000edc 	.word	0x20000edc
 8007efc:	200013b8 	.word	0x200013b8
 8007f00:	20000ee0 	.word	0x20000ee0
 8007f04:	20001370 	.word	0x20001370

08007f08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08a      	sub	sp, #40	; 0x28
 8007f0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f12:	2300      	movs	r3, #0
 8007f14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f16:	463a      	mov	r2, r7
 8007f18:	1d39      	adds	r1, r7, #4
 8007f1a:	f107 0308 	add.w	r3, r7, #8
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe fe88 	bl	8006c34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	9202      	str	r2, [sp, #8]
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	2300      	movs	r3, #0
 8007f34:	460a      	mov	r2, r1
 8007f36:	4926      	ldr	r1, [pc, #152]	; (8007fd0 <vTaskStartScheduler+0xc8>)
 8007f38:	4826      	ldr	r0, [pc, #152]	; (8007fd4 <vTaskStartScheduler+0xcc>)
 8007f3a:	f7ff fc6d 	bl	8007818 <xTaskCreateStatic>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	4a25      	ldr	r2, [pc, #148]	; (8007fd8 <vTaskStartScheduler+0xd0>)
 8007f42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f44:	4b24      	ldr	r3, [pc, #144]	; (8007fd8 <vTaskStartScheduler+0xd0>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	617b      	str	r3, [r7, #20]
 8007f50:	e001      	b.n	8007f56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d102      	bne.n	8007f62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007f5c:	f000 fd2a 	bl	80089b4 <xTimerCreateTimerTask>
 8007f60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d11d      	bne.n	8007fa4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6c:	b672      	cpsid	i
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	b662      	cpsie	i
 8007f7c:	613b      	str	r3, [r7, #16]
}
 8007f7e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f80:	4b16      	ldr	r3, [pc, #88]	; (8007fdc <vTaskStartScheduler+0xd4>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3354      	adds	r3, #84	; 0x54
 8007f86:	4a16      	ldr	r2, [pc, #88]	; (8007fe0 <vTaskStartScheduler+0xd8>)
 8007f88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f8a:	4b16      	ldr	r3, [pc, #88]	; (8007fe4 <vTaskStartScheduler+0xdc>)
 8007f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f92:	4b15      	ldr	r3, [pc, #84]	; (8007fe8 <vTaskStartScheduler+0xe0>)
 8007f94:	2201      	movs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f98:	4b14      	ldr	r3, [pc, #80]	; (8007fec <vTaskStartScheduler+0xe4>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f9e:	f001 f8f7 	bl	8009190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fa2:	e010      	b.n	8007fc6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007faa:	d10c      	bne.n	8007fc6 <vTaskStartScheduler+0xbe>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	b672      	cpsid	i
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	b662      	cpsie	i
 8007fc0:	60fb      	str	r3, [r7, #12]
}
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <vTaskStartScheduler+0xbc>
}
 8007fc6:	bf00      	nop
 8007fc8:	3718      	adds	r7, #24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	08009b70 	.word	0x08009b70
 8007fd4:	08008635 	.word	0x08008635
 8007fd8:	200013d4 	.word	0x200013d4
 8007fdc:	20000edc 	.word	0x20000edc
 8007fe0:	20000088 	.word	0x20000088
 8007fe4:	200013d0 	.word	0x200013d0
 8007fe8:	200013bc 	.word	0x200013bc
 8007fec:	200013b4 	.word	0x200013b4

08007ff0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007ff4:	4b04      	ldr	r3, [pc, #16]	; (8008008 <vTaskSuspendAll+0x18>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	4a03      	ldr	r2, [pc, #12]	; (8008008 <vTaskSuspendAll+0x18>)
 8007ffc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007ffe:	bf00      	nop
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	200013d8 	.word	0x200013d8

0800800c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008016:	2300      	movs	r3, #0
 8008018:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800801a:	4b43      	ldr	r3, [pc, #268]	; (8008128 <xTaskResumeAll+0x11c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10c      	bne.n	800803c <xTaskResumeAll+0x30>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	b672      	cpsid	i
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	b662      	cpsie	i
 8008036:	603b      	str	r3, [r7, #0]
}
 8008038:	bf00      	nop
 800803a:	e7fe      	b.n	800803a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800803c:	f001 f926 	bl	800928c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008040:	4b39      	ldr	r3, [pc, #228]	; (8008128 <xTaskResumeAll+0x11c>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3b01      	subs	r3, #1
 8008046:	4a38      	ldr	r2, [pc, #224]	; (8008128 <xTaskResumeAll+0x11c>)
 8008048:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800804a:	4b37      	ldr	r3, [pc, #220]	; (8008128 <xTaskResumeAll+0x11c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d162      	bne.n	8008118 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008052:	4b36      	ldr	r3, [pc, #216]	; (800812c <xTaskResumeAll+0x120>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d05e      	beq.n	8008118 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800805a:	e02f      	b.n	80080bc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800805c:	4b34      	ldr	r3, [pc, #208]	; (8008130 <xTaskResumeAll+0x124>)
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	3318      	adds	r3, #24
 8008068:	4618      	mov	r0, r3
 800806a:	f7fe fea1 	bl	8006db0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3304      	adds	r3, #4
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe fe9c 	bl	8006db0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807c:	4b2d      	ldr	r3, [pc, #180]	; (8008134 <xTaskResumeAll+0x128>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	429a      	cmp	r2, r3
 8008082:	d903      	bls.n	800808c <xTaskResumeAll+0x80>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008088:	4a2a      	ldr	r2, [pc, #168]	; (8008134 <xTaskResumeAll+0x128>)
 800808a:	6013      	str	r3, [r2, #0]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008090:	4613      	mov	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4a27      	ldr	r2, [pc, #156]	; (8008138 <xTaskResumeAll+0x12c>)
 800809a:	441a      	add	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	3304      	adds	r3, #4
 80080a0:	4619      	mov	r1, r3
 80080a2:	4610      	mov	r0, r2
 80080a4:	f7fe fe27 	bl	8006cf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ac:	4b23      	ldr	r3, [pc, #140]	; (800813c <xTaskResumeAll+0x130>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d302      	bcc.n	80080bc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80080b6:	4b22      	ldr	r3, [pc, #136]	; (8008140 <xTaskResumeAll+0x134>)
 80080b8:	2201      	movs	r2, #1
 80080ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080bc:	4b1c      	ldr	r3, [pc, #112]	; (8008130 <xTaskResumeAll+0x124>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1cb      	bne.n	800805c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080ca:	f000 fb6f 	bl	80087ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80080ce:	4b1d      	ldr	r3, [pc, #116]	; (8008144 <xTaskResumeAll+0x138>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d010      	beq.n	80080fc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080da:	f000 f847 	bl	800816c <xTaskIncrementTick>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80080e4:	4b16      	ldr	r3, [pc, #88]	; (8008140 <xTaskResumeAll+0x134>)
 80080e6:	2201      	movs	r2, #1
 80080e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1f1      	bne.n	80080da <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80080f6:	4b13      	ldr	r3, [pc, #76]	; (8008144 <xTaskResumeAll+0x138>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080fc:	4b10      	ldr	r3, [pc, #64]	; (8008140 <xTaskResumeAll+0x134>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d009      	beq.n	8008118 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008104:	2301      	movs	r3, #1
 8008106:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008108:	4b0f      	ldr	r3, [pc, #60]	; (8008148 <xTaskResumeAll+0x13c>)
 800810a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800810e:	601a      	str	r2, [r3, #0]
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008118:	f001 f8ec 	bl	80092f4 <vPortExitCritical>

	return xAlreadyYielded;
 800811c:	68bb      	ldr	r3, [r7, #8]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	200013d8 	.word	0x200013d8
 800812c:	200013b0 	.word	0x200013b0
 8008130:	20001370 	.word	0x20001370
 8008134:	200013b8 	.word	0x200013b8
 8008138:	20000ee0 	.word	0x20000ee0
 800813c:	20000edc 	.word	0x20000edc
 8008140:	200013c4 	.word	0x200013c4
 8008144:	200013c0 	.word	0x200013c0
 8008148:	e000ed04 	.word	0xe000ed04

0800814c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008152:	4b05      	ldr	r3, [pc, #20]	; (8008168 <xTaskGetTickCount+0x1c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008158:	687b      	ldr	r3, [r7, #4]
}
 800815a:	4618      	mov	r0, r3
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	200013b4 	.word	0x200013b4

0800816c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008172:	2300      	movs	r3, #0
 8008174:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008176:	4b50      	ldr	r3, [pc, #320]	; (80082b8 <xTaskIncrementTick+0x14c>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	f040 808b 	bne.w	8008296 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008180:	4b4e      	ldr	r3, [pc, #312]	; (80082bc <xTaskIncrementTick+0x150>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3301      	adds	r3, #1
 8008186:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008188:	4a4c      	ldr	r2, [pc, #304]	; (80082bc <xTaskIncrementTick+0x150>)
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d122      	bne.n	80081da <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008194:	4b4a      	ldr	r3, [pc, #296]	; (80082c0 <xTaskIncrementTick+0x154>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00c      	beq.n	80081b8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	b672      	cpsid	i
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	b662      	cpsie	i
 80081b2:	603b      	str	r3, [r7, #0]
}
 80081b4:	bf00      	nop
 80081b6:	e7fe      	b.n	80081b6 <xTaskIncrementTick+0x4a>
 80081b8:	4b41      	ldr	r3, [pc, #260]	; (80082c0 <xTaskIncrementTick+0x154>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	60fb      	str	r3, [r7, #12]
 80081be:	4b41      	ldr	r3, [pc, #260]	; (80082c4 <xTaskIncrementTick+0x158>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a3f      	ldr	r2, [pc, #252]	; (80082c0 <xTaskIncrementTick+0x154>)
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	4a3f      	ldr	r2, [pc, #252]	; (80082c4 <xTaskIncrementTick+0x158>)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	4b3e      	ldr	r3, [pc, #248]	; (80082c8 <xTaskIncrementTick+0x15c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3301      	adds	r3, #1
 80081d2:	4a3d      	ldr	r2, [pc, #244]	; (80082c8 <xTaskIncrementTick+0x15c>)
 80081d4:	6013      	str	r3, [r2, #0]
 80081d6:	f000 fae9 	bl	80087ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081da:	4b3c      	ldr	r3, [pc, #240]	; (80082cc <xTaskIncrementTick+0x160>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d349      	bcc.n	8008278 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081e4:	4b36      	ldr	r3, [pc, #216]	; (80082c0 <xTaskIncrementTick+0x154>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d104      	bne.n	80081f8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081ee:	4b37      	ldr	r3, [pc, #220]	; (80082cc <xTaskIncrementTick+0x160>)
 80081f0:	f04f 32ff 	mov.w	r2, #4294967295
 80081f4:	601a      	str	r2, [r3, #0]
					break;
 80081f6:	e03f      	b.n	8008278 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081f8:	4b31      	ldr	r3, [pc, #196]	; (80082c0 <xTaskIncrementTick+0x154>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	429a      	cmp	r2, r3
 800820e:	d203      	bcs.n	8008218 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008210:	4a2e      	ldr	r2, [pc, #184]	; (80082cc <xTaskIncrementTick+0x160>)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008216:	e02f      	b.n	8008278 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	3304      	adds	r3, #4
 800821c:	4618      	mov	r0, r3
 800821e:	f7fe fdc7 	bl	8006db0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008226:	2b00      	cmp	r3, #0
 8008228:	d004      	beq.n	8008234 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	3318      	adds	r3, #24
 800822e:	4618      	mov	r0, r3
 8008230:	f7fe fdbe 	bl	8006db0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008238:	4b25      	ldr	r3, [pc, #148]	; (80082d0 <xTaskIncrementTick+0x164>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	429a      	cmp	r2, r3
 800823e:	d903      	bls.n	8008248 <xTaskIncrementTick+0xdc>
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	4a22      	ldr	r2, [pc, #136]	; (80082d0 <xTaskIncrementTick+0x164>)
 8008246:	6013      	str	r3, [r2, #0]
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4a1f      	ldr	r2, [pc, #124]	; (80082d4 <xTaskIncrementTick+0x168>)
 8008256:	441a      	add	r2, r3
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	3304      	adds	r3, #4
 800825c:	4619      	mov	r1, r3
 800825e:	4610      	mov	r0, r2
 8008260:	f7fe fd49 	bl	8006cf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008268:	4b1b      	ldr	r3, [pc, #108]	; (80082d8 <xTaskIncrementTick+0x16c>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826e:	429a      	cmp	r2, r3
 8008270:	d3b8      	bcc.n	80081e4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008272:	2301      	movs	r3, #1
 8008274:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008276:	e7b5      	b.n	80081e4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008278:	4b17      	ldr	r3, [pc, #92]	; (80082d8 <xTaskIncrementTick+0x16c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800827e:	4915      	ldr	r1, [pc, #84]	; (80082d4 <xTaskIncrementTick+0x168>)
 8008280:	4613      	mov	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	440b      	add	r3, r1
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d907      	bls.n	80082a0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008290:	2301      	movs	r3, #1
 8008292:	617b      	str	r3, [r7, #20]
 8008294:	e004      	b.n	80082a0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008296:	4b11      	ldr	r3, [pc, #68]	; (80082dc <xTaskIncrementTick+0x170>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	3301      	adds	r3, #1
 800829c:	4a0f      	ldr	r2, [pc, #60]	; (80082dc <xTaskIncrementTick+0x170>)
 800829e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80082a0:	4b0f      	ldr	r3, [pc, #60]	; (80082e0 <xTaskIncrementTick+0x174>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80082a8:	2301      	movs	r3, #1
 80082aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80082ac:	697b      	ldr	r3, [r7, #20]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	200013d8 	.word	0x200013d8
 80082bc:	200013b4 	.word	0x200013b4
 80082c0:	20001368 	.word	0x20001368
 80082c4:	2000136c 	.word	0x2000136c
 80082c8:	200013c8 	.word	0x200013c8
 80082cc:	200013d0 	.word	0x200013d0
 80082d0:	200013b8 	.word	0x200013b8
 80082d4:	20000ee0 	.word	0x20000ee0
 80082d8:	20000edc 	.word	0x20000edc
 80082dc:	200013c0 	.word	0x200013c0
 80082e0:	200013c4 	.word	0x200013c4

080082e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082ea:	4b2b      	ldr	r3, [pc, #172]	; (8008398 <vTaskSwitchContext+0xb4>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80082f2:	4b2a      	ldr	r3, [pc, #168]	; (800839c <vTaskSwitchContext+0xb8>)
 80082f4:	2201      	movs	r2, #1
 80082f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80082f8:	e048      	b.n	800838c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80082fa:	4b28      	ldr	r3, [pc, #160]	; (800839c <vTaskSwitchContext+0xb8>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008300:	4b27      	ldr	r3, [pc, #156]	; (80083a0 <vTaskSwitchContext+0xbc>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	60fb      	str	r3, [r7, #12]
 8008306:	e012      	b.n	800832e <vTaskSwitchContext+0x4a>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10c      	bne.n	8008328 <vTaskSwitchContext+0x44>
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008312:	b672      	cpsid	i
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	b662      	cpsie	i
 8008322:	607b      	str	r3, [r7, #4]
}
 8008324:	bf00      	nop
 8008326:	e7fe      	b.n	8008326 <vTaskSwitchContext+0x42>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3b01      	subs	r3, #1
 800832c:	60fb      	str	r3, [r7, #12]
 800832e:	491d      	ldr	r1, [pc, #116]	; (80083a4 <vTaskSwitchContext+0xc0>)
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	4613      	mov	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	440b      	add	r3, r1
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d0e2      	beq.n	8008308 <vTaskSwitchContext+0x24>
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4a15      	ldr	r2, [pc, #84]	; (80083a4 <vTaskSwitchContext+0xc0>)
 800834e:	4413      	add	r3, r2
 8008350:	60bb      	str	r3, [r7, #8]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	685a      	ldr	r2, [r3, #4]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	605a      	str	r2, [r3, #4]
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	3308      	adds	r3, #8
 8008364:	429a      	cmp	r2, r3
 8008366:	d104      	bne.n	8008372 <vTaskSwitchContext+0x8e>
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	605a      	str	r2, [r3, #4]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	4a0b      	ldr	r2, [pc, #44]	; (80083a8 <vTaskSwitchContext+0xc4>)
 800837a:	6013      	str	r3, [r2, #0]
 800837c:	4a08      	ldr	r2, [pc, #32]	; (80083a0 <vTaskSwitchContext+0xbc>)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008382:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <vTaskSwitchContext+0xc4>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3354      	adds	r3, #84	; 0x54
 8008388:	4a08      	ldr	r2, [pc, #32]	; (80083ac <vTaskSwitchContext+0xc8>)
 800838a:	6013      	str	r3, [r2, #0]
}
 800838c:	bf00      	nop
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	200013d8 	.word	0x200013d8
 800839c:	200013c4 	.word	0x200013c4
 80083a0:	200013b8 	.word	0x200013b8
 80083a4:	20000ee0 	.word	0x20000ee0
 80083a8:	20000edc 	.word	0x20000edc
 80083ac:	20000088 	.word	0x20000088

080083b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10c      	bne.n	80083da <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	b672      	cpsid	i
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	b662      	cpsie	i
 80083d4:	60fb      	str	r3, [r7, #12]
}
 80083d6:	bf00      	nop
 80083d8:	e7fe      	b.n	80083d8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083da:	4b07      	ldr	r3, [pc, #28]	; (80083f8 <vTaskPlaceOnEventList+0x48>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3318      	adds	r3, #24
 80083e0:	4619      	mov	r1, r3
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7fe fcab 	bl	8006d3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80083e8:	2101      	movs	r1, #1
 80083ea:	6838      	ldr	r0, [r7, #0]
 80083ec:	f000 fa8e 	bl	800890c <prvAddCurrentTaskToDelayedList>
}
 80083f0:	bf00      	nop
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	20000edc 	.word	0x20000edc

080083fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10c      	bne.n	8008428 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	b672      	cpsid	i
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	b662      	cpsie	i
 8008422:	617b      	str	r3, [r7, #20]
}
 8008424:	bf00      	nop
 8008426:	e7fe      	b.n	8008426 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008428:	4b0a      	ldr	r3, [pc, #40]	; (8008454 <vTaskPlaceOnEventListRestricted+0x58>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3318      	adds	r3, #24
 800842e:	4619      	mov	r1, r3
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f7fe fc60 	bl	8006cf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800843c:	f04f 33ff 	mov.w	r3, #4294967295
 8008440:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008442:	6879      	ldr	r1, [r7, #4]
 8008444:	68b8      	ldr	r0, [r7, #8]
 8008446:	f000 fa61 	bl	800890c <prvAddCurrentTaskToDelayedList>
	}
 800844a:	bf00      	nop
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	20000edc 	.word	0x20000edc

08008458 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10c      	bne.n	8008488 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	b672      	cpsid	i
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	b662      	cpsie	i
 8008482:	60fb      	str	r3, [r7, #12]
}
 8008484:	bf00      	nop
 8008486:	e7fe      	b.n	8008486 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	3318      	adds	r3, #24
 800848c:	4618      	mov	r0, r3
 800848e:	f7fe fc8f 	bl	8006db0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008492:	4b1e      	ldr	r3, [pc, #120]	; (800850c <xTaskRemoveFromEventList+0xb4>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d11d      	bne.n	80084d6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	3304      	adds	r3, #4
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fe fc86 	bl	8006db0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a8:	4b19      	ldr	r3, [pc, #100]	; (8008510 <xTaskRemoveFromEventList+0xb8>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d903      	bls.n	80084b8 <xTaskRemoveFromEventList+0x60>
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	4a16      	ldr	r2, [pc, #88]	; (8008510 <xTaskRemoveFromEventList+0xb8>)
 80084b6:	6013      	str	r3, [r2, #0]
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084bc:	4613      	mov	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4a13      	ldr	r2, [pc, #76]	; (8008514 <xTaskRemoveFromEventList+0xbc>)
 80084c6:	441a      	add	r2, r3
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	3304      	adds	r3, #4
 80084cc:	4619      	mov	r1, r3
 80084ce:	4610      	mov	r0, r2
 80084d0:	f7fe fc11 	bl	8006cf6 <vListInsertEnd>
 80084d4:	e005      	b.n	80084e2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	3318      	adds	r3, #24
 80084da:	4619      	mov	r1, r3
 80084dc:	480e      	ldr	r0, [pc, #56]	; (8008518 <xTaskRemoveFromEventList+0xc0>)
 80084de:	f7fe fc0a 	bl	8006cf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e6:	4b0d      	ldr	r3, [pc, #52]	; (800851c <xTaskRemoveFromEventList+0xc4>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d905      	bls.n	80084fc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80084f0:	2301      	movs	r3, #1
 80084f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80084f4:	4b0a      	ldr	r3, [pc, #40]	; (8008520 <xTaskRemoveFromEventList+0xc8>)
 80084f6:	2201      	movs	r2, #1
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	e001      	b.n	8008500 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80084fc:	2300      	movs	r3, #0
 80084fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008500:	697b      	ldr	r3, [r7, #20]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3718      	adds	r7, #24
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	200013d8 	.word	0x200013d8
 8008510:	200013b8 	.word	0x200013b8
 8008514:	20000ee0 	.word	0x20000ee0
 8008518:	20001370 	.word	0x20001370
 800851c:	20000edc 	.word	0x20000edc
 8008520:	200013c4 	.word	0x200013c4

08008524 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800852c:	4b06      	ldr	r3, [pc, #24]	; (8008548 <vTaskInternalSetTimeOutState+0x24>)
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008534:	4b05      	ldr	r3, [pc, #20]	; (800854c <vTaskInternalSetTimeOutState+0x28>)
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	605a      	str	r2, [r3, #4]
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	200013c8 	.word	0x200013c8
 800854c:	200013b4 	.word	0x200013b4

08008550 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b088      	sub	sp, #32
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10c      	bne.n	800857a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008564:	b672      	cpsid	i
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	b662      	cpsie	i
 8008574:	613b      	str	r3, [r7, #16]
}
 8008576:	bf00      	nop
 8008578:	e7fe      	b.n	8008578 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10c      	bne.n	800859a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008584:	b672      	cpsid	i
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	b662      	cpsie	i
 8008594:	60fb      	str	r3, [r7, #12]
}
 8008596:	bf00      	nop
 8008598:	e7fe      	b.n	8008598 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800859a:	f000 fe77 	bl	800928c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800859e:	4b1d      	ldr	r3, [pc, #116]	; (8008614 <xTaskCheckForTimeOut+0xc4>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	69ba      	ldr	r2, [r7, #24]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b6:	d102      	bne.n	80085be <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80085b8:	2300      	movs	r3, #0
 80085ba:	61fb      	str	r3, [r7, #28]
 80085bc:	e023      	b.n	8008606 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	4b15      	ldr	r3, [pc, #84]	; (8008618 <xTaskCheckForTimeOut+0xc8>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d007      	beq.n	80085da <xTaskCheckForTimeOut+0x8a>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	69ba      	ldr	r2, [r7, #24]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d302      	bcc.n	80085da <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80085d4:	2301      	movs	r3, #1
 80085d6:	61fb      	str	r3, [r7, #28]
 80085d8:	e015      	b.n	8008606 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d20b      	bcs.n	80085fc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	1ad2      	subs	r2, r2, r3
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7ff ff97 	bl	8008524 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80085f6:	2300      	movs	r3, #0
 80085f8:	61fb      	str	r3, [r7, #28]
 80085fa:	e004      	b.n	8008606 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	2200      	movs	r2, #0
 8008600:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008602:	2301      	movs	r3, #1
 8008604:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008606:	f000 fe75 	bl	80092f4 <vPortExitCritical>

	return xReturn;
 800860a:	69fb      	ldr	r3, [r7, #28]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3720      	adds	r7, #32
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	200013b4 	.word	0x200013b4
 8008618:	200013c8 	.word	0x200013c8

0800861c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800861c:	b480      	push	{r7}
 800861e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008620:	4b03      	ldr	r3, [pc, #12]	; (8008630 <vTaskMissedYield+0x14>)
 8008622:	2201      	movs	r2, #1
 8008624:	601a      	str	r2, [r3, #0]
}
 8008626:	bf00      	nop
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	200013c4 	.word	0x200013c4

08008634 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800863c:	f000 f852 	bl	80086e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008640:	4b06      	ldr	r3, [pc, #24]	; (800865c <prvIdleTask+0x28>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d9f9      	bls.n	800863c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008648:	4b05      	ldr	r3, [pc, #20]	; (8008660 <prvIdleTask+0x2c>)
 800864a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008658:	e7f0      	b.n	800863c <prvIdleTask+0x8>
 800865a:	bf00      	nop
 800865c:	20000ee0 	.word	0x20000ee0
 8008660:	e000ed04 	.word	0xe000ed04

08008664 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800866a:	2300      	movs	r3, #0
 800866c:	607b      	str	r3, [r7, #4]
 800866e:	e00c      	b.n	800868a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	4613      	mov	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4a12      	ldr	r2, [pc, #72]	; (80086c4 <prvInitialiseTaskLists+0x60>)
 800867c:	4413      	add	r3, r2
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe fb0c 	bl	8006c9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	3301      	adds	r3, #1
 8008688:	607b      	str	r3, [r7, #4]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b37      	cmp	r3, #55	; 0x37
 800868e:	d9ef      	bls.n	8008670 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008690:	480d      	ldr	r0, [pc, #52]	; (80086c8 <prvInitialiseTaskLists+0x64>)
 8008692:	f7fe fb03 	bl	8006c9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008696:	480d      	ldr	r0, [pc, #52]	; (80086cc <prvInitialiseTaskLists+0x68>)
 8008698:	f7fe fb00 	bl	8006c9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800869c:	480c      	ldr	r0, [pc, #48]	; (80086d0 <prvInitialiseTaskLists+0x6c>)
 800869e:	f7fe fafd 	bl	8006c9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086a2:	480c      	ldr	r0, [pc, #48]	; (80086d4 <prvInitialiseTaskLists+0x70>)
 80086a4:	f7fe fafa 	bl	8006c9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086a8:	480b      	ldr	r0, [pc, #44]	; (80086d8 <prvInitialiseTaskLists+0x74>)
 80086aa:	f7fe faf7 	bl	8006c9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086ae:	4b0b      	ldr	r3, [pc, #44]	; (80086dc <prvInitialiseTaskLists+0x78>)
 80086b0:	4a05      	ldr	r2, [pc, #20]	; (80086c8 <prvInitialiseTaskLists+0x64>)
 80086b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086b4:	4b0a      	ldr	r3, [pc, #40]	; (80086e0 <prvInitialiseTaskLists+0x7c>)
 80086b6:	4a05      	ldr	r2, [pc, #20]	; (80086cc <prvInitialiseTaskLists+0x68>)
 80086b8:	601a      	str	r2, [r3, #0]
}
 80086ba:	bf00      	nop
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	20000ee0 	.word	0x20000ee0
 80086c8:	20001340 	.word	0x20001340
 80086cc:	20001354 	.word	0x20001354
 80086d0:	20001370 	.word	0x20001370
 80086d4:	20001384 	.word	0x20001384
 80086d8:	2000139c 	.word	0x2000139c
 80086dc:	20001368 	.word	0x20001368
 80086e0:	2000136c 	.word	0x2000136c

080086e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086ea:	e019      	b.n	8008720 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80086ec:	f000 fdce 	bl	800928c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086f0:	4b10      	ldr	r3, [pc, #64]	; (8008734 <prvCheckTasksWaitingTermination+0x50>)
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	3304      	adds	r3, #4
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fe fb57 	bl	8006db0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008702:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <prvCheckTasksWaitingTermination+0x54>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3b01      	subs	r3, #1
 8008708:	4a0b      	ldr	r2, [pc, #44]	; (8008738 <prvCheckTasksWaitingTermination+0x54>)
 800870a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800870c:	4b0b      	ldr	r3, [pc, #44]	; (800873c <prvCheckTasksWaitingTermination+0x58>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3b01      	subs	r3, #1
 8008712:	4a0a      	ldr	r2, [pc, #40]	; (800873c <prvCheckTasksWaitingTermination+0x58>)
 8008714:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008716:	f000 fded 	bl	80092f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f810 	bl	8008740 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008720:	4b06      	ldr	r3, [pc, #24]	; (800873c <prvCheckTasksWaitingTermination+0x58>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1e1      	bne.n	80086ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008728:	bf00      	nop
 800872a:	bf00      	nop
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	20001384 	.word	0x20001384
 8008738:	200013b0 	.word	0x200013b0
 800873c:	20001398 	.word	0x20001398

08008740 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3354      	adds	r3, #84	; 0x54
 800874c:	4618      	mov	r0, r3
 800874e:	f001 f8b5 	bl	80098bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008758:	2b00      	cmp	r3, #0
 800875a:	d108      	bne.n	800876e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008760:	4618      	mov	r0, r3
 8008762:	f000 ff89 	bl	8009678 <vPortFree>
				vPortFree( pxTCB );
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 ff86 	bl	8009678 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800876c:	e01a      	b.n	80087a4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008774:	2b01      	cmp	r3, #1
 8008776:	d103      	bne.n	8008780 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 ff7d 	bl	8009678 <vPortFree>
	}
 800877e:	e011      	b.n	80087a4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008786:	2b02      	cmp	r3, #2
 8008788:	d00c      	beq.n	80087a4 <prvDeleteTCB+0x64>
	__asm volatile
 800878a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878e:	b672      	cpsid	i
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	b662      	cpsie	i
 800879e:	60fb      	str	r3, [r7, #12]
}
 80087a0:	bf00      	nop
 80087a2:	e7fe      	b.n	80087a2 <prvDeleteTCB+0x62>
	}
 80087a4:	bf00      	nop
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087b2:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <prvResetNextTaskUnblockTime+0x38>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d104      	bne.n	80087c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80087bc:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <prvResetNextTaskUnblockTime+0x3c>)
 80087be:	f04f 32ff 	mov.w	r2, #4294967295
 80087c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087c4:	e008      	b.n	80087d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087c6:	4b07      	ldr	r3, [pc, #28]	; (80087e4 <prvResetNextTaskUnblockTime+0x38>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	4a04      	ldr	r2, [pc, #16]	; (80087e8 <prvResetNextTaskUnblockTime+0x3c>)
 80087d6:	6013      	str	r3, [r2, #0]
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	20001368 	.word	0x20001368
 80087e8:	200013d0 	.word	0x200013d0

080087ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80087f2:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <xTaskGetSchedulerState+0x34>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d102      	bne.n	8008800 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80087fa:	2301      	movs	r3, #1
 80087fc:	607b      	str	r3, [r7, #4]
 80087fe:	e008      	b.n	8008812 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008800:	4b08      	ldr	r3, [pc, #32]	; (8008824 <xTaskGetSchedulerState+0x38>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d102      	bne.n	800880e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008808:	2302      	movs	r3, #2
 800880a:	607b      	str	r3, [r7, #4]
 800880c:	e001      	b.n	8008812 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800880e:	2300      	movs	r3, #0
 8008810:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008812:	687b      	ldr	r3, [r7, #4]
	}
 8008814:	4618      	mov	r0, r3
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr
 8008820:	200013bc 	.word	0x200013bc
 8008824:	200013d8 	.word	0x200013d8

08008828 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008834:	2300      	movs	r3, #0
 8008836:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d05a      	beq.n	80088f4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800883e:	4b30      	ldr	r3, [pc, #192]	; (8008900 <xTaskPriorityDisinherit+0xd8>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	429a      	cmp	r2, r3
 8008846:	d00c      	beq.n	8008862 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	b672      	cpsid	i
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	b662      	cpsie	i
 800885c:	60fb      	str	r3, [r7, #12]
}
 800885e:	bf00      	nop
 8008860:	e7fe      	b.n	8008860 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10c      	bne.n	8008884 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800886a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886e:	b672      	cpsid	i
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	b662      	cpsie	i
 800887e:	60bb      	str	r3, [r7, #8]
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008888:	1e5a      	subs	r2, r3, #1
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008896:	429a      	cmp	r2, r3
 8008898:	d02c      	beq.n	80088f4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d128      	bne.n	80088f4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	3304      	adds	r3, #4
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe fa82 	bl	8006db0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c4:	4b0f      	ldr	r3, [pc, #60]	; (8008904 <xTaskPriorityDisinherit+0xdc>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d903      	bls.n	80088d4 <xTaskPriorityDisinherit+0xac>
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d0:	4a0c      	ldr	r2, [pc, #48]	; (8008904 <xTaskPriorityDisinherit+0xdc>)
 80088d2:	6013      	str	r3, [r2, #0]
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d8:	4613      	mov	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4a09      	ldr	r2, [pc, #36]	; (8008908 <xTaskPriorityDisinherit+0xe0>)
 80088e2:	441a      	add	r2, r3
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	3304      	adds	r3, #4
 80088e8:	4619      	mov	r1, r3
 80088ea:	4610      	mov	r0, r2
 80088ec:	f7fe fa03 	bl	8006cf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80088f0:	2301      	movs	r3, #1
 80088f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088f4:	697b      	ldr	r3, [r7, #20]
	}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	20000edc 	.word	0x20000edc
 8008904:	200013b8 	.word	0x200013b8
 8008908:	20000ee0 	.word	0x20000ee0

0800890c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008916:	4b21      	ldr	r3, [pc, #132]	; (800899c <prvAddCurrentTaskToDelayedList+0x90>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800891c:	4b20      	ldr	r3, [pc, #128]	; (80089a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3304      	adds	r3, #4
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe fa44 	bl	8006db0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892e:	d10a      	bne.n	8008946 <prvAddCurrentTaskToDelayedList+0x3a>
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d007      	beq.n	8008946 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008936:	4b1a      	ldr	r3, [pc, #104]	; (80089a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3304      	adds	r3, #4
 800893c:	4619      	mov	r1, r3
 800893e:	4819      	ldr	r0, [pc, #100]	; (80089a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008940:	f7fe f9d9 	bl	8006cf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008944:	e026      	b.n	8008994 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4413      	add	r3, r2
 800894c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800894e:	4b14      	ldr	r3, [pc, #80]	; (80089a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	429a      	cmp	r2, r3
 800895c:	d209      	bcs.n	8008972 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800895e:	4b12      	ldr	r3, [pc, #72]	; (80089a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	4b0f      	ldr	r3, [pc, #60]	; (80089a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	3304      	adds	r3, #4
 8008968:	4619      	mov	r1, r3
 800896a:	4610      	mov	r0, r2
 800896c:	f7fe f9e7 	bl	8006d3e <vListInsert>
}
 8008970:	e010      	b.n	8008994 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008972:	4b0e      	ldr	r3, [pc, #56]	; (80089ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	4b0a      	ldr	r3, [pc, #40]	; (80089a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3304      	adds	r3, #4
 800897c:	4619      	mov	r1, r3
 800897e:	4610      	mov	r0, r2
 8008980:	f7fe f9dd 	bl	8006d3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008984:	4b0a      	ldr	r3, [pc, #40]	; (80089b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	429a      	cmp	r2, r3
 800898c:	d202      	bcs.n	8008994 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800898e:	4a08      	ldr	r2, [pc, #32]	; (80089b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	6013      	str	r3, [r2, #0]
}
 8008994:	bf00      	nop
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	200013b4 	.word	0x200013b4
 80089a0:	20000edc 	.word	0x20000edc
 80089a4:	2000139c 	.word	0x2000139c
 80089a8:	2000136c 	.word	0x2000136c
 80089ac:	20001368 	.word	0x20001368
 80089b0:	200013d0 	.word	0x200013d0

080089b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08a      	sub	sp, #40	; 0x28
 80089b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80089ba:	2300      	movs	r3, #0
 80089bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80089be:	f000 fb15 	bl	8008fec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80089c2:	4b1d      	ldr	r3, [pc, #116]	; (8008a38 <xTimerCreateTimerTask+0x84>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d021      	beq.n	8008a0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80089ca:	2300      	movs	r3, #0
 80089cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80089ce:	2300      	movs	r3, #0
 80089d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80089d2:	1d3a      	adds	r2, r7, #4
 80089d4:	f107 0108 	add.w	r1, r7, #8
 80089d8:	f107 030c 	add.w	r3, r7, #12
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fe f943 	bl	8006c68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	9202      	str	r2, [sp, #8]
 80089ea:	9301      	str	r3, [sp, #4]
 80089ec:	2302      	movs	r3, #2
 80089ee:	9300      	str	r3, [sp, #0]
 80089f0:	2300      	movs	r3, #0
 80089f2:	460a      	mov	r2, r1
 80089f4:	4911      	ldr	r1, [pc, #68]	; (8008a3c <xTimerCreateTimerTask+0x88>)
 80089f6:	4812      	ldr	r0, [pc, #72]	; (8008a40 <xTimerCreateTimerTask+0x8c>)
 80089f8:	f7fe ff0e 	bl	8007818 <xTaskCreateStatic>
 80089fc:	4603      	mov	r3, r0
 80089fe:	4a11      	ldr	r2, [pc, #68]	; (8008a44 <xTimerCreateTimerTask+0x90>)
 8008a00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008a02:	4b10      	ldr	r3, [pc, #64]	; (8008a44 <xTimerCreateTimerTask+0x90>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d001      	beq.n	8008a0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10c      	bne.n	8008a2e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a18:	b672      	cpsid	i
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	b662      	cpsie	i
 8008a28:	613b      	str	r3, [r7, #16]
}
 8008a2a:	bf00      	nop
 8008a2c:	e7fe      	b.n	8008a2c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008a2e:	697b      	ldr	r3, [r7, #20]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3718      	adds	r7, #24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	2000140c 	.word	0x2000140c
 8008a3c:	08009b78 	.word	0x08009b78
 8008a40:	08008b85 	.word	0x08008b85
 8008a44:	20001410 	.word	0x20001410

08008a48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08a      	sub	sp, #40	; 0x28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
 8008a54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a56:	2300      	movs	r3, #0
 8008a58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10c      	bne.n	8008a7a <xTimerGenericCommand+0x32>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	b672      	cpsid	i
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	b662      	cpsie	i
 8008a74:	623b      	str	r3, [r7, #32]
}
 8008a76:	bf00      	nop
 8008a78:	e7fe      	b.n	8008a78 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a7a:	4b1a      	ldr	r3, [pc, #104]	; (8008ae4 <xTimerGenericCommand+0x9c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d02a      	beq.n	8008ad8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2b05      	cmp	r3, #5
 8008a92:	dc18      	bgt.n	8008ac6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a94:	f7ff feaa 	bl	80087ec <xTaskGetSchedulerState>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d109      	bne.n	8008ab2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a9e:	4b11      	ldr	r3, [pc, #68]	; (8008ae4 <xTimerGenericCommand+0x9c>)
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	f107 0110 	add.w	r1, r7, #16
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aaa:	f7fe fabb 	bl	8007024 <xQueueGenericSend>
 8008aae:	6278      	str	r0, [r7, #36]	; 0x24
 8008ab0:	e012      	b.n	8008ad8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ab2:	4b0c      	ldr	r3, [pc, #48]	; (8008ae4 <xTimerGenericCommand+0x9c>)
 8008ab4:	6818      	ldr	r0, [r3, #0]
 8008ab6:	f107 0110 	add.w	r1, r7, #16
 8008aba:	2300      	movs	r3, #0
 8008abc:	2200      	movs	r2, #0
 8008abe:	f7fe fab1 	bl	8007024 <xQueueGenericSend>
 8008ac2:	6278      	str	r0, [r7, #36]	; 0x24
 8008ac4:	e008      	b.n	8008ad8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ac6:	4b07      	ldr	r3, [pc, #28]	; (8008ae4 <xTimerGenericCommand+0x9c>)
 8008ac8:	6818      	ldr	r0, [r3, #0]
 8008aca:	f107 0110 	add.w	r1, r7, #16
 8008ace:	2300      	movs	r3, #0
 8008ad0:	683a      	ldr	r2, [r7, #0]
 8008ad2:	f7fe fbad 	bl	8007230 <xQueueGenericSendFromISR>
 8008ad6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3728      	adds	r7, #40	; 0x28
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	2000140c 	.word	0x2000140c

08008ae8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b088      	sub	sp, #32
 8008aec:	af02      	add	r7, sp, #8
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008af2:	4b23      	ldr	r3, [pc, #140]	; (8008b80 <prvProcessExpiredTimer+0x98>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	3304      	adds	r3, #4
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fe f955 	bl	8006db0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b0c:	f003 0304 	and.w	r3, r3, #4
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d024      	beq.n	8008b5e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	699a      	ldr	r2, [r3, #24]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	18d1      	adds	r1, r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	6978      	ldr	r0, [r7, #20]
 8008b22:	f000 f8d3 	bl	8008ccc <prvInsertTimerInActiveList>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d021      	beq.n	8008b70 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	2300      	movs	r3, #0
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	2100      	movs	r1, #0
 8008b36:	6978      	ldr	r0, [r7, #20]
 8008b38:	f7ff ff86 	bl	8008a48 <xTimerGenericCommand>
 8008b3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d115      	bne.n	8008b70 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b48:	b672      	cpsid	i
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	b662      	cpsie	i
 8008b58:	60fb      	str	r3, [r7, #12]
}
 8008b5a:	bf00      	nop
 8008b5c:	e7fe      	b.n	8008b5c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b64:	f023 0301 	bic.w	r3, r3, #1
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	6a1b      	ldr	r3, [r3, #32]
 8008b74:	6978      	ldr	r0, [r7, #20]
 8008b76:	4798      	blx	r3
}
 8008b78:	bf00      	nop
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	20001404 	.word	0x20001404

08008b84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b8c:	f107 0308 	add.w	r3, r7, #8
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 f857 	bl	8008c44 <prvGetNextExpireTime>
 8008b96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 f803 	bl	8008ba8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008ba2:	f000 f8d5 	bl	8008d50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ba6:	e7f1      	b.n	8008b8c <prvTimerTask+0x8>

08008ba8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008bb2:	f7ff fa1d 	bl	8007ff0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bb6:	f107 0308 	add.w	r3, r7, #8
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 f866 	bl	8008c8c <prvSampleTimeNow>
 8008bc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d130      	bne.n	8008c2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10a      	bne.n	8008be4 <prvProcessTimerOrBlockTask+0x3c>
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d806      	bhi.n	8008be4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008bd6:	f7ff fa19 	bl	800800c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008bda:	68f9      	ldr	r1, [r7, #12]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff ff83 	bl	8008ae8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008be2:	e024      	b.n	8008c2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d008      	beq.n	8008bfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008bea:	4b13      	ldr	r3, [pc, #76]	; (8008c38 <prvProcessTimerOrBlockTask+0x90>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <prvProcessTimerOrBlockTask+0x50>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e000      	b.n	8008bfa <prvProcessTimerOrBlockTask+0x52>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008bfc:	4b0f      	ldr	r3, [pc, #60]	; (8008c3c <prvProcessTimerOrBlockTask+0x94>)
 8008bfe:	6818      	ldr	r0, [r3, #0]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	f7fe fdd1 	bl	80077b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c0e:	f7ff f9fd 	bl	800800c <xTaskResumeAll>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10a      	bne.n	8008c2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c18:	4b09      	ldr	r3, [pc, #36]	; (8008c40 <prvProcessTimerOrBlockTask+0x98>)
 8008c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	f3bf 8f6f 	isb	sy
}
 8008c28:	e001      	b.n	8008c2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c2a:	f7ff f9ef 	bl	800800c <xTaskResumeAll>
}
 8008c2e:	bf00      	nop
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20001408 	.word	0x20001408
 8008c3c:	2000140c 	.word	0x2000140c
 8008c40:	e000ed04 	.word	0xe000ed04

08008c44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c4c:	4b0e      	ldr	r3, [pc, #56]	; (8008c88 <prvGetNextExpireTime+0x44>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <prvGetNextExpireTime+0x16>
 8008c56:	2201      	movs	r2, #1
 8008c58:	e000      	b.n	8008c5c <prvGetNextExpireTime+0x18>
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d105      	bne.n	8008c74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c68:	4b07      	ldr	r3, [pc, #28]	; (8008c88 <prvGetNextExpireTime+0x44>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	60fb      	str	r3, [r7, #12]
 8008c72:	e001      	b.n	8008c78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c78:	68fb      	ldr	r3, [r7, #12]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3714      	adds	r7, #20
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	20001404 	.word	0x20001404

08008c8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c94:	f7ff fa5a 	bl	800814c <xTaskGetTickCount>
 8008c98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c9a:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <prvSampleTimeNow+0x3c>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d205      	bcs.n	8008cb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ca4:	f000 f93c 	bl	8008f20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	601a      	str	r2, [r3, #0]
 8008cae:	e002      	b.n	8008cb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008cb6:	4a04      	ldr	r2, [pc, #16]	; (8008cc8 <prvSampleTimeNow+0x3c>)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20001414 	.word	0x20001414

08008ccc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d812      	bhi.n	8008d18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	1ad2      	subs	r2, r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d302      	bcc.n	8008d06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d00:	2301      	movs	r3, #1
 8008d02:	617b      	str	r3, [r7, #20]
 8008d04:	e01b      	b.n	8008d3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d06:	4b10      	ldr	r3, [pc, #64]	; (8008d48 <prvInsertTimerInActiveList+0x7c>)
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	3304      	adds	r3, #4
 8008d0e:	4619      	mov	r1, r3
 8008d10:	4610      	mov	r0, r2
 8008d12:	f7fe f814 	bl	8006d3e <vListInsert>
 8008d16:	e012      	b.n	8008d3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d206      	bcs.n	8008d2e <prvInsertTimerInActiveList+0x62>
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d302      	bcc.n	8008d2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	617b      	str	r3, [r7, #20]
 8008d2c:	e007      	b.n	8008d3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d2e:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <prvInsertTimerInActiveList+0x80>)
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3304      	adds	r3, #4
 8008d36:	4619      	mov	r1, r3
 8008d38:	4610      	mov	r0, r2
 8008d3a:	f7fe f800 	bl	8006d3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d3e:	697b      	ldr	r3, [r7, #20]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3718      	adds	r7, #24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	20001408 	.word	0x20001408
 8008d4c:	20001404 	.word	0x20001404

08008d50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08e      	sub	sp, #56	; 0x38
 8008d54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d56:	e0d0      	b.n	8008efa <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	da1a      	bge.n	8008d94 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d5e:	1d3b      	adds	r3, r7, #4
 8008d60:	3304      	adds	r3, #4
 8008d62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10c      	bne.n	8008d84 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6e:	b672      	cpsid	i
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	b662      	cpsie	i
 8008d7e:	61fb      	str	r3, [r7, #28]
}
 8008d80:	bf00      	nop
 8008d82:	e7fe      	b.n	8008d82 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d8a:	6850      	ldr	r0, [r2, #4]
 8008d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d8e:	6892      	ldr	r2, [r2, #8]
 8008d90:	4611      	mov	r1, r2
 8008d92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f2c0 80af 	blt.w	8008efa <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d004      	beq.n	8008db2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008daa:	3304      	adds	r3, #4
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fd ffff 	bl	8006db0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008db2:	463b      	mov	r3, r7
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7ff ff69 	bl	8008c8c <prvSampleTimeNow>
 8008dba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b09      	cmp	r3, #9
 8008dc0:	f200 809a 	bhi.w	8008ef8 <prvProcessReceivedCommands+0x1a8>
 8008dc4:	a201      	add	r2, pc, #4	; (adr r2, 8008dcc <prvProcessReceivedCommands+0x7c>)
 8008dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dca:	bf00      	nop
 8008dcc:	08008df5 	.word	0x08008df5
 8008dd0:	08008df5 	.word	0x08008df5
 8008dd4:	08008df5 	.word	0x08008df5
 8008dd8:	08008e6d 	.word	0x08008e6d
 8008ddc:	08008e81 	.word	0x08008e81
 8008de0:	08008ecf 	.word	0x08008ecf
 8008de4:	08008df5 	.word	0x08008df5
 8008de8:	08008df5 	.word	0x08008df5
 8008dec:	08008e6d 	.word	0x08008e6d
 8008df0:	08008e81 	.word	0x08008e81
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dfa:	f043 0301 	orr.w	r3, r3, #1
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	18d1      	adds	r1, r2, r3
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e14:	f7ff ff5a 	bl	8008ccc <prvInsertTimerInActiveList>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d06d      	beq.n	8008efa <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d062      	beq.n	8008efa <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	441a      	add	r2, r3
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	2300      	movs	r3, #0
 8008e42:	2100      	movs	r1, #0
 8008e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e46:	f7ff fdff 	bl	8008a48 <xTimerGenericCommand>
 8008e4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d153      	bne.n	8008efa <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e56:	b672      	cpsid	i
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	b662      	cpsie	i
 8008e66:	61bb      	str	r3, [r7, #24]
}
 8008e68:	bf00      	nop
 8008e6a:	e7fe      	b.n	8008e6a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e72:	f023 0301 	bic.w	r3, r3, #1
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008e7e:	e03c      	b.n	8008efa <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e86:	f043 0301 	orr.w	r3, r3, #1
 8008e8a:	b2da      	uxtb	r2, r3
 8008e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e96:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10c      	bne.n	8008eba <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea4:	b672      	cpsid	i
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	b662      	cpsie	i
 8008eb4:	617b      	str	r3, [r7, #20]
}
 8008eb6:	bf00      	nop
 8008eb8:	e7fe      	b.n	8008eb8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebc:	699a      	ldr	r2, [r3, #24]
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	18d1      	adds	r1, r2, r3
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ec8:	f7ff ff00 	bl	8008ccc <prvInsertTimerInActiveList>
					break;
 8008ecc:	e015      	b.n	8008efa <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d103      	bne.n	8008ee4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ede:	f000 fbcb 	bl	8009678 <vPortFree>
 8008ee2:	e00a      	b.n	8008efa <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008eea:	f023 0301 	bic.w	r3, r3, #1
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008ef6:	e000      	b.n	8008efa <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8008ef8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008efa:	4b08      	ldr	r3, [pc, #32]	; (8008f1c <prvProcessReceivedCommands+0x1cc>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	1d39      	adds	r1, r7, #4
 8008f00:	2200      	movs	r2, #0
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fe fa34 	bl	8007370 <xQueueReceive>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f47f af24 	bne.w	8008d58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008f10:	bf00      	nop
 8008f12:	bf00      	nop
 8008f14:	3730      	adds	r7, #48	; 0x30
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	2000140c 	.word	0x2000140c

08008f20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b088      	sub	sp, #32
 8008f24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f26:	e04a      	b.n	8008fbe <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f28:	4b2e      	ldr	r3, [pc, #184]	; (8008fe4 <prvSwitchTimerLists+0xc4>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f32:	4b2c      	ldr	r3, [pc, #176]	; (8008fe4 <prvSwitchTimerLists+0xc4>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	3304      	adds	r3, #4
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fd ff35 	bl	8006db0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d030      	beq.n	8008fbe <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	4413      	add	r3, r2
 8008f64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d90e      	bls.n	8008f8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f7a:	4b1a      	ldr	r3, [pc, #104]	; (8008fe4 <prvSwitchTimerLists+0xc4>)
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	3304      	adds	r3, #4
 8008f82:	4619      	mov	r1, r3
 8008f84:	4610      	mov	r0, r2
 8008f86:	f7fd feda 	bl	8006d3e <vListInsert>
 8008f8a:	e018      	b.n	8008fbe <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	2300      	movs	r3, #0
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	2100      	movs	r1, #0
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7ff fd56 	bl	8008a48 <xTimerGenericCommand>
 8008f9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10c      	bne.n	8008fbe <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	b672      	cpsid	i
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	b662      	cpsie	i
 8008fb8:	603b      	str	r3, [r7, #0]
}
 8008fba:	bf00      	nop
 8008fbc:	e7fe      	b.n	8008fbc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fbe:	4b09      	ldr	r3, [pc, #36]	; (8008fe4 <prvSwitchTimerLists+0xc4>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1af      	bne.n	8008f28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008fc8:	4b06      	ldr	r3, [pc, #24]	; (8008fe4 <prvSwitchTimerLists+0xc4>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008fce:	4b06      	ldr	r3, [pc, #24]	; (8008fe8 <prvSwitchTimerLists+0xc8>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a04      	ldr	r2, [pc, #16]	; (8008fe4 <prvSwitchTimerLists+0xc4>)
 8008fd4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008fd6:	4a04      	ldr	r2, [pc, #16]	; (8008fe8 <prvSwitchTimerLists+0xc8>)
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	6013      	str	r3, [r2, #0]
}
 8008fdc:	bf00      	nop
 8008fde:	3718      	adds	r7, #24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	20001404 	.word	0x20001404
 8008fe8:	20001408 	.word	0x20001408

08008fec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ff2:	f000 f94b 	bl	800928c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ff6:	4b15      	ldr	r3, [pc, #84]	; (800904c <prvCheckForValidListAndQueue+0x60>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d120      	bne.n	8009040 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ffe:	4814      	ldr	r0, [pc, #80]	; (8009050 <prvCheckForValidListAndQueue+0x64>)
 8009000:	f7fd fe4c 	bl	8006c9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009004:	4813      	ldr	r0, [pc, #76]	; (8009054 <prvCheckForValidListAndQueue+0x68>)
 8009006:	f7fd fe49 	bl	8006c9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800900a:	4b13      	ldr	r3, [pc, #76]	; (8009058 <prvCheckForValidListAndQueue+0x6c>)
 800900c:	4a10      	ldr	r2, [pc, #64]	; (8009050 <prvCheckForValidListAndQueue+0x64>)
 800900e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009010:	4b12      	ldr	r3, [pc, #72]	; (800905c <prvCheckForValidListAndQueue+0x70>)
 8009012:	4a10      	ldr	r2, [pc, #64]	; (8009054 <prvCheckForValidListAndQueue+0x68>)
 8009014:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009016:	2300      	movs	r3, #0
 8009018:	9300      	str	r3, [sp, #0]
 800901a:	4b11      	ldr	r3, [pc, #68]	; (8009060 <prvCheckForValidListAndQueue+0x74>)
 800901c:	4a11      	ldr	r2, [pc, #68]	; (8009064 <prvCheckForValidListAndQueue+0x78>)
 800901e:	2110      	movs	r1, #16
 8009020:	200a      	movs	r0, #10
 8009022:	f7fd ff59 	bl	8006ed8 <xQueueGenericCreateStatic>
 8009026:	4603      	mov	r3, r0
 8009028:	4a08      	ldr	r2, [pc, #32]	; (800904c <prvCheckForValidListAndQueue+0x60>)
 800902a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800902c:	4b07      	ldr	r3, [pc, #28]	; (800904c <prvCheckForValidListAndQueue+0x60>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d005      	beq.n	8009040 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009034:	4b05      	ldr	r3, [pc, #20]	; (800904c <prvCheckForValidListAndQueue+0x60>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	490b      	ldr	r1, [pc, #44]	; (8009068 <prvCheckForValidListAndQueue+0x7c>)
 800903a:	4618      	mov	r0, r3
 800903c:	f7fe fb8e 	bl	800775c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009040:	f000 f958 	bl	80092f4 <vPortExitCritical>
}
 8009044:	bf00      	nop
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	2000140c 	.word	0x2000140c
 8009050:	200013dc 	.word	0x200013dc
 8009054:	200013f0 	.word	0x200013f0
 8009058:	20001404 	.word	0x20001404
 800905c:	20001408 	.word	0x20001408
 8009060:	200014b8 	.word	0x200014b8
 8009064:	20001418 	.word	0x20001418
 8009068:	08009b80 	.word	0x08009b80

0800906c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	3b04      	subs	r3, #4
 800907c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009084:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	3b04      	subs	r3, #4
 800908a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	f023 0201 	bic.w	r2, r3, #1
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	3b04      	subs	r3, #4
 800909a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800909c:	4a0c      	ldr	r2, [pc, #48]	; (80090d0 <pxPortInitialiseStack+0x64>)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	3b14      	subs	r3, #20
 80090a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3b04      	subs	r3, #4
 80090b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f06f 0202 	mvn.w	r2, #2
 80090ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	3b20      	subs	r3, #32
 80090c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090c2:	68fb      	ldr	r3, [r7, #12]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	080090d5 	.word	0x080090d5

080090d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80090da:	2300      	movs	r3, #0
 80090dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80090de:	4b14      	ldr	r3, [pc, #80]	; (8009130 <prvTaskExitError+0x5c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e6:	d00c      	beq.n	8009102 <prvTaskExitError+0x2e>
	__asm volatile
 80090e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ec:	b672      	cpsid	i
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	b662      	cpsie	i
 80090fc:	60fb      	str	r3, [r7, #12]
}
 80090fe:	bf00      	nop
 8009100:	e7fe      	b.n	8009100 <prvTaskExitError+0x2c>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009106:	b672      	cpsid	i
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	b662      	cpsie	i
 8009116:	60bb      	str	r3, [r7, #8]
}
 8009118:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800911a:	bf00      	nop
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0fc      	beq.n	800911c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009122:	bf00      	nop
 8009124:	bf00      	nop
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	20000038 	.word	0x20000038
	...

08009140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009140:	4b07      	ldr	r3, [pc, #28]	; (8009160 <pxCurrentTCBConst2>)
 8009142:	6819      	ldr	r1, [r3, #0]
 8009144:	6808      	ldr	r0, [r1, #0]
 8009146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914a:	f380 8809 	msr	PSP, r0
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f04f 0000 	mov.w	r0, #0
 8009156:	f380 8811 	msr	BASEPRI, r0
 800915a:	4770      	bx	lr
 800915c:	f3af 8000 	nop.w

08009160 <pxCurrentTCBConst2>:
 8009160:	20000edc 	.word	0x20000edc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop

08009168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009168:	4808      	ldr	r0, [pc, #32]	; (800918c <prvPortStartFirstTask+0x24>)
 800916a:	6800      	ldr	r0, [r0, #0]
 800916c:	6800      	ldr	r0, [r0, #0]
 800916e:	f380 8808 	msr	MSP, r0
 8009172:	f04f 0000 	mov.w	r0, #0
 8009176:	f380 8814 	msr	CONTROL, r0
 800917a:	b662      	cpsie	i
 800917c:	b661      	cpsie	f
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	df00      	svc	0
 8009188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800918a:	bf00      	nop
 800918c:	e000ed08 	.word	0xe000ed08

08009190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009196:	4b37      	ldr	r3, [pc, #220]	; (8009274 <xPortStartScheduler+0xe4>)
 8009198:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	22ff      	movs	r2, #255	; 0xff
 80091a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091b0:	78fb      	ldrb	r3, [r7, #3]
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	4b2f      	ldr	r3, [pc, #188]	; (8009278 <xPortStartScheduler+0xe8>)
 80091bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091be:	4b2f      	ldr	r3, [pc, #188]	; (800927c <xPortStartScheduler+0xec>)
 80091c0:	2207      	movs	r2, #7
 80091c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091c4:	e009      	b.n	80091da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80091c6:	4b2d      	ldr	r3, [pc, #180]	; (800927c <xPortStartScheduler+0xec>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	3b01      	subs	r3, #1
 80091cc:	4a2b      	ldr	r2, [pc, #172]	; (800927c <xPortStartScheduler+0xec>)
 80091ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091d0:	78fb      	ldrb	r3, [r7, #3]
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091da:	78fb      	ldrb	r3, [r7, #3]
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091e2:	2b80      	cmp	r3, #128	; 0x80
 80091e4:	d0ef      	beq.n	80091c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091e6:	4b25      	ldr	r3, [pc, #148]	; (800927c <xPortStartScheduler+0xec>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f1c3 0307 	rsb	r3, r3, #7
 80091ee:	2b04      	cmp	r3, #4
 80091f0:	d00c      	beq.n	800920c <xPortStartScheduler+0x7c>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f6:	b672      	cpsid	i
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	b662      	cpsie	i
 8009206:	60bb      	str	r3, [r7, #8]
}
 8009208:	bf00      	nop
 800920a:	e7fe      	b.n	800920a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800920c:	4b1b      	ldr	r3, [pc, #108]	; (800927c <xPortStartScheduler+0xec>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	021b      	lsls	r3, r3, #8
 8009212:	4a1a      	ldr	r2, [pc, #104]	; (800927c <xPortStartScheduler+0xec>)
 8009214:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009216:	4b19      	ldr	r3, [pc, #100]	; (800927c <xPortStartScheduler+0xec>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800921e:	4a17      	ldr	r2, [pc, #92]	; (800927c <xPortStartScheduler+0xec>)
 8009220:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	b2da      	uxtb	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800922a:	4b15      	ldr	r3, [pc, #84]	; (8009280 <xPortStartScheduler+0xf0>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a14      	ldr	r2, [pc, #80]	; (8009280 <xPortStartScheduler+0xf0>)
 8009230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009234:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009236:	4b12      	ldr	r3, [pc, #72]	; (8009280 <xPortStartScheduler+0xf0>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a11      	ldr	r2, [pc, #68]	; (8009280 <xPortStartScheduler+0xf0>)
 800923c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009240:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009242:	f000 f8dd 	bl	8009400 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009246:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <xPortStartScheduler+0xf4>)
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800924c:	f000 f8fc 	bl	8009448 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009250:	4b0d      	ldr	r3, [pc, #52]	; (8009288 <xPortStartScheduler+0xf8>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a0c      	ldr	r2, [pc, #48]	; (8009288 <xPortStartScheduler+0xf8>)
 8009256:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800925a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800925c:	f7ff ff84 	bl	8009168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009260:	f7ff f840 	bl	80082e4 <vTaskSwitchContext>
	prvTaskExitError();
 8009264:	f7ff ff36 	bl	80090d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	e000e400 	.word	0xe000e400
 8009278:	20001508 	.word	0x20001508
 800927c:	2000150c 	.word	0x2000150c
 8009280:	e000ed20 	.word	0xe000ed20
 8009284:	20000038 	.word	0x20000038
 8009288:	e000ef34 	.word	0xe000ef34

0800928c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
	__asm volatile
 8009292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009296:	b672      	cpsid	i
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	b662      	cpsie	i
 80092a6:	607b      	str	r3, [r7, #4]
}
 80092a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80092aa:	4b10      	ldr	r3, [pc, #64]	; (80092ec <vPortEnterCritical+0x60>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3301      	adds	r3, #1
 80092b0:	4a0e      	ldr	r2, [pc, #56]	; (80092ec <vPortEnterCritical+0x60>)
 80092b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092b4:	4b0d      	ldr	r3, [pc, #52]	; (80092ec <vPortEnterCritical+0x60>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d111      	bne.n	80092e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80092bc:	4b0c      	ldr	r3, [pc, #48]	; (80092f0 <vPortEnterCritical+0x64>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00c      	beq.n	80092e0 <vPortEnterCritical+0x54>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	b672      	cpsid	i
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	b662      	cpsie	i
 80092da:	603b      	str	r3, [r7, #0]
}
 80092dc:	bf00      	nop
 80092de:	e7fe      	b.n	80092de <vPortEnterCritical+0x52>
	}
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	20000038 	.word	0x20000038
 80092f0:	e000ed04 	.word	0xe000ed04

080092f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80092fa:	4b13      	ldr	r3, [pc, #76]	; (8009348 <vPortExitCritical+0x54>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10c      	bne.n	800931c <vPortExitCritical+0x28>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009306:	b672      	cpsid	i
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	b662      	cpsie	i
 8009316:	607b      	str	r3, [r7, #4]
}
 8009318:	bf00      	nop
 800931a:	e7fe      	b.n	800931a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800931c:	4b0a      	ldr	r3, [pc, #40]	; (8009348 <vPortExitCritical+0x54>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3b01      	subs	r3, #1
 8009322:	4a09      	ldr	r2, [pc, #36]	; (8009348 <vPortExitCritical+0x54>)
 8009324:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009326:	4b08      	ldr	r3, [pc, #32]	; (8009348 <vPortExitCritical+0x54>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d105      	bne.n	800933a <vPortExitCritical+0x46>
 800932e:	2300      	movs	r3, #0
 8009330:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	f383 8811 	msr	BASEPRI, r3
}
 8009338:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800933a:	bf00      	nop
 800933c:	370c      	adds	r7, #12
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	20000038 	.word	0x20000038
 800934c:	00000000 	.word	0x00000000

08009350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009350:	f3ef 8009 	mrs	r0, PSP
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	4b15      	ldr	r3, [pc, #84]	; (80093b0 <pxCurrentTCBConst>)
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	f01e 0f10 	tst.w	lr, #16
 8009360:	bf08      	it	eq
 8009362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936a:	6010      	str	r0, [r2, #0]
 800936c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009374:	b672      	cpsid	i
 8009376:	f380 8811 	msr	BASEPRI, r0
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	b662      	cpsie	i
 8009384:	f7fe ffae 	bl	80082e4 <vTaskSwitchContext>
 8009388:	f04f 0000 	mov.w	r0, #0
 800938c:	f380 8811 	msr	BASEPRI, r0
 8009390:	bc09      	pop	{r0, r3}
 8009392:	6819      	ldr	r1, [r3, #0]
 8009394:	6808      	ldr	r0, [r1, #0]
 8009396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939a:	f01e 0f10 	tst.w	lr, #16
 800939e:	bf08      	it	eq
 80093a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80093a4:	f380 8809 	msr	PSP, r0
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop

080093b0 <pxCurrentTCBConst>:
 80093b0:	20000edc 	.word	0x20000edc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093b4:	bf00      	nop
 80093b6:	bf00      	nop

080093b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
	__asm volatile
 80093be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c2:	b672      	cpsid	i
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	b662      	cpsie	i
 80093d2:	607b      	str	r3, [r7, #4]
}
 80093d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093d6:	f7fe fec9 	bl	800816c <xTaskIncrementTick>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d003      	beq.n	80093e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093e0:	4b06      	ldr	r3, [pc, #24]	; (80093fc <SysTick_Handler+0x44>)
 80093e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e6:	601a      	str	r2, [r3, #0]
 80093e8:	2300      	movs	r3, #0
 80093ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	f383 8811 	msr	BASEPRI, r3
}
 80093f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80093f4:	bf00      	nop
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	e000ed04 	.word	0xe000ed04

08009400 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009400:	b480      	push	{r7}
 8009402:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009404:	4b0b      	ldr	r3, [pc, #44]	; (8009434 <vPortSetupTimerInterrupt+0x34>)
 8009406:	2200      	movs	r2, #0
 8009408:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800940a:	4b0b      	ldr	r3, [pc, #44]	; (8009438 <vPortSetupTimerInterrupt+0x38>)
 800940c:	2200      	movs	r2, #0
 800940e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009410:	4b0a      	ldr	r3, [pc, #40]	; (800943c <vPortSetupTimerInterrupt+0x3c>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a0a      	ldr	r2, [pc, #40]	; (8009440 <vPortSetupTimerInterrupt+0x40>)
 8009416:	fba2 2303 	umull	r2, r3, r2, r3
 800941a:	099b      	lsrs	r3, r3, #6
 800941c:	4a09      	ldr	r2, [pc, #36]	; (8009444 <vPortSetupTimerInterrupt+0x44>)
 800941e:	3b01      	subs	r3, #1
 8009420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009422:	4b04      	ldr	r3, [pc, #16]	; (8009434 <vPortSetupTimerInterrupt+0x34>)
 8009424:	2207      	movs	r2, #7
 8009426:	601a      	str	r2, [r3, #0]
}
 8009428:	bf00      	nop
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	e000e010 	.word	0xe000e010
 8009438:	e000e018 	.word	0xe000e018
 800943c:	2000002c 	.word	0x2000002c
 8009440:	10624dd3 	.word	0x10624dd3
 8009444:	e000e014 	.word	0xe000e014

08009448 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009448:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009458 <vPortEnableVFP+0x10>
 800944c:	6801      	ldr	r1, [r0, #0]
 800944e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009452:	6001      	str	r1, [r0, #0]
 8009454:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009456:	bf00      	nop
 8009458:	e000ed88 	.word	0xe000ed88

0800945c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009462:	f3ef 8305 	mrs	r3, IPSR
 8009466:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b0f      	cmp	r3, #15
 800946c:	d916      	bls.n	800949c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800946e:	4a19      	ldr	r2, [pc, #100]	; (80094d4 <vPortValidateInterruptPriority+0x78>)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4413      	add	r3, r2
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009478:	4b17      	ldr	r3, [pc, #92]	; (80094d8 <vPortValidateInterruptPriority+0x7c>)
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	7afa      	ldrb	r2, [r7, #11]
 800947e:	429a      	cmp	r2, r3
 8009480:	d20c      	bcs.n	800949c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009486:	b672      	cpsid	i
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	b662      	cpsie	i
 8009496:	607b      	str	r3, [r7, #4]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800949c:	4b0f      	ldr	r3, [pc, #60]	; (80094dc <vPortValidateInterruptPriority+0x80>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80094a4:	4b0e      	ldr	r3, [pc, #56]	; (80094e0 <vPortValidateInterruptPriority+0x84>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d90c      	bls.n	80094c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b0:	b672      	cpsid	i
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	b662      	cpsie	i
 80094c0:	603b      	str	r3, [r7, #0]
}
 80094c2:	bf00      	nop
 80094c4:	e7fe      	b.n	80094c4 <vPortValidateInterruptPriority+0x68>
	}
 80094c6:	bf00      	nop
 80094c8:	3714      	adds	r7, #20
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	e000e3f0 	.word	0xe000e3f0
 80094d8:	20001508 	.word	0x20001508
 80094dc:	e000ed0c 	.word	0xe000ed0c
 80094e0:	2000150c 	.word	0x2000150c

080094e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b08a      	sub	sp, #40	; 0x28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094ec:	2300      	movs	r3, #0
 80094ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094f0:	f7fe fd7e 	bl	8007ff0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094f4:	4b5b      	ldr	r3, [pc, #364]	; (8009664 <pvPortMalloc+0x180>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80094fc:	f000 f91a 	bl	8009734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009500:	4b59      	ldr	r3, [pc, #356]	; (8009668 <pvPortMalloc+0x184>)
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4013      	ands	r3, r2
 8009508:	2b00      	cmp	r3, #0
 800950a:	f040 8092 	bne.w	8009632 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d01f      	beq.n	8009554 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009514:	2208      	movs	r2, #8
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4413      	add	r3, r2
 800951a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f003 0307 	and.w	r3, r3, #7
 8009522:	2b00      	cmp	r3, #0
 8009524:	d016      	beq.n	8009554 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f023 0307 	bic.w	r3, r3, #7
 800952c:	3308      	adds	r3, #8
 800952e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f003 0307 	and.w	r3, r3, #7
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00c      	beq.n	8009554 <pvPortMalloc+0x70>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	b672      	cpsid	i
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	b662      	cpsie	i
 800954e:	617b      	str	r3, [r7, #20]
}
 8009550:	bf00      	nop
 8009552:	e7fe      	b.n	8009552 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d06b      	beq.n	8009632 <pvPortMalloc+0x14e>
 800955a:	4b44      	ldr	r3, [pc, #272]	; (800966c <pvPortMalloc+0x188>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	429a      	cmp	r2, r3
 8009562:	d866      	bhi.n	8009632 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009564:	4b42      	ldr	r3, [pc, #264]	; (8009670 <pvPortMalloc+0x18c>)
 8009566:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009568:	4b41      	ldr	r3, [pc, #260]	; (8009670 <pvPortMalloc+0x18c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800956e:	e004      	b.n	800957a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009572:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	429a      	cmp	r2, r3
 8009582:	d903      	bls.n	800958c <pvPortMalloc+0xa8>
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1f1      	bne.n	8009570 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800958c:	4b35      	ldr	r3, [pc, #212]	; (8009664 <pvPortMalloc+0x180>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009592:	429a      	cmp	r2, r3
 8009594:	d04d      	beq.n	8009632 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009596:	6a3b      	ldr	r3, [r7, #32]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2208      	movs	r2, #8
 800959c:	4413      	add	r3, r2
 800959e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	6a3b      	ldr	r3, [r7, #32]
 80095a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80095a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	1ad2      	subs	r2, r2, r3
 80095b0:	2308      	movs	r3, #8
 80095b2:	005b      	lsls	r3, r3, #1
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d921      	bls.n	80095fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80095b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4413      	add	r3, r2
 80095be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	f003 0307 	and.w	r3, r3, #7
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00c      	beq.n	80095e4 <pvPortMalloc+0x100>
	__asm volatile
 80095ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ce:	b672      	cpsid	i
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	b662      	cpsie	i
 80095de:	613b      	str	r3, [r7, #16]
}
 80095e0:	bf00      	nop
 80095e2:	e7fe      	b.n	80095e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	1ad2      	subs	r2, r2, r3
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095f6:	69b8      	ldr	r0, [r7, #24]
 80095f8:	f000 f8fe 	bl	80097f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095fc:	4b1b      	ldr	r3, [pc, #108]	; (800966c <pvPortMalloc+0x188>)
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	4a19      	ldr	r2, [pc, #100]	; (800966c <pvPortMalloc+0x188>)
 8009608:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800960a:	4b18      	ldr	r3, [pc, #96]	; (800966c <pvPortMalloc+0x188>)
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	4b19      	ldr	r3, [pc, #100]	; (8009674 <pvPortMalloc+0x190>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	429a      	cmp	r2, r3
 8009614:	d203      	bcs.n	800961e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009616:	4b15      	ldr	r3, [pc, #84]	; (800966c <pvPortMalloc+0x188>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a16      	ldr	r2, [pc, #88]	; (8009674 <pvPortMalloc+0x190>)
 800961c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009620:	685a      	ldr	r2, [r3, #4]
 8009622:	4b11      	ldr	r3, [pc, #68]	; (8009668 <pvPortMalloc+0x184>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	431a      	orrs	r2, r3
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	2200      	movs	r2, #0
 8009630:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009632:	f7fe fceb 	bl	800800c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	f003 0307 	and.w	r3, r3, #7
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00c      	beq.n	800965a <pvPortMalloc+0x176>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	b672      	cpsid	i
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	b662      	cpsie	i
 8009654:	60fb      	str	r3, [r7, #12]
}
 8009656:	bf00      	nop
 8009658:	e7fe      	b.n	8009658 <pvPortMalloc+0x174>
	return pvReturn;
 800965a:	69fb      	ldr	r3, [r7, #28]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3728      	adds	r7, #40	; 0x28
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	20005118 	.word	0x20005118
 8009668:	20005124 	.word	0x20005124
 800966c:	2000511c 	.word	0x2000511c
 8009670:	20005110 	.word	0x20005110
 8009674:	20005120 	.word	0x20005120

08009678 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d04c      	beq.n	8009724 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800968a:	2308      	movs	r3, #8
 800968c:	425b      	negs	r3, r3
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	4413      	add	r3, r2
 8009692:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	4b23      	ldr	r3, [pc, #140]	; (800972c <vPortFree+0xb4>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4013      	ands	r3, r2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d10c      	bne.n	80096c0 <vPortFree+0x48>
	__asm volatile
 80096a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096aa:	b672      	cpsid	i
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	b662      	cpsie	i
 80096ba:	60fb      	str	r3, [r7, #12]
}
 80096bc:	bf00      	nop
 80096be:	e7fe      	b.n	80096be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00c      	beq.n	80096e2 <vPortFree+0x6a>
	__asm volatile
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	b672      	cpsid	i
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	b662      	cpsie	i
 80096dc:	60bb      	str	r3, [r7, #8]
}
 80096de:	bf00      	nop
 80096e0:	e7fe      	b.n	80096e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	4b11      	ldr	r3, [pc, #68]	; (800972c <vPortFree+0xb4>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4013      	ands	r3, r2
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d019      	beq.n	8009724 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d115      	bne.n	8009724 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	4b0b      	ldr	r3, [pc, #44]	; (800972c <vPortFree+0xb4>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	43db      	mvns	r3, r3
 8009702:	401a      	ands	r2, r3
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009708:	f7fe fc72 	bl	8007ff0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	685a      	ldr	r2, [r3, #4]
 8009710:	4b07      	ldr	r3, [pc, #28]	; (8009730 <vPortFree+0xb8>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4413      	add	r3, r2
 8009716:	4a06      	ldr	r2, [pc, #24]	; (8009730 <vPortFree+0xb8>)
 8009718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800971a:	6938      	ldr	r0, [r7, #16]
 800971c:	f000 f86c 	bl	80097f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009720:	f7fe fc74 	bl	800800c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009724:	bf00      	nop
 8009726:	3718      	adds	r7, #24
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	20005124 	.word	0x20005124
 8009730:	2000511c 	.word	0x2000511c

08009734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800973a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800973e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009740:	4b27      	ldr	r3, [pc, #156]	; (80097e0 <prvHeapInit+0xac>)
 8009742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f003 0307 	and.w	r3, r3, #7
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00c      	beq.n	8009768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3307      	adds	r3, #7
 8009752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f023 0307 	bic.w	r3, r3, #7
 800975a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	4a1f      	ldr	r2, [pc, #124]	; (80097e0 <prvHeapInit+0xac>)
 8009764:	4413      	add	r3, r2
 8009766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800976c:	4a1d      	ldr	r2, [pc, #116]	; (80097e4 <prvHeapInit+0xb0>)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009772:	4b1c      	ldr	r3, [pc, #112]	; (80097e4 <prvHeapInit+0xb0>)
 8009774:	2200      	movs	r2, #0
 8009776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	4413      	add	r3, r2
 800977e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009780:	2208      	movs	r2, #8
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	1a9b      	subs	r3, r3, r2
 8009786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f023 0307 	bic.w	r3, r3, #7
 800978e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	4a15      	ldr	r2, [pc, #84]	; (80097e8 <prvHeapInit+0xb4>)
 8009794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009796:	4b14      	ldr	r3, [pc, #80]	; (80097e8 <prvHeapInit+0xb4>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2200      	movs	r2, #0
 800979c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800979e:	4b12      	ldr	r3, [pc, #72]	; (80097e8 <prvHeapInit+0xb4>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	1ad2      	subs	r2, r2, r3
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097b4:	4b0c      	ldr	r3, [pc, #48]	; (80097e8 <prvHeapInit+0xb4>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	4a0a      	ldr	r2, [pc, #40]	; (80097ec <prvHeapInit+0xb8>)
 80097c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	4a09      	ldr	r2, [pc, #36]	; (80097f0 <prvHeapInit+0xbc>)
 80097ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097cc:	4b09      	ldr	r3, [pc, #36]	; (80097f4 <prvHeapInit+0xc0>)
 80097ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097d2:	601a      	str	r2, [r3, #0]
}
 80097d4:	bf00      	nop
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	20001510 	.word	0x20001510
 80097e4:	20005110 	.word	0x20005110
 80097e8:	20005118 	.word	0x20005118
 80097ec:	20005120 	.word	0x20005120
 80097f0:	2000511c 	.word	0x2000511c
 80097f4:	20005124 	.word	0x20005124

080097f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009800:	4b28      	ldr	r3, [pc, #160]	; (80098a4 <prvInsertBlockIntoFreeList+0xac>)
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	e002      	b.n	800980c <prvInsertBlockIntoFreeList+0x14>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	429a      	cmp	r2, r3
 8009814:	d8f7      	bhi.n	8009806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	4413      	add	r3, r2
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	429a      	cmp	r2, r3
 8009826:	d108      	bne.n	800983a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	441a      	add	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	441a      	add	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	429a      	cmp	r2, r3
 800984c:	d118      	bne.n	8009880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	4b15      	ldr	r3, [pc, #84]	; (80098a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	d00d      	beq.n	8009876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	441a      	add	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	e008      	b.n	8009888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009876:	4b0c      	ldr	r3, [pc, #48]	; (80098a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	601a      	str	r2, [r3, #0]
 800987e:	e003      	b.n	8009888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	429a      	cmp	r2, r3
 800988e:	d002      	beq.n	8009896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009896:	bf00      	nop
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20005110 	.word	0x20005110
 80098a8:	20005118 	.word	0x20005118

080098ac <memset>:
 80098ac:	4402      	add	r2, r0
 80098ae:	4603      	mov	r3, r0
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d100      	bne.n	80098b6 <memset+0xa>
 80098b4:	4770      	bx	lr
 80098b6:	f803 1b01 	strb.w	r1, [r3], #1
 80098ba:	e7f9      	b.n	80098b0 <memset+0x4>

080098bc <_reclaim_reent>:
 80098bc:	4b29      	ldr	r3, [pc, #164]	; (8009964 <_reclaim_reent+0xa8>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4283      	cmp	r3, r0
 80098c2:	b570      	push	{r4, r5, r6, lr}
 80098c4:	4604      	mov	r4, r0
 80098c6:	d04b      	beq.n	8009960 <_reclaim_reent+0xa4>
 80098c8:	69c3      	ldr	r3, [r0, #28]
 80098ca:	b143      	cbz	r3, 80098de <_reclaim_reent+0x22>
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d144      	bne.n	800995c <_reclaim_reent+0xa0>
 80098d2:	69e3      	ldr	r3, [r4, #28]
 80098d4:	6819      	ldr	r1, [r3, #0]
 80098d6:	b111      	cbz	r1, 80098de <_reclaim_reent+0x22>
 80098d8:	4620      	mov	r0, r4
 80098da:	f000 f879 	bl	80099d0 <_free_r>
 80098de:	6961      	ldr	r1, [r4, #20]
 80098e0:	b111      	cbz	r1, 80098e8 <_reclaim_reent+0x2c>
 80098e2:	4620      	mov	r0, r4
 80098e4:	f000 f874 	bl	80099d0 <_free_r>
 80098e8:	69e1      	ldr	r1, [r4, #28]
 80098ea:	b111      	cbz	r1, 80098f2 <_reclaim_reent+0x36>
 80098ec:	4620      	mov	r0, r4
 80098ee:	f000 f86f 	bl	80099d0 <_free_r>
 80098f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80098f4:	b111      	cbz	r1, 80098fc <_reclaim_reent+0x40>
 80098f6:	4620      	mov	r0, r4
 80098f8:	f000 f86a 	bl	80099d0 <_free_r>
 80098fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098fe:	b111      	cbz	r1, 8009906 <_reclaim_reent+0x4a>
 8009900:	4620      	mov	r0, r4
 8009902:	f000 f865 	bl	80099d0 <_free_r>
 8009906:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009908:	b111      	cbz	r1, 8009910 <_reclaim_reent+0x54>
 800990a:	4620      	mov	r0, r4
 800990c:	f000 f860 	bl	80099d0 <_free_r>
 8009910:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009912:	b111      	cbz	r1, 800991a <_reclaim_reent+0x5e>
 8009914:	4620      	mov	r0, r4
 8009916:	f000 f85b 	bl	80099d0 <_free_r>
 800991a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800991c:	b111      	cbz	r1, 8009924 <_reclaim_reent+0x68>
 800991e:	4620      	mov	r0, r4
 8009920:	f000 f856 	bl	80099d0 <_free_r>
 8009924:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009926:	b111      	cbz	r1, 800992e <_reclaim_reent+0x72>
 8009928:	4620      	mov	r0, r4
 800992a:	f000 f851 	bl	80099d0 <_free_r>
 800992e:	6a23      	ldr	r3, [r4, #32]
 8009930:	b1b3      	cbz	r3, 8009960 <_reclaim_reent+0xa4>
 8009932:	4620      	mov	r0, r4
 8009934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009938:	4718      	bx	r3
 800993a:	5949      	ldr	r1, [r1, r5]
 800993c:	b941      	cbnz	r1, 8009950 <_reclaim_reent+0x94>
 800993e:	3504      	adds	r5, #4
 8009940:	69e3      	ldr	r3, [r4, #28]
 8009942:	2d80      	cmp	r5, #128	; 0x80
 8009944:	68d9      	ldr	r1, [r3, #12]
 8009946:	d1f8      	bne.n	800993a <_reclaim_reent+0x7e>
 8009948:	4620      	mov	r0, r4
 800994a:	f000 f841 	bl	80099d0 <_free_r>
 800994e:	e7c0      	b.n	80098d2 <_reclaim_reent+0x16>
 8009950:	680e      	ldr	r6, [r1, #0]
 8009952:	4620      	mov	r0, r4
 8009954:	f000 f83c 	bl	80099d0 <_free_r>
 8009958:	4631      	mov	r1, r6
 800995a:	e7ef      	b.n	800993c <_reclaim_reent+0x80>
 800995c:	2500      	movs	r5, #0
 800995e:	e7ef      	b.n	8009940 <_reclaim_reent+0x84>
 8009960:	bd70      	pop	{r4, r5, r6, pc}
 8009962:	bf00      	nop
 8009964:	20000088 	.word	0x20000088

08009968 <__libc_init_array>:
 8009968:	b570      	push	{r4, r5, r6, lr}
 800996a:	4d0d      	ldr	r5, [pc, #52]	; (80099a0 <__libc_init_array+0x38>)
 800996c:	4c0d      	ldr	r4, [pc, #52]	; (80099a4 <__libc_init_array+0x3c>)
 800996e:	1b64      	subs	r4, r4, r5
 8009970:	10a4      	asrs	r4, r4, #2
 8009972:	2600      	movs	r6, #0
 8009974:	42a6      	cmp	r6, r4
 8009976:	d109      	bne.n	800998c <__libc_init_array+0x24>
 8009978:	4d0b      	ldr	r5, [pc, #44]	; (80099a8 <__libc_init_array+0x40>)
 800997a:	4c0c      	ldr	r4, [pc, #48]	; (80099ac <__libc_init_array+0x44>)
 800997c:	f000 f880 	bl	8009a80 <_init>
 8009980:	1b64      	subs	r4, r4, r5
 8009982:	10a4      	asrs	r4, r4, #2
 8009984:	2600      	movs	r6, #0
 8009986:	42a6      	cmp	r6, r4
 8009988:	d105      	bne.n	8009996 <__libc_init_array+0x2e>
 800998a:	bd70      	pop	{r4, r5, r6, pc}
 800998c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009990:	4798      	blx	r3
 8009992:	3601      	adds	r6, #1
 8009994:	e7ee      	b.n	8009974 <__libc_init_array+0xc>
 8009996:	f855 3b04 	ldr.w	r3, [r5], #4
 800999a:	4798      	blx	r3
 800999c:	3601      	adds	r6, #1
 800999e:	e7f2      	b.n	8009986 <__libc_init_array+0x1e>
 80099a0:	0800b274 	.word	0x0800b274
 80099a4:	0800b274 	.word	0x0800b274
 80099a8:	0800b274 	.word	0x0800b274
 80099ac:	0800b278 	.word	0x0800b278

080099b0 <__retarget_lock_acquire_recursive>:
 80099b0:	4770      	bx	lr

080099b2 <__retarget_lock_release_recursive>:
 80099b2:	4770      	bx	lr

080099b4 <memcpy>:
 80099b4:	440a      	add	r2, r1
 80099b6:	4291      	cmp	r1, r2
 80099b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80099bc:	d100      	bne.n	80099c0 <memcpy+0xc>
 80099be:	4770      	bx	lr
 80099c0:	b510      	push	{r4, lr}
 80099c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099ca:	4291      	cmp	r1, r2
 80099cc:	d1f9      	bne.n	80099c2 <memcpy+0xe>
 80099ce:	bd10      	pop	{r4, pc}

080099d0 <_free_r>:
 80099d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099d2:	2900      	cmp	r1, #0
 80099d4:	d044      	beq.n	8009a60 <_free_r+0x90>
 80099d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099da:	9001      	str	r0, [sp, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f1a1 0404 	sub.w	r4, r1, #4
 80099e2:	bfb8      	it	lt
 80099e4:	18e4      	addlt	r4, r4, r3
 80099e6:	f000 f83f 	bl	8009a68 <__malloc_lock>
 80099ea:	4a1e      	ldr	r2, [pc, #120]	; (8009a64 <_free_r+0x94>)
 80099ec:	9801      	ldr	r0, [sp, #4]
 80099ee:	6813      	ldr	r3, [r2, #0]
 80099f0:	b933      	cbnz	r3, 8009a00 <_free_r+0x30>
 80099f2:	6063      	str	r3, [r4, #4]
 80099f4:	6014      	str	r4, [r2, #0]
 80099f6:	b003      	add	sp, #12
 80099f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099fc:	f000 b83a 	b.w	8009a74 <__malloc_unlock>
 8009a00:	42a3      	cmp	r3, r4
 8009a02:	d908      	bls.n	8009a16 <_free_r+0x46>
 8009a04:	6825      	ldr	r5, [r4, #0]
 8009a06:	1961      	adds	r1, r4, r5
 8009a08:	428b      	cmp	r3, r1
 8009a0a:	bf01      	itttt	eq
 8009a0c:	6819      	ldreq	r1, [r3, #0]
 8009a0e:	685b      	ldreq	r3, [r3, #4]
 8009a10:	1949      	addeq	r1, r1, r5
 8009a12:	6021      	streq	r1, [r4, #0]
 8009a14:	e7ed      	b.n	80099f2 <_free_r+0x22>
 8009a16:	461a      	mov	r2, r3
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	b10b      	cbz	r3, 8009a20 <_free_r+0x50>
 8009a1c:	42a3      	cmp	r3, r4
 8009a1e:	d9fa      	bls.n	8009a16 <_free_r+0x46>
 8009a20:	6811      	ldr	r1, [r2, #0]
 8009a22:	1855      	adds	r5, r2, r1
 8009a24:	42a5      	cmp	r5, r4
 8009a26:	d10b      	bne.n	8009a40 <_free_r+0x70>
 8009a28:	6824      	ldr	r4, [r4, #0]
 8009a2a:	4421      	add	r1, r4
 8009a2c:	1854      	adds	r4, r2, r1
 8009a2e:	42a3      	cmp	r3, r4
 8009a30:	6011      	str	r1, [r2, #0]
 8009a32:	d1e0      	bne.n	80099f6 <_free_r+0x26>
 8009a34:	681c      	ldr	r4, [r3, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	6053      	str	r3, [r2, #4]
 8009a3a:	440c      	add	r4, r1
 8009a3c:	6014      	str	r4, [r2, #0]
 8009a3e:	e7da      	b.n	80099f6 <_free_r+0x26>
 8009a40:	d902      	bls.n	8009a48 <_free_r+0x78>
 8009a42:	230c      	movs	r3, #12
 8009a44:	6003      	str	r3, [r0, #0]
 8009a46:	e7d6      	b.n	80099f6 <_free_r+0x26>
 8009a48:	6825      	ldr	r5, [r4, #0]
 8009a4a:	1961      	adds	r1, r4, r5
 8009a4c:	428b      	cmp	r3, r1
 8009a4e:	bf04      	itt	eq
 8009a50:	6819      	ldreq	r1, [r3, #0]
 8009a52:	685b      	ldreq	r3, [r3, #4]
 8009a54:	6063      	str	r3, [r4, #4]
 8009a56:	bf04      	itt	eq
 8009a58:	1949      	addeq	r1, r1, r5
 8009a5a:	6021      	streq	r1, [r4, #0]
 8009a5c:	6054      	str	r4, [r2, #4]
 8009a5e:	e7ca      	b.n	80099f6 <_free_r+0x26>
 8009a60:	b003      	add	sp, #12
 8009a62:	bd30      	pop	{r4, r5, pc}
 8009a64:	20005264 	.word	0x20005264

08009a68 <__malloc_lock>:
 8009a68:	4801      	ldr	r0, [pc, #4]	; (8009a70 <__malloc_lock+0x8>)
 8009a6a:	f7ff bfa1 	b.w	80099b0 <__retarget_lock_acquire_recursive>
 8009a6e:	bf00      	nop
 8009a70:	20005260 	.word	0x20005260

08009a74 <__malloc_unlock>:
 8009a74:	4801      	ldr	r0, [pc, #4]	; (8009a7c <__malloc_unlock+0x8>)
 8009a76:	f7ff bf9c 	b.w	80099b2 <__retarget_lock_release_recursive>
 8009a7a:	bf00      	nop
 8009a7c:	20005260 	.word	0x20005260

08009a80 <_init>:
 8009a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a82:	bf00      	nop
 8009a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a86:	bc08      	pop	{r3}
 8009a88:	469e      	mov	lr, r3
 8009a8a:	4770      	bx	lr

08009a8c <_fini>:
 8009a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8e:	bf00      	nop
 8009a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a92:	bc08      	pop	{r3}
 8009a94:	469e      	mov	lr, r3
 8009a96:	4770      	bx	lr
