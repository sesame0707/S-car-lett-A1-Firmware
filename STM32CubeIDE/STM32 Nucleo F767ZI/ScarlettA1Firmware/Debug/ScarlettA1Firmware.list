
ScarlettA1Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eba0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae4  0800eda0  0800eda0  0001eda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010884  08010884  000300c4  2**0
                  CONTENTS
  4 .ARM          00000008  08010884  08010884  00020884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801088c  0801088c  000300c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801088c  0801088c  0002088c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010890  08010890  00020890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08010894  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007ab4  200000c4  08010958  000300c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007b78  08010958  00037b78  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300f2  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d05e  00000000  00000000  00030135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006300  00000000  00000000  0005d193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002350  00000000  00000000  00063498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b34  00000000  00000000  000657e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f6e4  00000000  00000000  0006731c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f4e0  00000000  00000000  00096a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001146e8  00000000  00000000  000c5ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009a08  00000000  00000000  001da5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001e3fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000c4 	.word	0x200000c4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ed88 	.word	0x0800ed88

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000c8 	.word	0x200000c8
 800023c:	0800ed88 	.word	0x0800ed88

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <setLEDStripesEffect>:
 */

#include "commonFunctions.h"

/* LED stripes */
void setLEDStripesEffect(enum StripesEffect stripesEffect, struct DesiredStripesColor *desiredStripesColor) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	switch (stripesEffect) {
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	2b03      	cmp	r3, #3
 80005ec:	d832      	bhi.n	8000654 <setLEDStripesEffect+0x78>
 80005ee:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <setLEDStripesEffect+0x18>)
 80005f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f4:	08000605 	.word	0x08000605
 80005f8:	08000619 	.word	0x08000619
 80005fc:	0800062d 	.word	0x0800062d
 8000600:	08000641 	.word	0x08000641
	case 0:
		desiredStripesColor->red = 0x00;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	709a      	strb	r2, [r3, #2]
		break;
 8000616:	e01d      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 1:
		desiredStripesColor->red = 0x00;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2200      	movs	r2, #0
 8000622:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x2B;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	222b      	movs	r2, #43	; 0x2b
 8000628:	709a      	strb	r2, [r3, #2]
		break;
 800062a:	e013      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 2:
		desiredStripesColor->red = 0x1B;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	221b      	movs	r2, #27
 8000630:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x1B;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	221b      	movs	r2, #27
 8000636:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x1B;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	221b      	movs	r2, #27
 800063c:	709a      	strb	r2, [r3, #2]
		break;
 800063e:	e009      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 3:
		desiredStripesColor->red = 0x27;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	2227      	movs	r2, #39	; 0x27
 8000644:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x13;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	2213      	movs	r2, #19
 800064a:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	2200      	movs	r2, #0
 8000650:	709a      	strb	r2, [r3, #2]
		break;
 8000652:	bf00      	nop
	}
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <setBLDCMotorSpeed>:

/* BLDC motor */
void setBLDCMotorSpeed(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	switch(sliderAccelerateDecelerateCurrentValue) {
 8000664:	4b38      	ldr	r3, [pc, #224]	; (8000748 <setBLDCMotorSpeed+0xe8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	3302      	adds	r3, #2
 800066a:	2b06      	cmp	r3, #6
 800066c:	d84b      	bhi.n	8000706 <setBLDCMotorSpeed+0xa6>
 800066e:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <setBLDCMotorSpeed+0x14>)
 8000670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000674:	08000691 	.word	0x08000691
 8000678:	080006a3 	.word	0x080006a3
 800067c:	080006b5 	.word	0x080006b5
 8000680:	080006bf 	.word	0x080006bf
 8000684:	080006d1 	.word	0x080006d1
 8000688:	080006e3 	.word	0x080006e3
 800068c:	080006f5 	.word	0x080006f5
	case -2:
	  BLDCMotorSpeedVoltage = 0.65;
 8000690:	4b2e      	ldr	r3, [pc, #184]	; (800074c <setBLDCMotorSpeed+0xec>)
 8000692:	4a2f      	ldr	r2, [pc, #188]	; (8000750 <setBLDCMotorSpeed+0xf0>)
 8000694:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2110      	movs	r1, #16
 800069a:	482e      	ldr	r0, [pc, #184]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 800069c:	f003 fcae 	bl	8003ffc <HAL_GPIO_WritePin>
	  break;
 80006a0:	e031      	b.n	8000706 <setBLDCMotorSpeed+0xa6>
	case -1:
	  BLDCMotorSpeedVoltage = 0.45;
 80006a2:	4b2a      	ldr	r3, [pc, #168]	; (800074c <setBLDCMotorSpeed+0xec>)
 80006a4:	4a2c      	ldr	r2, [pc, #176]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006a6:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2110      	movs	r1, #16
 80006ac:	4829      	ldr	r0, [pc, #164]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006ae:	f003 fca5 	bl	8003ffc <HAL_GPIO_WritePin>
	  break;
 80006b2:	e028      	b.n	8000706 <setBLDCMotorSpeed+0xa6>
	case 0:
	  BLDCMotorSpeedVoltage = 0.0;
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <setBLDCMotorSpeed+0xec>)
 80006b6:	f04f 0200 	mov.w	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
	  break;
 80006bc:	e023      	b.n	8000706 <setBLDCMotorSpeed+0xa6>
	case 1:
	  BLDCMotorSpeedVoltage = 0.45;
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <setBLDCMotorSpeed+0xec>)
 80006c0:	4a25      	ldr	r2, [pc, #148]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006c2:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2110      	movs	r1, #16
 80006c8:	4822      	ldr	r0, [pc, #136]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006ca:	f003 fc97 	bl	8003ffc <HAL_GPIO_WritePin>
	  break;
 80006ce:	e01a      	b.n	8000706 <setBLDCMotorSpeed+0xa6>
	case 2:
	  BLDCMotorSpeedVoltage = 0.65;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <setBLDCMotorSpeed+0xec>)
 80006d2:	4a1f      	ldr	r2, [pc, #124]	; (8000750 <setBLDCMotorSpeed+0xf0>)
 80006d4:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2110      	movs	r1, #16
 80006da:	481e      	ldr	r0, [pc, #120]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006dc:	f003 fc8e 	bl	8003ffc <HAL_GPIO_WritePin>
	  break;
 80006e0:	e011      	b.n	8000706 <setBLDCMotorSpeed+0xa6>
	case 3:
	  BLDCMotorSpeedVoltage = 0.9;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <setBLDCMotorSpeed+0xec>)
 80006e4:	4a1d      	ldr	r2, [pc, #116]	; (800075c <setBLDCMotorSpeed+0xfc>)
 80006e6:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2110      	movs	r1, #16
 80006ec:	4819      	ldr	r0, [pc, #100]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006ee:	f003 fc85 	bl	8003ffc <HAL_GPIO_WritePin>
	  break;
 80006f2:	e008      	b.n	8000706 <setBLDCMotorSpeed+0xa6>
	case 4:
	  BLDCMotorSpeedVoltage = 1.2;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <setBLDCMotorSpeed+0xec>)
 80006f6:	4a1a      	ldr	r2, [pc, #104]	; (8000760 <setBLDCMotorSpeed+0x100>)
 80006f8:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2110      	movs	r1, #16
 80006fe:	4815      	ldr	r0, [pc, #84]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 8000700:	f003 fc7c 	bl	8003ffc <HAL_GPIO_WritePin>
	  break;
 8000704:	bf00      	nop
	}

	BLDCMotorSpeedValue = BLDCMotorSpeedVoltage * (0xfff + 1) / 3.3;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <setBLDCMotorSpeed+0xec>)
 8000708:	edd3 7a00 	vldr	s15, [r3]
 800070c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000764 <setBLDCMotorSpeed+0x104>
 8000710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000714:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000718:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000740 <setBLDCMotorSpeed+0xe0>
 800071c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000720:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000724:	ee17 2a90 	vmov	r2, s15
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <setBLDCMotorSpeed+0x108>)
 800072a:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, BLDCMotorSpeedValue);
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <setBLDCMotorSpeed+0x108>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <setBLDCMotorSpeed+0x10c>)
 8000736:	f002 fe23 	bl	8003380 <HAL_DAC_SetValue>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	66666666 	.word	0x66666666
 8000744:	400a6666 	.word	0x400a6666
 8000748:	200000ec 	.word	0x200000ec
 800074c:	200000f4 	.word	0x200000f4
 8000750:	3f266666 	.word	0x3f266666
 8000754:	40020400 	.word	0x40020400
 8000758:	3ee66666 	.word	0x3ee66666
 800075c:	3f666666 	.word	0x3f666666
 8000760:	3f99999a 	.word	0x3f99999a
 8000764:	45800000 	.word	0x45800000
 8000768:	200000f8 	.word	0x200000f8
 800076c:	20000110 	.word	0x20000110

08000770 <moveStepperMotor>:

/* Stepper motor */
void moveStepperMotor(enum Direction direction) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	if(direction == LEFT) {
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d106      	bne.n	800078e <moveStepperMotor+0x1e>
		HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000786:	480c      	ldr	r0, [pc, #48]	; (80007b8 <moveStepperMotor+0x48>)
 8000788:	f003 fc38 	bl	8003ffc <HAL_GPIO_WritePin>
 800078c:	e005      	b.n	800079a <moveStepperMotor+0x2a>
	} else {
		HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, SET);
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000794:	4808      	ldr	r0, [pc, #32]	; (80007b8 <moveStepperMotor+0x48>)
 8000796:	f003 fc31 	bl	8003ffc <HAL_GPIO_WritePin>
	}

	TIM4->CCR3 = 500;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <moveStepperMotor+0x4c>)
 800079c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007a0:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(70);
 80007a2:	2046      	movs	r0, #70	; 0x46
 80007a4:	f008 fb92 	bl	8008ecc <osDelay>
	TIM4->CCR3 = 0;
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <moveStepperMotor+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40020c00 	.word	0x40020c00
 80007bc:	40000800 	.word	0x40000800

080007c0 <moveStepperMotorUntil>:

void moveStepperMotorUntil(int targetLeftRightPosition) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	if(sliderLeftRightCurrentValue == targetLeftRightPosition) {
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <moveStepperMotorUntil+0x7c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d02f      	beq.n	8000832 <moveStepperMotorUntil+0x72>
		// Do nothing
	} else if(sliderLeftRightCurrentValue > targetLeftRightPosition) {
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <moveStepperMotorUntil+0x7c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	429a      	cmp	r2, r3
 80007da:	da15      	bge.n	8000808 <moveStepperMotorUntil+0x48>
		// Turn left until target left/right position is reached
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue --) {
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <moveStepperMotorUntil+0x7c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	e00c      	b.n	80007fc <moveStepperMotorUntil+0x3c>
			moveStepperMotor(LEFT);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff ffc4 	bl	8000770 <moveStepperMotor>
			osDelay(LEFT_RIGHT_DURATION);
 80007e8:	2032      	movs	r0, #50	; 0x32
 80007ea:	f008 fb6f 	bl	8008ecc <osDelay>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue --) {
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <moveStepperMotorUntil+0x7c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	1e5a      	subs	r2, r3, #1
 80007f4:	4911      	ldr	r1, [pc, #68]	; (800083c <moveStepperMotorUntil+0x7c>)
 80007f6:	600a      	str	r2, [r1, #0]
 80007f8:	4a11      	ldr	r2, [pc, #68]	; (8000840 <moveStepperMotorUntil+0x80>)
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <moveStepperMotorUntil+0x7c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	429a      	cmp	r2, r3
 8000804:	d1ed      	bne.n	80007e2 <moveStepperMotorUntil+0x22>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
			moveStepperMotor(RIGHT);
			osDelay(LEFT_RIGHT_DURATION);
		}
	}
}
 8000806:	e014      	b.n	8000832 <moveStepperMotorUntil+0x72>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <moveStepperMotorUntil+0x7c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	e00c      	b.n	8000828 <moveStepperMotorUntil+0x68>
			moveStepperMotor(RIGHT);
 800080e:	2001      	movs	r0, #1
 8000810:	f7ff ffae 	bl	8000770 <moveStepperMotor>
			osDelay(LEFT_RIGHT_DURATION);
 8000814:	2032      	movs	r0, #50	; 0x32
 8000816:	f008 fb59 	bl	8008ecc <osDelay>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <moveStepperMotorUntil+0x7c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	4906      	ldr	r1, [pc, #24]	; (800083c <moveStepperMotorUntil+0x7c>)
 8000822:	600a      	str	r2, [r1, #0]
 8000824:	4a06      	ldr	r2, [pc, #24]	; (8000840 <moveStepperMotorUntil+0x80>)
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <moveStepperMotorUntil+0x7c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	429a      	cmp	r2, r3
 8000830:	d1ed      	bne.n	800080e <moveStepperMotorUntil+0x4e>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000100 	.word	0x20000100
 8000840:	200000fc 	.word	0x200000fc

08000844 <park>:

/* LiDAR sphere */
void park(enum Direction direction) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	// Private variables
	int targetLeftRightPosition = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]

	// Stop BLDC motor
	sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8000852:	4b4f      	ldr	r3, [pc, #316]	; (8000990 <park+0x14c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a4f      	ldr	r2, [pc, #316]	; (8000994 <park+0x150>)
 8000858:	6013      	str	r3, [r2, #0]
	sliderAccelerateDecelerateCurrentValue = 0;
 800085a:	4b4d      	ldr	r3, [pc, #308]	; (8000990 <park+0x14c>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
	setBLDCMotorSpeed();
 8000860:	f7ff fefe 	bl	8000660 <setBLDCMotorSpeed>

	// Set LED stripes
	stripesEffect = PARKING;
 8000864:	4b4c      	ldr	r3, [pc, #304]	; (8000998 <park+0x154>)
 8000866:	2203      	movs	r2, #3
 8000868:	701a      	strb	r2, [r3, #0]
	ommitToggle = true;
 800086a:	4b4c      	ldr	r3, [pc, #304]	; (800099c <park+0x158>)
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
	internalFunctionCall = true;
 8000870:	4b4b      	ldr	r3, [pc, #300]	; (80009a0 <park+0x15c>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
	vTaskResume(LEDStripesTaskHandle);
 8000876:	4b4b      	ldr	r3, [pc, #300]	; (80009a4 <park+0x160>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4618      	mov	r0, r3
 800087c:	f009 fdee 	bl	800a45c <vTaskResume>

	// Toggle left/right blinkers
	if(direction == LEFT) {
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d108      	bne.n	8000898 <park+0x54>
		internalFunctionCall = true;
 8000886:	4b46      	ldr	r3, [pc, #280]	; (80009a0 <park+0x15c>)
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
		vTaskResume(LeftBlinkersTasHandle);
 800088c:	4b46      	ldr	r3, [pc, #280]	; (80009a8 <park+0x164>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f009 fde3 	bl	800a45c <vTaskResume>
 8000896:	e007      	b.n	80008a8 <park+0x64>
	} else {
		internalFunctionCall = true;
 8000898:	4b41      	ldr	r3, [pc, #260]	; (80009a0 <park+0x15c>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
		vTaskResume(RightBlinkersTaHandle);
 800089e:	4b43      	ldr	r3, [pc, #268]	; (80009ac <park+0x168>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f009 fdda 	bl	800a45c <vTaskResume>
	}

	// Turn left/right to the destination
	if(direction == LEFT) {
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d103      	bne.n	80008b6 <park+0x72>
		targetLeftRightPosition = -3;
 80008ae:	f06f 0302 	mvn.w	r3, #2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	e001      	b.n	80008ba <park+0x76>
	} else {
		targetLeftRightPosition = 3;
 80008b6:	2303      	movs	r3, #3
 80008b8:	60fb      	str	r3, [r7, #12]
	}
	moveStepperMotorUntil(targetLeftRightPosition);
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f7ff ff80 	bl	80007c0 <moveStepperMotorUntil>

	// Withdraw a little bit
	internalFunctionCall = true;
 80008c0:	4b37      	ldr	r3, [pc, #220]	; (80009a0 <park+0x15c>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
	vTaskResume(DecelerateTaskHandle);
 80008c6:	4b3a      	ldr	r3, [pc, #232]	; (80009b0 <park+0x16c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f009 fdc6 	bl	800a45c <vTaskResume>
	osDelay(ACCELERATE_DECELERATE_DURATION * 0.60);
 80008d0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80008d4:	f008 fafa 	bl	8008ecc <osDelay>
	internalFunctionCall = true;
 80008d8:	4b31      	ldr	r3, [pc, #196]	; (80009a0 <park+0x15c>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
	vTaskResume(AccelerateTaskHandle);
 80008de:	4b35      	ldr	r3, [pc, #212]	; (80009b4 <park+0x170>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f009 fdba 	bl	800a45c <vTaskResume>

	// Turn left/right from the destination
	if(direction == LEFT) {
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d102      	bne.n	80008f4 <park+0xb0>
		targetLeftRightPosition = 3;
 80008ee:	2303      	movs	r3, #3
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	e002      	b.n	80008fa <park+0xb6>
	} else {
		targetLeftRightPosition = -3;
 80008f4:	f06f 0302 	mvn.w	r3, #2
 80008f8:	60fb      	str	r3, [r7, #12]
	}
	moveStepperMotorUntil(targetLeftRightPosition);
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f7ff ff60 	bl	80007c0 <moveStepperMotorUntil>

	// Withdraw a little bit
	internalFunctionCall = true;
 8000900:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <park+0x15c>)
 8000902:	2201      	movs	r2, #1
 8000904:	701a      	strb	r2, [r3, #0]
	vTaskResume(DecelerateTaskHandle);
 8000906:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <park+0x16c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f009 fda6 	bl	800a45c <vTaskResume>
	osDelay(ACCELERATE_DECELERATE_DURATION * 0.65);
 8000910:	f640 703c 	movw	r0, #3900	; 0xf3c
 8000914:	f008 fada 	bl	8008ecc <osDelay>
	internalFunctionCall = true;
 8000918:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <park+0x15c>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
	vTaskResume(AccelerateTaskHandle);
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <park+0x170>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f009 fd9a 	bl	800a45c <vTaskResume>

	// Turn left/right to center position
	targetLeftRightPosition = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
	moveStepperMotorUntil(targetLeftRightPosition);
 800092c:	68f8      	ldr	r0, [r7, #12]
 800092e:	f7ff ff47 	bl	80007c0 <moveStepperMotorUntil>

	// Drive forward a little bit
	internalFunctionCall = true;
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <park+0x15c>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
	vTaskResume(AccelerateTaskHandle);
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <park+0x170>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f009 fd8d 	bl	800a45c <vTaskResume>
	osDelay(ACCELERATE_DECELERATE_DURATION * 0.85);
 8000942:	f241 30ec 	movw	r0, #5100	; 0x13ec
 8000946:	f008 fac1 	bl	8008ecc <osDelay>
	internalFunctionCall = true;
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <park+0x15c>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
	vTaskResume(DecelerateTaskHandle);
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <park+0x16c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f009 fd81 	bl	800a45c <vTaskResume>

	// Set LED stripes
	if(isOn) {
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <park+0x174>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d003      	beq.n	800096c <park+0x128>
		stripesEffect = DEFAULT;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <park+0x154>)
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
 800096a:	e002      	b.n	8000972 <park+0x12e>
	} else {
		stripesEffect = NONE;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <park+0x154>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
	}
	ommitToggle = true;
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <park+0x158>)
 8000974:	2201      	movs	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
	internalFunctionCall = true;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <park+0x15c>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
	vTaskResume(LEDStripesTaskHandle);
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <park+0x160>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f009 fd6a 	bl	800a45c <vTaskResume>
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000ec 	.word	0x200000ec
 8000994:	200000e8 	.word	0x200000e8
 8000998:	200000e2 	.word	0x200000e2
 800099c:	200000e4 	.word	0x200000e4
 80009a0:	200000e0 	.word	0x200000e0
 80009a4:	20000134 	.word	0x20000134
 80009a8:	20000138 	.word	0x20000138
 80009ac:	2000013c 	.word	0x2000013c
 80009b0:	2000014c 	.word	0x2000014c
 80009b4:	20000148 	.word	0x20000148
 80009b8:	200000e3 	.word	0x200000e3

080009bc <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_DAC_Init+0x4c>)
 80009cc:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <MX_DAC_Init+0x50>)
 80009ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_DAC_Init+0x4c>)
 80009d2:	f002 fc07 	bl	80031e4 <HAL_DAC_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80009dc:	f001 f9d4 	bl	8001d88 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009e8:	463b      	mov	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <MX_DAC_Init+0x4c>)
 80009f0:	f002 fcf5 	bl	80033de <HAL_DAC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80009fa:	f001 f9c5 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000110 	.word	0x20000110
 8000a0c:	40007400 	.word	0x40007400

08000a10 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <HAL_DAC_MspInit+0x84>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d12b      	bne.n	8000a8a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <HAL_DAC_MspInit+0x88>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <HAL_DAC_MspInit+0x88>)
 8000a38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <HAL_DAC_MspInit+0x88>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <HAL_DAC_MspInit+0x88>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <HAL_DAC_MspInit+0x88>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <HAL_DAC_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = BLDCMotorStep_Pin;
 8000a62:	2310      	movs	r3, #16
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a66:	2303      	movs	r3, #3
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLDCMotorStep_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <HAL_DAC_MspInit+0x8c>)
 8000a76:	f003 f915 	bl	8003ca4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	2036      	movs	r0, #54	; 0x36
 8000a80:	f002 fb86 	bl	8003190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a84:	2036      	movs	r0, #54	; 0x36
 8000a86:	f002 fb9f 	bl	80031c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40007400 	.word	0x40007400
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_DMA_Init+0x38>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <MX_DMA_Init+0x38>)
 8000aac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_DMA_Init+0x38>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2105      	movs	r1, #5
 8000ac2:	203b      	movs	r0, #59	; 0x3b
 8000ac4:	f002 fb64 	bl	8003190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ac8:	203b      	movs	r0, #59	; 0x3b
 8000aca:	f002 fb7d 	bl	80031c8 <HAL_NVIC_EnableIRQ>

}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of ConnectionTaskTimer */
  ConnectionTaskTimerHandle = osTimerNew(CallbackConnectionTaskTimer, osTimerOnce, NULL, &ConnectionTaskTimer_attributes);
 8000ae0:	4b49      	ldr	r3, [pc, #292]	; (8000c08 <MX_FREERTOS_Init+0x12c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4849      	ldr	r0, [pc, #292]	; (8000c0c <MX_FREERTOS_Init+0x130>)
 8000ae8:	f008 fa34 	bl	8008f54 <osTimerNew>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4a48      	ldr	r2, [pc, #288]	; (8000c10 <MX_FREERTOS_Init+0x134>)
 8000af0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8000af2:	4a48      	ldr	r2, [pc, #288]	; (8000c14 <MX_FREERTOS_Init+0x138>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	4848      	ldr	r0, [pc, #288]	; (8000c18 <MX_FREERTOS_Init+0x13c>)
 8000af8:	f008 f942 	bl	8008d80 <osThreadNew>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a47      	ldr	r2, [pc, #284]	; (8000c1c <MX_FREERTOS_Init+0x140>)
 8000b00:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartDispatcherTask, NULL, &DispatcherTask_attributes);
 8000b02:	4a47      	ldr	r2, [pc, #284]	; (8000c20 <MX_FREERTOS_Init+0x144>)
 8000b04:	2100      	movs	r1, #0
 8000b06:	4847      	ldr	r0, [pc, #284]	; (8000c24 <MX_FREERTOS_Init+0x148>)
 8000b08:	f008 f93a 	bl	8008d80 <osThreadNew>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a46      	ldr	r2, [pc, #280]	; (8000c28 <MX_FREERTOS_Init+0x14c>)
 8000b10:	6013      	str	r3, [r2, #0]

  /* creation of StopTask */
  StopTaskHandle = osThreadNew(StartStopTask, NULL, &StopTask_attributes);
 8000b12:	4a46      	ldr	r2, [pc, #280]	; (8000c2c <MX_FREERTOS_Init+0x150>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4846      	ldr	r0, [pc, #280]	; (8000c30 <MX_FREERTOS_Init+0x154>)
 8000b18:	f008 f932 	bl	8008d80 <osThreadNew>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4a45      	ldr	r2, [pc, #276]	; (8000c34 <MX_FREERTOS_Init+0x158>)
 8000b20:	6013      	str	r3, [r2, #0]

  /* creation of DrivingLightsTa */
  DrivingLightsTaHandle = osThreadNew(StartDrivingLightsTask, NULL, &DrivingLightsTa_attributes);
 8000b22:	4a45      	ldr	r2, [pc, #276]	; (8000c38 <MX_FREERTOS_Init+0x15c>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	4845      	ldr	r0, [pc, #276]	; (8000c3c <MX_FREERTOS_Init+0x160>)
 8000b28:	f008 f92a 	bl	8008d80 <osThreadNew>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a44      	ldr	r2, [pc, #272]	; (8000c40 <MX_FREERTOS_Init+0x164>)
 8000b30:	6013      	str	r3, [r2, #0]

  /* creation of LEDStripesTask */
  LEDStripesTaskHandle = osThreadNew(StartLEDStripesTask, NULL, &LEDStripesTask_attributes);
 8000b32:	4a44      	ldr	r2, [pc, #272]	; (8000c44 <MX_FREERTOS_Init+0x168>)
 8000b34:	2100      	movs	r1, #0
 8000b36:	4844      	ldr	r0, [pc, #272]	; (8000c48 <MX_FREERTOS_Init+0x16c>)
 8000b38:	f008 f922 	bl	8008d80 <osThreadNew>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a43      	ldr	r2, [pc, #268]	; (8000c4c <MX_FREERTOS_Init+0x170>)
 8000b40:	6013      	str	r3, [r2, #0]

  /* creation of LeftBlinkersTas */
  LeftBlinkersTasHandle = osThreadNew(StartLeftBlinkersTask, NULL, &LeftBlinkersTas_attributes);
 8000b42:	4a43      	ldr	r2, [pc, #268]	; (8000c50 <MX_FREERTOS_Init+0x174>)
 8000b44:	2100      	movs	r1, #0
 8000b46:	4843      	ldr	r0, [pc, #268]	; (8000c54 <MX_FREERTOS_Init+0x178>)
 8000b48:	f008 f91a 	bl	8008d80 <osThreadNew>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	4a42      	ldr	r2, [pc, #264]	; (8000c58 <MX_FREERTOS_Init+0x17c>)
 8000b50:	6013      	str	r3, [r2, #0]

  /* creation of RightBlinkersTa */
  RightBlinkersTaHandle = osThreadNew(StartRightBlinkersTask, NULL, &RightBlinkersTa_attributes);
 8000b52:	4a42      	ldr	r2, [pc, #264]	; (8000c5c <MX_FREERTOS_Init+0x180>)
 8000b54:	2100      	movs	r1, #0
 8000b56:	4842      	ldr	r0, [pc, #264]	; (8000c60 <MX_FREERTOS_Init+0x184>)
 8000b58:	f008 f912 	bl	8008d80 <osThreadNew>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4a41      	ldr	r2, [pc, #260]	; (8000c64 <MX_FREERTOS_Init+0x188>)
 8000b60:	6013      	str	r3, [r2, #0]

  /* creation of ParkLeftTask */
  ParkLeftTaskHandle = osThreadNew(StartParkLeftTask, NULL, &ParkLeftTask_attributes);
 8000b62:	4a41      	ldr	r2, [pc, #260]	; (8000c68 <MX_FREERTOS_Init+0x18c>)
 8000b64:	2100      	movs	r1, #0
 8000b66:	4841      	ldr	r0, [pc, #260]	; (8000c6c <MX_FREERTOS_Init+0x190>)
 8000b68:	f008 f90a 	bl	8008d80 <osThreadNew>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4a40      	ldr	r2, [pc, #256]	; (8000c70 <MX_FREERTOS_Init+0x194>)
 8000b70:	6013      	str	r3, [r2, #0]

  /* creation of ParkRightTask */
  ParkRightTaskHandle = osThreadNew(StartParkRightTask, NULL, &ParkRightTask_attributes);
 8000b72:	4a40      	ldr	r2, [pc, #256]	; (8000c74 <MX_FREERTOS_Init+0x198>)
 8000b74:	2100      	movs	r1, #0
 8000b76:	4840      	ldr	r0, [pc, #256]	; (8000c78 <MX_FREERTOS_Init+0x19c>)
 8000b78:	f008 f902 	bl	8008d80 <osThreadNew>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4a3f      	ldr	r2, [pc, #252]	; (8000c7c <MX_FREERTOS_Init+0x1a0>)
 8000b80:	6013      	str	r3, [r2, #0]

  /* creation of AccelerateTask */
  AccelerateTaskHandle = osThreadNew(StartAccelerateTask, NULL, &AccelerateTask_attributes);
 8000b82:	4a3f      	ldr	r2, [pc, #252]	; (8000c80 <MX_FREERTOS_Init+0x1a4>)
 8000b84:	2100      	movs	r1, #0
 8000b86:	483f      	ldr	r0, [pc, #252]	; (8000c84 <MX_FREERTOS_Init+0x1a8>)
 8000b88:	f008 f8fa 	bl	8008d80 <osThreadNew>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a3e      	ldr	r2, [pc, #248]	; (8000c88 <MX_FREERTOS_Init+0x1ac>)
 8000b90:	6013      	str	r3, [r2, #0]

  /* creation of DecelerateTask */
  DecelerateTaskHandle = osThreadNew(StartDecelerateTask, NULL, &DecelerateTask_attributes);
 8000b92:	4a3e      	ldr	r2, [pc, #248]	; (8000c8c <MX_FREERTOS_Init+0x1b0>)
 8000b94:	2100      	movs	r1, #0
 8000b96:	483e      	ldr	r0, [pc, #248]	; (8000c90 <MX_FREERTOS_Init+0x1b4>)
 8000b98:	f008 f8f2 	bl	8008d80 <osThreadNew>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	4a3d      	ldr	r2, [pc, #244]	; (8000c94 <MX_FREERTOS_Init+0x1b8>)
 8000ba0:	6013      	str	r3, [r2, #0]

  /* creation of TurnLeftTask */
  TurnLeftTaskHandle = osThreadNew(StartTurnLeftTask, NULL, &TurnLeftTask_attributes);
 8000ba2:	4a3d      	ldr	r2, [pc, #244]	; (8000c98 <MX_FREERTOS_Init+0x1bc>)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	483d      	ldr	r0, [pc, #244]	; (8000c9c <MX_FREERTOS_Init+0x1c0>)
 8000ba8:	f008 f8ea 	bl	8008d80 <osThreadNew>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4a3c      	ldr	r2, [pc, #240]	; (8000ca0 <MX_FREERTOS_Init+0x1c4>)
 8000bb0:	6013      	str	r3, [r2, #0]

  /* creation of TurnRightTask */
  TurnRightTaskHandle = osThreadNew(StartTurnRightTask, NULL, &TurnRightTask_attributes);
 8000bb2:	4a3c      	ldr	r2, [pc, #240]	; (8000ca4 <MX_FREERTOS_Init+0x1c8>)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	483c      	ldr	r0, [pc, #240]	; (8000ca8 <MX_FREERTOS_Init+0x1cc>)
 8000bb8:	f008 f8e2 	bl	8008d80 <osThreadNew>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4a3b      	ldr	r2, [pc, #236]	; (8000cac <MX_FREERTOS_Init+0x1d0>)
 8000bc0:	6013      	str	r3, [r2, #0]

  /* creation of ConnectionTask */
  ConnectionTaskHandle = osThreadNew(StartConnectionTask, NULL, &ConnectionTask_attributes);
 8000bc2:	4a3b      	ldr	r2, [pc, #236]	; (8000cb0 <MX_FREERTOS_Init+0x1d4>)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	483b      	ldr	r0, [pc, #236]	; (8000cb4 <MX_FREERTOS_Init+0x1d8>)
 8000bc8:	f008 f8da 	bl	8008d80 <osThreadNew>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4a3a      	ldr	r2, [pc, #232]	; (8000cb8 <MX_FREERTOS_Init+0x1dc>)
 8000bd0:	6013      	str	r3, [r2, #0]

  /* creation of BrakeLightsTask */
  BrakeLightsTaskHandle = osThreadNew(StartBrakeLightsTask, NULL, &BrakeLightsTask_attributes);
 8000bd2:	4a3a      	ldr	r2, [pc, #232]	; (8000cbc <MX_FREERTOS_Init+0x1e0>)
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	483a      	ldr	r0, [pc, #232]	; (8000cc0 <MX_FREERTOS_Init+0x1e4>)
 8000bd8:	f008 f8d2 	bl	8008d80 <osThreadNew>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4a39      	ldr	r2, [pc, #228]	; (8000cc4 <MX_FREERTOS_Init+0x1e8>)
 8000be0:	6013      	str	r3, [r2, #0]

  /* creation of WithdrawLightsT */
  WithdrawLightsTHandle = osThreadNew(StartWithdrawLightsTask, NULL, &WithdrawLightsT_attributes);
 8000be2:	4a39      	ldr	r2, [pc, #228]	; (8000cc8 <MX_FREERTOS_Init+0x1ec>)
 8000be4:	2100      	movs	r1, #0
 8000be6:	4839      	ldr	r0, [pc, #228]	; (8000ccc <MX_FREERTOS_Init+0x1f0>)
 8000be8:	f008 f8ca 	bl	8008d80 <osThreadNew>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4a38      	ldr	r2, [pc, #224]	; (8000cd0 <MX_FREERTOS_Init+0x1f4>)
 8000bf0:	6013      	str	r3, [r2, #0]

  /* creation of ResumeFromStopT */
  ResumeFromStopTHandle = osThreadNew(StartResumeFromStopTask, NULL, &ResumeFromStopT_attributes);
 8000bf2:	4a38      	ldr	r2, [pc, #224]	; (8000cd4 <MX_FREERTOS_Init+0x1f8>)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4838      	ldr	r0, [pc, #224]	; (8000cd8 <MX_FREERTOS_Init+0x1fc>)
 8000bf8:	f008 f8c2 	bl	8008d80 <osThreadNew>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4a37      	ldr	r2, [pc, #220]	; (8000cdc <MX_FREERTOS_Init+0x200>)
 8000c00:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	0800f344 	.word	0x0800f344
 8000c0c:	080017d9 	.word	0x080017d9
 8000c10:	20000168 	.word	0x20000168
 8000c14:	0800f0e0 	.word	0x0800f0e0
 8000c18:	08000ce1 	.word	0x08000ce1
 8000c1c:	20000124 	.word	0x20000124
 8000c20:	0800f104 	.word	0x0800f104
 8000c24:	08000e01 	.word	0x08000e01
 8000c28:	20000128 	.word	0x20000128
 8000c2c:	0800f128 	.word	0x0800f128
 8000c30:	08000f1d 	.word	0x08000f1d
 8000c34:	2000012c 	.word	0x2000012c
 8000c38:	0800f14c 	.word	0x0800f14c
 8000c3c:	08001009 	.word	0x08001009
 8000c40:	20000130 	.word	0x20000130
 8000c44:	0800f170 	.word	0x0800f170
 8000c48:	0800106d 	.word	0x0800106d
 8000c4c:	20000134 	.word	0x20000134
 8000c50:	0800f194 	.word	0x0800f194
 8000c54:	080012d1 	.word	0x080012d1
 8000c58:	20000138 	.word	0x20000138
 8000c5c:	0800f1b8 	.word	0x0800f1b8
 8000c60:	0800134d 	.word	0x0800134d
 8000c64:	2000013c 	.word	0x2000013c
 8000c68:	0800f1dc 	.word	0x0800f1dc
 8000c6c:	080013c9 	.word	0x080013c9
 8000c70:	20000140 	.word	0x20000140
 8000c74:	0800f200 	.word	0x0800f200
 8000c78:	0800141d 	.word	0x0800141d
 8000c7c:	20000144 	.word	0x20000144
 8000c80:	0800f224 	.word	0x0800f224
 8000c84:	08001471 	.word	0x08001471
 8000c88:	20000148 	.word	0x20000148
 8000c8c:	0800f248 	.word	0x0800f248
 8000c90:	0800151d 	.word	0x0800151d
 8000c94:	2000014c 	.word	0x2000014c
 8000c98:	0800f26c 	.word	0x0800f26c
 8000c9c:	080015d9 	.word	0x080015d9
 8000ca0:	20000150 	.word	0x20000150
 8000ca4:	0800f290 	.word	0x0800f290
 8000ca8:	08001659 	.word	0x08001659
 8000cac:	20000154 	.word	0x20000154
 8000cb0:	0800f2b4 	.word	0x0800f2b4
 8000cb4:	080016d5 	.word	0x080016d5
 8000cb8:	20000158 	.word	0x20000158
 8000cbc:	0800f2d8 	.word	0x0800f2d8
 8000cc0:	08001711 	.word	0x08001711
 8000cc4:	2000015c 	.word	0x2000015c
 8000cc8:	0800f2fc 	.word	0x0800f2fc
 8000ccc:	08001741 	.word	0x08001741
 8000cd0:	20000160 	.word	0x20000160
 8000cd4:	0800f320 	.word	0x0800f320
 8000cd8:	0800177d 	.word	0x0800177d
 8000cdc:	20000164 	.word	0x20000164

08000ce0 <StartOLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
	// Initiate display
	ssd1306_Init();
 8000ce8:	f001 f960 	bl	8001fac <ssd1306_Init>
	uint8_t y = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
	ssd1306_Fill(Black);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f001 f9c5 	bl	8002080 <ssd1306_Fill>

	// Set header
	ssd1306_SetCursor(2, y);
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f001 fb02 	bl	8002304 <ssd1306_SetCursor>
	ssd1306_WriteString(headerBootingUp, Font_7x10, White);
 8000d00:	4a36      	ldr	r2, [pc, #216]	; (8000ddc <StartOLEDTask+0xfc>)
 8000d02:	2301      	movs	r3, #1
 8000d04:	ca06      	ldmia	r2, {r1, r2}
 8000d06:	4836      	ldr	r0, [pc, #216]	; (8000de0 <StartOLEDTask+0x100>)
 8000d08:	f001 fad6 	bl	80022b8 <ssd1306_WriteString>
	y += 30;
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	331e      	adds	r3, #30
 8000d10:	73fb      	strb	r3, [r7, #15]

	// Set body
	ssd1306_SetCursor(2, y);
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	4619      	mov	r1, r3
 8000d16:	2002      	movs	r0, #2
 8000d18:	f001 faf4 	bl	8002304 <ssd1306_SetCursor>
	ssd1306_WriteString(bodyVersion, Font_11x18, White);
 8000d1c:	4a31      	ldr	r2, [pc, #196]	; (8000de4 <StartOLEDTask+0x104>)
 8000d1e:	2301      	movs	r3, #1
 8000d20:	ca06      	ldmia	r2, {r1, r2}
 8000d22:	4831      	ldr	r0, [pc, #196]	; (8000de8 <StartOLEDTask+0x108>)
 8000d24:	f001 fac8 	bl	80022b8 <ssd1306_WriteString>
	ssd1306_WriteString(versionName, Font_11x18, White);
 8000d28:	4a2e      	ldr	r2, [pc, #184]	; (8000de4 <StartOLEDTask+0x104>)
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	ca06      	ldmia	r2, {r1, r2}
 8000d2e:	482f      	ldr	r0, [pc, #188]	; (8000dec <StartOLEDTask+0x10c>)
 8000d30:	f001 fac2 	bl	80022b8 <ssd1306_WriteString>
	y += 36;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	3324      	adds	r3, #36	; 0x24
 8000d38:	73fb      	strb	r3, [r7, #15]

	// Show content
	ssd1306_UpdateScreen();
 8000d3a:	f001 f9b9 	bl	80020b0 <ssd1306_UpdateScreen>
	y = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]

	// Delay
	osDelay(STARTUP_DURATION);
 8000d42:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d46:	f008 f8c1 	bl	8008ecc <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  // Clear screen
	  ssd1306_Fill(Black);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f001 f998 	bl	8002080 <ssd1306_Fill>

	  if(isConnected) {
 8000d50:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <StartOLEDTask+0x110>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d01c      	beq.n	8000d94 <StartOLEDTask+0xb4>
		  // Set header
		  ssd1306_SetCursor(2, y);
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	2002      	movs	r0, #2
 8000d60:	f001 fad0 	bl	8002304 <ssd1306_SetCursor>
		  ssd1306_WriteString(headerConnected, Font_7x10, White);
 8000d64:	4a1d      	ldr	r2, [pc, #116]	; (8000ddc <StartOLEDTask+0xfc>)
 8000d66:	2301      	movs	r3, #1
 8000d68:	ca06      	ldmia	r2, {r1, r2}
 8000d6a:	4822      	ldr	r0, [pc, #136]	; (8000df4 <StartOLEDTask+0x114>)
 8000d6c:	f001 faa4 	bl	80022b8 <ssd1306_WriteString>
		  y += 30;
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	331e      	adds	r3, #30
 8000d74:	73fb      	strb	r3, [r7, #15]

		  // Set body
		  ssd1306_SetCursor(2, y);
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f001 fac2 	bl	8002304 <ssd1306_SetCursor>
		  ssd1306_WriteString(bodyLogotype, Font_11x18, White);
 8000d80:	4a18      	ldr	r2, [pc, #96]	; (8000de4 <StartOLEDTask+0x104>)
 8000d82:	2301      	movs	r3, #1
 8000d84:	ca06      	ldmia	r2, {r1, r2}
 8000d86:	481c      	ldr	r0, [pc, #112]	; (8000df8 <StartOLEDTask+0x118>)
 8000d88:	f001 fa96 	bl	80022b8 <ssd1306_WriteString>
		  y += 36;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	3324      	adds	r3, #36	; 0x24
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e01b      	b.n	8000dcc <StartOLEDTask+0xec>
	  } else {
		  // Set header
		  ssd1306_SetCursor(2, y);
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	4619      	mov	r1, r3
 8000d98:	2002      	movs	r0, #2
 8000d9a:	f001 fab3 	bl	8002304 <ssd1306_SetCursor>
		  ssd1306_WriteString(headerDisconnected, Font_7x10, White);
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <StartOLEDTask+0xfc>)
 8000da0:	2301      	movs	r3, #1
 8000da2:	ca06      	ldmia	r2, {r1, r2}
 8000da4:	4815      	ldr	r0, [pc, #84]	; (8000dfc <StartOLEDTask+0x11c>)
 8000da6:	f001 fa87 	bl	80022b8 <ssd1306_WriteString>
		  y += 30;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	331e      	adds	r3, #30
 8000dae:	73fb      	strb	r3, [r7, #15]

		  // Set body
		  ssd1306_SetCursor(2, y);
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	4619      	mov	r1, r3
 8000db4:	2002      	movs	r0, #2
 8000db6:	f001 faa5 	bl	8002304 <ssd1306_SetCursor>
		  ssd1306_WriteString(bodyLogotype, Font_11x18, White);
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <StartOLEDTask+0x104>)
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	ca06      	ldmia	r2, {r1, r2}
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <StartOLEDTask+0x118>)
 8000dc2:	f001 fa79 	bl	80022b8 <ssd1306_WriteString>
		  y += 36;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	3324      	adds	r3, #36	; 0x24
 8000dca:	73fb      	strb	r3, [r7, #15]
	  }

	  // Show content
	  ssd1306_UpdateScreen();
 8000dcc:	f001 f970 	bl	80020b0 <ssd1306_UpdateScreen>
	  y = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]

	  vTaskSuspend(NULL);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f009 fa87 	bl	800a2e8 <vTaskSuspend>
	  ssd1306_Fill(Black);
 8000dda:	e7b6      	b.n	8000d4a <StartOLEDTask+0x6a>
 8000ddc:	20000048 	.word	0x20000048
 8000de0:	20000004 	.word	0x20000004
 8000de4:	20000050 	.word	0x20000050
 8000de8:	20000030 	.word	0x20000030
 8000dec:	20000000 	.word	0x20000000
 8000df0:	200000e1 	.word	0x200000e1
 8000df4:	20000024 	.word	0x20000024
 8000df8:	2000003c 	.word	0x2000003c
 8000dfc:	20000014 	.word	0x20000014

08000e00 <StartDispatcherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDispatcherTask */
void StartDispatcherTask(void *argument)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDispatcherTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f009 fa6d 	bl	800a2e8 <vTaskSuspend>

	  switch(RxBuffer[0]) {
 8000e0e:	4b36      	ldr	r3, [pc, #216]	; (8000ee8 <StartDispatcherTask+0xe8>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	3b01      	subs	r3, #1
 8000e16:	2b0d      	cmp	r3, #13
 8000e18:	d860      	bhi.n	8000edc <StartDispatcherTask+0xdc>
 8000e1a:	a201      	add	r2, pc, #4	; (adr r2, 8000e20 <StartDispatcherTask+0x20>)
 8000e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e20:	08000e59 	.word	0x08000e59
 8000e24:	08000e65 	.word	0x08000e65
 8000e28:	08000e71 	.word	0x08000e71
 8000e2c:	08000e7d 	.word	0x08000e7d
 8000e30:	08000e89 	.word	0x08000e89
 8000e34:	08000e95 	.word	0x08000e95
 8000e38:	08000ea1 	.word	0x08000ea1
 8000e3c:	08000edd 	.word	0x08000edd
 8000e40:	08000edd 	.word	0x08000edd
 8000e44:	08000edd 	.word	0x08000edd
 8000e48:	08000ead 	.word	0x08000ead
 8000e4c:	08000eb9 	.word	0x08000eb9
 8000e50:	08000ec5 	.word	0x08000ec5
 8000e54:	08000ed1 	.word	0x08000ed1
		case 0x01:		// Stop vehicle.
			vTaskResume(StopTaskHandle);
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <StartDispatcherTask+0xec>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f009 fafd 	bl	800a45c <vTaskResume>
			break;
 8000e62:	e040      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x02:		// Toggle driving lights.
			vTaskResume(DrivingLightsTaHandle);
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <StartDispatcherTask+0xf0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f009 faf7 	bl	800a45c <vTaskResume>
			break;
 8000e6e:	e03a      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x03:		// Toggle RGB stripe.
			vTaskResume(LEDStripesTaskHandle);
 8000e70:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <StartDispatcherTask+0xf4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f009 faf1 	bl	800a45c <vTaskResume>
			break;
 8000e7a:	e034      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x04:		// Turn left blinkers on.
			vTaskResume(LeftBlinkersTasHandle);
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <StartDispatcherTask+0xf8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f009 faeb 	bl	800a45c <vTaskResume>
			break;
 8000e86:	e02e      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x05:		// Turn right blinkers on.
			vTaskResume(RightBlinkersTaHandle);
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <StartDispatcherTask+0xfc>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f009 fae5 	bl	800a45c <vTaskResume>
			break;
 8000e92:	e028      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x06:		// Toggle parking to the left.
			vTaskResume(ParkLeftTaskHandle);
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <StartDispatcherTask+0x100>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f009 fadf 	bl	800a45c <vTaskResume>
			break;
 8000e9e:	e022      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x07:		// Toggle parking to the right.
			vTaskResume(ParkRightTaskHandle);
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <StartDispatcherTask+0x104>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f009 fad9 	bl	800a45c <vTaskResume>
			break;
 8000eaa:	e01c      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x0B:		// Accelerate.
			vTaskResume(AccelerateTaskHandle);
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <StartDispatcherTask+0x108>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f009 fad3 	bl	800a45c <vTaskResume>
			break;
 8000eb6:	e016      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x0C:		// Decelerate.
			vTaskResume(DecelerateTaskHandle);
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <StartDispatcherTask+0x10c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f009 facd 	bl	800a45c <vTaskResume>
			break;
 8000ec2:	e010      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x0D:		// Turn left.
			vTaskResume(TurnLeftTaskHandle);
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <StartDispatcherTask+0x110>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f009 fac7 	bl	800a45c <vTaskResume>
			break;
 8000ece:	e00a      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		case 0x0E:		// Turn right.
			vTaskResume(TurnRightTaskHandle);
 8000ed0:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <StartDispatcherTask+0x114>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f009 fac1 	bl	800a45c <vTaskResume>
			break;
 8000eda:	e004      	b.n	8000ee6 <StartDispatcherTask+0xe6>
		default:		// Acknowledge connection.
			vTaskResume(ConnectionTaskHandle);
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <StartDispatcherTask+0x118>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f009 fabb 	bl	800a45c <vTaskResume>
	  vTaskSuspend(NULL);
 8000ee6:	e78f      	b.n	8000e08 <StartDispatcherTask+0x8>
 8000ee8:	20000108 	.word	0x20000108
 8000eec:	2000012c 	.word	0x2000012c
 8000ef0:	20000130 	.word	0x20000130
 8000ef4:	20000134 	.word	0x20000134
 8000ef8:	20000138 	.word	0x20000138
 8000efc:	2000013c 	.word	0x2000013c
 8000f00:	20000140 	.word	0x20000140
 8000f04:	20000144 	.word	0x20000144
 8000f08:	20000148 	.word	0x20000148
 8000f0c:	2000014c 	.word	0x2000014c
 8000f10:	20000150 	.word	0x20000150
 8000f14:	20000154 	.word	0x20000154
 8000f18:	20000158 	.word	0x20000158

08000f1c <StartStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStopTask */
void StartStopTask(void *argument)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000f24:	2000      	movs	r0, #0
 8000f26:	f009 f9df 	bl	800a2e8 <vTaskSuspend>

	  // Stop parking if applicable
	  vTaskSuspend(ParkLeftTaskHandle);
 8000f2a:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <StartStopTask+0xb0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f009 f9da 	bl	800a2e8 <vTaskSuspend>
	  vTaskSuspend(ParkRightTaskHandle);
 8000f34:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <StartStopTask+0xb4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f009 f9d5 	bl	800a2e8 <vTaskSuspend>

	  // Stop BLDC motor
	  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <StartStopTask+0xb8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a25      	ldr	r2, [pc, #148]	; (8000fd8 <StartStopTask+0xbc>)
 8000f44:	6013      	str	r3, [r2, #0]
	  sliderAccelerateDecelerateCurrentValue = 0;
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <StartStopTask+0xb8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
	  setBLDCMotorSpeed();
 8000f4c:	f7ff fb88 	bl	8000660 <setBLDCMotorSpeed>

	  // Set LED stripes
	  isStopped = true;
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <StartStopTask+0xc0>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
	  stripesEffect = STOP;
 8000f56:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <StartStopTask+0xc4>)
 8000f58:	2202      	movs	r2, #2
 8000f5a:	701a      	strb	r2, [r3, #0]
	  ommitToggle = true;
 8000f5c:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <StartStopTask+0xc8>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
	  internalFunctionCall = true;
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <StartStopTask+0xcc>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
	  vTaskResume(LEDStripesTaskHandle);
 8000f68:	4b20      	ldr	r3, [pc, #128]	; (8000fec <StartStopTask+0xd0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f009 fa75 	bl	800a45c <vTaskResume>

	  // Home stepper motor
	  moveStepperMotorUntil(0);
 8000f72:	2000      	movs	r0, #0
 8000f74:	f7ff fc24 	bl	80007c0 <moveStepperMotorUntil>

	  // Reset parking state
	  isParking = false;
 8000f78:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <StartStopTask+0xd4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
	  vTaskDelete(ParkLeftTaskHandle);
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <StartStopTask+0xb0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f009 f8f4 	bl	800a170 <vTaskDelete>
	  vTaskDelete(ParkRightTaskHandle);
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <StartStopTask+0xb4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f009 f8ef 	bl	800a170 <vTaskDelete>
	  ParkLeftTaskHandle = osThreadNew(StartParkLeftTask, NULL, &ParkLeftTask_attributes);
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <StartStopTask+0xd8>)
 8000f94:	2100      	movs	r1, #0
 8000f96:	4818      	ldr	r0, [pc, #96]	; (8000ff8 <StartStopTask+0xdc>)
 8000f98:	f007 fef2 	bl	8008d80 <osThreadNew>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <StartStopTask+0xb0>)
 8000fa0:	6013      	str	r3, [r2, #0]
	  ParkRightTaskHandle = osThreadNew(StartParkRightTask, NULL, &ParkRightTask_attributes);
 8000fa2:	4a16      	ldr	r2, [pc, #88]	; (8000ffc <StartStopTask+0xe0>)
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4816      	ldr	r0, [pc, #88]	; (8001000 <StartStopTask+0xe4>)
 8000fa8:	f007 feea 	bl	8008d80 <osThreadNew>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <StartStopTask+0xb4>)
 8000fb0:	6013      	str	r3, [r2, #0]

	  // Turn off all the lights
	  HAL_GPIO_WritePin(BrakeLights_GPIO_Port, BrakeLights_Pin, RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb8:	4812      	ldr	r0, [pc, #72]	; (8001004 <StartStopTask+0xe8>)
 8000fba:	f003 f81f 	bl	8003ffc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc4:	480f      	ldr	r0, [pc, #60]	; (8001004 <StartStopTask+0xe8>)
 8000fc6:	f003 f819 	bl	8003ffc <HAL_GPIO_WritePin>
	  vTaskSuspend(NULL);
 8000fca:	e7ab      	b.n	8000f24 <StartStopTask+0x8>
 8000fcc:	20000140 	.word	0x20000140
 8000fd0:	20000144 	.word	0x20000144
 8000fd4:	200000ec 	.word	0x200000ec
 8000fd8:	200000e8 	.word	0x200000e8
 8000fdc:	200000e5 	.word	0x200000e5
 8000fe0:	200000e2 	.word	0x200000e2
 8000fe4:	200000e4 	.word	0x200000e4
 8000fe8:	200000e0 	.word	0x200000e0
 8000fec:	20000134 	.word	0x20000134
 8000ff0:	20000104 	.word	0x20000104
 8000ff4:	0800f1dc 	.word	0x0800f1dc
 8000ff8:	080013c9 	.word	0x080013c9
 8000ffc:	0800f200 	.word	0x0800f200
 8001000:	0800141d 	.word	0x0800141d
 8001004:	40020800 	.word	0x40020800

08001008 <StartDrivingLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDrivingLightsTask */
void StartDrivingLightsTask(void *argument)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDrivingLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001010:	2000      	movs	r0, #0
 8001012:	f009 f969 	bl	800a2e8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <StartDrivingLightsTask+0x50>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	f083 0301 	eor.w	r3, r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d104      	bne.n	8001030 <StartDrivingLightsTask+0x28>
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <StartDrivingLightsTask+0x54>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0ef      	beq.n	8001010 <StartDrivingLightsTask+0x8>
		  internalFunctionCall = false;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <StartDrivingLightsTask+0x54>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <StartDrivingLightsTask+0x58>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	d004      	beq.n	800104a <StartDrivingLightsTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <StartDrivingLightsTask+0x5c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f009 fa09 	bl	800a45c <vTaskResume>
		  }

		  // Driving lights effect
		  HAL_GPIO_TogglePin(DrivingLights_GPIO_Port, DrivingLights_Pin);
 800104a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <StartDrivingLightsTask+0x60>)
 8001050:	f002 ffed 	bl	800402e <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 8001054:	e7dc      	b.n	8001010 <StartDrivingLightsTask+0x8>
 8001056:	bf00      	nop
 8001058:	20000104 	.word	0x20000104
 800105c:	200000e0 	.word	0x200000e0
 8001060:	200000e5 	.word	0x200000e5
 8001064:	20000164 	.word	0x20000164
 8001068:	40020800 	.word	0x40020800

0800106c <StartLEDStripesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDStripesTask */
void StartLEDStripesTask(void *argument)
{
 800106c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001070:	b096      	sub	sp, #88	; 0x58
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDStripesTask */
	// Set StripesEffect enum
	stripesEffect = NONE;
 8001076:	4b8e      	ldr	r3, [pc, #568]	; (80012b0 <StartLEDStripesTask+0x244>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]

	// Transmit 4 empty bytes to ensure SDO is low
	uint8_t d[4] = {0};
 800107c:	2300      	movs	r3, #0
 800107e:	647b      	str	r3, [r7, #68]	; 0x44
	HAL_SPI_Transmit(&hspi1, d, 4, 100);
 8001080:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001084:	2364      	movs	r3, #100	; 0x64
 8001086:	2204      	movs	r2, #4
 8001088:	488a      	ldr	r0, [pc, #552]	; (80012b4 <StartLEDStripesTask+0x248>)
 800108a:	f004 fe96 	bl	8005dba <HAL_SPI_Transmit>

	// Create handle and configure
	ws2812b_handle_t hws2812b;

	hws2812b.config.packing = PACKING; // See macro above
 800108e:	2301      	movs	r3, #1
 8001090:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hws2812b.config.pulse_len_1 = WS2812B_PULSE_LEN_6b;
 8001094:	233f      	movs	r3, #63	; 0x3f
 8001096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hws2812b.config.pulse_len_0 = WS2812B_PULSE_LEN_2b;
 800109a:	2303      	movs	r3, #3
 800109c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hws2812b.config.first_bit_0 = WS2812B_FIRST_BIT_0_ENABLED;
 80010a0:	2301      	movs	r3, #1
 80010a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hws2812b.config.prefix_len = PREFIX_LEN; // See macro above
 80010a6:	2301      	movs	r3, #1
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	hws2812b.config.suffix_len = SUFFIX_LEN; // See macro above
 80010aa:	2304      	movs	r3, #4
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
	hws2812b.config.spi_bit_order = WS2812B_MSB_FIRST;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	// Create array of LEDs & set LED color
	ws2812b_led_t leds[LED_COUNT];
	struct DesiredStripesColor desiredStripesColor;
	setLEDStripesEffect(stripesEffect, &desiredStripesColor);
 80010b4:	4b7e      	ldr	r3, [pc, #504]	; (80012b0 <StartLEDStripesTask+0x244>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	f107 0208 	add.w	r2, r7, #8
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fa8b 	bl	80005dc <setLEDStripesEffect>
	for(int i = 0; i < LED_COUNT; i ++) {
 80010c6:	2300      	movs	r3, #0
 80010c8:	657b      	str	r3, [r7, #84]	; 0x54
 80010ca:	e020      	b.n	800110e <StartLEDStripesTask+0xa2>
	  leds[i].red = desiredStripesColor.red;
 80010cc:	7a39      	ldrb	r1, [r7, #8]
 80010ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	3358      	adds	r3, #88	; 0x58
 80010d8:	443b      	add	r3, r7
 80010da:	3b4c      	subs	r3, #76	; 0x4c
 80010dc:	460a      	mov	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
	  leds[i].green = desiredStripesColor.green;
 80010e0:	7a79      	ldrb	r1, [r7, #9]
 80010e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	3358      	adds	r3, #88	; 0x58
 80010ec:	443b      	add	r3, r7
 80010ee:	3b4b      	subs	r3, #75	; 0x4b
 80010f0:	460a      	mov	r2, r1
 80010f2:	701a      	strb	r2, [r3, #0]
	  leds[i].blue = desiredStripesColor.blue;
 80010f4:	7ab9      	ldrb	r1, [r7, #10]
 80010f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010f8:	4613      	mov	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4413      	add	r3, r2
 80010fe:	3358      	adds	r3, #88	; 0x58
 8001100:	443b      	add	r3, r7
 8001102:	3b4a      	subs	r3, #74	; 0x4a
 8001104:	460a      	mov	r2, r1
 8001106:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < LED_COUNT; i ++) {
 8001108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800110a:	3301      	adds	r3, #1
 800110c:	657b      	str	r3, [r7, #84]	; 0x54
 800110e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001110:	2b06      	cmp	r3, #6
 8001112:	dddb      	ble.n	80010cc <StartLEDStripesTask+0x60>
	}

	// Add LEDs and count to handle
	hws2812b.led_count = LED_COUNT;
 8001114:	2307      	movs	r3, #7
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
	hws2812b.leds = leds;
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38

	// Initialize the driver
	if(ws2812b_init(&hws2812b)) {
 800111e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001122:	4618      	mov	r0, r3
 8001124:	f001 fc18 	bl	8002958 <ws2812b_init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d006      	beq.n	800113c <StartLEDStripesTask+0xd0>
	  printf("Invalid ws2812b config! (%s)\r\n",ws2812b_error_msg);
 800112e:	4b62      	ldr	r3, [pc, #392]	; (80012b8 <StartLEDStripesTask+0x24c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4619      	mov	r1, r3
 8001134:	4861      	ldr	r0, [pc, #388]	; (80012bc <StartLEDStripesTask+0x250>)
 8001136:	f00c ff3f 	bl	800dfb8 <iprintf>
	  while(1) {;}
 800113a:	e7fe      	b.n	800113a <StartLEDStripesTask+0xce>
	}

	// Create buffer
	uint8_t dma_buf[ws2812b_required_buffer_len(&hws2812b)];
 800113c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fda5 	bl	8002c90 <ws2812b_required_buffer_len>
 8001146:	4601      	mov	r1, r0
 8001148:	460b      	mov	r3, r1
 800114a:	3b01      	subs	r3, #1
 800114c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800114e:	2300      	movs	r3, #0
 8001150:	4688      	mov	r8, r1
 8001152:	4699      	mov	r9, r3
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001160:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001164:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001168:	2300      	movs	r3, #0
 800116a:	460c      	mov	r4, r1
 800116c:	461d      	mov	r5, r3
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	00eb      	lsls	r3, r5, #3
 8001178:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800117c:	00e2      	lsls	r2, r4, #3
 800117e:	1dcb      	adds	r3, r1, #7
 8001180:	08db      	lsrs	r3, r3, #3
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	ebad 0d03 	sub.w	sp, sp, r3
 8001188:	466b      	mov	r3, sp
 800118a:	3300      	adds	r3, #0
 800118c:	64bb      	str	r3, [r7, #72]	; 0x48

	// Fill buffer
	ws2812b_fill_buffer(&hws2812b, dma_buf);
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fd96 	bl	8002cc6 <ws2812b_fill_buffer>

	// Transmit
	HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 fd76 	bl	8002c90 <ws2812b_required_buffer_len>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80011ac:	4841      	ldr	r0, [pc, #260]	; (80012b4 <StartLEDStripesTask+0x248>)
 80011ae:	f004 ff73 	bl	8006098 <HAL_SPI_Transmit_DMA>
	HAL_Delay(10); // 10ms delay
 80011b2:	200a      	movs	r0, #10
 80011b4:	f001 ff10 	bl	8002fd8 <HAL_Delay>

  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80011b8:	2000      	movs	r0, #0
 80011ba:	f009 f895 	bl	800a2e8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 80011be:	4b40      	ldr	r3, [pc, #256]	; (80012c0 <StartLEDStripesTask+0x254>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	f083 0301 	eor.w	r3, r3, #1
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d104      	bne.n	80011d8 <StartLEDStripesTask+0x16c>
 80011ce:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <StartLEDStripesTask+0x258>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0ef      	beq.n	80011b8 <StartLEDStripesTask+0x14c>
		  internalFunctionCall = false;
 80011d8:	4b3a      	ldr	r3, [pc, #232]	; (80012c4 <StartLEDStripesTask+0x258>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]

		  // LED stripes effect
		  if(ommitToggle == false) {
 80011de:	4b3a      	ldr	r3, [pc, #232]	; (80012c8 <StartLEDStripesTask+0x25c>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f083 0301 	eor.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d014      	beq.n	8001218 <StartLEDStripesTask+0x1ac>
			  if(isOn == false) {
 80011ee:	4b37      	ldr	r3, [pc, #220]	; (80012cc <StartLEDStripesTask+0x260>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <StartLEDStripesTask+0x1a0>
				  isOn = true;
 80011fe:	4b33      	ldr	r3, [pc, #204]	; (80012cc <StartLEDStripesTask+0x260>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
				  stripesEffect = DEFAULT;
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <StartLEDStripesTask+0x244>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	e005      	b.n	8001218 <StartLEDStripesTask+0x1ac>
			  } else {
				  isOn = false;
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <StartLEDStripesTask+0x260>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
				  stripesEffect = NONE;
 8001212:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <StartLEDStripesTask+0x244>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  ommitToggle = false;
 8001218:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <StartLEDStripesTask+0x25c>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]

		  // Update LED color
		  setLEDStripesEffect(stripesEffect, &desiredStripesColor);
 800121e:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <StartLEDStripesTask+0x244>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f107 0208 	add.w	r2, r7, #8
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f9d6 	bl	80005dc <setLEDStripesEffect>
		  for(int i = 0; i < LED_COUNT; i ++) {
 8001230:	2300      	movs	r3, #0
 8001232:	653b      	str	r3, [r7, #80]	; 0x50
 8001234:	e020      	b.n	8001278 <StartLEDStripesTask+0x20c>
			  leds[i].red = desiredStripesColor.red;
 8001236:	7a39      	ldrb	r1, [r7, #8]
 8001238:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	3358      	adds	r3, #88	; 0x58
 8001242:	443b      	add	r3, r7
 8001244:	3b4c      	subs	r3, #76	; 0x4c
 8001246:	460a      	mov	r2, r1
 8001248:	701a      	strb	r2, [r3, #0]
			  leds[i].green = desiredStripesColor.green;
 800124a:	7a79      	ldrb	r1, [r7, #9]
 800124c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	3358      	adds	r3, #88	; 0x58
 8001256:	443b      	add	r3, r7
 8001258:	3b4b      	subs	r3, #75	; 0x4b
 800125a:	460a      	mov	r2, r1
 800125c:	701a      	strb	r2, [r3, #0]
			  leds[i].blue = desiredStripesColor.blue;
 800125e:	7ab9      	ldrb	r1, [r7, #10]
 8001260:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001262:	4613      	mov	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4413      	add	r3, r2
 8001268:	3358      	adds	r3, #88	; 0x58
 800126a:	443b      	add	r3, r7
 800126c:	3b4a      	subs	r3, #74	; 0x4a
 800126e:	460a      	mov	r2, r1
 8001270:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < LED_COUNT; i ++) {
 8001272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001274:	3301      	adds	r3, #1
 8001276:	653b      	str	r3, [r7, #80]	; 0x50
 8001278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800127a:	2b06      	cmp	r3, #6
 800127c:	dddb      	ble.n	8001236 <StartLEDStripesTask+0x1ca>
		  }

		  // Add LEDs to handle
		  hws2812b.leds = leds;
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	63bb      	str	r3, [r7, #56]	; 0x38

		  // Fill buffer
		  ws2812b_fill_buffer(&hws2812b, dma_buf);
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800128a:	4618      	mov	r0, r3
 800128c:	f001 fd1b 	bl	8002cc6 <ws2812b_fill_buffer>

		  // Transmit
		  HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 8001290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001294:	4618      	mov	r0, r3
 8001296:	f001 fcfb 	bl	8002c90 <ws2812b_required_buffer_len>
 800129a:	4603      	mov	r3, r0
 800129c:	b29b      	uxth	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80012a2:	4804      	ldr	r0, [pc, #16]	; (80012b4 <StartLEDStripesTask+0x248>)
 80012a4:	f004 fef8 	bl	8006098 <HAL_SPI_Transmit_DMA>
		  HAL_Delay(10); // 10ms delay
 80012a8:	200a      	movs	r0, #10
 80012aa:	f001 fe95 	bl	8002fd8 <HAL_Delay>
	  vTaskSuspend(NULL);
 80012ae:	e783      	b.n	80011b8 <StartLEDStripesTask+0x14c>
 80012b0:	200000e2 	.word	0x200000e2
 80012b4:	200001c0 	.word	0x200001c0
 80012b8:	200007b0 	.word	0x200007b0
 80012bc:	0800eebc 	.word	0x0800eebc
 80012c0:	20000104 	.word	0x20000104
 80012c4:	200000e0 	.word	0x200000e0
 80012c8:	200000e4 	.word	0x200000e4
 80012cc:	200000e3 	.word	0x200000e3

080012d0 <StartLeftBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeftBlinkersTask */
void StartLeftBlinkersTask(void *argument)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLeftBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80012d8:	2000      	movs	r0, #0
 80012da:	f009 f805 	bl	800a2e8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <StartLeftBlinkersTask+0x68>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f083 0301 	eor.w	r3, r3, #1
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d104      	bne.n	80012f8 <StartLeftBlinkersTask+0x28>
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <StartLeftBlinkersTask+0x6c>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0ef      	beq.n	80012d8 <StartLeftBlinkersTask+0x8>
		  internalFunctionCall = false;
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <StartLeftBlinkersTask+0x6c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <StartLeftBlinkersTask+0x70>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d004      	beq.n	8001312 <StartLeftBlinkersTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <StartLeftBlinkersTask+0x74>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f009 f8a5 	bl	800a45c <vTaskResume>
		  }

		  // Left blinkers effect
		  for(int i = 0; i < 6; i ++) {
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	e00b      	b.n	8001330 <StartLeftBlinkersTask+0x60>
			  HAL_GPIO_TogglePin(LeftBlinkers_GPIO_Port, LeftBlinkers_Pin);
 8001318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800131c:	480a      	ldr	r0, [pc, #40]	; (8001348 <StartLeftBlinkersTask+0x78>)
 800131e:	f002 fe86 	bl	800402e <HAL_GPIO_TogglePin>
			  osDelay(BLINKERS_DURATION);
 8001322:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001326:	f007 fdd1 	bl	8008ecc <osDelay>
		  for(int i = 0; i < 6; i ++) {
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3301      	adds	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b05      	cmp	r3, #5
 8001334:	ddf0      	ble.n	8001318 <StartLeftBlinkersTask+0x48>
	  vTaskSuspend(NULL);
 8001336:	e7cf      	b.n	80012d8 <StartLeftBlinkersTask+0x8>
 8001338:	20000104 	.word	0x20000104
 800133c:	200000e0 	.word	0x200000e0
 8001340:	200000e5 	.word	0x200000e5
 8001344:	20000164 	.word	0x20000164
 8001348:	40020800 	.word	0x40020800

0800134c <StartRightBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRightBlinkersTask */
void StartRightBlinkersTask(void *argument)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRightBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001354:	2000      	movs	r0, #0
 8001356:	f008 ffc7 	bl	800a2e8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <StartRightBlinkersTask+0x68>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f083 0301 	eor.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d104      	bne.n	8001374 <StartRightBlinkersTask+0x28>
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <StartRightBlinkersTask+0x6c>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0ef      	beq.n	8001354 <StartRightBlinkersTask+0x8>
		  internalFunctionCall = false;
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <StartRightBlinkersTask+0x6c>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <StartRightBlinkersTask+0x70>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <StartRightBlinkersTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <StartRightBlinkersTask+0x74>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f009 f867 	bl	800a45c <vTaskResume>
		  }

		  // Right blinkers effect
		  for(int i = 0; i < 6; i ++) {
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	e00b      	b.n	80013ac <StartRightBlinkersTask+0x60>
			  HAL_GPIO_TogglePin(RightBlinkers_GPIO_Port, RightBlinkers_Pin);
 8001394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001398:	480a      	ldr	r0, [pc, #40]	; (80013c4 <StartRightBlinkersTask+0x78>)
 800139a:	f002 fe48 	bl	800402e <HAL_GPIO_TogglePin>
			  osDelay(BLINKERS_DURATION);
 800139e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80013a2:	f007 fd93 	bl	8008ecc <osDelay>
		  for(int i = 0; i < 6; i ++) {
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3301      	adds	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b05      	cmp	r3, #5
 80013b0:	ddf0      	ble.n	8001394 <StartRightBlinkersTask+0x48>
	  vTaskSuspend(NULL);
 80013b2:	e7cf      	b.n	8001354 <StartRightBlinkersTask+0x8>
 80013b4:	20000104 	.word	0x20000104
 80013b8:	200000e0 	.word	0x200000e0
 80013bc:	200000e5 	.word	0x200000e5
 80013c0:	20000164 	.word	0x20000164
 80013c4:	40020800 	.word	0x40020800

080013c8 <StartParkLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkLeftTask */
void StartParkLeftTask(void *argument)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80013d0:	2000      	movs	r0, #0
 80013d2:	f008 ff89 	bl	800a2e8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false) {
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <StartParkLeftTask+0x48>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	f083 0301 	eor.w	r3, r3, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f4      	beq.n	80013d0 <StartParkLeftTask+0x8>
		  // Exit stopped state if applicable
		  if(isStopped) {
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <StartParkLeftTask+0x4c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d004      	beq.n	80013fa <StartParkLeftTask+0x32>
			  vTaskResume(ResumeFromStopTHandle);
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <StartParkLeftTask+0x50>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f009 f831 	bl	800a45c <vTaskResume>
		  }

		  // Park to the left
		  isParking = true;
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <StartParkLeftTask+0x48>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
		  park(LEFT);
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff fa1f 	bl	8000844 <park>
		  isParking = false;
 8001406:	4b02      	ldr	r3, [pc, #8]	; (8001410 <StartParkLeftTask+0x48>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
	  vTaskSuspend(NULL);
 800140c:	e7e0      	b.n	80013d0 <StartParkLeftTask+0x8>
 800140e:	bf00      	nop
 8001410:	20000104 	.word	0x20000104
 8001414:	200000e5 	.word	0x200000e5
 8001418:	20000164 	.word	0x20000164

0800141c <StartParkRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkRightTask */
void StartParkRightTask(void *argument)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001424:	2000      	movs	r0, #0
 8001426:	f008 ff5f 	bl	800a2e8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false) {
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <StartParkRightTask+0x48>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f083 0301 	eor.w	r3, r3, #1
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f4      	beq.n	8001424 <StartParkRightTask+0x8>
		  // Exit stopped state if applicable
		  if(isStopped) {
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <StartParkRightTask+0x4c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d004      	beq.n	800144e <StartParkRightTask+0x32>
			  vTaskResume(ResumeFromStopTHandle);
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <StartParkRightTask+0x50>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f009 f807 	bl	800a45c <vTaskResume>
		  }

		  // Park to the right
		  isParking = true;
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <StartParkRightTask+0x48>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
		  park(RIGHT);
 8001454:	2001      	movs	r0, #1
 8001456:	f7ff f9f5 	bl	8000844 <park>
		  isParking = false;
 800145a:	4b02      	ldr	r3, [pc, #8]	; (8001464 <StartParkRightTask+0x48>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
	  vTaskSuspend(NULL);
 8001460:	e7e0      	b.n	8001424 <StartParkRightTask+0x8>
 8001462:	bf00      	nop
 8001464:	20000104 	.word	0x20000104
 8001468:	200000e5 	.word	0x200000e5
 800146c:	20000164 	.word	0x20000164

08001470 <StartAccelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccelerateTask */
void StartAccelerateTask(void *argument)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccelerateTask */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0.0);
 8001478:	2300      	movs	r3, #0
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	481e      	ldr	r0, [pc, #120]	; (80014f8 <StartAccelerateTask+0x88>)
 8001480:	f001 ff7e 	bl	8003380 <HAL_DAC_SetValue>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001484:	2000      	movs	r0, #0
 8001486:	f008 ff2f 	bl	800a2e8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <StartAccelerateTask+0x8c>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	f083 0301 	eor.w	r3, r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d104      	bne.n	80014a4 <StartAccelerateTask+0x34>
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <StartAccelerateTask+0x90>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0ef      	beq.n	8001484 <StartAccelerateTask+0x14>
		  internalFunctionCall = false;
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <StartAccelerateTask+0x90>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <StartAccelerateTask+0x94>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d004      	beq.n	80014be <StartAccelerateTask+0x4e>
			  vTaskResume(ResumeFromStopTHandle);
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <StartAccelerateTask+0x98>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f008 ffcf 	bl	800a45c <vTaskResume>
		  }

		  // Accelerate if possible
		  if(sliderAccelerateDecelerateCurrentValue < 4) {
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <StartAccelerateTask+0x9c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	dc08      	bgt.n	80014d8 <StartAccelerateTask+0x68>
			  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <StartAccelerateTask+0x9c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a11      	ldr	r2, [pc, #68]	; (8001510 <StartAccelerateTask+0xa0>)
 80014cc:	6013      	str	r3, [r2, #0]
			  sliderAccelerateDecelerateCurrentValue ++;
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <StartAccelerateTask+0x9c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <StartAccelerateTask+0x9c>)
 80014d6:	6013      	str	r3, [r2, #0]
		  }
		  setBLDCMotorSpeed();
 80014d8:	f7ff f8c2 	bl	8000660 <setBLDCMotorSpeed>

		  // Set withdraw lights appropriately
		  if(sliderAccelerateDecelerateCurrentValue >= 0) {
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <StartAccelerateTask+0x9c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	dbcf      	blt.n	8001484 <StartAccelerateTask+0x14>
			  isWithdrawing = false;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <StartAccelerateTask+0xa4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
			  vTaskResume(WithdrawLightsTHandle);
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <StartAccelerateTask+0xa8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f008 ffb4 	bl	800a45c <vTaskResume>
	  vTaskSuspend(NULL);
 80014f4:	e7c6      	b.n	8001484 <StartAccelerateTask+0x14>
 80014f6:	bf00      	nop
 80014f8:	20000110 	.word	0x20000110
 80014fc:	20000104 	.word	0x20000104
 8001500:	200000e0 	.word	0x200000e0
 8001504:	200000e5 	.word	0x200000e5
 8001508:	20000164 	.word	0x20000164
 800150c:	200000ec 	.word	0x200000ec
 8001510:	200000e8 	.word	0x200000e8
 8001514:	200000f0 	.word	0x200000f0
 8001518:	20000160 	.word	0x20000160

0800151c <StartDecelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDecelerateTask */
void StartDecelerateTask(void *argument)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDecelerateTask */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0.0);
 8001524:	2300      	movs	r3, #0
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	4821      	ldr	r0, [pc, #132]	; (80015b0 <StartDecelerateTask+0x94>)
 800152c:	f001 ff28 	bl	8003380 <HAL_DAC_SetValue>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001530:	2000      	movs	r0, #0
 8001532:	f008 fed9 	bl	800a2e8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <StartDecelerateTask+0x98>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	f083 0301 	eor.w	r3, r3, #1
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d104      	bne.n	8001550 <StartDecelerateTask+0x34>
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <StartDecelerateTask+0x9c>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0ef      	beq.n	8001530 <StartDecelerateTask+0x14>
		  internalFunctionCall = false;
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <StartDecelerateTask+0x9c>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <StartDecelerateTask+0xa0>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <StartDecelerateTask+0x4e>
			  vTaskResume(ResumeFromStopTHandle);
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <StartDecelerateTask+0xa4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f008 ff79 	bl	800a45c <vTaskResume>
		  }

		  // Decelerate if possible
		  if(sliderAccelerateDecelerateCurrentValue > -2) {
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <StartDecelerateTask+0xa8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001572:	db08      	blt.n	8001586 <StartDecelerateTask+0x6a>
			  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <StartDecelerateTask+0xa8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <StartDecelerateTask+0xac>)
 800157a:	6013      	str	r3, [r2, #0]
			  sliderAccelerateDecelerateCurrentValue --;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <StartDecelerateTask+0xa8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3b01      	subs	r3, #1
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <StartDecelerateTask+0xa8>)
 8001584:	6013      	str	r3, [r2, #0]
		  }
		  setBLDCMotorSpeed();
 8001586:	f7ff f86b 	bl	8000660 <setBLDCMotorSpeed>

		  // Set withdraw lights appropriately
		  if(sliderAccelerateDecelerateCurrentValue >= 0) {
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <StartDecelerateTask+0xa8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db05      	blt.n	800159e <StartDecelerateTask+0x82>
			  vTaskResume(BrakeLightsTaskHandle);
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <StartDecelerateTask+0xb0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f008 ff60 	bl	800a45c <vTaskResume>
 800159c:	e7c8      	b.n	8001530 <StartDecelerateTask+0x14>
		  } else {
			  isWithdrawing = true;
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <StartDecelerateTask+0xb4>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
			  vTaskResume(WithdrawLightsTHandle);
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <StartDecelerateTask+0xb8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f008 ff57 	bl	800a45c <vTaskResume>
	  vTaskSuspend(NULL);
 80015ae:	e7bf      	b.n	8001530 <StartDecelerateTask+0x14>
 80015b0:	20000110 	.word	0x20000110
 80015b4:	20000104 	.word	0x20000104
 80015b8:	200000e0 	.word	0x200000e0
 80015bc:	200000e5 	.word	0x200000e5
 80015c0:	20000164 	.word	0x20000164
 80015c4:	200000ec 	.word	0x200000ec
 80015c8:	200000e8 	.word	0x200000e8
 80015cc:	2000015c 	.word	0x2000015c
 80015d0:	200000f0 	.word	0x200000f0
 80015d4:	20000160 	.word	0x20000160

080015d8 <StartTurnLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnLeftTask */
void StartTurnLeftTask(void *argument)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80015e0:	2000      	movs	r0, #0
 80015e2:	f008 fe81 	bl	800a2e8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <StartTurnLeftTask+0x68>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	f083 0301 	eor.w	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d104      	bne.n	8001600 <StartTurnLeftTask+0x28>
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <StartTurnLeftTask+0x6c>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0ef      	beq.n	80015e0 <StartTurnLeftTask+0x8>
		  internalFunctionCall = false;
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <StartTurnLeftTask+0x6c>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <StartTurnLeftTask+0x70>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d004      	beq.n	800161a <StartTurnLeftTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <StartTurnLeftTask+0x74>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f008 ff21 	bl	800a45c <vTaskResume>
		  }

		  // Turn left if possible
		  if(sliderLeftRightCurrentValue > -3) {
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <StartTurnLeftTask+0x78>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f113 0f02 	cmn.w	r3, #2
 8001622:	dbdd      	blt.n	80015e0 <StartTurnLeftTask+0x8>
			  sliderLeftRightPreviousValue = sliderLeftRightCurrentValue;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <StartTurnLeftTask+0x78>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <StartTurnLeftTask+0x7c>)
 800162a:	6013      	str	r3, [r2, #0]
			  sliderLeftRightCurrentValue --;
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <StartTurnLeftTask+0x78>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	3b01      	subs	r3, #1
 8001632:	4a07      	ldr	r2, [pc, #28]	; (8001650 <StartTurnLeftTask+0x78>)
 8001634:	6013      	str	r3, [r2, #0]

			  moveStepperMotor(LEFT);
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff f89a 	bl	8000770 <moveStepperMotor>
	  vTaskSuspend(NULL);
 800163c:	e7d0      	b.n	80015e0 <StartTurnLeftTask+0x8>
 800163e:	bf00      	nop
 8001640:	20000104 	.word	0x20000104
 8001644:	200000e0 	.word	0x200000e0
 8001648:	200000e5 	.word	0x200000e5
 800164c:	20000164 	.word	0x20000164
 8001650:	20000100 	.word	0x20000100
 8001654:	200000fc 	.word	0x200000fc

08001658 <StartTurnRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnRightTask */
void StartTurnRightTask(void *argument)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001660:	2000      	movs	r0, #0
 8001662:	f008 fe41 	bl	800a2e8 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <StartTurnRightTask+0x64>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f083 0301 	eor.w	r3, r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d104      	bne.n	8001680 <StartTurnRightTask+0x28>
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <StartTurnRightTask+0x68>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ef      	beq.n	8001660 <StartTurnRightTask+0x8>
		  internalFunctionCall = false;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <StartTurnRightTask+0x68>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <StartTurnRightTask+0x6c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d004      	beq.n	800169a <StartTurnRightTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 8001690:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <StartTurnRightTask+0x70>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f008 fee1 	bl	800a45c <vTaskResume>
		  }

		  // Turn right if possible
		  if(sliderLeftRightCurrentValue < 3) {
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <StartTurnRightTask+0x74>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	dcde      	bgt.n	8001660 <StartTurnRightTask+0x8>
			  sliderLeftRightPreviousValue = sliderLeftRightCurrentValue;
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <StartTurnRightTask+0x74>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <StartTurnRightTask+0x78>)
 80016a8:	6013      	str	r3, [r2, #0]
			  sliderLeftRightCurrentValue ++;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <StartTurnRightTask+0x74>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	4a06      	ldr	r2, [pc, #24]	; (80016cc <StartTurnRightTask+0x74>)
 80016b2:	6013      	str	r3, [r2, #0]

			  moveStepperMotor(RIGHT);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f7ff f85b 	bl	8000770 <moveStepperMotor>
	  vTaskSuspend(NULL);
 80016ba:	e7d1      	b.n	8001660 <StartTurnRightTask+0x8>
 80016bc:	20000104 	.word	0x20000104
 80016c0:	200000e0 	.word	0x200000e0
 80016c4:	200000e5 	.word	0x200000e5
 80016c8:	20000164 	.word	0x20000164
 80016cc:	20000100 	.word	0x20000100
 80016d0:	200000fc 	.word	0x200000fc

080016d4 <StartConnectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConnectionTask */
void StartConnectionTask(void *argument)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConnectionTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80016dc:	2000      	movs	r0, #0
 80016de:	f008 fe03 	bl	800a2e8 <vTaskSuspend>

	  // Refresh connection state
	  osTimerStart(ConnectionTaskTimerHandle, (ACKNOWLEDGE_PACKETS_FREQUENCY + TIME_MARGIN));
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <StartConnectionTask+0x30>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f640 51ac 	movw	r1, #3500	; 0xdac
 80016ea:	4618      	mov	r0, r3
 80016ec:	f007 fcb6 	bl	800905c <osTimerStart>
	  isConnected = true;
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <StartConnectionTask+0x34>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
	  vTaskResume(OLEDTaskHandle);
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <StartConnectionTask+0x38>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f008 feae 	bl	800a45c <vTaskResume>
	  vTaskSuspend(NULL);
 8001700:	e7ec      	b.n	80016dc <StartConnectionTask+0x8>
 8001702:	bf00      	nop
 8001704:	20000168 	.word	0x20000168
 8001708:	200000e1 	.word	0x200000e1
 800170c:	20000124 	.word	0x20000124

08001710 <StartBrakeLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBrakeLightsTask */
void StartBrakeLightsTask(void *argument)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBrakeLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001718:	2000      	movs	r0, #0
 800171a:	f008 fde5 	bl	800a2e8 <vTaskSuspend>

	  // Brake lights effect
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 800171e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <StartBrakeLightsTask+0x2c>)
 8001724:	f002 fc83 	bl	800402e <HAL_GPIO_TogglePin>
	  osDelay(BRAKE_LIGHTS_DURATION);
 8001728:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800172c:	f007 fbce 	bl	8008ecc <osDelay>
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 8001730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001734:	4801      	ldr	r0, [pc, #4]	; (800173c <StartBrakeLightsTask+0x2c>)
 8001736:	f002 fc7a 	bl	800402e <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 800173a:	e7ed      	b.n	8001718 <StartBrakeLightsTask+0x8>
 800173c:	40020800 	.word	0x40020800

08001740 <StartWithdrawLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWithdrawLightsTask */
void StartWithdrawLightsTask(void *argument)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWithdrawLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001748:	2000      	movs	r0, #0
 800174a:	f008 fdcd 	bl	800a2e8 <vTaskSuspend>

	  // Withdraw lights effect
	  if(isWithdrawing) {
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <StartWithdrawLightsTask+0x34>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <StartWithdrawLightsTask+0x26>
		  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, SET);
 8001758:	2201      	movs	r2, #1
 800175a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800175e:	4806      	ldr	r0, [pc, #24]	; (8001778 <StartWithdrawLightsTask+0x38>)
 8001760:	f002 fc4c 	bl	8003ffc <HAL_GPIO_WritePin>
 8001764:	e7f0      	b.n	8001748 <StartWithdrawLightsTask+0x8>
	  } else {
		  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <StartWithdrawLightsTask+0x38>)
 800176e:	f002 fc45 	bl	8003ffc <HAL_GPIO_WritePin>
	  vTaskSuspend(NULL);
 8001772:	e7e9      	b.n	8001748 <StartWithdrawLightsTask+0x8>
 8001774:	200000f0 	.word	0x200000f0
 8001778:	40020800 	.word	0x40020800

0800177c <StartResumeFromStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResumeFromStopTask */
void StartResumeFromStopTask(void *argument)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResumeFromStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001784:	2000      	movs	r0, #0
 8001786:	f008 fdaf 	bl	800a2e8 <vTaskSuspend>

	  // Turn off LED stripes' stop effect if present
	  if(isStopped) {
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <StartResumeFromStopTask+0x48>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f7      	beq.n	8001784 <StartResumeFromStopTask+0x8>
		  isStopped = false;
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <StartResumeFromStopTask+0x48>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
		  if(isOn) {
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <StartResumeFromStopTask+0x4c>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <StartResumeFromStopTask+0x30>
			  stripesEffect = DEFAULT;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <StartResumeFromStopTask+0x50>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	e002      	b.n	80017b2 <StartResumeFromStopTask+0x36>
		  } else {
			  stripesEffect = NONE;
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <StartResumeFromStopTask+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
		  }
		  ommitToggle = true;
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <StartResumeFromStopTask+0x54>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
		  vTaskResume(LEDStripesTaskHandle);
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <StartResumeFromStopTask+0x58>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f008 fe4d 	bl	800a45c <vTaskResume>
	  vTaskSuspend(NULL);
 80017c2:	e7df      	b.n	8001784 <StartResumeFromStopTask+0x8>
 80017c4:	200000e5 	.word	0x200000e5
 80017c8:	200000e3 	.word	0x200000e3
 80017cc:	200000e2 	.word	0x200000e2
 80017d0:	200000e4 	.word	0x200000e4
 80017d4:	20000134 	.word	0x20000134

080017d8 <CallbackConnectionTaskTimer>:
  /* USER CODE END StartResumeFromStopTask */
}

/* CallbackConnectionTaskTimer function */
void CallbackConnectionTaskTimer(void *argument)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackConnectionTaskTimer */
	vTaskResume(StopTaskHandle);
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <CallbackConnectionTaskTimer+0x2c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f008 fe39 	bl	800a45c <vTaskResume>
	isConnected = false;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <CallbackConnectionTaskTimer+0x30>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
	vTaskResume(OLEDTaskHandle);
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <CallbackConnectionTaskTimer+0x34>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f008 fe31 	bl	800a45c <vTaskResume>
  /* USER CODE END CallbackConnectionTaskTimer */
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000012c 	.word	0x2000012c
 8001808:	200000e1 	.word	0x200000e1
 800180c:	20000124 	.word	0x20000124

08001810 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08c      	sub	sp, #48	; 0x30
 8001814:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	4b94      	ldr	r3, [pc, #592]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a93      	ldr	r2, [pc, #588]	; (8001a78 <MX_GPIO_Init+0x268>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b91      	ldr	r3, [pc, #580]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	61bb      	str	r3, [r7, #24]
 800183c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800183e:	4b8e      	ldr	r3, [pc, #568]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a8d      	ldr	r2, [pc, #564]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b8b      	ldr	r3, [pc, #556]	; (8001a78 <MX_GPIO_Init+0x268>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	4b88      	ldr	r3, [pc, #544]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a87      	ldr	r2, [pc, #540]	; (8001a78 <MX_GPIO_Init+0x268>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b85      	ldr	r3, [pc, #532]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	4b82      	ldr	r3, [pc, #520]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a81      	ldr	r2, [pc, #516]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b7f      	ldr	r3, [pc, #508]	; (8001a78 <MX_GPIO_Init+0x268>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001886:	4b7c      	ldr	r3, [pc, #496]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a7b      	ldr	r2, [pc, #492]	; (8001a78 <MX_GPIO_Init+0x268>)
 800188c:	f043 0308 	orr.w	r3, r3, #8
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b79      	ldr	r3, [pc, #484]	; (8001a78 <MX_GPIO_Init+0x268>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800189e:	4b76      	ldr	r3, [pc, #472]	; (8001a78 <MX_GPIO_Init+0x268>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a75      	ldr	r2, [pc, #468]	; (8001a78 <MX_GPIO_Init+0x268>)
 80018a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b73      	ldr	r3, [pc, #460]	; (8001a78 <MX_GPIO_Init+0x268>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	f244 0191 	movw	r1, #16529	; 0x4091
 80018bc:	486f      	ldr	r0, [pc, #444]	; (8001a7c <MX_GPIO_Init+0x26c>)
 80018be:	f002 fb9d 	bl	8003ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c8:	486d      	ldr	r0, [pc, #436]	; (8001a80 <MX_GPIO_Init+0x270>)
 80018ca:	f002 fb97 	bl	8003ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2140      	movs	r1, #64	; 0x40
 80018d2:	486c      	ldr	r0, [pc, #432]	; (8001a84 <MX_GPIO_Init+0x274>)
 80018d4:	f002 fb92 	bl	8003ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80018de:	486a      	ldr	r0, [pc, #424]	; (8001a88 <MX_GPIO_Init+0x278>)
 80018e0:	f002 fb8c 	bl	8003ffc <HAL_GPIO_WritePin>
                          |WithdrawLights_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	4863      	ldr	r0, [pc, #396]	; (8001a88 <MX_GPIO_Init+0x278>)
 80018fc:	f002 f9d2 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001900:	2332      	movs	r3, #50	; 0x32
 8001902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001910:	230b      	movs	r3, #11
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	4619      	mov	r1, r3
 800191a:	485b      	ldr	r0, [pc, #364]	; (8001a88 <MX_GPIO_Init+0x278>)
 800191c:	f002 f9c2 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001920:	2386      	movs	r3, #134	; 0x86
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001930:	230b      	movs	r3, #11
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	4854      	ldr	r0, [pc, #336]	; (8001a8c <MX_GPIO_Init+0x27c>)
 800193c:	f002 f9b2 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin;
 8001940:	f244 0391 	movw	r3, #16529	; 0x4091
 8001944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	2301      	movs	r3, #1
 8001948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	4619      	mov	r1, r3
 8001958:	4848      	ldr	r0, [pc, #288]	; (8001a7c <MX_GPIO_Init+0x26c>)
 800195a:	f002 f9a3 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800195e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001970:	230b      	movs	r3, #11
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	4619      	mov	r1, r3
 800197a:	4840      	ldr	r0, [pc, #256]	; (8001a7c <MX_GPIO_Init+0x26c>)
 800197c:	f002 f992 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001980:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001992:	2307      	movs	r3, #7
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4619      	mov	r1, r3
 800199c:	4838      	ldr	r0, [pc, #224]	; (8001a80 <MX_GPIO_Init+0x270>)
 800199e:	f002 f981 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = StepperMotorDir_Pin;
 80019a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(StepperMotorDir_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	4619      	mov	r1, r3
 80019ba:	4831      	ldr	r0, [pc, #196]	; (8001a80 <MX_GPIO_Init+0x270>)
 80019bc:	f002 f972 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80019c0:	2340      	movs	r3, #64	; 0x40
 80019c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c4:	2301      	movs	r3, #1
 80019c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	4619      	mov	r1, r3
 80019d6:	482b      	ldr	r0, [pc, #172]	; (8001a84 <MX_GPIO_Init+0x274>)
 80019d8:	f002 f964 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	4619      	mov	r1, r3
 80019ee:	4825      	ldr	r0, [pc, #148]	; (8001a84 <MX_GPIO_Init+0x274>)
 80019f0:	f002 f958 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 80019f4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80019f8:	61fb      	str	r3, [r7, #28]
                          |WithdrawLights_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	481e      	ldr	r0, [pc, #120]	; (8001a88 <MX_GPIO_Init+0x278>)
 8001a0e:	f002 f949 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a12:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a24:	230a      	movs	r3, #10
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4817      	ldr	r0, [pc, #92]	; (8001a8c <MX_GPIO_Init+0x27c>)
 8001a30:	f002 f938 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	4810      	ldr	r0, [pc, #64]	; (8001a8c <MX_GPIO_Init+0x27c>)
 8001a4a:	f002 f92b 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a60:	230b      	movs	r3, #11
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4806      	ldr	r0, [pc, #24]	; (8001a84 <MX_GPIO_Init+0x274>)
 8001a6c:	f002 f91a 	bl	8003ca4 <HAL_GPIO_Init>

}
 8001a70:	bf00      	nop
 8001a72:	3730      	adds	r7, #48	; 0x30
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	40020c00 	.word	0x40020c00
 8001a84:	40021800 	.word	0x40021800
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	40020000 	.word	0x40020000

08001a90 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001a96:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <MX_I2C1_Init+0x78>)
 8001a98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <MX_I2C1_Init+0x7c>)
 8001a9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001acc:	f002 faca 	bl	8004064 <HAL_I2C_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ad6:	f000 f957 	bl	8001d88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ada:	2100      	movs	r1, #0
 8001adc:	4809      	ldr	r0, [pc, #36]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001ade:	f002 feab 	bl	8004838 <HAL_I2CEx_ConfigAnalogFilter>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ae8:	f000 f94e 	bl	8001d88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001aec:	2100      	movs	r1, #0
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001af0:	f002 feed 	bl	80048ce <HAL_I2CEx_ConfigDigitalFilter>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001afa:	f000 f945 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000016c 	.word	0x2000016c
 8001b08:	40005400 	.word	0x40005400
 8001b0c:	20404768 	.word	0x20404768

08001b10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b0ae      	sub	sp, #184	; 0xb8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2290      	movs	r2, #144	; 0x90
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f00c faa6 	bl	800e082 <memset>
  if(i2cHandle->Instance==I2C1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a22      	ldr	r2, [pc, #136]	; (8001bc4 <HAL_I2C_MspInit+0xb4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d13c      	bne.n	8001bba <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fc60 	bl	8005414 <HAL_RCCEx_PeriphCLKConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b5a:	f000 f915 	bl	8001d88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <HAL_I2C_MspInit+0xb8>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <HAL_I2C_MspInit+0xb8>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_I2C_MspInit+0xb8>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8001b76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b7e:	2312      	movs	r3, #18
 8001b80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b90:	2304      	movs	r3, #4
 8001b92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480b      	ldr	r0, [pc, #44]	; (8001bcc <HAL_I2C_MspInit+0xbc>)
 8001b9e:	f002 f881 	bl	8003ca4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_I2C_MspInit+0xb8>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <HAL_I2C_MspInit+0xb8>)
 8001ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bac:	6413      	str	r3, [r2, #64]	; 0x40
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_I2C_MspInit+0xb8>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001bba:	bf00      	nop
 8001bbc:	37b8      	adds	r7, #184	; 0xb8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40005400 	.word	0x40005400
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020400 	.word	0x40020400

08001bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd4:	f001 f9d3 	bl	8002f7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd8:	f000 f830 	bl	8001c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bdc:	f7ff fe18 	bl	8001810 <MX_GPIO_Init>
  MX_DMA_Init();
 8001be0:	f7fe ff5e 	bl	8000aa0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001be4:	f000 f8d6 	bl	8001d94 <MX_SPI1_Init>
  MX_DAC_Init();
 8001be8:	f7fe fee8 	bl	80009bc <MX_DAC_Init>
  MX_I2C1_Init();
 8001bec:	f7ff ff50 	bl	8001a90 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001bf0:	f000 fd68 	bl	80026c4 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001bf4:	f000 fe18 	bl	8002828 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_SYSVIEW_Conf();
 8001bf8:	f00a fbb0 	bl	800c35c <SEGGER_SYSVIEW_Conf>
  vSetVarulMaxPRIGROUPValue();
 8001bfc:	f00a f962 	bl	800bec4 <vSetVarulMaxPRIGROUPValue>
  SEGGER_SYSVIEW_Start();
 8001c00:	f00b fbd0 	bl	800d3a4 <SEGGER_SYSVIEW_Start>
  HAL_UART_Receive_IT(&huart6, RxBuffer, 1);
 8001c04:	2201      	movs	r2, #1
 8001c06:	4909      	ldr	r1, [pc, #36]	; (8001c2c <main+0x5c>)
 8001c08:	4809      	ldr	r0, [pc, #36]	; (8001c30 <main+0x60>)
 8001c0a:	f005 fe07 	bl	800781c <HAL_UART_Receive_IT>
  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4808      	ldr	r0, [pc, #32]	; (8001c34 <main+0x64>)
 8001c12:	f001 fb09 	bl	8003228 <HAL_DAC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001c16:	2108      	movs	r1, #8
 8001c18:	4807      	ldr	r0, [pc, #28]	; (8001c38 <main+0x68>)
 8001c1a:	f004 fe8b 	bl	8006934 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001c1e:	f007 f845 	bl	8008cac <osKernelInitialize>
  MX_FREERTOS_Init();
 8001c22:	f7fe ff5b 	bl	8000adc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001c26:	f007 f875 	bl	8008d14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <main+0x5a>
 8001c2c:	20000108 	.word	0x20000108
 8001c30:	20000728 	.word	0x20000728
 8001c34:	20000110 	.word	0x20000110
 8001c38:	200006dc 	.word	0x200006dc

08001c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b094      	sub	sp, #80	; 0x50
 8001c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	2234      	movs	r2, #52	; 0x34
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f00c fa19 	bl	800e082 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c50:	f107 0308 	add.w	r3, r7, #8
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c60:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <SystemClock_Config+0xd4>)
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	4a2a      	ldr	r2, [pc, #168]	; (8001d10 <SystemClock_Config+0xd4>)
 8001c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6c:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <SystemClock_Config+0xd4>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c78:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <SystemClock_Config+0xd8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a25      	ldr	r2, [pc, #148]	; (8001d14 <SystemClock_Config+0xd8>)
 8001c7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <SystemClock_Config+0xd8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c90:	2301      	movs	r3, #1
 8001c92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c94:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001ca8:	23d8      	movs	r3, #216	; 0xd8
 8001caa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cac:	2302      	movs	r3, #2
 8001cae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 fea3 	bl	8004a08 <HAL_RCC_OscConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001cc8:	f000 f85e 	bl	8001d88 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ccc:	f002 fe4c 	bl	8004968 <HAL_PWREx_EnableOverDrive>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001cd6:	f000 f857 	bl	8001d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cda:	230f      	movs	r3, #15
 8001cdc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ce6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001cf2:	f107 0308 	add.w	r3, r7, #8
 8001cf6:	2107      	movs	r1, #7
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f003 f933 	bl	8004f64 <HAL_RCC_ClockConfig>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001d04:	f000 f840 	bl	8001d88 <Error_Handler>
  }
}
 8001d08:	bf00      	nop
 8001d0a:	3750      	adds	r7, #80	; 0x50
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40007000 	.word	0x40007000

08001d18 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart6x) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	portYIELD_FROM_ISR(xTaskResumeFromISR(DispatcherTaskHandle));
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_UART_RxCpltCallback+0x3c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f008 fc07 	bl	800a538 <xTaskResumeFromISR>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d007      	beq.n	8001d40 <HAL_UART_RxCpltCallback+0x28>
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_UART_RxCpltCallback+0x40>)
 8001d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	f3bf 8f4f 	dsb	sy
 8001d3c:	f3bf 8f6f 	isb	sy
	HAL_UART_Receive_IT(&huart6, RxBuffer, 1);					// Used for "opening" ST MCU for future interrupts on RX
 8001d40:	2201      	movs	r2, #1
 8001d42:	4906      	ldr	r1, [pc, #24]	; (8001d5c <HAL_UART_RxCpltCallback+0x44>)
 8001d44:	4806      	ldr	r0, [pc, #24]	; (8001d60 <HAL_UART_RxCpltCallback+0x48>)
 8001d46:	f005 fd69 	bl	800781c <HAL_UART_Receive_IT>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000128 	.word	0x20000128
 8001d58:	e000ed04 	.word	0xe000ed04
 8001d5c:	20000108 	.word	0x20000108
 8001d60:	20000728 	.word	0x20000728

08001d64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d101      	bne.n	8001d7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d76:	f001 f90f 	bl	8002f98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40001000 	.word	0x40001000

08001d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d8c:	b672      	cpsid	i
}
 8001d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <Error_Handler+0x8>
	...

08001d94 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <MX_SPI1_Init+0x74>)
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <MX_SPI1_Init+0x78>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <MX_SPI1_Init+0x74>)
 8001da0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001da4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001da6:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <MX_SPI1_Init+0x74>)
 8001da8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dac:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <MX_SPI1_Init+0x74>)
 8001db0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001db4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <MX_SPI1_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <MX_SPI1_Init+0x74>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_SPI1_Init+0x74>)
 8001dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <MX_SPI1_Init+0x74>)
 8001dcc:	2218      	movs	r2, #24
 8001dce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <MX_SPI1_Init+0x74>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_SPI1_Init+0x74>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <MX_SPI1_Init+0x74>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_SPI1_Init+0x74>)
 8001de4:	2207      	movs	r2, #7
 8001de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <MX_SPI1_Init+0x74>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_SPI1_Init+0x74>)
 8001df0:	2208      	movs	r2, #8
 8001df2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001df4:	4804      	ldr	r0, [pc, #16]	; (8001e08 <MX_SPI1_Init+0x74>)
 8001df6:	f003 ff35 	bl	8005c64 <HAL_SPI_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001e00:	f7ff ffc2 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200001c0 	.word	0x200001c0
 8001e0c:	40013000 	.word	0x40013000

08001e10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a3c      	ldr	r2, [pc, #240]	; (8001f20 <HAL_SPI_MspInit+0x110>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d171      	bne.n	8001f16 <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e32:	4b3c      	ldr	r3, [pc, #240]	; (8001f24 <HAL_SPI_MspInit+0x114>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a3b      	ldr	r2, [pc, #236]	; (8001f24 <HAL_SPI_MspInit+0x114>)
 8001e38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <HAL_SPI_MspInit+0x114>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <HAL_SPI_MspInit+0x114>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a35      	ldr	r2, [pc, #212]	; (8001f24 <HAL_SPI_MspInit+0x114>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <HAL_SPI_MspInit+0x114>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e62:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <HAL_SPI_MspInit+0x114>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a2f      	ldr	r2, [pc, #188]	; (8001f24 <HAL_SPI_MspInit+0x114>)
 8001e68:	f043 0308 	orr.w	r3, r3, #8
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b2d      	ldr	r3, [pc, #180]	; (8001f24 <HAL_SPI_MspInit+0x114>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e7a:	2320      	movs	r3, #32
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	4824      	ldr	r0, [pc, #144]	; (8001f28 <HAL_SPI_MspInit+0x118>)
 8001e96:	f001 ff05 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEDStripes_Pin;
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eaa:	2305      	movs	r3, #5
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEDStripes_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	481d      	ldr	r0, [pc, #116]	; (8001f2c <HAL_SPI_MspInit+0x11c>)
 8001eb6:	f001 fef5 	bl	8003ca4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_SPI_MspInit+0x120>)
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	; (8001f34 <HAL_SPI_MspInit+0x124>)
 8001ebe:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_SPI_MspInit+0x120>)
 8001ec2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001ec6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <HAL_SPI_MspInit+0x120>)
 8001eca:	2240      	movs	r2, #64	; 0x40
 8001ecc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_SPI_MspInit+0x120>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <HAL_SPI_MspInit+0x120>)
 8001ed6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eda:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_SPI_MspInit+0x120>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_SPI_MspInit+0x120>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_SPI_MspInit+0x120>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_SPI_MspInit+0x120>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <HAL_SPI_MspInit+0x120>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001efa:	480d      	ldr	r0, [pc, #52]	; (8001f30 <HAL_SPI_MspInit+0x120>)
 8001efc:	f001 fac8 	bl	8003490 <HAL_DMA_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8001f06:	f7ff ff3f 	bl	8001d88 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <HAL_SPI_MspInit+0x120>)
 8001f0e:	655a      	str	r2, [r3, #84]	; 0x54
 8001f10:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_SPI_MspInit+0x120>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f16:	bf00      	nop
 8001f18:	3728      	adds	r7, #40	; 0x28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40013000 	.word	0x40013000
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40020000 	.word	0x40020000
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	20000224 	.word	0x20000224
 8001f34:	40026458 	.word	0x40026458

08001f38 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af04      	add	r7, sp, #16
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295
 8001f56:	9302      	str	r3, [sp, #8]
 8001f58:	2301      	movs	r3, #1
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	1dfb      	adds	r3, r7, #7
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2301      	movs	r3, #1
 8001f62:	2200      	movs	r2, #0
 8001f64:	2178      	movs	r1, #120	; 0x78
 8001f66:	4803      	ldr	r0, [pc, #12]	; (8001f74 <ssd1306_WriteCommand+0x2c>)
 8001f68:	f002 f90c 	bl	8004184 <HAL_I2C_Mem_Write>
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	2000016c 	.word	0x2000016c

08001f78 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af04      	add	r7, sp, #16
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8a:	9202      	str	r2, [sp, #8]
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	2301      	movs	r3, #1
 8001f94:	2240      	movs	r2, #64	; 0x40
 8001f96:	2178      	movs	r1, #120	; 0x78
 8001f98:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <ssd1306_WriteData+0x30>)
 8001f9a:	f002 f8f3 	bl	8004184 <HAL_I2C_Mem_Write>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	2000016c 	.word	0x2000016c

08001fac <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001fb0:	f7ff ffc2 	bl	8001f38 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001fb4:	2064      	movs	r0, #100	; 0x64
 8001fb6:	f001 f80f 	bl	8002fd8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f000 f9ce 	bl	800235c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001fc0:	2020      	movs	r0, #32
 8001fc2:	f7ff ffc1 	bl	8001f48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff ffbe 	bl	8001f48 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001fcc:	20b0      	movs	r0, #176	; 0xb0
 8001fce:	f7ff ffbb 	bl	8001f48 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001fd2:	20c8      	movs	r0, #200	; 0xc8
 8001fd4:	f7ff ffb8 	bl	8001f48 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff ffb5 	bl	8001f48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001fde:	2010      	movs	r0, #16
 8001fe0:	f7ff ffb2 	bl	8001f48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001fe4:	2040      	movs	r0, #64	; 0x40
 8001fe6:	f7ff ffaf 	bl	8001f48 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001fea:	20ff      	movs	r0, #255	; 0xff
 8001fec:	f000 f9a2 	bl	8002334 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001ff0:	20a1      	movs	r0, #161	; 0xa1
 8001ff2:	f7ff ffa9 	bl	8001f48 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001ff6:	20a6      	movs	r0, #166	; 0xa6
 8001ff8:	f7ff ffa6 	bl	8001f48 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001ffc:	20a8      	movs	r0, #168	; 0xa8
 8001ffe:	f7ff ffa3 	bl	8001f48 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002002:	203f      	movs	r0, #63	; 0x3f
 8002004:	f7ff ffa0 	bl	8001f48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002008:	20a4      	movs	r0, #164	; 0xa4
 800200a:	f7ff ff9d 	bl	8001f48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800200e:	20d3      	movs	r0, #211	; 0xd3
 8002010:	f7ff ff9a 	bl	8001f48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002014:	2000      	movs	r0, #0
 8002016:	f7ff ff97 	bl	8001f48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800201a:	20d5      	movs	r0, #213	; 0xd5
 800201c:	f7ff ff94 	bl	8001f48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002020:	20f0      	movs	r0, #240	; 0xf0
 8002022:	f7ff ff91 	bl	8001f48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002026:	20d9      	movs	r0, #217	; 0xd9
 8002028:	f7ff ff8e 	bl	8001f48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800202c:	2022      	movs	r0, #34	; 0x22
 800202e:	f7ff ff8b 	bl	8001f48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002032:	20da      	movs	r0, #218	; 0xda
 8002034:	f7ff ff88 	bl	8001f48 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002038:	2012      	movs	r0, #18
 800203a:	f7ff ff85 	bl	8001f48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800203e:	20db      	movs	r0, #219	; 0xdb
 8002040:	f7ff ff82 	bl	8001f48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002044:	2020      	movs	r0, #32
 8002046:	f7ff ff7f 	bl	8001f48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800204a:	208d      	movs	r0, #141	; 0x8d
 800204c:	f7ff ff7c 	bl	8001f48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002050:	2014      	movs	r0, #20
 8002052:	f7ff ff79 	bl	8001f48 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002056:	2001      	movs	r0, #1
 8002058:	f000 f980 	bl	800235c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800205c:	2000      	movs	r0, #0
 800205e:	f000 f80f 	bl	8002080 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002062:	f000 f825 	bl	80020b0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <ssd1306_Init+0xd0>)
 8002068:	2200      	movs	r2, #0
 800206a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <ssd1306_Init+0xd0>)
 800206e:	2200      	movs	r2, #0
 8002070:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002072:	4b02      	ldr	r3, [pc, #8]	; (800207c <ssd1306_Init+0xd0>)
 8002074:	2201      	movs	r2, #1
 8002076:	711a      	strb	r2, [r3, #4]
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000684 	.word	0x20000684

08002080 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <ssd1306_Fill+0x14>
 8002090:	2300      	movs	r3, #0
 8002092:	e000      	b.n	8002096 <ssd1306_Fill+0x16>
 8002094:	23ff      	movs	r3, #255	; 0xff
 8002096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800209a:	4619      	mov	r1, r3
 800209c:	4803      	ldr	r0, [pc, #12]	; (80020ac <ssd1306_Fill+0x2c>)
 800209e:	f00b fff0 	bl	800e082 <memset>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000284 	.word	0x20000284

080020b0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80020b6:	2300      	movs	r3, #0
 80020b8:	71fb      	strb	r3, [r7, #7]
 80020ba:	e016      	b.n	80020ea <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	3b50      	subs	r3, #80	; 0x50
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ff40 	bl	8001f48 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7ff ff3d 	bl	8001f48 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80020ce:	2010      	movs	r0, #16
 80020d0:	f7ff ff3a 	bl	8001f48 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	01db      	lsls	r3, r3, #7
 80020d8:	4a08      	ldr	r2, [pc, #32]	; (80020fc <ssd1306_UpdateScreen+0x4c>)
 80020da:	4413      	add	r3, r2
 80020dc:	2180      	movs	r1, #128	; 0x80
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff4a 	bl	8001f78 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	3301      	adds	r3, #1
 80020e8:	71fb      	strb	r3, [r7, #7]
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	2b07      	cmp	r3, #7
 80020ee:	d9e5      	bls.n	80020bc <ssd1306_UpdateScreen+0xc>
    }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000284 	.word	0x20000284

08002100 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
 800210a:	460b      	mov	r3, r1
 800210c:	71bb      	strb	r3, [r7, #6]
 800210e:	4613      	mov	r3, r2
 8002110:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	2b00      	cmp	r3, #0
 8002118:	db3d      	blt.n	8002196 <ssd1306_DrawPixel+0x96>
 800211a:	79bb      	ldrb	r3, [r7, #6]
 800211c:	2b3f      	cmp	r3, #63	; 0x3f
 800211e:	d83a      	bhi.n	8002196 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002120:	797b      	ldrb	r3, [r7, #5]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d11a      	bne.n	800215c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002126:	79fa      	ldrb	r2, [r7, #7]
 8002128:	79bb      	ldrb	r3, [r7, #6]
 800212a:	08db      	lsrs	r3, r3, #3
 800212c:	b2d8      	uxtb	r0, r3
 800212e:	4603      	mov	r3, r0
 8002130:	01db      	lsls	r3, r3, #7
 8002132:	4413      	add	r3, r2
 8002134:	4a1b      	ldr	r2, [pc, #108]	; (80021a4 <ssd1306_DrawPixel+0xa4>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	b25a      	sxtb	r2, r3
 800213a:	79bb      	ldrb	r3, [r7, #6]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	b25b      	sxtb	r3, r3
 8002148:	4313      	orrs	r3, r2
 800214a:	b259      	sxtb	r1, r3
 800214c:	79fa      	ldrb	r2, [r7, #7]
 800214e:	4603      	mov	r3, r0
 8002150:	01db      	lsls	r3, r3, #7
 8002152:	4413      	add	r3, r2
 8002154:	b2c9      	uxtb	r1, r1
 8002156:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <ssd1306_DrawPixel+0xa4>)
 8002158:	54d1      	strb	r1, [r2, r3]
 800215a:	e01d      	b.n	8002198 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800215c:	79fa      	ldrb	r2, [r7, #7]
 800215e:	79bb      	ldrb	r3, [r7, #6]
 8002160:	08db      	lsrs	r3, r3, #3
 8002162:	b2d8      	uxtb	r0, r3
 8002164:	4603      	mov	r3, r0
 8002166:	01db      	lsls	r3, r3, #7
 8002168:	4413      	add	r3, r2
 800216a:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <ssd1306_DrawPixel+0xa4>)
 800216c:	5cd3      	ldrb	r3, [r2, r3]
 800216e:	b25a      	sxtb	r2, r3
 8002170:	79bb      	ldrb	r3, [r7, #6]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	2101      	movs	r1, #1
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	b25b      	sxtb	r3, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	b25b      	sxtb	r3, r3
 8002182:	4013      	ands	r3, r2
 8002184:	b259      	sxtb	r1, r3
 8002186:	79fa      	ldrb	r2, [r7, #7]
 8002188:	4603      	mov	r3, r0
 800218a:	01db      	lsls	r3, r3, #7
 800218c:	4413      	add	r3, r2
 800218e:	b2c9      	uxtb	r1, r1
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <ssd1306_DrawPixel+0xa4>)
 8002192:	54d1      	strb	r1, [r2, r3]
 8002194:	e000      	b.n	8002198 <ssd1306_DrawPixel+0x98>
        return;
 8002196:	bf00      	nop
    }
}
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000284 	.word	0x20000284

080021a8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b089      	sub	sp, #36	; 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4604      	mov	r4, r0
 80021b0:	1d38      	adds	r0, r7, #4
 80021b2:	e880 0006 	stmia.w	r0, {r1, r2}
 80021b6:	461a      	mov	r2, r3
 80021b8:	4623      	mov	r3, r4
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	4613      	mov	r3, r2
 80021be:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	2b1f      	cmp	r3, #31
 80021c4:	d902      	bls.n	80021cc <ssd1306_WriteChar+0x24>
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	2b7e      	cmp	r3, #126	; 0x7e
 80021ca:	d901      	bls.n	80021d0 <ssd1306_WriteChar+0x28>
        return 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	e06d      	b.n	80022ac <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80021d0:	4b38      	ldr	r3, [pc, #224]	; (80022b4 <ssd1306_WriteChar+0x10c>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	793b      	ldrb	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	2b80      	cmp	r3, #128	; 0x80
 80021dc:	dc06      	bgt.n	80021ec <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80021de:	4b35      	ldr	r3, [pc, #212]	; (80022b4 <ssd1306_WriteChar+0x10c>)
 80021e0:	885b      	ldrh	r3, [r3, #2]
 80021e2:	461a      	mov	r2, r3
 80021e4:	797b      	ldrb	r3, [r7, #5]
 80021e6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80021e8:	2b40      	cmp	r3, #64	; 0x40
 80021ea:	dd01      	ble.n	80021f0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	e05d      	b.n	80022ac <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
 80021f4:	e04c      	b.n	8002290 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	3b20      	subs	r3, #32
 80021fc:	7979      	ldrb	r1, [r7, #5]
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4619      	mov	r1, r3
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	440b      	add	r3, r1
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002210:	2300      	movs	r3, #0
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	e034      	b.n	8002280 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d012      	beq.n	800224c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002226:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <ssd1306_WriteChar+0x10c>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	4413      	add	r3, r2
 8002232:	b2d8      	uxtb	r0, r3
 8002234:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <ssd1306_WriteChar+0x10c>)
 8002236:	885b      	ldrh	r3, [r3, #2]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	4413      	add	r3, r2
 8002240:	b2db      	uxtb	r3, r3
 8002242:	7bba      	ldrb	r2, [r7, #14]
 8002244:	4619      	mov	r1, r3
 8002246:	f7ff ff5b 	bl	8002100 <ssd1306_DrawPixel>
 800224a:	e016      	b.n	800227a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <ssd1306_WriteChar+0x10c>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	4413      	add	r3, r2
 8002258:	b2d8      	uxtb	r0, r3
 800225a:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <ssd1306_WriteChar+0x10c>)
 800225c:	885b      	ldrh	r3, [r3, #2]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4413      	add	r3, r2
 8002266:	b2d9      	uxtb	r1, r3
 8002268:	7bbb      	ldrb	r3, [r7, #14]
 800226a:	2b00      	cmp	r3, #0
 800226c:	bf0c      	ite	eq
 800226e:	2301      	moveq	r3, #1
 8002270:	2300      	movne	r3, #0
 8002272:	b2db      	uxtb	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	f7ff ff43 	bl	8002100 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	3301      	adds	r3, #1
 800227e:	61bb      	str	r3, [r7, #24]
 8002280:	793b      	ldrb	r3, [r7, #4]
 8002282:	461a      	mov	r2, r3
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	4293      	cmp	r3, r2
 8002288:	d3c5      	bcc.n	8002216 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3301      	adds	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	797b      	ldrb	r3, [r7, #5]
 8002292:	461a      	mov	r2, r3
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	4293      	cmp	r3, r2
 8002298:	d3ad      	bcc.n	80021f6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <ssd1306_WriteChar+0x10c>)
 800229c:	881a      	ldrh	r2, [r3, #0]
 800229e:	793b      	ldrb	r3, [r7, #4]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <ssd1306_WriteChar+0x10c>)
 80022a8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3724      	adds	r7, #36	; 0x24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd90      	pop	{r4, r7, pc}
 80022b4:	20000684 	.word	0x20000684

080022b8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	1d38      	adds	r0, r7, #4
 80022c2:	e880 0006 	stmia.w	r0, {r1, r2}
 80022c6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80022c8:	e012      	b.n	80022f0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	7818      	ldrb	r0, [r3, #0]
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	1d3a      	adds	r2, r7, #4
 80022d2:	ca06      	ldmia	r2, {r1, r2}
 80022d4:	f7ff ff68 	bl	80021a8 <ssd1306_WriteChar>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d002      	beq.n	80022ea <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	e008      	b.n	80022fc <ssd1306_WriteString+0x44>
        }
        str++;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3301      	adds	r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1e8      	bne.n	80022ca <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	781b      	ldrb	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	460a      	mov	r2, r1
 800230e:	71fb      	strb	r3, [r7, #7]
 8002310:	4613      	mov	r3, r2
 8002312:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	b29a      	uxth	r2, r3
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <ssd1306_SetCursor+0x2c>)
 800231a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800231c:	79bb      	ldrb	r3, [r7, #6]
 800231e:	b29a      	uxth	r2, r3
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <ssd1306_SetCursor+0x2c>)
 8002322:	805a      	strh	r2, [r3, #2]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	20000684 	.word	0x20000684

08002334 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800233e:	2381      	movs	r3, #129	; 0x81
 8002340:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fdff 	bl	8001f48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fdfb 	bl	8001f48 <ssd1306_WriteCommand>
}
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800236c:	23af      	movs	r3, #175	; 0xaf
 800236e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <ssd1306_SetDisplayOn+0x38>)
 8002372:	2201      	movs	r2, #1
 8002374:	715a      	strb	r2, [r3, #5]
 8002376:	e004      	b.n	8002382 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002378:	23ae      	movs	r3, #174	; 0xae
 800237a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <ssd1306_SetDisplayOn+0x38>)
 800237e:	2200      	movs	r2, #0
 8002380:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fddf 	bl	8001f48 <ssd1306_WriteCommand>
}
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000684 	.word	0x20000684

08002398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_MspInit+0x4c>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a10      	ldr	r2, [pc, #64]	; (80023e4 <HAL_MspInit+0x4c>)
 80023a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <HAL_MspInit+0x4c>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_MspInit+0x4c>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <HAL_MspInit+0x4c>)
 80023bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c0:	6453      	str	r3, [r2, #68]	; 0x44
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_MspInit+0x4c>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023ce:	2200      	movs	r2, #0
 80023d0:	210f      	movs	r1, #15
 80023d2:	f06f 0001 	mvn.w	r0, #1
 80023d6:	f000 fedb 	bl	8003190 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800

080023e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08e      	sub	sp, #56	; 0x38
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80023f8:	4b33      	ldr	r3, [pc, #204]	; (80024c8 <HAL_InitTick+0xe0>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	4a32      	ldr	r2, [pc, #200]	; (80024c8 <HAL_InitTick+0xe0>)
 80023fe:	f043 0310 	orr.w	r3, r3, #16
 8002402:	6413      	str	r3, [r2, #64]	; 0x40
 8002404:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <HAL_InitTick+0xe0>)
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002410:	f107 0210 	add.w	r2, r7, #16
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f002 ffc8 	bl	80053b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d103      	bne.n	8002432 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800242a:	f002 ff99 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 800242e:	6378      	str	r0, [r7, #52]	; 0x34
 8002430:	e004      	b.n	800243c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002432:	f002 ff95 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8002436:	4603      	mov	r3, r0
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800243c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243e:	4a23      	ldr	r2, [pc, #140]	; (80024cc <HAL_InitTick+0xe4>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	0c9b      	lsrs	r3, r3, #18
 8002446:	3b01      	subs	r3, #1
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800244a:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <HAL_InitTick+0xe8>)
 800244c:	4a21      	ldr	r2, [pc, #132]	; (80024d4 <HAL_InitTick+0xec>)
 800244e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002450:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <HAL_InitTick+0xe8>)
 8002452:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002456:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002458:	4a1d      	ldr	r2, [pc, #116]	; (80024d0 <HAL_InitTick+0xe8>)
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <HAL_InitTick+0xe8>)
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_InitTick+0xe8>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246a:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_InitTick+0xe8>)
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002470:	4817      	ldr	r0, [pc, #92]	; (80024d0 <HAL_InitTick+0xe8>)
 8002472:	f004 f92d 	bl	80066d0 <HAL_TIM_Base_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800247c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002480:	2b00      	cmp	r3, #0
 8002482:	d11b      	bne.n	80024bc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002484:	4812      	ldr	r0, [pc, #72]	; (80024d0 <HAL_InitTick+0xe8>)
 8002486:	f004 f985 	bl	8006794 <HAL_TIM_Base_Start_IT>
 800248a:	4603      	mov	r3, r0
 800248c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002490:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002494:	2b00      	cmp	r3, #0
 8002496:	d111      	bne.n	80024bc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002498:	2036      	movs	r0, #54	; 0x36
 800249a:	f000 fe95 	bl	80031c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b0f      	cmp	r3, #15
 80024a2:	d808      	bhi.n	80024b6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80024a4:	2200      	movs	r2, #0
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	2036      	movs	r0, #54	; 0x36
 80024aa:	f000 fe71 	bl	8003190 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024ae:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <HAL_InitTick+0xf0>)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	e002      	b.n	80024bc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80024bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3738      	adds	r7, #56	; 0x38
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40023800 	.word	0x40023800
 80024cc:	431bde83 	.word	0x431bde83
 80024d0:	2000068c 	.word	0x2000068c
 80024d4:	40001000 	.word	0x40001000
 80024d8:	2000005c 	.word	0x2000005c

080024dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <NMI_Handler+0x4>

080024e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e6:	e7fe      	b.n	80024e6 <HardFault_Handler+0x4>

080024e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <MemManage_Handler+0x4>

080024ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f2:	e7fe      	b.n	80024f2 <BusFault_Handler+0x4>

080024f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <UsageFault_Handler+0x4>

080024fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <TIM6_DAC_IRQHandler+0x20>)
 800250e:	791b      	ldrb	r3, [r3, #4]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8002516:	4804      	ldr	r0, [pc, #16]	; (8002528 <TIM6_DAC_IRQHandler+0x20>)
 8002518:	f000 fed8 	bl	80032cc <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800251c:	4803      	ldr	r0, [pc, #12]	; (800252c <TIM6_DAC_IRQHandler+0x24>)
 800251e:	f004 fb03 	bl	8006b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000110 	.word	0x20000110
 800252c:	2000068c 	.word	0x2000068c

08002530 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <DMA2_Stream3_IRQHandler+0x10>)
 8002536:	f001 f94b 	bl	80037d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000224 	.word	0x20000224

08002544 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <USART6_IRQHandler+0x10>)
 800254a:	f005 f9ab 	bl	80078a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000728 	.word	0x20000728

08002558 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	e00a      	b.n	8002580 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800256a:	f3af 8000 	nop.w
 800256e:	4601      	mov	r1, r0
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	60ba      	str	r2, [r7, #8]
 8002576:	b2ca      	uxtb	r2, r1
 8002578:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	3301      	adds	r3, #1
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	429a      	cmp	r2, r3
 8002586:	dbf0      	blt.n	800256a <_read+0x12>
  }

  return len;
 8002588:	687b      	ldr	r3, [r7, #4]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e009      	b.n	80025b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	60ba      	str	r2, [r7, #8]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3301      	adds	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	dbf1      	blt.n	80025a4 <_write+0x12>
  }
  return len;
 80025c0:	687b      	ldr	r3, [r7, #4]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <_close>:

int _close(int file)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025f2:	605a      	str	r2, [r3, #4]
  return 0;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <_isatty>:

int _isatty(int file)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800260a:	2301      	movs	r3, #1
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <_sbrk+0x5c>)
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <_sbrk+0x60>)
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <_sbrk+0x64>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <_sbrk+0x64>)
 8002652:	4a12      	ldr	r2, [pc, #72]	; (800269c <_sbrk+0x68>)
 8002654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <_sbrk+0x64>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4413      	add	r3, r2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	429a      	cmp	r2, r3
 8002662:	d207      	bcs.n	8002674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002664:	f00b fdb2 	bl	800e1cc <__errno>
 8002668:	4603      	mov	r3, r0
 800266a:	220c      	movs	r2, #12
 800266c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	e009      	b.n	8002688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <_sbrk+0x64>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <_sbrk+0x64>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	4a05      	ldr	r2, [pc, #20]	; (8002698 <_sbrk+0x64>)
 8002684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20080000 	.word	0x20080000
 8002694:	00000400 	.word	0x00000400
 8002698:	200006d8 	.word	0x200006d8
 800269c:	20007b78 	.word	0x20007b78

080026a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <SystemInit+0x20>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <SystemInit+0x20>)
 80026ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ca:	f107 031c 	add.w	r3, r7, #28
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026d6:	463b      	mov	r3, r7
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
 80026e4:	615a      	str	r2, [r3, #20]
 80026e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026e8:	4b21      	ldr	r3, [pc, #132]	; (8002770 <MX_TIM4_Init+0xac>)
 80026ea:	4a22      	ldr	r2, [pc, #136]	; (8002774 <MX_TIM4_Init+0xb0>)
 80026ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <MX_TIM4_Init+0xac>)
 80026f0:	223f      	movs	r2, #63	; 0x3f
 80026f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f4:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <MX_TIM4_Init+0xac>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80026fa:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <MX_TIM4_Init+0xac>)
 80026fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002700:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002702:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <MX_TIM4_Init+0xac>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <MX_TIM4_Init+0xac>)
 800270a:	2200      	movs	r2, #0
 800270c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800270e:	4818      	ldr	r0, [pc, #96]	; (8002770 <MX_TIM4_Init+0xac>)
 8002710:	f004 f8b8 	bl	8006884 <HAL_TIM_PWM_Init>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800271a:	f7ff fb35 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002726:	f107 031c 	add.w	r3, r7, #28
 800272a:	4619      	mov	r1, r3
 800272c:	4810      	ldr	r0, [pc, #64]	; (8002770 <MX_TIM4_Init+0xac>)
 800272e:	f004 ff7b 	bl	8007628 <HAL_TIMEx_MasterConfigSynchronization>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002738:	f7ff fb26 	bl	8001d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800273c:	2360      	movs	r3, #96	; 0x60
 800273e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800274c:	463b      	mov	r3, r7
 800274e:	2208      	movs	r2, #8
 8002750:	4619      	mov	r1, r3
 8002752:	4807      	ldr	r0, [pc, #28]	; (8002770 <MX_TIM4_Init+0xac>)
 8002754:	f004 fb08 	bl	8006d68 <HAL_TIM_PWM_ConfigChannel>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800275e:	f7ff fb13 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002762:	4803      	ldr	r0, [pc, #12]	; (8002770 <MX_TIM4_Init+0xac>)
 8002764:	f000 f828 	bl	80027b8 <HAL_TIM_MspPostInit>

}
 8002768:	bf00      	nop
 800276a:	3728      	adds	r7, #40	; 0x28
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	200006dc 	.word	0x200006dc
 8002774:	40000800 	.word	0x40000800

08002778 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <HAL_TIM_PWM_MspInit+0x38>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d10b      	bne.n	80027a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_TIM_PWM_MspInit+0x3c>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	6413      	str	r3, [r2, #64]	; 0x40
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40000800 	.word	0x40000800
 80027b4:	40023800 	.word	0x40023800

080027b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a11      	ldr	r2, [pc, #68]	; (800281c <HAL_TIM_MspPostInit+0x64>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d11c      	bne.n	8002814 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027da:	4b11      	ldr	r3, [pc, #68]	; (8002820 <HAL_TIM_MspPostInit+0x68>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a10      	ldr	r2, [pc, #64]	; (8002820 <HAL_TIM_MspPostInit+0x68>)
 80027e0:	f043 0308 	orr.w	r3, r3, #8
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <HAL_TIM_MspPostInit+0x68>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = StepperMotorStep_Pin;
 80027f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f8:	2302      	movs	r3, #2
 80027fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002804:	2302      	movs	r3, #2
 8002806:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(StepperMotorStep_GPIO_Port, &GPIO_InitStruct);
 8002808:	f107 030c 	add.w	r3, r7, #12
 800280c:	4619      	mov	r1, r3
 800280e:	4805      	ldr	r0, [pc, #20]	; (8002824 <HAL_TIM_MspPostInit+0x6c>)
 8002810:	f001 fa48 	bl	8003ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002814:	bf00      	nop
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40000800 	.word	0x40000800
 8002820:	40023800 	.word	0x40023800
 8002824:	40020c00 	.word	0x40020c00

08002828 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <MX_USART6_UART_Init+0x58>)
 800282e:	4a15      	ldr	r2, [pc, #84]	; (8002884 <MX_USART6_UART_Init+0x5c>)
 8002830:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <MX_USART6_UART_Init+0x58>)
 8002834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002838:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800283a:	4b11      	ldr	r3, [pc, #68]	; (8002880 <MX_USART6_UART_Init+0x58>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002840:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <MX_USART6_UART_Init+0x58>)
 8002842:	2200      	movs	r2, #0
 8002844:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002846:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <MX_USART6_UART_Init+0x58>)
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <MX_USART6_UART_Init+0x58>)
 800284e:	220c      	movs	r2, #12
 8002850:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <MX_USART6_UART_Init+0x58>)
 8002854:	2200      	movs	r2, #0
 8002856:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <MX_USART6_UART_Init+0x58>)
 800285a:	2200      	movs	r2, #0
 800285c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <MX_USART6_UART_Init+0x58>)
 8002860:	2200      	movs	r2, #0
 8002862:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <MX_USART6_UART_Init+0x58>)
 8002866:	2200      	movs	r2, #0
 8002868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800286a:	4805      	ldr	r0, [pc, #20]	; (8002880 <MX_USART6_UART_Init+0x58>)
 800286c:	f004 ff88 	bl	8007780 <HAL_UART_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002876:	f7ff fa87 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000728 	.word	0x20000728
 8002884:	40011400 	.word	0x40011400

08002888 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b0ae      	sub	sp, #184	; 0xb8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	2290      	movs	r2, #144	; 0x90
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f00b fbea 	bl	800e082 <memset>
  if(uartHandle->Instance==USART6)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a26      	ldr	r2, [pc, #152]	; (800294c <HAL_UART_MspInit+0xc4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d144      	bne.n	8002942 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80028b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80028be:	2300      	movs	r3, #0
 80028c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	4618      	mov	r0, r3
 80028c8:	f002 fda4 	bl	8005414 <HAL_RCCEx_PeriphCLKConfig>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80028d2:	f7ff fa59 	bl	8001d88 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80028d6:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <HAL_UART_MspInit+0xc8>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	4a1d      	ldr	r2, [pc, #116]	; (8002950 <HAL_UART_MspInit+0xc8>)
 80028dc:	f043 0320 	orr.w	r3, r3, #32
 80028e0:	6453      	str	r3, [r2, #68]	; 0x44
 80028e2:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_UART_MspInit+0xc8>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028ee:	4b18      	ldr	r3, [pc, #96]	; (8002950 <HAL_UART_MspInit+0xc8>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a17      	ldr	r2, [pc, #92]	; (8002950 <HAL_UART_MspInit+0xc8>)
 80028f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <HAL_UART_MspInit+0xc8>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = RPiPicoW_TX_Pin|RPiPicoW_RX_Pin;
 8002906:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800290a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290e:	2302      	movs	r3, #2
 8002910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291a:	2303      	movs	r3, #3
 800291c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002920:	2308      	movs	r3, #8
 8002922:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002926:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800292a:	4619      	mov	r1, r3
 800292c:	4809      	ldr	r0, [pc, #36]	; (8002954 <HAL_UART_MspInit+0xcc>)
 800292e:	f001 f9b9 	bl	8003ca4 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2105      	movs	r1, #5
 8002936:	2047      	movs	r0, #71	; 0x47
 8002938:	f000 fc2a 	bl	8003190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800293c:	2047      	movs	r0, #71	; 0x47
 800293e:	f000 fc43 	bl	80031c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002942:	bf00      	nop
 8002944:	37b8      	adds	r7, #184	; 0xb8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40011400 	.word	0x40011400
 8002950:	40023800 	.word	0x40023800
 8002954:	40021800 	.word	0x40021800

08002958 <ws2812b_init>:
static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);
static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);

// ======== Public Functions =======================================================================

int ws2812b_init(ws2812b_handle_t *ws) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  // Point ws2812b_error_msg to error buffer unless error message buffer is disabled.
#ifndef WS2812B_DISABLE_ERROR_MSG
  ws2812b_error_msg = error_msg_buf;
 8002960:	4b7a      	ldr	r3, [pc, #488]	; (8002b4c <ws2812b_init+0x1f4>)
 8002962:	4a7b      	ldr	r2, [pc, #492]	; (8002b50 <ws2812b_init+0x1f8>)
 8002964:	601a      	str	r2, [r3, #0]
  error_msg_buf[0] = '\0';
 8002966:	4b7a      	ldr	r3, [pc, #488]	; (8002b50 <ws2812b_init+0x1f8>)
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
#else  /* WS2812B_DISABLE_ERROR_MSG */
  ws2812b_error_msg = 0;
#endif /* WS2812B_DISABLE_ERROR_MSG */

  // Assert packing is valid
  WS2812B_INIT_ASSERT((ws->config.packing == WS2812B_PACKING_DOUBLE) ||
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d009      	beq.n	8002988 <ws2812b_init+0x30>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d005      	beq.n	8002988 <ws2812b_init+0x30>
 800297c:	4875      	ldr	r0, [pc, #468]	; (8002b54 <ws2812b_init+0x1fc>)
 800297e:	f000 f9f5 	bl	8002d6c <set_init_error_msg>
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
 8002986:	e17f      	b.n	8002c88 <ws2812b_init+0x330>
                          (ws->config.packing == WS2812B_PACKING_SINGLE),
                      "ws2812b: config.packing is invalid!");

  // Assert pulse_len_1 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_1),
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	789b      	ldrb	r3, [r3, #2]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d01d      	beq.n	80029cc <ws2812b_init+0x74>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	789b      	ldrb	r3, [r3, #2]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d019      	beq.n	80029cc <ws2812b_init+0x74>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	789b      	ldrb	r3, [r3, #2]
 800299c:	2b07      	cmp	r3, #7
 800299e:	d015      	beq.n	80029cc <ws2812b_init+0x74>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	789b      	ldrb	r3, [r3, #2]
 80029a4:	2b0f      	cmp	r3, #15
 80029a6:	d011      	beq.n	80029cc <ws2812b_init+0x74>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	789b      	ldrb	r3, [r3, #2]
 80029ac:	2b3f      	cmp	r3, #63	; 0x3f
 80029ae:	d00d      	beq.n	80029cc <ws2812b_init+0x74>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	789b      	ldrb	r3, [r3, #2]
 80029b4:	2b1f      	cmp	r3, #31
 80029b6:	d009      	beq.n	80029cc <ws2812b_init+0x74>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	789b      	ldrb	r3, [r3, #2]
 80029bc:	2b7f      	cmp	r3, #127	; 0x7f
 80029be:	d005      	beq.n	80029cc <ws2812b_init+0x74>
 80029c0:	4865      	ldr	r0, [pc, #404]	; (8002b58 <ws2812b_init+0x200>)
 80029c2:	f000 f9d3 	bl	8002d6c <set_init_error_msg>
 80029c6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ca:	e15d      	b.n	8002c88 <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_1 is invalid!");

  // Asert pulse_len_0 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_0),
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	785b      	ldrb	r3, [r3, #1]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d01d      	beq.n	8002a10 <ws2812b_init+0xb8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	785b      	ldrb	r3, [r3, #1]
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d019      	beq.n	8002a10 <ws2812b_init+0xb8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	785b      	ldrb	r3, [r3, #1]
 80029e0:	2b07      	cmp	r3, #7
 80029e2:	d015      	beq.n	8002a10 <ws2812b_init+0xb8>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	785b      	ldrb	r3, [r3, #1]
 80029e8:	2b0f      	cmp	r3, #15
 80029ea:	d011      	beq.n	8002a10 <ws2812b_init+0xb8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	785b      	ldrb	r3, [r3, #1]
 80029f0:	2b3f      	cmp	r3, #63	; 0x3f
 80029f2:	d00d      	beq.n	8002a10 <ws2812b_init+0xb8>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	785b      	ldrb	r3, [r3, #1]
 80029f8:	2b1f      	cmp	r3, #31
 80029fa:	d009      	beq.n	8002a10 <ws2812b_init+0xb8>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	785b      	ldrb	r3, [r3, #1]
 8002a00:	2b7f      	cmp	r3, #127	; 0x7f
 8002a02:	d005      	beq.n	8002a10 <ws2812b_init+0xb8>
 8002a04:	4855      	ldr	r0, [pc, #340]	; (8002b5c <ws2812b_init+0x204>)
 8002a06:	f000 f9b1 	bl	8002d6c <set_init_error_msg>
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0e:	e13b      	b.n	8002c88 <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_0 is invalid!");

  // Assert first_bit_0 is valid
  WS2812B_INIT_ASSERT((ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_DISABLED) ||
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	78db      	ldrb	r3, [r3, #3]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d009      	beq.n	8002a2c <ws2812b_init+0xd4>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	78db      	ldrb	r3, [r3, #3]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d005      	beq.n	8002a2c <ws2812b_init+0xd4>
 8002a20:	484f      	ldr	r0, [pc, #316]	; (8002b60 <ws2812b_init+0x208>)
 8002a22:	f000 f9a3 	bl	8002d6c <set_init_error_msg>
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	e12d      	b.n	8002c88 <ws2812b_init+0x330>
                          (ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_ENABLED),
                      "ws2812b: config.first_bit_0 is invalid!");

  // Assert spi_bit_order is valid
  WS2812B_INIT_ASSERT((ws->config.spi_bit_order == WS2812B_LSB_FIRST) ||
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	791b      	ldrb	r3, [r3, #4]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d009      	beq.n	8002a48 <ws2812b_init+0xf0>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	791b      	ldrb	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <ws2812b_init+0xf0>
 8002a3c:	4849      	ldr	r0, [pc, #292]	; (8002b64 <ws2812b_init+0x20c>)
 8002a3e:	f000 f995 	bl	8002d6c <set_init_error_msg>
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295
 8002a46:	e11f      	b.n	8002c88 <ws2812b_init+0x330>
                          (ws->config.spi_bit_order == WS2812B_MSB_FIRST),
                      "ws2812b: config.spi_bit_order is invalid!");

  // Assert that the '1' pulse is longer than the '0' pulse:
  WS2812B_INIT_ASSERT(ws->config.pulse_len_1 > ws->config.pulse_len_0,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	789a      	ldrb	r2, [r3, #2]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	785b      	ldrb	r3, [r3, #1]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d805      	bhi.n	8002a60 <ws2812b_init+0x108>
 8002a54:	4844      	ldr	r0, [pc, #272]	; (8002b68 <ws2812b_init+0x210>)
 8002a56:	f000 f989 	bl	8002d6c <set_init_error_msg>
 8002a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5e:	e113      	b.n	8002c88 <ws2812b_init+0x330>
                      "ws2812b: One-pulse must be longer than zero-pulse!");

  // Assert that pulse is not too long if in double packing:
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d109      	bne.n	8002a7c <ws2812b_init+0x124>
    WS2812B_INIT_ASSERT(ws->config.pulse_len_1 < WS2812B_PULSE_LEN_4b,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	789b      	ldrb	r3, [r3, #2]
 8002a6c:	2b0e      	cmp	r3, #14
 8002a6e:	d905      	bls.n	8002a7c <ws2812b_init+0x124>
 8002a70:	483e      	ldr	r0, [pc, #248]	; (8002b6c <ws2812b_init+0x214>)
 8002a72:	f000 f97b 	bl	8002d6c <set_init_error_msg>
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7a:	e105      	b.n	8002c88 <ws2812b_init+0x330>
                        "ws2812b: Pulse is too long for double packing!");
  }

  // Apply 0 prefix to pulse if selected
  ws->state.pulse_0 = ws->config.pulse_len_0 << ws->config.first_bit_0;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	785b      	ldrb	r3, [r3, #1]
 8002a80:	461a      	mov	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	78db      	ldrb	r3, [r3, #3]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	765a      	strb	r2, [r3, #25]
  ws->state.pulse_1 = ws->config.pulse_len_1 << ws->config.first_bit_0;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	789b      	ldrb	r3, [r3, #2]
 8002a94:	461a      	mov	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	78db      	ldrb	r3, [r3, #3]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	761a      	strb	r2, [r3, #24]

  // Pulse needs to be reverse for MSB-first transmission:
  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	791b      	ldrb	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f040 80e9 	bne.w	8002c80 <ws2812b_init+0x328>
    if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d15c      	bne.n	8002b70 <ws2812b_init+0x218>
      ws->state.pulse_0 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_0);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	7e5b      	ldrb	r3, [r3, #25]
 8002aba:	10db      	asrs	r3, r3, #3
 8002abc:	b25b      	sxtb	r3, r3
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	b25a      	sxtb	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	7e5b      	ldrb	r3, [r3, #25]
 8002ac8:	105b      	asrs	r3, r3, #1
 8002aca:	b25b      	sxtb	r3, r3
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	b25b      	sxtb	r3, r3
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	b25a      	sxtb	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	7e5b      	ldrb	r3, [r3, #25]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	b25b      	sxtb	r3, r3
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	b25b      	sxtb	r3, r3
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	b25a      	sxtb	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	7e5b      	ldrb	r3, [r3, #25]
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	b25b      	sxtb	r3, r3
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	b25b      	sxtb	r3, r3
 8002af6:	4313      	orrs	r3, r2
 8002af8:	b25b      	sxtb	r3, r3
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_1);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7e1b      	ldrb	r3, [r3, #24]
 8002b04:	10db      	asrs	r3, r3, #3
 8002b06:	b25b      	sxtb	r3, r3
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	b25a      	sxtb	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	7e1b      	ldrb	r3, [r3, #24]
 8002b12:	105b      	asrs	r3, r3, #1
 8002b14:	b25b      	sxtb	r3, r3
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	b25b      	sxtb	r3, r3
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	b25a      	sxtb	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	7e1b      	ldrb	r3, [r3, #24]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	b25b      	sxtb	r3, r3
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	b25b      	sxtb	r3, r3
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	b25a      	sxtb	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	7e1b      	ldrb	r3, [r3, #24]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	b25b      	sxtb	r3, r3
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	b25b      	sxtb	r3, r3
 8002b40:	4313      	orrs	r3, r2
 8002b42:	b25b      	sxtb	r3, r3
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	761a      	strb	r2, [r3, #24]
 8002b4a:	e099      	b.n	8002c80 <ws2812b_init+0x328>
 8002b4c:	200007b0 	.word	0x200007b0
 8002b50:	200007b4 	.word	0x200007b4
 8002b54:	0800eedc 	.word	0x0800eedc
 8002b58:	0800ef00 	.word	0x0800ef00
 8002b5c:	0800ef28 	.word	0x0800ef28
 8002b60:	0800ef50 	.word	0x0800ef50
 8002b64:	0800ef78 	.word	0x0800ef78
 8002b68:	0800efa4 	.word	0x0800efa4
 8002b6c:	0800efd8 	.word	0x0800efd8
    } else {
      ws->state.pulse_0 = WS2812B_BYTE_REVERSE(ws->state.pulse_0);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7e5b      	ldrb	r3, [r3, #25]
 8002b74:	09db      	lsrs	r3, r3, #7
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	b25a      	sxtb	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	7e5b      	ldrb	r3, [r3, #25]
 8002b7e:	115b      	asrs	r3, r3, #5
 8002b80:	b25b      	sxtb	r3, r3
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	b25b      	sxtb	r3, r3
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b25a      	sxtb	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	7e5b      	ldrb	r3, [r3, #25]
 8002b90:	10db      	asrs	r3, r3, #3
 8002b92:	b25b      	sxtb	r3, r3
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	b25b      	sxtb	r3, r3
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	b25a      	sxtb	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	7e5b      	ldrb	r3, [r3, #25]
 8002ba2:	105b      	asrs	r3, r3, #1
 8002ba4:	b25b      	sxtb	r3, r3
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	b25b      	sxtb	r3, r3
 8002bac:	4313      	orrs	r3, r2
 8002bae:	b25a      	sxtb	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	7e5b      	ldrb	r3, [r3, #25]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	b25b      	sxtb	r3, r3
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	b25b      	sxtb	r3, r3
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	b25a      	sxtb	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	7e5b      	ldrb	r3, [r3, #25]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	b25b      	sxtb	r3, r3
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	b25a      	sxtb	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	7e5b      	ldrb	r3, [r3, #25]
 8002bd8:	015b      	lsls	r3, r3, #5
 8002bda:	b25b      	sxtb	r3, r3
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	b25b      	sxtb	r3, r3
 8002be2:	4313      	orrs	r3, r2
 8002be4:	b25a      	sxtb	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7e5b      	ldrb	r3, [r3, #25]
 8002bea:	01db      	lsls	r3, r3, #7
 8002bec:	b25b      	sxtb	r3, r3
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	b25b      	sxtb	r3, r3
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_BYTE_REVERSE(ws->state.pulse_1);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	7e1b      	ldrb	r3, [r3, #24]
 8002bfc:	09db      	lsrs	r3, r3, #7
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	b25a      	sxtb	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	7e1b      	ldrb	r3, [r3, #24]
 8002c06:	115b      	asrs	r3, r3, #5
 8002c08:	b25b      	sxtb	r3, r3
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	b25b      	sxtb	r3, r3
 8002c10:	4313      	orrs	r3, r2
 8002c12:	b25a      	sxtb	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7e1b      	ldrb	r3, [r3, #24]
 8002c18:	10db      	asrs	r3, r3, #3
 8002c1a:	b25b      	sxtb	r3, r3
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	b25b      	sxtb	r3, r3
 8002c22:	4313      	orrs	r3, r2
 8002c24:	b25a      	sxtb	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7e1b      	ldrb	r3, [r3, #24]
 8002c2a:	105b      	asrs	r3, r3, #1
 8002c2c:	b25b      	sxtb	r3, r3
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	b25b      	sxtb	r3, r3
 8002c34:	4313      	orrs	r3, r2
 8002c36:	b25a      	sxtb	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	7e1b      	ldrb	r3, [r3, #24]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	b25b      	sxtb	r3, r3
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	b25b      	sxtb	r3, r3
 8002c46:	4313      	orrs	r3, r2
 8002c48:	b25a      	sxtb	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	7e1b      	ldrb	r3, [r3, #24]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	b25b      	sxtb	r3, r3
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	b25b      	sxtb	r3, r3
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	b25a      	sxtb	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	7e1b      	ldrb	r3, [r3, #24]
 8002c60:	015b      	lsls	r3, r3, #5
 8002c62:	b25b      	sxtb	r3, r3
 8002c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c68:	b25b      	sxtb	r3, r3
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	b25a      	sxtb	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	7e1b      	ldrb	r3, [r3, #24]
 8002c72:	01db      	lsls	r3, r3, #7
 8002c74:	b25b      	sxtb	r3, r3
 8002c76:	4313      	orrs	r3, r2
 8002c78:	b25b      	sxtb	r3, r3
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	761a      	strb	r2, [r3, #24]
    }
  }

  ws->state.iteration_index = 0;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	61da      	str	r2, [r3, #28]

  return 0;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <ws2812b_required_buffer_len>:

uint32_t ws2812b_required_buffer_len(ws2812b_handle_t *ws) {
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  return WS2812B_REQUIRED_BUFFER_LEN(ws->led_count, ws->config.packing, ws->config.prefix_len,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <ws2812b_required_buffer_len+0x18>
 8002ca4:	2318      	movs	r3, #24
 8002ca6:	e000      	b.n	8002caa <ws2812b_required_buffer_len+0x1a>
 8002ca8:	230c      	movs	r3, #12
 8002caa:	fb03 f202 	mul.w	r2, r3, r2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	441a      	add	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4413      	add	r3, r2
                                     ws->config.suffix_len);
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <ws2812b_fill_buffer>:

void ws2812b_fill_buffer(ws2812b_handle_t *ws, uint8_t *buffer) {
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
  ws2812b_led_t *led = ws->leds;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	617b      	str	r3, [r7, #20]

  // Add 0x00 prefix
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	e008      	b.n	8002cee <ws2812b_fill_buffer+0x28>
    *buffer = 0x00;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
    buffer++;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	3301      	adds	r3, #1
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d3f1      	bcc.n	8002cdc <ws2812b_fill_buffer+0x16>
  }

  // Fill buffer
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	e01a      	b.n	8002d34 <ws2812b_fill_buffer+0x6e>
    add_byte(ws, led->green, &buffer);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	785b      	ldrb	r3, [r3, #1]
 8002d02:	463a      	mov	r2, r7
 8002d04:	4619      	mov	r1, r3
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f85a 	bl	8002dc0 <add_byte>
    add_byte(ws, led->red, &buffer);
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	463a      	mov	r2, r7
 8002d12:	4619      	mov	r1, r3
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f853 	bl	8002dc0 <add_byte>
    add_byte(ws, led->blue, &buffer);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	789b      	ldrb	r3, [r3, #2]
 8002d1e:	463a      	mov	r2, r7
 8002d20:	4619      	mov	r1, r3
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f84c 	bl	8002dc0 <add_byte>
    led++;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	3303      	adds	r3, #3
 8002d2c:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3301      	adds	r3, #1
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d3df      	bcc.n	8002cfe <ws2812b_fill_buffer+0x38>
  }

  // Add 0x00 suffix
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	e008      	b.n	8002d56 <ws2812b_fill_buffer+0x90>
    *buffer = 0x00;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
    buffer++;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	3301      	adds	r3, #1
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d3f1      	bcc.n	8002d44 <ws2812b_fill_buffer+0x7e>
  }
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <set_init_error_msg>:
  return 0x00;
}

// ======== Private Functions ======================================================================

static void set_init_error_msg(const char *error_msg) {
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
#ifndef WS2812B_DISABLE_ERROR_MSG
  // If error mesages are enabled, copy over the error message
  int i = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]

  // Copy content
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 8002d78:	e00b      	b.n	8002d92 <set_init_error_msg+0x26>
    error_msg_buf[i] = error_msg[i];
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	4413      	add	r3, r2
 8002d80:	7819      	ldrb	r1, [r3, #0]
 8002d82:	4a0e      	ldr	r2, [pc, #56]	; (8002dbc <set_init_error_msg+0x50>)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	460a      	mov	r2, r1
 8002d8a:	701a      	strb	r2, [r3, #0]
    i++;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b3a      	cmp	r3, #58	; 0x3a
 8002d96:	dc05      	bgt.n	8002da4 <set_init_error_msg+0x38>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ea      	bne.n	8002d7a <set_init_error_msg+0xe>
  }

  // Terminate string
  error_msg_buf[i] = '\0';
 8002da4:	4a05      	ldr	r2, [pc, #20]	; (8002dbc <set_init_error_msg+0x50>)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4413      	add	r3, r2
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
#else
  // Otherwise avoid the unused-args warning
  (void)(error_msg);
#endif /* WS2812B_DISABLE_ERROR_MSG */
}
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	200007b4 	.word	0x200007b4

08002dc0 <add_byte>:

static void add_byte(ws2812b_handle_t *ws, uint8_t value, uint8_t **buffer) {
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	72fb      	strb	r3, [r7, #11]
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d118      	bne.n	8002e08 <add_byte+0x48>

    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	e011      	b.n	8002e00 <add_byte+0x40>
      **buffer = construct_double_pulse(ws, b, value);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681c      	ldr	r4, [r3, #0]
 8002de0:	7afb      	ldrb	r3, [r7, #11]
 8002de2:	461a      	mov	r2, r3
 8002de4:	6979      	ldr	r1, [r7, #20]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f844 	bl	8002e74 <construct_double_pulse>
 8002dec:	4603      	mov	r3, r0
 8002dee:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2b07      	cmp	r3, #7
 8002e04:	d9ea      	bls.n	8002ddc <add_byte+0x1c>
    for (uint_fast8_t b = 0; b < 8; b++) {
      **buffer = construct_single_pulse(ws, b, value);
      ++*buffer;
    }
  }
}
 8002e06:	e017      	b.n	8002e38 <add_byte+0x78>
    for (uint_fast8_t b = 0; b < 8; b++) {
 8002e08:	2300      	movs	r3, #0
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	e011      	b.n	8002e32 <add_byte+0x72>
      **buffer = construct_single_pulse(ws, b, value);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681c      	ldr	r4, [r3, #0]
 8002e12:	7afb      	ldrb	r3, [r7, #11]
 8002e14:	461a      	mov	r2, r3
 8002e16:	6939      	ldr	r1, [r7, #16]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f811 	bl	8002e40 <construct_single_pulse>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b++) {
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	2b07      	cmp	r3, #7
 8002e36:	d9ea      	bls.n	8002e0e <add_byte+0x4e>
}
 8002e38:	bf00      	nop
 8002e3a:	371c      	adds	r7, #28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd90      	pop	{r4, r7, pc}

08002e40 <construct_single_pulse>:

static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	71fb      	strb	r3, [r7, #7]
  return (value & ((0x80U) >> b) ? ws->state.pulse_1 : ws->state.pulse_0);
 8002e4e:	79fa      	ldrb	r2, [r7, #7]
 8002e50:	2180      	movs	r1, #128	; 0x80
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	fa21 f303 	lsr.w	r3, r1, r3
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <construct_single_pulse+0x24>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	7e1b      	ldrb	r3, [r3, #24]
 8002e62:	e001      	b.n	8002e68 <construct_single_pulse+0x28>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	7e5b      	ldrb	r3, [r3, #25]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <construct_double_pulse>:

static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	71fb      	strb	r3, [r7, #7]
  uint8_t result;
  uint8_t pulse_1 = ws->state.pulse_1;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	7e1b      	ldrb	r3, [r3, #24]
 8002e86:	75bb      	strb	r3, [r7, #22]
  uint8_t pulse_0 = ws->state.pulse_0;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	7e5b      	ldrb	r3, [r3, #25]
 8002e8c:	757b      	strb	r3, [r7, #21]

  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	791b      	ldrb	r3, [r3, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d121      	bne.n	8002eda <construct_double_pulse+0x66>
    // MSB is first
    result = value & ((0x80U) >> (b + 1)) ? pulse_1 : pulse_0;
 8002e96:	79fa      	ldrb	r2, [r7, #7]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <construct_double_pulse+0x38>
 8002ea8:	7dbb      	ldrb	r3, [r7, #22]
 8002eaa:	e000      	b.n	8002eae <construct_double_pulse+0x3a>
 8002eac:	7d7b      	ldrb	r3, [r7, #21]
 8002eae:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8002eb0:	79fa      	ldrb	r2, [r7, #7]
 8002eb2:	2180      	movs	r1, #128	; 0x80
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <construct_double_pulse+0x54>
 8002ec0:	7dbb      	ldrb	r3, [r7, #22]
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	b25b      	sxtb	r3, r3
 8002ec6:	e002      	b.n	8002ece <construct_double_pulse+0x5a>
 8002ec8:	7d7b      	ldrb	r3, [r7, #21]
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	b25b      	sxtb	r3, r3
 8002ece:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	b25b      	sxtb	r3, r3
 8002ed6:	75fb      	strb	r3, [r7, #23]
 8002ed8:	e020      	b.n	8002f1c <construct_double_pulse+0xa8>
  } else {
    // LSB is first
    result = value & ((0x80U) >> (b)) ? pulse_1 : pulse_0;
 8002eda:	79fa      	ldrb	r2, [r7, #7]
 8002edc:	2180      	movs	r1, #128	; 0x80
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	fa21 f303 	lsr.w	r3, r1, r3
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <construct_double_pulse+0x7a>
 8002eea:	7dbb      	ldrb	r3, [r7, #22]
 8002eec:	e000      	b.n	8002ef0 <construct_double_pulse+0x7c>
 8002eee:	7d7b      	ldrb	r3, [r7, #21]
 8002ef0:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b + 1)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8002ef2:	79fa      	ldrb	r2, [r7, #7]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	2180      	movs	r1, #128	; 0x80
 8002efa:	fa21 f303 	lsr.w	r3, r1, r3
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <construct_double_pulse+0x98>
 8002f04:	7dbb      	ldrb	r3, [r7, #22]
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	b25b      	sxtb	r3, r3
 8002f0a:	e002      	b.n	8002f12 <construct_double_pulse+0x9e>
 8002f0c:	7d7b      	ldrb	r3, [r7, #21]
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	b25b      	sxtb	r3, r3
 8002f12:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	b25b      	sxtb	r3, r3
 8002f1a:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f30:	480d      	ldr	r0, [pc, #52]	; (8002f68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f32:	490e      	ldr	r1, [pc, #56]	; (8002f6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f34:	4a0e      	ldr	r2, [pc, #56]	; (8002f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f38:	e002      	b.n	8002f40 <LoopCopyDataInit>

08002f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3e:	3304      	adds	r3, #4

08002f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f44:	d3f9      	bcc.n	8002f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f46:	4a0b      	ldr	r2, [pc, #44]	; (8002f74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f48:	4c0b      	ldr	r4, [pc, #44]	; (8002f78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f4c:	e001      	b.n	8002f52 <LoopFillZerobss>

08002f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f50:	3204      	adds	r2, #4

08002f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f54:	d3fb      	bcc.n	8002f4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f56:	f7ff fba3 	bl	80026a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f5a:	f00b f93d 	bl	800e1d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f5e:	f7fe fe37 	bl	8001bd0 <main>
  bx  lr    
 8002f62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f64:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f6c:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8002f70:	08010894 	.word	0x08010894
  ldr r2, =_sbss
 8002f74:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8002f78:	20007b78 	.word	0x20007b78

08002f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f7c:	e7fe      	b.n	8002f7c <ADC_IRQHandler>

08002f7e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f82:	2003      	movs	r0, #3
 8002f84:	f000 f8f9 	bl	800317a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f88:	2005      	movs	r0, #5
 8002f8a:	f7ff fa2d 	bl	80023e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f8e:	f7ff fa03 	bl	8002398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_IncTick+0x20>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_IncTick+0x24>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <HAL_IncTick+0x24>)
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000060 	.word	0x20000060
 8002fbc:	200007f0 	.word	0x200007f0

08002fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <HAL_GetTick+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	200007f0 	.word	0x200007f0

08002fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff ffee 	bl	8002fc0 <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d005      	beq.n	8002ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_Delay+0x44>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ffe:	bf00      	nop
 8003000:	f7ff ffde 	bl	8002fc0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	429a      	cmp	r2, r3
 800300e:	d8f7      	bhi.n	8003000 <HAL_Delay+0x28>
  {
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000060 	.word	0x20000060

08003020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <__NVIC_SetPriorityGrouping+0x40>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800303c:	4013      	ands	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 800304a:	4313      	orrs	r3, r2
 800304c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304e:	4a04      	ldr	r2, [pc, #16]	; (8003060 <__NVIC_SetPriorityGrouping+0x40>)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	60d3      	str	r3, [r2, #12]
}
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000ed00 	.word	0xe000ed00
 8003064:	05fa0000 	.word	0x05fa0000

08003068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800306c:	4b04      	ldr	r3, [pc, #16]	; (8003080 <__NVIC_GetPriorityGrouping+0x18>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	f003 0307 	and.w	r3, r3, #7
}
 8003076:	4618      	mov	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	2b00      	cmp	r3, #0
 8003094:	db0b      	blt.n	80030ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	f003 021f 	and.w	r2, r3, #31
 800309c:	4907      	ldr	r1, [pc, #28]	; (80030bc <__NVIC_EnableIRQ+0x38>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	2001      	movs	r0, #1
 80030a6:	fa00 f202 	lsl.w	r2, r0, r2
 80030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000e100 	.word	0xe000e100

080030c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	6039      	str	r1, [r7, #0]
 80030ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	db0a      	blt.n	80030ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	490c      	ldr	r1, [pc, #48]	; (800310c <__NVIC_SetPriority+0x4c>)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	0112      	lsls	r2, r2, #4
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	440b      	add	r3, r1
 80030e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e8:	e00a      	b.n	8003100 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4908      	ldr	r1, [pc, #32]	; (8003110 <__NVIC_SetPriority+0x50>)
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	3b04      	subs	r3, #4
 80030f8:	0112      	lsls	r2, r2, #4
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	440b      	add	r3, r1
 80030fe:	761a      	strb	r2, [r3, #24]
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000e100 	.word	0xe000e100
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	; 0x24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f1c3 0307 	rsb	r3, r3, #7
 800312e:	2b04      	cmp	r3, #4
 8003130:	bf28      	it	cs
 8003132:	2304      	movcs	r3, #4
 8003134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3304      	adds	r3, #4
 800313a:	2b06      	cmp	r3, #6
 800313c:	d902      	bls.n	8003144 <NVIC_EncodePriority+0x30>
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3b03      	subs	r3, #3
 8003142:	e000      	b.n	8003146 <NVIC_EncodePriority+0x32>
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	f04f 32ff 	mov.w	r2, #4294967295
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	401a      	ands	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800315c:	f04f 31ff 	mov.w	r1, #4294967295
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	43d9      	mvns	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316c:	4313      	orrs	r3, r2
         );
}
 800316e:	4618      	mov	r0, r3
 8003170:	3724      	adds	r7, #36	; 0x24
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff ff4c 	bl	8003020 <__NVIC_SetPriorityGrouping>
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a2:	f7ff ff61 	bl	8003068 <__NVIC_GetPriorityGrouping>
 80031a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	6978      	ldr	r0, [r7, #20]
 80031ae:	f7ff ffb1 	bl	8003114 <NVIC_EncodePriority>
 80031b2:	4602      	mov	r2, r0
 80031b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ff80 	bl	80030c0 <__NVIC_SetPriority>
}
 80031c0:	bf00      	nop
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff ff54 	bl	8003084 <__NVIC_EnableIRQ>
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e014      	b.n	8003220 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	791b      	ldrb	r3, [r3, #4]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d105      	bne.n	800320c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fd fc02 	bl	8000a10 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	795b      	ldrb	r3, [r3, #5]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_DAC_Start+0x16>
 800323a:	2302      	movs	r3, #2
 800323c:	e040      	b.n	80032c0 <HAL_DAC_Start+0x98>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	2201      	movs	r2, #1
 8003258:	409a      	lsls	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10f      	bne.n	8003288 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003272:	2b3c      	cmp	r3, #60	; 0x3c
 8003274:	d11d      	bne.n	80032b2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	e014      	b.n	80032b2 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	213c      	movs	r1, #60	; 0x3c
 800329a:	fa01 f303 	lsl.w	r3, r1, r3
 800329e:	429a      	cmp	r2, r3
 80032a0:	d107      	bne.n	80032b2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0202 	orr.w	r2, r2, #2
 80032b0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e2:	d120      	bne.n	8003326 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f2:	d118      	bne.n	8003326 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2204      	movs	r2, #4
 80032f8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f043 0201 	orr.w	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800330e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800331e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f852 	bl	80033ca <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003334:	d120      	bne.n	8003378 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003344:	d118      	bne.n	8003378 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2204      	movs	r2, #4
 800334a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f043 0202 	orr.w	r2, r3, #2
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003360:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003370:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f882 	bl	800347c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d105      	bne.n	80033aa <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4413      	add	r3, r2
 80033a4:	3308      	adds	r3, #8
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	e004      	b.n	80033b4 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4413      	add	r3, r2
 80033b0:	3314      	adds	r3, #20
 80033b2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	461a      	mov	r2, r3
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80033de:	b480      	push	{r7}
 80033e0:	b087      	sub	sp, #28
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	795b      	ldrb	r3, [r3, #5]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_DAC_ConfigChannel+0x18>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e03c      	b.n	8003470 <HAL_DAC_ConfigChannel+0x92>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2202      	movs	r2, #2
 8003400:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4013      	ands	r3, r2
 800341e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6819      	ldr	r1, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	22c0      	movs	r2, #192	; 0xc0
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43da      	mvns	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	400a      	ands	r2, r1
 8003460:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	371c      	adds	r7, #28
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800349c:	f7ff fd90 	bl	8002fc0 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e099      	b.n	80035e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034cc:	e00f      	b.n	80034ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034ce:	f7ff fd77 	bl	8002fc0 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b05      	cmp	r3, #5
 80034da:	d908      	bls.n	80034ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2203      	movs	r2, #3
 80034e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e078      	b.n	80035e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1e8      	bne.n	80034ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4b38      	ldr	r3, [pc, #224]	; (80035e8 <HAL_DMA_Init+0x158>)
 8003508:	4013      	ands	r3, r2
 800350a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800351a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003526:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003532:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	2b04      	cmp	r3, #4
 8003546:	d107      	bne.n	8003558 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	4313      	orrs	r3, r2
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f023 0307 	bic.w	r3, r3, #7
 800356e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	2b04      	cmp	r3, #4
 8003580:	d117      	bne.n	80035b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00e      	beq.n	80035b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fb09 	bl	8003bac <DMA_CheckFifoParam>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2240      	movs	r2, #64	; 0x40
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035ae:	2301      	movs	r3, #1
 80035b0:	e016      	b.n	80035e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fac0 	bl	8003b40 <DMA_CalcBaseAndBitshift>
 80035c0:	4603      	mov	r3, r0
 80035c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c8:	223f      	movs	r2, #63	; 0x3f
 80035ca:	409a      	lsls	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	e010803f 	.word	0xe010803f

080035ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003602:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_DMA_Start_IT+0x26>
 800360e:	2302      	movs	r3, #2
 8003610:	e048      	b.n	80036a4 <HAL_DMA_Start_IT+0xb8>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d137      	bne.n	8003696 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2202      	movs	r2, #2
 800362a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 fa52 	bl	8003ae4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003644:	223f      	movs	r2, #63	; 0x3f
 8003646:	409a      	lsls	r2, r3
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0216 	orr.w	r2, r2, #22
 800365a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800366a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	2b00      	cmp	r3, #0
 8003672:	d007      	beq.n	8003684 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0208 	orr.w	r2, r2, #8
 8003682:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e005      	b.n	80036a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800369e:	2302      	movs	r3, #2
 80036a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036ba:	f7ff fc81 	bl	8002fc0 <HAL_GetTick>
 80036be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d008      	beq.n	80036de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2280      	movs	r2, #128	; 0x80
 80036d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e052      	b.n	8003784 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0216 	bic.w	r2, r2, #22
 80036ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d103      	bne.n	800370e <HAL_DMA_Abort+0x62>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0208 	bic.w	r2, r2, #8
 800371c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0201 	bic.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800372e:	e013      	b.n	8003758 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003730:	f7ff fc46 	bl	8002fc0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b05      	cmp	r3, #5
 800373c:	d90c      	bls.n	8003758 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2203      	movs	r2, #3
 8003748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e015      	b.n	8003784 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e4      	bne.n	8003730 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	223f      	movs	r2, #63	; 0x3f
 800376c:	409a      	lsls	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d004      	beq.n	80037aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2280      	movs	r2, #128	; 0x80
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e00c      	b.n	80037c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2205      	movs	r2, #5
 80037ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0201 	bic.w	r2, r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80037dc:	4b8e      	ldr	r3, [pc, #568]	; (8003a18 <HAL_DMA_IRQHandler+0x248>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a8e      	ldr	r2, [pc, #568]	; (8003a1c <HAL_DMA_IRQHandler+0x24c>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	0a9b      	lsrs	r3, r3, #10
 80037e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fa:	2208      	movs	r2, #8
 80037fc:	409a      	lsls	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4013      	ands	r3, r2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01a      	beq.n	800383c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d013      	beq.n	800383c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0204 	bic.w	r2, r2, #4
 8003822:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003828:	2208      	movs	r2, #8
 800382a:	409a      	lsls	r2, r3
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	f043 0201 	orr.w	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003840:	2201      	movs	r2, #1
 8003842:	409a      	lsls	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4013      	ands	r3, r2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d012      	beq.n	8003872 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00b      	beq.n	8003872 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385e:	2201      	movs	r2, #1
 8003860:	409a      	lsls	r2, r3
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386a:	f043 0202 	orr.w	r2, r3, #2
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003876:	2204      	movs	r2, #4
 8003878:	409a      	lsls	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4013      	ands	r3, r2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d012      	beq.n	80038a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00b      	beq.n	80038a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003894:	2204      	movs	r2, #4
 8003896:	409a      	lsls	r2, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a0:	f043 0204 	orr.w	r2, r3, #4
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	2210      	movs	r2, #16
 80038ae:	409a      	lsls	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d043      	beq.n	8003940 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d03c      	beq.n	8003940 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ca:	2210      	movs	r2, #16
 80038cc:	409a      	lsls	r2, r3
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d018      	beq.n	8003912 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d108      	bne.n	8003900 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d024      	beq.n	8003940 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	4798      	blx	r3
 80038fe:	e01f      	b.n	8003940 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01b      	beq.n	8003940 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
 8003910:	e016      	b.n	8003940 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d107      	bne.n	8003930 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0208 	bic.w	r2, r2, #8
 800392e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003944:	2220      	movs	r2, #32
 8003946:	409a      	lsls	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 808f 	beq.w	8003a70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8087 	beq.w	8003a70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003966:	2220      	movs	r2, #32
 8003968:	409a      	lsls	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b05      	cmp	r3, #5
 8003978:	d136      	bne.n	80039e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0216 	bic.w	r2, r2, #22
 8003988:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695a      	ldr	r2, [r3, #20]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003998:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d103      	bne.n	80039aa <HAL_DMA_IRQHandler+0x1da>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0208 	bic.w	r2, r2, #8
 80039b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	223f      	movs	r2, #63	; 0x3f
 80039c0:	409a      	lsls	r2, r3
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d07e      	beq.n	8003adc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
        }
        return;
 80039e6:	e079      	b.n	8003adc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01d      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10d      	bne.n	8003a20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d031      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	4798      	blx	r3
 8003a14:	e02c      	b.n	8003a70 <HAL_DMA_IRQHandler+0x2a0>
 8003a16:	bf00      	nop
 8003a18:	20000058 	.word	0x20000058
 8003a1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d023      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
 8003a30:	e01e      	b.n	8003a70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10f      	bne.n	8003a60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0210 	bic.w	r2, r2, #16
 8003a4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d032      	beq.n	8003ade <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d022      	beq.n	8003aca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2205      	movs	r2, #5
 8003a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d307      	bcc.n	8003ab8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f2      	bne.n	8003a9c <HAL_DMA_IRQHandler+0x2cc>
 8003ab6:	e000      	b.n	8003aba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ab8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	4798      	blx	r3
 8003ada:	e000      	b.n	8003ade <HAL_DMA_IRQHandler+0x30e>
        return;
 8003adc:	bf00      	nop
    }
  }
}
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b40      	cmp	r3, #64	; 0x40
 8003b10:	d108      	bne.n	8003b24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b22:	e007      	b.n	8003b34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	60da      	str	r2, [r3, #12]
}
 8003b34:	bf00      	nop
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	3b10      	subs	r3, #16
 8003b50:	4a13      	ldr	r2, [pc, #76]	; (8003ba0 <DMA_CalcBaseAndBitshift+0x60>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	091b      	lsrs	r3, r3, #4
 8003b58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b5a:	4a12      	ldr	r2, [pc, #72]	; (8003ba4 <DMA_CalcBaseAndBitshift+0x64>)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b03      	cmp	r3, #3
 8003b6c:	d908      	bls.n	8003b80 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <DMA_CalcBaseAndBitshift+0x68>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	1d1a      	adds	r2, r3, #4
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	659a      	str	r2, [r3, #88]	; 0x58
 8003b7e:	e006      	b.n	8003b8e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <DMA_CalcBaseAndBitshift+0x68>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	aaaaaaab 	.word	0xaaaaaaab
 8003ba4:	08010834 	.word	0x08010834
 8003ba8:	fffffc00 	.word	0xfffffc00

08003bac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d11f      	bne.n	8003c06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d856      	bhi.n	8003c7a <DMA_CheckFifoParam+0xce>
 8003bcc:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <DMA_CheckFifoParam+0x28>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003be5 	.word	0x08003be5
 8003bd8:	08003bf7 	.word	0x08003bf7
 8003bdc:	08003be5 	.word	0x08003be5
 8003be0:	08003c7b 	.word	0x08003c7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d046      	beq.n	8003c7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf4:	e043      	b.n	8003c7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bfe:	d140      	bne.n	8003c82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c04:	e03d      	b.n	8003c82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c0e:	d121      	bne.n	8003c54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d837      	bhi.n	8003c86 <DMA_CheckFifoParam+0xda>
 8003c16:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <DMA_CheckFifoParam+0x70>)
 8003c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1c:	08003c2d 	.word	0x08003c2d
 8003c20:	08003c33 	.word	0x08003c33
 8003c24:	08003c2d 	.word	0x08003c2d
 8003c28:	08003c45 	.word	0x08003c45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c30:	e030      	b.n	8003c94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d025      	beq.n	8003c8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c42:	e022      	b.n	8003c8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c4c:	d11f      	bne.n	8003c8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c52:	e01c      	b.n	8003c8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d903      	bls.n	8003c62 <DMA_CheckFifoParam+0xb6>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d003      	beq.n	8003c68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c60:	e018      	b.n	8003c94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	73fb      	strb	r3, [r7, #15]
      break;
 8003c66:	e015      	b.n	8003c94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00e      	beq.n	8003c92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
      break;
 8003c78:	e00b      	b.n	8003c92 <DMA_CheckFifoParam+0xe6>
      break;
 8003c7a:	bf00      	nop
 8003c7c:	e00a      	b.n	8003c94 <DMA_CheckFifoParam+0xe8>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e008      	b.n	8003c94 <DMA_CheckFifoParam+0xe8>
      break;
 8003c82:	bf00      	nop
 8003c84:	e006      	b.n	8003c94 <DMA_CheckFifoParam+0xe8>
      break;
 8003c86:	bf00      	nop
 8003c88:	e004      	b.n	8003c94 <DMA_CheckFifoParam+0xe8>
      break;
 8003c8a:	bf00      	nop
 8003c8c:	e002      	b.n	8003c94 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c8e:	bf00      	nop
 8003c90:	e000      	b.n	8003c94 <DMA_CheckFifoParam+0xe8>
      break;
 8003c92:	bf00      	nop
    }
  } 
  
  return status; 
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop

08003ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b089      	sub	sp, #36	; 0x24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	e175      	b.n	8003fb0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	f040 8164 	bne.w	8003faa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d005      	beq.n	8003cfa <HAL_GPIO_Init+0x56>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d130      	bne.n	8003d5c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	2203      	movs	r2, #3
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d30:	2201      	movs	r2, #1
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	f003 0201 	and.w	r2, r3, #1
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d017      	beq.n	8003d98 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	2203      	movs	r2, #3
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d123      	bne.n	8003dec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	08da      	lsrs	r2, r3, #3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3208      	adds	r2, #8
 8003dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	220f      	movs	r2, #15
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	08da      	lsrs	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3208      	adds	r2, #8
 8003de6:	69b9      	ldr	r1, [r7, #24]
 8003de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	2203      	movs	r2, #3
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4013      	ands	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 0203 	and.w	r2, r3, #3
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80be 	beq.w	8003faa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e2e:	4b66      	ldr	r3, [pc, #408]	; (8003fc8 <HAL_GPIO_Init+0x324>)
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	4a65      	ldr	r2, [pc, #404]	; (8003fc8 <HAL_GPIO_Init+0x324>)
 8003e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e38:	6453      	str	r3, [r2, #68]	; 0x44
 8003e3a:	4b63      	ldr	r3, [pc, #396]	; (8003fc8 <HAL_GPIO_Init+0x324>)
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e46:	4a61      	ldr	r2, [pc, #388]	; (8003fcc <HAL_GPIO_Init+0x328>)
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	089b      	lsrs	r3, r3, #2
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	220f      	movs	r2, #15
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a58      	ldr	r2, [pc, #352]	; (8003fd0 <HAL_GPIO_Init+0x32c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d037      	beq.n	8003ee2 <HAL_GPIO_Init+0x23e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a57      	ldr	r2, [pc, #348]	; (8003fd4 <HAL_GPIO_Init+0x330>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d031      	beq.n	8003ede <HAL_GPIO_Init+0x23a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a56      	ldr	r2, [pc, #344]	; (8003fd8 <HAL_GPIO_Init+0x334>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d02b      	beq.n	8003eda <HAL_GPIO_Init+0x236>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a55      	ldr	r2, [pc, #340]	; (8003fdc <HAL_GPIO_Init+0x338>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d025      	beq.n	8003ed6 <HAL_GPIO_Init+0x232>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a54      	ldr	r2, [pc, #336]	; (8003fe0 <HAL_GPIO_Init+0x33c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01f      	beq.n	8003ed2 <HAL_GPIO_Init+0x22e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a53      	ldr	r2, [pc, #332]	; (8003fe4 <HAL_GPIO_Init+0x340>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d019      	beq.n	8003ece <HAL_GPIO_Init+0x22a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a52      	ldr	r2, [pc, #328]	; (8003fe8 <HAL_GPIO_Init+0x344>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <HAL_GPIO_Init+0x226>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a51      	ldr	r2, [pc, #324]	; (8003fec <HAL_GPIO_Init+0x348>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00d      	beq.n	8003ec6 <HAL_GPIO_Init+0x222>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a50      	ldr	r2, [pc, #320]	; (8003ff0 <HAL_GPIO_Init+0x34c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d007      	beq.n	8003ec2 <HAL_GPIO_Init+0x21e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a4f      	ldr	r2, [pc, #316]	; (8003ff4 <HAL_GPIO_Init+0x350>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d101      	bne.n	8003ebe <HAL_GPIO_Init+0x21a>
 8003eba:	2309      	movs	r3, #9
 8003ebc:	e012      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003ebe:	230a      	movs	r3, #10
 8003ec0:	e010      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	e00e      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003ec6:	2307      	movs	r3, #7
 8003ec8:	e00c      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003eca:	2306      	movs	r3, #6
 8003ecc:	e00a      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003ece:	2305      	movs	r3, #5
 8003ed0:	e008      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003ed2:	2304      	movs	r3, #4
 8003ed4:	e006      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e004      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e002      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <HAL_GPIO_Init+0x240>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	f002 0203 	and.w	r2, r2, #3
 8003eea:	0092      	lsls	r2, r2, #2
 8003eec:	4093      	lsls	r3, r2
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ef4:	4935      	ldr	r1, [pc, #212]	; (8003fcc <HAL_GPIO_Init+0x328>)
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	3302      	adds	r3, #2
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f02:	4b3d      	ldr	r3, [pc, #244]	; (8003ff8 <HAL_GPIO_Init+0x354>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f26:	4a34      	ldr	r2, [pc, #208]	; (8003ff8 <HAL_GPIO_Init+0x354>)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f2c:	4b32      	ldr	r3, [pc, #200]	; (8003ff8 <HAL_GPIO_Init+0x354>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	43db      	mvns	r3, r3
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f50:	4a29      	ldr	r2, [pc, #164]	; (8003ff8 <HAL_GPIO_Init+0x354>)
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f56:	4b28      	ldr	r3, [pc, #160]	; (8003ff8 <HAL_GPIO_Init+0x354>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f7a:	4a1f      	ldr	r2, [pc, #124]	; (8003ff8 <HAL_GPIO_Init+0x354>)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f80:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <HAL_GPIO_Init+0x354>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fa4:	4a14      	ldr	r2, [pc, #80]	; (8003ff8 <HAL_GPIO_Init+0x354>)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3301      	adds	r3, #1
 8003fae:	61fb      	str	r3, [r7, #28]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	2b0f      	cmp	r3, #15
 8003fb4:	f67f ae86 	bls.w	8003cc4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	3724      	adds	r7, #36	; 0x24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	40013800 	.word	0x40013800
 8003fd0:	40020000 	.word	0x40020000
 8003fd4:	40020400 	.word	0x40020400
 8003fd8:	40020800 	.word	0x40020800
 8003fdc:	40020c00 	.word	0x40020c00
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40021400 	.word	0x40021400
 8003fe8:	40021800 	.word	0x40021800
 8003fec:	40021c00 	.word	0x40021c00
 8003ff0:	40022000 	.word	0x40022000
 8003ff4:	40022400 	.word	0x40022400
 8003ff8:	40013c00 	.word	0x40013c00

08003ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	807b      	strh	r3, [r7, #2]
 8004008:	4613      	mov	r3, r2
 800400a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800400c:	787b      	ldrb	r3, [r7, #1]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004012:	887a      	ldrh	r2, [r7, #2]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004018:	e003      	b.n	8004022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800401a:	887b      	ldrh	r3, [r7, #2]
 800401c:	041a      	lsls	r2, r3, #16
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	619a      	str	r2, [r3, #24]
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	460b      	mov	r3, r1
 8004038:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004040:	887a      	ldrh	r2, [r7, #2]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4013      	ands	r3, r2
 8004046:	041a      	lsls	r2, r3, #16
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	43d9      	mvns	r1, r3
 800404c:	887b      	ldrh	r3, [r7, #2]
 800404e:	400b      	ands	r3, r1
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	619a      	str	r2, [r3, #24]
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e07f      	b.n	8004176 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fd fd40 	bl	8001b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2224      	movs	r2, #36	; 0x24
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d107      	bne.n	80040de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	e006      	b.n	80040ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d104      	bne.n	80040fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6859      	ldr	r1, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <HAL_I2C_Init+0x11c>)
 800410a:	430b      	orrs	r3, r1
 800410c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800411c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69d9      	ldr	r1, [r3, #28]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1a      	ldr	r2, [r3, #32]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	02008000 	.word	0x02008000

08004184 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af02      	add	r7, sp, #8
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	4608      	mov	r0, r1
 800418e:	4611      	mov	r1, r2
 8004190:	461a      	mov	r2, r3
 8004192:	4603      	mov	r3, r0
 8004194:	817b      	strh	r3, [r7, #10]
 8004196:	460b      	mov	r3, r1
 8004198:	813b      	strh	r3, [r7, #8]
 800419a:	4613      	mov	r3, r2
 800419c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	f040 80f9 	bne.w	800439e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_I2C_Mem_Write+0x34>
 80041b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0ed      	b.n	80043a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_I2C_Mem_Write+0x4e>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e0e6      	b.n	80043a0 <HAL_I2C_Mem_Write+0x21c>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041da:	f7fe fef1 	bl	8002fc0 <HAL_GetTick>
 80041de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	2319      	movs	r3, #25
 80041e6:	2201      	movs	r2, #1
 80041e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f955 	bl	800449c <I2C_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0d1      	b.n	80043a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2221      	movs	r2, #33	; 0x21
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2240      	movs	r2, #64	; 0x40
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a3a      	ldr	r2, [r7, #32]
 8004216:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800421c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004224:	88f8      	ldrh	r0, [r7, #6]
 8004226:	893a      	ldrh	r2, [r7, #8]
 8004228:	8979      	ldrh	r1, [r7, #10]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	4603      	mov	r3, r0
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f8b9 	bl	80043ac <I2C_RequestMemoryWrite>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0a9      	b.n	80043a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	2bff      	cmp	r3, #255	; 0xff
 8004254:	d90e      	bls.n	8004274 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	22ff      	movs	r2, #255	; 0xff
 800425a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004260:	b2da      	uxtb	r2, r3
 8004262:	8979      	ldrh	r1, [r7, #10]
 8004264:	2300      	movs	r3, #0
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 fab1 	bl	80047d4 <I2C_TransferConfig>
 8004272:	e00f      	b.n	8004294 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004282:	b2da      	uxtb	r2, r3
 8004284:	8979      	ldrh	r1, [r7, #10]
 8004286:	2300      	movs	r3, #0
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 faa0 	bl	80047d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f93f 	bl	800451c <I2C_WaitOnTXISFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e07b      	b.n	80043a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	781a      	ldrb	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d034      	beq.n	800434c <HAL_I2C_Mem_Write+0x1c8>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d130      	bne.n	800434c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	2200      	movs	r2, #0
 80042f2:	2180      	movs	r1, #128	; 0x80
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 f8d1 	bl	800449c <I2C_WaitOnFlagUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e04d      	b.n	80043a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	2bff      	cmp	r3, #255	; 0xff
 800430c:	d90e      	bls.n	800432c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	22ff      	movs	r2, #255	; 0xff
 8004312:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004318:	b2da      	uxtb	r2, r3
 800431a:	8979      	ldrh	r1, [r7, #10]
 800431c:	2300      	movs	r3, #0
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 fa55 	bl	80047d4 <I2C_TransferConfig>
 800432a:	e00f      	b.n	800434c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	b2da      	uxtb	r2, r3
 800433c:	8979      	ldrh	r1, [r7, #10]
 800433e:	2300      	movs	r3, #0
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fa44 	bl	80047d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d19e      	bne.n	8004294 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f91e 	bl	800459c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e01a      	b.n	80043a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2220      	movs	r2, #32
 8004370:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6859      	ldr	r1, [r3, #4]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <HAL_I2C_Mem_Write+0x224>)
 800437e:	400b      	ands	r3, r1
 8004380:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e000      	b.n	80043a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800439e:	2302      	movs	r3, #2
  }
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	fe00e800 	.word	0xfe00e800

080043ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	4608      	mov	r0, r1
 80043b6:	4611      	mov	r1, r2
 80043b8:	461a      	mov	r2, r3
 80043ba:	4603      	mov	r3, r0
 80043bc:	817b      	strh	r3, [r7, #10]
 80043be:	460b      	mov	r3, r1
 80043c0:	813b      	strh	r3, [r7, #8]
 80043c2:	4613      	mov	r3, r2
 80043c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	8979      	ldrh	r1, [r7, #10]
 80043cc:	4b20      	ldr	r3, [pc, #128]	; (8004450 <I2C_RequestMemoryWrite+0xa4>)
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f9fd 	bl	80047d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	69b9      	ldr	r1, [r7, #24]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f89c 	bl	800451c <I2C_WaitOnTXISFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e02c      	b.n	8004448 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d105      	bne.n	8004400 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043f4:	893b      	ldrh	r3, [r7, #8]
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	629a      	str	r2, [r3, #40]	; 0x28
 80043fe:	e015      	b.n	800442c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004400:	893b      	ldrh	r3, [r7, #8]
 8004402:	0a1b      	lsrs	r3, r3, #8
 8004404:	b29b      	uxth	r3, r3
 8004406:	b2da      	uxtb	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	69b9      	ldr	r1, [r7, #24]
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f882 	bl	800451c <I2C_WaitOnTXISFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e012      	b.n	8004448 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004422:	893b      	ldrh	r3, [r7, #8]
 8004424:	b2da      	uxtb	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	2200      	movs	r2, #0
 8004434:	2180      	movs	r1, #128	; 0x80
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f830 	bl	800449c <I2C_WaitOnFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	80002000 	.word	0x80002000

08004454 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b02      	cmp	r3, #2
 8004468:	d103      	bne.n	8004472 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2200      	movs	r2, #0
 8004470:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b01      	cmp	r3, #1
 800447e:	d007      	beq.n	8004490 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	619a      	str	r2, [r3, #24]
  }
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044ac:	e022      	b.n	80044f4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b4:	d01e      	beq.n	80044f4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b6:	f7fe fd83 	bl	8002fc0 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d302      	bcc.n	80044cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d113      	bne.n	80044f4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d0:	f043 0220 	orr.w	r2, r3, #32
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e00f      	b.n	8004514 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4013      	ands	r3, r2
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	429a      	cmp	r2, r3
 8004510:	d0cd      	beq.n	80044ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004528:	e02c      	b.n	8004584 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f870 	bl	8004614 <I2C_IsErrorOccurred>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e02a      	b.n	8004594 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d01e      	beq.n	8004584 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004546:	f7fe fd3b 	bl	8002fc0 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	429a      	cmp	r2, r3
 8004554:	d302      	bcc.n	800455c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d113      	bne.n	8004584 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004560:	f043 0220 	orr.w	r2, r3, #32
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e007      	b.n	8004594 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b02      	cmp	r3, #2
 8004590:	d1cb      	bne.n	800452a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045a8:	e028      	b.n	80045fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	68b9      	ldr	r1, [r7, #8]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f830 	bl	8004614 <I2C_IsErrorOccurred>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e026      	b.n	800460c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045be:	f7fe fcff 	bl	8002fc0 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d302      	bcc.n	80045d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d113      	bne.n	80045fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d8:	f043 0220 	orr.w	r2, r3, #32
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e007      	b.n	800460c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b20      	cmp	r3, #32
 8004608:	d1cf      	bne.n	80045aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	; 0x28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b00      	cmp	r3, #0
 800463e:	d068      	beq.n	8004712 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2210      	movs	r2, #16
 8004646:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004648:	e049      	b.n	80046de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004650:	d045      	beq.n	80046de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004652:	f7fe fcb5 	bl	8002fc0 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	429a      	cmp	r2, r3
 8004660:	d302      	bcc.n	8004668 <I2C_IsErrorOccurred+0x54>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d13a      	bne.n	80046de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004672:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800467a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800468a:	d121      	bne.n	80046d0 <I2C_IsErrorOccurred+0xbc>
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004692:	d01d      	beq.n	80046d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004694:	7cfb      	ldrb	r3, [r7, #19]
 8004696:	2b20      	cmp	r3, #32
 8004698:	d01a      	beq.n	80046d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046aa:	f7fe fc89 	bl	8002fc0 <HAL_GetTick>
 80046ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046b0:	e00e      	b.n	80046d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046b2:	f7fe fc85 	bl	8002fc0 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b19      	cmp	r3, #25
 80046be:	d907      	bls.n	80046d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	f043 0320 	orr.w	r3, r3, #32
 80046c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80046ce:	e006      	b.n	80046de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d1e9      	bne.n	80046b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d003      	beq.n	80046f4 <I2C_IsErrorOccurred+0xe0>
 80046ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0aa      	beq.n	800464a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d103      	bne.n	8004704 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2220      	movs	r2, #32
 8004702:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	f043 0304 	orr.w	r3, r3, #4
 800470a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00b      	beq.n	800473c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004734:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00b      	beq.n	800475e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	f043 0308 	orr.w	r3, r3, #8
 800474c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004756:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00b      	beq.n	8004780 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	f043 0302 	orr.w	r3, r3, #2
 800476e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004778:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01c      	beq.n	80047c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f7ff fe63 	bl	8004454 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6859      	ldr	r1, [r3, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <I2C_IsErrorOccurred+0x1bc>)
 800479a:	400b      	ands	r3, r1
 800479c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	431a      	orrs	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80047c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3728      	adds	r7, #40	; 0x28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	fe00e800 	.word	0xfe00e800

080047d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	607b      	str	r3, [r7, #4]
 80047de:	460b      	mov	r3, r1
 80047e0:	817b      	strh	r3, [r7, #10]
 80047e2:	4613      	mov	r3, r2
 80047e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047e6:	897b      	ldrh	r3, [r7, #10]
 80047e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047ec:	7a7b      	ldrb	r3, [r7, #9]
 80047ee:	041b      	lsls	r3, r3, #16
 80047f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004802:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	0d5b      	lsrs	r3, r3, #21
 800480e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004812:	4b08      	ldr	r3, [pc, #32]	; (8004834 <I2C_TransferConfig+0x60>)
 8004814:	430b      	orrs	r3, r1
 8004816:	43db      	mvns	r3, r3
 8004818:	ea02 0103 	and.w	r1, r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004826:	bf00      	nop
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	03ff63ff 	.word	0x03ff63ff

08004838 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b20      	cmp	r3, #32
 800484c:	d138      	bne.n	80048c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004858:	2302      	movs	r3, #2
 800485a:	e032      	b.n	80048c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2224      	movs	r2, #36	; 0x24
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0201 	bic.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800488a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6819      	ldr	r1, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	e000      	b.n	80048c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048c0:	2302      	movs	r3, #2
  }
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d139      	bne.n	8004958 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e033      	b.n	800495a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2224      	movs	r2, #36	; 0x24
 80048fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0201 	bic.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004920:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	021b      	lsls	r3, r3, #8
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	e000      	b.n	800495a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004958:	2302      	movs	r3, #2
  }
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004972:	4b23      	ldr	r3, [pc, #140]	; (8004a00 <HAL_PWREx_EnableOverDrive+0x98>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	4a22      	ldr	r2, [pc, #136]	; (8004a00 <HAL_PWREx_EnableOverDrive+0x98>)
 8004978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497c:	6413      	str	r3, [r2, #64]	; 0x40
 800497e:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <HAL_PWREx_EnableOverDrive+0x98>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004986:	603b      	str	r3, [r7, #0]
 8004988:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800498a:	4b1e      	ldr	r3, [pc, #120]	; (8004a04 <HAL_PWREx_EnableOverDrive+0x9c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1d      	ldr	r2, [pc, #116]	; (8004a04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004994:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004996:	f7fe fb13 	bl	8002fc0 <HAL_GetTick>
 800499a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800499c:	e009      	b.n	80049b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800499e:	f7fe fb0f 	bl	8002fc0 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ac:	d901      	bls.n	80049b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e022      	b.n	80049f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049b2:	4b14      	ldr	r3, [pc, #80]	; (8004a04 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049be:	d1ee      	bne.n	800499e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80049c0:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a0f      	ldr	r2, [pc, #60]	; (8004a04 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049cc:	f7fe faf8 	bl	8002fc0 <HAL_GetTick>
 80049d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049d2:	e009      	b.n	80049e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049d4:	f7fe faf4 	bl	8002fc0 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049e2:	d901      	bls.n	80049e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e007      	b.n	80049f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049e8:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049f4:	d1ee      	bne.n	80049d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40023800 	.word	0x40023800
 8004a04:	40007000 	.word	0x40007000

08004a08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004a10:	2300      	movs	r3, #0
 8004a12:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e29b      	b.n	8004f56 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 8087 	beq.w	8004b3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a2c:	4b96      	ldr	r3, [pc, #600]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d00c      	beq.n	8004a52 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a38:	4b93      	ldr	r3, [pc, #588]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 030c 	and.w	r3, r3, #12
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d112      	bne.n	8004a6a <HAL_RCC_OscConfig+0x62>
 8004a44:	4b90      	ldr	r3, [pc, #576]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a50:	d10b      	bne.n	8004a6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a52:	4b8d      	ldr	r3, [pc, #564]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d06c      	beq.n	8004b38 <HAL_RCC_OscConfig+0x130>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d168      	bne.n	8004b38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e275      	b.n	8004f56 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a72:	d106      	bne.n	8004a82 <HAL_RCC_OscConfig+0x7a>
 8004a74:	4b84      	ldr	r3, [pc, #528]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a83      	ldr	r2, [pc, #524]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	e02e      	b.n	8004ae0 <HAL_RCC_OscConfig+0xd8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x9c>
 8004a8a:	4b7f      	ldr	r3, [pc, #508]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a7e      	ldr	r2, [pc, #504]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	4b7c      	ldr	r3, [pc, #496]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a7b      	ldr	r2, [pc, #492]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e01d      	b.n	8004ae0 <HAL_RCC_OscConfig+0xd8>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aac:	d10c      	bne.n	8004ac8 <HAL_RCC_OscConfig+0xc0>
 8004aae:	4b76      	ldr	r3, [pc, #472]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a75      	ldr	r2, [pc, #468]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	4b73      	ldr	r3, [pc, #460]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a72      	ldr	r2, [pc, #456]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e00b      	b.n	8004ae0 <HAL_RCC_OscConfig+0xd8>
 8004ac8:	4b6f      	ldr	r3, [pc, #444]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a6e      	ldr	r2, [pc, #440]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	4b6c      	ldr	r3, [pc, #432]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a6b      	ldr	r2, [pc, #428]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d013      	beq.n	8004b10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fe fa6a 	bl	8002fc0 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af0:	f7fe fa66 	bl	8002fc0 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b64      	cmp	r3, #100	; 0x64
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e229      	b.n	8004f56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b02:	4b61      	ldr	r3, [pc, #388]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCC_OscConfig+0xe8>
 8004b0e:	e014      	b.n	8004b3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fe fa56 	bl	8002fc0 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b18:	f7fe fa52 	bl	8002fc0 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b64      	cmp	r3, #100	; 0x64
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e215      	b.n	8004f56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b2a:	4b57      	ldr	r3, [pc, #348]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x110>
 8004b36:	e000      	b.n	8004b3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d069      	beq.n	8004c1a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b46:	4b50      	ldr	r3, [pc, #320]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b52:	4b4d      	ldr	r3, [pc, #308]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 030c 	and.w	r3, r3, #12
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d11c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x190>
 8004b5e:	4b4a      	ldr	r3, [pc, #296]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d116      	bne.n	8004b98 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b6a:	4b47      	ldr	r3, [pc, #284]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_RCC_OscConfig+0x17a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d001      	beq.n	8004b82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e1e9      	b.n	8004f56 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b82:	4b41      	ldr	r3, [pc, #260]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	493d      	ldr	r1, [pc, #244]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b96:	e040      	b.n	8004c1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d023      	beq.n	8004be8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba0:	4b39      	ldr	r3, [pc, #228]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a38      	ldr	r2, [pc, #224]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bac:	f7fe fa08 	bl	8002fc0 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb4:	f7fe fa04 	bl	8002fc0 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e1c7      	b.n	8004f56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc6:	4b30      	ldr	r3, [pc, #192]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd2:	4b2d      	ldr	r3, [pc, #180]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4929      	ldr	r1, [pc, #164]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]
 8004be6:	e018      	b.n	8004c1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004be8:	4b27      	ldr	r3, [pc, #156]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a26      	ldr	r2, [pc, #152]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004bee:	f023 0301 	bic.w	r3, r3, #1
 8004bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7fe f9e4 	bl	8002fc0 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bfc:	f7fe f9e0 	bl	8002fc0 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e1a3      	b.n	8004f56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0e:	4b1e      	ldr	r3, [pc, #120]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d038      	beq.n	8004c98 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d019      	beq.n	8004c62 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c2e:	4b16      	ldr	r3, [pc, #88]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c32:	4a15      	ldr	r2, [pc, #84]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3a:	f7fe f9c1 	bl	8002fc0 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c42:	f7fe f9bd 	bl	8002fc0 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e180      	b.n	8004f56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c54:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCC_OscConfig+0x23a>
 8004c60:	e01a      	b.n	8004c98 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c62:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c66:	4a08      	ldr	r2, [pc, #32]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004c68:	f023 0301 	bic.w	r3, r3, #1
 8004c6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6e:	f7fe f9a7 	bl	8002fc0 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c74:	e00a      	b.n	8004c8c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c76:	f7fe f9a3 	bl	8002fc0 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d903      	bls.n	8004c8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e166      	b.n	8004f56 <HAL_RCC_OscConfig+0x54e>
 8004c88:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c8c:	4b92      	ldr	r3, [pc, #584]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1ee      	bne.n	8004c76 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80a4 	beq.w	8004dee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ca6:	4b8c      	ldr	r3, [pc, #560]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10d      	bne.n	8004cce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb2:	4b89      	ldr	r3, [pc, #548]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	4a88      	ldr	r2, [pc, #544]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8004cbe:	4b86      	ldr	r3, [pc, #536]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cce:	4b83      	ldr	r3, [pc, #524]	; (8004edc <HAL_RCC_OscConfig+0x4d4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d118      	bne.n	8004d0c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004cda:	4b80      	ldr	r3, [pc, #512]	; (8004edc <HAL_RCC_OscConfig+0x4d4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a7f      	ldr	r2, [pc, #508]	; (8004edc <HAL_RCC_OscConfig+0x4d4>)
 8004ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce6:	f7fe f96b 	bl	8002fc0 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cee:	f7fe f967 	bl	8002fc0 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b64      	cmp	r3, #100	; 0x64
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e12a      	b.n	8004f56 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d00:	4b76      	ldr	r3, [pc, #472]	; (8004edc <HAL_RCC_OscConfig+0x4d4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0f0      	beq.n	8004cee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d106      	bne.n	8004d22 <HAL_RCC_OscConfig+0x31a>
 8004d14:	4b70      	ldr	r3, [pc, #448]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d18:	4a6f      	ldr	r2, [pc, #444]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d20:	e02d      	b.n	8004d7e <HAL_RCC_OscConfig+0x376>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10c      	bne.n	8004d44 <HAL_RCC_OscConfig+0x33c>
 8004d2a:	4b6b      	ldr	r3, [pc, #428]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2e:	4a6a      	ldr	r2, [pc, #424]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004d30:	f023 0301 	bic.w	r3, r3, #1
 8004d34:	6713      	str	r3, [r2, #112]	; 0x70
 8004d36:	4b68      	ldr	r3, [pc, #416]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	4a67      	ldr	r2, [pc, #412]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004d3c:	f023 0304 	bic.w	r3, r3, #4
 8004d40:	6713      	str	r3, [r2, #112]	; 0x70
 8004d42:	e01c      	b.n	8004d7e <HAL_RCC_OscConfig+0x376>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b05      	cmp	r3, #5
 8004d4a:	d10c      	bne.n	8004d66 <HAL_RCC_OscConfig+0x35e>
 8004d4c:	4b62      	ldr	r3, [pc, #392]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d50:	4a61      	ldr	r2, [pc, #388]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004d52:	f043 0304 	orr.w	r3, r3, #4
 8004d56:	6713      	str	r3, [r2, #112]	; 0x70
 8004d58:	4b5f      	ldr	r3, [pc, #380]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5c:	4a5e      	ldr	r2, [pc, #376]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	6713      	str	r3, [r2, #112]	; 0x70
 8004d64:	e00b      	b.n	8004d7e <HAL_RCC_OscConfig+0x376>
 8004d66:	4b5c      	ldr	r3, [pc, #368]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6a:	4a5b      	ldr	r2, [pc, #364]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004d6c:	f023 0301 	bic.w	r3, r3, #1
 8004d70:	6713      	str	r3, [r2, #112]	; 0x70
 8004d72:	4b59      	ldr	r3, [pc, #356]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	4a58      	ldr	r2, [pc, #352]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004d78:	f023 0304 	bic.w	r3, r3, #4
 8004d7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d015      	beq.n	8004db2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d86:	f7fe f91b 	bl	8002fc0 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8c:	e00a      	b.n	8004da4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8e:	f7fe f917 	bl	8002fc0 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e0d8      	b.n	8004f56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da4:	4b4c      	ldr	r3, [pc, #304]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0ee      	beq.n	8004d8e <HAL_RCC_OscConfig+0x386>
 8004db0:	e014      	b.n	8004ddc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db2:	f7fe f905 	bl	8002fc0 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db8:	e00a      	b.n	8004dd0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dba:	f7fe f901 	bl	8002fc0 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e0c2      	b.n	8004f56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd0:	4b41      	ldr	r3, [pc, #260]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1ee      	bne.n	8004dba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ddc:	7dfb      	ldrb	r3, [r7, #23]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d105      	bne.n	8004dee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de2:	4b3d      	ldr	r3, [pc, #244]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	4a3c      	ldr	r2, [pc, #240]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 80ae 	beq.w	8004f54 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004df8:	4b37      	ldr	r3, [pc, #220]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 030c 	and.w	r3, r3, #12
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d06d      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d14b      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e0c:	4b32      	ldr	r3, [pc, #200]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a31      	ldr	r2, [pc, #196]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fe f8d2 	bl	8002fc0 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e20:	f7fe f8ce 	bl	8002fc0 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e091      	b.n	8004f56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e32:	4b29      	ldr	r3, [pc, #164]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69da      	ldr	r2, [r3, #28]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	019b      	lsls	r3, r3, #6
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	085b      	lsrs	r3, r3, #1
 8004e56:	3b01      	subs	r3, #1
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	061b      	lsls	r3, r3, #24
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	071b      	lsls	r3, r3, #28
 8004e6a:	491b      	ldr	r1, [pc, #108]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e70:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a18      	ldr	r2, [pc, #96]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7c:	f7fe f8a0 	bl	8002fc0 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e84:	f7fe f89c 	bl	8002fc0 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e05f      	b.n	8004f56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e96:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0f0      	beq.n	8004e84 <HAL_RCC_OscConfig+0x47c>
 8004ea2:	e057      	b.n	8004f54 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea4:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a0b      	ldr	r2, [pc, #44]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fe f886 	bl	8002fc0 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7fe f882 	bl	8002fc0 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e045      	b.n	8004f56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eca:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <HAL_RCC_OscConfig+0x4d0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x4b0>
 8004ed6:	e03d      	b.n	8004f54 <HAL_RCC_OscConfig+0x54c>
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004ee0:	4b1f      	ldr	r3, [pc, #124]	; (8004f60 <HAL_RCC_OscConfig+0x558>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d030      	beq.n	8004f50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d129      	bne.n	8004f50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d122      	bne.n	8004f50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f10:	4013      	ands	r3, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d119      	bne.n	8004f50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d10f      	bne.n	8004f50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d107      	bne.n	8004f50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d001      	beq.n	8004f54 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e000      	b.n	8004f56 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40023800 	.word	0x40023800

08004f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0d0      	b.n	800511e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f7c:	4b6a      	ldr	r3, [pc, #424]	; (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 030f 	and.w	r3, r3, #15
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d910      	bls.n	8004fac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8a:	4b67      	ldr	r3, [pc, #412]	; (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f023 020f 	bic.w	r2, r3, #15
 8004f92:	4965      	ldr	r1, [pc, #404]	; (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9a:	4b63      	ldr	r3, [pc, #396]	; (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e0b8      	b.n	800511e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d020      	beq.n	8004ffa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fc4:	4b59      	ldr	r3, [pc, #356]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	4a58      	ldr	r2, [pc, #352]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 8004fca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fdc:	4b53      	ldr	r3, [pc, #332]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	4a52      	ldr	r2, [pc, #328]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 8004fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fe6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fe8:	4b50      	ldr	r3, [pc, #320]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	494d      	ldr	r1, [pc, #308]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d040      	beq.n	8005088 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d107      	bne.n	800501e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500e:	4b47      	ldr	r3, [pc, #284]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d115      	bne.n	8005046 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e07f      	b.n	800511e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d107      	bne.n	8005036 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005026:	4b41      	ldr	r3, [pc, #260]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d109      	bne.n	8005046 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e073      	b.n	800511e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005036:	4b3d      	ldr	r3, [pc, #244]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e06b      	b.n	800511e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005046:	4b39      	ldr	r3, [pc, #228]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f023 0203 	bic.w	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	4936      	ldr	r1, [pc, #216]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 8005054:	4313      	orrs	r3, r2
 8005056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005058:	f7fd ffb2 	bl	8002fc0 <HAL_GetTick>
 800505c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505e:	e00a      	b.n	8005076 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005060:	f7fd ffae 	bl	8002fc0 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	f241 3288 	movw	r2, #5000	; 0x1388
 800506e:	4293      	cmp	r3, r2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e053      	b.n	800511e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005076:	4b2d      	ldr	r3, [pc, #180]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 020c 	and.w	r2, r3, #12
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	429a      	cmp	r2, r3
 8005086:	d1eb      	bne.n	8005060 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005088:	4b27      	ldr	r3, [pc, #156]	; (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 030f 	and.w	r3, r3, #15
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d210      	bcs.n	80050b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005096:	4b24      	ldr	r3, [pc, #144]	; (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f023 020f 	bic.w	r2, r3, #15
 800509e:	4922      	ldr	r1, [pc, #136]	; (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a6:	4b20      	ldr	r3, [pc, #128]	; (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d001      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e032      	b.n	800511e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d008      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050c4:	4b19      	ldr	r3, [pc, #100]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	4916      	ldr	r1, [pc, #88]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0308 	and.w	r3, r3, #8
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d009      	beq.n	80050f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050e2:	4b12      	ldr	r3, [pc, #72]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	490e      	ldr	r1, [pc, #56]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050f6:	f000 f821 	bl	800513c <HAL_RCC_GetSysClockFreq>
 80050fa:	4602      	mov	r2, r0
 80050fc:	4b0b      	ldr	r3, [pc, #44]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	091b      	lsrs	r3, r3, #4
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	490a      	ldr	r1, [pc, #40]	; (8005130 <HAL_RCC_ClockConfig+0x1cc>)
 8005108:	5ccb      	ldrb	r3, [r1, r3]
 800510a:	fa22 f303 	lsr.w	r3, r2, r3
 800510e:	4a09      	ldr	r2, [pc, #36]	; (8005134 <HAL_RCC_ClockConfig+0x1d0>)
 8005110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005112:	4b09      	ldr	r3, [pc, #36]	; (8005138 <HAL_RCC_ClockConfig+0x1d4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7fd f966 	bl	80023e8 <HAL_InitTick>

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40023c00 	.word	0x40023c00
 800512c:	40023800 	.word	0x40023800
 8005130:	0801081c 	.word	0x0801081c
 8005134:	20000058 	.word	0x20000058
 8005138:	2000005c 	.word	0x2000005c

0800513c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800513c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005140:	b094      	sub	sp, #80	; 0x50
 8005142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	647b      	str	r3, [r7, #68]	; 0x44
 8005148:	2300      	movs	r3, #0
 800514a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800514c:	2300      	movs	r3, #0
 800514e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005150:	2300      	movs	r3, #0
 8005152:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005154:	4b79      	ldr	r3, [pc, #484]	; (800533c <HAL_RCC_GetSysClockFreq+0x200>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 030c 	and.w	r3, r3, #12
 800515c:	2b08      	cmp	r3, #8
 800515e:	d00d      	beq.n	800517c <HAL_RCC_GetSysClockFreq+0x40>
 8005160:	2b08      	cmp	r3, #8
 8005162:	f200 80e1 	bhi.w	8005328 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <HAL_RCC_GetSysClockFreq+0x34>
 800516a:	2b04      	cmp	r3, #4
 800516c:	d003      	beq.n	8005176 <HAL_RCC_GetSysClockFreq+0x3a>
 800516e:	e0db      	b.n	8005328 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005170:	4b73      	ldr	r3, [pc, #460]	; (8005340 <HAL_RCC_GetSysClockFreq+0x204>)
 8005172:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005174:	e0db      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005176:	4b73      	ldr	r3, [pc, #460]	; (8005344 <HAL_RCC_GetSysClockFreq+0x208>)
 8005178:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800517a:	e0d8      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800517c:	4b6f      	ldr	r3, [pc, #444]	; (800533c <HAL_RCC_GetSysClockFreq+0x200>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005184:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005186:	4b6d      	ldr	r3, [pc, #436]	; (800533c <HAL_RCC_GetSysClockFreq+0x200>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d063      	beq.n	800525a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005192:	4b6a      	ldr	r3, [pc, #424]	; (800533c <HAL_RCC_GetSysClockFreq+0x200>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	099b      	lsrs	r3, r3, #6
 8005198:	2200      	movs	r2, #0
 800519a:	63bb      	str	r3, [r7, #56]	; 0x38
 800519c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a4:	633b      	str	r3, [r7, #48]	; 0x30
 80051a6:	2300      	movs	r3, #0
 80051a8:	637b      	str	r3, [r7, #52]	; 0x34
 80051aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051ae:	4622      	mov	r2, r4
 80051b0:	462b      	mov	r3, r5
 80051b2:	f04f 0000 	mov.w	r0, #0
 80051b6:	f04f 0100 	mov.w	r1, #0
 80051ba:	0159      	lsls	r1, r3, #5
 80051bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051c0:	0150      	lsls	r0, r2, #5
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4621      	mov	r1, r4
 80051c8:	1a51      	subs	r1, r2, r1
 80051ca:	6139      	str	r1, [r7, #16]
 80051cc:	4629      	mov	r1, r5
 80051ce:	eb63 0301 	sbc.w	r3, r3, r1
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051e0:	4659      	mov	r1, fp
 80051e2:	018b      	lsls	r3, r1, #6
 80051e4:	4651      	mov	r1, sl
 80051e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051ea:	4651      	mov	r1, sl
 80051ec:	018a      	lsls	r2, r1, #6
 80051ee:	4651      	mov	r1, sl
 80051f0:	ebb2 0801 	subs.w	r8, r2, r1
 80051f4:	4659      	mov	r1, fp
 80051f6:	eb63 0901 	sbc.w	r9, r3, r1
 80051fa:	f04f 0200 	mov.w	r2, #0
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005206:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800520a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800520e:	4690      	mov	r8, r2
 8005210:	4699      	mov	r9, r3
 8005212:	4623      	mov	r3, r4
 8005214:	eb18 0303 	adds.w	r3, r8, r3
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	462b      	mov	r3, r5
 800521c:	eb49 0303 	adc.w	r3, r9, r3
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	f04f 0300 	mov.w	r3, #0
 800522a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800522e:	4629      	mov	r1, r5
 8005230:	024b      	lsls	r3, r1, #9
 8005232:	4621      	mov	r1, r4
 8005234:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005238:	4621      	mov	r1, r4
 800523a:	024a      	lsls	r2, r1, #9
 800523c:	4610      	mov	r0, r2
 800523e:	4619      	mov	r1, r3
 8005240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005242:	2200      	movs	r2, #0
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28
 8005246:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005248:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800524c:	f7fb f848 	bl	80002e0 <__aeabi_uldivmod>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4613      	mov	r3, r2
 8005256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005258:	e058      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800525a:	4b38      	ldr	r3, [pc, #224]	; (800533c <HAL_RCC_GetSysClockFreq+0x200>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	099b      	lsrs	r3, r3, #6
 8005260:	2200      	movs	r2, #0
 8005262:	4618      	mov	r0, r3
 8005264:	4611      	mov	r1, r2
 8005266:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800526a:	623b      	str	r3, [r7, #32]
 800526c:	2300      	movs	r3, #0
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
 8005270:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005274:	4642      	mov	r2, r8
 8005276:	464b      	mov	r3, r9
 8005278:	f04f 0000 	mov.w	r0, #0
 800527c:	f04f 0100 	mov.w	r1, #0
 8005280:	0159      	lsls	r1, r3, #5
 8005282:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005286:	0150      	lsls	r0, r2, #5
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4641      	mov	r1, r8
 800528e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005292:	4649      	mov	r1, r9
 8005294:	eb63 0b01 	sbc.w	fp, r3, r1
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052ac:	ebb2 040a 	subs.w	r4, r2, sl
 80052b0:	eb63 050b 	sbc.w	r5, r3, fp
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	00eb      	lsls	r3, r5, #3
 80052be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052c2:	00e2      	lsls	r2, r4, #3
 80052c4:	4614      	mov	r4, r2
 80052c6:	461d      	mov	r5, r3
 80052c8:	4643      	mov	r3, r8
 80052ca:	18e3      	adds	r3, r4, r3
 80052cc:	603b      	str	r3, [r7, #0]
 80052ce:	464b      	mov	r3, r9
 80052d0:	eb45 0303 	adc.w	r3, r5, r3
 80052d4:	607b      	str	r3, [r7, #4]
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052e2:	4629      	mov	r1, r5
 80052e4:	028b      	lsls	r3, r1, #10
 80052e6:	4621      	mov	r1, r4
 80052e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052ec:	4621      	mov	r1, r4
 80052ee:	028a      	lsls	r2, r1, #10
 80052f0:	4610      	mov	r0, r2
 80052f2:	4619      	mov	r1, r3
 80052f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f6:	2200      	movs	r2, #0
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	61fa      	str	r2, [r7, #28]
 80052fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005300:	f7fa ffee 	bl	80002e0 <__aeabi_uldivmod>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4613      	mov	r3, r2
 800530a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800530c:	4b0b      	ldr	r3, [pc, #44]	; (800533c <HAL_RCC_GetSysClockFreq+0x200>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	0c1b      	lsrs	r3, r3, #16
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	3301      	adds	r3, #1
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800531c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800531e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005320:	fbb2 f3f3 	udiv	r3, r2, r3
 8005324:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005326:	e002      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005328:	4b05      	ldr	r3, [pc, #20]	; (8005340 <HAL_RCC_GetSysClockFreq+0x204>)
 800532a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800532c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800532e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005330:	4618      	mov	r0, r3
 8005332:	3750      	adds	r7, #80	; 0x50
 8005334:	46bd      	mov	sp, r7
 8005336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800533a:	bf00      	nop
 800533c:	40023800 	.word	0x40023800
 8005340:	00f42400 	.word	0x00f42400
 8005344:	007a1200 	.word	0x007a1200

08005348 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <HAL_RCC_GetHCLKFreq+0x14>)
 800534e:	681b      	ldr	r3, [r3, #0]
}
 8005350:	4618      	mov	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	20000058 	.word	0x20000058

08005360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005364:	f7ff fff0 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005368:	4602      	mov	r2, r0
 800536a:	4b05      	ldr	r3, [pc, #20]	; (8005380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	0a9b      	lsrs	r3, r3, #10
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	4903      	ldr	r1, [pc, #12]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005376:	5ccb      	ldrb	r3, [r1, r3]
 8005378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40023800 	.word	0x40023800
 8005384:	0801082c 	.word	0x0801082c

08005388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800538c:	f7ff ffdc 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	0b5b      	lsrs	r3, r3, #13
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4903      	ldr	r1, [pc, #12]	; (80053ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40023800 	.word	0x40023800
 80053ac:	0801082c 	.word	0x0801082c

080053b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	220f      	movs	r2, #15
 80053be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053c0:	4b12      	ldr	r3, [pc, #72]	; (800540c <HAL_RCC_GetClockConfig+0x5c>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 0203 	and.w	r2, r3, #3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80053cc:	4b0f      	ldr	r3, [pc, #60]	; (800540c <HAL_RCC_GetClockConfig+0x5c>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053d8:	4b0c      	ldr	r3, [pc, #48]	; (800540c <HAL_RCC_GetClockConfig+0x5c>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80053e4:	4b09      	ldr	r3, [pc, #36]	; (800540c <HAL_RCC_GetClockConfig+0x5c>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	08db      	lsrs	r3, r3, #3
 80053ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053f2:	4b07      	ldr	r3, [pc, #28]	; (8005410 <HAL_RCC_GetClockConfig+0x60>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 020f 	and.w	r2, r3, #15
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	601a      	str	r2, [r3, #0]
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40023800 	.word	0x40023800
 8005410:	40023c00 	.word	0x40023c00

08005414 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d012      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800543c:	4b69      	ldr	r3, [pc, #420]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	4a68      	ldr	r2, [pc, #416]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005442:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005446:	6093      	str	r3, [r2, #8]
 8005448:	4b66      	ldr	r3, [pc, #408]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005450:	4964      	ldr	r1, [pc, #400]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005452:	4313      	orrs	r3, r2
 8005454:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800545e:	2301      	movs	r3, #1
 8005460:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d017      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800546e:	4b5d      	ldr	r3, [pc, #372]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005474:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547c:	4959      	ldr	r1, [pc, #356]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005488:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800548c:	d101      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800548e:	2301      	movs	r3, #1
 8005490:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800549a:	2301      	movs	r3, #1
 800549c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d017      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054aa:	4b4e      	ldr	r3, [pc, #312]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	494a      	ldr	r1, [pc, #296]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054c8:	d101      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80054ca:	2301      	movs	r3, #1
 80054cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80054d6:	2301      	movs	r3, #1
 80054d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80054e6:	2301      	movs	r3, #1
 80054e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 808b 	beq.w	800560e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054f8:	4b3a      	ldr	r3, [pc, #232]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	4a39      	ldr	r2, [pc, #228]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005502:	6413      	str	r3, [r2, #64]	; 0x40
 8005504:	4b37      	ldr	r3, [pc, #220]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550c:	60bb      	str	r3, [r7, #8]
 800550e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005510:	4b35      	ldr	r3, [pc, #212]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a34      	ldr	r2, [pc, #208]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800551c:	f7fd fd50 	bl	8002fc0 <HAL_GetTick>
 8005520:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005524:	f7fd fd4c 	bl	8002fc0 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b64      	cmp	r3, #100	; 0x64
 8005530:	d901      	bls.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e38f      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005536:	4b2c      	ldr	r3, [pc, #176]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0f0      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005542:	4b28      	ldr	r3, [pc, #160]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800554a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d035      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	429a      	cmp	r2, r3
 800555e:	d02e      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005560:	4b20      	ldr	r3, [pc, #128]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005568:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800556a:	4b1e      	ldr	r3, [pc, #120]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556e:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005574:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005576:	4b1b      	ldr	r3, [pc, #108]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557a:	4a1a      	ldr	r2, [pc, #104]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800557c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005580:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005582:	4a18      	ldr	r2, [pc, #96]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005588:	4b16      	ldr	r3, [pc, #88]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b01      	cmp	r3, #1
 8005592:	d114      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005594:	f7fd fd14 	bl	8002fc0 <HAL_GetTick>
 8005598:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559a:	e00a      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800559c:	f7fd fd10 	bl	8002fc0 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e351      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b2:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0ee      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ca:	d111      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80055cc:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055d8:	4b04      	ldr	r3, [pc, #16]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80055da:	400b      	ands	r3, r1
 80055dc:	4901      	ldr	r1, [pc, #4]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	608b      	str	r3, [r1, #8]
 80055e2:	e00b      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80055e4:	40023800 	.word	0x40023800
 80055e8:	40007000 	.word	0x40007000
 80055ec:	0ffffcff 	.word	0x0ffffcff
 80055f0:	4bac      	ldr	r3, [pc, #688]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	4aab      	ldr	r2, [pc, #684]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055fa:	6093      	str	r3, [r2, #8]
 80055fc:	4ba9      	ldr	r3, [pc, #676]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005608:	49a6      	ldr	r1, [pc, #664]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800560a:	4313      	orrs	r3, r2
 800560c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b00      	cmp	r3, #0
 8005618:	d010      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800561a:	4ba2      	ldr	r3, [pc, #648]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800561c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005620:	4aa0      	ldr	r2, [pc, #640]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005626:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800562a:	4b9e      	ldr	r3, [pc, #632]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800562c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005634:	499b      	ldr	r1, [pc, #620]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005648:	4b96      	ldr	r3, [pc, #600]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005656:	4993      	ldr	r1, [pc, #588]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800566a:	4b8e      	ldr	r3, [pc, #568]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800566c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005670:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005678:	498a      	ldr	r1, [pc, #552]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800568c:	4b85      	ldr	r3, [pc, #532]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800568e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005692:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800569a:	4982      	ldr	r1, [pc, #520]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800569c:	4313      	orrs	r3, r2
 800569e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056ae:	4b7d      	ldr	r3, [pc, #500]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056bc:	4979      	ldr	r1, [pc, #484]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056d0:	4b74      	ldr	r3, [pc, #464]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d6:	f023 0203 	bic.w	r2, r3, #3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056de:	4971      	ldr	r1, [pc, #452]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056f2:	4b6c      	ldr	r3, [pc, #432]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f8:	f023 020c 	bic.w	r2, r3, #12
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005700:	4968      	ldr	r1, [pc, #416]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005714:	4b63      	ldr	r3, [pc, #396]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005722:	4960      	ldr	r1, [pc, #384]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005736:	4b5b      	ldr	r3, [pc, #364]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005744:	4957      	ldr	r1, [pc, #348]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005746:	4313      	orrs	r3, r2
 8005748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005758:	4b52      	ldr	r3, [pc, #328]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005766:	494f      	ldr	r1, [pc, #316]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005768:	4313      	orrs	r3, r2
 800576a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800577a:	4b4a      	ldr	r3, [pc, #296]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800577c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005780:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005788:	4946      	ldr	r1, [pc, #280]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800578a:	4313      	orrs	r3, r2
 800578c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800579c:	4b41      	ldr	r3, [pc, #260]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057aa:	493e      	ldr	r1, [pc, #248]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80057be:	4b39      	ldr	r3, [pc, #228]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057cc:	4935      	ldr	r1, [pc, #212]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057e0:	4b30      	ldr	r3, [pc, #192]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ee:	492d      	ldr	r1, [pc, #180]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d011      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005802:	4b28      	ldr	r3, [pc, #160]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005808:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005810:	4924      	ldr	r1, [pc, #144]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800581c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005820:	d101      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005822:	2301      	movs	r3, #1
 8005824:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0308 	and.w	r3, r3, #8
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005832:	2301      	movs	r3, #1
 8005834:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005842:	4b18      	ldr	r3, [pc, #96]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005848:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005850:	4914      	ldr	r1, [pc, #80]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00b      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005864:	4b0f      	ldr	r3, [pc, #60]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005874:	490b      	ldr	r1, [pc, #44]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00f      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005888:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800588a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005898:	4902      	ldr	r1, [pc, #8]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058a0:	e002      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80058a2:	bf00      	nop
 80058a4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00b      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058b4:	4b8a      	ldr	r3, [pc, #552]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c4:	4986      	ldr	r1, [pc, #536]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00b      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80058d8:	4b81      	ldr	r3, [pc, #516]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058e8:	497d      	ldr	r1, [pc, #500]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d006      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 80d6 	beq.w	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005904:	4b76      	ldr	r3, [pc, #472]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a75      	ldr	r2, [pc, #468]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800590a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800590e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005910:	f7fd fb56 	bl	8002fc0 <HAL_GetTick>
 8005914:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005916:	e008      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005918:	f7fd fb52 	bl	8002fc0 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b64      	cmp	r3, #100	; 0x64
 8005924:	d901      	bls.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e195      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800592a:	4b6d      	ldr	r3, [pc, #436]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1f0      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d021      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005946:	2b00      	cmp	r3, #0
 8005948:	d11d      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800594a:	4b65      	ldr	r3, [pc, #404]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800594c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005950:	0c1b      	lsrs	r3, r3, #16
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005958:	4b61      	ldr	r3, [pc, #388]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800595a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800595e:	0e1b      	lsrs	r3, r3, #24
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	019a      	lsls	r2, r3, #6
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	041b      	lsls	r3, r3, #16
 8005970:	431a      	orrs	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	061b      	lsls	r3, r3, #24
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	071b      	lsls	r3, r3, #28
 800597e:	4958      	ldr	r1, [pc, #352]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800599a:	d00a      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d02e      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059b0:	d129      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80059b2:	4b4b      	ldr	r3, [pc, #300]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b8:	0c1b      	lsrs	r3, r3, #16
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059c0:	4b47      	ldr	r3, [pc, #284]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c6:	0f1b      	lsrs	r3, r3, #28
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	019a      	lsls	r2, r3, #6
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	041b      	lsls	r3, r3, #16
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	061b      	lsls	r3, r3, #24
 80059e0:	431a      	orrs	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	071b      	lsls	r3, r3, #28
 80059e6:	493e      	ldr	r1, [pc, #248]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059ee:	4b3c      	ldr	r3, [pc, #240]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059f4:	f023 021f 	bic.w	r2, r3, #31
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	3b01      	subs	r3, #1
 80059fe:	4938      	ldr	r1, [pc, #224]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01d      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a12:	4b33      	ldr	r3, [pc, #204]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a18:	0e1b      	lsrs	r3, r3, #24
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a20:	4b2f      	ldr	r3, [pc, #188]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a26:	0f1b      	lsrs	r3, r3, #28
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	019a      	lsls	r2, r3, #6
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	041b      	lsls	r3, r3, #16
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	061b      	lsls	r3, r3, #24
 8005a40:	431a      	orrs	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	071b      	lsls	r3, r3, #28
 8005a46:	4926      	ldr	r1, [pc, #152]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d011      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	019a      	lsls	r2, r3, #6
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	041b      	lsls	r3, r3, #16
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	061b      	lsls	r3, r3, #24
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	071b      	lsls	r3, r3, #28
 8005a76:	491a      	ldr	r1, [pc, #104]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a7e:	4b18      	ldr	r3, [pc, #96]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a17      	ldr	r2, [pc, #92]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a8a:	f7fd fa99 	bl	8002fc0 <HAL_GetTick>
 8005a8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a90:	e008      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a92:	f7fd fa95 	bl	8002fc0 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b64      	cmp	r3, #100	; 0x64
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e0d8      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005aa4:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0f0      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	f040 80ce 	bne.w	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ab8:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a08      	ldr	r2, [pc, #32]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ac4:	f7fd fa7c 	bl	8002fc0 <HAL_GetTick>
 8005ac8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005aca:	e00b      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005acc:	f7fd fa78 	bl	8002fc0 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b64      	cmp	r3, #100	; 0x64
 8005ad8:	d904      	bls.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e0bb      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005ade:	bf00      	nop
 8005ae0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ae4:	4b5e      	ldr	r3, [pc, #376]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005af0:	d0ec      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d009      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d02e      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d12a      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b1a:	4b51      	ldr	r3, [pc, #324]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b20:	0c1b      	lsrs	r3, r3, #16
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b28:	4b4d      	ldr	r3, [pc, #308]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2e:	0f1b      	lsrs	r3, r3, #28
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	019a      	lsls	r2, r3, #6
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	041b      	lsls	r3, r3, #16
 8005b40:	431a      	orrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	061b      	lsls	r3, r3, #24
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	071b      	lsls	r3, r3, #28
 8005b4e:	4944      	ldr	r1, [pc, #272]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b56:	4b42      	ldr	r3, [pc, #264]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	3b01      	subs	r3, #1
 8005b66:	021b      	lsls	r3, r3, #8
 8005b68:	493d      	ldr	r1, [pc, #244]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d022      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b84:	d11d      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b86:	4b36      	ldr	r3, [pc, #216]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8c:	0e1b      	lsrs	r3, r3, #24
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b94:	4b32      	ldr	r3, [pc, #200]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9a:	0f1b      	lsrs	r3, r3, #28
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	019a      	lsls	r2, r3, #6
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	041b      	lsls	r3, r3, #16
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	061b      	lsls	r3, r3, #24
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	071b      	lsls	r3, r3, #28
 8005bba:	4929      	ldr	r1, [pc, #164]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d028      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005bce:	4b24      	ldr	r3, [pc, #144]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd4:	0e1b      	lsrs	r3, r3, #24
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005bdc:	4b20      	ldr	r3, [pc, #128]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be2:	0c1b      	lsrs	r3, r3, #16
 8005be4:	f003 0303 	and.w	r3, r3, #3
 8005be8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	019a      	lsls	r2, r3, #6
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	041b      	lsls	r3, r3, #16
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	061b      	lsls	r3, r3, #24
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	071b      	lsls	r3, r3, #28
 8005c02:	4917      	ldr	r1, [pc, #92]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005c0a:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	4911      	ldr	r1, [pc, #68]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c20:	4b0f      	ldr	r3, [pc, #60]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a0e      	ldr	r2, [pc, #56]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c2c:	f7fd f9c8 	bl	8002fc0 <HAL_GetTick>
 8005c30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c32:	e008      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c34:	f7fd f9c4 	bl	8002fc0 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b64      	cmp	r3, #100	; 0x64
 8005c40:	d901      	bls.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e007      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c46:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c52:	d1ef      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3720      	adds	r7, #32
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40023800 	.word	0x40023800

08005c64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e09d      	b.n	8005db2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d108      	bne.n	8005c90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c86:	d009      	beq.n	8005c9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	61da      	str	r2, [r3, #28]
 8005c8e:	e005      	b.n	8005c9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d106      	bne.n	8005cbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fc f8aa 	bl	8001e10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cdc:	d902      	bls.n	8005ce4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	e002      	b.n	8005cea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ce8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005cf2:	d007      	beq.n	8005d04 <HAL_SPI_Init+0xa0>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cfc:	d002      	beq.n	8005d04 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d46:	ea42 0103 	orr.w	r1, r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	0c1b      	lsrs	r3, r3, #16
 8005d60:	f003 0204 	and.w	r2, r3, #4
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	f003 0310 	and.w	r3, r3, #16
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d72:	f003 0308 	and.w	r3, r3, #8
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d80:	ea42 0103 	orr.w	r1, r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69da      	ldr	r2, [r3, #28]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005da0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b088      	sub	sp, #32
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	603b      	str	r3, [r7, #0]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <HAL_SPI_Transmit+0x22>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e158      	b.n	800608e <HAL_SPI_Transmit+0x2d4>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005de4:	f7fd f8ec 	bl	8002fc0 <HAL_GetTick>
 8005de8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005dea:	88fb      	ldrh	r3, [r7, #6]
 8005dec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d002      	beq.n	8005e00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dfe:	e13d      	b.n	800607c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_SPI_Transmit+0x52>
 8005e06:	88fb      	ldrh	r3, [r7, #6]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e10:	e134      	b.n	800607c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2203      	movs	r2, #3
 8005e16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	88fa      	ldrh	r2, [r7, #6]
 8005e2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	88fa      	ldrh	r2, [r7, #6]
 8005e30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e5c:	d10f      	bne.n	8005e7e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e88:	2b40      	cmp	r3, #64	; 0x40
 8005e8a:	d007      	beq.n	8005e9c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ea4:	d94b      	bls.n	8005f3e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <HAL_SPI_Transmit+0xfa>
 8005eae:	8afb      	ldrh	r3, [r7, #22]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d13e      	bne.n	8005f32 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	881a      	ldrh	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	1c9a      	adds	r2, r3, #2
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ed8:	e02b      	b.n	8005f32 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d112      	bne.n	8005f0e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	881a      	ldrh	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef8:	1c9a      	adds	r2, r3, #2
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f0c:	e011      	b.n	8005f32 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f0e:	f7fd f857 	bl	8002fc0 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d803      	bhi.n	8005f26 <HAL_SPI_Transmit+0x16c>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f24:	d102      	bne.n	8005f2c <HAL_SPI_Transmit+0x172>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d102      	bne.n	8005f32 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f30:	e0a4      	b.n	800607c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1ce      	bne.n	8005eda <HAL_SPI_Transmit+0x120>
 8005f3c:	e07c      	b.n	8006038 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <HAL_SPI_Transmit+0x192>
 8005f46:	8afb      	ldrh	r3, [r7, #22]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d170      	bne.n	800602e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d912      	bls.n	8005f7c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	881a      	ldrh	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f66:	1c9a      	adds	r2, r3, #2
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b02      	subs	r3, #2
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f7a:	e058      	b.n	800602e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	7812      	ldrb	r2, [r2, #0]
 8005f88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005fa2:	e044      	b.n	800602e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d12b      	bne.n	800600a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d912      	bls.n	8005fe2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc0:	881a      	ldrh	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	1c9a      	adds	r2, r3, #2
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b02      	subs	r3, #2
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fe0:	e025      	b.n	800602e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	330c      	adds	r3, #12
 8005fec:	7812      	ldrb	r2, [r2, #0]
 8005fee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006008:	e011      	b.n	800602e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800600a:	f7fc ffd9 	bl	8002fc0 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d803      	bhi.n	8006022 <HAL_SPI_Transmit+0x268>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006020:	d102      	bne.n	8006028 <HAL_SPI_Transmit+0x26e>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d102      	bne.n	800602e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800602c:	e026      	b.n	800607c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006032:	b29b      	uxth	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1b5      	bne.n	8005fa4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	6839      	ldr	r1, [r7, #0]
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fadd 	bl	80065fc <SPI_EndRxTxTransaction>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d002      	beq.n	800604e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2220      	movs	r2, #32
 800604c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006056:	2300      	movs	r3, #0
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	77fb      	strb	r3, [r7, #31]
 8006078:	e000      	b.n	800607c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800607a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800608c:	7ffb      	ldrb	r3, [r7, #31]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3720      	adds	r7, #32
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	4613      	mov	r3, r2
 80060a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_SPI_Transmit_DMA+0x20>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e0d8      	b.n	800626a <HAL_SPI_Transmit_DMA+0x1d2>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d002      	beq.n	80060d2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80060cc:	2302      	movs	r3, #2
 80060ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060d0:	e0c6      	b.n	8006260 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <HAL_SPI_Transmit_DMA+0x46>
 80060d8:	88fb      	ldrh	r3, [r7, #6]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060e2:	e0bd      	b.n	8006260 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2203      	movs	r2, #3
 80060e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	88fa      	ldrh	r2, [r7, #6]
 80060fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	88fa      	ldrh	r2, [r7, #6]
 8006102:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800612e:	d10f      	bne.n	8006150 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800613e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800614e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006154:	4a47      	ldr	r2, [pc, #284]	; (8006274 <HAL_SPI_Transmit_DMA+0x1dc>)
 8006156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615c:	4a46      	ldr	r2, [pc, #280]	; (8006278 <HAL_SPI_Transmit_DMA+0x1e0>)
 800615e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006164:	4a45      	ldr	r2, [pc, #276]	; (800627c <HAL_SPI_Transmit_DMA+0x1e4>)
 8006166:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616c:	2200      	movs	r2, #0
 800616e:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800617e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006188:	d82d      	bhi.n	80061e6 <HAL_SPI_Transmit_DMA+0x14e>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006194:	d127      	bne.n	80061e6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619a:	b29b      	uxth	r3, r3
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10f      	bne.n	80061c4 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061b2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	085b      	lsrs	r3, r3, #1
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061c2:	e010      	b.n	80061e6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061d2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d8:	b29b      	uxth	r3, r3
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3301      	adds	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	4619      	mov	r1, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	330c      	adds	r3, #12
 80061f6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061fc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80061fe:	f7fd f9f5 	bl	80035ec <HAL_DMA_Start_IT>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00c      	beq.n	8006222 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800620c:	f043 0210 	orr.w	r2, r3, #16
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006220:	e01e      	b.n	8006260 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622c:	2b40      	cmp	r3, #64	; 0x40
 800622e:	d007      	beq.n	8006240 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800623e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0220 	orr.w	r2, r2, #32
 800624e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0202 	orr.w	r2, r2, #2
 800625e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006268:	7dfb      	ldrb	r3, [r7, #23]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	08006365 	.word	0x08006365
 8006278:	080062bd 	.word	0x080062bd
 800627c:	08006381 	.word	0x08006381

08006280 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062ca:	f7fc fe79 	bl	8002fc0 <HAL_GetTick>
 80062ce:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062de:	d03b      	beq.n	8006358 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0220 	bic.w	r2, r2, #32
 80062ee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0202 	bic.w	r2, r2, #2
 80062fe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	2164      	movs	r1, #100	; 0x64
 8006304:	6978      	ldr	r0, [r7, #20]
 8006306:	f000 f979 	bl	80065fc <SPI_EndRxTxTransaction>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d005      	beq.n	800631c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006314:	f043 0220 	orr.w	r2, r3, #32
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006324:	2300      	movs	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2200      	movs	r2, #0
 800633e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006350:	6978      	ldr	r0, [r7, #20]
 8006352:	f7ff ffa9 	bl	80062a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006356:	e002      	b.n	800635e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006358:	6978      	ldr	r0, [r7, #20]
 800635a:	f7ff ff91 	bl	8006280 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f7ff ff8e 	bl	8006294 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006378:	bf00      	nop
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0203 	bic.w	r2, r2, #3
 800639c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063a2:	f043 0210 	orr.w	r2, r3, #16
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f7ff ff78 	bl	80062a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063b8:	bf00      	nop
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	603b      	str	r3, [r7, #0]
 80063cc:	4613      	mov	r3, r2
 80063ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063d0:	f7fc fdf6 	bl	8002fc0 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	1a9b      	subs	r3, r3, r2
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	4413      	add	r3, r2
 80063de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063e0:	f7fc fdee 	bl	8002fc0 <HAL_GetTick>
 80063e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063e6:	4b39      	ldr	r3, [pc, #228]	; (80064cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	015b      	lsls	r3, r3, #5
 80063ec:	0d1b      	lsrs	r3, r3, #20
 80063ee:	69fa      	ldr	r2, [r7, #28]
 80063f0:	fb02 f303 	mul.w	r3, r2, r3
 80063f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063f6:	e054      	b.n	80064a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fe:	d050      	beq.n	80064a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006400:	f7fc fdde 	bl	8002fc0 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	429a      	cmp	r2, r3
 800640e:	d902      	bls.n	8006416 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d13d      	bne.n	8006492 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006424:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800642e:	d111      	bne.n	8006454 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006438:	d004      	beq.n	8006444 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006442:	d107      	bne.n	8006454 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006452:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800645c:	d10f      	bne.n	800647e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800647c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e017      	b.n	80064c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	3b01      	subs	r3, #1
 80064a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4013      	ands	r3, r2
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	bf0c      	ite	eq
 80064b2:	2301      	moveq	r3, #1
 80064b4:	2300      	movne	r3, #0
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	461a      	mov	r2, r3
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d19b      	bne.n	80063f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3720      	adds	r7, #32
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	20000058 	.word	0x20000058

080064d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08a      	sub	sp, #40	; 0x28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80064e2:	f7fc fd6d 	bl	8002fc0 <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ea:	1a9b      	subs	r3, r3, r2
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	4413      	add	r3, r2
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80064f2:	f7fc fd65 	bl	8002fc0 <HAL_GetTick>
 80064f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	330c      	adds	r3, #12
 80064fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006500:	4b3d      	ldr	r3, [pc, #244]	; (80065f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	00da      	lsls	r2, r3, #3
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	0d1b      	lsrs	r3, r3, #20
 8006510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006512:	fb02 f303 	mul.w	r3, r2, r3
 8006516:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006518:	e060      	b.n	80065dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006520:	d107      	bne.n	8006532 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d104      	bne.n	8006532 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006530:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d050      	beq.n	80065dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800653a:	f7fc fd41 	bl	8002fc0 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006546:	429a      	cmp	r2, r3
 8006548:	d902      	bls.n	8006550 <SPI_WaitFifoStateUntilTimeout+0x80>
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	2b00      	cmp	r3, #0
 800654e:	d13d      	bne.n	80065cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800655e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006568:	d111      	bne.n	800658e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006572:	d004      	beq.n	800657e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657c:	d107      	bne.n	800658e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800658c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006596:	d10f      	bne.n	80065b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e010      	b.n	80065ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	3b01      	subs	r3, #1
 80065da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689a      	ldr	r2, [r3, #8]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	4013      	ands	r3, r2
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d196      	bne.n	800651a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3728      	adds	r7, #40	; 0x28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000058 	.word	0x20000058

080065fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af02      	add	r7, sp, #8
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2200      	movs	r2, #0
 8006610:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f7ff ff5b 	bl	80064d0 <SPI_WaitFifoStateUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006624:	f043 0220 	orr.w	r2, r3, #32
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e046      	b.n	80066be <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006630:	4b25      	ldr	r3, [pc, #148]	; (80066c8 <SPI_EndRxTxTransaction+0xcc>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a25      	ldr	r2, [pc, #148]	; (80066cc <SPI_EndRxTxTransaction+0xd0>)
 8006636:	fba2 2303 	umull	r2, r3, r2, r3
 800663a:	0d5b      	lsrs	r3, r3, #21
 800663c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006640:	fb02 f303 	mul.w	r3, r2, r3
 8006644:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800664e:	d112      	bne.n	8006676 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2200      	movs	r2, #0
 8006658:	2180      	movs	r1, #128	; 0x80
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f7ff feb0 	bl	80063c0 <SPI_WaitFlagStateUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d016      	beq.n	8006694 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800666a:	f043 0220 	orr.w	r2, r3, #32
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e023      	b.n	80066be <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	3b01      	subs	r3, #1
 8006680:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668c:	2b80      	cmp	r3, #128	; 0x80
 800668e:	d0f2      	beq.n	8006676 <SPI_EndRxTxTransaction+0x7a>
 8006690:	e000      	b.n	8006694 <SPI_EndRxTxTransaction+0x98>
        break;
 8006692:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2200      	movs	r2, #0
 800669c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7ff ff15 	bl	80064d0 <SPI_WaitFifoStateUntilTimeout>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d007      	beq.n	80066bc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b0:	f043 0220 	orr.w	r2, r3, #32
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e000      	b.n	80066be <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20000058 	.word	0x20000058
 80066cc:	165e9f81 	.word	0x165e9f81

080066d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e049      	b.n	8006776 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f841 	bl	800677e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3304      	adds	r3, #4
 800670c:	4619      	mov	r1, r3
 800670e:	4610      	mov	r0, r2
 8006710:	f000 fc66 	bl	8006fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
	...

08006794 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d001      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e054      	b.n	8006856 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a26      	ldr	r2, [pc, #152]	; (8006864 <HAL_TIM_Base_Start_IT+0xd0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d022      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d6:	d01d      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a22      	ldr	r2, [pc, #136]	; (8006868 <HAL_TIM_Base_Start_IT+0xd4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d018      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a21      	ldr	r2, [pc, #132]	; (800686c <HAL_TIM_Base_Start_IT+0xd8>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d013      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a1f      	ldr	r2, [pc, #124]	; (8006870 <HAL_TIM_Base_Start_IT+0xdc>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d00e      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a1e      	ldr	r2, [pc, #120]	; (8006874 <HAL_TIM_Base_Start_IT+0xe0>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d009      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a1c      	ldr	r2, [pc, #112]	; (8006878 <HAL_TIM_Base_Start_IT+0xe4>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d004      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a1b      	ldr	r2, [pc, #108]	; (800687c <HAL_TIM_Base_Start_IT+0xe8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d115      	bne.n	8006840 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689a      	ldr	r2, [r3, #8]
 800681a:	4b19      	ldr	r3, [pc, #100]	; (8006880 <HAL_TIM_Base_Start_IT+0xec>)
 800681c:	4013      	ands	r3, r2
 800681e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2b06      	cmp	r3, #6
 8006824:	d015      	beq.n	8006852 <HAL_TIM_Base_Start_IT+0xbe>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800682c:	d011      	beq.n	8006852 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f042 0201 	orr.w	r2, r2, #1
 800683c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683e:	e008      	b.n	8006852 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0201 	orr.w	r2, r2, #1
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	e000      	b.n	8006854 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006852:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40010000 	.word	0x40010000
 8006868:	40000400 	.word	0x40000400
 800686c:	40000800 	.word	0x40000800
 8006870:	40000c00 	.word	0x40000c00
 8006874:	40010400 	.word	0x40010400
 8006878:	40014000 	.word	0x40014000
 800687c:	40001800 	.word	0x40001800
 8006880:	00010007 	.word	0x00010007

08006884 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e049      	b.n	800692a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d106      	bne.n	80068b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7fb ff64 	bl	8002778 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2202      	movs	r2, #2
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3304      	adds	r3, #4
 80068c0:	4619      	mov	r1, r3
 80068c2:	4610      	mov	r0, r2
 80068c4:	f000 fb8c 	bl	8006fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d109      	bne.n	8006958 <HAL_TIM_PWM_Start+0x24>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b01      	cmp	r3, #1
 800694e:	bf14      	ite	ne
 8006950:	2301      	movne	r3, #1
 8006952:	2300      	moveq	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	e03c      	b.n	80069d2 <HAL_TIM_PWM_Start+0x9e>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b04      	cmp	r3, #4
 800695c:	d109      	bne.n	8006972 <HAL_TIM_PWM_Start+0x3e>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b01      	cmp	r3, #1
 8006968:	bf14      	ite	ne
 800696a:	2301      	movne	r3, #1
 800696c:	2300      	moveq	r3, #0
 800696e:	b2db      	uxtb	r3, r3
 8006970:	e02f      	b.n	80069d2 <HAL_TIM_PWM_Start+0x9e>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b08      	cmp	r3, #8
 8006976:	d109      	bne.n	800698c <HAL_TIM_PWM_Start+0x58>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b01      	cmp	r3, #1
 8006982:	bf14      	ite	ne
 8006984:	2301      	movne	r3, #1
 8006986:	2300      	moveq	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	e022      	b.n	80069d2 <HAL_TIM_PWM_Start+0x9e>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b0c      	cmp	r3, #12
 8006990:	d109      	bne.n	80069a6 <HAL_TIM_PWM_Start+0x72>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b01      	cmp	r3, #1
 800699c:	bf14      	ite	ne
 800699e:	2301      	movne	r3, #1
 80069a0:	2300      	moveq	r3, #0
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	e015      	b.n	80069d2 <HAL_TIM_PWM_Start+0x9e>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b10      	cmp	r3, #16
 80069aa:	d109      	bne.n	80069c0 <HAL_TIM_PWM_Start+0x8c>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	bf14      	ite	ne
 80069b8:	2301      	movne	r3, #1
 80069ba:	2300      	moveq	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	e008      	b.n	80069d2 <HAL_TIM_PWM_Start+0x9e>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	bf14      	ite	ne
 80069cc:	2301      	movne	r3, #1
 80069ce:	2300      	moveq	r3, #0
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e092      	b.n	8006b00 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <HAL_TIM_PWM_Start+0xb6>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069e8:	e023      	b.n	8006a32 <HAL_TIM_PWM_Start+0xfe>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d104      	bne.n	80069fa <HAL_TIM_PWM_Start+0xc6>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069f8:	e01b      	b.n	8006a32 <HAL_TIM_PWM_Start+0xfe>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d104      	bne.n	8006a0a <HAL_TIM_PWM_Start+0xd6>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a08:	e013      	b.n	8006a32 <HAL_TIM_PWM_Start+0xfe>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b0c      	cmp	r3, #12
 8006a0e:	d104      	bne.n	8006a1a <HAL_TIM_PWM_Start+0xe6>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a18:	e00b      	b.n	8006a32 <HAL_TIM_PWM_Start+0xfe>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b10      	cmp	r3, #16
 8006a1e:	d104      	bne.n	8006a2a <HAL_TIM_PWM_Start+0xf6>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a28:	e003      	b.n	8006a32 <HAL_TIM_PWM_Start+0xfe>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2201      	movs	r2, #1
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fdce 	bl	80075dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a30      	ldr	r2, [pc, #192]	; (8006b08 <HAL_TIM_PWM_Start+0x1d4>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d004      	beq.n	8006a54 <HAL_TIM_PWM_Start+0x120>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a2f      	ldr	r2, [pc, #188]	; (8006b0c <HAL_TIM_PWM_Start+0x1d8>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d101      	bne.n	8006a58 <HAL_TIM_PWM_Start+0x124>
 8006a54:	2301      	movs	r3, #1
 8006a56:	e000      	b.n	8006a5a <HAL_TIM_PWM_Start+0x126>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d007      	beq.n	8006a6e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a25      	ldr	r2, [pc, #148]	; (8006b08 <HAL_TIM_PWM_Start+0x1d4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d022      	beq.n	8006abe <HAL_TIM_PWM_Start+0x18a>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a80:	d01d      	beq.n	8006abe <HAL_TIM_PWM_Start+0x18a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a22      	ldr	r2, [pc, #136]	; (8006b10 <HAL_TIM_PWM_Start+0x1dc>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d018      	beq.n	8006abe <HAL_TIM_PWM_Start+0x18a>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a20      	ldr	r2, [pc, #128]	; (8006b14 <HAL_TIM_PWM_Start+0x1e0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d013      	beq.n	8006abe <HAL_TIM_PWM_Start+0x18a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a1f      	ldr	r2, [pc, #124]	; (8006b18 <HAL_TIM_PWM_Start+0x1e4>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d00e      	beq.n	8006abe <HAL_TIM_PWM_Start+0x18a>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <HAL_TIM_PWM_Start+0x1d8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d009      	beq.n	8006abe <HAL_TIM_PWM_Start+0x18a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1b      	ldr	r2, [pc, #108]	; (8006b1c <HAL_TIM_PWM_Start+0x1e8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d004      	beq.n	8006abe <HAL_TIM_PWM_Start+0x18a>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a19      	ldr	r2, [pc, #100]	; (8006b20 <HAL_TIM_PWM_Start+0x1ec>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d115      	bne.n	8006aea <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689a      	ldr	r2, [r3, #8]
 8006ac4:	4b17      	ldr	r3, [pc, #92]	; (8006b24 <HAL_TIM_PWM_Start+0x1f0>)
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b06      	cmp	r3, #6
 8006ace:	d015      	beq.n	8006afc <HAL_TIM_PWM_Start+0x1c8>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad6:	d011      	beq.n	8006afc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae8:	e008      	b.n	8006afc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f042 0201 	orr.w	r2, r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	e000      	b.n	8006afe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006afc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	40010000 	.word	0x40010000
 8006b0c:	40010400 	.word	0x40010400
 8006b10:	40000400 	.word	0x40000400
 8006b14:	40000800 	.word	0x40000800
 8006b18:	40000c00 	.word	0x40000c00
 8006b1c:	40014000 	.word	0x40014000
 8006b20:	40001800 	.word	0x40001800
 8006b24:	00010007 	.word	0x00010007

08006b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d122      	bne.n	8006b84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d11b      	bne.n	8006b84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f06f 0202 	mvn.w	r2, #2
 8006b54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	f003 0303 	and.w	r3, r3, #3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fa1a 	bl	8006fa4 <HAL_TIM_IC_CaptureCallback>
 8006b70:	e005      	b.n	8006b7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fa0c 	bl	8006f90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fa1d 	bl	8006fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d122      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	2b04      	cmp	r3, #4
 8006b9e:	d11b      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f06f 0204 	mvn.w	r2, #4
 8006ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2202      	movs	r2, #2
 8006bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f9f0 	bl	8006fa4 <HAL_TIM_IC_CaptureCallback>
 8006bc4:	e005      	b.n	8006bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f9e2 	bl	8006f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f9f3 	bl	8006fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f003 0308 	and.w	r3, r3, #8
 8006be2:	2b08      	cmp	r3, #8
 8006be4:	d122      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f003 0308 	and.w	r3, r3, #8
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d11b      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f06f 0208 	mvn.w	r2, #8
 8006bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2204      	movs	r2, #4
 8006c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f9c6 	bl	8006fa4 <HAL_TIM_IC_CaptureCallback>
 8006c18:	e005      	b.n	8006c26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f9b8 	bl	8006f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f9c9 	bl	8006fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	f003 0310 	and.w	r3, r3, #16
 8006c36:	2b10      	cmp	r3, #16
 8006c38:	d122      	bne.n	8006c80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f003 0310 	and.w	r3, r3, #16
 8006c44:	2b10      	cmp	r3, #16
 8006c46:	d11b      	bne.n	8006c80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f06f 0210 	mvn.w	r2, #16
 8006c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2208      	movs	r2, #8
 8006c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f99c 	bl	8006fa4 <HAL_TIM_IC_CaptureCallback>
 8006c6c:	e005      	b.n	8006c7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f98e 	bl	8006f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f99f 	bl	8006fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d10e      	bne.n	8006cac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d107      	bne.n	8006cac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f06f 0201 	mvn.w	r2, #1
 8006ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7fb f85c 	bl	8001d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb6:	2b80      	cmp	r3, #128	; 0x80
 8006cb8:	d10e      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc4:	2b80      	cmp	r3, #128	; 0x80
 8006cc6:	d107      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fd40 	bl	8007758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce6:	d10e      	bne.n	8006d06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf2:	2b80      	cmp	r3, #128	; 0x80
 8006cf4:	d107      	bne.n	8006d06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fd33 	bl	800776c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d10e      	bne.n	8006d32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1e:	2b40      	cmp	r3, #64	; 0x40
 8006d20:	d107      	bne.n	8006d32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f94d 	bl	8006fcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d10e      	bne.n	8006d5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b20      	cmp	r3, #32
 8006d4c:	d107      	bne.n	8006d5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f06f 0220 	mvn.w	r2, #32
 8006d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fcf3 	bl	8007744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d101      	bne.n	8006d86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d82:	2302      	movs	r3, #2
 8006d84:	e0ff      	b.n	8006f86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b14      	cmp	r3, #20
 8006d92:	f200 80f0 	bhi.w	8006f76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d96:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9c:	08006df1 	.word	0x08006df1
 8006da0:	08006f77 	.word	0x08006f77
 8006da4:	08006f77 	.word	0x08006f77
 8006da8:	08006f77 	.word	0x08006f77
 8006dac:	08006e31 	.word	0x08006e31
 8006db0:	08006f77 	.word	0x08006f77
 8006db4:	08006f77 	.word	0x08006f77
 8006db8:	08006f77 	.word	0x08006f77
 8006dbc:	08006e73 	.word	0x08006e73
 8006dc0:	08006f77 	.word	0x08006f77
 8006dc4:	08006f77 	.word	0x08006f77
 8006dc8:	08006f77 	.word	0x08006f77
 8006dcc:	08006eb3 	.word	0x08006eb3
 8006dd0:	08006f77 	.word	0x08006f77
 8006dd4:	08006f77 	.word	0x08006f77
 8006dd8:	08006f77 	.word	0x08006f77
 8006ddc:	08006ef5 	.word	0x08006ef5
 8006de0:	08006f77 	.word	0x08006f77
 8006de4:	08006f77 	.word	0x08006f77
 8006de8:	08006f77 	.word	0x08006f77
 8006dec:	08006f35 	.word	0x08006f35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 f992 	bl	8007120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699a      	ldr	r2, [r3, #24]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0208 	orr.w	r2, r2, #8
 8006e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699a      	ldr	r2, [r3, #24]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0204 	bic.w	r2, r2, #4
 8006e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6999      	ldr	r1, [r3, #24]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	691a      	ldr	r2, [r3, #16]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	619a      	str	r2, [r3, #24]
      break;
 8006e2e:	e0a5      	b.n	8006f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68b9      	ldr	r1, [r7, #8]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 f9e4 	bl	8007204 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699a      	ldr	r2, [r3, #24]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	699a      	ldr	r2, [r3, #24]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6999      	ldr	r1, [r3, #24]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	021a      	lsls	r2, r3, #8
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	619a      	str	r2, [r3, #24]
      break;
 8006e70:	e084      	b.n	8006f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68b9      	ldr	r1, [r7, #8]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fa3b 	bl	80072f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69da      	ldr	r2, [r3, #28]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f042 0208 	orr.w	r2, r2, #8
 8006e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	69da      	ldr	r2, [r3, #28]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0204 	bic.w	r2, r2, #4
 8006e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69d9      	ldr	r1, [r3, #28]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	691a      	ldr	r2, [r3, #16]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	61da      	str	r2, [r3, #28]
      break;
 8006eb0:	e064      	b.n	8006f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68b9      	ldr	r1, [r7, #8]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fa91 	bl	80073e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69da      	ldr	r2, [r3, #28]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69da      	ldr	r2, [r3, #28]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69d9      	ldr	r1, [r3, #28]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	021a      	lsls	r2, r3, #8
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	61da      	str	r2, [r3, #28]
      break;
 8006ef2:	e043      	b.n	8006f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68b9      	ldr	r1, [r7, #8]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fac8 	bl	8007490 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f042 0208 	orr.w	r2, r2, #8
 8006f0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0204 	bic.w	r2, r2, #4
 8006f1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	691a      	ldr	r2, [r3, #16]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f32:	e023      	b.n	8006f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68b9      	ldr	r1, [r7, #8]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fafa 	bl	8007534 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	021a      	lsls	r2, r3, #8
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f74:	e002      	b.n	8006f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	75fb      	strb	r3, [r7, #23]
      break;
 8006f7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop

08006f90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a40      	ldr	r2, [pc, #256]	; (80070f4 <TIM_Base_SetConfig+0x114>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d013      	beq.n	8007020 <TIM_Base_SetConfig+0x40>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ffe:	d00f      	beq.n	8007020 <TIM_Base_SetConfig+0x40>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a3d      	ldr	r2, [pc, #244]	; (80070f8 <TIM_Base_SetConfig+0x118>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00b      	beq.n	8007020 <TIM_Base_SetConfig+0x40>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a3c      	ldr	r2, [pc, #240]	; (80070fc <TIM_Base_SetConfig+0x11c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d007      	beq.n	8007020 <TIM_Base_SetConfig+0x40>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a3b      	ldr	r2, [pc, #236]	; (8007100 <TIM_Base_SetConfig+0x120>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d003      	beq.n	8007020 <TIM_Base_SetConfig+0x40>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a3a      	ldr	r2, [pc, #232]	; (8007104 <TIM_Base_SetConfig+0x124>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d108      	bne.n	8007032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a2f      	ldr	r2, [pc, #188]	; (80070f4 <TIM_Base_SetConfig+0x114>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d02b      	beq.n	8007092 <TIM_Base_SetConfig+0xb2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007040:	d027      	beq.n	8007092 <TIM_Base_SetConfig+0xb2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a2c      	ldr	r2, [pc, #176]	; (80070f8 <TIM_Base_SetConfig+0x118>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d023      	beq.n	8007092 <TIM_Base_SetConfig+0xb2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a2b      	ldr	r2, [pc, #172]	; (80070fc <TIM_Base_SetConfig+0x11c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d01f      	beq.n	8007092 <TIM_Base_SetConfig+0xb2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a2a      	ldr	r2, [pc, #168]	; (8007100 <TIM_Base_SetConfig+0x120>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d01b      	beq.n	8007092 <TIM_Base_SetConfig+0xb2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a29      	ldr	r2, [pc, #164]	; (8007104 <TIM_Base_SetConfig+0x124>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d017      	beq.n	8007092 <TIM_Base_SetConfig+0xb2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a28      	ldr	r2, [pc, #160]	; (8007108 <TIM_Base_SetConfig+0x128>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d013      	beq.n	8007092 <TIM_Base_SetConfig+0xb2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a27      	ldr	r2, [pc, #156]	; (800710c <TIM_Base_SetConfig+0x12c>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00f      	beq.n	8007092 <TIM_Base_SetConfig+0xb2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a26      	ldr	r2, [pc, #152]	; (8007110 <TIM_Base_SetConfig+0x130>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d00b      	beq.n	8007092 <TIM_Base_SetConfig+0xb2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a25      	ldr	r2, [pc, #148]	; (8007114 <TIM_Base_SetConfig+0x134>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d007      	beq.n	8007092 <TIM_Base_SetConfig+0xb2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a24      	ldr	r2, [pc, #144]	; (8007118 <TIM_Base_SetConfig+0x138>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d003      	beq.n	8007092 <TIM_Base_SetConfig+0xb2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a23      	ldr	r2, [pc, #140]	; (800711c <TIM_Base_SetConfig+0x13c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d108      	bne.n	80070a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a0a      	ldr	r2, [pc, #40]	; (80070f4 <TIM_Base_SetConfig+0x114>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d003      	beq.n	80070d8 <TIM_Base_SetConfig+0xf8>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a0c      	ldr	r2, [pc, #48]	; (8007104 <TIM_Base_SetConfig+0x124>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d103      	bne.n	80070e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	615a      	str	r2, [r3, #20]
}
 80070e6:	bf00      	nop
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	40010000 	.word	0x40010000
 80070f8:	40000400 	.word	0x40000400
 80070fc:	40000800 	.word	0x40000800
 8007100:	40000c00 	.word	0x40000c00
 8007104:	40010400 	.word	0x40010400
 8007108:	40014000 	.word	0x40014000
 800710c:	40014400 	.word	0x40014400
 8007110:	40014800 	.word	0x40014800
 8007114:	40001800 	.word	0x40001800
 8007118:	40001c00 	.word	0x40001c00
 800711c:	40002000 	.word	0x40002000

08007120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	f023 0201 	bic.w	r2, r3, #1
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	4b2b      	ldr	r3, [pc, #172]	; (80071f8 <TIM_OC1_SetConfig+0xd8>)
 800714c:	4013      	ands	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f023 0303 	bic.w	r3, r3, #3
 8007156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	4313      	orrs	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f023 0302 	bic.w	r3, r3, #2
 8007168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	4313      	orrs	r3, r2
 8007172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a21      	ldr	r2, [pc, #132]	; (80071fc <TIM_OC1_SetConfig+0xdc>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d003      	beq.n	8007184 <TIM_OC1_SetConfig+0x64>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a20      	ldr	r2, [pc, #128]	; (8007200 <TIM_OC1_SetConfig+0xe0>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d10c      	bne.n	800719e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f023 0308 	bic.w	r3, r3, #8
 800718a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	4313      	orrs	r3, r2
 8007194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f023 0304 	bic.w	r3, r3, #4
 800719c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a16      	ldr	r2, [pc, #88]	; (80071fc <TIM_OC1_SetConfig+0xdc>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d003      	beq.n	80071ae <TIM_OC1_SetConfig+0x8e>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a15      	ldr	r2, [pc, #84]	; (8007200 <TIM_OC1_SetConfig+0xe0>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d111      	bne.n	80071d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	621a      	str	r2, [r3, #32]
}
 80071ec:	bf00      	nop
 80071ee:	371c      	adds	r7, #28
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	fffeff8f 	.word	0xfffeff8f
 80071fc:	40010000 	.word	0x40010000
 8007200:	40010400 	.word	0x40010400

08007204 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	f023 0210 	bic.w	r2, r3, #16
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4b2e      	ldr	r3, [pc, #184]	; (80072e8 <TIM_OC2_SetConfig+0xe4>)
 8007230:	4013      	ands	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	021b      	lsls	r3, r3, #8
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	4313      	orrs	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f023 0320 	bic.w	r3, r3, #32
 800724e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	011b      	lsls	r3, r3, #4
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	4313      	orrs	r3, r2
 800725a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a23      	ldr	r2, [pc, #140]	; (80072ec <TIM_OC2_SetConfig+0xe8>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d003      	beq.n	800726c <TIM_OC2_SetConfig+0x68>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a22      	ldr	r2, [pc, #136]	; (80072f0 <TIM_OC2_SetConfig+0xec>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d10d      	bne.n	8007288 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	011b      	lsls	r3, r3, #4
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	4313      	orrs	r3, r2
 800727e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007286:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a18      	ldr	r2, [pc, #96]	; (80072ec <TIM_OC2_SetConfig+0xe8>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d003      	beq.n	8007298 <TIM_OC2_SetConfig+0x94>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a17      	ldr	r2, [pc, #92]	; (80072f0 <TIM_OC2_SetConfig+0xec>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d113      	bne.n	80072c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800729e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	4313      	orrs	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	621a      	str	r2, [r3, #32]
}
 80072da:	bf00      	nop
 80072dc:	371c      	adds	r7, #28
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	feff8fff 	.word	0xfeff8fff
 80072ec:	40010000 	.word	0x40010000
 80072f0:	40010400 	.word	0x40010400

080072f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	4b2d      	ldr	r3, [pc, #180]	; (80073d4 <TIM_OC3_SetConfig+0xe0>)
 8007320:	4013      	ands	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0303 	bic.w	r3, r3, #3
 800732a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	4313      	orrs	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800733c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	021b      	lsls	r3, r3, #8
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	4313      	orrs	r3, r2
 8007348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a22      	ldr	r2, [pc, #136]	; (80073d8 <TIM_OC3_SetConfig+0xe4>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d003      	beq.n	800735a <TIM_OC3_SetConfig+0x66>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a21      	ldr	r2, [pc, #132]	; (80073dc <TIM_OC3_SetConfig+0xe8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d10d      	bne.n	8007376 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007360:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	021b      	lsls	r3, r3, #8
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	4313      	orrs	r3, r2
 800736c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a17      	ldr	r2, [pc, #92]	; (80073d8 <TIM_OC3_SetConfig+0xe4>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d003      	beq.n	8007386 <TIM_OC3_SetConfig+0x92>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a16      	ldr	r2, [pc, #88]	; (80073dc <TIM_OC3_SetConfig+0xe8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d113      	bne.n	80073ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800738c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	011b      	lsls	r3, r3, #4
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	4313      	orrs	r3, r2
 80073a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	621a      	str	r2, [r3, #32]
}
 80073c8:	bf00      	nop
 80073ca:	371c      	adds	r7, #28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	fffeff8f 	.word	0xfffeff8f
 80073d8:	40010000 	.word	0x40010000
 80073dc:	40010400 	.word	0x40010400

080073e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	4b1e      	ldr	r3, [pc, #120]	; (8007484 <TIM_OC4_SetConfig+0xa4>)
 800740c:	4013      	ands	r3, r2
 800740e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	021b      	lsls	r3, r3, #8
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	4313      	orrs	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800742a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	031b      	lsls	r3, r3, #12
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	4313      	orrs	r3, r2
 8007436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a13      	ldr	r2, [pc, #76]	; (8007488 <TIM_OC4_SetConfig+0xa8>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d003      	beq.n	8007448 <TIM_OC4_SetConfig+0x68>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a12      	ldr	r2, [pc, #72]	; (800748c <TIM_OC4_SetConfig+0xac>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d109      	bne.n	800745c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800744e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	019b      	lsls	r3, r3, #6
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	4313      	orrs	r3, r2
 800745a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	621a      	str	r2, [r3, #32]
}
 8007476:	bf00      	nop
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	feff8fff 	.word	0xfeff8fff
 8007488:	40010000 	.word	0x40010000
 800748c:	40010400 	.word	0x40010400

08007490 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	4b1b      	ldr	r3, [pc, #108]	; (8007528 <TIM_OC5_SetConfig+0x98>)
 80074bc:	4013      	ands	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80074d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	041b      	lsls	r3, r3, #16
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	4313      	orrs	r3, r2
 80074dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a12      	ldr	r2, [pc, #72]	; (800752c <TIM_OC5_SetConfig+0x9c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d003      	beq.n	80074ee <TIM_OC5_SetConfig+0x5e>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a11      	ldr	r2, [pc, #68]	; (8007530 <TIM_OC5_SetConfig+0xa0>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d109      	bne.n	8007502 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	021b      	lsls	r3, r3, #8
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	4313      	orrs	r3, r2
 8007500:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	621a      	str	r2, [r3, #32]
}
 800751c:	bf00      	nop
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	fffeff8f 	.word	0xfffeff8f
 800752c:	40010000 	.word	0x40010000
 8007530:	40010400 	.word	0x40010400

08007534 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	4b1c      	ldr	r3, [pc, #112]	; (80075d0 <TIM_OC6_SetConfig+0x9c>)
 8007560:	4013      	ands	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	021b      	lsls	r3, r3, #8
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	4313      	orrs	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	051b      	lsls	r3, r3, #20
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	4313      	orrs	r3, r2
 8007582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a13      	ldr	r2, [pc, #76]	; (80075d4 <TIM_OC6_SetConfig+0xa0>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d003      	beq.n	8007594 <TIM_OC6_SetConfig+0x60>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a12      	ldr	r2, [pc, #72]	; (80075d8 <TIM_OC6_SetConfig+0xa4>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d109      	bne.n	80075a8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800759a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	029b      	lsls	r3, r3, #10
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	621a      	str	r2, [r3, #32]
}
 80075c2:	bf00      	nop
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	feff8fff 	.word	0xfeff8fff
 80075d4:	40010000 	.word	0x40010000
 80075d8:	40010400 	.word	0x40010400

080075dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f003 031f 	and.w	r3, r3, #31
 80075ee:	2201      	movs	r2, #1
 80075f0:	fa02 f303 	lsl.w	r3, r2, r3
 80075f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6a1a      	ldr	r2, [r3, #32]
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	43db      	mvns	r3, r3
 80075fe:	401a      	ands	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6a1a      	ldr	r2, [r3, #32]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f003 031f 	and.w	r3, r3, #31
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	fa01 f303 	lsl.w	r3, r1, r3
 8007614:	431a      	orrs	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	621a      	str	r2, [r3, #32]
}
 800761a:	bf00      	nop
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
	...

08007628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007638:	2b01      	cmp	r3, #1
 800763a:	d101      	bne.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800763c:	2302      	movs	r3, #2
 800763e:	e06d      	b.n	800771c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a30      	ldr	r2, [pc, #192]	; (8007728 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d004      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a2f      	ldr	r2, [pc, #188]	; (800772c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d108      	bne.n	8007686 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800767a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	4313      	orrs	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	4313      	orrs	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a20      	ldr	r2, [pc, #128]	; (8007728 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d022      	beq.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b2:	d01d      	beq.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a1d      	ldr	r2, [pc, #116]	; (8007730 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d018      	beq.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a1c      	ldr	r2, [pc, #112]	; (8007734 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d013      	beq.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a1a      	ldr	r2, [pc, #104]	; (8007738 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d00e      	beq.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a15      	ldr	r2, [pc, #84]	; (800772c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d009      	beq.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a16      	ldr	r2, [pc, #88]	; (800773c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d004      	beq.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a15      	ldr	r2, [pc, #84]	; (8007740 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d10c      	bne.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	40010000 	.word	0x40010000
 800772c:	40010400 	.word	0x40010400
 8007730:	40000400 	.word	0x40000400
 8007734:	40000800 	.word	0x40000800
 8007738:	40000c00 	.word	0x40000c00
 800773c:	40014000 	.word	0x40014000
 8007740:	40001800 	.word	0x40001800

08007744 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e040      	b.n	8007814 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d106      	bne.n	80077a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7fb f870 	bl	8002888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2224      	movs	r2, #36	; 0x24
 80077ac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f022 0201 	bic.w	r2, r2, #1
 80077bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fb82 	bl	8007ec8 <UART_SetConfig>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d101      	bne.n	80077ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e022      	b.n	8007814 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fdda 	bl	8008390 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689a      	ldr	r2, [r3, #8]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 0201 	orr.w	r2, r2, #1
 800780a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fe61 	bl	80084d4 <UART_CheckIdleState>
 8007812:	4603      	mov	r3, r0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08a      	sub	sp, #40	; 0x28
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	4613      	mov	r3, r2
 8007828:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007830:	2b20      	cmp	r3, #32
 8007832:	d132      	bne.n	800789a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <HAL_UART_Receive_IT+0x24>
 800783a:	88fb      	ldrh	r3, [r7, #6]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e02b      	b.n	800789c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d018      	beq.n	800788a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	613b      	str	r3, [r7, #16]
   return(result);
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	623b      	str	r3, [r7, #32]
 8007878:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	69f9      	ldr	r1, [r7, #28]
 800787c:	6a3a      	ldr	r2, [r7, #32]
 800787e:	e841 2300 	strex	r3, r2, [r1]
 8007882:	61bb      	str	r3, [r7, #24]
   return(result);
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1e6      	bne.n	8007858 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800788a:	88fb      	ldrh	r3, [r7, #6]
 800788c:	461a      	mov	r2, r3
 800788e:	68b9      	ldr	r1, [r7, #8]
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 ff33 	bl	80086fc <UART_Start_Receive_IT>
 8007896:	4603      	mov	r3, r0
 8007898:	e000      	b.n	800789c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800789a:	2302      	movs	r3, #2
  }
}
 800789c:	4618      	mov	r0, r3
 800789e:	3728      	adds	r7, #40	; 0x28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b0ba      	sub	sp, #232	; 0xe8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80078ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80078d2:	4013      	ands	r3, r2
 80078d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80078d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d115      	bne.n	800790c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80078e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078e4:	f003 0320 	and.w	r3, r3, #32
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00f      	beq.n	800790c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f0:	f003 0320 	and.w	r3, r3, #32
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d009      	beq.n	800790c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 82ac 	beq.w	8007e5a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	4798      	blx	r3
      }
      return;
 800790a:	e2a6      	b.n	8007e5a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800790c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 8117 	beq.w	8007b44 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d106      	bne.n	8007930 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007922:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007926:	4b85      	ldr	r3, [pc, #532]	; (8007b3c <HAL_UART_IRQHandler+0x298>)
 8007928:	4013      	ands	r3, r2
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 810a 	beq.w	8007b44 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b00      	cmp	r3, #0
 800793a:	d011      	beq.n	8007960 <HAL_UART_IRQHandler+0xbc>
 800793c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00b      	beq.n	8007960 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2201      	movs	r2, #1
 800794e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007956:	f043 0201 	orr.w	r2, r3, #1
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b00      	cmp	r3, #0
 800796a:	d011      	beq.n	8007990 <HAL_UART_IRQHandler+0xec>
 800796c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00b      	beq.n	8007990 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2202      	movs	r2, #2
 800797e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007986:	f043 0204 	orr.w	r2, r3, #4
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	d011      	beq.n	80079c0 <HAL_UART_IRQHandler+0x11c>
 800799c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00b      	beq.n	80079c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2204      	movs	r2, #4
 80079ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079b6:	f043 0202 	orr.w	r2, r3, #2
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079c4:	f003 0308 	and.w	r3, r3, #8
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d017      	beq.n	80079fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079d0:	f003 0320 	and.w	r3, r3, #32
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d105      	bne.n	80079e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80079d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2208      	movs	r2, #8
 80079ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079f2:	f043 0208 	orr.w	r2, r3, #8
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d012      	beq.n	8007a2e <HAL_UART_IRQHandler+0x18a>
 8007a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00c      	beq.n	8007a2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a24:	f043 0220 	orr.w	r2, r3, #32
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 8212 	beq.w	8007e5e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a3e:	f003 0320 	and.w	r3, r3, #32
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00d      	beq.n	8007a62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a4a:	f003 0320 	and.w	r3, r3, #32
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d007      	beq.n	8007a62 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a76:	2b40      	cmp	r3, #64	; 0x40
 8007a78:	d005      	beq.n	8007a86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d04f      	beq.n	8007b26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fefe 	bl	8008888 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a96:	2b40      	cmp	r3, #64	; 0x40
 8007a98:	d141      	bne.n	8007b1e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007aa8:	e853 3f00 	ldrex	r3, [r3]
 8007aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ac6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ad2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1d9      	bne.n	8007a9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d013      	beq.n	8007b16 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007af2:	4a13      	ldr	r2, [pc, #76]	; (8007b40 <HAL_UART_IRQHandler+0x29c>)
 8007af4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fb fe46 	bl	800378c <HAL_DMA_Abort_IT>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d017      	beq.n	8007b36 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007b10:	4610      	mov	r0, r2
 8007b12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b14:	e00f      	b.n	8007b36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f9b6 	bl	8007e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b1c:	e00b      	b.n	8007b36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f9b2 	bl	8007e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b24:	e007      	b.n	8007b36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f9ae 	bl	8007e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007b34:	e193      	b.n	8007e5e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b36:	bf00      	nop
    return;
 8007b38:	e191      	b.n	8007e5e <HAL_UART_IRQHandler+0x5ba>
 8007b3a:	bf00      	nop
 8007b3c:	04000120 	.word	0x04000120
 8007b40:	08008951 	.word	0x08008951

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	f040 814c 	bne.w	8007de6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b52:	f003 0310 	and.w	r3, r3, #16
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 8145 	beq.w	8007de6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b60:	f003 0310 	and.w	r3, r3, #16
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 813e 	beq.w	8007de6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2210      	movs	r2, #16
 8007b70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7c:	2b40      	cmp	r3, #64	; 0x40
 8007b7e:	f040 80b6 	bne.w	8007cee <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 8165 	beq.w	8007e62 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	f080 815d 	bcs.w	8007e62 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bbc:	f000 8086 	beq.w	8007ccc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	461a      	mov	r2, r3
 8007be6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007bee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007bf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1da      	bne.n	8007bc0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3308      	adds	r3, #8
 8007c10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c14:	e853 3f00 	ldrex	r3, [r3]
 8007c18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c1c:	f023 0301 	bic.w	r3, r3, #1
 8007c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3308      	adds	r3, #8
 8007c2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e1      	bne.n	8007c0a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3308      	adds	r3, #8
 8007c66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c72:	e841 2300 	strex	r3, r2, [r1]
 8007c76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1e3      	bne.n	8007c46 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2220      	movs	r2, #32
 8007c82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c9c:	f023 0310 	bic.w	r3, r3, #16
 8007ca0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cae:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cb0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e4      	bne.n	8007c8c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fb fcf0 	bl	80036ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f8d8 	bl	8007e9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cec:	e0b9      	b.n	8007e62 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f000 80ab 	beq.w	8007e66 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007d10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 80a6 	beq.w	8007e66 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d22:	e853 3f00 	ldrex	r3, [r3]
 8007d26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	461a      	mov	r2, r3
 8007d38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d44:	e841 2300 	strex	r3, r2, [r1]
 8007d48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1e4      	bne.n	8007d1a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3308      	adds	r3, #8
 8007d56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	e853 3f00 	ldrex	r3, [r3]
 8007d5e:	623b      	str	r3, [r7, #32]
   return(result);
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	f023 0301 	bic.w	r3, r3, #1
 8007d66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3308      	adds	r3, #8
 8007d70:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d74:	633a      	str	r2, [r7, #48]	; 0x30
 8007d76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d7c:	e841 2300 	strex	r3, r2, [r1]
 8007d80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e3      	bne.n	8007d50 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f023 0310 	bic.w	r3, r3, #16
 8007db0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
 8007dba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007dbe:	61fb      	str	r3, [r7, #28]
 8007dc0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	69b9      	ldr	r1, [r7, #24]
 8007dc4:	69fa      	ldr	r2, [r7, #28]
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	617b      	str	r3, [r7, #20]
   return(result);
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e4      	bne.n	8007d9c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f85c 	bl	8007e9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007de4:	e03f      	b.n	8007e66 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00e      	beq.n	8007e10 <HAL_UART_IRQHandler+0x56c>
 8007df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d008      	beq.n	8007e10 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f853 	bl	8007eb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e0e:	e02d      	b.n	8007e6c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00e      	beq.n	8007e3a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d008      	beq.n	8007e3a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d01c      	beq.n	8007e6a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	4798      	blx	r3
    }
    return;
 8007e38:	e017      	b.n	8007e6a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d012      	beq.n	8007e6c <HAL_UART_IRQHandler+0x5c8>
 8007e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00c      	beq.n	8007e6c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fd92 	bl	800897c <UART_EndTransmit_IT>
    return;
 8007e58:	e008      	b.n	8007e6c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007e5a:	bf00      	nop
 8007e5c:	e006      	b.n	8007e6c <HAL_UART_IRQHandler+0x5c8>
    return;
 8007e5e:	bf00      	nop
 8007e60:	e004      	b.n	8007e6c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007e62:	bf00      	nop
 8007e64:	e002      	b.n	8007e6c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007e66:	bf00      	nop
 8007e68:	e000      	b.n	8007e6c <HAL_UART_IRQHandler+0x5c8>
    return;
 8007e6a:	bf00      	nop
  }

}
 8007e6c:	37e8      	adds	r7, #232	; 0xe8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop

08007e74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b088      	sub	sp, #32
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	431a      	orrs	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	69db      	ldr	r3, [r3, #28]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	4ba6      	ldr	r3, [pc, #664]	; (800818c <UART_SetConfig+0x2c4>)
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	6812      	ldr	r2, [r2, #0]
 8007efa:	6979      	ldr	r1, [r7, #20]
 8007efc:	430b      	orrs	r3, r1
 8007efe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a94      	ldr	r2, [pc, #592]	; (8008190 <UART_SetConfig+0x2c8>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d120      	bne.n	8007f86 <UART_SetConfig+0xbe>
 8007f44:	4b93      	ldr	r3, [pc, #588]	; (8008194 <UART_SetConfig+0x2cc>)
 8007f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f4a:	f003 0303 	and.w	r3, r3, #3
 8007f4e:	2b03      	cmp	r3, #3
 8007f50:	d816      	bhi.n	8007f80 <UART_SetConfig+0xb8>
 8007f52:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <UART_SetConfig+0x90>)
 8007f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f58:	08007f69 	.word	0x08007f69
 8007f5c:	08007f75 	.word	0x08007f75
 8007f60:	08007f6f 	.word	0x08007f6f
 8007f64:	08007f7b 	.word	0x08007f7b
 8007f68:	2301      	movs	r3, #1
 8007f6a:	77fb      	strb	r3, [r7, #31]
 8007f6c:	e150      	b.n	8008210 <UART_SetConfig+0x348>
 8007f6e:	2302      	movs	r3, #2
 8007f70:	77fb      	strb	r3, [r7, #31]
 8007f72:	e14d      	b.n	8008210 <UART_SetConfig+0x348>
 8007f74:	2304      	movs	r3, #4
 8007f76:	77fb      	strb	r3, [r7, #31]
 8007f78:	e14a      	b.n	8008210 <UART_SetConfig+0x348>
 8007f7a:	2308      	movs	r3, #8
 8007f7c:	77fb      	strb	r3, [r7, #31]
 8007f7e:	e147      	b.n	8008210 <UART_SetConfig+0x348>
 8007f80:	2310      	movs	r3, #16
 8007f82:	77fb      	strb	r3, [r7, #31]
 8007f84:	e144      	b.n	8008210 <UART_SetConfig+0x348>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a83      	ldr	r2, [pc, #524]	; (8008198 <UART_SetConfig+0x2d0>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d132      	bne.n	8007ff6 <UART_SetConfig+0x12e>
 8007f90:	4b80      	ldr	r3, [pc, #512]	; (8008194 <UART_SetConfig+0x2cc>)
 8007f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f96:	f003 030c 	and.w	r3, r3, #12
 8007f9a:	2b0c      	cmp	r3, #12
 8007f9c:	d828      	bhi.n	8007ff0 <UART_SetConfig+0x128>
 8007f9e:	a201      	add	r2, pc, #4	; (adr r2, 8007fa4 <UART_SetConfig+0xdc>)
 8007fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa4:	08007fd9 	.word	0x08007fd9
 8007fa8:	08007ff1 	.word	0x08007ff1
 8007fac:	08007ff1 	.word	0x08007ff1
 8007fb0:	08007ff1 	.word	0x08007ff1
 8007fb4:	08007fe5 	.word	0x08007fe5
 8007fb8:	08007ff1 	.word	0x08007ff1
 8007fbc:	08007ff1 	.word	0x08007ff1
 8007fc0:	08007ff1 	.word	0x08007ff1
 8007fc4:	08007fdf 	.word	0x08007fdf
 8007fc8:	08007ff1 	.word	0x08007ff1
 8007fcc:	08007ff1 	.word	0x08007ff1
 8007fd0:	08007ff1 	.word	0x08007ff1
 8007fd4:	08007feb 	.word	0x08007feb
 8007fd8:	2300      	movs	r3, #0
 8007fda:	77fb      	strb	r3, [r7, #31]
 8007fdc:	e118      	b.n	8008210 <UART_SetConfig+0x348>
 8007fde:	2302      	movs	r3, #2
 8007fe0:	77fb      	strb	r3, [r7, #31]
 8007fe2:	e115      	b.n	8008210 <UART_SetConfig+0x348>
 8007fe4:	2304      	movs	r3, #4
 8007fe6:	77fb      	strb	r3, [r7, #31]
 8007fe8:	e112      	b.n	8008210 <UART_SetConfig+0x348>
 8007fea:	2308      	movs	r3, #8
 8007fec:	77fb      	strb	r3, [r7, #31]
 8007fee:	e10f      	b.n	8008210 <UART_SetConfig+0x348>
 8007ff0:	2310      	movs	r3, #16
 8007ff2:	77fb      	strb	r3, [r7, #31]
 8007ff4:	e10c      	b.n	8008210 <UART_SetConfig+0x348>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a68      	ldr	r2, [pc, #416]	; (800819c <UART_SetConfig+0x2d4>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d120      	bne.n	8008042 <UART_SetConfig+0x17a>
 8008000:	4b64      	ldr	r3, [pc, #400]	; (8008194 <UART_SetConfig+0x2cc>)
 8008002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008006:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800800a:	2b30      	cmp	r3, #48	; 0x30
 800800c:	d013      	beq.n	8008036 <UART_SetConfig+0x16e>
 800800e:	2b30      	cmp	r3, #48	; 0x30
 8008010:	d814      	bhi.n	800803c <UART_SetConfig+0x174>
 8008012:	2b20      	cmp	r3, #32
 8008014:	d009      	beq.n	800802a <UART_SetConfig+0x162>
 8008016:	2b20      	cmp	r3, #32
 8008018:	d810      	bhi.n	800803c <UART_SetConfig+0x174>
 800801a:	2b00      	cmp	r3, #0
 800801c:	d002      	beq.n	8008024 <UART_SetConfig+0x15c>
 800801e:	2b10      	cmp	r3, #16
 8008020:	d006      	beq.n	8008030 <UART_SetConfig+0x168>
 8008022:	e00b      	b.n	800803c <UART_SetConfig+0x174>
 8008024:	2300      	movs	r3, #0
 8008026:	77fb      	strb	r3, [r7, #31]
 8008028:	e0f2      	b.n	8008210 <UART_SetConfig+0x348>
 800802a:	2302      	movs	r3, #2
 800802c:	77fb      	strb	r3, [r7, #31]
 800802e:	e0ef      	b.n	8008210 <UART_SetConfig+0x348>
 8008030:	2304      	movs	r3, #4
 8008032:	77fb      	strb	r3, [r7, #31]
 8008034:	e0ec      	b.n	8008210 <UART_SetConfig+0x348>
 8008036:	2308      	movs	r3, #8
 8008038:	77fb      	strb	r3, [r7, #31]
 800803a:	e0e9      	b.n	8008210 <UART_SetConfig+0x348>
 800803c:	2310      	movs	r3, #16
 800803e:	77fb      	strb	r3, [r7, #31]
 8008040:	e0e6      	b.n	8008210 <UART_SetConfig+0x348>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a56      	ldr	r2, [pc, #344]	; (80081a0 <UART_SetConfig+0x2d8>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d120      	bne.n	800808e <UART_SetConfig+0x1c6>
 800804c:	4b51      	ldr	r3, [pc, #324]	; (8008194 <UART_SetConfig+0x2cc>)
 800804e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008052:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008056:	2bc0      	cmp	r3, #192	; 0xc0
 8008058:	d013      	beq.n	8008082 <UART_SetConfig+0x1ba>
 800805a:	2bc0      	cmp	r3, #192	; 0xc0
 800805c:	d814      	bhi.n	8008088 <UART_SetConfig+0x1c0>
 800805e:	2b80      	cmp	r3, #128	; 0x80
 8008060:	d009      	beq.n	8008076 <UART_SetConfig+0x1ae>
 8008062:	2b80      	cmp	r3, #128	; 0x80
 8008064:	d810      	bhi.n	8008088 <UART_SetConfig+0x1c0>
 8008066:	2b00      	cmp	r3, #0
 8008068:	d002      	beq.n	8008070 <UART_SetConfig+0x1a8>
 800806a:	2b40      	cmp	r3, #64	; 0x40
 800806c:	d006      	beq.n	800807c <UART_SetConfig+0x1b4>
 800806e:	e00b      	b.n	8008088 <UART_SetConfig+0x1c0>
 8008070:	2300      	movs	r3, #0
 8008072:	77fb      	strb	r3, [r7, #31]
 8008074:	e0cc      	b.n	8008210 <UART_SetConfig+0x348>
 8008076:	2302      	movs	r3, #2
 8008078:	77fb      	strb	r3, [r7, #31]
 800807a:	e0c9      	b.n	8008210 <UART_SetConfig+0x348>
 800807c:	2304      	movs	r3, #4
 800807e:	77fb      	strb	r3, [r7, #31]
 8008080:	e0c6      	b.n	8008210 <UART_SetConfig+0x348>
 8008082:	2308      	movs	r3, #8
 8008084:	77fb      	strb	r3, [r7, #31]
 8008086:	e0c3      	b.n	8008210 <UART_SetConfig+0x348>
 8008088:	2310      	movs	r3, #16
 800808a:	77fb      	strb	r3, [r7, #31]
 800808c:	e0c0      	b.n	8008210 <UART_SetConfig+0x348>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a44      	ldr	r2, [pc, #272]	; (80081a4 <UART_SetConfig+0x2dc>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d125      	bne.n	80080e4 <UART_SetConfig+0x21c>
 8008098:	4b3e      	ldr	r3, [pc, #248]	; (8008194 <UART_SetConfig+0x2cc>)
 800809a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800809e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080a6:	d017      	beq.n	80080d8 <UART_SetConfig+0x210>
 80080a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080ac:	d817      	bhi.n	80080de <UART_SetConfig+0x216>
 80080ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080b2:	d00b      	beq.n	80080cc <UART_SetConfig+0x204>
 80080b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080b8:	d811      	bhi.n	80080de <UART_SetConfig+0x216>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <UART_SetConfig+0x1fe>
 80080be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080c2:	d006      	beq.n	80080d2 <UART_SetConfig+0x20a>
 80080c4:	e00b      	b.n	80080de <UART_SetConfig+0x216>
 80080c6:	2300      	movs	r3, #0
 80080c8:	77fb      	strb	r3, [r7, #31]
 80080ca:	e0a1      	b.n	8008210 <UART_SetConfig+0x348>
 80080cc:	2302      	movs	r3, #2
 80080ce:	77fb      	strb	r3, [r7, #31]
 80080d0:	e09e      	b.n	8008210 <UART_SetConfig+0x348>
 80080d2:	2304      	movs	r3, #4
 80080d4:	77fb      	strb	r3, [r7, #31]
 80080d6:	e09b      	b.n	8008210 <UART_SetConfig+0x348>
 80080d8:	2308      	movs	r3, #8
 80080da:	77fb      	strb	r3, [r7, #31]
 80080dc:	e098      	b.n	8008210 <UART_SetConfig+0x348>
 80080de:	2310      	movs	r3, #16
 80080e0:	77fb      	strb	r3, [r7, #31]
 80080e2:	e095      	b.n	8008210 <UART_SetConfig+0x348>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a2f      	ldr	r2, [pc, #188]	; (80081a8 <UART_SetConfig+0x2e0>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d125      	bne.n	800813a <UART_SetConfig+0x272>
 80080ee:	4b29      	ldr	r3, [pc, #164]	; (8008194 <UART_SetConfig+0x2cc>)
 80080f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080fc:	d017      	beq.n	800812e <UART_SetConfig+0x266>
 80080fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008102:	d817      	bhi.n	8008134 <UART_SetConfig+0x26c>
 8008104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008108:	d00b      	beq.n	8008122 <UART_SetConfig+0x25a>
 800810a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800810e:	d811      	bhi.n	8008134 <UART_SetConfig+0x26c>
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <UART_SetConfig+0x254>
 8008114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008118:	d006      	beq.n	8008128 <UART_SetConfig+0x260>
 800811a:	e00b      	b.n	8008134 <UART_SetConfig+0x26c>
 800811c:	2301      	movs	r3, #1
 800811e:	77fb      	strb	r3, [r7, #31]
 8008120:	e076      	b.n	8008210 <UART_SetConfig+0x348>
 8008122:	2302      	movs	r3, #2
 8008124:	77fb      	strb	r3, [r7, #31]
 8008126:	e073      	b.n	8008210 <UART_SetConfig+0x348>
 8008128:	2304      	movs	r3, #4
 800812a:	77fb      	strb	r3, [r7, #31]
 800812c:	e070      	b.n	8008210 <UART_SetConfig+0x348>
 800812e:	2308      	movs	r3, #8
 8008130:	77fb      	strb	r3, [r7, #31]
 8008132:	e06d      	b.n	8008210 <UART_SetConfig+0x348>
 8008134:	2310      	movs	r3, #16
 8008136:	77fb      	strb	r3, [r7, #31]
 8008138:	e06a      	b.n	8008210 <UART_SetConfig+0x348>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a1b      	ldr	r2, [pc, #108]	; (80081ac <UART_SetConfig+0x2e4>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d138      	bne.n	80081b6 <UART_SetConfig+0x2ee>
 8008144:	4b13      	ldr	r3, [pc, #76]	; (8008194 <UART_SetConfig+0x2cc>)
 8008146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800814a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800814e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008152:	d017      	beq.n	8008184 <UART_SetConfig+0x2bc>
 8008154:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008158:	d82a      	bhi.n	80081b0 <UART_SetConfig+0x2e8>
 800815a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800815e:	d00b      	beq.n	8008178 <UART_SetConfig+0x2b0>
 8008160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008164:	d824      	bhi.n	80081b0 <UART_SetConfig+0x2e8>
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <UART_SetConfig+0x2aa>
 800816a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800816e:	d006      	beq.n	800817e <UART_SetConfig+0x2b6>
 8008170:	e01e      	b.n	80081b0 <UART_SetConfig+0x2e8>
 8008172:	2300      	movs	r3, #0
 8008174:	77fb      	strb	r3, [r7, #31]
 8008176:	e04b      	b.n	8008210 <UART_SetConfig+0x348>
 8008178:	2302      	movs	r3, #2
 800817a:	77fb      	strb	r3, [r7, #31]
 800817c:	e048      	b.n	8008210 <UART_SetConfig+0x348>
 800817e:	2304      	movs	r3, #4
 8008180:	77fb      	strb	r3, [r7, #31]
 8008182:	e045      	b.n	8008210 <UART_SetConfig+0x348>
 8008184:	2308      	movs	r3, #8
 8008186:	77fb      	strb	r3, [r7, #31]
 8008188:	e042      	b.n	8008210 <UART_SetConfig+0x348>
 800818a:	bf00      	nop
 800818c:	efff69f3 	.word	0xefff69f3
 8008190:	40011000 	.word	0x40011000
 8008194:	40023800 	.word	0x40023800
 8008198:	40004400 	.word	0x40004400
 800819c:	40004800 	.word	0x40004800
 80081a0:	40004c00 	.word	0x40004c00
 80081a4:	40005000 	.word	0x40005000
 80081a8:	40011400 	.word	0x40011400
 80081ac:	40007800 	.word	0x40007800
 80081b0:	2310      	movs	r3, #16
 80081b2:	77fb      	strb	r3, [r7, #31]
 80081b4:	e02c      	b.n	8008210 <UART_SetConfig+0x348>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a72      	ldr	r2, [pc, #456]	; (8008384 <UART_SetConfig+0x4bc>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d125      	bne.n	800820c <UART_SetConfig+0x344>
 80081c0:	4b71      	ldr	r3, [pc, #452]	; (8008388 <UART_SetConfig+0x4c0>)
 80081c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80081ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80081ce:	d017      	beq.n	8008200 <UART_SetConfig+0x338>
 80081d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80081d4:	d817      	bhi.n	8008206 <UART_SetConfig+0x33e>
 80081d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081da:	d00b      	beq.n	80081f4 <UART_SetConfig+0x32c>
 80081dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081e0:	d811      	bhi.n	8008206 <UART_SetConfig+0x33e>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <UART_SetConfig+0x326>
 80081e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081ea:	d006      	beq.n	80081fa <UART_SetConfig+0x332>
 80081ec:	e00b      	b.n	8008206 <UART_SetConfig+0x33e>
 80081ee:	2300      	movs	r3, #0
 80081f0:	77fb      	strb	r3, [r7, #31]
 80081f2:	e00d      	b.n	8008210 <UART_SetConfig+0x348>
 80081f4:	2302      	movs	r3, #2
 80081f6:	77fb      	strb	r3, [r7, #31]
 80081f8:	e00a      	b.n	8008210 <UART_SetConfig+0x348>
 80081fa:	2304      	movs	r3, #4
 80081fc:	77fb      	strb	r3, [r7, #31]
 80081fe:	e007      	b.n	8008210 <UART_SetConfig+0x348>
 8008200:	2308      	movs	r3, #8
 8008202:	77fb      	strb	r3, [r7, #31]
 8008204:	e004      	b.n	8008210 <UART_SetConfig+0x348>
 8008206:	2310      	movs	r3, #16
 8008208:	77fb      	strb	r3, [r7, #31]
 800820a:	e001      	b.n	8008210 <UART_SetConfig+0x348>
 800820c:	2310      	movs	r3, #16
 800820e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	69db      	ldr	r3, [r3, #28]
 8008214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008218:	d15b      	bne.n	80082d2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800821a:	7ffb      	ldrb	r3, [r7, #31]
 800821c:	2b08      	cmp	r3, #8
 800821e:	d828      	bhi.n	8008272 <UART_SetConfig+0x3aa>
 8008220:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <UART_SetConfig+0x360>)
 8008222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008226:	bf00      	nop
 8008228:	0800824d 	.word	0x0800824d
 800822c:	08008255 	.word	0x08008255
 8008230:	0800825d 	.word	0x0800825d
 8008234:	08008273 	.word	0x08008273
 8008238:	08008263 	.word	0x08008263
 800823c:	08008273 	.word	0x08008273
 8008240:	08008273 	.word	0x08008273
 8008244:	08008273 	.word	0x08008273
 8008248:	0800826b 	.word	0x0800826b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800824c:	f7fd f888 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8008250:	61b8      	str	r0, [r7, #24]
        break;
 8008252:	e013      	b.n	800827c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008254:	f7fd f898 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 8008258:	61b8      	str	r0, [r7, #24]
        break;
 800825a:	e00f      	b.n	800827c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800825c:	4b4b      	ldr	r3, [pc, #300]	; (800838c <UART_SetConfig+0x4c4>)
 800825e:	61bb      	str	r3, [r7, #24]
        break;
 8008260:	e00c      	b.n	800827c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008262:	f7fc ff6b 	bl	800513c <HAL_RCC_GetSysClockFreq>
 8008266:	61b8      	str	r0, [r7, #24]
        break;
 8008268:	e008      	b.n	800827c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800826a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800826e:	61bb      	str	r3, [r7, #24]
        break;
 8008270:	e004      	b.n	800827c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	77bb      	strb	r3, [r7, #30]
        break;
 800827a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d074      	beq.n	800836c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	005a      	lsls	r2, r3, #1
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	085b      	lsrs	r3, r3, #1
 800828c:	441a      	add	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	fbb2 f3f3 	udiv	r3, r2, r3
 8008296:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	2b0f      	cmp	r3, #15
 800829c:	d916      	bls.n	80082cc <UART_SetConfig+0x404>
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a4:	d212      	bcs.n	80082cc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	f023 030f 	bic.w	r3, r3, #15
 80082ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	085b      	lsrs	r3, r3, #1
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	f003 0307 	and.w	r3, r3, #7
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	89fb      	ldrh	r3, [r7, #14]
 80082be:	4313      	orrs	r3, r2
 80082c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	89fa      	ldrh	r2, [r7, #14]
 80082c8:	60da      	str	r2, [r3, #12]
 80082ca:	e04f      	b.n	800836c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	77bb      	strb	r3, [r7, #30]
 80082d0:	e04c      	b.n	800836c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082d2:	7ffb      	ldrb	r3, [r7, #31]
 80082d4:	2b08      	cmp	r3, #8
 80082d6:	d828      	bhi.n	800832a <UART_SetConfig+0x462>
 80082d8:	a201      	add	r2, pc, #4	; (adr r2, 80082e0 <UART_SetConfig+0x418>)
 80082da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082de:	bf00      	nop
 80082e0:	08008305 	.word	0x08008305
 80082e4:	0800830d 	.word	0x0800830d
 80082e8:	08008315 	.word	0x08008315
 80082ec:	0800832b 	.word	0x0800832b
 80082f0:	0800831b 	.word	0x0800831b
 80082f4:	0800832b 	.word	0x0800832b
 80082f8:	0800832b 	.word	0x0800832b
 80082fc:	0800832b 	.word	0x0800832b
 8008300:	08008323 	.word	0x08008323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008304:	f7fd f82c 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8008308:	61b8      	str	r0, [r7, #24]
        break;
 800830a:	e013      	b.n	8008334 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800830c:	f7fd f83c 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 8008310:	61b8      	str	r0, [r7, #24]
        break;
 8008312:	e00f      	b.n	8008334 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008314:	4b1d      	ldr	r3, [pc, #116]	; (800838c <UART_SetConfig+0x4c4>)
 8008316:	61bb      	str	r3, [r7, #24]
        break;
 8008318:	e00c      	b.n	8008334 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800831a:	f7fc ff0f 	bl	800513c <HAL_RCC_GetSysClockFreq>
 800831e:	61b8      	str	r0, [r7, #24]
        break;
 8008320:	e008      	b.n	8008334 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008326:	61bb      	str	r3, [r7, #24]
        break;
 8008328:	e004      	b.n	8008334 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	77bb      	strb	r3, [r7, #30]
        break;
 8008332:	bf00      	nop
    }

    if (pclk != 0U)
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d018      	beq.n	800836c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	085a      	lsrs	r2, r3, #1
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	441a      	add	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	fbb2 f3f3 	udiv	r3, r2, r3
 800834c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	2b0f      	cmp	r3, #15
 8008352:	d909      	bls.n	8008368 <UART_SetConfig+0x4a0>
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800835a:	d205      	bcs.n	8008368 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	b29a      	uxth	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60da      	str	r2, [r3, #12]
 8008366:	e001      	b.n	800836c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008378:	7fbb      	ldrb	r3, [r7, #30]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3720      	adds	r7, #32
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	40007c00 	.word	0x40007c00
 8008388:	40023800 	.word	0x40023800
 800838c:	00f42400 	.word	0x00f42400

08008390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	f003 0301 	and.w	r3, r3, #1
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	f003 0302 	and.w	r3, r3, #2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	f003 0304 	and.w	r3, r3, #4
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00a      	beq.n	80083fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	f003 0308 	and.w	r3, r3, #8
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008424:	f003 0310 	and.w	r3, r3, #16
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00a      	beq.n	8008442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008446:	f003 0320 	and.w	r3, r3, #32
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846c:	2b00      	cmp	r3, #0
 800846e:	d01a      	beq.n	80084a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800848e:	d10a      	bne.n	80084a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00a      	beq.n	80084c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	605a      	str	r2, [r3, #4]
  }
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af02      	add	r7, sp, #8
 80084da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084e4:	f7fa fd6c 	bl	8002fc0 <HAL_GetTick>
 80084e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0308 	and.w	r3, r3, #8
 80084f4:	2b08      	cmp	r3, #8
 80084f6:	d10e      	bne.n	8008516 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f831 	bl	800856e <UART_WaitOnFlagUntilTimeout>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e027      	b.n	8008566 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0304 	and.w	r3, r3, #4
 8008520:	2b04      	cmp	r3, #4
 8008522:	d10e      	bne.n	8008542 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008524:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f81b 	bl	800856e <UART_WaitOnFlagUntilTimeout>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e011      	b.n	8008566 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2220      	movs	r2, #32
 8008546:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2220      	movs	r2, #32
 800854c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b09c      	sub	sp, #112	; 0x70
 8008572:	af00      	add	r7, sp, #0
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	603b      	str	r3, [r7, #0]
 800857a:	4613      	mov	r3, r2
 800857c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800857e:	e0a7      	b.n	80086d0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008586:	f000 80a3 	beq.w	80086d0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800858a:	f7fa fd19 	bl	8002fc0 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008596:	429a      	cmp	r2, r3
 8008598:	d302      	bcc.n	80085a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800859a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800859c:	2b00      	cmp	r3, #0
 800859e:	d13f      	bne.n	8008620 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80085ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085b4:	667b      	str	r3, [r7, #100]	; 0x64
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	461a      	mov	r2, r3
 80085bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085c6:	e841 2300 	strex	r3, r2, [r1]
 80085ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80085cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1e6      	bne.n	80085a0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3308      	adds	r3, #8
 80085d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e4:	f023 0301 	bic.w	r3, r3, #1
 80085e8:	663b      	str	r3, [r7, #96]	; 0x60
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3308      	adds	r3, #8
 80085f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80085f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e5      	bne.n	80085d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2220      	movs	r2, #32
 800860a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2220      	movs	r2, #32
 8008610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e068      	b.n	80086f2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0304 	and.w	r3, r3, #4
 800862a:	2b00      	cmp	r3, #0
 800862c:	d050      	beq.n	80086d0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800863c:	d148      	bne.n	80086d0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008646:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	e853 3f00 	ldrex	r3, [r3]
 8008654:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800865c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008666:	637b      	str	r3, [r7, #52]	; 0x34
 8008668:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800866c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800866e:	e841 2300 	strex	r3, r2, [r1]
 8008672:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1e6      	bne.n	8008648 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3308      	adds	r3, #8
 8008680:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	613b      	str	r3, [r7, #16]
   return(result);
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	f023 0301 	bic.w	r3, r3, #1
 8008690:	66bb      	str	r3, [r7, #104]	; 0x68
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3308      	adds	r3, #8
 8008698:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800869a:	623a      	str	r2, [r7, #32]
 800869c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	69f9      	ldr	r1, [r7, #28]
 80086a0:	6a3a      	ldr	r2, [r7, #32]
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e5      	bne.n	800867a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2220      	movs	r2, #32
 80086b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2220      	movs	r2, #32
 80086b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2220      	movs	r2, #32
 80086c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e010      	b.n	80086f2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	69da      	ldr	r2, [r3, #28]
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	4013      	ands	r3, r2
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	429a      	cmp	r2, r3
 80086de:	bf0c      	ite	eq
 80086e0:	2301      	moveq	r3, #1
 80086e2:	2300      	movne	r3, #0
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	461a      	mov	r2, r3
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	f43f af48 	beq.w	8008580 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3770      	adds	r7, #112	; 0x70
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
	...

080086fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b097      	sub	sp, #92	; 0x5c
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	4613      	mov	r3, r2
 8008708:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	88fa      	ldrh	r2, [r7, #6]
 8008714:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	88fa      	ldrh	r2, [r7, #6]
 800871c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800872e:	d10e      	bne.n	800874e <UART_Start_Receive_IT+0x52>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d105      	bne.n	8008744 <UART_Start_Receive_IT+0x48>
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800873e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008742:	e02d      	b.n	80087a0 <UART_Start_Receive_IT+0xa4>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	22ff      	movs	r2, #255	; 0xff
 8008748:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800874c:	e028      	b.n	80087a0 <UART_Start_Receive_IT+0xa4>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10d      	bne.n	8008772 <UART_Start_Receive_IT+0x76>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d104      	bne.n	8008768 <UART_Start_Receive_IT+0x6c>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	22ff      	movs	r2, #255	; 0xff
 8008762:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008766:	e01b      	b.n	80087a0 <UART_Start_Receive_IT+0xa4>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	227f      	movs	r2, #127	; 0x7f
 800876c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008770:	e016      	b.n	80087a0 <UART_Start_Receive_IT+0xa4>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800877a:	d10d      	bne.n	8008798 <UART_Start_Receive_IT+0x9c>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d104      	bne.n	800878e <UART_Start_Receive_IT+0x92>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	227f      	movs	r2, #127	; 0x7f
 8008788:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800878c:	e008      	b.n	80087a0 <UART_Start_Receive_IT+0xa4>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	223f      	movs	r2, #63	; 0x3f
 8008792:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008796:	e003      	b.n	80087a0 <UART_Start_Receive_IT+0xa4>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2222      	movs	r2, #34	; 0x22
 80087ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3308      	adds	r3, #8
 80087b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ba:	e853 3f00 	ldrex	r3, [r3]
 80087be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c2:	f043 0301 	orr.w	r3, r3, #1
 80087c6:	657b      	str	r3, [r7, #84]	; 0x54
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3308      	adds	r3, #8
 80087ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087d0:	64ba      	str	r2, [r7, #72]	; 0x48
 80087d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087d8:	e841 2300 	strex	r3, r2, [r1]
 80087dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80087de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1e5      	bne.n	80087b0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ec:	d107      	bne.n	80087fe <UART_Start_Receive_IT+0x102>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d103      	bne.n	80087fe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	4a21      	ldr	r2, [pc, #132]	; (8008880 <UART_Start_Receive_IT+0x184>)
 80087fa:	669a      	str	r2, [r3, #104]	; 0x68
 80087fc:	e002      	b.n	8008804 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	4a20      	ldr	r2, [pc, #128]	; (8008884 <UART_Start_Receive_IT+0x188>)
 8008802:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d019      	beq.n	8008840 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008820:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	461a      	mov	r2, r3
 8008828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800882a:	637b      	str	r3, [r7, #52]	; 0x34
 800882c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008832:	e841 2300 	strex	r3, r2, [r1]
 8008836:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1e6      	bne.n	800880c <UART_Start_Receive_IT+0x110>
 800883e:	e018      	b.n	8008872 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	e853 3f00 	ldrex	r3, [r3]
 800884c:	613b      	str	r3, [r7, #16]
   return(result);
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	f043 0320 	orr.w	r3, r3, #32
 8008854:	653b      	str	r3, [r7, #80]	; 0x50
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800885e:	623b      	str	r3, [r7, #32]
 8008860:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	69f9      	ldr	r1, [r7, #28]
 8008864:	6a3a      	ldr	r2, [r7, #32]
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	61bb      	str	r3, [r7, #24]
   return(result);
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e6      	bne.n	8008840 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	375c      	adds	r7, #92	; 0x5c
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	08008b37 	.word	0x08008b37
 8008884:	080089d1 	.word	0x080089d1

08008888 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008888:	b480      	push	{r7}
 800888a:	b095      	sub	sp, #84	; 0x54
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088ae:	643b      	str	r3, [r7, #64]	; 0x40
 80088b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1e6      	bne.n	8008890 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3308      	adds	r3, #8
 80088c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	6a3b      	ldr	r3, [r7, #32]
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	f023 0301 	bic.w	r3, r3, #1
 80088d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3308      	adds	r3, #8
 80088e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e5      	bne.n	80088c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d118      	bne.n	8008930 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	e853 3f00 	ldrex	r3, [r3]
 800890a:	60bb      	str	r3, [r7, #8]
   return(result);
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	f023 0310 	bic.w	r3, r3, #16
 8008912:	647b      	str	r3, [r7, #68]	; 0x44
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	461a      	mov	r2, r3
 800891a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800891c:	61bb      	str	r3, [r7, #24]
 800891e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008920:	6979      	ldr	r1, [r7, #20]
 8008922:	69ba      	ldr	r2, [r7, #24]
 8008924:	e841 2300 	strex	r3, r2, [r1]
 8008928:	613b      	str	r3, [r7, #16]
   return(result);
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1e6      	bne.n	80088fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2220      	movs	r2, #32
 8008934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008944:	bf00      	nop
 8008946:	3754      	adds	r7, #84	; 0x54
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f7ff fa8a 	bl	8007e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008974:	bf00      	nop
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b088      	sub	sp, #32
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	e853 3f00 	ldrex	r3, [r3]
 8008990:	60bb      	str	r3, [r7, #8]
   return(result);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008998:	61fb      	str	r3, [r7, #28]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	61bb      	str	r3, [r7, #24]
 80089a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a6:	6979      	ldr	r1, [r7, #20]
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	613b      	str	r3, [r7, #16]
   return(result);
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1e6      	bne.n	8008984 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7ff fa56 	bl	8007e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089c8:	bf00      	nop
 80089ca:	3720      	adds	r7, #32
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b096      	sub	sp, #88	; 0x58
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089de:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089e8:	2b22      	cmp	r3, #34	; 0x22
 80089ea:	f040 8098 	bne.w	8008b1e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089f8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80089fc:	b2d9      	uxtb	r1, r3
 80089fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008a02:	b2da      	uxtb	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a08:	400a      	ands	r2, r1
 8008a0a:	b2d2      	uxtb	r2, r2
 8008a0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	3b01      	subs	r3, #1
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d17b      	bne.n	8008b2e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3e:	e853 3f00 	ldrex	r3, [r3]
 8008a42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a4a:	653b      	str	r3, [r7, #80]	; 0x50
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	461a      	mov	r2, r3
 8008a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a54:	647b      	str	r3, [r7, #68]	; 0x44
 8008a56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a5c:	e841 2300 	strex	r3, r2, [r1]
 8008a60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e6      	bne.n	8008a36 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3308      	adds	r3, #8
 8008a6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	e853 3f00 	ldrex	r3, [r3]
 8008a76:	623b      	str	r3, [r7, #32]
   return(result);
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	f023 0301 	bic.w	r3, r3, #1
 8008a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3308      	adds	r3, #8
 8008a86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a88:	633a      	str	r2, [r7, #48]	; 0x30
 8008a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a90:	e841 2300 	strex	r3, r2, [r1]
 8008a94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1e5      	bne.n	8008a68 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2220      	movs	r2, #32
 8008aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d12e      	bne.n	8008b16 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	e853 3f00 	ldrex	r3, [r3]
 8008aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f023 0310 	bic.w	r3, r3, #16
 8008ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	461a      	mov	r2, r3
 8008ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008adc:	61fb      	str	r3, [r7, #28]
 8008ade:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae0:	69b9      	ldr	r1, [r7, #24]
 8008ae2:	69fa      	ldr	r2, [r7, #28]
 8008ae4:	e841 2300 	strex	r3, r2, [r1]
 8008ae8:	617b      	str	r3, [r7, #20]
   return(result);
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1e6      	bne.n	8008abe <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	f003 0310 	and.w	r3, r3, #16
 8008afa:	2b10      	cmp	r3, #16
 8008afc:	d103      	bne.n	8008b06 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2210      	movs	r2, #16
 8008b04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7ff f9c4 	bl	8007e9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b14:	e00b      	b.n	8008b2e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7f9 f8fe 	bl	8001d18 <HAL_UART_RxCpltCallback>
}
 8008b1c:	e007      	b.n	8008b2e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	699a      	ldr	r2, [r3, #24]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f042 0208 	orr.w	r2, r2, #8
 8008b2c:	619a      	str	r2, [r3, #24]
}
 8008b2e:	bf00      	nop
 8008b30:	3758      	adds	r7, #88	; 0x58
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b096      	sub	sp, #88	; 0x58
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b44:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b4e:	2b22      	cmp	r3, #34	; 0x22
 8008b50:	f040 8098 	bne.w	8008c84 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b62:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b64:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008b68:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b72:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b78:	1c9a      	adds	r2, r3, #2
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	3b01      	subs	r3, #1
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d17b      	bne.n	8008c94 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bba:	643b      	str	r3, [r7, #64]	; 0x40
 8008bbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bc2:	e841 2300 	strex	r3, r2, [r1]
 8008bc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1e6      	bne.n	8008b9c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd6:	6a3b      	ldr	r3, [r7, #32]
 8008bd8:	e853 3f00 	ldrex	r3, [r3]
 8008bdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	f023 0301 	bic.w	r3, r3, #1
 8008be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3308      	adds	r3, #8
 8008bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bf6:	e841 2300 	strex	r3, r2, [r1]
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1e5      	bne.n	8008bce <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2220      	movs	r2, #32
 8008c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d12e      	bne.n	8008c7c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	e853 3f00 	ldrex	r3, [r3]
 8008c30:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	f023 0310 	bic.w	r3, r3, #16
 8008c38:	647b      	str	r3, [r7, #68]	; 0x44
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c42:	61bb      	str	r3, [r7, #24]
 8008c44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c46:	6979      	ldr	r1, [r7, #20]
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	e841 2300 	strex	r3, r2, [r1]
 8008c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1e6      	bne.n	8008c24 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	69db      	ldr	r3, [r3, #28]
 8008c5c:	f003 0310 	and.w	r3, r3, #16
 8008c60:	2b10      	cmp	r3, #16
 8008c62:	d103      	bne.n	8008c6c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2210      	movs	r2, #16
 8008c6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff f911 	bl	8007e9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c7a:	e00b      	b.n	8008c94 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7f9 f84b 	bl	8001d18 <HAL_UART_RxCpltCallback>
}
 8008c82:	e007      	b.n	8008c94 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	699a      	ldr	r2, [r3, #24]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f042 0208 	orr.w	r2, r2, #8
 8008c92:	619a      	str	r2, [r3, #24]
}
 8008c94:	bf00      	nop
 8008c96:	3758      	adds	r7, #88	; 0x58
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c9c:	b480      	push	{r7}
 8008c9e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008ca0:	bf00      	nop
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
	...

08008cac <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cb2:	f3ef 8305 	mrs	r3, IPSR
 8008cb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008cb8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10f      	bne.n	8008cde <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8008cc2:	607b      	str	r3, [r7, #4]
  return(result);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d105      	bne.n	8008cd6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cca:	f3ef 8311 	mrs	r3, BASEPRI
 8008cce:	603b      	str	r3, [r7, #0]
  return(result);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d007      	beq.n	8008ce6 <osKernelInitialize+0x3a>
 8008cd6:	4b0e      	ldr	r3, [pc, #56]	; (8008d10 <osKernelInitialize+0x64>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d103      	bne.n	8008ce6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008cde:	f06f 0305 	mvn.w	r3, #5
 8008ce2:	60fb      	str	r3, [r7, #12]
 8008ce4:	e00c      	b.n	8008d00 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008ce6:	4b0a      	ldr	r3, [pc, #40]	; (8008d10 <osKernelInitialize+0x64>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d105      	bne.n	8008cfa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008cee:	4b08      	ldr	r3, [pc, #32]	; (8008d10 <osKernelInitialize+0x64>)
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60fb      	str	r3, [r7, #12]
 8008cf8:	e002      	b.n	8008d00 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008cfe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008d00:	68fb      	ldr	r3, [r7, #12]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	200007f4 	.word	0x200007f4

08008d14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d1a:	f3ef 8305 	mrs	r3, IPSR
 8008d1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10f      	bne.n	8008d46 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d26:	f3ef 8310 	mrs	r3, PRIMASK
 8008d2a:	607b      	str	r3, [r7, #4]
  return(result);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d105      	bne.n	8008d3e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d32:	f3ef 8311 	mrs	r3, BASEPRI
 8008d36:	603b      	str	r3, [r7, #0]
  return(result);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d007      	beq.n	8008d4e <osKernelStart+0x3a>
 8008d3e:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <osKernelStart+0x68>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d103      	bne.n	8008d4e <osKernelStart+0x3a>
    stat = osErrorISR;
 8008d46:	f06f 0305 	mvn.w	r3, #5
 8008d4a:	60fb      	str	r3, [r7, #12]
 8008d4c:	e010      	b.n	8008d70 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008d4e:	4b0b      	ldr	r3, [pc, #44]	; (8008d7c <osKernelStart+0x68>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d109      	bne.n	8008d6a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008d56:	f7ff ffa1 	bl	8008c9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008d5a:	4b08      	ldr	r3, [pc, #32]	; (8008d7c <osKernelStart+0x68>)
 8008d5c:	2202      	movs	r2, #2
 8008d5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008d60:	f001 fc6e 	bl	800a640 <vTaskStartScheduler>
      stat = osOK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	e002      	b.n	8008d70 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008d70:	68fb      	ldr	r3, [r7, #12]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	200007f4 	.word	0x200007f4

08008d80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b090      	sub	sp, #64	; 0x40
 8008d84:	af04      	add	r7, sp, #16
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d90:	f3ef 8305 	mrs	r3, IPSR
 8008d94:	61fb      	str	r3, [r7, #28]
  return(result);
 8008d96:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f040 808f 	bne.w	8008ebc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8008da2:	61bb      	str	r3, [r7, #24]
  return(result);
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d105      	bne.n	8008db6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008daa:	f3ef 8311 	mrs	r3, BASEPRI
 8008dae:	617b      	str	r3, [r7, #20]
  return(result);
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <osThreadNew+0x3e>
 8008db6:	4b44      	ldr	r3, [pc, #272]	; (8008ec8 <osThreadNew+0x148>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d07e      	beq.n	8008ebc <osThreadNew+0x13c>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d07b      	beq.n	8008ebc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008dc4:	2380      	movs	r3, #128	; 0x80
 8008dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008dc8:	2318      	movs	r3, #24
 8008dca:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d045      	beq.n	8008e68 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d002      	beq.n	8008dea <osThreadNew+0x6a>
        name = attr->name;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d002      	beq.n	8008df8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d008      	beq.n	8008e10 <osThreadNew+0x90>
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e00:	2b38      	cmp	r3, #56	; 0x38
 8008e02:	d805      	bhi.n	8008e10 <osThreadNew+0x90>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d001      	beq.n	8008e14 <osThreadNew+0x94>
        return (NULL);
 8008e10:	2300      	movs	r3, #0
 8008e12:	e054      	b.n	8008ebe <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	089b      	lsrs	r3, r3, #2
 8008e22:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00e      	beq.n	8008e4a <osThreadNew+0xca>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	2ba7      	cmp	r3, #167	; 0xa7
 8008e32:	d90a      	bls.n	8008e4a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d006      	beq.n	8008e4a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <osThreadNew+0xca>
        mem = 1;
 8008e44:	2301      	movs	r3, #1
 8008e46:	623b      	str	r3, [r7, #32]
 8008e48:	e010      	b.n	8008e6c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10c      	bne.n	8008e6c <osThreadNew+0xec>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d108      	bne.n	8008e6c <osThreadNew+0xec>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d104      	bne.n	8008e6c <osThreadNew+0xec>
          mem = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	623b      	str	r3, [r7, #32]
 8008e66:	e001      	b.n	8008e6c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d110      	bne.n	8008e94 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e7a:	9202      	str	r2, [sp, #8]
 8008e7c:	9301      	str	r3, [sp, #4]
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	9300      	str	r3, [sp, #0]
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f000 ff93 	bl	8009db4 <xTaskCreateStatic>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	613b      	str	r3, [r7, #16]
 8008e92:	e013      	b.n	8008ebc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008e94:	6a3b      	ldr	r3, [r7, #32]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d110      	bne.n	8008ebc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	f107 0310 	add.w	r3, r7, #16
 8008ea2:	9301      	str	r3, [sp, #4]
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f000 ffe4 	bl	8009e7a <xTaskCreate>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d001      	beq.n	8008ebc <osThreadNew+0x13c>
          hTask = NULL;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008ebc:	693b      	ldr	r3, [r7, #16]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3730      	adds	r7, #48	; 0x30
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	200007f4 	.word	0x200007f4

08008ecc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ed4:	f3ef 8305 	mrs	r3, IPSR
 8008ed8:	613b      	str	r3, [r7, #16]
  return(result);
 8008eda:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10f      	bne.n	8008f00 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ee4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d105      	bne.n	8008ef8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008eec:	f3ef 8311 	mrs	r3, BASEPRI
 8008ef0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d007      	beq.n	8008f08 <osDelay+0x3c>
 8008ef8:	4b0a      	ldr	r3, [pc, #40]	; (8008f24 <osDelay+0x58>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d103      	bne.n	8008f08 <osDelay+0x3c>
    stat = osErrorISR;
 8008f00:	f06f 0305 	mvn.w	r3, #5
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	e007      	b.n	8008f18 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d002      	beq.n	8008f18 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 f9ae 	bl	800a274 <vTaskDelay>
    }
  }

  return (stat);
 8008f18:	697b      	ldr	r3, [r7, #20]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	200007f4 	.word	0x200007f4

08008f28 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f002 fd6b 	bl	800ba0c <pvTimerGetTimerID>
 8008f36:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d005      	beq.n	8008f4a <TimerCallback+0x22>
    callb->func (callb->arg);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	6852      	ldr	r2, [r2, #4]
 8008f46:	4610      	mov	r0, r2
 8008f48:	4798      	blx	r3
  }
}
 8008f4a:	bf00      	nop
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
	...

08008f54 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08e      	sub	sp, #56	; 0x38
 8008f58:	af02      	add	r7, sp, #8
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	607a      	str	r2, [r7, #4]
 8008f5e:	603b      	str	r3, [r7, #0]
 8008f60:	460b      	mov	r3, r1
 8008f62:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008f64:	2300      	movs	r3, #0
 8008f66:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f68:	f3ef 8305 	mrs	r3, IPSR
 8008f6c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f6e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d16a      	bne.n	800904a <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f74:	f3ef 8310 	mrs	r3, PRIMASK
 8008f78:	617b      	str	r3, [r7, #20]
  return(result);
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d105      	bne.n	8008f8c <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f80:	f3ef 8311 	mrs	r3, BASEPRI
 8008f84:	613b      	str	r3, [r7, #16]
  return(result);
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d003      	beq.n	8008f94 <osTimerNew+0x40>
 8008f8c:	4b31      	ldr	r3, [pc, #196]	; (8009054 <osTimerNew+0x100>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d05a      	beq.n	800904a <osTimerNew+0xf6>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d057      	beq.n	800904a <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8008f9a:	2008      	movs	r0, #8
 8008f9c:	f002 ffec 	bl	800bf78 <pvPortMalloc>
 8008fa0:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d050      	beq.n	800904a <osTimerNew+0xf6>
      callb->func = func;
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008fb4:	7afb      	ldrb	r3, [r7, #11]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d102      	bne.n	8008fc0 <osTimerNew+0x6c>
        reload = pdFALSE;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8008fbe:	e001      	b.n	8008fc4 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8008fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc8:	623b      	str	r3, [r7, #32]
      name = NULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d01c      	beq.n	800900e <osTimerNew+0xba>
        if (attr->name != NULL) {
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d002      	beq.n	8008fe2 <osTimerNew+0x8e>
          name = attr->name;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d006      	beq.n	8008ff8 <osTimerNew+0xa4>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	2b2b      	cmp	r3, #43	; 0x2b
 8008ff0:	d902      	bls.n	8008ff8 <osTimerNew+0xa4>
          mem = 1;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	623b      	str	r3, [r7, #32]
 8008ff6:	e00c      	b.n	8009012 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d108      	bne.n	8009012 <osTimerNew+0xbe>
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d104      	bne.n	8009012 <osTimerNew+0xbe>
            mem = 0;
 8009008:	2300      	movs	r3, #0
 800900a:	623b      	str	r3, [r7, #32]
 800900c:	e001      	b.n	8009012 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8009012:	6a3b      	ldr	r3, [r7, #32]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d10c      	bne.n	8009032 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	9301      	str	r3, [sp, #4]
 800901e:	4b0e      	ldr	r3, [pc, #56]	; (8009058 <osTimerNew+0x104>)
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009026:	2101      	movs	r1, #1
 8009028:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800902a:	f002 f95e 	bl	800b2ea <xTimerCreateStatic>
 800902e:	62b8      	str	r0, [r7, #40]	; 0x28
 8009030:	e00b      	b.n	800904a <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8009032:	6a3b      	ldr	r3, [r7, #32]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d108      	bne.n	800904a <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009038:	4b07      	ldr	r3, [pc, #28]	; (8009058 <osTimerNew+0x104>)
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009040:	2101      	movs	r1, #1
 8009042:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009044:	f002 f930 	bl	800b2a8 <xTimerCreate>
 8009048:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800904a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800904c:	4618      	mov	r0, r3
 800904e:	3730      	adds	r7, #48	; 0x30
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	200007f4 	.word	0x200007f4
 8009058:	08008f29 	.word	0x08008f29

0800905c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800905c:	b580      	push	{r7, lr}
 800905e:	b08a      	sub	sp, #40	; 0x28
 8009060:	af02      	add	r7, sp, #8
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800906a:	f3ef 8305 	mrs	r3, IPSR
 800906e:	617b      	str	r3, [r7, #20]
  return(result);
 8009070:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10f      	bne.n	8009096 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009076:	f3ef 8310 	mrs	r3, PRIMASK
 800907a:	613b      	str	r3, [r7, #16]
  return(result);
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d105      	bne.n	800908e <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009082:	f3ef 8311 	mrs	r3, BASEPRI
 8009086:	60fb      	str	r3, [r7, #12]
  return(result);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d007      	beq.n	800909e <osTimerStart+0x42>
 800908e:	4b12      	ldr	r3, [pc, #72]	; (80090d8 <osTimerStart+0x7c>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b02      	cmp	r3, #2
 8009094:	d103      	bne.n	800909e <osTimerStart+0x42>
    stat = osErrorISR;
 8009096:	f06f 0305 	mvn.w	r3, #5
 800909a:	61fb      	str	r3, [r7, #28]
 800909c:	e017      	b.n	80090ce <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d103      	bne.n	80090ac <osTimerStart+0x50>
    stat = osErrorParameter;
 80090a4:	f06f 0303 	mvn.w	r3, #3
 80090a8:	61fb      	str	r3, [r7, #28]
 80090aa:	e010      	b.n	80090ce <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80090ac:	2300      	movs	r3, #0
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	2300      	movs	r3, #0
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	2104      	movs	r1, #4
 80090b6:	69b8      	ldr	r0, [r7, #24]
 80090b8:	f002 f996 	bl	800b3e8 <xTimerGenericCommand>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d102      	bne.n	80090c8 <osTimerStart+0x6c>
      stat = osOK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	61fb      	str	r3, [r7, #28]
 80090c6:	e002      	b.n	80090ce <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 80090c8:	f06f 0302 	mvn.w	r3, #2
 80090cc:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80090ce:	69fb      	ldr	r3, [r7, #28]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3720      	adds	r7, #32
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	200007f4 	.word	0x200007f4

080090dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4a07      	ldr	r2, [pc, #28]	; (8009108 <vApplicationGetIdleTaskMemory+0x2c>)
 80090ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	4a06      	ldr	r2, [pc, #24]	; (800910c <vApplicationGetIdleTaskMemory+0x30>)
 80090f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2280      	movs	r2, #128	; 0x80
 80090f8:	601a      	str	r2, [r3, #0]
}
 80090fa:	bf00      	nop
 80090fc:	3714      	adds	r7, #20
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	200007f8 	.word	0x200007f8
 800910c:	200008a0 	.word	0x200008a0

08009110 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	4a07      	ldr	r2, [pc, #28]	; (800913c <vApplicationGetTimerTaskMemory+0x2c>)
 8009120:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	4a06      	ldr	r2, [pc, #24]	; (8009140 <vApplicationGetTimerTaskMemory+0x30>)
 8009126:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800912e:	601a      	str	r2, [r3, #0]
}
 8009130:	bf00      	nop
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	20000aa0 	.word	0x20000aa0
 8009140:	20000b48 	.word	0x20000b48

08009144 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f103 0208 	add.w	r2, r3, #8
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f04f 32ff 	mov.w	r2, #4294967295
 800915c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f103 0208 	add.w	r2, r3, #8
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f103 0208 	add.w	r2, r3, #8
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009192:	bf00      	nop
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800919e:	b480      	push	{r7}
 80091a0:	b085      	sub	sp, #20
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	689a      	ldr	r2, [r3, #8]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	683a      	ldr	r2, [r7, #0]
 80091c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	601a      	str	r2, [r3, #0]
}
 80091da:	bf00      	nop
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091e6:	b480      	push	{r7}
 80091e8:	b085      	sub	sp, #20
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fc:	d103      	bne.n	8009206 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	60fb      	str	r3, [r7, #12]
 8009204:	e00c      	b.n	8009220 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	3308      	adds	r3, #8
 800920a:	60fb      	str	r3, [r7, #12]
 800920c:	e002      	b.n	8009214 <vListInsert+0x2e>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	60fb      	str	r3, [r7, #12]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	429a      	cmp	r2, r3
 800921e:	d2f6      	bcs.n	800920e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	601a      	str	r2, [r3, #0]
}
 800924c:	bf00      	nop
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	6892      	ldr	r2, [r2, #8]
 800926e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	6852      	ldr	r2, [r2, #4]
 8009278:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	429a      	cmp	r2, r3
 8009282:	d103      	bne.n	800928c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689a      	ldr	r2, [r3, #8]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	1e5a      	subs	r2, r3, #1
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3714      	adds	r7, #20
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10c      	bne.n	80092da <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80092c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c4:	b672      	cpsid	i
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	b662      	cpsie	i
 80092d4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80092d6:	bf00      	nop
 80092d8:	e7fe      	b.n	80092d8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80092da:	f002 fcc7 	bl	800bc6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e6:	68f9      	ldr	r1, [r7, #12]
 80092e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092ea:	fb01 f303 	mul.w	r3, r1, r3
 80092ee:	441a      	add	r2, r3
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800930a:	3b01      	subs	r3, #1
 800930c:	68f9      	ldr	r1, [r7, #12]
 800930e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009310:	fb01 f303 	mul.w	r3, r1, r3
 8009314:	441a      	add	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	22ff      	movs	r2, #255	; 0xff
 800931e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	22ff      	movs	r2, #255	; 0xff
 8009326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d114      	bne.n	800935a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d01a      	beq.n	800936e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	3310      	adds	r3, #16
 800933c:	4618      	mov	r0, r3
 800933e:	f001 fc69 	bl	800ac14 <xTaskRemoveFromEventList>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d012      	beq.n	800936e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009348:	4b0c      	ldr	r3, [pc, #48]	; (800937c <xQueueGenericReset+0xd0>)
 800934a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	e009      	b.n	800936e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3310      	adds	r3, #16
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff fef0 	bl	8009144 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	3324      	adds	r3, #36	; 0x24
 8009368:	4618      	mov	r0, r3
 800936a:	f7ff feeb 	bl	8009144 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800936e:	f002 fcb1 	bl	800bcd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009372:	2301      	movs	r3, #1
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	e000ed04 	.word	0xe000ed04

08009380 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08e      	sub	sp, #56	; 0x38
 8009384:	af02      	add	r7, sp, #8
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
 800938c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10c      	bne.n	80093ae <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8009394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009398:	b672      	cpsid	i
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	b662      	cpsie	i
 80093a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80093aa:	bf00      	nop
 80093ac:	e7fe      	b.n	80093ac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10c      	bne.n	80093ce <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80093b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b8:	b672      	cpsid	i
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	b662      	cpsie	i
 80093c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093ca:	bf00      	nop
 80093cc:	e7fe      	b.n	80093cc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <xQueueGenericCreateStatic+0x5a>
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <xQueueGenericCreateStatic+0x5e>
 80093da:	2301      	movs	r3, #1
 80093dc:	e000      	b.n	80093e0 <xQueueGenericCreateStatic+0x60>
 80093de:	2300      	movs	r3, #0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10c      	bne.n	80093fe <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80093e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e8:	b672      	cpsid	i
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	b662      	cpsie	i
 80093f8:	623b      	str	r3, [r7, #32]
}
 80093fa:	bf00      	nop
 80093fc:	e7fe      	b.n	80093fc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d102      	bne.n	800940a <xQueueGenericCreateStatic+0x8a>
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d101      	bne.n	800940e <xQueueGenericCreateStatic+0x8e>
 800940a:	2301      	movs	r3, #1
 800940c:	e000      	b.n	8009410 <xQueueGenericCreateStatic+0x90>
 800940e:	2300      	movs	r3, #0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10c      	bne.n	800942e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009418:	b672      	cpsid	i
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	b662      	cpsie	i
 8009428:	61fb      	str	r3, [r7, #28]
}
 800942a:	bf00      	nop
 800942c:	e7fe      	b.n	800942c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800942e:	2350      	movs	r3, #80	; 0x50
 8009430:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2b50      	cmp	r3, #80	; 0x50
 8009436:	d00c      	beq.n	8009452 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943c:	b672      	cpsid	i
 800943e:	f383 8811 	msr	BASEPRI, r3
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	b662      	cpsie	i
 800944c:	61bb      	str	r3, [r7, #24]
}
 800944e:	bf00      	nop
 8009450:	e7fe      	b.n	8009450 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009452:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00d      	beq.n	800947a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009460:	2201      	movs	r2, #1
 8009462:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009466:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800946a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	4613      	mov	r3, r2
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	68b9      	ldr	r1, [r7, #8]
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 f805 	bl	8009484 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800947a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800947c:	4618      	mov	r0, r3
 800947e:	3730      	adds	r7, #48	; 0x30
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
 8009490:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d103      	bne.n	80094a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	e002      	b.n	80094a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094b2:	2101      	movs	r1, #1
 80094b4:	69b8      	ldr	r0, [r7, #24]
 80094b6:	f7ff fef9 	bl	80092ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	78fa      	ldrb	r2, [r7, #3]
 80094be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80094c2:	78fb      	ldrb	r3, [r7, #3]
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	68f9      	ldr	r1, [r7, #12]
 80094c8:	2073      	movs	r0, #115	; 0x73
 80094ca:	f003 fe63 	bl	800d194 <SEGGER_SYSVIEW_RecordU32x3>
}
 80094ce:	bf00      	nop
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
	...

080094d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b090      	sub	sp, #64	; 0x40
 80094dc:	af02      	add	r7, sp, #8
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
 80094e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094e6:	2300      	movs	r3, #0
 80094e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10c      	bne.n	800950e <xQueueGenericSend+0x36>
	__asm volatile
 80094f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f8:	b672      	cpsid	i
 80094fa:	f383 8811 	msr	BASEPRI, r3
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	b662      	cpsie	i
 8009508:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800950a:	bf00      	nop
 800950c:	e7fe      	b.n	800950c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d103      	bne.n	800951c <xQueueGenericSend+0x44>
 8009514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009518:	2b00      	cmp	r3, #0
 800951a:	d101      	bne.n	8009520 <xQueueGenericSend+0x48>
 800951c:	2301      	movs	r3, #1
 800951e:	e000      	b.n	8009522 <xQueueGenericSend+0x4a>
 8009520:	2300      	movs	r3, #0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10c      	bne.n	8009540 <xQueueGenericSend+0x68>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952a:	b672      	cpsid	i
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	b662      	cpsie	i
 800953a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800953c:	bf00      	nop
 800953e:	e7fe      	b.n	800953e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	2b02      	cmp	r3, #2
 8009544:	d103      	bne.n	800954e <xQueueGenericSend+0x76>
 8009546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954a:	2b01      	cmp	r3, #1
 800954c:	d101      	bne.n	8009552 <xQueueGenericSend+0x7a>
 800954e:	2301      	movs	r3, #1
 8009550:	e000      	b.n	8009554 <xQueueGenericSend+0x7c>
 8009552:	2300      	movs	r3, #0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10c      	bne.n	8009572 <xQueueGenericSend+0x9a>
	__asm volatile
 8009558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955c:	b672      	cpsid	i
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	b662      	cpsie	i
 800956c:	623b      	str	r3, [r7, #32]
}
 800956e:	bf00      	nop
 8009570:	e7fe      	b.n	8009570 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009572:	f001 fd55 	bl	800b020 <xTaskGetSchedulerState>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d102      	bne.n	8009582 <xQueueGenericSend+0xaa>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <xQueueGenericSend+0xae>
 8009582:	2301      	movs	r3, #1
 8009584:	e000      	b.n	8009588 <xQueueGenericSend+0xb0>
 8009586:	2300      	movs	r3, #0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10c      	bne.n	80095a6 <xQueueGenericSend+0xce>
	__asm volatile
 800958c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009590:	b672      	cpsid	i
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	b662      	cpsie	i
 80095a0:	61fb      	str	r3, [r7, #28]
}
 80095a2:	bf00      	nop
 80095a4:	e7fe      	b.n	80095a4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095a6:	f002 fb61 	bl	800bc6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d302      	bcc.n	80095bc <xQueueGenericSend+0xe4>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d136      	bne.n	800962a <xQueueGenericSend+0x152>
			{
				traceQUEUE_SEND( pxQueue );
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	4618      	mov	r0, r3
 80095c0:	f004 fb00 	bl	800dbc4 <SEGGER_SYSVIEW_ShrinkId>
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	6879      	ldr	r1, [r7, #4]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	460b      	mov	r3, r1
 80095ce:	4601      	mov	r1, r0
 80095d0:	205a      	movs	r0, #90	; 0x5a
 80095d2:	f003 fe55 	bl	800d280 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	68b9      	ldr	r1, [r7, #8]
 80095da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095dc:	f000 fa74 	bl	8009ac8 <prvCopyDataToQueue>
 80095e0:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d010      	beq.n	800960c <xQueueGenericSend+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ec:	3324      	adds	r3, #36	; 0x24
 80095ee:	4618      	mov	r0, r3
 80095f0:	f001 fb10 	bl	800ac14 <xTaskRemoveFromEventList>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d013      	beq.n	8009622 <xQueueGenericSend+0x14a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095fa:	4b4d      	ldr	r3, [pc, #308]	; (8009730 <xQueueGenericSend+0x258>)
 80095fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	e00a      	b.n	8009622 <xQueueGenericSend+0x14a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960e:	2b00      	cmp	r3, #0
 8009610:	d007      	beq.n	8009622 <xQueueGenericSend+0x14a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009612:	4b47      	ldr	r3, [pc, #284]	; (8009730 <xQueueGenericSend+0x258>)
 8009614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009622:	f002 fb57 	bl	800bcd4 <vPortExitCritical>
				return pdPASS;
 8009626:	2301      	movs	r3, #1
 8009628:	e07d      	b.n	8009726 <xQueueGenericSend+0x24e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d110      	bne.n	8009652 <xQueueGenericSend+0x17a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009630:	f002 fb50 	bl	800bcd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8009634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009636:	4618      	mov	r0, r3
 8009638:	f004 fac4 	bl	800dbc4 <SEGGER_SYSVIEW_ShrinkId>
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	6879      	ldr	r1, [r7, #4]
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	460b      	mov	r3, r1
 8009646:	4601      	mov	r1, r0
 8009648:	205a      	movs	r0, #90	; 0x5a
 800964a:	f003 fe19 	bl	800d280 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800964e:	2300      	movs	r3, #0
 8009650:	e069      	b.n	8009726 <xQueueGenericSend+0x24e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009654:	2b00      	cmp	r3, #0
 8009656:	d106      	bne.n	8009666 <xQueueGenericSend+0x18e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009658:	f107 0314 	add.w	r3, r7, #20
 800965c:	4618      	mov	r0, r3
 800965e:	f001 fb43 	bl	800ace8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009662:	2301      	movs	r3, #1
 8009664:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009666:	f002 fb35 	bl	800bcd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800966a:	f001 f86f 	bl	800a74c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800966e:	f002 fafd 	bl	800bc6c <vPortEnterCritical>
 8009672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009674:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009678:	b25b      	sxtb	r3, r3
 800967a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800967e:	d103      	bne.n	8009688 <xQueueGenericSend+0x1b0>
 8009680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009682:	2200      	movs	r2, #0
 8009684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800968e:	b25b      	sxtb	r3, r3
 8009690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009694:	d103      	bne.n	800969e <xQueueGenericSend+0x1c6>
 8009696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800969e:	f002 fb19 	bl	800bcd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096a2:	1d3a      	adds	r2, r7, #4
 80096a4:	f107 0314 	add.w	r3, r7, #20
 80096a8:	4611      	mov	r1, r2
 80096aa:	4618      	mov	r0, r3
 80096ac:	f001 fb32 	bl	800ad14 <xTaskCheckForTimeOut>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d124      	bne.n	8009700 <xQueueGenericSend+0x228>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80096b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096b8:	f000 fafe 	bl	8009cb8 <prvIsQueueFull>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d018      	beq.n	80096f4 <xQueueGenericSend+0x21c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	3310      	adds	r3, #16
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	4611      	mov	r1, r2
 80096ca:	4618      	mov	r0, r3
 80096cc:	f001 fa4c 	bl	800ab68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80096d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096d2:	f000 fa89 	bl	8009be8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80096d6:	f001 f847 	bl	800a768 <xTaskResumeAll>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f47f af62 	bne.w	80095a6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80096e2:	4b13      	ldr	r3, [pc, #76]	; (8009730 <xQueueGenericSend+0x258>)
 80096e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096e8:	601a      	str	r2, [r3, #0]
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	e758      	b.n	80095a6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80096f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096f6:	f000 fa77 	bl	8009be8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096fa:	f001 f835 	bl	800a768 <xTaskResumeAll>
 80096fe:	e752      	b.n	80095a6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009702:	f000 fa71 	bl	8009be8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009706:	f001 f82f 	bl	800a768 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	4618      	mov	r0, r3
 800970e:	f004 fa59 	bl	800dbc4 <SEGGER_SYSVIEW_ShrinkId>
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	460b      	mov	r3, r1
 800971c:	4601      	mov	r1, r0
 800971e:	205a      	movs	r0, #90	; 0x5a
 8009720:	f003 fdae 	bl	800d280 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8009724:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009726:	4618      	mov	r0, r3
 8009728:	3738      	adds	r7, #56	; 0x38
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	e000ed04 	.word	0xe000ed04

08009734 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b08e      	sub	sp, #56	; 0x38
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
 8009740:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10c      	bne.n	8009766 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009750:	b672      	cpsid	i
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	b662      	cpsie	i
 8009760:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009762:	bf00      	nop
 8009764:	e7fe      	b.n	8009764 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d103      	bne.n	8009774 <xQueueGenericSendFromISR+0x40>
 800976c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009770:	2b00      	cmp	r3, #0
 8009772:	d101      	bne.n	8009778 <xQueueGenericSendFromISR+0x44>
 8009774:	2301      	movs	r3, #1
 8009776:	e000      	b.n	800977a <xQueueGenericSendFromISR+0x46>
 8009778:	2300      	movs	r3, #0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10c      	bne.n	8009798 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800977e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009782:	b672      	cpsid	i
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	b662      	cpsie	i
 8009792:	623b      	str	r3, [r7, #32]
}
 8009794:	bf00      	nop
 8009796:	e7fe      	b.n	8009796 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	2b02      	cmp	r3, #2
 800979c:	d103      	bne.n	80097a6 <xQueueGenericSendFromISR+0x72>
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d101      	bne.n	80097aa <xQueueGenericSendFromISR+0x76>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e000      	b.n	80097ac <xQueueGenericSendFromISR+0x78>
 80097aa:	2300      	movs	r3, #0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10c      	bne.n	80097ca <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	b672      	cpsid	i
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	b662      	cpsie	i
 80097c4:	61fb      	str	r3, [r7, #28]
}
 80097c6:	bf00      	nop
 80097c8:	e7fe      	b.n	80097c8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097ca:	f002 fb37 	bl	800be3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80097ce:	f3ef 8211 	mrs	r2, BASEPRI
 80097d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d6:	b672      	cpsid	i
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	b662      	cpsie	i
 80097e6:	61ba      	str	r2, [r7, #24]
 80097e8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80097ea:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d302      	bcc.n	8009800 <xQueueGenericSendFromISR+0xcc>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d136      	bne.n	800986e <xQueueGenericSendFromISR+0x13a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	4618      	mov	r0, r3
 800980e:	f004 f9d9 	bl	800dbc4 <SEGGER_SYSVIEW_ShrinkId>
 8009812:	4601      	mov	r1, r0
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	461a      	mov	r2, r3
 8009818:	2060      	movs	r0, #96	; 0x60
 800981a:	f003 fc61 	bl	800d0e0 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	68b9      	ldr	r1, [r7, #8]
 8009822:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009824:	f000 f950 	bl	8009ac8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009828:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800982c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009830:	d112      	bne.n	8009858 <xQueueGenericSendFromISR+0x124>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	2b00      	cmp	r3, #0
 8009838:	d016      	beq.n	8009868 <xQueueGenericSendFromISR+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983c:	3324      	adds	r3, #36	; 0x24
 800983e:	4618      	mov	r0, r3
 8009840:	f001 f9e8 	bl	800ac14 <xTaskRemoveFromEventList>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00e      	beq.n	8009868 <xQueueGenericSendFromISR+0x134>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00b      	beq.n	8009868 <xQueueGenericSendFromISR+0x134>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	e007      	b.n	8009868 <xQueueGenericSendFromISR+0x134>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009858:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800985c:	3301      	adds	r3, #1
 800985e:	b2db      	uxtb	r3, r3
 8009860:	b25a      	sxtb	r2, r3
 8009862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009868:	2301      	movs	r3, #1
 800986a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800986c:	e00b      	b.n	8009886 <xQueueGenericSendFromISR+0x152>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800986e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009870:	4618      	mov	r0, r3
 8009872:	f004 f9a7 	bl	800dbc4 <SEGGER_SYSVIEW_ShrinkId>
 8009876:	4601      	mov	r1, r0
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	461a      	mov	r2, r3
 800987c:	2060      	movs	r0, #96	; 0x60
 800987e:	f003 fc2f 	bl	800d0e0 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8009882:	2300      	movs	r3, #0
 8009884:	637b      	str	r3, [r7, #52]	; 0x34
 8009886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009888:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009890:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009894:	4618      	mov	r0, r3
 8009896:	3738      	adds	r7, #56	; 0x38
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800989c:	b590      	push	{r4, r7, lr}
 800989e:	b08f      	sub	sp, #60	; 0x3c
 80098a0:	af02      	add	r7, sp, #8
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80098a8:	2300      	movs	r3, #0
 80098aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80098b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10c      	bne.n	80098d0 <xQueueReceive+0x34>
	__asm volatile
 80098b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ba:	b672      	cpsid	i
 80098bc:	f383 8811 	msr	BASEPRI, r3
 80098c0:	f3bf 8f6f 	isb	sy
 80098c4:	f3bf 8f4f 	dsb	sy
 80098c8:	b662      	cpsie	i
 80098ca:	623b      	str	r3, [r7, #32]
}
 80098cc:	bf00      	nop
 80098ce:	e7fe      	b.n	80098ce <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d103      	bne.n	80098de <xQueueReceive+0x42>
 80098d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d101      	bne.n	80098e2 <xQueueReceive+0x46>
 80098de:	2301      	movs	r3, #1
 80098e0:	e000      	b.n	80098e4 <xQueueReceive+0x48>
 80098e2:	2300      	movs	r3, #0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d10c      	bne.n	8009902 <xQueueReceive+0x66>
	__asm volatile
 80098e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ec:	b672      	cpsid	i
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	b662      	cpsie	i
 80098fc:	61fb      	str	r3, [r7, #28]
}
 80098fe:	bf00      	nop
 8009900:	e7fe      	b.n	8009900 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009902:	f001 fb8d 	bl	800b020 <xTaskGetSchedulerState>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d102      	bne.n	8009912 <xQueueReceive+0x76>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d101      	bne.n	8009916 <xQueueReceive+0x7a>
 8009912:	2301      	movs	r3, #1
 8009914:	e000      	b.n	8009918 <xQueueReceive+0x7c>
 8009916:	2300      	movs	r3, #0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10c      	bne.n	8009936 <xQueueReceive+0x9a>
	__asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	b672      	cpsid	i
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	b662      	cpsie	i
 8009930:	61bb      	str	r3, [r7, #24]
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009936:	f002 f999 	bl	800bc6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800993a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	2b00      	cmp	r3, #0
 8009944:	d02f      	beq.n	80099a6 <xQueueReceive+0x10a>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009946:	68b9      	ldr	r1, [r7, #8]
 8009948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800994a:	f000 f927 	bl	8009b9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800994e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009950:	4618      	mov	r0, r3
 8009952:	f004 f937 	bl	800dbc4 <SEGGER_SYSVIEW_ShrinkId>
 8009956:	4604      	mov	r4, r0
 8009958:	2000      	movs	r0, #0
 800995a:	f004 f933 	bl	800dbc4 <SEGGER_SYSVIEW_ShrinkId>
 800995e:	4602      	mov	r2, r0
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2101      	movs	r1, #1
 8009964:	9100      	str	r1, [sp, #0]
 8009966:	4621      	mov	r1, r4
 8009968:	205c      	movs	r0, #92	; 0x5c
 800996a:	f003 fc89 	bl	800d280 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009970:	1e5a      	subs	r2, r3, #1
 8009972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009974:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00f      	beq.n	800999e <xQueueReceive+0x102>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800997e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009980:	3310      	adds	r3, #16
 8009982:	4618      	mov	r0, r3
 8009984:	f001 f946 	bl	800ac14 <xTaskRemoveFromEventList>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d007      	beq.n	800999e <xQueueReceive+0x102>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800998e:	4b4d      	ldr	r3, [pc, #308]	; (8009ac4 <xQueueReceive+0x228>)
 8009990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009994:	601a      	str	r2, [r3, #0]
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800999e:	f002 f999 	bl	800bcd4 <vPortExitCritical>
				return pdPASS;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e08a      	b.n	8009abc <xQueueReceive+0x220>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d113      	bne.n	80099d4 <xQueueReceive+0x138>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099ac:	f002 f992 	bl	800bcd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	4618      	mov	r0, r3
 80099b4:	f004 f906 	bl	800dbc4 <SEGGER_SYSVIEW_ShrinkId>
 80099b8:	4604      	mov	r4, r0
 80099ba:	2000      	movs	r0, #0
 80099bc:	f004 f902 	bl	800dbc4 <SEGGER_SYSVIEW_ShrinkId>
 80099c0:	4602      	mov	r2, r0
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2101      	movs	r1, #1
 80099c6:	9100      	str	r1, [sp, #0]
 80099c8:	4621      	mov	r1, r4
 80099ca:	205c      	movs	r0, #92	; 0x5c
 80099cc:	f003 fc58 	bl	800d280 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80099d0:	2300      	movs	r3, #0
 80099d2:	e073      	b.n	8009abc <xQueueReceive+0x220>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d106      	bne.n	80099e8 <xQueueReceive+0x14c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099da:	f107 0310 	add.w	r3, r7, #16
 80099de:	4618      	mov	r0, r3
 80099e0:	f001 f982 	bl	800ace8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099e4:	2301      	movs	r3, #1
 80099e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099e8:	f002 f974 	bl	800bcd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099ec:	f000 feae 	bl	800a74c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099f0:	f002 f93c 	bl	800bc6c <vPortEnterCritical>
 80099f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099fa:	b25b      	sxtb	r3, r3
 80099fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a00:	d103      	bne.n	8009a0a <xQueueReceive+0x16e>
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a10:	b25b      	sxtb	r3, r3
 8009a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a16:	d103      	bne.n	8009a20 <xQueueReceive+0x184>
 8009a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a20:	f002 f958 	bl	800bcd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a24:	1d3a      	adds	r2, r7, #4
 8009a26:	f107 0310 	add.w	r3, r7, #16
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f001 f971 	bl	800ad14 <xTaskCheckForTimeOut>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d124      	bne.n	8009a82 <xQueueReceive+0x1e6>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a3a:	f000 f927 	bl	8009c8c <prvIsQueueEmpty>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d018      	beq.n	8009a76 <xQueueReceive+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a46:	3324      	adds	r3, #36	; 0x24
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f001 f88b 	bl	800ab68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a54:	f000 f8c8 	bl	8009be8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a58:	f000 fe86 	bl	800a768 <xTaskResumeAll>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f47f af69 	bne.w	8009936 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009a64:	4b17      	ldr	r3, [pc, #92]	; (8009ac4 <xQueueReceive+0x228>)
 8009a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	e75f      	b.n	8009936 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a78:	f000 f8b6 	bl	8009be8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a7c:	f000 fe74 	bl	800a768 <xTaskResumeAll>
 8009a80:	e759      	b.n	8009936 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a84:	f000 f8b0 	bl	8009be8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a88:	f000 fe6e 	bl	800a768 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a8e:	f000 f8fd 	bl	8009c8c <prvIsQueueEmpty>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f43f af4e 	beq.w	8009936 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f004 f891 	bl	800dbc4 <SEGGER_SYSVIEW_ShrinkId>
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	f004 f88d 	bl	800dbc4 <SEGGER_SYSVIEW_ShrinkId>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2101      	movs	r1, #1
 8009ab0:	9100      	str	r1, [sp, #0]
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	205c      	movs	r0, #92	; 0x5c
 8009ab6:	f003 fbe3 	bl	800d280 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8009aba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3734      	adds	r7, #52	; 0x34
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd90      	pop	{r4, r7, pc}
 8009ac4:	e000ed04 	.word	0xe000ed04

08009ac8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009adc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10d      	bne.n	8009b02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d14d      	bne.n	8009b8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f001 fab2 	bl	800b05c <xTaskPriorityDisinherit>
 8009af8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	609a      	str	r2, [r3, #8]
 8009b00:	e043      	b.n	8009b8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d119      	bne.n	8009b3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6858      	ldr	r0, [r3, #4]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b10:	461a      	mov	r2, r3
 8009b12:	68b9      	ldr	r1, [r7, #8]
 8009b14:	f004 fb86 	bl	800e224 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b20:	441a      	add	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	685a      	ldr	r2, [r3, #4]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d32b      	bcc.n	8009b8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	605a      	str	r2, [r3, #4]
 8009b3a:	e026      	b.n	8009b8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	68d8      	ldr	r0, [r3, #12]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b44:	461a      	mov	r2, r3
 8009b46:	68b9      	ldr	r1, [r7, #8]
 8009b48:	f004 fb6c 	bl	800e224 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	68da      	ldr	r2, [r3, #12]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b54:	425b      	negs	r3, r3
 8009b56:	441a      	add	r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	68da      	ldr	r2, [r3, #12]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d207      	bcs.n	8009b78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	689a      	ldr	r2, [r3, #8]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b70:	425b      	negs	r3, r3
 8009b72:	441a      	add	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d105      	bne.n	8009b8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	3b01      	subs	r3, #1
 8009b88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	1c5a      	adds	r2, r3, #1
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b92:	697b      	ldr	r3, [r7, #20]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3718      	adds	r7, #24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d018      	beq.n	8009be0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68da      	ldr	r2, [r3, #12]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb6:	441a      	add	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	68da      	ldr	r2, [r3, #12]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d303      	bcc.n	8009bd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	68d9      	ldr	r1, [r3, #12]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd8:	461a      	mov	r2, r3
 8009bda:	6838      	ldr	r0, [r7, #0]
 8009bdc:	f004 fb22 	bl	800e224 <memcpy>
	}
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009bf0:	f002 f83c 	bl	800bc6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bfa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bfc:	e011      	b.n	8009c22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d012      	beq.n	8009c2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	3324      	adds	r3, #36	; 0x24
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f001 f802 	bl	800ac14 <xTaskRemoveFromEventList>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d001      	beq.n	8009c1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009c16:	f001 f8e3 	bl	800ade0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	dce9      	bgt.n	8009bfe <prvUnlockQueue+0x16>
 8009c2a:	e000      	b.n	8009c2e <prvUnlockQueue+0x46>
					break;
 8009c2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	22ff      	movs	r2, #255	; 0xff
 8009c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009c36:	f002 f84d 	bl	800bcd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009c3a:	f002 f817 	bl	800bc6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c46:	e011      	b.n	8009c6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d012      	beq.n	8009c76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	3310      	adds	r3, #16
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 ffdd 	bl	800ac14 <xTaskRemoveFromEventList>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d001      	beq.n	8009c64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c60:	f001 f8be 	bl	800ade0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c64:	7bbb      	ldrb	r3, [r7, #14]
 8009c66:	3b01      	subs	r3, #1
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	dce9      	bgt.n	8009c48 <prvUnlockQueue+0x60>
 8009c74:	e000      	b.n	8009c78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	22ff      	movs	r2, #255	; 0xff
 8009c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c80:	f002 f828 	bl	800bcd4 <vPortExitCritical>
}
 8009c84:	bf00      	nop
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c94:	f001 ffea 	bl	800bc6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d102      	bne.n	8009ca6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	60fb      	str	r3, [r7, #12]
 8009ca4:	e001      	b.n	8009caa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009caa:	f002 f813 	bl	800bcd4 <vPortExitCritical>

	return xReturn;
 8009cae:	68fb      	ldr	r3, [r7, #12]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009cc0:	f001 ffd4 	bl	800bc6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d102      	bne.n	8009cd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	60fb      	str	r3, [r7, #12]
 8009cd4:	e001      	b.n	8009cda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009cda:	f001 fffb 	bl	800bcd4 <vPortExitCritical>

	return xReturn;
 8009cde:	68fb      	ldr	r3, [r7, #12]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	60fb      	str	r3, [r7, #12]
 8009cf6:	e01e      	b.n	8009d36 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009cf8:	4a13      	ldr	r2, [pc, #76]	; (8009d48 <vQueueAddToRegistry+0x60>)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d115      	bne.n	8009d30 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009d04:	4910      	ldr	r1, [pc, #64]	; (8009d48 <vQueueAddToRegistry+0x60>)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	683a      	ldr	r2, [r7, #0]
 8009d0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009d0e:	4a0e      	ldr	r2, [pc, #56]	; (8009d48 <vQueueAddToRegistry+0x60>)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	00db      	lsls	r3, r3, #3
 8009d14:	4413      	add	r3, r2
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f003 ff51 	bl	800dbc4 <SEGGER_SYSVIEW_ShrinkId>
 8009d22:	4601      	mov	r1, r0
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	461a      	mov	r2, r3
 8009d28:	2071      	movs	r0, #113	; 0x71
 8009d2a:	f003 f9d9 	bl	800d0e0 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8009d2e:	e006      	b.n	8009d3e <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	3301      	adds	r3, #1
 8009d34:	60fb      	str	r3, [r7, #12]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2b07      	cmp	r3, #7
 8009d3a:	d9dd      	bls.n	8009cf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009d3c:	bf00      	nop
 8009d3e:	bf00      	nop
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	20000f48 	.word	0x20000f48

08009d4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d5c:	f001 ff86 	bl	800bc6c <vPortEnterCritical>
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d66:	b25b      	sxtb	r3, r3
 8009d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6c:	d103      	bne.n	8009d76 <vQueueWaitForMessageRestricted+0x2a>
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d7c:	b25b      	sxtb	r3, r3
 8009d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d82:	d103      	bne.n	8009d8c <vQueueWaitForMessageRestricted+0x40>
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d8c:	f001 ffa2 	bl	800bcd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d106      	bne.n	8009da6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	3324      	adds	r3, #36	; 0x24
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 ff07 	bl	800abb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009da6:	6978      	ldr	r0, [r7, #20]
 8009da8:	f7ff ff1e 	bl	8009be8 <prvUnlockQueue>
	}
 8009dac:	bf00      	nop
 8009dae:	3718      	adds	r7, #24
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b08e      	sub	sp, #56	; 0x38
 8009db8:	af04      	add	r7, sp, #16
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10c      	bne.n	8009de2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	b672      	cpsid	i
 8009dce:	f383 8811 	msr	BASEPRI, r3
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	b662      	cpsie	i
 8009ddc:	623b      	str	r3, [r7, #32]
}
 8009dde:	bf00      	nop
 8009de0:	e7fe      	b.n	8009de0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10c      	bne.n	8009e02 <xTaskCreateStatic+0x4e>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	b672      	cpsid	i
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	b662      	cpsie	i
 8009dfc:	61fb      	str	r3, [r7, #28]
}
 8009dfe:	bf00      	nop
 8009e00:	e7fe      	b.n	8009e00 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e02:	23a8      	movs	r3, #168	; 0xa8
 8009e04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	2ba8      	cmp	r3, #168	; 0xa8
 8009e0a:	d00c      	beq.n	8009e26 <xTaskCreateStatic+0x72>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e10:	b672      	cpsid	i
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	b662      	cpsie	i
 8009e20:	61bb      	str	r3, [r7, #24]
}
 8009e22:	bf00      	nop
 8009e24:	e7fe      	b.n	8009e24 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d01e      	beq.n	8009e6c <xTaskCreateStatic+0xb8>
 8009e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d01b      	beq.n	8009e6c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	2202      	movs	r2, #2
 8009e42:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e46:	2300      	movs	r3, #0
 8009e48:	9303      	str	r3, [sp, #12]
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	9302      	str	r3, [sp, #8]
 8009e4e:	f107 0314 	add.w	r3, r7, #20
 8009e52:	9301      	str	r3, [sp, #4]
 8009e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	68b9      	ldr	r1, [r7, #8]
 8009e5e:	68f8      	ldr	r0, [r7, #12]
 8009e60:	f000 f850 	bl	8009f04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e66:	f000 f8f5 	bl	800a054 <prvAddNewTaskToReadyList>
 8009e6a:	e001      	b.n	8009e70 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e70:	697b      	ldr	r3, [r7, #20]
	}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3728      	adds	r7, #40	; 0x28
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b08c      	sub	sp, #48	; 0x30
 8009e7e:	af04      	add	r7, sp, #16
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	60b9      	str	r1, [r7, #8]
 8009e84:	603b      	str	r3, [r7, #0]
 8009e86:	4613      	mov	r3, r2
 8009e88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e8a:	88fb      	ldrh	r3, [r7, #6]
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f002 f872 	bl	800bf78 <pvPortMalloc>
 8009e94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00e      	beq.n	8009eba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e9c:	20a8      	movs	r0, #168	; 0xa8
 8009e9e:	f002 f86b 	bl	800bf78 <pvPortMalloc>
 8009ea2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d003      	beq.n	8009eb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	631a      	str	r2, [r3, #48]	; 0x30
 8009eb0:	e005      	b.n	8009ebe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009eb2:	6978      	ldr	r0, [r7, #20]
 8009eb4:	f002 f92a 	bl	800c10c <vPortFree>
 8009eb8:	e001      	b.n	8009ebe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d017      	beq.n	8009ef4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ecc:	88fa      	ldrh	r2, [r7, #6]
 8009ece:	2300      	movs	r3, #0
 8009ed0:	9303      	str	r3, [sp, #12]
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	9302      	str	r3, [sp, #8]
 8009ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed8:	9301      	str	r3, [sp, #4]
 8009eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	68b9      	ldr	r1, [r7, #8]
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f000 f80e 	bl	8009f04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ee8:	69f8      	ldr	r0, [r7, #28]
 8009eea:	f000 f8b3 	bl	800a054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	61bb      	str	r3, [r7, #24]
 8009ef2:	e002      	b.n	8009efa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009efa:	69bb      	ldr	r3, [r7, #24]
	}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3720      	adds	r7, #32
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b088      	sub	sp, #32
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
 8009f10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	21a5      	movs	r1, #165	; 0xa5
 8009f1e:	f004 f8b0 	bl	800e082 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f26:	6879      	ldr	r1, [r7, #4]
 8009f28:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009f2c:	440b      	add	r3, r1
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	4413      	add	r3, r2
 8009f32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	f023 0307 	bic.w	r3, r3, #7
 8009f3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	f003 0307 	and.w	r3, r3, #7
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00c      	beq.n	8009f60 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4a:	b672      	cpsid	i
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	b662      	cpsie	i
 8009f5a:	617b      	str	r3, [r7, #20]
}
 8009f5c:	bf00      	nop
 8009f5e:	e7fe      	b.n	8009f5e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d01f      	beq.n	8009fa6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f66:	2300      	movs	r3, #0
 8009f68:	61fb      	str	r3, [r7, #28]
 8009f6a:	e012      	b.n	8009f92 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	4413      	add	r3, r2
 8009f72:	7819      	ldrb	r1, [r3, #0]
 8009f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	4413      	add	r3, r2
 8009f7a:	3334      	adds	r3, #52	; 0x34
 8009f7c:	460a      	mov	r2, r1
 8009f7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	4413      	add	r3, r2
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d006      	beq.n	8009f9a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	61fb      	str	r3, [r7, #28]
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	2b0f      	cmp	r3, #15
 8009f96:	d9e9      	bls.n	8009f6c <prvInitialiseNewTask+0x68>
 8009f98:	e000      	b.n	8009f9c <prvInitialiseNewTask+0x98>
			{
				break;
 8009f9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fa4:	e003      	b.n	8009fae <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb0:	2b37      	cmp	r3, #55	; 0x37
 8009fb2:	d901      	bls.n	8009fb8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009fb4:	2337      	movs	r3, #55	; 0x37
 8009fb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fc2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fcc:	3304      	adds	r3, #4
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7ff f8d8 	bl	8009184 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd6:	3318      	adds	r3, #24
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7ff f8d3 	bl	8009184 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fe2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ff2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a006:	3354      	adds	r3, #84	; 0x54
 800a008:	224c      	movs	r2, #76	; 0x4c
 800a00a:	2100      	movs	r1, #0
 800a00c:	4618      	mov	r0, r3
 800a00e:	f004 f838 	bl	800e082 <memset>
 800a012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a014:	4a0c      	ldr	r2, [pc, #48]	; (800a048 <prvInitialiseNewTask+0x144>)
 800a016:	659a      	str	r2, [r3, #88]	; 0x58
 800a018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01a:	4a0c      	ldr	r2, [pc, #48]	; (800a04c <prvInitialiseNewTask+0x148>)
 800a01c:	65da      	str	r2, [r3, #92]	; 0x5c
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	4a0b      	ldr	r2, [pc, #44]	; (800a050 <prvInitialiseNewTask+0x14c>)
 800a022:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	68f9      	ldr	r1, [r7, #12]
 800a028:	69b8      	ldr	r0, [r7, #24]
 800a02a:	f001 fd11 	bl	800ba50 <pxPortInitialiseStack>
 800a02e:	4602      	mov	r2, r0
 800a030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a032:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a036:	2b00      	cmp	r3, #0
 800a038:	d002      	beq.n	800a040 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a03e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a040:	bf00      	nop
 800a042:	3720      	adds	r7, #32
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	20007a2c 	.word	0x20007a2c
 800a04c:	20007a94 	.word	0x20007a94
 800a050:	20007afc 	.word	0x20007afc

0800a054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a054:	b5b0      	push	{r4, r5, r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af02      	add	r7, sp, #8
 800a05a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a05c:	f001 fe06 	bl	800bc6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a060:	4b3c      	ldr	r3, [pc, #240]	; (800a154 <prvAddNewTaskToReadyList+0x100>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	3301      	adds	r3, #1
 800a066:	4a3b      	ldr	r2, [pc, #236]	; (800a154 <prvAddNewTaskToReadyList+0x100>)
 800a068:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a06a:	4b3b      	ldr	r3, [pc, #236]	; (800a158 <prvAddNewTaskToReadyList+0x104>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d109      	bne.n	800a086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a072:	4a39      	ldr	r2, [pc, #228]	; (800a158 <prvAddNewTaskToReadyList+0x104>)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a078:	4b36      	ldr	r3, [pc, #216]	; (800a154 <prvAddNewTaskToReadyList+0x100>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d110      	bne.n	800a0a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a080:	f000 fed2 	bl	800ae28 <prvInitialiseTaskLists>
 800a084:	e00d      	b.n	800a0a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a086:	4b35      	ldr	r3, [pc, #212]	; (800a15c <prvAddNewTaskToReadyList+0x108>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d109      	bne.n	800a0a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a08e:	4b32      	ldr	r3, [pc, #200]	; (800a158 <prvAddNewTaskToReadyList+0x104>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a098:	429a      	cmp	r2, r3
 800a09a:	d802      	bhi.n	800a0a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a09c:	4a2e      	ldr	r2, [pc, #184]	; (800a158 <prvAddNewTaskToReadyList+0x104>)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a0a2:	4b2f      	ldr	r3, [pc, #188]	; (800a160 <prvAddNewTaskToReadyList+0x10c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	4a2d      	ldr	r2, [pc, #180]	; (800a160 <prvAddNewTaskToReadyList+0x10c>)
 800a0aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a0ac:	4b2c      	ldr	r3, [pc, #176]	; (800a160 <prvAddNewTaskToReadyList+0x10c>)
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d016      	beq.n	800a0e8 <prvAddNewTaskToReadyList+0x94>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f003 fc55 	bl	800d96c <SEGGER_SYSVIEW_OnTaskCreate>
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d2:	461d      	mov	r5, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	461c      	mov	r4, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0de:	1ae3      	subs	r3, r4, r3
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	462b      	mov	r3, r5
 800a0e4:	f002 f9f2 	bl	800c4cc <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f003 fcc6 	bl	800da7c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f4:	4b1b      	ldr	r3, [pc, #108]	; (800a164 <prvAddNewTaskToReadyList+0x110>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d903      	bls.n	800a104 <prvAddNewTaskToReadyList+0xb0>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a100:	4a18      	ldr	r2, [pc, #96]	; (800a164 <prvAddNewTaskToReadyList+0x110>)
 800a102:	6013      	str	r3, [r2, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a108:	4613      	mov	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4a15      	ldr	r2, [pc, #84]	; (800a168 <prvAddNewTaskToReadyList+0x114>)
 800a112:	441a      	add	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	3304      	adds	r3, #4
 800a118:	4619      	mov	r1, r3
 800a11a:	4610      	mov	r0, r2
 800a11c:	f7ff f83f 	bl	800919e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a120:	f001 fdd8 	bl	800bcd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a124:	4b0d      	ldr	r3, [pc, #52]	; (800a15c <prvAddNewTaskToReadyList+0x108>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00e      	beq.n	800a14a <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a12c:	4b0a      	ldr	r3, [pc, #40]	; (800a158 <prvAddNewTaskToReadyList+0x104>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a136:	429a      	cmp	r2, r3
 800a138:	d207      	bcs.n	800a14a <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a13a:	4b0c      	ldr	r3, [pc, #48]	; (800a16c <prvAddNewTaskToReadyList+0x118>)
 800a13c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a14a:	bf00      	nop
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bdb0      	pop	{r4, r5, r7, pc}
 800a152:	bf00      	nop
 800a154:	2000145c 	.word	0x2000145c
 800a158:	20000f88 	.word	0x20000f88
 800a15c:	20001468 	.word	0x20001468
 800a160:	20001478 	.word	0x20001478
 800a164:	20001464 	.word	0x20001464
 800a168:	20000f8c 	.word	0x20000f8c
 800a16c:	e000ed04 	.word	0xe000ed04

0800a170 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a178:	f001 fd78 	bl	800bc6c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d102      	bne.n	800a188 <vTaskDelete+0x18>
 800a182:	4b34      	ldr	r3, [pc, #208]	; (800a254 <vTaskDelete+0xe4>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	e000      	b.n	800a18a <vTaskDelete+0x1a>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	3304      	adds	r3, #4
 800a190:	4618      	mov	r0, r3
 800a192:	f7ff f861 	bl	8009258 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d004      	beq.n	800a1a8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	3318      	adds	r3, #24
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7ff f858 	bl	8009258 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800a1a8:	4b2b      	ldr	r3, [pc, #172]	; (800a258 <vTaskDelete+0xe8>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	4a2a      	ldr	r2, [pc, #168]	; (800a258 <vTaskDelete+0xe8>)
 800a1b0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800a1b2:	4b28      	ldr	r3, [pc, #160]	; (800a254 <vTaskDelete+0xe4>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d10b      	bne.n	800a1d4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	3304      	adds	r3, #4
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	4826      	ldr	r0, [pc, #152]	; (800a25c <vTaskDelete+0xec>)
 800a1c4:	f7fe ffeb 	bl	800919e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800a1c8:	4b25      	ldr	r3, [pc, #148]	; (800a260 <vTaskDelete+0xf0>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	4a24      	ldr	r2, [pc, #144]	; (800a260 <vTaskDelete+0xf0>)
 800a1d0:	6013      	str	r3, [r2, #0]
 800a1d2:	e009      	b.n	800a1e8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800a1d4:	4b23      	ldr	r3, [pc, #140]	; (800a264 <vTaskDelete+0xf4>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	4a22      	ldr	r2, [pc, #136]	; (800a264 <vTaskDelete+0xf4>)
 800a1dc:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f000 fec8 	bl	800af74 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800a1e4:	f000 fefc 	bl	800afe0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f003 fcea 	bl	800dbc4 <SEGGER_SYSVIEW_ShrinkId>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	2022      	movs	r0, #34	; 0x22
 800a1f6:	f002 ff37 	bl	800d068 <SEGGER_SYSVIEW_RecordU32>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f002 f9cd 	bl	800c59c <SYSVIEW_DeleteTask>
		}
		taskEXIT_CRITICAL();
 800a202:	f001 fd67 	bl	800bcd4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800a206:	4b18      	ldr	r3, [pc, #96]	; (800a268 <vTaskDelete+0xf8>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d01d      	beq.n	800a24a <vTaskDelete+0xda>
		{
			if( pxTCB == pxCurrentTCB )
 800a20e:	4b11      	ldr	r3, [pc, #68]	; (800a254 <vTaskDelete+0xe4>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	429a      	cmp	r2, r3
 800a216:	d118      	bne.n	800a24a <vTaskDelete+0xda>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800a218:	4b14      	ldr	r3, [pc, #80]	; (800a26c <vTaskDelete+0xfc>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00c      	beq.n	800a23a <vTaskDelete+0xca>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a224:	b672      	cpsid	i
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	b662      	cpsie	i
 800a234:	60bb      	str	r3, [r7, #8]
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <vTaskDelete+0xc8>
				portYIELD_WITHIN_API();
 800a23a:	4b0d      	ldr	r3, [pc, #52]	; (800a270 <vTaskDelete+0x100>)
 800a23c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a240:	601a      	str	r2, [r3, #0]
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a24a:	bf00      	nop
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	20000f88 	.word	0x20000f88
 800a258:	20001478 	.word	0x20001478
 800a25c:	20001430 	.word	0x20001430
 800a260:	20001444 	.word	0x20001444
 800a264:	2000145c 	.word	0x2000145c
 800a268:	20001468 	.word	0x20001468
 800a26c:	20001484 	.word	0x20001484
 800a270:	e000ed04 	.word	0xe000ed04

0800a274 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a27c:	2300      	movs	r3, #0
 800a27e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d01d      	beq.n	800a2c2 <vTaskDelay+0x4e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a286:	4b16      	ldr	r3, [pc, #88]	; (800a2e0 <vTaskDelay+0x6c>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00c      	beq.n	800a2a8 <vTaskDelay+0x34>
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	b672      	cpsid	i
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	b662      	cpsie	i
 800a2a2:	60bb      	str	r3, [r7, #8]
}
 800a2a4:	bf00      	nop
 800a2a6:	e7fe      	b.n	800a2a6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a2a8:	f000 fa50 	bl	800a74c <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800a2ac:	6879      	ldr	r1, [r7, #4]
 800a2ae:	2023      	movs	r0, #35	; 0x23
 800a2b0:	f002 feda 	bl	800d068 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 ff46 	bl	800b148 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a2bc:	f000 fa54 	bl	800a768 <xTaskResumeAll>
 800a2c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d107      	bne.n	800a2d8 <vTaskDelay+0x64>
		{
			portYIELD_WITHIN_API();
 800a2c8:	4b06      	ldr	r3, [pc, #24]	; (800a2e4 <vTaskDelay+0x70>)
 800a2ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ce:	601a      	str	r2, [r3, #0]
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a2d8:	bf00      	nop
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	20001484 	.word	0x20001484
 800a2e4:	e000ed04 	.word	0xe000ed04

0800a2e8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a2f0:	f001 fcbc 	bl	800bc6c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d102      	bne.n	800a300 <vTaskSuspend+0x18>
 800a2fa:	4b38      	ldr	r3, [pc, #224]	; (800a3dc <vTaskSuspend+0xf4>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	e000      	b.n	800a302 <vTaskSuspend+0x1a>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	4618      	mov	r0, r3
 800a308:	f003 fc5c 	bl	800dbc4 <SEGGER_SYSVIEW_ShrinkId>
 800a30c:	4603      	mov	r3, r0
 800a30e:	4619      	mov	r1, r3
 800a310:	2029      	movs	r0, #41	; 0x29
 800a312:	f002 fea9 	bl	800d068 <SEGGER_SYSVIEW_RecordU32>

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	3304      	adds	r3, #4
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7fe ff9c 	bl	8009258 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a324:	2b00      	cmp	r3, #0
 800a326:	d004      	beq.n	800a332 <vTaskSuspend+0x4a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	3318      	adds	r3, #24
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7fe ff93 	bl	8009258 <uxListRemove>
			}
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	211b      	movs	r1, #27
 800a336:	4618      	mov	r0, r3
 800a338:	f003 fbe4 	bl	800db04 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	3304      	adds	r3, #4
 800a340:	4619      	mov	r1, r3
 800a342:	4827      	ldr	r0, [pc, #156]	; (800a3e0 <vTaskSuspend+0xf8>)
 800a344:	f7fe ff2b 	bl	800919e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	2b01      	cmp	r3, #1
 800a352:	d103      	bne.n	800a35c <vTaskSuspend+0x74>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a35c:	f001 fcba 	bl	800bcd4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a360:	4b20      	ldr	r3, [pc, #128]	; (800a3e4 <vTaskSuspend+0xfc>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d005      	beq.n	800a374 <vTaskSuspend+0x8c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a368:	f001 fc80 	bl	800bc6c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a36c:	f000 fe38 	bl	800afe0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a370:	f001 fcb0 	bl	800bcd4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a374:	4b19      	ldr	r3, [pc, #100]	; (800a3dc <vTaskSuspend+0xf4>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d129      	bne.n	800a3d2 <vTaskSuspend+0xea>
		{
			if( xSchedulerRunning != pdFALSE )
 800a37e:	4b19      	ldr	r3, [pc, #100]	; (800a3e4 <vTaskSuspend+0xfc>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d019      	beq.n	800a3ba <vTaskSuspend+0xd2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a386:	4b18      	ldr	r3, [pc, #96]	; (800a3e8 <vTaskSuspend+0x100>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00c      	beq.n	800a3a8 <vTaskSuspend+0xc0>
	__asm volatile
 800a38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a392:	b672      	cpsid	i
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	b662      	cpsie	i
 800a3a2:	60bb      	str	r3, [r7, #8]
}
 800a3a4:	bf00      	nop
 800a3a6:	e7fe      	b.n	800a3a6 <vTaskSuspend+0xbe>
				portYIELD_WITHIN_API();
 800a3a8:	4b10      	ldr	r3, [pc, #64]	; (800a3ec <vTaskSuspend+0x104>)
 800a3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a3b8:	e00b      	b.n	800a3d2 <vTaskSuspend+0xea>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a3ba:	4b09      	ldr	r3, [pc, #36]	; (800a3e0 <vTaskSuspend+0xf8>)
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	4b0c      	ldr	r3, [pc, #48]	; (800a3f0 <vTaskSuspend+0x108>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d103      	bne.n	800a3ce <vTaskSuspend+0xe6>
					pxCurrentTCB = NULL;
 800a3c6:	4b05      	ldr	r3, [pc, #20]	; (800a3dc <vTaskSuspend+0xf4>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	601a      	str	r2, [r3, #0]
	}
 800a3cc:	e001      	b.n	800a3d2 <vTaskSuspend+0xea>
					vTaskSwitchContext();
 800a3ce:	f000 fb51 	bl	800aa74 <vTaskSwitchContext>
	}
 800a3d2:	bf00      	nop
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	20000f88 	.word	0x20000f88
 800a3e0:	20001448 	.word	0x20001448
 800a3e4:	20001468 	.word	0x20001468
 800a3e8:	20001484 	.word	0x20001484
 800a3ec:	e000ed04 	.word	0xe000ed04
 800a3f0:	2000145c 	.word	0x2000145c

0800a3f4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b087      	sub	sp, #28
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d10c      	bne.n	800a424 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 800a40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40e:	b672      	cpsid	i
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	b662      	cpsie	i
 800a41e:	60fb      	str	r3, [r7, #12]
}
 800a420:	bf00      	nop
 800a422:	e7fe      	b.n	800a422 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	695b      	ldr	r3, [r3, #20]
 800a428:	4a0a      	ldr	r2, [pc, #40]	; (800a454 <prvTaskIsTaskSuspended+0x60>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d10a      	bne.n	800a444 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a432:	4a09      	ldr	r2, [pc, #36]	; (800a458 <prvTaskIsTaskSuspended+0x64>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d005      	beq.n	800a444 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d101      	bne.n	800a444 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 800a440:	2301      	movs	r3, #1
 800a442:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a444:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a446:	4618      	mov	r0, r3
 800a448:	371c      	adds	r7, #28
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	20001448 	.word	0x20001448
 800a458:	2000141c 	.word	0x2000141c

0800a45c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10c      	bne.n	800a488 <vTaskResume+0x2c>
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a472:	b672      	cpsid	i
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	b662      	cpsie	i
 800a482:	60bb      	str	r3, [r7, #8]
}
 800a484:	bf00      	nop
 800a486:	e7fe      	b.n	800a486 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a488:	4b27      	ldr	r3, [pc, #156]	; (800a528 <vTaskResume+0xcc>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d045      	beq.n	800a51e <vTaskResume+0xc2>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d042      	beq.n	800a51e <vTaskResume+0xc2>
		{
			taskENTER_CRITICAL();
 800a498:	f001 fbe8 	bl	800bc6c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f7ff ffa9 	bl	800a3f4 <prvTaskIsTaskSuspended>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d038      	beq.n	800a51a <vTaskResume+0xbe>
				{
					traceTASK_RESUME( pxTCB );
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f003 fb8a 	bl	800dbc4 <SEGGER_SYSVIEW_ShrinkId>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	202a      	movs	r0, #42	; 0x2a
 800a4b6:	f002 fdd7 	bl	800d068 <SEGGER_SYSVIEW_RecordU32>

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	3304      	adds	r3, #4
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fe feca 	bl	8009258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f003 fad8 	bl	800da7c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d0:	4b16      	ldr	r3, [pc, #88]	; (800a52c <vTaskResume+0xd0>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d903      	bls.n	800a4e0 <vTaskResume+0x84>
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4dc:	4a13      	ldr	r2, [pc, #76]	; (800a52c <vTaskResume+0xd0>)
 800a4de:	6013      	str	r3, [r2, #0]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	4a10      	ldr	r2, [pc, #64]	; (800a530 <vTaskResume+0xd4>)
 800a4ee:	441a      	add	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	3304      	adds	r3, #4
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	4610      	mov	r0, r2
 800a4f8:	f7fe fe51 	bl	800919e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a500:	4b09      	ldr	r3, [pc, #36]	; (800a528 <vTaskResume+0xcc>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a506:	429a      	cmp	r2, r3
 800a508:	d307      	bcc.n	800a51a <vTaskResume+0xbe>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a50a:	4b0a      	ldr	r3, [pc, #40]	; (800a534 <vTaskResume+0xd8>)
 800a50c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a510:	601a      	str	r2, [r3, #0]
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a51a:	f001 fbdb 	bl	800bcd4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a51e:	bf00      	nop
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	20000f88 	.word	0x20000f88
 800a52c:	20001464 	.word	0x20001464
 800a530:	20000f8c 	.word	0x20000f8c
 800a534:	e000ed04 	.word	0xe000ed04

0800a538 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08a      	sub	sp, #40	; 0x28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800a540:	2300      	movs	r3, #0
 800a542:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10c      	bne.n	800a568 <xTaskResumeFromISR+0x30>
	__asm volatile
 800a54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a552:	b672      	cpsid	i
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	b662      	cpsie	i
 800a562:	61bb      	str	r3, [r7, #24]
}
 800a564:	bf00      	nop
 800a566:	e7fe      	b.n	800a566 <xTaskResumeFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a568:	f001 fc68 	bl	800be3c <vPortValidateInterruptPriority>
	__asm volatile
 800a56c:	f3ef 8211 	mrs	r2, BASEPRI
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	b672      	cpsid	i
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	b662      	cpsie	i
 800a584:	617a      	str	r2, [r7, #20]
 800a586:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a588:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a58a:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a58c:	6a38      	ldr	r0, [r7, #32]
 800a58e:	f7ff ff31 	bl	800a3f4 <prvTaskIsTaskSuspended>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d03d      	beq.n	800a614 <xTaskResumeFromISR+0xdc>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );
 800a598:	6a3b      	ldr	r3, [r7, #32]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f003 fb12 	bl	800dbc4 <SEGGER_SYSVIEW_ShrinkId>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	202b      	movs	r0, #43	; 0x2b
 800a5a6:	f002 fd5f 	bl	800d068 <SEGGER_SYSVIEW_RecordU32>

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5aa:	4b20      	ldr	r3, [pc, #128]	; (800a62c <xTaskResumeFromISR+0xf4>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d12a      	bne.n	800a608 <xTaskResumeFromISR+0xd0>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5b2:	6a3b      	ldr	r3, [r7, #32]
 800a5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5b6:	4b1e      	ldr	r3, [pc, #120]	; (800a630 <xTaskResumeFromISR+0xf8>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d301      	bcc.n	800a5c4 <xTaskResumeFromISR+0x8c>
					{
						xYieldRequired = pdTRUE;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5c4:	6a3b      	ldr	r3, [r7, #32]
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fe fe45 	bl	8009258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a5ce:	6a3b      	ldr	r3, [r7, #32]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f003 fa53 	bl	800da7c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a5d6:	6a3b      	ldr	r3, [r7, #32]
 800a5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5da:	4b16      	ldr	r3, [pc, #88]	; (800a634 <xTaskResumeFromISR+0xfc>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d903      	bls.n	800a5ea <xTaskResumeFromISR+0xb2>
 800a5e2:	6a3b      	ldr	r3, [r7, #32]
 800a5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e6:	4a13      	ldr	r2, [pc, #76]	; (800a634 <xTaskResumeFromISR+0xfc>)
 800a5e8:	6013      	str	r3, [r2, #0]
 800a5ea:	6a3b      	ldr	r3, [r7, #32]
 800a5ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	4413      	add	r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	4a10      	ldr	r2, [pc, #64]	; (800a638 <xTaskResumeFromISR+0x100>)
 800a5f8:	441a      	add	r2, r3
 800a5fa:	6a3b      	ldr	r3, [r7, #32]
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	4619      	mov	r1, r3
 800a600:	4610      	mov	r0, r2
 800a602:	f7fe fdcc 	bl	800919e <vListInsertEnd>
 800a606:	e005      	b.n	800a614 <xTaskResumeFromISR+0xdc>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a608:	6a3b      	ldr	r3, [r7, #32]
 800a60a:	3318      	adds	r3, #24
 800a60c:	4619      	mov	r1, r3
 800a60e:	480b      	ldr	r0, [pc, #44]	; (800a63c <xTaskResumeFromISR+0x104>)
 800a610:	f7fe fdc5 	bl	800919e <vListInsertEnd>
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f383 8811 	msr	BASEPRI, r3
}
 800a61e:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800a620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a622:	4618      	mov	r0, r3
 800a624:	3728      	adds	r7, #40	; 0x28
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	20001484 	.word	0x20001484
 800a630:	20000f88 	.word	0x20000f88
 800a634:	20001464 	.word	0x20001464
 800a638:	20000f8c 	.word	0x20000f8c
 800a63c:	2000141c 	.word	0x2000141c

0800a640 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b08a      	sub	sp, #40	; 0x28
 800a644:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a646:	2300      	movs	r3, #0
 800a648:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a64e:	463a      	mov	r2, r7
 800a650:	1d39      	adds	r1, r7, #4
 800a652:	f107 0308 	add.w	r3, r7, #8
 800a656:	4618      	mov	r0, r3
 800a658:	f7fe fd40 	bl	80090dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	9202      	str	r2, [sp, #8]
 800a664:	9301      	str	r3, [sp, #4]
 800a666:	2300      	movs	r3, #0
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	2300      	movs	r3, #0
 800a66c:	460a      	mov	r2, r1
 800a66e:	492f      	ldr	r1, [pc, #188]	; (800a72c <vTaskStartScheduler+0xec>)
 800a670:	482f      	ldr	r0, [pc, #188]	; (800a730 <vTaskStartScheduler+0xf0>)
 800a672:	f7ff fb9f 	bl	8009db4 <xTaskCreateStatic>
 800a676:	4603      	mov	r3, r0
 800a678:	4a2e      	ldr	r2, [pc, #184]	; (800a734 <vTaskStartScheduler+0xf4>)
 800a67a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a67c:	4b2d      	ldr	r3, [pc, #180]	; (800a734 <vTaskStartScheduler+0xf4>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d002      	beq.n	800a68a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a684:	2301      	movs	r3, #1
 800a686:	617b      	str	r3, [r7, #20]
 800a688:	e001      	b.n	800a68e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a68a:	2300      	movs	r3, #0
 800a68c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d102      	bne.n	800a69a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a694:	f000 fdbe 	bl	800b214 <xTimerCreateTimerTask>
 800a698:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d130      	bne.n	800a702 <vTaskStartScheduler+0xc2>
	__asm volatile
 800a6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a4:	b672      	cpsid	i
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	b662      	cpsie	i
 800a6b4:	613b      	str	r3, [r7, #16]
}
 800a6b6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a6b8:	4b1f      	ldr	r3, [pc, #124]	; (800a738 <vTaskStartScheduler+0xf8>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	3354      	adds	r3, #84	; 0x54
 800a6be:	4a1f      	ldr	r2, [pc, #124]	; (800a73c <vTaskStartScheduler+0xfc>)
 800a6c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a6c2:	4b1f      	ldr	r3, [pc, #124]	; (800a740 <vTaskStartScheduler+0x100>)
 800a6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a6ca:	4b1e      	ldr	r3, [pc, #120]	; (800a744 <vTaskStartScheduler+0x104>)
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a6d0:	4b1d      	ldr	r3, [pc, #116]	; (800a748 <vTaskStartScheduler+0x108>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800a6d6:	4b18      	ldr	r3, [pc, #96]	; (800a738 <vTaskStartScheduler+0xf8>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3334      	adds	r3, #52	; 0x34
 800a6dc:	2205      	movs	r2, #5
 800a6de:	4913      	ldr	r1, [pc, #76]	; (800a72c <vTaskStartScheduler+0xec>)
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f003 fcbe 	bl	800e062 <memcmp>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d005      	beq.n	800a6f8 <vTaskStartScheduler+0xb8>
 800a6ec:	4b12      	ldr	r3, [pc, #72]	; (800a738 <vTaskStartScheduler+0xf8>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f003 f97f 	bl	800d9f4 <SEGGER_SYSVIEW_OnTaskStartExec>
 800a6f6:	e001      	b.n	800a6fc <vTaskStartScheduler+0xbc>
 800a6f8:	f003 f91c 	bl	800d934 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a6fc:	f001 fa38 	bl	800bb70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a700:	e010      	b.n	800a724 <vTaskStartScheduler+0xe4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a708:	d10c      	bne.n	800a724 <vTaskStartScheduler+0xe4>
	__asm volatile
 800a70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70e:	b672      	cpsid	i
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	b662      	cpsie	i
 800a71e:	60fb      	str	r3, [r7, #12]
}
 800a720:	bf00      	nop
 800a722:	e7fe      	b.n	800a722 <vTaskStartScheduler+0xe2>
}
 800a724:	bf00      	nop
 800a726:	3718      	adds	r7, #24
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	0800f008 	.word	0x0800f008
 800a730:	0800adf9 	.word	0x0800adf9
 800a734:	20001480 	.word	0x20001480
 800a738:	20000f88 	.word	0x20000f88
 800a73c:	200000c0 	.word	0x200000c0
 800a740:	2000147c 	.word	0x2000147c
 800a744:	20001468 	.word	0x20001468
 800a748:	20001460 	.word	0x20001460

0800a74c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a74c:	b480      	push	{r7}
 800a74e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a750:	4b04      	ldr	r3, [pc, #16]	; (800a764 <vTaskSuspendAll+0x18>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	3301      	adds	r3, #1
 800a756:	4a03      	ldr	r2, [pc, #12]	; (800a764 <vTaskSuspendAll+0x18>)
 800a758:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a75a:	bf00      	nop
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr
 800a764:	20001484 	.word	0x20001484

0800a768 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a76e:	2300      	movs	r3, #0
 800a770:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a772:	2300      	movs	r3, #0
 800a774:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a776:	4b45      	ldr	r3, [pc, #276]	; (800a88c <xTaskResumeAll+0x124>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10c      	bne.n	800a798 <xTaskResumeAll+0x30>
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a782:	b672      	cpsid	i
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	b662      	cpsie	i
 800a792:	603b      	str	r3, [r7, #0]
}
 800a794:	bf00      	nop
 800a796:	e7fe      	b.n	800a796 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a798:	f001 fa68 	bl	800bc6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a79c:	4b3b      	ldr	r3, [pc, #236]	; (800a88c <xTaskResumeAll+0x124>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	4a3a      	ldr	r2, [pc, #232]	; (800a88c <xTaskResumeAll+0x124>)
 800a7a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7a6:	4b39      	ldr	r3, [pc, #228]	; (800a88c <xTaskResumeAll+0x124>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d166      	bne.n	800a87c <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a7ae:	4b38      	ldr	r3, [pc, #224]	; (800a890 <xTaskResumeAll+0x128>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d062      	beq.n	800a87c <xTaskResumeAll+0x114>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7b6:	e033      	b.n	800a820 <xTaskResumeAll+0xb8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7b8:	4b36      	ldr	r3, [pc, #216]	; (800a894 <xTaskResumeAll+0x12c>)
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	3318      	adds	r3, #24
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fe fd47 	bl	8009258 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fe fd42 	bl	8009258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f003 f950 	bl	800da7c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e0:	4b2d      	ldr	r3, [pc, #180]	; (800a898 <xTaskResumeAll+0x130>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d903      	bls.n	800a7f0 <xTaskResumeAll+0x88>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ec:	4a2a      	ldr	r2, [pc, #168]	; (800a898 <xTaskResumeAll+0x130>)
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4413      	add	r3, r2
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	4a27      	ldr	r2, [pc, #156]	; (800a89c <xTaskResumeAll+0x134>)
 800a7fe:	441a      	add	r2, r3
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	3304      	adds	r3, #4
 800a804:	4619      	mov	r1, r3
 800a806:	4610      	mov	r0, r2
 800a808:	f7fe fcc9 	bl	800919e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a810:	4b23      	ldr	r3, [pc, #140]	; (800a8a0 <xTaskResumeAll+0x138>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a816:	429a      	cmp	r2, r3
 800a818:	d302      	bcc.n	800a820 <xTaskResumeAll+0xb8>
					{
						xYieldPending = pdTRUE;
 800a81a:	4b22      	ldr	r3, [pc, #136]	; (800a8a4 <xTaskResumeAll+0x13c>)
 800a81c:	2201      	movs	r2, #1
 800a81e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a820:	4b1c      	ldr	r3, [pc, #112]	; (800a894 <xTaskResumeAll+0x12c>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1c7      	bne.n	800a7b8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <xTaskResumeAll+0xca>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a82e:	f000 fbd7 	bl	800afe0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a832:	4b1d      	ldr	r3, [pc, #116]	; (800a8a8 <xTaskResumeAll+0x140>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d010      	beq.n	800a860 <xTaskResumeAll+0xf8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a83e:	f000 f859 	bl	800a8f4 <xTaskIncrementTick>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d002      	beq.n	800a84e <xTaskResumeAll+0xe6>
							{
								xYieldPending = pdTRUE;
 800a848:	4b16      	ldr	r3, [pc, #88]	; (800a8a4 <xTaskResumeAll+0x13c>)
 800a84a:	2201      	movs	r2, #1
 800a84c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	3b01      	subs	r3, #1
 800a852:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1f1      	bne.n	800a83e <xTaskResumeAll+0xd6>

						uxPendedTicks = 0;
 800a85a:	4b13      	ldr	r3, [pc, #76]	; (800a8a8 <xTaskResumeAll+0x140>)
 800a85c:	2200      	movs	r2, #0
 800a85e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a860:	4b10      	ldr	r3, [pc, #64]	; (800a8a4 <xTaskResumeAll+0x13c>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d009      	beq.n	800a87c <xTaskResumeAll+0x114>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a868:	2301      	movs	r3, #1
 800a86a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a86c:	4b0f      	ldr	r3, [pc, #60]	; (800a8ac <xTaskResumeAll+0x144>)
 800a86e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a872:	601a      	str	r2, [r3, #0]
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a87c:	f001 fa2a 	bl	800bcd4 <vPortExitCritical>

	return xAlreadyYielded;
 800a880:	68bb      	ldr	r3, [r7, #8]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	20001484 	.word	0x20001484
 800a890:	2000145c 	.word	0x2000145c
 800a894:	2000141c 	.word	0x2000141c
 800a898:	20001464 	.word	0x20001464
 800a89c:	20000f8c 	.word	0x20000f8c
 800a8a0:	20000f88 	.word	0x20000f88
 800a8a4:	20001470 	.word	0x20001470
 800a8a8:	2000146c 	.word	0x2000146c
 800a8ac:	e000ed04 	.word	0xe000ed04

0800a8b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a8b6:	4b05      	ldr	r3, [pc, #20]	; (800a8cc <xTaskGetTickCount+0x1c>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a8bc:	687b      	ldr	r3, [r7, #4]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	370c      	adds	r7, #12
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	20001460 	.word	0x20001460

0800a8d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8d6:	f001 fab1 	bl	800be3c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a8da:	2300      	movs	r3, #0
 800a8dc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a8de:	4b04      	ldr	r3, [pc, #16]	; (800a8f0 <xTaskGetTickCountFromISR+0x20>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8e4:	683b      	ldr	r3, [r7, #0]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20001460 	.word	0x20001460

0800a8f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b086      	sub	sp, #24
 800a8f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8fe:	4b52      	ldr	r3, [pc, #328]	; (800aa48 <xTaskIncrementTick+0x154>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	f040 808f 	bne.w	800aa26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a908:	4b50      	ldr	r3, [pc, #320]	; (800aa4c <xTaskIncrementTick+0x158>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	3301      	adds	r3, #1
 800a90e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a910:	4a4e      	ldr	r2, [pc, #312]	; (800aa4c <xTaskIncrementTick+0x158>)
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d122      	bne.n	800a962 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a91c:	4b4c      	ldr	r3, [pc, #304]	; (800aa50 <xTaskIncrementTick+0x15c>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00c      	beq.n	800a940 <xTaskIncrementTick+0x4c>
	__asm volatile
 800a926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92a:	b672      	cpsid	i
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	b662      	cpsie	i
 800a93a:	603b      	str	r3, [r7, #0]
}
 800a93c:	bf00      	nop
 800a93e:	e7fe      	b.n	800a93e <xTaskIncrementTick+0x4a>
 800a940:	4b43      	ldr	r3, [pc, #268]	; (800aa50 <xTaskIncrementTick+0x15c>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	60fb      	str	r3, [r7, #12]
 800a946:	4b43      	ldr	r3, [pc, #268]	; (800aa54 <xTaskIncrementTick+0x160>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a41      	ldr	r2, [pc, #260]	; (800aa50 <xTaskIncrementTick+0x15c>)
 800a94c:	6013      	str	r3, [r2, #0]
 800a94e:	4a41      	ldr	r2, [pc, #260]	; (800aa54 <xTaskIncrementTick+0x160>)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6013      	str	r3, [r2, #0]
 800a954:	4b40      	ldr	r3, [pc, #256]	; (800aa58 <xTaskIncrementTick+0x164>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3301      	adds	r3, #1
 800a95a:	4a3f      	ldr	r2, [pc, #252]	; (800aa58 <xTaskIncrementTick+0x164>)
 800a95c:	6013      	str	r3, [r2, #0]
 800a95e:	f000 fb3f 	bl	800afe0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a962:	4b3e      	ldr	r3, [pc, #248]	; (800aa5c <xTaskIncrementTick+0x168>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	693a      	ldr	r2, [r7, #16]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d34d      	bcc.n	800aa08 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a96c:	4b38      	ldr	r3, [pc, #224]	; (800aa50 <xTaskIncrementTick+0x15c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d104      	bne.n	800a980 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a976:	4b39      	ldr	r3, [pc, #228]	; (800aa5c <xTaskIncrementTick+0x168>)
 800a978:	f04f 32ff 	mov.w	r2, #4294967295
 800a97c:	601a      	str	r2, [r3, #0]
					break;
 800a97e:	e043      	b.n	800aa08 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a980:	4b33      	ldr	r3, [pc, #204]	; (800aa50 <xTaskIncrementTick+0x15c>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a990:	693a      	ldr	r2, [r7, #16]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	429a      	cmp	r2, r3
 800a996:	d203      	bcs.n	800a9a0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a998:	4a30      	ldr	r2, [pc, #192]	; (800aa5c <xTaskIncrementTick+0x168>)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a99e:	e033      	b.n	800aa08 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7fe fc57 	bl	8009258 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d004      	beq.n	800a9bc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	3318      	adds	r3, #24
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fe fc4e 	bl	8009258 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f003 f85c 	bl	800da7c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c8:	4b25      	ldr	r3, [pc, #148]	; (800aa60 <xTaskIncrementTick+0x16c>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d903      	bls.n	800a9d8 <xTaskIncrementTick+0xe4>
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d4:	4a22      	ldr	r2, [pc, #136]	; (800aa60 <xTaskIncrementTick+0x16c>)
 800a9d6:	6013      	str	r3, [r2, #0]
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9dc:	4613      	mov	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4413      	add	r3, r2
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	4a1f      	ldr	r2, [pc, #124]	; (800aa64 <xTaskIncrementTick+0x170>)
 800a9e6:	441a      	add	r2, r3
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	f7fe fbd5 	bl	800919e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f8:	4b1b      	ldr	r3, [pc, #108]	; (800aa68 <xTaskIncrementTick+0x174>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d3b4      	bcc.n	800a96c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800aa02:	2301      	movs	r3, #1
 800aa04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa06:	e7b1      	b.n	800a96c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa08:	4b17      	ldr	r3, [pc, #92]	; (800aa68 <xTaskIncrementTick+0x174>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0e:	4915      	ldr	r1, [pc, #84]	; (800aa64 <xTaskIncrementTick+0x170>)
 800aa10:	4613      	mov	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4413      	add	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	440b      	add	r3, r1
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d907      	bls.n	800aa30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800aa20:	2301      	movs	r3, #1
 800aa22:	617b      	str	r3, [r7, #20]
 800aa24:	e004      	b.n	800aa30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800aa26:	4b11      	ldr	r3, [pc, #68]	; (800aa6c <xTaskIncrementTick+0x178>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	4a0f      	ldr	r2, [pc, #60]	; (800aa6c <xTaskIncrementTick+0x178>)
 800aa2e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800aa30:	4b0f      	ldr	r3, [pc, #60]	; (800aa70 <xTaskIncrementTick+0x17c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d001      	beq.n	800aa3c <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aa3c:	697b      	ldr	r3, [r7, #20]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3718      	adds	r7, #24
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20001484 	.word	0x20001484
 800aa4c:	20001460 	.word	0x20001460
 800aa50:	20001414 	.word	0x20001414
 800aa54:	20001418 	.word	0x20001418
 800aa58:	20001474 	.word	0x20001474
 800aa5c:	2000147c 	.word	0x2000147c
 800aa60:	20001464 	.word	0x20001464
 800aa64:	20000f8c 	.word	0x20000f8c
 800aa68:	20000f88 	.word	0x20000f88
 800aa6c:	2000146c 	.word	0x2000146c
 800aa70:	20001470 	.word	0x20001470

0800aa74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa7a:	4b34      	ldr	r3, [pc, #208]	; (800ab4c <vTaskSwitchContext+0xd8>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d003      	beq.n	800aa8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa82:	4b33      	ldr	r3, [pc, #204]	; (800ab50 <vTaskSwitchContext+0xdc>)
 800aa84:	2201      	movs	r2, #1
 800aa86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa88:	e05b      	b.n	800ab42 <vTaskSwitchContext+0xce>
		xYieldPending = pdFALSE;
 800aa8a:	4b31      	ldr	r3, [pc, #196]	; (800ab50 <vTaskSwitchContext+0xdc>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa90:	4b30      	ldr	r3, [pc, #192]	; (800ab54 <vTaskSwitchContext+0xe0>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	60fb      	str	r3, [r7, #12]
 800aa96:	e012      	b.n	800aabe <vTaskSwitchContext+0x4a>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d10c      	bne.n	800aab8 <vTaskSwitchContext+0x44>
	__asm volatile
 800aa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa2:	b672      	cpsid	i
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	b662      	cpsie	i
 800aab2:	607b      	str	r3, [r7, #4]
}
 800aab4:	bf00      	nop
 800aab6:	e7fe      	b.n	800aab6 <vTaskSwitchContext+0x42>
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	3b01      	subs	r3, #1
 800aabc:	60fb      	str	r3, [r7, #12]
 800aabe:	4926      	ldr	r1, [pc, #152]	; (800ab58 <vTaskSwitchContext+0xe4>)
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	4613      	mov	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	440b      	add	r3, r1
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d0e2      	beq.n	800aa98 <vTaskSwitchContext+0x24>
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	4613      	mov	r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	4413      	add	r3, r2
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	4a1e      	ldr	r2, [pc, #120]	; (800ab58 <vTaskSwitchContext+0xe4>)
 800aade:	4413      	add	r3, r2
 800aae0:	60bb      	str	r3, [r7, #8]
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	685a      	ldr	r2, [r3, #4]
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	605a      	str	r2, [r3, #4]
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	685a      	ldr	r2, [r3, #4]
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	3308      	adds	r3, #8
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d104      	bne.n	800ab02 <vTaskSwitchContext+0x8e>
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	685a      	ldr	r2, [r3, #4]
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	605a      	str	r2, [r3, #4]
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	4a14      	ldr	r2, [pc, #80]	; (800ab5c <vTaskSwitchContext+0xe8>)
 800ab0a:	6013      	str	r3, [r2, #0]
 800ab0c:	4a11      	ldr	r2, [pc, #68]	; (800ab54 <vTaskSwitchContext+0xe0>)
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800ab12:	4b12      	ldr	r3, [pc, #72]	; (800ab5c <vTaskSwitchContext+0xe8>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	3334      	adds	r3, #52	; 0x34
 800ab18:	2205      	movs	r2, #5
 800ab1a:	4911      	ldr	r1, [pc, #68]	; (800ab60 <vTaskSwitchContext+0xec>)
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f003 faa0 	bl	800e062 <memcmp>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d005      	beq.n	800ab34 <vTaskSwitchContext+0xc0>
 800ab28:	4b0c      	ldr	r3, [pc, #48]	; (800ab5c <vTaskSwitchContext+0xe8>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f002 ff61 	bl	800d9f4 <SEGGER_SYSVIEW_OnTaskStartExec>
 800ab32:	e001      	b.n	800ab38 <vTaskSwitchContext+0xc4>
 800ab34:	f002 fefe 	bl	800d934 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ab38:	4b08      	ldr	r3, [pc, #32]	; (800ab5c <vTaskSwitchContext+0xe8>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	3354      	adds	r3, #84	; 0x54
 800ab3e:	4a09      	ldr	r2, [pc, #36]	; (800ab64 <vTaskSwitchContext+0xf0>)
 800ab40:	6013      	str	r3, [r2, #0]
}
 800ab42:	bf00      	nop
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20001484 	.word	0x20001484
 800ab50:	20001470 	.word	0x20001470
 800ab54:	20001464 	.word	0x20001464
 800ab58:	20000f8c 	.word	0x20000f8c
 800ab5c:	20000f88 	.word	0x20000f88
 800ab60:	0800f008 	.word	0x0800f008
 800ab64:	200000c0 	.word	0x200000c0

0800ab68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10c      	bne.n	800ab92 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800ab78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7c:	b672      	cpsid	i
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	b662      	cpsie	i
 800ab8c:	60fb      	str	r3, [r7, #12]
}
 800ab8e:	bf00      	nop
 800ab90:	e7fe      	b.n	800ab90 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab92:	4b07      	ldr	r3, [pc, #28]	; (800abb0 <vTaskPlaceOnEventList+0x48>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	3318      	adds	r3, #24
 800ab98:	4619      	mov	r1, r3
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f7fe fb23 	bl	80091e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aba0:	2101      	movs	r1, #1
 800aba2:	6838      	ldr	r0, [r7, #0]
 800aba4:	f000 fad0 	bl	800b148 <prvAddCurrentTaskToDelayedList>
}
 800aba8:	bf00      	nop
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	20000f88 	.word	0x20000f88

0800abb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d10c      	bne.n	800abe0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800abc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abca:	b672      	cpsid	i
 800abcc:	f383 8811 	msr	BASEPRI, r3
 800abd0:	f3bf 8f6f 	isb	sy
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	b662      	cpsie	i
 800abda:	617b      	str	r3, [r7, #20]
}
 800abdc:	bf00      	nop
 800abde:	e7fe      	b.n	800abde <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abe0:	4b0b      	ldr	r3, [pc, #44]	; (800ac10 <vTaskPlaceOnEventListRestricted+0x5c>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	3318      	adds	r3, #24
 800abe6:	4619      	mov	r1, r3
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f7fe fad8 	bl	800919e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800abf4:	f04f 33ff 	mov.w	r3, #4294967295
 800abf8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800abfa:	2024      	movs	r0, #36	; 0x24
 800abfc:	f002 fa16 	bl	800d02c <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ac00:	6879      	ldr	r1, [r7, #4]
 800ac02:	68b8      	ldr	r0, [r7, #8]
 800ac04:	f000 faa0 	bl	800b148 <prvAddCurrentTaskToDelayedList>
	}
 800ac08:	bf00      	nop
 800ac0a:	3718      	adds	r7, #24
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	20000f88 	.word	0x20000f88

0800ac14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10c      	bne.n	800ac44 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2e:	b672      	cpsid	i
 800ac30:	f383 8811 	msr	BASEPRI, r3
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	b662      	cpsie	i
 800ac3e:	60fb      	str	r3, [r7, #12]
}
 800ac40:	bf00      	nop
 800ac42:	e7fe      	b.n	800ac42 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	3318      	adds	r3, #24
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7fe fb05 	bl	8009258 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac4e:	4b20      	ldr	r3, [pc, #128]	; (800acd0 <xTaskRemoveFromEventList+0xbc>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d121      	bne.n	800ac9a <xTaskRemoveFromEventList+0x86>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	3304      	adds	r3, #4
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7fe fafc 	bl	8009258 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	4618      	mov	r0, r3
 800ac64:	f002 ff0a 	bl	800da7c <SEGGER_SYSVIEW_OnTaskStartReady>
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac6c:	4b19      	ldr	r3, [pc, #100]	; (800acd4 <xTaskRemoveFromEventList+0xc0>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d903      	bls.n	800ac7c <xTaskRemoveFromEventList+0x68>
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac78:	4a16      	ldr	r2, [pc, #88]	; (800acd4 <xTaskRemoveFromEventList+0xc0>)
 800ac7a:	6013      	str	r3, [r2, #0]
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac80:	4613      	mov	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	4413      	add	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4a13      	ldr	r2, [pc, #76]	; (800acd8 <xTaskRemoveFromEventList+0xc4>)
 800ac8a:	441a      	add	r2, r3
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	3304      	adds	r3, #4
 800ac90:	4619      	mov	r1, r3
 800ac92:	4610      	mov	r0, r2
 800ac94:	f7fe fa83 	bl	800919e <vListInsertEnd>
 800ac98:	e005      	b.n	800aca6 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	3318      	adds	r3, #24
 800ac9e:	4619      	mov	r1, r3
 800aca0:	480e      	ldr	r0, [pc, #56]	; (800acdc <xTaskRemoveFromEventList+0xc8>)
 800aca2:	f7fe fa7c 	bl	800919e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acaa:	4b0d      	ldr	r3, [pc, #52]	; (800ace0 <xTaskRemoveFromEventList+0xcc>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d905      	bls.n	800acc0 <xTaskRemoveFromEventList+0xac>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800acb4:	2301      	movs	r3, #1
 800acb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800acb8:	4b0a      	ldr	r3, [pc, #40]	; (800ace4 <xTaskRemoveFromEventList+0xd0>)
 800acba:	2201      	movs	r2, #1
 800acbc:	601a      	str	r2, [r3, #0]
 800acbe:	e001      	b.n	800acc4 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		xReturn = pdFALSE;
 800acc0:	2300      	movs	r3, #0
 800acc2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800acc4:	697b      	ldr	r3, [r7, #20]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	20001484 	.word	0x20001484
 800acd4:	20001464 	.word	0x20001464
 800acd8:	20000f8c 	.word	0x20000f8c
 800acdc:	2000141c 	.word	0x2000141c
 800ace0:	20000f88 	.word	0x20000f88
 800ace4:	20001470 	.word	0x20001470

0800ace8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800acf0:	4b06      	ldr	r3, [pc, #24]	; (800ad0c <vTaskInternalSetTimeOutState+0x24>)
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800acf8:	4b05      	ldr	r3, [pc, #20]	; (800ad10 <vTaskInternalSetTimeOutState+0x28>)
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	605a      	str	r2, [r3, #4]
}
 800ad00:	bf00      	nop
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr
 800ad0c:	20001474 	.word	0x20001474
 800ad10:	20001460 	.word	0x20001460

0800ad14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b088      	sub	sp, #32
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10c      	bne.n	800ad3e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800ad24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad28:	b672      	cpsid	i
 800ad2a:	f383 8811 	msr	BASEPRI, r3
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	b662      	cpsie	i
 800ad38:	613b      	str	r3, [r7, #16]
}
 800ad3a:	bf00      	nop
 800ad3c:	e7fe      	b.n	800ad3c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10c      	bne.n	800ad5e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ad44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad48:	b672      	cpsid	i
 800ad4a:	f383 8811 	msr	BASEPRI, r3
 800ad4e:	f3bf 8f6f 	isb	sy
 800ad52:	f3bf 8f4f 	dsb	sy
 800ad56:	b662      	cpsie	i
 800ad58:	60fb      	str	r3, [r7, #12]
}
 800ad5a:	bf00      	nop
 800ad5c:	e7fe      	b.n	800ad5c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ad5e:	f000 ff85 	bl	800bc6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ad62:	4b1d      	ldr	r3, [pc, #116]	; (800add8 <xTaskCheckForTimeOut+0xc4>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	69ba      	ldr	r2, [r7, #24]
 800ad6e:	1ad3      	subs	r3, r2, r3
 800ad70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad7a:	d102      	bne.n	800ad82 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	61fb      	str	r3, [r7, #28]
 800ad80:	e023      	b.n	800adca <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	4b15      	ldr	r3, [pc, #84]	; (800addc <xTaskCheckForTimeOut+0xc8>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d007      	beq.n	800ad9e <xTaskCheckForTimeOut+0x8a>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	69ba      	ldr	r2, [r7, #24]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d302      	bcc.n	800ad9e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	61fb      	str	r3, [r7, #28]
 800ad9c:	e015      	b.n	800adca <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	697a      	ldr	r2, [r7, #20]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d20b      	bcs.n	800adc0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	1ad2      	subs	r2, r2, r3
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7ff ff97 	bl	800ace8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800adba:	2300      	movs	r3, #0
 800adbc:	61fb      	str	r3, [r7, #28]
 800adbe:	e004      	b.n	800adca <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	2200      	movs	r2, #0
 800adc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800adc6:	2301      	movs	r3, #1
 800adc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800adca:	f000 ff83 	bl	800bcd4 <vPortExitCritical>

	return xReturn;
 800adce:	69fb      	ldr	r3, [r7, #28]
}
 800add0:	4618      	mov	r0, r3
 800add2:	3720      	adds	r7, #32
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	20001460 	.word	0x20001460
 800addc:	20001474 	.word	0x20001474

0800ade0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ade0:	b480      	push	{r7}
 800ade2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ade4:	4b03      	ldr	r3, [pc, #12]	; (800adf4 <vTaskMissedYield+0x14>)
 800ade6:	2201      	movs	r2, #1
 800ade8:	601a      	str	r2, [r3, #0]
}
 800adea:	bf00      	nop
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	20001470 	.word	0x20001470

0800adf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ae00:	f000 f852 	bl	800aea8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ae04:	4b06      	ldr	r3, [pc, #24]	; (800ae20 <prvIdleTask+0x28>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d9f9      	bls.n	800ae00 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ae0c:	4b05      	ldr	r3, [pc, #20]	; (800ae24 <prvIdleTask+0x2c>)
 800ae0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae12:	601a      	str	r2, [r3, #0]
 800ae14:	f3bf 8f4f 	dsb	sy
 800ae18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ae1c:	e7f0      	b.n	800ae00 <prvIdleTask+0x8>
 800ae1e:	bf00      	nop
 800ae20:	20000f8c 	.word	0x20000f8c
 800ae24:	e000ed04 	.word	0xe000ed04

0800ae28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae2e:	2300      	movs	r3, #0
 800ae30:	607b      	str	r3, [r7, #4]
 800ae32:	e00c      	b.n	800ae4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	4613      	mov	r3, r2
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4413      	add	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4a12      	ldr	r2, [pc, #72]	; (800ae88 <prvInitialiseTaskLists+0x60>)
 800ae40:	4413      	add	r3, r2
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fe f97e 	bl	8009144 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	607b      	str	r3, [r7, #4]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2b37      	cmp	r3, #55	; 0x37
 800ae52:	d9ef      	bls.n	800ae34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ae54:	480d      	ldr	r0, [pc, #52]	; (800ae8c <prvInitialiseTaskLists+0x64>)
 800ae56:	f7fe f975 	bl	8009144 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae5a:	480d      	ldr	r0, [pc, #52]	; (800ae90 <prvInitialiseTaskLists+0x68>)
 800ae5c:	f7fe f972 	bl	8009144 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae60:	480c      	ldr	r0, [pc, #48]	; (800ae94 <prvInitialiseTaskLists+0x6c>)
 800ae62:	f7fe f96f 	bl	8009144 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae66:	480c      	ldr	r0, [pc, #48]	; (800ae98 <prvInitialiseTaskLists+0x70>)
 800ae68:	f7fe f96c 	bl	8009144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae6c:	480b      	ldr	r0, [pc, #44]	; (800ae9c <prvInitialiseTaskLists+0x74>)
 800ae6e:	f7fe f969 	bl	8009144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae72:	4b0b      	ldr	r3, [pc, #44]	; (800aea0 <prvInitialiseTaskLists+0x78>)
 800ae74:	4a05      	ldr	r2, [pc, #20]	; (800ae8c <prvInitialiseTaskLists+0x64>)
 800ae76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae78:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <prvInitialiseTaskLists+0x7c>)
 800ae7a:	4a05      	ldr	r2, [pc, #20]	; (800ae90 <prvInitialiseTaskLists+0x68>)
 800ae7c:	601a      	str	r2, [r3, #0]
}
 800ae7e:	bf00      	nop
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	20000f8c 	.word	0x20000f8c
 800ae8c:	200013ec 	.word	0x200013ec
 800ae90:	20001400 	.word	0x20001400
 800ae94:	2000141c 	.word	0x2000141c
 800ae98:	20001430 	.word	0x20001430
 800ae9c:	20001448 	.word	0x20001448
 800aea0:	20001414 	.word	0x20001414
 800aea4:	20001418 	.word	0x20001418

0800aea8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aeae:	e019      	b.n	800aee4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aeb0:	f000 fedc 	bl	800bc6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeb4:	4b10      	ldr	r3, [pc, #64]	; (800aef8 <prvCheckTasksWaitingTermination+0x50>)
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	3304      	adds	r3, #4
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7fe f9c9 	bl	8009258 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aec6:	4b0d      	ldr	r3, [pc, #52]	; (800aefc <prvCheckTasksWaitingTermination+0x54>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	3b01      	subs	r3, #1
 800aecc:	4a0b      	ldr	r2, [pc, #44]	; (800aefc <prvCheckTasksWaitingTermination+0x54>)
 800aece:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aed0:	4b0b      	ldr	r3, [pc, #44]	; (800af00 <prvCheckTasksWaitingTermination+0x58>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	3b01      	subs	r3, #1
 800aed6:	4a0a      	ldr	r2, [pc, #40]	; (800af00 <prvCheckTasksWaitingTermination+0x58>)
 800aed8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aeda:	f000 fefb 	bl	800bcd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f848 	bl	800af74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aee4:	4b06      	ldr	r3, [pc, #24]	; (800af00 <prvCheckTasksWaitingTermination+0x58>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1e1      	bne.n	800aeb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aeec:	bf00      	nop
 800aeee:	bf00      	nop
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	20001430 	.word	0x20001430
 800aefc:	2000145c 	.word	0x2000145c
 800af00:	20001444 	.word	0x20001444

0800af04 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800af0c:	2300      	movs	r3, #0
 800af0e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800af10:	e005      	b.n	800af1e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	3301      	adds	r3, #1
 800af16:	607b      	str	r3, [r7, #4]
			ulCount++;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	3301      	adds	r3, #1
 800af1c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	2ba5      	cmp	r3, #165	; 0xa5
 800af24:	d0f5      	beq.n	800af12 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	089b      	lsrs	r3, r3, #2
 800af2a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	b29b      	uxth	r3, r3
	}
 800af30:	4618      	mov	r0, r3
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d102      	bne.n	800af50 <uxTaskGetStackHighWaterMark+0x14>
 800af4a:	4b09      	ldr	r3, [pc, #36]	; (800af70 <uxTaskGetStackHighWaterMark+0x34>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	e000      	b.n	800af52 <uxTaskGetStackHighWaterMark+0x16>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af58:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800af5a:	6938      	ldr	r0, [r7, #16]
 800af5c:	f7ff ffd2 	bl	800af04 <prvTaskCheckFreeStackSpace>
 800af60:	4603      	mov	r3, r0
 800af62:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800af64:	68fb      	ldr	r3, [r7, #12]
	}
 800af66:	4618      	mov	r0, r3
 800af68:	3718      	adds	r7, #24
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	20000f88 	.word	0x20000f88

0800af74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	3354      	adds	r3, #84	; 0x54
 800af80:	4618      	mov	r0, r3
 800af82:	f003 f897 	bl	800e0b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d108      	bne.n	800afa2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af94:	4618      	mov	r0, r3
 800af96:	f001 f8b9 	bl	800c10c <vPortFree>
				vPortFree( pxTCB );
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f001 f8b6 	bl	800c10c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800afa0:	e01a      	b.n	800afd8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d103      	bne.n	800afb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f001 f8ad 	bl	800c10c <vPortFree>
	}
 800afb2:	e011      	b.n	800afd8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800afba:	2b02      	cmp	r3, #2
 800afbc:	d00c      	beq.n	800afd8 <prvDeleteTCB+0x64>
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	b672      	cpsid	i
 800afc4:	f383 8811 	msr	BASEPRI, r3
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	b662      	cpsie	i
 800afd2:	60fb      	str	r3, [r7, #12]
}
 800afd4:	bf00      	nop
 800afd6:	e7fe      	b.n	800afd6 <prvDeleteTCB+0x62>
	}
 800afd8:	bf00      	nop
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afe6:	4b0c      	ldr	r3, [pc, #48]	; (800b018 <prvResetNextTaskUnblockTime+0x38>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d104      	bne.n	800affa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aff0:	4b0a      	ldr	r3, [pc, #40]	; (800b01c <prvResetNextTaskUnblockTime+0x3c>)
 800aff2:	f04f 32ff 	mov.w	r2, #4294967295
 800aff6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aff8:	e008      	b.n	800b00c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800affa:	4b07      	ldr	r3, [pc, #28]	; (800b018 <prvResetNextTaskUnblockTime+0x38>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	4a04      	ldr	r2, [pc, #16]	; (800b01c <prvResetNextTaskUnblockTime+0x3c>)
 800b00a:	6013      	str	r3, [r2, #0]
}
 800b00c:	bf00      	nop
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr
 800b018:	20001414 	.word	0x20001414
 800b01c:	2000147c 	.word	0x2000147c

0800b020 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b026:	4b0b      	ldr	r3, [pc, #44]	; (800b054 <xTaskGetSchedulerState+0x34>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d102      	bne.n	800b034 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b02e:	2301      	movs	r3, #1
 800b030:	607b      	str	r3, [r7, #4]
 800b032:	e008      	b.n	800b046 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b034:	4b08      	ldr	r3, [pc, #32]	; (800b058 <xTaskGetSchedulerState+0x38>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d102      	bne.n	800b042 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b03c:	2302      	movs	r3, #2
 800b03e:	607b      	str	r3, [r7, #4]
 800b040:	e001      	b.n	800b046 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b042:	2300      	movs	r3, #0
 800b044:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b046:	687b      	ldr	r3, [r7, #4]
	}
 800b048:	4618      	mov	r0, r3
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr
 800b054:	20001468 	.word	0x20001468
 800b058:	20001484 	.word	0x20001484

0800b05c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b068:	2300      	movs	r3, #0
 800b06a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d05f      	beq.n	800b132 <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b072:	4b32      	ldr	r3, [pc, #200]	; (800b13c <xTaskPriorityDisinherit+0xe0>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	693a      	ldr	r2, [r7, #16]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d00c      	beq.n	800b096 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b080:	b672      	cpsid	i
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	b662      	cpsie	i
 800b090:	60fb      	str	r3, [r7, #12]
}
 800b092:	bf00      	nop
 800b094:	e7fe      	b.n	800b094 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d10c      	bne.n	800b0b8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a2:	b672      	cpsid	i
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	b662      	cpsie	i
 800b0b2:	60bb      	str	r3, [r7, #8]
}
 800b0b4:	bf00      	nop
 800b0b6:	e7fe      	b.n	800b0b6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0bc:	1e5a      	subs	r2, r3, #1
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d031      	beq.n	800b132 <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d12d      	bne.n	800b132 <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	3304      	adds	r3, #4
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7fe f8bc 	bl	8009258 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	204a      	movs	r0, #74	; 0x4a
 800b0e6:	f001 ffbf 	bl	800d068 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b102:	4b0f      	ldr	r3, [pc, #60]	; (800b140 <xTaskPriorityDisinherit+0xe4>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	429a      	cmp	r2, r3
 800b108:	d903      	bls.n	800b112 <xTaskPriorityDisinherit+0xb6>
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10e:	4a0c      	ldr	r2, [pc, #48]	; (800b140 <xTaskPriorityDisinherit+0xe4>)
 800b110:	6013      	str	r3, [r2, #0]
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b116:	4613      	mov	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	4a09      	ldr	r2, [pc, #36]	; (800b144 <xTaskPriorityDisinherit+0xe8>)
 800b120:	441a      	add	r2, r3
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	3304      	adds	r3, #4
 800b126:	4619      	mov	r1, r3
 800b128:	4610      	mov	r0, r2
 800b12a:	f7fe f838 	bl	800919e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b12e:	2301      	movs	r3, #1
 800b130:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b132:	697b      	ldr	r3, [r7, #20]
	}
 800b134:	4618      	mov	r0, r3
 800b136:	3718      	adds	r7, #24
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	20000f88 	.word	0x20000f88
 800b140:	20001464 	.word	0x20001464
 800b144:	20000f8c 	.word	0x20000f8c

0800b148 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b152:	4b2a      	ldr	r3, [pc, #168]	; (800b1fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b158:	4b29      	ldr	r3, [pc, #164]	; (800b200 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	3304      	adds	r3, #4
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fe f87a 	bl	8009258 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b16a:	d110      	bne.n	800b18e <prvAddCurrentTaskToDelayedList+0x46>
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00d      	beq.n	800b18e <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800b172:	4b23      	ldr	r3, [pc, #140]	; (800b200 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	211b      	movs	r1, #27
 800b178:	4618      	mov	r0, r3
 800b17a:	f002 fcc3 	bl	800db04 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b17e:	4b20      	ldr	r3, [pc, #128]	; (800b200 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	3304      	adds	r3, #4
 800b184:	4619      	mov	r1, r3
 800b186:	481f      	ldr	r0, [pc, #124]	; (800b204 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b188:	f7fe f809 	bl	800919e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b18c:	e032      	b.n	800b1f4 <prvAddCurrentTaskToDelayedList+0xac>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b18e:	68fa      	ldr	r2, [r7, #12]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	4413      	add	r3, r2
 800b194:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b196:	4b1a      	ldr	r3, [pc, #104]	; (800b200 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b19e:	68ba      	ldr	r2, [r7, #8]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d20f      	bcs.n	800b1c6 <prvAddCurrentTaskToDelayedList+0x7e>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800b1a6:	4b16      	ldr	r3, [pc, #88]	; (800b200 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2104      	movs	r1, #4
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f002 fca9 	bl	800db04 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1b2:	4b15      	ldr	r3, [pc, #84]	; (800b208 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	4b12      	ldr	r3, [pc, #72]	; (800b200 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	3304      	adds	r3, #4
 800b1bc:	4619      	mov	r1, r3
 800b1be:	4610      	mov	r0, r2
 800b1c0:	f7fe f811 	bl	80091e6 <vListInsert>
}
 800b1c4:	e016      	b.n	800b1f4 <prvAddCurrentTaskToDelayedList+0xac>
        traceMOVED_TASK_TO_DELAYED_LIST();
 800b1c6:	4b0e      	ldr	r3, [pc, #56]	; (800b200 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2104      	movs	r1, #4
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f002 fc99 	bl	800db04 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1d2:	4b0e      	ldr	r3, [pc, #56]	; (800b20c <prvAddCurrentTaskToDelayedList+0xc4>)
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	4b0a      	ldr	r3, [pc, #40]	; (800b200 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	3304      	adds	r3, #4
 800b1dc:	4619      	mov	r1, r3
 800b1de:	4610      	mov	r0, r2
 800b1e0:	f7fe f801 	bl	80091e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b1e4:	4b0a      	ldr	r3, [pc, #40]	; (800b210 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	68ba      	ldr	r2, [r7, #8]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d202      	bcs.n	800b1f4 <prvAddCurrentTaskToDelayedList+0xac>
					xNextTaskUnblockTime = xTimeToWake;
 800b1ee:	4a08      	ldr	r2, [pc, #32]	; (800b210 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	6013      	str	r3, [r2, #0]
}
 800b1f4:	bf00      	nop
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	20001460 	.word	0x20001460
 800b200:	20000f88 	.word	0x20000f88
 800b204:	20001448 	.word	0x20001448
 800b208:	20001418 	.word	0x20001418
 800b20c:	20001414 	.word	0x20001414
 800b210:	2000147c 	.word	0x2000147c

0800b214 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b08a      	sub	sp, #40	; 0x28
 800b218:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b21e:	f000 fbb5 	bl	800b98c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b222:	4b1d      	ldr	r3, [pc, #116]	; (800b298 <xTimerCreateTimerTask+0x84>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d021      	beq.n	800b26e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b22a:	2300      	movs	r3, #0
 800b22c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b22e:	2300      	movs	r3, #0
 800b230:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b232:	1d3a      	adds	r2, r7, #4
 800b234:	f107 0108 	add.w	r1, r7, #8
 800b238:	f107 030c 	add.w	r3, r7, #12
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7fd ff67 	bl	8009110 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b242:	6879      	ldr	r1, [r7, #4]
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	9202      	str	r2, [sp, #8]
 800b24a:	9301      	str	r3, [sp, #4]
 800b24c:	2302      	movs	r3, #2
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	2300      	movs	r3, #0
 800b252:	460a      	mov	r2, r1
 800b254:	4911      	ldr	r1, [pc, #68]	; (800b29c <xTimerCreateTimerTask+0x88>)
 800b256:	4812      	ldr	r0, [pc, #72]	; (800b2a0 <xTimerCreateTimerTask+0x8c>)
 800b258:	f7fe fdac 	bl	8009db4 <xTaskCreateStatic>
 800b25c:	4603      	mov	r3, r0
 800b25e:	4a11      	ldr	r2, [pc, #68]	; (800b2a4 <xTimerCreateTimerTask+0x90>)
 800b260:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b262:	4b10      	ldr	r3, [pc, #64]	; (800b2a4 <xTimerCreateTimerTask+0x90>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d001      	beq.n	800b26e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b26a:	2301      	movs	r3, #1
 800b26c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10c      	bne.n	800b28e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800b274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b278:	b672      	cpsid	i
 800b27a:	f383 8811 	msr	BASEPRI, r3
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	b662      	cpsie	i
 800b288:	613b      	str	r3, [r7, #16]
}
 800b28a:	bf00      	nop
 800b28c:	e7fe      	b.n	800b28c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b28e:	697b      	ldr	r3, [r7, #20]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3718      	adds	r7, #24
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	200014b8 	.word	0x200014b8
 800b29c:	0800f010 	.word	0x0800f010
 800b2a0:	0800b525 	.word	0x0800b525
 800b2a4:	200014bc 	.word	0x200014bc

0800b2a8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b088      	sub	sp, #32
 800b2ac:	af02      	add	r7, sp, #8
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
 800b2b4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b2b6:	202c      	movs	r0, #44	; 0x2c
 800b2b8:	f000 fe5e 	bl	800bf78 <pvPortMalloc>
 800b2bc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00d      	beq.n	800b2e0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	9301      	str	r3, [sp, #4]
 800b2d0:	6a3b      	ldr	r3, [r7, #32]
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	68b9      	ldr	r1, [r7, #8]
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f000 f847 	bl	800b36e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b2e0:	697b      	ldr	r3, [r7, #20]
	}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b08a      	sub	sp, #40	; 0x28
 800b2ee:	af02      	add	r7, sp, #8
 800b2f0:	60f8      	str	r0, [r7, #12]
 800b2f2:	60b9      	str	r1, [r7, #8]
 800b2f4:	607a      	str	r2, [r7, #4]
 800b2f6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b2f8:	232c      	movs	r3, #44	; 0x2c
 800b2fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	2b2c      	cmp	r3, #44	; 0x2c
 800b300:	d00c      	beq.n	800b31c <xTimerCreateStatic+0x32>
	__asm volatile
 800b302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b306:	b672      	cpsid	i
 800b308:	f383 8811 	msr	BASEPRI, r3
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	b662      	cpsie	i
 800b316:	61bb      	str	r3, [r7, #24]
}
 800b318:	bf00      	nop
 800b31a:	e7fe      	b.n	800b31a <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b31c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10c      	bne.n	800b33e <xTimerCreateStatic+0x54>
	__asm volatile
 800b324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b328:	b672      	cpsid	i
 800b32a:	f383 8811 	msr	BASEPRI, r3
 800b32e:	f3bf 8f6f 	isb	sy
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	b662      	cpsie	i
 800b338:	617b      	str	r3, [r7, #20]
}
 800b33a:	bf00      	nop
 800b33c:	e7fe      	b.n	800b33c <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800b33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b340:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b342:	69fb      	ldr	r3, [r7, #28]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00d      	beq.n	800b364 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	2202      	movs	r2, #2
 800b34c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	9301      	str	r3, [sp, #4]
 800b354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b356:	9300      	str	r3, [sp, #0]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	68b9      	ldr	r1, [r7, #8]
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f000 f805 	bl	800b36e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b364:	69fb      	ldr	r3, [r7, #28]
	}
 800b366:	4618      	mov	r0, r3
 800b368:	3720      	adds	r7, #32
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b086      	sub	sp, #24
 800b372:	af00      	add	r7, sp, #0
 800b374:	60f8      	str	r0, [r7, #12]
 800b376:	60b9      	str	r1, [r7, #8]
 800b378:	607a      	str	r2, [r7, #4]
 800b37a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10c      	bne.n	800b39c <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800b382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b386:	b672      	cpsid	i
 800b388:	f383 8811 	msr	BASEPRI, r3
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	b662      	cpsie	i
 800b396:	617b      	str	r3, [r7, #20]
}
 800b398:	bf00      	nop
 800b39a:	e7fe      	b.n	800b39a <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800b39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d01e      	beq.n	800b3e0 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b3a2:	f000 faf3 	bl	800b98c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ae:	68ba      	ldr	r2, [r7, #8]
 800b3b0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ba:	6a3a      	ldr	r2, [r7, #32]
 800b3bc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c0:	3304      	adds	r3, #4
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fd fede 	bl	8009184 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d008      	beq.n	800b3e0 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3d4:	f043 0304 	orr.w	r3, r3, #4
 800b3d8:	b2da      	uxtb	r2, r3
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b3e0:	bf00      	nop
 800b3e2:	3718      	adds	r7, #24
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b08a      	sub	sp, #40	; 0x28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
 800b3f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d10c      	bne.n	800b41a <xTimerGenericCommand+0x32>
	__asm volatile
 800b400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b404:	b672      	cpsid	i
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	b662      	cpsie	i
 800b414:	623b      	str	r3, [r7, #32]
}
 800b416:	bf00      	nop
 800b418:	e7fe      	b.n	800b418 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b41a:	4b1a      	ldr	r3, [pc, #104]	; (800b484 <xTimerGenericCommand+0x9c>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d02a      	beq.n	800b478 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	2b05      	cmp	r3, #5
 800b432:	dc18      	bgt.n	800b466 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b434:	f7ff fdf4 	bl	800b020 <xTaskGetSchedulerState>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d109      	bne.n	800b452 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b43e:	4b11      	ldr	r3, [pc, #68]	; (800b484 <xTimerGenericCommand+0x9c>)
 800b440:	6818      	ldr	r0, [r3, #0]
 800b442:	f107 0110 	add.w	r1, r7, #16
 800b446:	2300      	movs	r3, #0
 800b448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b44a:	f7fe f845 	bl	80094d8 <xQueueGenericSend>
 800b44e:	6278      	str	r0, [r7, #36]	; 0x24
 800b450:	e012      	b.n	800b478 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b452:	4b0c      	ldr	r3, [pc, #48]	; (800b484 <xTimerGenericCommand+0x9c>)
 800b454:	6818      	ldr	r0, [r3, #0]
 800b456:	f107 0110 	add.w	r1, r7, #16
 800b45a:	2300      	movs	r3, #0
 800b45c:	2200      	movs	r2, #0
 800b45e:	f7fe f83b 	bl	80094d8 <xQueueGenericSend>
 800b462:	6278      	str	r0, [r7, #36]	; 0x24
 800b464:	e008      	b.n	800b478 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b466:	4b07      	ldr	r3, [pc, #28]	; (800b484 <xTimerGenericCommand+0x9c>)
 800b468:	6818      	ldr	r0, [r3, #0]
 800b46a:	f107 0110 	add.w	r1, r7, #16
 800b46e:	2300      	movs	r3, #0
 800b470:	683a      	ldr	r2, [r7, #0]
 800b472:	f7fe f95f 	bl	8009734 <xQueueGenericSendFromISR>
 800b476:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3728      	adds	r7, #40	; 0x28
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	200014b8 	.word	0x200014b8

0800b488 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b088      	sub	sp, #32
 800b48c:	af02      	add	r7, sp, #8
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b492:	4b23      	ldr	r3, [pc, #140]	; (800b520 <prvProcessExpiredTimer+0x98>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	3304      	adds	r3, #4
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fd fed9 	bl	8009258 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4ac:	f003 0304 	and.w	r3, r3, #4
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d024      	beq.n	800b4fe <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	699a      	ldr	r2, [r3, #24]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	18d1      	adds	r1, r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	683a      	ldr	r2, [r7, #0]
 800b4c0:	6978      	ldr	r0, [r7, #20]
 800b4c2:	f000 f8d3 	bl	800b66c <prvInsertTimerInActiveList>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d021      	beq.n	800b510 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	9300      	str	r3, [sp, #0]
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	6978      	ldr	r0, [r7, #20]
 800b4d8:	f7ff ff86 	bl	800b3e8 <xTimerGenericCommand>
 800b4dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d115      	bne.n	800b510 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800b4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e8:	b672      	cpsid	i
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	b662      	cpsie	i
 800b4f8:	60fb      	str	r3, [r7, #12]
}
 800b4fa:	bf00      	nop
 800b4fc:	e7fe      	b.n	800b4fc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b504:	f023 0301 	bic.w	r3, r3, #1
 800b508:	b2da      	uxtb	r2, r3
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	6a1b      	ldr	r3, [r3, #32]
 800b514:	6978      	ldr	r0, [r7, #20]
 800b516:	4798      	blx	r3
}
 800b518:	bf00      	nop
 800b51a:	3718      	adds	r7, #24
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	200014b0 	.word	0x200014b0

0800b524 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b52c:	f107 0308 	add.w	r3, r7, #8
 800b530:	4618      	mov	r0, r3
 800b532:	f000 f857 	bl	800b5e4 <prvGetNextExpireTime>
 800b536:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	4619      	mov	r1, r3
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f000 f803 	bl	800b548 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b542:	f000 f8d5 	bl	800b6f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b546:	e7f1      	b.n	800b52c <prvTimerTask+0x8>

0800b548 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b552:	f7ff f8fb 	bl	800a74c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b556:	f107 0308 	add.w	r3, r7, #8
 800b55a:	4618      	mov	r0, r3
 800b55c:	f000 f866 	bl	800b62c <prvSampleTimeNow>
 800b560:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d130      	bne.n	800b5ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d10a      	bne.n	800b584 <prvProcessTimerOrBlockTask+0x3c>
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	429a      	cmp	r2, r3
 800b574:	d806      	bhi.n	800b584 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b576:	f7ff f8f7 	bl	800a768 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b57a:	68f9      	ldr	r1, [r7, #12]
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f7ff ff83 	bl	800b488 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b582:	e024      	b.n	800b5ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d008      	beq.n	800b59c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b58a:	4b13      	ldr	r3, [pc, #76]	; (800b5d8 <prvProcessTimerOrBlockTask+0x90>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d101      	bne.n	800b598 <prvProcessTimerOrBlockTask+0x50>
 800b594:	2301      	movs	r3, #1
 800b596:	e000      	b.n	800b59a <prvProcessTimerOrBlockTask+0x52>
 800b598:	2300      	movs	r3, #0
 800b59a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b59c:	4b0f      	ldr	r3, [pc, #60]	; (800b5dc <prvProcessTimerOrBlockTask+0x94>)
 800b59e:	6818      	ldr	r0, [r3, #0]
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	1ad3      	subs	r3, r2, r3
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	f7fe fbcf 	bl	8009d4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b5ae:	f7ff f8db 	bl	800a768 <xTaskResumeAll>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10a      	bne.n	800b5ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b5b8:	4b09      	ldr	r3, [pc, #36]	; (800b5e0 <prvProcessTimerOrBlockTask+0x98>)
 800b5ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5be:	601a      	str	r2, [r3, #0]
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	f3bf 8f6f 	isb	sy
}
 800b5c8:	e001      	b.n	800b5ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b5ca:	f7ff f8cd 	bl	800a768 <xTaskResumeAll>
}
 800b5ce:	bf00      	nop
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	200014b4 	.word	0x200014b4
 800b5dc:	200014b8 	.word	0x200014b8
 800b5e0:	e000ed04 	.word	0xe000ed04

0800b5e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b085      	sub	sp, #20
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b5ec:	4b0e      	ldr	r3, [pc, #56]	; (800b628 <prvGetNextExpireTime+0x44>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d101      	bne.n	800b5fa <prvGetNextExpireTime+0x16>
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	e000      	b.n	800b5fc <prvGetNextExpireTime+0x18>
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d105      	bne.n	800b614 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b608:	4b07      	ldr	r3, [pc, #28]	; (800b628 <prvGetNextExpireTime+0x44>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	60fb      	str	r3, [r7, #12]
 800b612:	e001      	b.n	800b618 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b614:	2300      	movs	r3, #0
 800b616:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b618:	68fb      	ldr	r3, [r7, #12]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3714      	adds	r7, #20
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	200014b0 	.word	0x200014b0

0800b62c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b634:	f7ff f93c 	bl	800a8b0 <xTaskGetTickCount>
 800b638:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b63a:	4b0b      	ldr	r3, [pc, #44]	; (800b668 <prvSampleTimeNow+0x3c>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68fa      	ldr	r2, [r7, #12]
 800b640:	429a      	cmp	r2, r3
 800b642:	d205      	bcs.n	800b650 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b644:	f000 f93c 	bl	800b8c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	601a      	str	r2, [r3, #0]
 800b64e:	e002      	b.n	800b656 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b656:	4a04      	ldr	r2, [pc, #16]	; (800b668 <prvSampleTimeNow+0x3c>)
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b65c:	68fb      	ldr	r3, [r7, #12]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	200014c0 	.word	0x200014c0

0800b66c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b086      	sub	sp, #24
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
 800b678:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b67a:	2300      	movs	r3, #0
 800b67c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d812      	bhi.n	800b6b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	1ad2      	subs	r2, r2, r3
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	699b      	ldr	r3, [r3, #24]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d302      	bcc.n	800b6a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	617b      	str	r3, [r7, #20]
 800b6a4:	e01b      	b.n	800b6de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b6a6:	4b10      	ldr	r3, [pc, #64]	; (800b6e8 <prvInsertTimerInActiveList+0x7c>)
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	3304      	adds	r3, #4
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	4610      	mov	r0, r2
 800b6b2:	f7fd fd98 	bl	80091e6 <vListInsert>
 800b6b6:	e012      	b.n	800b6de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d206      	bcs.n	800b6ce <prvInsertTimerInActiveList+0x62>
 800b6c0:	68ba      	ldr	r2, [r7, #8]
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d302      	bcc.n	800b6ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	617b      	str	r3, [r7, #20]
 800b6cc:	e007      	b.n	800b6de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6ce:	4b07      	ldr	r3, [pc, #28]	; (800b6ec <prvInsertTimerInActiveList+0x80>)
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	4610      	mov	r0, r2
 800b6da:	f7fd fd84 	bl	80091e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b6de:	697b      	ldr	r3, [r7, #20]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3718      	adds	r7, #24
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	200014b4 	.word	0x200014b4
 800b6ec:	200014b0 	.word	0x200014b0

0800b6f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b08e      	sub	sp, #56	; 0x38
 800b6f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b6f6:	e0d0      	b.n	800b89a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	da1a      	bge.n	800b734 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b6fe:	1d3b      	adds	r3, r7, #4
 800b700:	3304      	adds	r3, #4
 800b702:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b706:	2b00      	cmp	r3, #0
 800b708:	d10c      	bne.n	800b724 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800b70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70e:	b672      	cpsid	i
 800b710:	f383 8811 	msr	BASEPRI, r3
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	b662      	cpsie	i
 800b71e:	61fb      	str	r3, [r7, #28]
}
 800b720:	bf00      	nop
 800b722:	e7fe      	b.n	800b722 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b72a:	6850      	ldr	r0, [r2, #4]
 800b72c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b72e:	6892      	ldr	r2, [r2, #8]
 800b730:	4611      	mov	r1, r2
 800b732:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	f2c0 80af 	blt.w	800b89a <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b742:	695b      	ldr	r3, [r3, #20]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d004      	beq.n	800b752 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74a:	3304      	adds	r3, #4
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7fd fd83 	bl	8009258 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b752:	463b      	mov	r3, r7
 800b754:	4618      	mov	r0, r3
 800b756:	f7ff ff69 	bl	800b62c <prvSampleTimeNow>
 800b75a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2b09      	cmp	r3, #9
 800b760:	f200 809a 	bhi.w	800b898 <prvProcessReceivedCommands+0x1a8>
 800b764:	a201      	add	r2, pc, #4	; (adr r2, 800b76c <prvProcessReceivedCommands+0x7c>)
 800b766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76a:	bf00      	nop
 800b76c:	0800b795 	.word	0x0800b795
 800b770:	0800b795 	.word	0x0800b795
 800b774:	0800b795 	.word	0x0800b795
 800b778:	0800b80d 	.word	0x0800b80d
 800b77c:	0800b821 	.word	0x0800b821
 800b780:	0800b86f 	.word	0x0800b86f
 800b784:	0800b795 	.word	0x0800b795
 800b788:	0800b795 	.word	0x0800b795
 800b78c:	0800b80d 	.word	0x0800b80d
 800b790:	0800b821 	.word	0x0800b821
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b79a:	f043 0301 	orr.w	r3, r3, #1
 800b79e:	b2da      	uxtb	r2, r3
 800b7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7aa:	699b      	ldr	r3, [r3, #24]
 800b7ac:	18d1      	adds	r1, r2, r3
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7b4:	f7ff ff5a 	bl	800b66c <prvInsertTimerInActiveList>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d06d      	beq.n	800b89a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c0:	6a1b      	ldr	r3, [r3, #32]
 800b7c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7cc:	f003 0304 	and.w	r3, r3, #4
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d062      	beq.n	800b89a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b7d4:	68ba      	ldr	r2, [r7, #8]
 800b7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d8:	699b      	ldr	r3, [r3, #24]
 800b7da:	441a      	add	r2, r3
 800b7dc:	2300      	movs	r3, #0
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7e6:	f7ff fdff 	bl	800b3e8 <xTimerGenericCommand>
 800b7ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b7ec:	6a3b      	ldr	r3, [r7, #32]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d153      	bne.n	800b89a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800b7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f6:	b672      	cpsid	i
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	b662      	cpsie	i
 800b806:	61bb      	str	r3, [r7, #24]
}
 800b808:	bf00      	nop
 800b80a:	e7fe      	b.n	800b80a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b812:	f023 0301 	bic.w	r3, r3, #1
 800b816:	b2da      	uxtb	r2, r3
 800b818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b81e:	e03c      	b.n	800b89a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b822:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b826:	f043 0301 	orr.w	r3, r3, #1
 800b82a:	b2da      	uxtb	r2, r3
 800b82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b832:	68ba      	ldr	r2, [r7, #8]
 800b834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b836:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83a:	699b      	ldr	r3, [r3, #24]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10c      	bne.n	800b85a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800b840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b844:	b672      	cpsid	i
 800b846:	f383 8811 	msr	BASEPRI, r3
 800b84a:	f3bf 8f6f 	isb	sy
 800b84e:	f3bf 8f4f 	dsb	sy
 800b852:	b662      	cpsie	i
 800b854:	617b      	str	r3, [r7, #20]
}
 800b856:	bf00      	nop
 800b858:	e7fe      	b.n	800b858 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85c:	699a      	ldr	r2, [r3, #24]
 800b85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b860:	18d1      	adds	r1, r2, r3
 800b862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b868:	f7ff ff00 	bl	800b66c <prvInsertTimerInActiveList>
					break;
 800b86c:	e015      	b.n	800b89a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b874:	f003 0302 	and.w	r3, r3, #2
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d103      	bne.n	800b884 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800b87c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b87e:	f000 fc45 	bl	800c10c <vPortFree>
 800b882:	e00a      	b.n	800b89a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b88a:	f023 0301 	bic.w	r3, r3, #1
 800b88e:	b2da      	uxtb	r2, r3
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b896:	e000      	b.n	800b89a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800b898:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b89a:	4b08      	ldr	r3, [pc, #32]	; (800b8bc <prvProcessReceivedCommands+0x1cc>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	1d39      	adds	r1, r7, #4
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fd fffa 	bl	800989c <xQueueReceive>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f47f af24 	bne.w	800b6f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b8b0:	bf00      	nop
 800b8b2:	bf00      	nop
 800b8b4:	3730      	adds	r7, #48	; 0x30
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	200014b8 	.word	0x200014b8

0800b8c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b088      	sub	sp, #32
 800b8c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8c6:	e04a      	b.n	800b95e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8c8:	4b2e      	ldr	r3, [pc, #184]	; (800b984 <prvSwitchTimerLists+0xc4>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8d2:	4b2c      	ldr	r3, [pc, #176]	; (800b984 <prvSwitchTimerLists+0xc4>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	3304      	adds	r3, #4
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fd fcb9 	bl	8009258 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6a1b      	ldr	r3, [r3, #32]
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8f4:	f003 0304 	and.w	r3, r3, #4
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d030      	beq.n	800b95e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	693a      	ldr	r2, [r7, #16]
 800b902:	4413      	add	r3, r2
 800b904:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d90e      	bls.n	800b92c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	68ba      	ldr	r2, [r7, #8]
 800b912:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b91a:	4b1a      	ldr	r3, [pc, #104]	; (800b984 <prvSwitchTimerLists+0xc4>)
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	3304      	adds	r3, #4
 800b922:	4619      	mov	r1, r3
 800b924:	4610      	mov	r0, r2
 800b926:	f7fd fc5e 	bl	80091e6 <vListInsert>
 800b92a:	e018      	b.n	800b95e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b92c:	2300      	movs	r3, #0
 800b92e:	9300      	str	r3, [sp, #0]
 800b930:	2300      	movs	r3, #0
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	2100      	movs	r1, #0
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f7ff fd56 	bl	800b3e8 <xTimerGenericCommand>
 800b93c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d10c      	bne.n	800b95e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800b944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b948:	b672      	cpsid	i
 800b94a:	f383 8811 	msr	BASEPRI, r3
 800b94e:	f3bf 8f6f 	isb	sy
 800b952:	f3bf 8f4f 	dsb	sy
 800b956:	b662      	cpsie	i
 800b958:	603b      	str	r3, [r7, #0]
}
 800b95a:	bf00      	nop
 800b95c:	e7fe      	b.n	800b95c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b95e:	4b09      	ldr	r3, [pc, #36]	; (800b984 <prvSwitchTimerLists+0xc4>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1af      	bne.n	800b8c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b968:	4b06      	ldr	r3, [pc, #24]	; (800b984 <prvSwitchTimerLists+0xc4>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b96e:	4b06      	ldr	r3, [pc, #24]	; (800b988 <prvSwitchTimerLists+0xc8>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a04      	ldr	r2, [pc, #16]	; (800b984 <prvSwitchTimerLists+0xc4>)
 800b974:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b976:	4a04      	ldr	r2, [pc, #16]	; (800b988 <prvSwitchTimerLists+0xc8>)
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	6013      	str	r3, [r2, #0]
}
 800b97c:	bf00      	nop
 800b97e:	3718      	adds	r7, #24
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	200014b0 	.word	0x200014b0
 800b988:	200014b4 	.word	0x200014b4

0800b98c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b992:	f000 f96b 	bl	800bc6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b996:	4b15      	ldr	r3, [pc, #84]	; (800b9ec <prvCheckForValidListAndQueue+0x60>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d120      	bne.n	800b9e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b99e:	4814      	ldr	r0, [pc, #80]	; (800b9f0 <prvCheckForValidListAndQueue+0x64>)
 800b9a0:	f7fd fbd0 	bl	8009144 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b9a4:	4813      	ldr	r0, [pc, #76]	; (800b9f4 <prvCheckForValidListAndQueue+0x68>)
 800b9a6:	f7fd fbcd 	bl	8009144 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b9aa:	4b13      	ldr	r3, [pc, #76]	; (800b9f8 <prvCheckForValidListAndQueue+0x6c>)
 800b9ac:	4a10      	ldr	r2, [pc, #64]	; (800b9f0 <prvCheckForValidListAndQueue+0x64>)
 800b9ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b9b0:	4b12      	ldr	r3, [pc, #72]	; (800b9fc <prvCheckForValidListAndQueue+0x70>)
 800b9b2:	4a10      	ldr	r2, [pc, #64]	; (800b9f4 <prvCheckForValidListAndQueue+0x68>)
 800b9b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	9300      	str	r3, [sp, #0]
 800b9ba:	4b11      	ldr	r3, [pc, #68]	; (800ba00 <prvCheckForValidListAndQueue+0x74>)
 800b9bc:	4a11      	ldr	r2, [pc, #68]	; (800ba04 <prvCheckForValidListAndQueue+0x78>)
 800b9be:	2110      	movs	r1, #16
 800b9c0:	200a      	movs	r0, #10
 800b9c2:	f7fd fcdd 	bl	8009380 <xQueueGenericCreateStatic>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	4a08      	ldr	r2, [pc, #32]	; (800b9ec <prvCheckForValidListAndQueue+0x60>)
 800b9ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b9cc:	4b07      	ldr	r3, [pc, #28]	; (800b9ec <prvCheckForValidListAndQueue+0x60>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d005      	beq.n	800b9e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b9d4:	4b05      	ldr	r3, [pc, #20]	; (800b9ec <prvCheckForValidListAndQueue+0x60>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	490b      	ldr	r1, [pc, #44]	; (800ba08 <prvCheckForValidListAndQueue+0x7c>)
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7fe f984 	bl	8009ce8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9e0:	f000 f978 	bl	800bcd4 <vPortExitCritical>
}
 800b9e4:	bf00      	nop
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	200014b8 	.word	0x200014b8
 800b9f0:	20001488 	.word	0x20001488
 800b9f4:	2000149c 	.word	0x2000149c
 800b9f8:	200014b0 	.word	0x200014b0
 800b9fc:	200014b4 	.word	0x200014b4
 800ba00:	20001564 	.word	0x20001564
 800ba04:	200014c4 	.word	0x200014c4
 800ba08:	0800f018 	.word	0x0800f018

0800ba0c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10c      	bne.n	800ba38 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800ba1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba22:	b672      	cpsid	i
 800ba24:	f383 8811 	msr	BASEPRI, r3
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	b662      	cpsie	i
 800ba32:	60fb      	str	r3, [r7, #12]
}
 800ba34:	bf00      	nop
 800ba36:	e7fe      	b.n	800ba36 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800ba38:	f000 f918 	bl	800bc6c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	69db      	ldr	r3, [r3, #28]
 800ba40:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800ba42:	f000 f947 	bl	800bcd4 <vPortExitCritical>

	return pvReturn;
 800ba46:	693b      	ldr	r3, [r7, #16]
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3718      	adds	r7, #24
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba50:	b480      	push	{r7}
 800ba52:	b085      	sub	sp, #20
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	3b04      	subs	r3, #4
 800ba60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	3b04      	subs	r3, #4
 800ba6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	f023 0201 	bic.w	r2, r3, #1
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	3b04      	subs	r3, #4
 800ba7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba80:	4a0c      	ldr	r2, [pc, #48]	; (800bab4 <pxPortInitialiseStack+0x64>)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	3b14      	subs	r3, #20
 800ba8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	3b04      	subs	r3, #4
 800ba96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f06f 0202 	mvn.w	r2, #2
 800ba9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	3b20      	subs	r3, #32
 800baa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800baa6:	68fb      	ldr	r3, [r7, #12]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3714      	adds	r7, #20
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	0800bab9 	.word	0x0800bab9

0800bab8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800babe:	2300      	movs	r3, #0
 800bac0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bac2:	4b14      	ldr	r3, [pc, #80]	; (800bb14 <prvTaskExitError+0x5c>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baca:	d00c      	beq.n	800bae6 <prvTaskExitError+0x2e>
	__asm volatile
 800bacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad0:	b672      	cpsid	i
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	b662      	cpsie	i
 800bae0:	60fb      	str	r3, [r7, #12]
}
 800bae2:	bf00      	nop
 800bae4:	e7fe      	b.n	800bae4 <prvTaskExitError+0x2c>
	__asm volatile
 800bae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baea:	b672      	cpsid	i
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	b662      	cpsie	i
 800bafa:	60bb      	str	r3, [r7, #8]
}
 800bafc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bafe:	bf00      	nop
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d0fc      	beq.n	800bb00 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb06:	bf00      	nop
 800bb08:	bf00      	nop
 800bb0a:	3714      	adds	r7, #20
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr
 800bb14:	20000064 	.word	0x20000064
	...

0800bb20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bb20:	4b07      	ldr	r3, [pc, #28]	; (800bb40 <pxCurrentTCBConst2>)
 800bb22:	6819      	ldr	r1, [r3, #0]
 800bb24:	6808      	ldr	r0, [r1, #0]
 800bb26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb2a:	f380 8809 	msr	PSP, r0
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f04f 0000 	mov.w	r0, #0
 800bb36:	f380 8811 	msr	BASEPRI, r0
 800bb3a:	4770      	bx	lr
 800bb3c:	f3af 8000 	nop.w

0800bb40 <pxCurrentTCBConst2>:
 800bb40:	20000f88 	.word	0x20000f88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb44:	bf00      	nop
 800bb46:	bf00      	nop

0800bb48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb48:	4808      	ldr	r0, [pc, #32]	; (800bb6c <prvPortStartFirstTask+0x24>)
 800bb4a:	6800      	ldr	r0, [r0, #0]
 800bb4c:	6800      	ldr	r0, [r0, #0]
 800bb4e:	f380 8808 	msr	MSP, r0
 800bb52:	f04f 0000 	mov.w	r0, #0
 800bb56:	f380 8814 	msr	CONTROL, r0
 800bb5a:	b662      	cpsie	i
 800bb5c:	b661      	cpsie	f
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	f3bf 8f6f 	isb	sy
 800bb66:	df00      	svc	0
 800bb68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb6a:	bf00      	nop
 800bb6c:	e000ed08 	.word	0xe000ed08

0800bb70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb76:	4b37      	ldr	r3, [pc, #220]	; (800bc54 <xPortStartScheduler+0xe4>)
 800bb78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	22ff      	movs	r2, #255	; 0xff
 800bb86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb90:	78fb      	ldrb	r3, [r7, #3]
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb98:	b2da      	uxtb	r2, r3
 800bb9a:	4b2f      	ldr	r3, [pc, #188]	; (800bc58 <xPortStartScheduler+0xe8>)
 800bb9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb9e:	4b2f      	ldr	r3, [pc, #188]	; (800bc5c <xPortStartScheduler+0xec>)
 800bba0:	2207      	movs	r2, #7
 800bba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bba4:	e009      	b.n	800bbba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bba6:	4b2d      	ldr	r3, [pc, #180]	; (800bc5c <xPortStartScheduler+0xec>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	4a2b      	ldr	r2, [pc, #172]	; (800bc5c <xPortStartScheduler+0xec>)
 800bbae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bbb0:	78fb      	ldrb	r3, [r7, #3]
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	005b      	lsls	r3, r3, #1
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbba:	78fb      	ldrb	r3, [r7, #3]
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbc2:	2b80      	cmp	r3, #128	; 0x80
 800bbc4:	d0ef      	beq.n	800bba6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bbc6:	4b25      	ldr	r3, [pc, #148]	; (800bc5c <xPortStartScheduler+0xec>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f1c3 0307 	rsb	r3, r3, #7
 800bbce:	2b04      	cmp	r3, #4
 800bbd0:	d00c      	beq.n	800bbec <xPortStartScheduler+0x7c>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	b672      	cpsid	i
 800bbd8:	f383 8811 	msr	BASEPRI, r3
 800bbdc:	f3bf 8f6f 	isb	sy
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	b662      	cpsie	i
 800bbe6:	60bb      	str	r3, [r7, #8]
}
 800bbe8:	bf00      	nop
 800bbea:	e7fe      	b.n	800bbea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bbec:	4b1b      	ldr	r3, [pc, #108]	; (800bc5c <xPortStartScheduler+0xec>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	021b      	lsls	r3, r3, #8
 800bbf2:	4a1a      	ldr	r2, [pc, #104]	; (800bc5c <xPortStartScheduler+0xec>)
 800bbf4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bbf6:	4b19      	ldr	r3, [pc, #100]	; (800bc5c <xPortStartScheduler+0xec>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bbfe:	4a17      	ldr	r2, [pc, #92]	; (800bc5c <xPortStartScheduler+0xec>)
 800bc00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc0a:	4b15      	ldr	r3, [pc, #84]	; (800bc60 <xPortStartScheduler+0xf0>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4a14      	ldr	r2, [pc, #80]	; (800bc60 <xPortStartScheduler+0xf0>)
 800bc10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bc14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc16:	4b12      	ldr	r3, [pc, #72]	; (800bc60 <xPortStartScheduler+0xf0>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a11      	ldr	r2, [pc, #68]	; (800bc60 <xPortStartScheduler+0xf0>)
 800bc1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bc20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc22:	f000 f8dd 	bl	800bde0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc26:	4b0f      	ldr	r3, [pc, #60]	; (800bc64 <xPortStartScheduler+0xf4>)
 800bc28:	2200      	movs	r2, #0
 800bc2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bc2c:	f000 f8fc 	bl	800be28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bc30:	4b0d      	ldr	r3, [pc, #52]	; (800bc68 <xPortStartScheduler+0xf8>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a0c      	ldr	r2, [pc, #48]	; (800bc68 <xPortStartScheduler+0xf8>)
 800bc36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bc3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bc3c:	f7ff ff84 	bl	800bb48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc40:	f7fe ff18 	bl	800aa74 <vTaskSwitchContext>
	prvTaskExitError();
 800bc44:	f7ff ff38 	bl	800bab8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	e000e400 	.word	0xe000e400
 800bc58:	200015b4 	.word	0x200015b4
 800bc5c:	200015b8 	.word	0x200015b8
 800bc60:	e000ed20 	.word	0xe000ed20
 800bc64:	20000064 	.word	0x20000064
 800bc68:	e000ef34 	.word	0xe000ef34

0800bc6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
	__asm volatile
 800bc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc76:	b672      	cpsid	i
 800bc78:	f383 8811 	msr	BASEPRI, r3
 800bc7c:	f3bf 8f6f 	isb	sy
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	b662      	cpsie	i
 800bc86:	607b      	str	r3, [r7, #4]
}
 800bc88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc8a:	4b10      	ldr	r3, [pc, #64]	; (800bccc <vPortEnterCritical+0x60>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	4a0e      	ldr	r2, [pc, #56]	; (800bccc <vPortEnterCritical+0x60>)
 800bc92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc94:	4b0d      	ldr	r3, [pc, #52]	; (800bccc <vPortEnterCritical+0x60>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d111      	bne.n	800bcc0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc9c:	4b0c      	ldr	r3, [pc, #48]	; (800bcd0 <vPortEnterCritical+0x64>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00c      	beq.n	800bcc0 <vPortEnterCritical+0x54>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcaa:	b672      	cpsid	i
 800bcac:	f383 8811 	msr	BASEPRI, r3
 800bcb0:	f3bf 8f6f 	isb	sy
 800bcb4:	f3bf 8f4f 	dsb	sy
 800bcb8:	b662      	cpsie	i
 800bcba:	603b      	str	r3, [r7, #0]
}
 800bcbc:	bf00      	nop
 800bcbe:	e7fe      	b.n	800bcbe <vPortEnterCritical+0x52>
	}
}
 800bcc0:	bf00      	nop
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr
 800bccc:	20000064 	.word	0x20000064
 800bcd0:	e000ed04 	.word	0xe000ed04

0800bcd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bcda:	4b13      	ldr	r3, [pc, #76]	; (800bd28 <vPortExitCritical+0x54>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10c      	bne.n	800bcfc <vPortExitCritical+0x28>
	__asm volatile
 800bce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce6:	b672      	cpsid	i
 800bce8:	f383 8811 	msr	BASEPRI, r3
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	b662      	cpsie	i
 800bcf6:	607b      	str	r3, [r7, #4]
}
 800bcf8:	bf00      	nop
 800bcfa:	e7fe      	b.n	800bcfa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800bcfc:	4b0a      	ldr	r3, [pc, #40]	; (800bd28 <vPortExitCritical+0x54>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	3b01      	subs	r3, #1
 800bd02:	4a09      	ldr	r2, [pc, #36]	; (800bd28 <vPortExitCritical+0x54>)
 800bd04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd06:	4b08      	ldr	r3, [pc, #32]	; (800bd28 <vPortExitCritical+0x54>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d105      	bne.n	800bd1a <vPortExitCritical+0x46>
 800bd0e:	2300      	movs	r3, #0
 800bd10:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	f383 8811 	msr	BASEPRI, r3
}
 800bd18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bd1a:	bf00      	nop
 800bd1c:	370c      	adds	r7, #12
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop
 800bd28:	20000064 	.word	0x20000064
 800bd2c:	00000000 	.word	0x00000000

0800bd30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bd30:	f3ef 8009 	mrs	r0, PSP
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	4b15      	ldr	r3, [pc, #84]	; (800bd90 <pxCurrentTCBConst>)
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	f01e 0f10 	tst.w	lr, #16
 800bd40:	bf08      	it	eq
 800bd42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bd46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4a:	6010      	str	r0, [r2, #0]
 800bd4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bd54:	b672      	cpsid	i
 800bd56:	f380 8811 	msr	BASEPRI, r0
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	f3bf 8f6f 	isb	sy
 800bd62:	b662      	cpsie	i
 800bd64:	f7fe fe86 	bl	800aa74 <vTaskSwitchContext>
 800bd68:	f04f 0000 	mov.w	r0, #0
 800bd6c:	f380 8811 	msr	BASEPRI, r0
 800bd70:	bc09      	pop	{r0, r3}
 800bd72:	6819      	ldr	r1, [r3, #0]
 800bd74:	6808      	ldr	r0, [r1, #0]
 800bd76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7a:	f01e 0f10 	tst.w	lr, #16
 800bd7e:	bf08      	it	eq
 800bd80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd84:	f380 8809 	msr	PSP, r0
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop

0800bd90 <pxCurrentTCBConst>:
 800bd90:	20000f88 	.word	0x20000f88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd94:	bf00      	nop
 800bd96:	bf00      	nop

0800bd98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda2:	b672      	cpsid	i
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	b662      	cpsie	i
 800bdb2:	607b      	str	r3, [r7, #4]
}
 800bdb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bdb6:	f7fe fd9d 	bl	800a8f4 <xTaskIncrementTick>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d003      	beq.n	800bdc8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bdc0:	4b06      	ldr	r3, [pc, #24]	; (800bddc <SysTick_Handler+0x44>)
 800bdc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc6:	601a      	str	r2, [r3, #0]
 800bdc8:	2300      	movs	r3, #0
 800bdca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	f383 8811 	msr	BASEPRI, r3
}
 800bdd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bdd4:	bf00      	nop
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	e000ed04 	.word	0xe000ed04

0800bde0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bde0:	b480      	push	{r7}
 800bde2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bde4:	4b0b      	ldr	r3, [pc, #44]	; (800be14 <vPortSetupTimerInterrupt+0x34>)
 800bde6:	2200      	movs	r2, #0
 800bde8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bdea:	4b0b      	ldr	r3, [pc, #44]	; (800be18 <vPortSetupTimerInterrupt+0x38>)
 800bdec:	2200      	movs	r2, #0
 800bdee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bdf0:	4b0a      	ldr	r3, [pc, #40]	; (800be1c <vPortSetupTimerInterrupt+0x3c>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a0a      	ldr	r2, [pc, #40]	; (800be20 <vPortSetupTimerInterrupt+0x40>)
 800bdf6:	fba2 2303 	umull	r2, r3, r2, r3
 800bdfa:	099b      	lsrs	r3, r3, #6
 800bdfc:	4a09      	ldr	r2, [pc, #36]	; (800be24 <vPortSetupTimerInterrupt+0x44>)
 800bdfe:	3b01      	subs	r3, #1
 800be00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be02:	4b04      	ldr	r3, [pc, #16]	; (800be14 <vPortSetupTimerInterrupt+0x34>)
 800be04:	2207      	movs	r2, #7
 800be06:	601a      	str	r2, [r3, #0]
}
 800be08:	bf00      	nop
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	e000e010 	.word	0xe000e010
 800be18:	e000e018 	.word	0xe000e018
 800be1c:	20000058 	.word	0x20000058
 800be20:	10624dd3 	.word	0x10624dd3
 800be24:	e000e014 	.word	0xe000e014

0800be28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800be28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800be38 <vPortEnableVFP+0x10>
 800be2c:	6801      	ldr	r1, [r0, #0]
 800be2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800be32:	6001      	str	r1, [r0, #0]
 800be34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800be36:	bf00      	nop
 800be38:	e000ed88 	.word	0xe000ed88

0800be3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800be42:	f3ef 8305 	mrs	r3, IPSR
 800be46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2b0f      	cmp	r3, #15
 800be4c:	d916      	bls.n	800be7c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800be4e:	4a19      	ldr	r2, [pc, #100]	; (800beb4 <vPortValidateInterruptPriority+0x78>)
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	4413      	add	r3, r2
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800be58:	4b17      	ldr	r3, [pc, #92]	; (800beb8 <vPortValidateInterruptPriority+0x7c>)
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	7afa      	ldrb	r2, [r7, #11]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d20c      	bcs.n	800be7c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800be62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be66:	b672      	cpsid	i
 800be68:	f383 8811 	msr	BASEPRI, r3
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	b662      	cpsie	i
 800be76:	607b      	str	r3, [r7, #4]
}
 800be78:	bf00      	nop
 800be7a:	e7fe      	b.n	800be7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be7c:	4b0f      	ldr	r3, [pc, #60]	; (800bebc <vPortValidateInterruptPriority+0x80>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be84:	4b0e      	ldr	r3, [pc, #56]	; (800bec0 <vPortValidateInterruptPriority+0x84>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d90c      	bls.n	800bea6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800be8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be90:	b672      	cpsid	i
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	b662      	cpsie	i
 800bea0:	603b      	str	r3, [r7, #0]
}
 800bea2:	bf00      	nop
 800bea4:	e7fe      	b.n	800bea4 <vPortValidateInterruptPriority+0x68>
	}
 800bea6:	bf00      	nop
 800bea8:	3714      	adds	r7, #20
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	e000e3f0 	.word	0xe000e3f0
 800beb8:	200015b4 	.word	0x200015b4
 800bebc:	e000ed0c 	.word	0xe000ed0c
 800bec0:	200015b8 	.word	0x200015b8

0800bec4 <vSetVarulMaxPRIGROUPValue>:

#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800beca:	4b28      	ldr	r3, [pc, #160]	; (800bf6c <vSetVarulMaxPRIGROUPValue+0xa8>)
 800becc:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	22ff      	movs	r2, #255	; 0xff
 800beda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bee4:	78fb      	ldrb	r3, [r7, #3]
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800beec:	b2da      	uxtb	r2, r3
 800beee:	4b20      	ldr	r3, [pc, #128]	; (800bf70 <vSetVarulMaxPRIGROUPValue+0xac>)
 800bef0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bef2:	4b20      	ldr	r3, [pc, #128]	; (800bf74 <vSetVarulMaxPRIGROUPValue+0xb0>)
 800bef4:	2207      	movs	r2, #7
 800bef6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bef8:	e009      	b.n	800bf0e <vSetVarulMaxPRIGROUPValue+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800befa:	4b1e      	ldr	r3, [pc, #120]	; (800bf74 <vSetVarulMaxPRIGROUPValue+0xb0>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	3b01      	subs	r3, #1
 800bf00:	4a1c      	ldr	r2, [pc, #112]	; (800bf74 <vSetVarulMaxPRIGROUPValue+0xb0>)
 800bf02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf04:	78fb      	ldrb	r3, [r7, #3]
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	005b      	lsls	r3, r3, #1
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf0e:	78fb      	ldrb	r3, [r7, #3]
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf16:	2b80      	cmp	r3, #128	; 0x80
 800bf18:	d0ef      	beq.n	800befa <vSetVarulMaxPRIGROUPValue+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf1a:	4b16      	ldr	r3, [pc, #88]	; (800bf74 <vSetVarulMaxPRIGROUPValue+0xb0>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f1c3 0307 	rsb	r3, r3, #7
 800bf22:	2b04      	cmp	r3, #4
 800bf24:	d00c      	beq.n	800bf40 <vSetVarulMaxPRIGROUPValue+0x7c>
	__asm volatile
 800bf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2a:	b672      	cpsid	i
 800bf2c:	f383 8811 	msr	BASEPRI, r3
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	b662      	cpsie	i
 800bf3a:	60bb      	str	r3, [r7, #8]
}
 800bf3c:	bf00      	nop
 800bf3e:	e7fe      	b.n	800bf3e <vSetVarulMaxPRIGROUPValue+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bf40:	4b0c      	ldr	r3, [pc, #48]	; (800bf74 <vSetVarulMaxPRIGROUPValue+0xb0>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	021b      	lsls	r3, r3, #8
 800bf46:	4a0b      	ldr	r2, [pc, #44]	; (800bf74 <vSetVarulMaxPRIGROUPValue+0xb0>)
 800bf48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf4a:	4b0a      	ldr	r3, [pc, #40]	; (800bf74 <vSetVarulMaxPRIGROUPValue+0xb0>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bf52:	4a08      	ldr	r2, [pc, #32]	; (800bf74 <vSetVarulMaxPRIGROUPValue+0xb0>)
 800bf54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	b2da      	uxtb	r2, r3
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */
}
 800bf5e:	bf00      	nop
 800bf60:	3714      	adds	r7, #20
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	e000e400 	.word	0xe000e400
 800bf70:	200015b4 	.word	0x200015b4
 800bf74:	200015b8 	.word	0x200015b8

0800bf78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b08a      	sub	sp, #40	; 0x28
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf80:	2300      	movs	r3, #0
 800bf82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf84:	f7fe fbe2 	bl	800a74c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf88:	4b5b      	ldr	r3, [pc, #364]	; (800c0f8 <pvPortMalloc+0x180>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d101      	bne.n	800bf94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf90:	f000 f91a 	bl	800c1c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf94:	4b59      	ldr	r3, [pc, #356]	; (800c0fc <pvPortMalloc+0x184>)
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4013      	ands	r3, r2
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f040 8092 	bne.w	800c0c6 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d01f      	beq.n	800bfe8 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800bfa8:	2208      	movs	r2, #8
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	4413      	add	r3, r2
 800bfae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f003 0307 	and.w	r3, r3, #7
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d016      	beq.n	800bfe8 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f023 0307 	bic.w	r3, r3, #7
 800bfc0:	3308      	adds	r3, #8
 800bfc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f003 0307 	and.w	r3, r3, #7
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00c      	beq.n	800bfe8 <pvPortMalloc+0x70>
	__asm volatile
 800bfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd2:	b672      	cpsid	i
 800bfd4:	f383 8811 	msr	BASEPRI, r3
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	b662      	cpsie	i
 800bfe2:	617b      	str	r3, [r7, #20]
}
 800bfe4:	bf00      	nop
 800bfe6:	e7fe      	b.n	800bfe6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d06b      	beq.n	800c0c6 <pvPortMalloc+0x14e>
 800bfee:	4b44      	ldr	r3, [pc, #272]	; (800c100 <pvPortMalloc+0x188>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d866      	bhi.n	800c0c6 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bff8:	4b42      	ldr	r3, [pc, #264]	; (800c104 <pvPortMalloc+0x18c>)
 800bffa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bffc:	4b41      	ldr	r3, [pc, #260]	; (800c104 <pvPortMalloc+0x18c>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c002:	e004      	b.n	800c00e <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c006:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	429a      	cmp	r2, r3
 800c016:	d903      	bls.n	800c020 <pvPortMalloc+0xa8>
 800c018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1f1      	bne.n	800c004 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c020:	4b35      	ldr	r3, [pc, #212]	; (800c0f8 <pvPortMalloc+0x180>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c026:	429a      	cmp	r2, r3
 800c028:	d04d      	beq.n	800c0c6 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c02a:	6a3b      	ldr	r3, [r7, #32]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	2208      	movs	r2, #8
 800c030:	4413      	add	r3, r2
 800c032:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	6a3b      	ldr	r3, [r7, #32]
 800c03a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03e:	685a      	ldr	r2, [r3, #4]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	1ad2      	subs	r2, r2, r3
 800c044:	2308      	movs	r3, #8
 800c046:	005b      	lsls	r3, r3, #1
 800c048:	429a      	cmp	r2, r3
 800c04a:	d921      	bls.n	800c090 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c04c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4413      	add	r3, r2
 800c052:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	f003 0307 	and.w	r3, r3, #7
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00c      	beq.n	800c078 <pvPortMalloc+0x100>
	__asm volatile
 800c05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c062:	b672      	cpsid	i
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	b662      	cpsie	i
 800c072:	613b      	str	r3, [r7, #16]
}
 800c074:	bf00      	nop
 800c076:	e7fe      	b.n	800c076 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	1ad2      	subs	r2, r2, r3
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c08a:	69b8      	ldr	r0, [r7, #24]
 800c08c:	f000 f8fe 	bl	800c28c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c090:	4b1b      	ldr	r3, [pc, #108]	; (800c100 <pvPortMalloc+0x188>)
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	1ad3      	subs	r3, r2, r3
 800c09a:	4a19      	ldr	r2, [pc, #100]	; (800c100 <pvPortMalloc+0x188>)
 800c09c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c09e:	4b18      	ldr	r3, [pc, #96]	; (800c100 <pvPortMalloc+0x188>)
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	4b19      	ldr	r3, [pc, #100]	; (800c108 <pvPortMalloc+0x190>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d203      	bcs.n	800c0b2 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c0aa:	4b15      	ldr	r3, [pc, #84]	; (800c100 <pvPortMalloc+0x188>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4a16      	ldr	r2, [pc, #88]	; (800c108 <pvPortMalloc+0x190>)
 800c0b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b4:	685a      	ldr	r2, [r3, #4]
 800c0b6:	4b11      	ldr	r3, [pc, #68]	; (800c0fc <pvPortMalloc+0x184>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	431a      	orrs	r2, r3
 800c0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c0c6:	f7fe fb4f 	bl	800a768 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	f003 0307 	and.w	r3, r3, #7
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d00c      	beq.n	800c0ee <pvPortMalloc+0x176>
	__asm volatile
 800c0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d8:	b672      	cpsid	i
 800c0da:	f383 8811 	msr	BASEPRI, r3
 800c0de:	f3bf 8f6f 	isb	sy
 800c0e2:	f3bf 8f4f 	dsb	sy
 800c0e6:	b662      	cpsie	i
 800c0e8:	60fb      	str	r3, [r7, #12]
}
 800c0ea:	bf00      	nop
 800c0ec:	e7fe      	b.n	800c0ec <pvPortMalloc+0x174>
	return pvReturn;
 800c0ee:	69fb      	ldr	r3, [r7, #28]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3728      	adds	r7, #40	; 0x28
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	200051c4 	.word	0x200051c4
 800c0fc:	200051d0 	.word	0x200051d0
 800c100:	200051c8 	.word	0x200051c8
 800c104:	200051bc 	.word	0x200051bc
 800c108:	200051cc 	.word	0x200051cc

0800c10c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b086      	sub	sp, #24
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d04c      	beq.n	800c1b8 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c11e:	2308      	movs	r3, #8
 800c120:	425b      	negs	r3, r3
 800c122:	697a      	ldr	r2, [r7, #20]
 800c124:	4413      	add	r3, r2
 800c126:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	685a      	ldr	r2, [r3, #4]
 800c130:	4b23      	ldr	r3, [pc, #140]	; (800c1c0 <vPortFree+0xb4>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4013      	ands	r3, r2
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10c      	bne.n	800c154 <vPortFree+0x48>
	__asm volatile
 800c13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13e:	b672      	cpsid	i
 800c140:	f383 8811 	msr	BASEPRI, r3
 800c144:	f3bf 8f6f 	isb	sy
 800c148:	f3bf 8f4f 	dsb	sy
 800c14c:	b662      	cpsie	i
 800c14e:	60fb      	str	r3, [r7, #12]
}
 800c150:	bf00      	nop
 800c152:	e7fe      	b.n	800c152 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d00c      	beq.n	800c176 <vPortFree+0x6a>
	__asm volatile
 800c15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c160:	b672      	cpsid	i
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	b662      	cpsie	i
 800c170:	60bb      	str	r3, [r7, #8]
}
 800c172:	bf00      	nop
 800c174:	e7fe      	b.n	800c174 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	685a      	ldr	r2, [r3, #4]
 800c17a:	4b11      	ldr	r3, [pc, #68]	; (800c1c0 <vPortFree+0xb4>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4013      	ands	r3, r2
 800c180:	2b00      	cmp	r3, #0
 800c182:	d019      	beq.n	800c1b8 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d115      	bne.n	800c1b8 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	685a      	ldr	r2, [r3, #4]
 800c190:	4b0b      	ldr	r3, [pc, #44]	; (800c1c0 <vPortFree+0xb4>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	43db      	mvns	r3, r3
 800c196:	401a      	ands	r2, r3
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c19c:	f7fe fad6 	bl	800a74c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	685a      	ldr	r2, [r3, #4]
 800c1a4:	4b07      	ldr	r3, [pc, #28]	; (800c1c4 <vPortFree+0xb8>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	4a06      	ldr	r2, [pc, #24]	; (800c1c4 <vPortFree+0xb8>)
 800c1ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c1ae:	6938      	ldr	r0, [r7, #16]
 800c1b0:	f000 f86c 	bl	800c28c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c1b4:	f7fe fad8 	bl	800a768 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c1b8:	bf00      	nop
 800c1ba:	3718      	adds	r7, #24
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	200051d0 	.word	0x200051d0
 800c1c4:	200051c8 	.word	0x200051c8

0800c1c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c1ce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c1d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c1d4:	4b27      	ldr	r3, [pc, #156]	; (800c274 <prvHeapInit+0xac>)
 800c1d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f003 0307 	and.w	r3, r3, #7
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00c      	beq.n	800c1fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	3307      	adds	r3, #7
 800c1e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f023 0307 	bic.w	r3, r3, #7
 800c1ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c1f0:	68ba      	ldr	r2, [r7, #8]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	1ad3      	subs	r3, r2, r3
 800c1f6:	4a1f      	ldr	r2, [pc, #124]	; (800c274 <prvHeapInit+0xac>)
 800c1f8:	4413      	add	r3, r2
 800c1fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c200:	4a1d      	ldr	r2, [pc, #116]	; (800c278 <prvHeapInit+0xb0>)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c206:	4b1c      	ldr	r3, [pc, #112]	; (800c278 <prvHeapInit+0xb0>)
 800c208:	2200      	movs	r2, #0
 800c20a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	68ba      	ldr	r2, [r7, #8]
 800c210:	4413      	add	r3, r2
 800c212:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c214:	2208      	movs	r2, #8
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	1a9b      	subs	r3, r3, r2
 800c21a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f023 0307 	bic.w	r3, r3, #7
 800c222:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	4a15      	ldr	r2, [pc, #84]	; (800c27c <prvHeapInit+0xb4>)
 800c228:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c22a:	4b14      	ldr	r3, [pc, #80]	; (800c27c <prvHeapInit+0xb4>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2200      	movs	r2, #0
 800c230:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c232:	4b12      	ldr	r3, [pc, #72]	; (800c27c <prvHeapInit+0xb4>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	2200      	movs	r2, #0
 800c238:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	68fa      	ldr	r2, [r7, #12]
 800c242:	1ad2      	subs	r2, r2, r3
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c248:	4b0c      	ldr	r3, [pc, #48]	; (800c27c <prvHeapInit+0xb4>)
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	4a0a      	ldr	r2, [pc, #40]	; (800c280 <prvHeapInit+0xb8>)
 800c256:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	4a09      	ldr	r2, [pc, #36]	; (800c284 <prvHeapInit+0xbc>)
 800c25e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c260:	4b09      	ldr	r3, [pc, #36]	; (800c288 <prvHeapInit+0xc0>)
 800c262:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c266:	601a      	str	r2, [r3, #0]
}
 800c268:	bf00      	nop
 800c26a:	3714      	adds	r7, #20
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr
 800c274:	200015bc 	.word	0x200015bc
 800c278:	200051bc 	.word	0x200051bc
 800c27c:	200051c4 	.word	0x200051c4
 800c280:	200051cc 	.word	0x200051cc
 800c284:	200051c8 	.word	0x200051c8
 800c288:	200051d0 	.word	0x200051d0

0800c28c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c294:	4b28      	ldr	r3, [pc, #160]	; (800c338 <prvInsertBlockIntoFreeList+0xac>)
 800c296:	60fb      	str	r3, [r7, #12]
 800c298:	e002      	b.n	800c2a0 <prvInsertBlockIntoFreeList+0x14>
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	60fb      	str	r3, [r7, #12]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d8f7      	bhi.n	800c29a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d108      	bne.n	800c2ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	685a      	ldr	r2, [r3, #4]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	441a      	add	r2, r3
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	68ba      	ldr	r2, [r7, #8]
 800c2d8:	441a      	add	r2, r3
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d118      	bne.n	800c314 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	4b15      	ldr	r3, [pc, #84]	; (800c33c <prvInsertBlockIntoFreeList+0xb0>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d00d      	beq.n	800c30a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	685a      	ldr	r2, [r3, #4]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	441a      	add	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	601a      	str	r2, [r3, #0]
 800c308:	e008      	b.n	800c31c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c30a:	4b0c      	ldr	r3, [pc, #48]	; (800c33c <prvInsertBlockIntoFreeList+0xb0>)
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	601a      	str	r2, [r3, #0]
 800c312:	e003      	b.n	800c31c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	429a      	cmp	r2, r3
 800c322:	d002      	beq.n	800c32a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c32a:	bf00      	nop
 800c32c:	3714      	adds	r7, #20
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	200051bc 	.word	0x200051bc
 800c33c:	200051c4 	.word	0x200051c4

0800c340 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800c340:	b580      	push	{r7, lr}
 800c342:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800c344:	4803      	ldr	r0, [pc, #12]	; (800c354 <_cbSendSystemDesc+0x14>)
 800c346:	f001 fa9f 	bl	800d888 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800c34a:	4803      	ldr	r0, [pc, #12]	; (800c358 <_cbSendSystemDesc+0x18>)
 800c34c:	f001 fa9c 	bl	800d888 <SEGGER_SYSVIEW_SendSysDesc>
}
 800c350:	bf00      	nop
 800c352:	bd80      	pop	{r7, pc}
 800c354:	0800f020 	.word	0x0800f020
 800c358:	0800f058 	.word	0x0800f058

0800c35c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800c35c:	b580      	push	{r7, lr}
 800c35e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800c360:	4b06      	ldr	r3, [pc, #24]	; (800c37c <SEGGER_SYSVIEW_Conf+0x20>)
 800c362:	6818      	ldr	r0, [r3, #0]
 800c364:	4b05      	ldr	r3, [pc, #20]	; (800c37c <SEGGER_SYSVIEW_Conf+0x20>)
 800c366:	6819      	ldr	r1, [r3, #0]
 800c368:	4b05      	ldr	r3, [pc, #20]	; (800c380 <SEGGER_SYSVIEW_Conf+0x24>)
 800c36a:	4a06      	ldr	r2, [pc, #24]	; (800c384 <SEGGER_SYSVIEW_Conf+0x28>)
 800c36c:	f000 fe10 	bl	800cf90 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800c370:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800c374:	f000 fe4a 	bl	800d00c <SEGGER_SYSVIEW_SetRAMBase>
}
 800c378:	bf00      	nop
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	20000058 	.word	0x20000058
 800c380:	0800c341 	.word	0x0800c341
 800c384:	0801083c 	.word	0x0801083c

0800c388 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800c388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800c38e:	2300      	movs	r3, #0
 800c390:	607b      	str	r3, [r7, #4]
 800c392:	e048      	b.n	800c426 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800c394:	4929      	ldr	r1, [pc, #164]	; (800c43c <_cbSendTaskList+0xb4>)
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	4613      	mov	r3, r2
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	4413      	add	r3, r2
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	440b      	add	r3, r1
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fe fdc9 	bl	800af3c <uxTaskGetStackHighWaterMark>
 800c3aa:	4601      	mov	r1, r0
 800c3ac:	4823      	ldr	r0, [pc, #140]	; (800c43c <_cbSendTaskList+0xb4>)
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	4413      	add	r3, r2
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	4403      	add	r3, r0
 800c3ba:	3310      	adds	r3, #16
 800c3bc:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800c3be:	491f      	ldr	r1, [pc, #124]	; (800c43c <_cbSendTaskList+0xb4>)
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	4413      	add	r3, r2
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	440b      	add	r3, r1
 800c3cc:	6818      	ldr	r0, [r3, #0]
 800c3ce:	491b      	ldr	r1, [pc, #108]	; (800c43c <_cbSendTaskList+0xb4>)
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	4413      	add	r3, r2
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	440b      	add	r3, r1
 800c3dc:	3304      	adds	r3, #4
 800c3de:	6819      	ldr	r1, [r3, #0]
 800c3e0:	4c16      	ldr	r4, [pc, #88]	; (800c43c <_cbSendTaskList+0xb4>)
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	4613      	mov	r3, r2
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	4413      	add	r3, r2
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	4423      	add	r3, r4
 800c3ee:	3308      	adds	r3, #8
 800c3f0:	681c      	ldr	r4, [r3, #0]
 800c3f2:	4d12      	ldr	r5, [pc, #72]	; (800c43c <_cbSendTaskList+0xb4>)
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	009b      	lsls	r3, r3, #2
 800c3fe:	442b      	add	r3, r5
 800c400:	330c      	adds	r3, #12
 800c402:	681d      	ldr	r5, [r3, #0]
 800c404:	4e0d      	ldr	r6, [pc, #52]	; (800c43c <_cbSendTaskList+0xb4>)
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	4613      	mov	r3, r2
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	4413      	add	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	4433      	add	r3, r6
 800c412:	3310      	adds	r3, #16
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	9300      	str	r3, [sp, #0]
 800c418:	462b      	mov	r3, r5
 800c41a:	4622      	mov	r2, r4
 800c41c:	f000 f97a 	bl	800c714 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	3301      	adds	r3, #1
 800c424:	607b      	str	r3, [r7, #4]
 800c426:	4b06      	ldr	r3, [pc, #24]	; (800c440 <_cbSendTaskList+0xb8>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d3b1      	bcc.n	800c394 <_cbSendTaskList+0xc>
  }
}
 800c430:	bf00      	nop
 800c432:	bf00      	nop
 800c434:	370c      	adds	r7, #12
 800c436:	46bd      	mov	sp, r7
 800c438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c43a:	bf00      	nop
 800c43c:	200051d4 	.word	0x200051d4
 800c440:	20005454 	.word	0x20005454

0800c444 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800c444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c448:	b082      	sub	sp, #8
 800c44a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800c44c:	f7fe fa40 	bl	800a8d0 <xTaskGetTickCountFromISR>
 800c450:	4603      	mov	r3, r0
 800c452:	2200      	movs	r2, #0
 800c454:	469a      	mov	sl, r3
 800c456:	4693      	mov	fp, r2
 800c458:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800c45c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	f04f 0a00 	mov.w	sl, #0
 800c468:	f04f 0b00 	mov.w	fp, #0
 800c46c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800c470:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800c474:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800c478:	4652      	mov	r2, sl
 800c47a:	465b      	mov	r3, fp
 800c47c:	1a14      	subs	r4, r2, r0
 800c47e:	eb63 0501 	sbc.w	r5, r3, r1
 800c482:	f04f 0200 	mov.w	r2, #0
 800c486:	f04f 0300 	mov.w	r3, #0
 800c48a:	00ab      	lsls	r3, r5, #2
 800c48c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800c490:	00a2      	lsls	r2, r4, #2
 800c492:	4614      	mov	r4, r2
 800c494:	461d      	mov	r5, r3
 800c496:	eb14 0800 	adds.w	r8, r4, r0
 800c49a:	eb45 0901 	adc.w	r9, r5, r1
 800c49e:	f04f 0200 	mov.w	r2, #0
 800c4a2:	f04f 0300 	mov.w	r3, #0
 800c4a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c4aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c4ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c4b2:	4690      	mov	r8, r2
 800c4b4:	4699      	mov	r9, r3
 800c4b6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800c4ba:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800c4be:	4610      	mov	r0, r2
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	3708      	adds	r7, #8
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800c4cc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b086      	sub	sp, #24
 800c4d0:	af02      	add	r7, sp, #8
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
 800c4d8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800c4da:	2205      	movs	r2, #5
 800c4dc:	492b      	ldr	r1, [pc, #172]	; (800c58c <SYSVIEW_AddTask+0xc0>)
 800c4de:	68b8      	ldr	r0, [r7, #8]
 800c4e0:	f001 fdbf 	bl	800e062 <memcmp>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d04b      	beq.n	800c582 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800c4ea:	4b29      	ldr	r3, [pc, #164]	; (800c590 <SYSVIEW_AddTask+0xc4>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2b1f      	cmp	r3, #31
 800c4f0:	d903      	bls.n	800c4fa <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800c4f2:	4828      	ldr	r0, [pc, #160]	; (800c594 <SYSVIEW_AddTask+0xc8>)
 800c4f4:	f001 fc54 	bl	800dda0 <SEGGER_SYSVIEW_Warn>
    return;
 800c4f8:	e044      	b.n	800c584 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800c4fa:	4b25      	ldr	r3, [pc, #148]	; (800c590 <SYSVIEW_AddTask+0xc4>)
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	4926      	ldr	r1, [pc, #152]	; (800c598 <SYSVIEW_AddTask+0xcc>)
 800c500:	4613      	mov	r3, r2
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	4413      	add	r3, r2
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	440b      	add	r3, r1
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800c50e:	4b20      	ldr	r3, [pc, #128]	; (800c590 <SYSVIEW_AddTask+0xc4>)
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	4921      	ldr	r1, [pc, #132]	; (800c598 <SYSVIEW_AddTask+0xcc>)
 800c514:	4613      	mov	r3, r2
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	4413      	add	r3, r2
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	440b      	add	r3, r1
 800c51e:	3304      	adds	r3, #4
 800c520:	68ba      	ldr	r2, [r7, #8]
 800c522:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800c524:	4b1a      	ldr	r3, [pc, #104]	; (800c590 <SYSVIEW_AddTask+0xc4>)
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	491b      	ldr	r1, [pc, #108]	; (800c598 <SYSVIEW_AddTask+0xcc>)
 800c52a:	4613      	mov	r3, r2
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	4413      	add	r3, r2
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	440b      	add	r3, r1
 800c534:	3308      	adds	r3, #8
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800c53a:	4b15      	ldr	r3, [pc, #84]	; (800c590 <SYSVIEW_AddTask+0xc4>)
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	4916      	ldr	r1, [pc, #88]	; (800c598 <SYSVIEW_AddTask+0xcc>)
 800c540:	4613      	mov	r3, r2
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	4413      	add	r3, r2
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	440b      	add	r3, r1
 800c54a:	330c      	adds	r3, #12
 800c54c:	683a      	ldr	r2, [r7, #0]
 800c54e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800c550:	4b0f      	ldr	r3, [pc, #60]	; (800c590 <SYSVIEW_AddTask+0xc4>)
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	4910      	ldr	r1, [pc, #64]	; (800c598 <SYSVIEW_AddTask+0xcc>)
 800c556:	4613      	mov	r3, r2
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	4413      	add	r3, r2
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	440b      	add	r3, r1
 800c560:	3310      	adds	r3, #16
 800c562:	69ba      	ldr	r2, [r7, #24]
 800c564:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800c566:	4b0a      	ldr	r3, [pc, #40]	; (800c590 <SYSVIEW_AddTask+0xc4>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	3301      	adds	r3, #1
 800c56c:	4a08      	ldr	r2, [pc, #32]	; (800c590 <SYSVIEW_AddTask+0xc4>)
 800c56e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	9300      	str	r3, [sp, #0]
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	68b9      	ldr	r1, [r7, #8]
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	f000 f8ca 	bl	800c714 <SYSVIEW_SendTaskInfo>
 800c580:	e000      	b.n	800c584 <SYSVIEW_AddTask+0xb8>
    return;
 800c582:	bf00      	nop

}
 800c584:	3710      	adds	r7, #16
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	0800f068 	.word	0x0800f068
 800c590:	20005454 	.word	0x20005454
 800c594:	0800f070 	.word	0x0800f070
 800c598:	200051d4 	.word	0x200051d4

0800c59c <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800c5a4:	4b59      	ldr	r3, [pc, #356]	; (800c70c <SYSVIEW_DeleteTask+0x170>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f000 80ab 	beq.w	800c704 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	60fb      	str	r3, [r7, #12]
 800c5b2:	e00d      	b.n	800c5d0 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800c5b4:	4956      	ldr	r1, [pc, #344]	; (800c710 <SYSVIEW_DeleteTask+0x174>)
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	4413      	add	r3, r2
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	440b      	add	r3, r1
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d008      	beq.n	800c5dc <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	60fb      	str	r3, [r7, #12]
 800c5d0:	4b4e      	ldr	r3, [pc, #312]	; (800c70c <SYSVIEW_DeleteTask+0x170>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	68fa      	ldr	r2, [r7, #12]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d3ec      	bcc.n	800c5b4 <SYSVIEW_DeleteTask+0x18>
 800c5da:	e000      	b.n	800c5de <SYSVIEW_DeleteTask+0x42>
      break;
 800c5dc:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800c5de:	4b4b      	ldr	r3, [pc, #300]	; (800c70c <SYSVIEW_DeleteTask+0x170>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d111      	bne.n	800c60e <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	4413      	add	r3, r2
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	4a46      	ldr	r2, [pc, #280]	; (800c710 <SYSVIEW_DeleteTask+0x174>)
 800c5f6:	4413      	add	r3, r2
 800c5f8:	2214      	movs	r2, #20
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f001 fd40 	bl	800e082 <memset>
    _NumTasks--;
 800c602:	4b42      	ldr	r3, [pc, #264]	; (800c70c <SYSVIEW_DeleteTask+0x170>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	3b01      	subs	r3, #1
 800c608:	4a40      	ldr	r2, [pc, #256]	; (800c70c <SYSVIEW_DeleteTask+0x170>)
 800c60a:	6013      	str	r3, [r2, #0]
 800c60c:	e07b      	b.n	800c706 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800c60e:	4b3f      	ldr	r3, [pc, #252]	; (800c70c <SYSVIEW_DeleteTask+0x170>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	429a      	cmp	r2, r3
 800c616:	d276      	bcs.n	800c706 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800c618:	4b3c      	ldr	r3, [pc, #240]	; (800c70c <SYSVIEW_DeleteTask+0x170>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	1e5a      	subs	r2, r3, #1
 800c61e:	493c      	ldr	r1, [pc, #240]	; (800c710 <SYSVIEW_DeleteTask+0x174>)
 800c620:	4613      	mov	r3, r2
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	4413      	add	r3, r2
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	440b      	add	r3, r1
 800c62a:	6819      	ldr	r1, [r3, #0]
 800c62c:	4838      	ldr	r0, [pc, #224]	; (800c710 <SYSVIEW_DeleteTask+0x174>)
 800c62e:	68fa      	ldr	r2, [r7, #12]
 800c630:	4613      	mov	r3, r2
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	4413      	add	r3, r2
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	4403      	add	r3, r0
 800c63a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 800c63c:	4b33      	ldr	r3, [pc, #204]	; (800c70c <SYSVIEW_DeleteTask+0x170>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	1e5a      	subs	r2, r3, #1
 800c642:	4933      	ldr	r1, [pc, #204]	; (800c710 <SYSVIEW_DeleteTask+0x174>)
 800c644:	4613      	mov	r3, r2
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	4413      	add	r3, r2
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	440b      	add	r3, r1
 800c64e:	3304      	adds	r3, #4
 800c650:	6819      	ldr	r1, [r3, #0]
 800c652:	482f      	ldr	r0, [pc, #188]	; (800c710 <SYSVIEW_DeleteTask+0x174>)
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	4613      	mov	r3, r2
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	4413      	add	r3, r2
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	4403      	add	r3, r0
 800c660:	3304      	adds	r3, #4
 800c662:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800c664:	4b29      	ldr	r3, [pc, #164]	; (800c70c <SYSVIEW_DeleteTask+0x170>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	1e5a      	subs	r2, r3, #1
 800c66a:	4929      	ldr	r1, [pc, #164]	; (800c710 <SYSVIEW_DeleteTask+0x174>)
 800c66c:	4613      	mov	r3, r2
 800c66e:	009b      	lsls	r3, r3, #2
 800c670:	4413      	add	r3, r2
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	440b      	add	r3, r1
 800c676:	3308      	adds	r3, #8
 800c678:	6819      	ldr	r1, [r3, #0]
 800c67a:	4825      	ldr	r0, [pc, #148]	; (800c710 <SYSVIEW_DeleteTask+0x174>)
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	4613      	mov	r3, r2
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4413      	add	r3, r2
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	4403      	add	r3, r0
 800c688:	3308      	adds	r3, #8
 800c68a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 800c68c:	4b1f      	ldr	r3, [pc, #124]	; (800c70c <SYSVIEW_DeleteTask+0x170>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	1e5a      	subs	r2, r3, #1
 800c692:	491f      	ldr	r1, [pc, #124]	; (800c710 <SYSVIEW_DeleteTask+0x174>)
 800c694:	4613      	mov	r3, r2
 800c696:	009b      	lsls	r3, r3, #2
 800c698:	4413      	add	r3, r2
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	440b      	add	r3, r1
 800c69e:	330c      	adds	r3, #12
 800c6a0:	6819      	ldr	r1, [r3, #0]
 800c6a2:	481b      	ldr	r0, [pc, #108]	; (800c710 <SYSVIEW_DeleteTask+0x174>)
 800c6a4:	68fa      	ldr	r2, [r7, #12]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	4413      	add	r3, r2
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	4403      	add	r3, r0
 800c6b0:	330c      	adds	r3, #12
 800c6b2:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800c6b4:	4b15      	ldr	r3, [pc, #84]	; (800c70c <SYSVIEW_DeleteTask+0x170>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	1e5a      	subs	r2, r3, #1
 800c6ba:	4915      	ldr	r1, [pc, #84]	; (800c710 <SYSVIEW_DeleteTask+0x174>)
 800c6bc:	4613      	mov	r3, r2
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	4413      	add	r3, r2
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	440b      	add	r3, r1
 800c6c6:	3310      	adds	r3, #16
 800c6c8:	6819      	ldr	r1, [r3, #0]
 800c6ca:	4811      	ldr	r0, [pc, #68]	; (800c710 <SYSVIEW_DeleteTask+0x174>)
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	4413      	add	r3, r2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	4403      	add	r3, r0
 800c6d8:	3310      	adds	r3, #16
 800c6da:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 800c6dc:	4b0b      	ldr	r3, [pc, #44]	; (800c70c <SYSVIEW_DeleteTask+0x170>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	1e5a      	subs	r2, r3, #1
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4413      	add	r3, r2
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	4a09      	ldr	r2, [pc, #36]	; (800c710 <SYSVIEW_DeleteTask+0x174>)
 800c6ec:	4413      	add	r3, r2
 800c6ee:	2214      	movs	r2, #20
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f001 fcc5 	bl	800e082 <memset>
    _NumTasks--;
 800c6f8:	4b04      	ldr	r3, [pc, #16]	; (800c70c <SYSVIEW_DeleteTask+0x170>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	4a03      	ldr	r2, [pc, #12]	; (800c70c <SYSVIEW_DeleteTask+0x170>)
 800c700:	6013      	str	r3, [r2, #0]
 800c702:	e000      	b.n	800c706 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800c704:	bf00      	nop
  }
}
 800c706:	3710      	adds	r7, #16
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	20005454 	.word	0x20005454
 800c710:	200051d4 	.word	0x200051d4

0800c714 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800c714:	b580      	push	{r7, lr}
 800c716:	b08a      	sub	sp, #40	; 0x28
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	60b9      	str	r1, [r7, #8]
 800c71e:	607a      	str	r2, [r7, #4]
 800c720:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800c722:	f107 0314 	add.w	r3, r7, #20
 800c726:	2214      	movs	r2, #20
 800c728:	2100      	movs	r1, #0
 800c72a:	4618      	mov	r0, r3
 800c72c:	f001 fca9 	bl	800e082 <memset>
  TaskInfo.TaskID     = TaskID;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800c740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c742:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800c744:	f107 0314 	add.w	r3, r7, #20
 800c748:	4618      	mov	r0, r3
 800c74a:	f000 ffa3 	bl	800d694 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800c74e:	bf00      	nop
 800c750:	3728      	adds	r7, #40	; 0x28
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
	...

0800c758 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800c75e:	4b21      	ldr	r3, [pc, #132]	; (800c7e4 <_DoInit+0x8c>)
 800c760:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2203      	movs	r2, #3
 800c766:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2203      	movs	r2, #3
 800c76c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	4a1d      	ldr	r2, [pc, #116]	; (800c7e8 <_DoInit+0x90>)
 800c772:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	4a1d      	ldr	r2, [pc, #116]	; (800c7ec <_DoInit+0x94>)
 800c778:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c780:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	4a14      	ldr	r2, [pc, #80]	; (800c7e8 <_DoInit+0x90>)
 800c798:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	4a14      	ldr	r2, [pc, #80]	; (800c7f0 <_DoInit+0x98>)
 800c79e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2210      	movs	r2, #16
 800c7a4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY(&p->acID[7], "RTT", 9);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	3307      	adds	r3, #7
 800c7bc:	4a0d      	ldr	r2, [pc, #52]	; (800c7f4 <_DoInit+0x9c>)
 800c7be:	6810      	ldr	r0, [r2, #0]
 800c7c0:	6018      	str	r0, [r3, #0]
  STRCPY(&p->acID[0], "SEGGER", 7);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4a0c      	ldr	r2, [pc, #48]	; (800c7f8 <_DoInit+0xa0>)
 800c7c6:	6810      	ldr	r0, [r2, #0]
 800c7c8:	6018      	str	r0, [r3, #0]
 800c7ca:	8891      	ldrh	r1, [r2, #4]
 800c7cc:	7992      	ldrb	r2, [r2, #6]
 800c7ce:	8099      	strh	r1, [r3, #4]
 800c7d0:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2220      	movs	r2, #32
 800c7d6:	719a      	strb	r2, [r3, #6]
}
 800c7d8:	bf00      	nop
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr
 800c7e4:	20005458 	.word	0x20005458
 800c7e8:	0800f0c0 	.word	0x0800f0c0
 800c7ec:	20005500 	.word	0x20005500
 800c7f0:	20005900 	.word	0x20005900
 800c7f4:	0800f0cc 	.word	0x0800f0cc
 800c7f8:	0800f0d0 	.word	0x0800f0d0

0800c7fc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b08a      	sub	sp, #40	; 0x28
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800c808:	4b3c      	ldr	r3, [pc, #240]	; (800c8fc <SEGGER_RTT_ReadNoLock+0x100>)
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d101      	bne.n	800c814 <SEGGER_RTT_ReadNoLock+0x18>
 800c810:	f7ff ffa2 	bl	800c758 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	4613      	mov	r3, r2
 800c818:	005b      	lsls	r3, r3, #1
 800c81a:	4413      	add	r3, r2
 800c81c:	00db      	lsls	r3, r3, #3
 800c81e:	3360      	adds	r3, #96	; 0x60
 800c820:	4a36      	ldr	r2, [pc, #216]	; (800c8fc <SEGGER_RTT_ReadNoLock+0x100>)
 800c822:	4413      	add	r3, r2
 800c824:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	68db      	ldr	r3, [r3, #12]
 800c834:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800c836:	2300      	movs	r3, #0
 800c838:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800c83a:	6a3a      	ldr	r2, [r7, #32]
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d92a      	bls.n	800c898 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	689a      	ldr	r2, [r3, #8]
 800c846:	6a3b      	ldr	r3, [r7, #32]
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c84c:	693a      	ldr	r2, [r7, #16]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4293      	cmp	r3, r2
 800c852:	bf28      	it	cs
 800c854:	4613      	movcs	r3, r2
 800c856:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800c858:	69bb      	ldr	r3, [r7, #24]
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	6a3b      	ldr	r3, [r7, #32]
 800c85e:	4413      	add	r3, r2
 800c860:	693a      	ldr	r2, [r7, #16]
 800c862:	4619      	mov	r1, r3
 800c864:	69f8      	ldr	r0, [r7, #28]
 800c866:	f001 fcdd 	bl	800e224 <memcpy>
    NumBytesRead += NumBytesRem;
 800c86a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	4413      	add	r3, r2
 800c870:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800c872:	69fa      	ldr	r2, [r7, #28]
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	4413      	add	r3, r2
 800c878:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	1ad3      	subs	r3, r2, r3
 800c880:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c882:	6a3a      	ldr	r2, [r7, #32]
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	4413      	add	r3, r2
 800c888:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	6a3a      	ldr	r2, [r7, #32]
 800c890:	429a      	cmp	r2, r3
 800c892:	d101      	bne.n	800c898 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 800c894:	2300      	movs	r3, #0
 800c896:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800c898:	697a      	ldr	r2, [r7, #20]
 800c89a:	6a3b      	ldr	r3, [r7, #32]
 800c89c:	1ad3      	subs	r3, r2, r3
 800c89e:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c8a0:	693a      	ldr	r2, [r7, #16]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	bf28      	it	cs
 800c8a8:	4613      	movcs	r3, r2
 800c8aa:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d018      	beq.n	800c8e4 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	685a      	ldr	r2, [r3, #4]
 800c8b6:	6a3b      	ldr	r3, [r7, #32]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	693a      	ldr	r2, [r7, #16]
 800c8bc:	4619      	mov	r1, r3
 800c8be:	69f8      	ldr	r0, [r7, #28]
 800c8c0:	f001 fcb0 	bl	800e224 <memcpy>
    NumBytesRead += NumBytesRem;
 800c8c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800c8cc:	69fa      	ldr	r2, [r7, #28]
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	1ad3      	subs	r3, r2, r3
 800c8da:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c8dc:	6a3a      	ldr	r2, [r7, #32]
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d002      	beq.n	800c8f0 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	6a3a      	ldr	r2, [r7, #32]
 800c8ee:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3728      	adds	r7, #40	; 0x28
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	20005458 	.word	0x20005458

0800c900 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800c900:	b580      	push	{r7, lr}
 800c902:	b08a      	sub	sp, #40	; 0x28
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	607a      	str	r2, [r7, #4]
  //   4) RdOff >  WrOff => Space is sufficient
  //   5) RdOff >  WrOff => No space in buf
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	627b      	str	r3, [r7, #36]	; 0x24
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	1c5a      	adds	r2, r3, #1
 800c914:	4613      	mov	r3, r2
 800c916:	005b      	lsls	r3, r3, #1
 800c918:	4413      	add	r3, r2
 800c91a:	00db      	lsls	r3, r3, #3
 800c91c:	4a31      	ldr	r2, [pc, #196]	; (800c9e4 <SEGGER_RTT_WriteSkipNoLock+0xe4>)
 800c91e:	4413      	add	r3, r2
 800c920:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 800c922:	6a3b      	ldr	r3, [r7, #32]
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 800c928:	6a3b      	ldr	r3, [r7, #32]
 800c92a:	68db      	ldr	r3, [r3, #12]
 800c92c:	61bb      	str	r3, [r7, #24]
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 800c92e:	69fa      	ldr	r2, [r7, #28]
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	429a      	cmp	r2, r3
 800c934:	d847      	bhi.n	800c9c6 <SEGGER_RTT_WriteSkipNoLock+0xc6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800c936:	6a3b      	ldr	r3, [r7, #32]
 800c938:	689a      	ldr	r2, [r3, #8]
 800c93a:	69bb      	ldr	r3, [r7, #24]
 800c93c:	1ad3      	subs	r3, r2, r3
 800c93e:	3b01      	subs	r3, #1
 800c940:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {                            // Case 1)?
 800c942:	697a      	ldr	r2, [r7, #20]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	429a      	cmp	r2, r3
 800c948:	d312      	bcc.n	800c970 <SEGGER_RTT_WriteSkipNoLock+0x70>
CopyStraight:
 800c94a:	bf00      	nop
 800c94c:	e000      	b.n	800c950 <SEGGER_RTT_WriteSkipNoLock+0x50>
      return 1;
    }
  } else {                                             // Potential case 4)
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
 800c94e:	bf00      	nop
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 800c950:	6a3b      	ldr	r3, [r7, #32]
 800c952:	685a      	ldr	r2, [r3, #4]
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	4413      	add	r3, r2
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c95c:	4618      	mov	r0, r3
 800c95e:	f001 fc61 	bl	800e224 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 800c962:	69ba      	ldr	r2, [r7, #24]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	441a      	add	r2, r3
 800c968:	6a3b      	ldr	r3, [r7, #32]
 800c96a:	60da      	str	r2, [r3, #12]
      return 1;
 800c96c:	2301      	movs	r3, #1
 800c96e:	e034      	b.n	800c9da <SEGGER_RTT_WriteSkipNoLock+0xda>
    Avail += RdOff;                                     // Space incl. wrap-around
 800c970:	697a      	ldr	r2, [r7, #20]
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	4413      	add	r3, r2
 800c976:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
 800c978:	697a      	ldr	r2, [r7, #20]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d32b      	bcc.n	800c9d8 <SEGGER_RTT_WriteSkipNoLock+0xd8>
      Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 800c980:	6a3b      	ldr	r3, [r7, #32]
 800c982:	689a      	ldr	r2, [r3, #8]
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	613b      	str	r3, [r7, #16]
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
 800c98a:	6a3b      	ldr	r3, [r7, #32]
 800c98c:	685a      	ldr	r2, [r3, #4]
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	4413      	add	r3, r2
 800c992:	693a      	ldr	r2, [r7, #16]
 800c994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c996:	4618      	mov	r0, r3
 800c998:	f001 fc44 	bl	800e224 <memcpy>
      NumBytes -= Rem;
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	607b      	str	r3, [r7, #4]
      if (NumBytes) {
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d008      	beq.n	800c9bc <SEGGER_RTT_WriteSkipNoLock+0xbc>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
 800c9aa:	6a3b      	ldr	r3, [r7, #32]
 800c9ac:	6858      	ldr	r0, [r3, #4]
 800c9ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	4413      	add	r3, r2
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	f001 fc34 	bl	800e224 <memcpy>
      pRing->WrOff = NumBytes;
 800c9bc:	6a3b      	ldr	r3, [r7, #32]
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	60da      	str	r2, [r3, #12]
      return 1;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	e009      	b.n	800c9da <SEGGER_RTT_WriteSkipNoLock+0xda>
    Avail = RdOff - WrOff - 1u;
 800c9c6:	69fa      	ldr	r2, [r7, #28]
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	1ad3      	subs	r3, r2, r3
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
 800c9d0:	697a      	ldr	r2, [r7, #20]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d2ba      	bcs.n	800c94e <SEGGER_RTT_WriteSkipNoLock+0x4e>
    }
  }
  return 0;     // No space in buffer
 800c9d8:	2300      	movs	r3, #0
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3728      	adds	r7, #40	; 0x28
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	20005458 	.word	0x20005458

0800c9e8 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b086      	sub	sp, #24
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	607a      	str	r2, [r7, #4]
 800c9f4:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800c9f6:	4b30      	ldr	r3, [pc, #192]	; (800cab8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d101      	bne.n	800ca02 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800c9fe:	f7ff feab 	bl	800c758 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800ca02:	4b2d      	ldr	r3, [pc, #180]	; (800cab8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	461a      	mov	r2, r3
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d24c      	bcs.n	800caa8 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800ca0e:	f3ef 8311 	mrs	r3, BASEPRI
 800ca12:	f04f 0120 	mov.w	r1, #32
 800ca16:	f381 8811 	msr	BASEPRI, r1
 800ca1a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d032      	beq.n	800ca88 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800ca22:	4925      	ldr	r1, [pc, #148]	; (800cab8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	1c5a      	adds	r2, r3, #1
 800ca28:	4613      	mov	r3, r2
 800ca2a:	005b      	lsls	r3, r3, #1
 800ca2c:	4413      	add	r3, r2
 800ca2e:	00db      	lsls	r3, r3, #3
 800ca30:	440b      	add	r3, r1
 800ca32:	68ba      	ldr	r2, [r7, #8]
 800ca34:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800ca36:	4920      	ldr	r1, [pc, #128]	; (800cab8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	1c5a      	adds	r2, r3, #1
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	005b      	lsls	r3, r3, #1
 800ca40:	4413      	add	r3, r2
 800ca42:	00db      	lsls	r3, r3, #3
 800ca44:	440b      	add	r3, r1
 800ca46:	3304      	adds	r3, #4
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800ca4c:	491a      	ldr	r1, [pc, #104]	; (800cab8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	4613      	mov	r3, r2
 800ca52:	005b      	lsls	r3, r3, #1
 800ca54:	4413      	add	r3, r2
 800ca56:	00db      	lsls	r3, r3, #3
 800ca58:	440b      	add	r3, r1
 800ca5a:	3320      	adds	r3, #32
 800ca5c:	683a      	ldr	r2, [r7, #0]
 800ca5e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800ca60:	4915      	ldr	r1, [pc, #84]	; (800cab8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800ca62:	68fa      	ldr	r2, [r7, #12]
 800ca64:	4613      	mov	r3, r2
 800ca66:	005b      	lsls	r3, r3, #1
 800ca68:	4413      	add	r3, r2
 800ca6a:	00db      	lsls	r3, r3, #3
 800ca6c:	440b      	add	r3, r1
 800ca6e:	3328      	adds	r3, #40	; 0x28
 800ca70:	2200      	movs	r2, #0
 800ca72:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 800ca74:	4910      	ldr	r1, [pc, #64]	; (800cab8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800ca76:	68fa      	ldr	r2, [r7, #12]
 800ca78:	4613      	mov	r3, r2
 800ca7a:	005b      	lsls	r3, r3, #1
 800ca7c:	4413      	add	r3, r2
 800ca7e:	00db      	lsls	r3, r3, #3
 800ca80:	440b      	add	r3, r1
 800ca82:	3324      	adds	r3, #36	; 0x24
 800ca84:	2200      	movs	r2, #0
 800ca86:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800ca88:	490b      	ldr	r1, [pc, #44]	; (800cab8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	005b      	lsls	r3, r3, #1
 800ca90:	4413      	add	r3, r2
 800ca92:	00db      	lsls	r3, r3, #3
 800ca94:	440b      	add	r3, r1
 800ca96:	332c      	adds	r3, #44	; 0x2c
 800ca98:	6a3a      	ldr	r2, [r7, #32]
 800ca9a:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800caa2:	2300      	movs	r3, #0
 800caa4:	617b      	str	r3, [r7, #20]
 800caa6:	e002      	b.n	800caae <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800caa8:	f04f 33ff 	mov.w	r3, #4294967295
 800caac:	617b      	str	r3, [r7, #20]
  }
  return r;
 800caae:	697b      	ldr	r3, [r7, #20]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3718      	adds	r7, #24
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	20005458 	.word	0x20005458

0800cabc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b086      	sub	sp, #24
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
 800cac8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800caca:	4b30      	ldr	r3, [pc, #192]	; (800cb8c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d101      	bne.n	800cad6 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800cad2:	f7ff fe41 	bl	800c758 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800cad6:	4b2d      	ldr	r3, [pc, #180]	; (800cb8c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800cad8:	695b      	ldr	r3, [r3, #20]
 800cada:	461a      	mov	r2, r3
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	4293      	cmp	r3, r2
 800cae0:	d24b      	bcs.n	800cb7a <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800cae2:	f3ef 8311 	mrs	r3, BASEPRI
 800cae6:	f04f 0120 	mov.w	r1, #32
 800caea:	f381 8811 	msr	BASEPRI, r1
 800caee:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d031      	beq.n	800cb5a <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800caf6:	4925      	ldr	r1, [pc, #148]	; (800cb8c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800caf8:	68fa      	ldr	r2, [r7, #12]
 800cafa:	4613      	mov	r3, r2
 800cafc:	005b      	lsls	r3, r3, #1
 800cafe:	4413      	add	r3, r2
 800cb00:	00db      	lsls	r3, r3, #3
 800cb02:	440b      	add	r3, r1
 800cb04:	3360      	adds	r3, #96	; 0x60
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800cb0a:	4920      	ldr	r1, [pc, #128]	; (800cb8c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	4613      	mov	r3, r2
 800cb10:	005b      	lsls	r3, r3, #1
 800cb12:	4413      	add	r3, r2
 800cb14:	00db      	lsls	r3, r3, #3
 800cb16:	440b      	add	r3, r1
 800cb18:	3364      	adds	r3, #100	; 0x64
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800cb1e:	491b      	ldr	r1, [pc, #108]	; (800cb8c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800cb20:	68fa      	ldr	r2, [r7, #12]
 800cb22:	4613      	mov	r3, r2
 800cb24:	005b      	lsls	r3, r3, #1
 800cb26:	4413      	add	r3, r2
 800cb28:	00db      	lsls	r3, r3, #3
 800cb2a:	440b      	add	r3, r1
 800cb2c:	3368      	adds	r3, #104	; 0x68
 800cb2e:	683a      	ldr	r2, [r7, #0]
 800cb30:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800cb32:	4916      	ldr	r1, [pc, #88]	; (800cb8c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800cb34:	68fa      	ldr	r2, [r7, #12]
 800cb36:	4613      	mov	r3, r2
 800cb38:	005b      	lsls	r3, r3, #1
 800cb3a:	4413      	add	r3, r2
 800cb3c:	00db      	lsls	r3, r3, #3
 800cb3e:	440b      	add	r3, r1
 800cb40:	3370      	adds	r3, #112	; 0x70
 800cb42:	2200      	movs	r2, #0
 800cb44:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800cb46:	4911      	ldr	r1, [pc, #68]	; (800cb8c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	005b      	lsls	r3, r3, #1
 800cb4e:	4413      	add	r3, r2
 800cb50:	00db      	lsls	r3, r3, #3
 800cb52:	440b      	add	r3, r1
 800cb54:	336c      	adds	r3, #108	; 0x6c
 800cb56:	2200      	movs	r2, #0
 800cb58:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800cb5a:	490c      	ldr	r1, [pc, #48]	; (800cb8c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	4613      	mov	r3, r2
 800cb60:	005b      	lsls	r3, r3, #1
 800cb62:	4413      	add	r3, r2
 800cb64:	00db      	lsls	r3, r3, #3
 800cb66:	440b      	add	r3, r1
 800cb68:	3374      	adds	r3, #116	; 0x74
 800cb6a:	6a3a      	ldr	r2, [r7, #32]
 800cb6c:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800cb74:	2300      	movs	r3, #0
 800cb76:	617b      	str	r3, [r7, #20]
 800cb78:	e002      	b.n	800cb80 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800cb7a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb7e:	617b      	str	r3, [r7, #20]
  }
  return r;
 800cb80:	697b      	ldr	r3, [r7, #20]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3718      	adds	r7, #24
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	20005458 	.word	0x20005458

0800cb90 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800cb90:	b480      	push	{r7}
 800cb92:	b087      	sub	sp, #28
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800cba0:	e002      	b.n	800cba8 <_EncodeStr+0x18>
    Len++;
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	3301      	adds	r3, #1
 800cba6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800cba8:	68ba      	ldr	r2, [r7, #8]
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	4413      	add	r3, r2
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1f6      	bne.n	800cba2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800cbb4:	693a      	ldr	r2, [r7, #16]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d901      	bls.n	800cbc0 <_EncodeStr+0x30>
    Len = Limit;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	2bfe      	cmp	r3, #254	; 0xfe
 800cbc4:	d806      	bhi.n	800cbd4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	60fa      	str	r2, [r7, #12]
 800cbcc:	693a      	ldr	r2, [r7, #16]
 800cbce:	b2d2      	uxtb	r2, r2
 800cbd0:	701a      	strb	r2, [r3, #0]
 800cbd2:	e011      	b.n	800cbf8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	1c5a      	adds	r2, r3, #1
 800cbd8:	60fa      	str	r2, [r7, #12]
 800cbda:	22ff      	movs	r2, #255	; 0xff
 800cbdc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	1c5a      	adds	r2, r3, #1
 800cbe2:	60fa      	str	r2, [r7, #12]
 800cbe4:	693a      	ldr	r2, [r7, #16]
 800cbe6:	b2d2      	uxtb	r2, r2
 800cbe8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	0a19      	lsrs	r1, r3, #8
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	1c5a      	adds	r2, r3, #1
 800cbf2:	60fa      	str	r2, [r7, #12]
 800cbf4:	b2ca      	uxtb	r2, r1
 800cbf6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800cbfc:	e00a      	b.n	800cc14 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800cbfe:	68ba      	ldr	r2, [r7, #8]
 800cc00:	1c53      	adds	r3, r2, #1
 800cc02:	60bb      	str	r3, [r7, #8]
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	1c59      	adds	r1, r3, #1
 800cc08:	60f9      	str	r1, [r7, #12]
 800cc0a:	7812      	ldrb	r2, [r2, #0]
 800cc0c:	701a      	strb	r2, [r3, #0]
    n++;
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	3301      	adds	r3, #1
 800cc12:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800cc14:	697a      	ldr	r2, [r7, #20]
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d3f0      	bcc.n	800cbfe <_EncodeStr+0x6e>
  }
  return pPayload;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	371c      	adds	r7, #28
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr

0800cc2a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800cc2a:	b480      	push	{r7}
 800cc2c:	b083      	sub	sp, #12
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	3304      	adds	r3, #4
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	370c      	adds	r7, #12
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr
	...

0800cc44 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800cc4a:	1cfb      	adds	r3, r7, #3
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	4619      	mov	r1, r3
 800cc50:	2001      	movs	r0, #1
 800cc52:	f7ff fdd3 	bl	800c7fc <SEGGER_RTT_ReadNoLock>
 800cc56:	4603      	mov	r3, r0
 800cc58:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	dd4f      	ble.n	800cd00 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 800cc60:	78fb      	ldrb	r3, [r7, #3]
 800cc62:	2b07      	cmp	r3, #7
 800cc64:	dc16      	bgt.n	800cc94 <_HandleIncomingPacket+0x50>
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	dd3c      	ble.n	800cce4 <_HandleIncomingPacket+0xa0>
 800cc6a:	3b01      	subs	r3, #1
 800cc6c:	2b06      	cmp	r3, #6
 800cc6e:	d839      	bhi.n	800cce4 <_HandleIncomingPacket+0xa0>
 800cc70:	a201      	add	r2, pc, #4	; (adr r2, 800cc78 <_HandleIncomingPacket+0x34>)
 800cc72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc76:	bf00      	nop
 800cc78:	0800cc9b 	.word	0x0800cc9b
 800cc7c:	0800cca1 	.word	0x0800cca1
 800cc80:	0800cca7 	.word	0x0800cca7
 800cc84:	0800ccad 	.word	0x0800ccad
 800cc88:	0800ccb3 	.word	0x0800ccb3
 800cc8c:	0800ccb9 	.word	0x0800ccb9
 800cc90:	0800ccbf 	.word	0x0800ccbf
 800cc94:	2b80      	cmp	r3, #128	; 0x80
 800cc96:	d015      	beq.n	800ccc4 <_HandleIncomingPacket+0x80>
 800cc98:	e024      	b.n	800cce4 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800cc9a:	f000 fb83 	bl	800d3a4 <SEGGER_SYSVIEW_Start>
      break;
 800cc9e:	e02f      	b.n	800cd00 <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800cca0:	f000 fc38 	bl	800d514 <SEGGER_SYSVIEW_Stop>
      break;
 800cca4:	e02c      	b.n	800cd00 <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800cca6:	f000 fe13 	bl	800d8d0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800ccaa:	e029      	b.n	800cd00 <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800ccac:	f000 fdd8 	bl	800d860 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800ccb0:	e026      	b.n	800cd00 <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800ccb2:	f000 fc55 	bl	800d560 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800ccb6:	e023      	b.n	800cd00 <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800ccb8:	f001 f834 	bl	800dd24 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800ccbc:	e020      	b.n	800cd00 <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800ccbe:	f001 f813 	bl	800dce8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800ccc2:	e01d      	b.n	800cd00 <_HandleIncomingPacket+0xbc>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800ccc4:	1cfb      	adds	r3, r7, #3
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	4619      	mov	r1, r3
 800ccca:	2001      	movs	r0, #1
 800cccc:	f7ff fd96 	bl	800c7fc <SEGGER_RTT_ReadNoLock>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	dd0f      	ble.n	800ccfa <_HandleIncomingPacket+0xb6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800ccda:	78fb      	ldrb	r3, [r7, #3]
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f000 ff83 	bl	800dbe8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800cce2:	e00a      	b.n	800ccfa <_HandleIncomingPacket+0xb6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800cce4:	78fb      	ldrb	r3, [r7, #3]
 800cce6:	b25b      	sxtb	r3, r3
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	da08      	bge.n	800ccfe <_HandleIncomingPacket+0xba>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800ccec:	1cfb      	adds	r3, r7, #3
 800ccee:	2201      	movs	r2, #1
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	2001      	movs	r0, #1
 800ccf4:	f7ff fd82 	bl	800c7fc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800ccf8:	e001      	b.n	800ccfe <_HandleIncomingPacket+0xba>
      break;
 800ccfa:	bf00      	nop
 800ccfc:	e000      	b.n	800cd00 <_HandleIncomingPacket+0xbc>
      break;
 800ccfe:	bf00      	nop
    }
  }
}
 800cd00:	bf00      	nop
 800cd02:	3708      	adds	r7, #8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b08c      	sub	sp, #48	; 0x30
 800cd0c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800cd0e:	2301      	movs	r3, #1
 800cd10:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800cd12:	1d3b      	adds	r3, r7, #4
 800cd14:	3301      	adds	r3, #1
 800cd16:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd1c:	4b30      	ldr	r3, [pc, #192]	; (800cde0 <_TrySendOverflowPacket+0xd8>)
 800cd1e:	695b      	ldr	r3, [r3, #20]
 800cd20:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd22:	e00b      	b.n	800cd3c <_TrySendOverflowPacket+0x34>
 800cd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd26:	b2da      	uxtb	r2, r3
 800cd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2a:	1c59      	adds	r1, r3, #1
 800cd2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cd2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cd32:	b2d2      	uxtb	r2, r2
 800cd34:	701a      	strb	r2, [r3, #0]
 800cd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd38:	09db      	lsrs	r3, r3, #7
 800cd3a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd3e:	2b7f      	cmp	r3, #127	; 0x7f
 800cd40:	d8f0      	bhi.n	800cd24 <_TrySendOverflowPacket+0x1c>
 800cd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd44:	1c5a      	adds	r2, r3, #1
 800cd46:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cd48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd4a:	b2d2      	uxtb	r2, r2
 800cd4c:	701a      	strb	r2, [r3, #0]
 800cd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd50:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800cd52:	4b24      	ldr	r3, [pc, #144]	; (800cde4 <_TrySendOverflowPacket+0xdc>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800cd58:	4b21      	ldr	r3, [pc, #132]	; (800cde0 <_TrySendOverflowPacket+0xd8>)
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	69ba      	ldr	r2, [r7, #24]
 800cd5e:	1ad3      	subs	r3, r2, r3
 800cd60:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800cd62:	69fb      	ldr	r3, [r7, #28]
 800cd64:	627b      	str	r3, [r7, #36]	; 0x24
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	623b      	str	r3, [r7, #32]
 800cd6a:	e00b      	b.n	800cd84 <_TrySendOverflowPacket+0x7c>
 800cd6c:	6a3b      	ldr	r3, [r7, #32]
 800cd6e:	b2da      	uxtb	r2, r3
 800cd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd72:	1c59      	adds	r1, r3, #1
 800cd74:	6279      	str	r1, [r7, #36]	; 0x24
 800cd76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cd7a:	b2d2      	uxtb	r2, r2
 800cd7c:	701a      	strb	r2, [r3, #0]
 800cd7e:	6a3b      	ldr	r3, [r7, #32]
 800cd80:	09db      	lsrs	r3, r3, #7
 800cd82:	623b      	str	r3, [r7, #32]
 800cd84:	6a3b      	ldr	r3, [r7, #32]
 800cd86:	2b7f      	cmp	r3, #127	; 0x7f
 800cd88:	d8f0      	bhi.n	800cd6c <_TrySendOverflowPacket+0x64>
 800cd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8c:	1c5a      	adds	r2, r3, #1
 800cd8e:	627a      	str	r2, [r7, #36]	; 0x24
 800cd90:	6a3a      	ldr	r2, [r7, #32]
 800cd92:	b2d2      	uxtb	r2, r2
 800cd94:	701a      	strb	r2, [r3, #0]
 800cd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd98:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800cd9a:	1d3b      	adds	r3, r7, #4
 800cd9c:	69fa      	ldr	r2, [r7, #28]
 800cd9e:	1ad3      	subs	r3, r2, r3
 800cda0:	461a      	mov	r2, r3
 800cda2:	1d3b      	adds	r3, r7, #4
 800cda4:	4619      	mov	r1, r3
 800cda6:	2001      	movs	r0, #1
 800cda8:	f7ff fdaa 	bl	800c900 <SEGGER_RTT_WriteSkipNoLock>
 800cdac:	4603      	mov	r3, r0
 800cdae:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d009      	beq.n	800cdca <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800cdb6:	4a0a      	ldr	r2, [pc, #40]	; (800cde0 <_TrySendOverflowPacket+0xd8>)
 800cdb8:	69bb      	ldr	r3, [r7, #24]
 800cdba:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800cdbc:	4b08      	ldr	r3, [pc, #32]	; (800cde0 <_TrySendOverflowPacket+0xd8>)
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	3b01      	subs	r3, #1
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	4b06      	ldr	r3, [pc, #24]	; (800cde0 <_TrySendOverflowPacket+0xd8>)
 800cdc6:	701a      	strb	r2, [r3, #0]
 800cdc8:	e004      	b.n	800cdd4 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800cdca:	4b05      	ldr	r3, [pc, #20]	; (800cde0 <_TrySendOverflowPacket+0xd8>)
 800cdcc:	695b      	ldr	r3, [r3, #20]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	4a03      	ldr	r2, [pc, #12]	; (800cde0 <_TrySendOverflowPacket+0xd8>)
 800cdd2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800cdd4:	693b      	ldr	r3, [r7, #16]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3730      	adds	r7, #48	; 0x30
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	20007918 	.word	0x20007918
 800cde4:	e0001004 	.word	0xe0001004

0800cde8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b08a      	sub	sp, #40	; 0x28
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800cdf4:	4b63      	ldr	r3, [pc, #396]	; (800cf84 <_SendPacket+0x19c>)
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d010      	beq.n	800ce1e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800cdfc:	4b61      	ldr	r3, [pc, #388]	; (800cf84 <_SendPacket+0x19c>)
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f000 80a1 	beq.w	800cf48 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800ce06:	4b5f      	ldr	r3, [pc, #380]	; (800cf84 <_SendPacket+0x19c>)
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	2b02      	cmp	r3, #2
 800ce0c:	d109      	bne.n	800ce22 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800ce0e:	f7ff ff7b 	bl	800cd08 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800ce12:	4b5c      	ldr	r3, [pc, #368]	; (800cf84 <_SendPacket+0x19c>)
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	f040 8098 	bne.w	800cf4c <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 800ce1c:	e001      	b.n	800ce22 <_SendPacket+0x3a>
    goto Send;
 800ce1e:	bf00      	nop
 800ce20:	e000      	b.n	800ce24 <_SendPacket+0x3c>
Send:
 800ce22:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2b1f      	cmp	r3, #31
 800ce28:	d809      	bhi.n	800ce3e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800ce2a:	4b56      	ldr	r3, [pc, #344]	; (800cf84 <_SendPacket+0x19c>)
 800ce2c:	69da      	ldr	r2, [r3, #28]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	fa22 f303 	lsr.w	r3, r2, r3
 800ce34:	f003 0301 	and.w	r3, r3, #1
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f040 8089 	bne.w	800cf50 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2b17      	cmp	r3, #23
 800ce42:	d807      	bhi.n	800ce54 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	3b01      	subs	r3, #1
 800ce48:	60fb      	str	r3, [r7, #12]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	b2da      	uxtb	r2, r3
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	701a      	strb	r2, [r3, #0]
 800ce52:	e03d      	b.n	800ced0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800ce54:	68ba      	ldr	r2, [r7, #8]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	1ad3      	subs	r3, r2, r3
 800ce5a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	2b7f      	cmp	r3, #127	; 0x7f
 800ce60:	d912      	bls.n	800ce88 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	09da      	lsrs	r2, r3, #7
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	60fb      	str	r3, [r7, #12]
 800ce6c:	b2d2      	uxtb	r2, r2
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800ce72:	69fb      	ldr	r3, [r7, #28]
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	68fa      	ldr	r2, [r7, #12]
 800ce78:	3a01      	subs	r2, #1
 800ce7a:	60fa      	str	r2, [r7, #12]
 800ce7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce80:	b2da      	uxtb	r2, r3
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	701a      	strb	r2, [r3, #0]
 800ce86:	e006      	b.n	800ce96 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	3b01      	subs	r3, #1
 800ce8c:	60fb      	str	r3, [r7, #12]
 800ce8e:	69fb      	ldr	r3, [r7, #28]
 800ce90:	b2da      	uxtb	r2, r3
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2b7f      	cmp	r3, #127	; 0x7f
 800ce9a:	d912      	bls.n	800cec2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	09da      	lsrs	r2, r3, #7
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	3b01      	subs	r3, #1
 800cea4:	60fb      	str	r3, [r7, #12]
 800cea6:	b2d2      	uxtb	r2, r2
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	68fa      	ldr	r2, [r7, #12]
 800ceb2:	3a01      	subs	r2, #1
 800ceb4:	60fa      	str	r2, [r7, #12]
 800ceb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ceba:	b2da      	uxtb	r2, r3
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	701a      	strb	r2, [r3, #0]
 800cec0:	e006      	b.n	800ced0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	3b01      	subs	r3, #1
 800cec6:	60fb      	str	r3, [r7, #12]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	b2da      	uxtb	r2, r3
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800ced0:	4b2d      	ldr	r3, [pc, #180]	; (800cf88 <_SendPacket+0x1a0>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800ced6:	4b2b      	ldr	r3, [pc, #172]	; (800cf84 <_SendPacket+0x19c>)
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	69ba      	ldr	r2, [r7, #24]
 800cedc:	1ad3      	subs	r3, r2, r3
 800cede:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	627b      	str	r3, [r7, #36]	; 0x24
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	623b      	str	r3, [r7, #32]
 800cee8:	e00b      	b.n	800cf02 <_SendPacket+0x11a>
 800ceea:	6a3b      	ldr	r3, [r7, #32]
 800ceec:	b2da      	uxtb	r2, r3
 800ceee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef0:	1c59      	adds	r1, r3, #1
 800cef2:	6279      	str	r1, [r7, #36]	; 0x24
 800cef4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cef8:	b2d2      	uxtb	r2, r2
 800cefa:	701a      	strb	r2, [r3, #0]
 800cefc:	6a3b      	ldr	r3, [r7, #32]
 800cefe:	09db      	lsrs	r3, r3, #7
 800cf00:	623b      	str	r3, [r7, #32]
 800cf02:	6a3b      	ldr	r3, [r7, #32]
 800cf04:	2b7f      	cmp	r3, #127	; 0x7f
 800cf06:	d8f0      	bhi.n	800ceea <_SendPacket+0x102>
 800cf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0a:	1c5a      	adds	r2, r3, #1
 800cf0c:	627a      	str	r2, [r7, #36]	; 0x24
 800cf0e:	6a3a      	ldr	r2, [r7, #32]
 800cf10:	b2d2      	uxtb	r2, r2
 800cf12:	701a      	strb	r2, [r3, #0]
 800cf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf16:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	1ad3      	subs	r3, r2, r3
 800cf1e:	461a      	mov	r2, r3
 800cf20:	68f9      	ldr	r1, [r7, #12]
 800cf22:	2001      	movs	r0, #1
 800cf24:	f7ff fcec 	bl	800c900 <SEGGER_RTT_WriteSkipNoLock>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d003      	beq.n	800cf3a <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800cf32:	4a14      	ldr	r2, [pc, #80]	; (800cf84 <_SendPacket+0x19c>)
 800cf34:	69bb      	ldr	r3, [r7, #24]
 800cf36:	60d3      	str	r3, [r2, #12]
 800cf38:	e00b      	b.n	800cf52 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800cf3a:	4b12      	ldr	r3, [pc, #72]	; (800cf84 <_SendPacket+0x19c>)
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	b2da      	uxtb	r2, r3
 800cf42:	4b10      	ldr	r3, [pc, #64]	; (800cf84 <_SendPacket+0x19c>)
 800cf44:	701a      	strb	r2, [r3, #0]
 800cf46:	e004      	b.n	800cf52 <_SendPacket+0x16a>
    goto SendDone;
 800cf48:	bf00      	nop
 800cf4a:	e002      	b.n	800cf52 <_SendPacket+0x16a>
      goto SendDone;
 800cf4c:	bf00      	nop
 800cf4e:	e000      	b.n	800cf52 <_SendPacket+0x16a>
      goto SendDone;
 800cf50:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800cf52:	4b0e      	ldr	r3, [pc, #56]	; (800cf8c <_SendPacket+0x1a4>)
 800cf54:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800cf58:	4b0c      	ldr	r3, [pc, #48]	; (800cf8c <_SendPacket+0x1a4>)
 800cf5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d00b      	beq.n	800cf7a <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800cf62:	4b08      	ldr	r3, [pc, #32]	; (800cf84 <_SendPacket+0x19c>)
 800cf64:	789b      	ldrb	r3, [r3, #2]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d107      	bne.n	800cf7a <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800cf6a:	4b06      	ldr	r3, [pc, #24]	; (800cf84 <_SendPacket+0x19c>)
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800cf70:	f7ff fe68 	bl	800cc44 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800cf74:	4b03      	ldr	r3, [pc, #12]	; (800cf84 <_SendPacket+0x19c>)
 800cf76:	2200      	movs	r2, #0
 800cf78:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800cf7a:	bf00      	nop
 800cf7c:	3728      	adds	r7, #40	; 0x28
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	20007918 	.word	0x20007918
 800cf88:	e0001004 	.word	0xe0001004
 800cf8c:	20005458 	.word	0x20005458

0800cf90 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b086      	sub	sp, #24
 800cf94:	af02      	add	r7, sp, #8
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
 800cf9c:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	9300      	str	r3, [sp, #0]
 800cfa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cfa6:	4a14      	ldr	r2, [pc, #80]	; (800cff8 <SEGGER_SYSVIEW_Init+0x68>)
 800cfa8:	4914      	ldr	r1, [pc, #80]	; (800cffc <SEGGER_SYSVIEW_Init+0x6c>)
 800cfaa:	2001      	movs	r0, #1
 800cfac:	f7ff fd1c 	bl	800c9e8 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	9300      	str	r3, [sp, #0]
 800cfb4:	2308      	movs	r3, #8
 800cfb6:	4a12      	ldr	r2, [pc, #72]	; (800d000 <SEGGER_SYSVIEW_Init+0x70>)
 800cfb8:	4910      	ldr	r1, [pc, #64]	; (800cffc <SEGGER_SYSVIEW_Init+0x6c>)
 800cfba:	2001      	movs	r0, #1
 800cfbc:	f7ff fd7e 	bl	800cabc <SEGGER_RTT_ConfigDownBuffer>
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800cfc0:	4b10      	ldr	r3, [pc, #64]	; (800d004 <SEGGER_SYSVIEW_Init+0x74>)
 800cfc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfc6:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800cfc8:	4b0f      	ldr	r3, [pc, #60]	; (800d008 <SEGGER_SYSVIEW_Init+0x78>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a0d      	ldr	r2, [pc, #52]	; (800d004 <SEGGER_SYSVIEW_Init+0x74>)
 800cfce:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800cfd0:	4a0c      	ldr	r2, [pc, #48]	; (800d004 <SEGGER_SYSVIEW_Init+0x74>)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800cfd6:	4a0b      	ldr	r2, [pc, #44]	; (800d004 <SEGGER_SYSVIEW_Init+0x74>)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800cfdc:	4a09      	ldr	r2, [pc, #36]	; (800d004 <SEGGER_SYSVIEW_Init+0x74>)
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800cfe2:	4a08      	ldr	r2, [pc, #32]	; (800d004 <SEGGER_SYSVIEW_Init+0x74>)
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800cfe8:	4b06      	ldr	r3, [pc, #24]	; (800d004 <SEGGER_SYSVIEW_Init+0x74>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800cfee:	bf00      	nop
 800cff0:	3710      	adds	r7, #16
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	20005910 	.word	0x20005910
 800cffc:	0800f0d8 	.word	0x0800f0d8
 800d000:	20007910 	.word	0x20007910
 800d004:	20007918 	.word	0x20007918
 800d008:	e0001004 	.word	0xe0001004

0800d00c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800d014:	4a04      	ldr	r2, [pc, #16]	; (800d028 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6113      	str	r3, [r2, #16]
}
 800d01a:	bf00      	nop
 800d01c:	370c      	adds	r7, #12
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	20007918 	.word	0x20007918

0800d02c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d034:	f3ef 8311 	mrs	r3, BASEPRI
 800d038:	f04f 0120 	mov.w	r1, #32
 800d03c:	f381 8811 	msr	BASEPRI, r1
 800d040:	60fb      	str	r3, [r7, #12]
 800d042:	4808      	ldr	r0, [pc, #32]	; (800d064 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800d044:	f7ff fdf1 	bl	800cc2a <_PreparePacket>
 800d048:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	68b9      	ldr	r1, [r7, #8]
 800d04e:	68b8      	ldr	r0, [r7, #8]
 800d050:	f7ff feca 	bl	800cde8 <_SendPacket>
  RECORD_END();
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f383 8811 	msr	BASEPRI, r3
}
 800d05a:	bf00      	nop
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	20007948 	.word	0x20007948

0800d068 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800d068:	b580      	push	{r7, lr}
 800d06a:	b088      	sub	sp, #32
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d072:	f3ef 8311 	mrs	r3, BASEPRI
 800d076:	f04f 0120 	mov.w	r1, #32
 800d07a:	f381 8811 	msr	BASEPRI, r1
 800d07e:	617b      	str	r3, [r7, #20]
 800d080:	4816      	ldr	r0, [pc, #88]	; (800d0dc <SEGGER_SYSVIEW_RecordU32+0x74>)
 800d082:	f7ff fdd2 	bl	800cc2a <_PreparePacket>
 800d086:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	61fb      	str	r3, [r7, #28]
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	61bb      	str	r3, [r7, #24]
 800d094:	e00b      	b.n	800d0ae <SEGGER_SYSVIEW_RecordU32+0x46>
 800d096:	69bb      	ldr	r3, [r7, #24]
 800d098:	b2da      	uxtb	r2, r3
 800d09a:	69fb      	ldr	r3, [r7, #28]
 800d09c:	1c59      	adds	r1, r3, #1
 800d09e:	61f9      	str	r1, [r7, #28]
 800d0a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d0a4:	b2d2      	uxtb	r2, r2
 800d0a6:	701a      	strb	r2, [r3, #0]
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	09db      	lsrs	r3, r3, #7
 800d0ac:	61bb      	str	r3, [r7, #24]
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	2b7f      	cmp	r3, #127	; 0x7f
 800d0b2:	d8f0      	bhi.n	800d096 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	1c5a      	adds	r2, r3, #1
 800d0b8:	61fa      	str	r2, [r7, #28]
 800d0ba:	69ba      	ldr	r2, [r7, #24]
 800d0bc:	b2d2      	uxtb	r2, r2
 800d0be:	701a      	strb	r2, [r3, #0]
 800d0c0:	69fb      	ldr	r3, [r7, #28]
 800d0c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	68f9      	ldr	r1, [r7, #12]
 800d0c8:	6938      	ldr	r0, [r7, #16]
 800d0ca:	f7ff fe8d 	bl	800cde8 <_SendPacket>
  RECORD_END();
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	f383 8811 	msr	BASEPRI, r3
}
 800d0d4:	bf00      	nop
 800d0d6:	3720      	adds	r7, #32
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}
 800d0dc:	20007948 	.word	0x20007948

0800d0e0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b08c      	sub	sp, #48	; 0x30
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800d0ec:	f3ef 8311 	mrs	r3, BASEPRI
 800d0f0:	f04f 0120 	mov.w	r1, #32
 800d0f4:	f381 8811 	msr	BASEPRI, r1
 800d0f8:	61fb      	str	r3, [r7, #28]
 800d0fa:	4825      	ldr	r0, [pc, #148]	; (800d190 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800d0fc:	f7ff fd95 	bl	800cc2a <_PreparePacket>
 800d100:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800d102:	69bb      	ldr	r3, [r7, #24]
 800d104:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d10e:	e00b      	b.n	800d128 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800d110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d112:	b2da      	uxtb	r2, r3
 800d114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d116:	1c59      	adds	r1, r3, #1
 800d118:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d11a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d11e:	b2d2      	uxtb	r2, r2
 800d120:	701a      	strb	r2, [r3, #0]
 800d122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d124:	09db      	lsrs	r3, r3, #7
 800d126:	62bb      	str	r3, [r7, #40]	; 0x28
 800d128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12a:	2b7f      	cmp	r3, #127	; 0x7f
 800d12c:	d8f0      	bhi.n	800d110 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800d12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d130:	1c5a      	adds	r2, r3, #1
 800d132:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d136:	b2d2      	uxtb	r2, r2
 800d138:	701a      	strb	r2, [r3, #0]
 800d13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d13c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	627b      	str	r3, [r7, #36]	; 0x24
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	623b      	str	r3, [r7, #32]
 800d146:	e00b      	b.n	800d160 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800d148:	6a3b      	ldr	r3, [r7, #32]
 800d14a:	b2da      	uxtb	r2, r3
 800d14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14e:	1c59      	adds	r1, r3, #1
 800d150:	6279      	str	r1, [r7, #36]	; 0x24
 800d152:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d156:	b2d2      	uxtb	r2, r2
 800d158:	701a      	strb	r2, [r3, #0]
 800d15a:	6a3b      	ldr	r3, [r7, #32]
 800d15c:	09db      	lsrs	r3, r3, #7
 800d15e:	623b      	str	r3, [r7, #32]
 800d160:	6a3b      	ldr	r3, [r7, #32]
 800d162:	2b7f      	cmp	r3, #127	; 0x7f
 800d164:	d8f0      	bhi.n	800d148 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800d166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d168:	1c5a      	adds	r2, r3, #1
 800d16a:	627a      	str	r2, [r7, #36]	; 0x24
 800d16c:	6a3a      	ldr	r2, [r7, #32]
 800d16e:	b2d2      	uxtb	r2, r2
 800d170:	701a      	strb	r2, [r3, #0]
 800d172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d174:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d176:	68fa      	ldr	r2, [r7, #12]
 800d178:	6979      	ldr	r1, [r7, #20]
 800d17a:	69b8      	ldr	r0, [r7, #24]
 800d17c:	f7ff fe34 	bl	800cde8 <_SendPacket>
  RECORD_END();
 800d180:	69fb      	ldr	r3, [r7, #28]
 800d182:	f383 8811 	msr	BASEPRI, r3
}
 800d186:	bf00      	nop
 800d188:	3730      	adds	r7, #48	; 0x30
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	20007948 	.word	0x20007948

0800d194 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800d194:	b580      	push	{r7, lr}
 800d196:	b08e      	sub	sp, #56	; 0x38
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	607a      	str	r2, [r7, #4]
 800d1a0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800d1a2:	f3ef 8311 	mrs	r3, BASEPRI
 800d1a6:	f04f 0120 	mov.w	r1, #32
 800d1aa:	f381 8811 	msr	BASEPRI, r1
 800d1ae:	61fb      	str	r3, [r7, #28]
 800d1b0:	4832      	ldr	r0, [pc, #200]	; (800d27c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800d1b2:	f7ff fd3a 	bl	800cc2a <_PreparePacket>
 800d1b6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800d1b8:	69bb      	ldr	r3, [r7, #24]
 800d1ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	637b      	str	r3, [r7, #52]	; 0x34
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	633b      	str	r3, [r7, #48]	; 0x30
 800d1c4:	e00b      	b.n	800d1de <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800d1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c8:	b2da      	uxtb	r2, r3
 800d1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1cc:	1c59      	adds	r1, r3, #1
 800d1ce:	6379      	str	r1, [r7, #52]	; 0x34
 800d1d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d1d4:	b2d2      	uxtb	r2, r2
 800d1d6:	701a      	strb	r2, [r3, #0]
 800d1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1da:	09db      	lsrs	r3, r3, #7
 800d1dc:	633b      	str	r3, [r7, #48]	; 0x30
 800d1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e0:	2b7f      	cmp	r3, #127	; 0x7f
 800d1e2:	d8f0      	bhi.n	800d1c6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800d1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1e6:	1c5a      	adds	r2, r3, #1
 800d1e8:	637a      	str	r2, [r7, #52]	; 0x34
 800d1ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1ec:	b2d2      	uxtb	r2, r2
 800d1ee:	701a      	strb	r2, [r3, #0]
 800d1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1fc:	e00b      	b.n	800d216 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800d1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d200:	b2da      	uxtb	r2, r3
 800d202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d204:	1c59      	adds	r1, r3, #1
 800d206:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d208:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d20c:	b2d2      	uxtb	r2, r2
 800d20e:	701a      	strb	r2, [r3, #0]
 800d210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d212:	09db      	lsrs	r3, r3, #7
 800d214:	62bb      	str	r3, [r7, #40]	; 0x28
 800d216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d218:	2b7f      	cmp	r3, #127	; 0x7f
 800d21a:	d8f0      	bhi.n	800d1fe <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800d21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21e:	1c5a      	adds	r2, r3, #1
 800d220:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d224:	b2d2      	uxtb	r2, r2
 800d226:	701a      	strb	r2, [r3, #0]
 800d228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	627b      	str	r3, [r7, #36]	; 0x24
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	623b      	str	r3, [r7, #32]
 800d234:	e00b      	b.n	800d24e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800d236:	6a3b      	ldr	r3, [r7, #32]
 800d238:	b2da      	uxtb	r2, r3
 800d23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23c:	1c59      	adds	r1, r3, #1
 800d23e:	6279      	str	r1, [r7, #36]	; 0x24
 800d240:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d244:	b2d2      	uxtb	r2, r2
 800d246:	701a      	strb	r2, [r3, #0]
 800d248:	6a3b      	ldr	r3, [r7, #32]
 800d24a:	09db      	lsrs	r3, r3, #7
 800d24c:	623b      	str	r3, [r7, #32]
 800d24e:	6a3b      	ldr	r3, [r7, #32]
 800d250:	2b7f      	cmp	r3, #127	; 0x7f
 800d252:	d8f0      	bhi.n	800d236 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800d254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d256:	1c5a      	adds	r2, r3, #1
 800d258:	627a      	str	r2, [r7, #36]	; 0x24
 800d25a:	6a3a      	ldr	r2, [r7, #32]
 800d25c:	b2d2      	uxtb	r2, r2
 800d25e:	701a      	strb	r2, [r3, #0]
 800d260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d262:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d264:	68fa      	ldr	r2, [r7, #12]
 800d266:	6979      	ldr	r1, [r7, #20]
 800d268:	69b8      	ldr	r0, [r7, #24]
 800d26a:	f7ff fdbd 	bl	800cde8 <_SendPacket>
  RECORD_END();
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	f383 8811 	msr	BASEPRI, r3
}
 800d274:	bf00      	nop
 800d276:	3738      	adds	r7, #56	; 0x38
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	20007948 	.word	0x20007948

0800d280 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800d280:	b580      	push	{r7, lr}
 800d282:	b090      	sub	sp, #64	; 0x40
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	607a      	str	r2, [r7, #4]
 800d28c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800d28e:	f3ef 8311 	mrs	r3, BASEPRI
 800d292:	f04f 0120 	mov.w	r1, #32
 800d296:	f381 8811 	msr	BASEPRI, r1
 800d29a:	61fb      	str	r3, [r7, #28]
 800d29c:	4840      	ldr	r0, [pc, #256]	; (800d3a0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800d29e:	f7ff fcc4 	bl	800cc2a <_PreparePacket>
 800d2a2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800d2a4:	69bb      	ldr	r3, [r7, #24]
 800d2a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2b0:	e00b      	b.n	800d2ca <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800d2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b8:	1c59      	adds	r1, r3, #1
 800d2ba:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d2bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d2c0:	b2d2      	uxtb	r2, r2
 800d2c2:	701a      	strb	r2, [r3, #0]
 800d2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c6:	09db      	lsrs	r3, r3, #7
 800d2c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2cc:	2b7f      	cmp	r3, #127	; 0x7f
 800d2ce:	d8f0      	bhi.n	800d2b2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800d2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2d2:	1c5a      	adds	r2, r3, #1
 800d2d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d2d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2d8:	b2d2      	uxtb	r2, r2
 800d2da:	701a      	strb	r2, [r3, #0]
 800d2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	637b      	str	r3, [r7, #52]	; 0x34
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	633b      	str	r3, [r7, #48]	; 0x30
 800d2e8:	e00b      	b.n	800d302 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f0:	1c59      	adds	r1, r3, #1
 800d2f2:	6379      	str	r1, [r7, #52]	; 0x34
 800d2f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d2f8:	b2d2      	uxtb	r2, r2
 800d2fa:	701a      	strb	r2, [r3, #0]
 800d2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fe:	09db      	lsrs	r3, r3, #7
 800d300:	633b      	str	r3, [r7, #48]	; 0x30
 800d302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d304:	2b7f      	cmp	r3, #127	; 0x7f
 800d306:	d8f0      	bhi.n	800d2ea <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800d308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d30a:	1c5a      	adds	r2, r3, #1
 800d30c:	637a      	str	r2, [r7, #52]	; 0x34
 800d30e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d310:	b2d2      	uxtb	r2, r2
 800d312:	701a      	strb	r2, [r3, #0]
 800d314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d316:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d320:	e00b      	b.n	800d33a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800d322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d324:	b2da      	uxtb	r2, r3
 800d326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d328:	1c59      	adds	r1, r3, #1
 800d32a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d32c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d330:	b2d2      	uxtb	r2, r2
 800d332:	701a      	strb	r2, [r3, #0]
 800d334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d336:	09db      	lsrs	r3, r3, #7
 800d338:	62bb      	str	r3, [r7, #40]	; 0x28
 800d33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33c:	2b7f      	cmp	r3, #127	; 0x7f
 800d33e:	d8f0      	bhi.n	800d322 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800d340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d342:	1c5a      	adds	r2, r3, #1
 800d344:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d348:	b2d2      	uxtb	r2, r2
 800d34a:	701a      	strb	r2, [r3, #0]
 800d34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	627b      	str	r3, [r7, #36]	; 0x24
 800d354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d356:	623b      	str	r3, [r7, #32]
 800d358:	e00b      	b.n	800d372 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800d35a:	6a3b      	ldr	r3, [r7, #32]
 800d35c:	b2da      	uxtb	r2, r3
 800d35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d360:	1c59      	adds	r1, r3, #1
 800d362:	6279      	str	r1, [r7, #36]	; 0x24
 800d364:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d368:	b2d2      	uxtb	r2, r2
 800d36a:	701a      	strb	r2, [r3, #0]
 800d36c:	6a3b      	ldr	r3, [r7, #32]
 800d36e:	09db      	lsrs	r3, r3, #7
 800d370:	623b      	str	r3, [r7, #32]
 800d372:	6a3b      	ldr	r3, [r7, #32]
 800d374:	2b7f      	cmp	r3, #127	; 0x7f
 800d376:	d8f0      	bhi.n	800d35a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800d378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37a:	1c5a      	adds	r2, r3, #1
 800d37c:	627a      	str	r2, [r7, #36]	; 0x24
 800d37e:	6a3a      	ldr	r2, [r7, #32]
 800d380:	b2d2      	uxtb	r2, r2
 800d382:	701a      	strb	r2, [r3, #0]
 800d384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d386:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d388:	68fa      	ldr	r2, [r7, #12]
 800d38a:	6979      	ldr	r1, [r7, #20]
 800d38c:	69b8      	ldr	r0, [r7, #24]
 800d38e:	f7ff fd2b 	bl	800cde8 <_SendPacket>
  RECORD_END();
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	f383 8811 	msr	BASEPRI, r3
}
 800d398:	bf00      	nop
 800d39a:	3740      	adds	r7, #64	; 0x40
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	20007948 	.word	0x20007948

0800d3a4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b08c      	sub	sp, #48	; 0x30
 800d3a8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800d3aa:	4b57      	ldr	r3, [pc, #348]	; (800d508 <SEGGER_SYSVIEW_Start+0x164>)
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800d3b0:	f3ef 8311 	mrs	r3, BASEPRI
 800d3b4:	f04f 0120 	mov.w	r1, #32
 800d3b8:	f381 8811 	msr	BASEPRI, r1
 800d3bc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800d3be:	220a      	movs	r2, #10
 800d3c0:	4952      	ldr	r1, [pc, #328]	; (800d50c <SEGGER_SYSVIEW_Start+0x168>)
 800d3c2:	2001      	movs	r0, #1
 800d3c4:	f7ff fa9c 	bl	800c900 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800d3ce:	200a      	movs	r0, #10
 800d3d0:	f7ff fe2c 	bl	800d02c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800d3d4:	f3ef 8311 	mrs	r3, BASEPRI
 800d3d8:	f04f 0120 	mov.w	r1, #32
 800d3dc:	f381 8811 	msr	BASEPRI, r1
 800d3e0:	60bb      	str	r3, [r7, #8]
 800d3e2:	484b      	ldr	r0, [pc, #300]	; (800d510 <SEGGER_SYSVIEW_Start+0x16c>)
 800d3e4:	f7ff fc21 	bl	800cc2a <_PreparePacket>
 800d3e8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3f2:	4b45      	ldr	r3, [pc, #276]	; (800d508 <SEGGER_SYSVIEW_Start+0x164>)
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3f8:	e00b      	b.n	800d412 <SEGGER_SYSVIEW_Start+0x6e>
 800d3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fc:	b2da      	uxtb	r2, r3
 800d3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d400:	1c59      	adds	r1, r3, #1
 800d402:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d404:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d408:	b2d2      	uxtb	r2, r2
 800d40a:	701a      	strb	r2, [r3, #0]
 800d40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d40e:	09db      	lsrs	r3, r3, #7
 800d410:	62bb      	str	r3, [r7, #40]	; 0x28
 800d412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d414:	2b7f      	cmp	r3, #127	; 0x7f
 800d416:	d8f0      	bhi.n	800d3fa <SEGGER_SYSVIEW_Start+0x56>
 800d418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41a:	1c5a      	adds	r2, r3, #1
 800d41c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d41e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d420:	b2d2      	uxtb	r2, r2
 800d422:	701a      	strb	r2, [r3, #0]
 800d424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d426:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	627b      	str	r3, [r7, #36]	; 0x24
 800d42c:	4b36      	ldr	r3, [pc, #216]	; (800d508 <SEGGER_SYSVIEW_Start+0x164>)
 800d42e:	689b      	ldr	r3, [r3, #8]
 800d430:	623b      	str	r3, [r7, #32]
 800d432:	e00b      	b.n	800d44c <SEGGER_SYSVIEW_Start+0xa8>
 800d434:	6a3b      	ldr	r3, [r7, #32]
 800d436:	b2da      	uxtb	r2, r3
 800d438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43a:	1c59      	adds	r1, r3, #1
 800d43c:	6279      	str	r1, [r7, #36]	; 0x24
 800d43e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d442:	b2d2      	uxtb	r2, r2
 800d444:	701a      	strb	r2, [r3, #0]
 800d446:	6a3b      	ldr	r3, [r7, #32]
 800d448:	09db      	lsrs	r3, r3, #7
 800d44a:	623b      	str	r3, [r7, #32]
 800d44c:	6a3b      	ldr	r3, [r7, #32]
 800d44e:	2b7f      	cmp	r3, #127	; 0x7f
 800d450:	d8f0      	bhi.n	800d434 <SEGGER_SYSVIEW_Start+0x90>
 800d452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d454:	1c5a      	adds	r2, r3, #1
 800d456:	627a      	str	r2, [r7, #36]	; 0x24
 800d458:	6a3a      	ldr	r2, [r7, #32]
 800d45a:	b2d2      	uxtb	r2, r2
 800d45c:	701a      	strb	r2, [r3, #0]
 800d45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d460:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	61fb      	str	r3, [r7, #28]
 800d466:	4b28      	ldr	r3, [pc, #160]	; (800d508 <SEGGER_SYSVIEW_Start+0x164>)
 800d468:	691b      	ldr	r3, [r3, #16]
 800d46a:	61bb      	str	r3, [r7, #24]
 800d46c:	e00b      	b.n	800d486 <SEGGER_SYSVIEW_Start+0xe2>
 800d46e:	69bb      	ldr	r3, [r7, #24]
 800d470:	b2da      	uxtb	r2, r3
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	1c59      	adds	r1, r3, #1
 800d476:	61f9      	str	r1, [r7, #28]
 800d478:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d47c:	b2d2      	uxtb	r2, r2
 800d47e:	701a      	strb	r2, [r3, #0]
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	09db      	lsrs	r3, r3, #7
 800d484:	61bb      	str	r3, [r7, #24]
 800d486:	69bb      	ldr	r3, [r7, #24]
 800d488:	2b7f      	cmp	r3, #127	; 0x7f
 800d48a:	d8f0      	bhi.n	800d46e <SEGGER_SYSVIEW_Start+0xca>
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	1c5a      	adds	r2, r3, #1
 800d490:	61fa      	str	r2, [r7, #28]
 800d492:	69ba      	ldr	r2, [r7, #24]
 800d494:	b2d2      	uxtb	r2, r2
 800d496:	701a      	strb	r2, [r3, #0]
 800d498:	69fb      	ldr	r3, [r7, #28]
 800d49a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	617b      	str	r3, [r7, #20]
 800d4a0:	2302      	movs	r3, #2
 800d4a2:	613b      	str	r3, [r7, #16]
 800d4a4:	e00b      	b.n	800d4be <SEGGER_SYSVIEW_Start+0x11a>
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	b2da      	uxtb	r2, r3
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	1c59      	adds	r1, r3, #1
 800d4ae:	6179      	str	r1, [r7, #20]
 800d4b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d4b4:	b2d2      	uxtb	r2, r2
 800d4b6:	701a      	strb	r2, [r3, #0]
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	09db      	lsrs	r3, r3, #7
 800d4bc:	613b      	str	r3, [r7, #16]
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	2b7f      	cmp	r3, #127	; 0x7f
 800d4c2:	d8f0      	bhi.n	800d4a6 <SEGGER_SYSVIEW_Start+0x102>
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	617a      	str	r2, [r7, #20]
 800d4ca:	693a      	ldr	r2, [r7, #16]
 800d4cc:	b2d2      	uxtb	r2, r2
 800d4ce:	701a      	strb	r2, [r3, #0]
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800d4d4:	2218      	movs	r2, #24
 800d4d6:	6839      	ldr	r1, [r7, #0]
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f7ff fc85 	bl	800cde8 <_SendPacket>
      RECORD_END();
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800d4e4:	4b08      	ldr	r3, [pc, #32]	; (800d508 <SEGGER_SYSVIEW_Start+0x164>)
 800d4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d002      	beq.n	800d4f2 <SEGGER_SYSVIEW_Start+0x14e>
      _SYSVIEW_Globals.pfSendSysDesc();
 800d4ec:	4b06      	ldr	r3, [pc, #24]	; (800d508 <SEGGER_SYSVIEW_Start+0x164>)
 800d4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800d4f2:	f000 f9ed 	bl	800d8d0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800d4f6:	f000 f9b3 	bl	800d860 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800d4fa:	f000 fc13 	bl	800dd24 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800d4fe:	bf00      	nop
 800d500:	3730      	adds	r7, #48	; 0x30
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	20007918 	.word	0x20007918
 800d50c:	08010844 	.word	0x08010844
 800d510:	20007948 	.word	0x20007948

0800d514 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800d514:	b580      	push	{r7, lr}
 800d516:	b082      	sub	sp, #8
 800d518:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d51a:	f3ef 8311 	mrs	r3, BASEPRI
 800d51e:	f04f 0120 	mov.w	r1, #32
 800d522:	f381 8811 	msr	BASEPRI, r1
 800d526:	607b      	str	r3, [r7, #4]
 800d528:	480b      	ldr	r0, [pc, #44]	; (800d558 <SEGGER_SYSVIEW_Stop+0x44>)
 800d52a:	f7ff fb7e 	bl	800cc2a <_PreparePacket>
 800d52e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800d530:	4b0a      	ldr	r3, [pc, #40]	; (800d55c <SEGGER_SYSVIEW_Stop+0x48>)
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d007      	beq.n	800d548 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800d538:	220b      	movs	r2, #11
 800d53a:	6839      	ldr	r1, [r7, #0]
 800d53c:	6838      	ldr	r0, [r7, #0]
 800d53e:	f7ff fc53 	bl	800cde8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800d542:	4b06      	ldr	r3, [pc, #24]	; (800d55c <SEGGER_SYSVIEW_Stop+0x48>)
 800d544:	2200      	movs	r2, #0
 800d546:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f383 8811 	msr	BASEPRI, r3
}
 800d54e:	bf00      	nop
 800d550:	3708      	adds	r7, #8
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	20007948 	.word	0x20007948
 800d55c:	20007918 	.word	0x20007918

0800d560 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800d560:	b580      	push	{r7, lr}
 800d562:	b08c      	sub	sp, #48	; 0x30
 800d564:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800d566:	f3ef 8311 	mrs	r3, BASEPRI
 800d56a:	f04f 0120 	mov.w	r1, #32
 800d56e:	f381 8811 	msr	BASEPRI, r1
 800d572:	60fb      	str	r3, [r7, #12]
 800d574:	4845      	ldr	r0, [pc, #276]	; (800d68c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800d576:	f7ff fb58 	bl	800cc2a <_PreparePacket>
 800d57a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d584:	4b42      	ldr	r3, [pc, #264]	; (800d690 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	62bb      	str	r3, [r7, #40]	; 0x28
 800d58a:	e00b      	b.n	800d5a4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800d58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58e:	b2da      	uxtb	r2, r3
 800d590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d592:	1c59      	adds	r1, r3, #1
 800d594:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d596:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d59a:	b2d2      	uxtb	r2, r2
 800d59c:	701a      	strb	r2, [r3, #0]
 800d59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a0:	09db      	lsrs	r3, r3, #7
 800d5a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a6:	2b7f      	cmp	r3, #127	; 0x7f
 800d5a8:	d8f0      	bhi.n	800d58c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800d5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ac:	1c5a      	adds	r2, r3, #1
 800d5ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d5b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5b2:	b2d2      	uxtb	r2, r2
 800d5b4:	701a      	strb	r2, [r3, #0]
 800d5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	627b      	str	r3, [r7, #36]	; 0x24
 800d5be:	4b34      	ldr	r3, [pc, #208]	; (800d690 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d5c0:	689b      	ldr	r3, [r3, #8]
 800d5c2:	623b      	str	r3, [r7, #32]
 800d5c4:	e00b      	b.n	800d5de <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800d5c6:	6a3b      	ldr	r3, [r7, #32]
 800d5c8:	b2da      	uxtb	r2, r3
 800d5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5cc:	1c59      	adds	r1, r3, #1
 800d5ce:	6279      	str	r1, [r7, #36]	; 0x24
 800d5d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d5d4:	b2d2      	uxtb	r2, r2
 800d5d6:	701a      	strb	r2, [r3, #0]
 800d5d8:	6a3b      	ldr	r3, [r7, #32]
 800d5da:	09db      	lsrs	r3, r3, #7
 800d5dc:	623b      	str	r3, [r7, #32]
 800d5de:	6a3b      	ldr	r3, [r7, #32]
 800d5e0:	2b7f      	cmp	r3, #127	; 0x7f
 800d5e2:	d8f0      	bhi.n	800d5c6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e6:	1c5a      	adds	r2, r3, #1
 800d5e8:	627a      	str	r2, [r7, #36]	; 0x24
 800d5ea:	6a3a      	ldr	r2, [r7, #32]
 800d5ec:	b2d2      	uxtb	r2, r2
 800d5ee:	701a      	strb	r2, [r3, #0]
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	61fb      	str	r3, [r7, #28]
 800d5f8:	4b25      	ldr	r3, [pc, #148]	; (800d690 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d5fa:	691b      	ldr	r3, [r3, #16]
 800d5fc:	61bb      	str	r3, [r7, #24]
 800d5fe:	e00b      	b.n	800d618 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800d600:	69bb      	ldr	r3, [r7, #24]
 800d602:	b2da      	uxtb	r2, r3
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	1c59      	adds	r1, r3, #1
 800d608:	61f9      	str	r1, [r7, #28]
 800d60a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d60e:	b2d2      	uxtb	r2, r2
 800d610:	701a      	strb	r2, [r3, #0]
 800d612:	69bb      	ldr	r3, [r7, #24]
 800d614:	09db      	lsrs	r3, r3, #7
 800d616:	61bb      	str	r3, [r7, #24]
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	2b7f      	cmp	r3, #127	; 0x7f
 800d61c:	d8f0      	bhi.n	800d600 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800d61e:	69fb      	ldr	r3, [r7, #28]
 800d620:	1c5a      	adds	r2, r3, #1
 800d622:	61fa      	str	r2, [r7, #28]
 800d624:	69ba      	ldr	r2, [r7, #24]
 800d626:	b2d2      	uxtb	r2, r2
 800d628:	701a      	strb	r2, [r3, #0]
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	617b      	str	r3, [r7, #20]
 800d632:	2302      	movs	r3, #2
 800d634:	613b      	str	r3, [r7, #16]
 800d636:	e00b      	b.n	800d650 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	b2da      	uxtb	r2, r3
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	1c59      	adds	r1, r3, #1
 800d640:	6179      	str	r1, [r7, #20]
 800d642:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d646:	b2d2      	uxtb	r2, r2
 800d648:	701a      	strb	r2, [r3, #0]
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	09db      	lsrs	r3, r3, #7
 800d64e:	613b      	str	r3, [r7, #16]
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	2b7f      	cmp	r3, #127	; 0x7f
 800d654:	d8f0      	bhi.n	800d638 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	1c5a      	adds	r2, r3, #1
 800d65a:	617a      	str	r2, [r7, #20]
 800d65c:	693a      	ldr	r2, [r7, #16]
 800d65e:	b2d2      	uxtb	r2, r2
 800d660:	701a      	strb	r2, [r3, #0]
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800d666:	2218      	movs	r2, #24
 800d668:	6879      	ldr	r1, [r7, #4]
 800d66a:	68b8      	ldr	r0, [r7, #8]
 800d66c:	f7ff fbbc 	bl	800cde8 <_SendPacket>
  RECORD_END();
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800d676:	4b06      	ldr	r3, [pc, #24]	; (800d690 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d002      	beq.n	800d684 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800d67e:	4b04      	ldr	r3, [pc, #16]	; (800d690 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d682:	4798      	blx	r3
  }
}
 800d684:	bf00      	nop
 800d686:	3730      	adds	r7, #48	; 0x30
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}
 800d68c:	20007948 	.word	0x20007948
 800d690:	20007918 	.word	0x20007918

0800d694 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800d694:	b580      	push	{r7, lr}
 800d696:	b092      	sub	sp, #72	; 0x48
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800d69c:	f3ef 8311 	mrs	r3, BASEPRI
 800d6a0:	f04f 0120 	mov.w	r1, #32
 800d6a4:	f381 8811 	msr	BASEPRI, r1
 800d6a8:	617b      	str	r3, [r7, #20]
 800d6aa:	486b      	ldr	r0, [pc, #428]	; (800d858 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800d6ac:	f7ff fabd 	bl	800cc2a <_PreparePacket>
 800d6b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	647b      	str	r3, [r7, #68]	; 0x44
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	4b67      	ldr	r3, [pc, #412]	; (800d85c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800d6c0:	691b      	ldr	r3, [r3, #16]
 800d6c2:	1ad3      	subs	r3, r2, r3
 800d6c4:	089b      	lsrs	r3, r3, #2
 800d6c6:	643b      	str	r3, [r7, #64]	; 0x40
 800d6c8:	e00b      	b.n	800d6e2 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 800d6ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6cc:	b2da      	uxtb	r2, r3
 800d6ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6d0:	1c59      	adds	r1, r3, #1
 800d6d2:	6479      	str	r1, [r7, #68]	; 0x44
 800d6d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d6d8:	b2d2      	uxtb	r2, r2
 800d6da:	701a      	strb	r2, [r3, #0]
 800d6dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6de:	09db      	lsrs	r3, r3, #7
 800d6e0:	643b      	str	r3, [r7, #64]	; 0x40
 800d6e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6e4:	2b7f      	cmp	r3, #127	; 0x7f
 800d6e6:	d8f0      	bhi.n	800d6ca <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 800d6e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6ea:	1c5a      	adds	r2, r3, #1
 800d6ec:	647a      	str	r2, [r7, #68]	; 0x44
 800d6ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6f0:	b2d2      	uxtb	r2, r2
 800d6f2:	701a      	strb	r2, [r3, #0]
 800d6f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	689b      	ldr	r3, [r3, #8]
 800d700:	63bb      	str	r3, [r7, #56]	; 0x38
 800d702:	e00b      	b.n	800d71c <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 800d704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d706:	b2da      	uxtb	r2, r3
 800d708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d70a:	1c59      	adds	r1, r3, #1
 800d70c:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d70e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d712:	b2d2      	uxtb	r2, r2
 800d714:	701a      	strb	r2, [r3, #0]
 800d716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d718:	09db      	lsrs	r3, r3, #7
 800d71a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71e:	2b7f      	cmp	r3, #127	; 0x7f
 800d720:	d8f0      	bhi.n	800d704 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800d722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d724:	1c5a      	adds	r2, r3, #1
 800d726:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d728:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d72a:	b2d2      	uxtb	r2, r2
 800d72c:	701a      	strb	r2, [r3, #0]
 800d72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d730:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	2220      	movs	r2, #32
 800d738:	4619      	mov	r1, r3
 800d73a:	68f8      	ldr	r0, [r7, #12]
 800d73c:	f7ff fa28 	bl	800cb90 <_EncodeStr>
 800d740:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800d742:	2209      	movs	r2, #9
 800d744:	68f9      	ldr	r1, [r7, #12]
 800d746:	6938      	ldr	r0, [r7, #16]
 800d748:	f7ff fb4e 	bl	800cde8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	637b      	str	r3, [r7, #52]	; 0x34
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681a      	ldr	r2, [r3, #0]
 800d758:	4b40      	ldr	r3, [pc, #256]	; (800d85c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800d75a:	691b      	ldr	r3, [r3, #16]
 800d75c:	1ad3      	subs	r3, r2, r3
 800d75e:	089b      	lsrs	r3, r3, #2
 800d760:	633b      	str	r3, [r7, #48]	; 0x30
 800d762:	e00b      	b.n	800d77c <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 800d764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d766:	b2da      	uxtb	r2, r3
 800d768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d76a:	1c59      	adds	r1, r3, #1
 800d76c:	6379      	str	r1, [r7, #52]	; 0x34
 800d76e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d772:	b2d2      	uxtb	r2, r2
 800d774:	701a      	strb	r2, [r3, #0]
 800d776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d778:	09db      	lsrs	r3, r3, #7
 800d77a:	633b      	str	r3, [r7, #48]	; 0x30
 800d77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77e:	2b7f      	cmp	r3, #127	; 0x7f
 800d780:	d8f0      	bhi.n	800d764 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 800d782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d784:	1c5a      	adds	r2, r3, #1
 800d786:	637a      	str	r2, [r7, #52]	; 0x34
 800d788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d78a:	b2d2      	uxtb	r2, r2
 800d78c:	701a      	strb	r2, [r3, #0]
 800d78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d790:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d79c:	e00b      	b.n	800d7b6 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 800d79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a0:	b2da      	uxtb	r2, r3
 800d7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a4:	1c59      	adds	r1, r3, #1
 800d7a6:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d7a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d7ac:	b2d2      	uxtb	r2, r2
 800d7ae:	701a      	strb	r2, [r3, #0]
 800d7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b2:	09db      	lsrs	r3, r3, #7
 800d7b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b8:	2b7f      	cmp	r3, #127	; 0x7f
 800d7ba:	d8f0      	bhi.n	800d79e <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 800d7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7be:	1c5a      	adds	r2, r3, #1
 800d7c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d7c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7c4:	b2d2      	uxtb	r2, r2
 800d7c6:	701a      	strb	r2, [r3, #0]
 800d7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	627b      	str	r3, [r7, #36]	; 0x24
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	691b      	ldr	r3, [r3, #16]
 800d7d4:	623b      	str	r3, [r7, #32]
 800d7d6:	e00b      	b.n	800d7f0 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 800d7d8:	6a3b      	ldr	r3, [r7, #32]
 800d7da:	b2da      	uxtb	r2, r3
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7de:	1c59      	adds	r1, r3, #1
 800d7e0:	6279      	str	r1, [r7, #36]	; 0x24
 800d7e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d7e6:	b2d2      	uxtb	r2, r2
 800d7e8:	701a      	strb	r2, [r3, #0]
 800d7ea:	6a3b      	ldr	r3, [r7, #32]
 800d7ec:	09db      	lsrs	r3, r3, #7
 800d7ee:	623b      	str	r3, [r7, #32]
 800d7f0:	6a3b      	ldr	r3, [r7, #32]
 800d7f2:	2b7f      	cmp	r3, #127	; 0x7f
 800d7f4:	d8f0      	bhi.n	800d7d8 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800d7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f8:	1c5a      	adds	r2, r3, #1
 800d7fa:	627a      	str	r2, [r7, #36]	; 0x24
 800d7fc:	6a3a      	ldr	r2, [r7, #32]
 800d7fe:	b2d2      	uxtb	r2, r2
 800d800:	701a      	strb	r2, [r3, #0]
 800d802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d804:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	61fb      	str	r3, [r7, #28]
 800d80a:	2300      	movs	r3, #0
 800d80c:	61bb      	str	r3, [r7, #24]
 800d80e:	e00b      	b.n	800d828 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	b2da      	uxtb	r2, r3
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	1c59      	adds	r1, r3, #1
 800d818:	61f9      	str	r1, [r7, #28]
 800d81a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d81e:	b2d2      	uxtb	r2, r2
 800d820:	701a      	strb	r2, [r3, #0]
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	09db      	lsrs	r3, r3, #7
 800d826:	61bb      	str	r3, [r7, #24]
 800d828:	69bb      	ldr	r3, [r7, #24]
 800d82a:	2b7f      	cmp	r3, #127	; 0x7f
 800d82c:	d8f0      	bhi.n	800d810 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	1c5a      	adds	r2, r3, #1
 800d832:	61fa      	str	r2, [r7, #28]
 800d834:	69ba      	ldr	r2, [r7, #24]
 800d836:	b2d2      	uxtb	r2, r2
 800d838:	701a      	strb	r2, [r3, #0]
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800d83e:	2215      	movs	r2, #21
 800d840:	68f9      	ldr	r1, [r7, #12]
 800d842:	6938      	ldr	r0, [r7, #16]
 800d844:	f7ff fad0 	bl	800cde8 <_SendPacket>
  RECORD_END();
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	f383 8811 	msr	BASEPRI, r3
}
 800d84e:	bf00      	nop
 800d850:	3748      	adds	r7, #72	; 0x48
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	20007948 	.word	0x20007948
 800d85c:	20007918 	.word	0x20007918

0800d860 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800d860:	b580      	push	{r7, lr}
 800d862:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800d864:	4b07      	ldr	r3, [pc, #28]	; (800d884 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d866:	6a1b      	ldr	r3, [r3, #32]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d008      	beq.n	800d87e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800d86c:	4b05      	ldr	r3, [pc, #20]	; (800d884 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d86e:	6a1b      	ldr	r3, [r3, #32]
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d003      	beq.n	800d87e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800d876:	4b03      	ldr	r3, [pc, #12]	; (800d884 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d878:	6a1b      	ldr	r3, [r3, #32]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	4798      	blx	r3
  }
}
 800d87e:	bf00      	nop
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	20007918 	.word	0x20007918

0800d888 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800d888:	b580      	push	{r7, lr}
 800d88a:	b086      	sub	sp, #24
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d890:	f3ef 8311 	mrs	r3, BASEPRI
 800d894:	f04f 0120 	mov.w	r1, #32
 800d898:	f381 8811 	msr	BASEPRI, r1
 800d89c:	617b      	str	r3, [r7, #20]
 800d89e:	480b      	ldr	r0, [pc, #44]	; (800d8cc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800d8a0:	f7ff f9c3 	bl	800cc2a <_PreparePacket>
 800d8a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d8a6:	2280      	movs	r2, #128	; 0x80
 800d8a8:	6879      	ldr	r1, [r7, #4]
 800d8aa:	6938      	ldr	r0, [r7, #16]
 800d8ac:	f7ff f970 	bl	800cb90 <_EncodeStr>
 800d8b0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800d8b2:	220e      	movs	r2, #14
 800d8b4:	68f9      	ldr	r1, [r7, #12]
 800d8b6:	6938      	ldr	r0, [r7, #16]
 800d8b8:	f7ff fa96 	bl	800cde8 <_SendPacket>
  RECORD_END();
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	f383 8811 	msr	BASEPRI, r3
}
 800d8c2:	bf00      	nop
 800d8c4:	3718      	adds	r7, #24
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	20007948 	.word	0x20007948

0800d8d0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800d8d0:	b590      	push	{r4, r7, lr}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800d8d6:	4b15      	ldr	r3, [pc, #84]	; (800d92c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d8d8:	6a1b      	ldr	r3, [r3, #32]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d01a      	beq.n	800d914 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800d8de:	4b13      	ldr	r3, [pc, #76]	; (800d92c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d8e0:	6a1b      	ldr	r3, [r3, #32]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d015      	beq.n	800d914 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800d8e8:	4b10      	ldr	r3, [pc, #64]	; (800d92c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d8ea:	6a1b      	ldr	r3, [r3, #32]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	4798      	blx	r3
 800d8f0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d8f4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800d8f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d8fa:	f04f 0200 	mov.w	r2, #0
 800d8fe:	f04f 0300 	mov.w	r3, #0
 800d902:	000a      	movs	r2, r1
 800d904:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d906:	4613      	mov	r3, r2
 800d908:	461a      	mov	r2, r3
 800d90a:	4621      	mov	r1, r4
 800d90c:	200d      	movs	r0, #13
 800d90e:	f7ff fbe7 	bl	800d0e0 <SEGGER_SYSVIEW_RecordU32x2>
 800d912:	e006      	b.n	800d922 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800d914:	4b06      	ldr	r3, [pc, #24]	; (800d930 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4619      	mov	r1, r3
 800d91a:	200c      	movs	r0, #12
 800d91c:	f7ff fba4 	bl	800d068 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800d920:	bf00      	nop
 800d922:	bf00      	nop
 800d924:	370c      	adds	r7, #12
 800d926:	46bd      	mov	sp, r7
 800d928:	bd90      	pop	{r4, r7, pc}
 800d92a:	bf00      	nop
 800d92c:	20007918 	.word	0x20007918
 800d930:	e0001004 	.word	0xe0001004

0800d934 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d93a:	f3ef 8311 	mrs	r3, BASEPRI
 800d93e:	f04f 0120 	mov.w	r1, #32
 800d942:	f381 8811 	msr	BASEPRI, r1
 800d946:	607b      	str	r3, [r7, #4]
 800d948:	4807      	ldr	r0, [pc, #28]	; (800d968 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800d94a:	f7ff f96e 	bl	800cc2a <_PreparePacket>
 800d94e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800d950:	2211      	movs	r2, #17
 800d952:	6839      	ldr	r1, [r7, #0]
 800d954:	6838      	ldr	r0, [r7, #0]
 800d956:	f7ff fa47 	bl	800cde8 <_SendPacket>
  RECORD_END();
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f383 8811 	msr	BASEPRI, r3
}
 800d960:	bf00      	nop
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	20007948 	.word	0x20007948

0800d96c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b088      	sub	sp, #32
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d974:	f3ef 8311 	mrs	r3, BASEPRI
 800d978:	f04f 0120 	mov.w	r1, #32
 800d97c:	f381 8811 	msr	BASEPRI, r1
 800d980:	617b      	str	r3, [r7, #20]
 800d982:	481a      	ldr	r0, [pc, #104]	; (800d9ec <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800d984:	f7ff f951 	bl	800cc2a <_PreparePacket>
 800d988:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d98e:	4b18      	ldr	r3, [pc, #96]	; (800d9f0 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 800d990:	691b      	ldr	r3, [r3, #16]
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	1ad3      	subs	r3, r2, r3
 800d996:	089b      	lsrs	r3, r3, #2
 800d998:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	61fb      	str	r3, [r7, #28]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	61bb      	str	r3, [r7, #24]
 800d9a2:	e00b      	b.n	800d9bc <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	69fb      	ldr	r3, [r7, #28]
 800d9aa:	1c59      	adds	r1, r3, #1
 800d9ac:	61f9      	str	r1, [r7, #28]
 800d9ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d9b2:	b2d2      	uxtb	r2, r2
 800d9b4:	701a      	strb	r2, [r3, #0]
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	09db      	lsrs	r3, r3, #7
 800d9ba:	61bb      	str	r3, [r7, #24]
 800d9bc:	69bb      	ldr	r3, [r7, #24]
 800d9be:	2b7f      	cmp	r3, #127	; 0x7f
 800d9c0:	d8f0      	bhi.n	800d9a4 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800d9c2:	69fb      	ldr	r3, [r7, #28]
 800d9c4:	1c5a      	adds	r2, r3, #1
 800d9c6:	61fa      	str	r2, [r7, #28]
 800d9c8:	69ba      	ldr	r2, [r7, #24]
 800d9ca:	b2d2      	uxtb	r2, r2
 800d9cc:	701a      	strb	r2, [r3, #0]
 800d9ce:	69fb      	ldr	r3, [r7, #28]
 800d9d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800d9d2:	2208      	movs	r2, #8
 800d9d4:	68f9      	ldr	r1, [r7, #12]
 800d9d6:	6938      	ldr	r0, [r7, #16]
 800d9d8:	f7ff fa06 	bl	800cde8 <_SendPacket>
  RECORD_END();
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	f383 8811 	msr	BASEPRI, r3
}
 800d9e2:	bf00      	nop
 800d9e4:	3720      	adds	r7, #32
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	20007948 	.word	0x20007948
 800d9f0:	20007918 	.word	0x20007918

0800d9f4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b088      	sub	sp, #32
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d9fc:	f3ef 8311 	mrs	r3, BASEPRI
 800da00:	f04f 0120 	mov.w	r1, #32
 800da04:	f381 8811 	msr	BASEPRI, r1
 800da08:	617b      	str	r3, [r7, #20]
 800da0a:	481a      	ldr	r0, [pc, #104]	; (800da74 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800da0c:	f7ff f90d 	bl	800cc2a <_PreparePacket>
 800da10:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800da16:	4b18      	ldr	r3, [pc, #96]	; (800da78 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 800da18:	691b      	ldr	r3, [r3, #16]
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	1ad3      	subs	r3, r2, r3
 800da1e:	089b      	lsrs	r3, r3, #2
 800da20:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	61fb      	str	r3, [r7, #28]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	61bb      	str	r3, [r7, #24]
 800da2a:	e00b      	b.n	800da44 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 800da2c:	69bb      	ldr	r3, [r7, #24]
 800da2e:	b2da      	uxtb	r2, r3
 800da30:	69fb      	ldr	r3, [r7, #28]
 800da32:	1c59      	adds	r1, r3, #1
 800da34:	61f9      	str	r1, [r7, #28]
 800da36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800da3a:	b2d2      	uxtb	r2, r2
 800da3c:	701a      	strb	r2, [r3, #0]
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	09db      	lsrs	r3, r3, #7
 800da42:	61bb      	str	r3, [r7, #24]
 800da44:	69bb      	ldr	r3, [r7, #24]
 800da46:	2b7f      	cmp	r3, #127	; 0x7f
 800da48:	d8f0      	bhi.n	800da2c <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 800da4a:	69fb      	ldr	r3, [r7, #28]
 800da4c:	1c5a      	adds	r2, r3, #1
 800da4e:	61fa      	str	r2, [r7, #28]
 800da50:	69ba      	ldr	r2, [r7, #24]
 800da52:	b2d2      	uxtb	r2, r2
 800da54:	701a      	strb	r2, [r3, #0]
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800da5a:	2204      	movs	r2, #4
 800da5c:	68f9      	ldr	r1, [r7, #12]
 800da5e:	6938      	ldr	r0, [r7, #16]
 800da60:	f7ff f9c2 	bl	800cde8 <_SendPacket>
  RECORD_END();
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	f383 8811 	msr	BASEPRI, r3
}
 800da6a:	bf00      	nop
 800da6c:	3720      	adds	r7, #32
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
 800da72:	bf00      	nop
 800da74:	20007948 	.word	0x20007948
 800da78:	20007918 	.word	0x20007918

0800da7c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b088      	sub	sp, #32
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800da84:	f3ef 8311 	mrs	r3, BASEPRI
 800da88:	f04f 0120 	mov.w	r1, #32
 800da8c:	f381 8811 	msr	BASEPRI, r1
 800da90:	617b      	str	r3, [r7, #20]
 800da92:	481a      	ldr	r0, [pc, #104]	; (800dafc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800da94:	f7ff f8c9 	bl	800cc2a <_PreparePacket>
 800da98:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800da9e:	4b18      	ldr	r3, [pc, #96]	; (800db00 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 800daa0:	691b      	ldr	r3, [r3, #16]
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	1ad3      	subs	r3, r2, r3
 800daa6:	089b      	lsrs	r3, r3, #2
 800daa8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	61fb      	str	r3, [r7, #28]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	61bb      	str	r3, [r7, #24]
 800dab2:	e00b      	b.n	800dacc <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	b2da      	uxtb	r2, r3
 800dab8:	69fb      	ldr	r3, [r7, #28]
 800daba:	1c59      	adds	r1, r3, #1
 800dabc:	61f9      	str	r1, [r7, #28]
 800dabe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dac2:	b2d2      	uxtb	r2, r2
 800dac4:	701a      	strb	r2, [r3, #0]
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	09db      	lsrs	r3, r3, #7
 800daca:	61bb      	str	r3, [r7, #24]
 800dacc:	69bb      	ldr	r3, [r7, #24]
 800dace:	2b7f      	cmp	r3, #127	; 0x7f
 800dad0:	d8f0      	bhi.n	800dab4 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	1c5a      	adds	r2, r3, #1
 800dad6:	61fa      	str	r2, [r7, #28]
 800dad8:	69ba      	ldr	r2, [r7, #24]
 800dada:	b2d2      	uxtb	r2, r2
 800dadc:	701a      	strb	r2, [r3, #0]
 800dade:	69fb      	ldr	r3, [r7, #28]
 800dae0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800dae2:	2206      	movs	r2, #6
 800dae4:	68f9      	ldr	r1, [r7, #12]
 800dae6:	6938      	ldr	r0, [r7, #16]
 800dae8:	f7ff f97e 	bl	800cde8 <_SendPacket>
  RECORD_END();
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	f383 8811 	msr	BASEPRI, r3
}
 800daf2:	bf00      	nop
 800daf4:	3720      	adds	r7, #32
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	20007948 	.word	0x20007948
 800db00:	20007918 	.word	0x20007918

0800db04 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800db04:	b580      	push	{r7, lr}
 800db06:	b08a      	sub	sp, #40	; 0x28
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800db0e:	f3ef 8311 	mrs	r3, BASEPRI
 800db12:	f04f 0120 	mov.w	r1, #32
 800db16:	f381 8811 	msr	BASEPRI, r1
 800db1a:	617b      	str	r3, [r7, #20]
 800db1c:	4827      	ldr	r0, [pc, #156]	; (800dbbc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800db1e:	f7ff f884 	bl	800cc2a <_PreparePacket>
 800db22:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800db28:	4b25      	ldr	r3, [pc, #148]	; (800dbc0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800db2a:	691b      	ldr	r3, [r3, #16]
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	1ad3      	subs	r3, r2, r3
 800db30:	089b      	lsrs	r3, r3, #2
 800db32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	627b      	str	r3, [r7, #36]	; 0x24
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	623b      	str	r3, [r7, #32]
 800db3c:	e00b      	b.n	800db56 <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 800db3e:	6a3b      	ldr	r3, [r7, #32]
 800db40:	b2da      	uxtb	r2, r3
 800db42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db44:	1c59      	adds	r1, r3, #1
 800db46:	6279      	str	r1, [r7, #36]	; 0x24
 800db48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800db4c:	b2d2      	uxtb	r2, r2
 800db4e:	701a      	strb	r2, [r3, #0]
 800db50:	6a3b      	ldr	r3, [r7, #32]
 800db52:	09db      	lsrs	r3, r3, #7
 800db54:	623b      	str	r3, [r7, #32]
 800db56:	6a3b      	ldr	r3, [r7, #32]
 800db58:	2b7f      	cmp	r3, #127	; 0x7f
 800db5a:	d8f0      	bhi.n	800db3e <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 800db5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5e:	1c5a      	adds	r2, r3, #1
 800db60:	627a      	str	r2, [r7, #36]	; 0x24
 800db62:	6a3a      	ldr	r2, [r7, #32]
 800db64:	b2d2      	uxtb	r2, r2
 800db66:	701a      	strb	r2, [r3, #0]
 800db68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	61fb      	str	r3, [r7, #28]
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	61bb      	str	r3, [r7, #24]
 800db74:	e00b      	b.n	800db8e <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 800db76:	69bb      	ldr	r3, [r7, #24]
 800db78:	b2da      	uxtb	r2, r3
 800db7a:	69fb      	ldr	r3, [r7, #28]
 800db7c:	1c59      	adds	r1, r3, #1
 800db7e:	61f9      	str	r1, [r7, #28]
 800db80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800db84:	b2d2      	uxtb	r2, r2
 800db86:	701a      	strb	r2, [r3, #0]
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	09db      	lsrs	r3, r3, #7
 800db8c:	61bb      	str	r3, [r7, #24]
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	2b7f      	cmp	r3, #127	; 0x7f
 800db92:	d8f0      	bhi.n	800db76 <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 800db94:	69fb      	ldr	r3, [r7, #28]
 800db96:	1c5a      	adds	r2, r3, #1
 800db98:	61fa      	str	r2, [r7, #28]
 800db9a:	69ba      	ldr	r2, [r7, #24]
 800db9c:	b2d2      	uxtb	r2, r2
 800db9e:	701a      	strb	r2, [r3, #0]
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800dba4:	2207      	movs	r2, #7
 800dba6:	68f9      	ldr	r1, [r7, #12]
 800dba8:	6938      	ldr	r0, [r7, #16]
 800dbaa:	f7ff f91d 	bl	800cde8 <_SendPacket>
  RECORD_END();
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	f383 8811 	msr	BASEPRI, r3
}
 800dbb4:	bf00      	nop
 800dbb6:	3728      	adds	r7, #40	; 0x28
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}
 800dbbc:	20007948 	.word	0x20007948
 800dbc0:	20007918 	.word	0x20007918

0800dbc4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800dbcc:	4b05      	ldr	r3, [pc, #20]	; (800dbe4 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 800dbce:	691b      	ldr	r3, [r3, #16]
 800dbd0:	687a      	ldr	r2, [r7, #4]
 800dbd2:	1ad3      	subs	r3, r2, r3
 800dbd4:	089b      	lsrs	r3, r3, #2
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	370c      	adds	r7, #12
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop
 800dbe4:	20007918 	.word	0x20007918

0800dbe8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b08c      	sub	sp, #48	; 0x30
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	4603      	mov	r3, r0
 800dbf0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800dbf2:	4b3b      	ldr	r3, [pc, #236]	; (800dce0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d06d      	beq.n	800dcd6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800dbfa:	4b39      	ldr	r3, [pc, #228]	; (800dce0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800dc00:	2300      	movs	r3, #0
 800dc02:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc04:	e008      	b.n	800dc18 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800dc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc08:	691b      	ldr	r3, [r3, #16]
 800dc0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800dc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d007      	beq.n	800dc22 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800dc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc14:	3301      	adds	r3, #1
 800dc16:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc18:	79fb      	ldrb	r3, [r7, #7]
 800dc1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d3f2      	bcc.n	800dc06 <SEGGER_SYSVIEW_SendModule+0x1e>
 800dc20:	e000      	b.n	800dc24 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800dc22:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800dc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d055      	beq.n	800dcd6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800dc2a:	f3ef 8311 	mrs	r3, BASEPRI
 800dc2e:	f04f 0120 	mov.w	r1, #32
 800dc32:	f381 8811 	msr	BASEPRI, r1
 800dc36:	617b      	str	r3, [r7, #20]
 800dc38:	482a      	ldr	r0, [pc, #168]	; (800dce4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800dc3a:	f7fe fff6 	bl	800cc2a <_PreparePacket>
 800dc3e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	627b      	str	r3, [r7, #36]	; 0x24
 800dc48:	79fb      	ldrb	r3, [r7, #7]
 800dc4a:	623b      	str	r3, [r7, #32]
 800dc4c:	e00b      	b.n	800dc66 <SEGGER_SYSVIEW_SendModule+0x7e>
 800dc4e:	6a3b      	ldr	r3, [r7, #32]
 800dc50:	b2da      	uxtb	r2, r3
 800dc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc54:	1c59      	adds	r1, r3, #1
 800dc56:	6279      	str	r1, [r7, #36]	; 0x24
 800dc58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dc5c:	b2d2      	uxtb	r2, r2
 800dc5e:	701a      	strb	r2, [r3, #0]
 800dc60:	6a3b      	ldr	r3, [r7, #32]
 800dc62:	09db      	lsrs	r3, r3, #7
 800dc64:	623b      	str	r3, [r7, #32]
 800dc66:	6a3b      	ldr	r3, [r7, #32]
 800dc68:	2b7f      	cmp	r3, #127	; 0x7f
 800dc6a:	d8f0      	bhi.n	800dc4e <SEGGER_SYSVIEW_SendModule+0x66>
 800dc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6e:	1c5a      	adds	r2, r3, #1
 800dc70:	627a      	str	r2, [r7, #36]	; 0x24
 800dc72:	6a3a      	ldr	r2, [r7, #32]
 800dc74:	b2d2      	uxtb	r2, r2
 800dc76:	701a      	strb	r2, [r3, #0]
 800dc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	61fb      	str	r3, [r7, #28]
 800dc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc82:	689b      	ldr	r3, [r3, #8]
 800dc84:	61bb      	str	r3, [r7, #24]
 800dc86:	e00b      	b.n	800dca0 <SEGGER_SYSVIEW_SendModule+0xb8>
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	b2da      	uxtb	r2, r3
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	1c59      	adds	r1, r3, #1
 800dc90:	61f9      	str	r1, [r7, #28]
 800dc92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dc96:	b2d2      	uxtb	r2, r2
 800dc98:	701a      	strb	r2, [r3, #0]
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	09db      	lsrs	r3, r3, #7
 800dc9e:	61bb      	str	r3, [r7, #24]
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	2b7f      	cmp	r3, #127	; 0x7f
 800dca4:	d8f0      	bhi.n	800dc88 <SEGGER_SYSVIEW_SendModule+0xa0>
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	1c5a      	adds	r2, r3, #1
 800dcaa:	61fa      	str	r2, [r7, #28]
 800dcac:	69ba      	ldr	r2, [r7, #24]
 800dcae:	b2d2      	uxtb	r2, r2
 800dcb0:	701a      	strb	r2, [r3, #0]
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800dcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	2280      	movs	r2, #128	; 0x80
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f7fe ff66 	bl	800cb90 <_EncodeStr>
 800dcc4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800dcc6:	2216      	movs	r2, #22
 800dcc8:	68f9      	ldr	r1, [r7, #12]
 800dcca:	6938      	ldr	r0, [r7, #16]
 800dccc:	f7ff f88c 	bl	800cde8 <_SendPacket>
      RECORD_END();
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800dcd6:	bf00      	nop
 800dcd8:	3730      	adds	r7, #48	; 0x30
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	20007940 	.word	0x20007940
 800dce4:	20007948 	.word	0x20007948

0800dce8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800dcee:	4b0c      	ldr	r3, [pc, #48]	; (800dd20 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d00f      	beq.n	800dd16 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800dcf6:	4b0a      	ldr	r3, [pc, #40]	; (800dd20 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	68db      	ldr	r3, [r3, #12]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d002      	beq.n	800dd0a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	68db      	ldr	r3, [r3, #12]
 800dd08:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	691b      	ldr	r3, [r3, #16]
 800dd0e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d1f2      	bne.n	800dcfc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800dd16:	bf00      	nop
 800dd18:	3708      	adds	r7, #8
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	20007940 	.word	0x20007940

0800dd24 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b086      	sub	sp, #24
 800dd28:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800dd2a:	f3ef 8311 	mrs	r3, BASEPRI
 800dd2e:	f04f 0120 	mov.w	r1, #32
 800dd32:	f381 8811 	msr	BASEPRI, r1
 800dd36:	60fb      	str	r3, [r7, #12]
 800dd38:	4817      	ldr	r0, [pc, #92]	; (800dd98 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800dd3a:	f7fe ff76 	bl	800cc2a <_PreparePacket>
 800dd3e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	617b      	str	r3, [r7, #20]
 800dd48:	4b14      	ldr	r3, [pc, #80]	; (800dd9c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	613b      	str	r3, [r7, #16]
 800dd4e:	e00b      	b.n	800dd68 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	b2da      	uxtb	r2, r3
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	1c59      	adds	r1, r3, #1
 800dd58:	6179      	str	r1, [r7, #20]
 800dd5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dd5e:	b2d2      	uxtb	r2, r2
 800dd60:	701a      	strb	r2, [r3, #0]
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	09db      	lsrs	r3, r3, #7
 800dd66:	613b      	str	r3, [r7, #16]
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	2b7f      	cmp	r3, #127	; 0x7f
 800dd6c:	d8f0      	bhi.n	800dd50 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	1c5a      	adds	r2, r3, #1
 800dd72:	617a      	str	r2, [r7, #20]
 800dd74:	693a      	ldr	r2, [r7, #16]
 800dd76:	b2d2      	uxtb	r2, r2
 800dd78:	701a      	strb	r2, [r3, #0]
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800dd7e:	221b      	movs	r2, #27
 800dd80:	6879      	ldr	r1, [r7, #4]
 800dd82:	68b8      	ldr	r0, [r7, #8]
 800dd84:	f7ff f830 	bl	800cde8 <_SendPacket>
  RECORD_END();
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f383 8811 	msr	BASEPRI, r3
}
 800dd8e:	bf00      	nop
 800dd90:	3718      	adds	r7, #24
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	20007948 	.word	0x20007948
 800dd9c:	20007944 	.word	0x20007944

0800dda0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b08a      	sub	sp, #40	; 0x28
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800dda8:	f3ef 8311 	mrs	r3, BASEPRI
 800ddac:	f04f 0120 	mov.w	r1, #32
 800ddb0:	f381 8811 	msr	BASEPRI, r1
 800ddb4:	617b      	str	r3, [r7, #20]
 800ddb6:	4827      	ldr	r0, [pc, #156]	; (800de54 <SEGGER_SYSVIEW_Warn+0xb4>)
 800ddb8:	f7fe ff37 	bl	800cc2a <_PreparePacket>
 800ddbc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ddbe:	2280      	movs	r2, #128	; 0x80
 800ddc0:	6879      	ldr	r1, [r7, #4]
 800ddc2:	6938      	ldr	r0, [r7, #16]
 800ddc4:	f7fe fee4 	bl	800cb90 <_EncodeStr>
 800ddc8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	627b      	str	r3, [r7, #36]	; 0x24
 800ddce:	2301      	movs	r3, #1
 800ddd0:	623b      	str	r3, [r7, #32]
 800ddd2:	e00b      	b.n	800ddec <SEGGER_SYSVIEW_Warn+0x4c>
 800ddd4:	6a3b      	ldr	r3, [r7, #32]
 800ddd6:	b2da      	uxtb	r2, r3
 800ddd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddda:	1c59      	adds	r1, r3, #1
 800dddc:	6279      	str	r1, [r7, #36]	; 0x24
 800ddde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dde2:	b2d2      	uxtb	r2, r2
 800dde4:	701a      	strb	r2, [r3, #0]
 800dde6:	6a3b      	ldr	r3, [r7, #32]
 800dde8:	09db      	lsrs	r3, r3, #7
 800ddea:	623b      	str	r3, [r7, #32]
 800ddec:	6a3b      	ldr	r3, [r7, #32]
 800ddee:	2b7f      	cmp	r3, #127	; 0x7f
 800ddf0:	d8f0      	bhi.n	800ddd4 <SEGGER_SYSVIEW_Warn+0x34>
 800ddf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf4:	1c5a      	adds	r2, r3, #1
 800ddf6:	627a      	str	r2, [r7, #36]	; 0x24
 800ddf8:	6a3a      	ldr	r2, [r7, #32]
 800ddfa:	b2d2      	uxtb	r2, r2
 800ddfc:	701a      	strb	r2, [r3, #0]
 800ddfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	61fb      	str	r3, [r7, #28]
 800de06:	2300      	movs	r3, #0
 800de08:	61bb      	str	r3, [r7, #24]
 800de0a:	e00b      	b.n	800de24 <SEGGER_SYSVIEW_Warn+0x84>
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	b2da      	uxtb	r2, r3
 800de10:	69fb      	ldr	r3, [r7, #28]
 800de12:	1c59      	adds	r1, r3, #1
 800de14:	61f9      	str	r1, [r7, #28]
 800de16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800de1a:	b2d2      	uxtb	r2, r2
 800de1c:	701a      	strb	r2, [r3, #0]
 800de1e:	69bb      	ldr	r3, [r7, #24]
 800de20:	09db      	lsrs	r3, r3, #7
 800de22:	61bb      	str	r3, [r7, #24]
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	2b7f      	cmp	r3, #127	; 0x7f
 800de28:	d8f0      	bhi.n	800de0c <SEGGER_SYSVIEW_Warn+0x6c>
 800de2a:	69fb      	ldr	r3, [r7, #28]
 800de2c:	1c5a      	adds	r2, r3, #1
 800de2e:	61fa      	str	r2, [r7, #28]
 800de30:	69ba      	ldr	r2, [r7, #24]
 800de32:	b2d2      	uxtb	r2, r2
 800de34:	701a      	strb	r2, [r3, #0]
 800de36:	69fb      	ldr	r3, [r7, #28]
 800de38:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800de3a:	221a      	movs	r2, #26
 800de3c:	68f9      	ldr	r1, [r7, #12]
 800de3e:	6938      	ldr	r0, [r7, #16]
 800de40:	f7fe ffd2 	bl	800cde8 <_SendPacket>
  RECORD_END();
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	f383 8811 	msr	BASEPRI, r3
}
 800de4a:	bf00      	nop
 800de4c:	3728      	adds	r7, #40	; 0x28
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	20007948 	.word	0x20007948

0800de58 <std>:
 800de58:	2300      	movs	r3, #0
 800de5a:	b510      	push	{r4, lr}
 800de5c:	4604      	mov	r4, r0
 800de5e:	e9c0 3300 	strd	r3, r3, [r0]
 800de62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de66:	6083      	str	r3, [r0, #8]
 800de68:	8181      	strh	r1, [r0, #12]
 800de6a:	6643      	str	r3, [r0, #100]	; 0x64
 800de6c:	81c2      	strh	r2, [r0, #14]
 800de6e:	6183      	str	r3, [r0, #24]
 800de70:	4619      	mov	r1, r3
 800de72:	2208      	movs	r2, #8
 800de74:	305c      	adds	r0, #92	; 0x5c
 800de76:	f000 f904 	bl	800e082 <memset>
 800de7a:	4b05      	ldr	r3, [pc, #20]	; (800de90 <std+0x38>)
 800de7c:	6263      	str	r3, [r4, #36]	; 0x24
 800de7e:	4b05      	ldr	r3, [pc, #20]	; (800de94 <std+0x3c>)
 800de80:	62a3      	str	r3, [r4, #40]	; 0x28
 800de82:	4b05      	ldr	r3, [pc, #20]	; (800de98 <std+0x40>)
 800de84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800de86:	4b05      	ldr	r3, [pc, #20]	; (800de9c <std+0x44>)
 800de88:	6224      	str	r4, [r4, #32]
 800de8a:	6323      	str	r3, [r4, #48]	; 0x30
 800de8c:	bd10      	pop	{r4, pc}
 800de8e:	bf00      	nop
 800de90:	0800dfdd 	.word	0x0800dfdd
 800de94:	0800dfff 	.word	0x0800dfff
 800de98:	0800e037 	.word	0x0800e037
 800de9c:	0800e05b 	.word	0x0800e05b

0800dea0 <stdio_exit_handler>:
 800dea0:	4a02      	ldr	r2, [pc, #8]	; (800deac <stdio_exit_handler+0xc>)
 800dea2:	4903      	ldr	r1, [pc, #12]	; (800deb0 <stdio_exit_handler+0x10>)
 800dea4:	4803      	ldr	r0, [pc, #12]	; (800deb4 <stdio_exit_handler+0x14>)
 800dea6:	f000 b869 	b.w	800df7c <_fwalk_sglue>
 800deaa:	bf00      	nop
 800deac:	20000068 	.word	0x20000068
 800deb0:	0800eae5 	.word	0x0800eae5
 800deb4:	20000074 	.word	0x20000074

0800deb8 <cleanup_stdio>:
 800deb8:	6841      	ldr	r1, [r0, #4]
 800deba:	4b0c      	ldr	r3, [pc, #48]	; (800deec <cleanup_stdio+0x34>)
 800debc:	4299      	cmp	r1, r3
 800debe:	b510      	push	{r4, lr}
 800dec0:	4604      	mov	r4, r0
 800dec2:	d001      	beq.n	800dec8 <cleanup_stdio+0x10>
 800dec4:	f000 fe0e 	bl	800eae4 <_fflush_r>
 800dec8:	68a1      	ldr	r1, [r4, #8]
 800deca:	4b09      	ldr	r3, [pc, #36]	; (800def0 <cleanup_stdio+0x38>)
 800decc:	4299      	cmp	r1, r3
 800dece:	d002      	beq.n	800ded6 <cleanup_stdio+0x1e>
 800ded0:	4620      	mov	r0, r4
 800ded2:	f000 fe07 	bl	800eae4 <_fflush_r>
 800ded6:	68e1      	ldr	r1, [r4, #12]
 800ded8:	4b06      	ldr	r3, [pc, #24]	; (800def4 <cleanup_stdio+0x3c>)
 800deda:	4299      	cmp	r1, r3
 800dedc:	d004      	beq.n	800dee8 <cleanup_stdio+0x30>
 800dede:	4620      	mov	r0, r4
 800dee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dee4:	f000 bdfe 	b.w	800eae4 <_fflush_r>
 800dee8:	bd10      	pop	{r4, pc}
 800deea:	bf00      	nop
 800deec:	20007a2c 	.word	0x20007a2c
 800def0:	20007a94 	.word	0x20007a94
 800def4:	20007afc 	.word	0x20007afc

0800def8 <global_stdio_init.part.0>:
 800def8:	b510      	push	{r4, lr}
 800defa:	4b0b      	ldr	r3, [pc, #44]	; (800df28 <global_stdio_init.part.0+0x30>)
 800defc:	4c0b      	ldr	r4, [pc, #44]	; (800df2c <global_stdio_init.part.0+0x34>)
 800defe:	4a0c      	ldr	r2, [pc, #48]	; (800df30 <global_stdio_init.part.0+0x38>)
 800df00:	601a      	str	r2, [r3, #0]
 800df02:	4620      	mov	r0, r4
 800df04:	2200      	movs	r2, #0
 800df06:	2104      	movs	r1, #4
 800df08:	f7ff ffa6 	bl	800de58 <std>
 800df0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800df10:	2201      	movs	r2, #1
 800df12:	2109      	movs	r1, #9
 800df14:	f7ff ffa0 	bl	800de58 <std>
 800df18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800df1c:	2202      	movs	r2, #2
 800df1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df22:	2112      	movs	r1, #18
 800df24:	f7ff bf98 	b.w	800de58 <std>
 800df28:	20007b64 	.word	0x20007b64
 800df2c:	20007a2c 	.word	0x20007a2c
 800df30:	0800dea1 	.word	0x0800dea1

0800df34 <__sfp_lock_acquire>:
 800df34:	4801      	ldr	r0, [pc, #4]	; (800df3c <__sfp_lock_acquire+0x8>)
 800df36:	f000 b973 	b.w	800e220 <__retarget_lock_acquire_recursive>
 800df3a:	bf00      	nop
 800df3c:	20007b6d 	.word	0x20007b6d

0800df40 <__sfp_lock_release>:
 800df40:	4801      	ldr	r0, [pc, #4]	; (800df48 <__sfp_lock_release+0x8>)
 800df42:	f000 b96e 	b.w	800e222 <__retarget_lock_release_recursive>
 800df46:	bf00      	nop
 800df48:	20007b6d 	.word	0x20007b6d

0800df4c <__sinit>:
 800df4c:	b510      	push	{r4, lr}
 800df4e:	4604      	mov	r4, r0
 800df50:	f7ff fff0 	bl	800df34 <__sfp_lock_acquire>
 800df54:	6a23      	ldr	r3, [r4, #32]
 800df56:	b11b      	cbz	r3, 800df60 <__sinit+0x14>
 800df58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df5c:	f7ff bff0 	b.w	800df40 <__sfp_lock_release>
 800df60:	4b04      	ldr	r3, [pc, #16]	; (800df74 <__sinit+0x28>)
 800df62:	6223      	str	r3, [r4, #32]
 800df64:	4b04      	ldr	r3, [pc, #16]	; (800df78 <__sinit+0x2c>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d1f5      	bne.n	800df58 <__sinit+0xc>
 800df6c:	f7ff ffc4 	bl	800def8 <global_stdio_init.part.0>
 800df70:	e7f2      	b.n	800df58 <__sinit+0xc>
 800df72:	bf00      	nop
 800df74:	0800deb9 	.word	0x0800deb9
 800df78:	20007b64 	.word	0x20007b64

0800df7c <_fwalk_sglue>:
 800df7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df80:	4607      	mov	r7, r0
 800df82:	4688      	mov	r8, r1
 800df84:	4614      	mov	r4, r2
 800df86:	2600      	movs	r6, #0
 800df88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df8c:	f1b9 0901 	subs.w	r9, r9, #1
 800df90:	d505      	bpl.n	800df9e <_fwalk_sglue+0x22>
 800df92:	6824      	ldr	r4, [r4, #0]
 800df94:	2c00      	cmp	r4, #0
 800df96:	d1f7      	bne.n	800df88 <_fwalk_sglue+0xc>
 800df98:	4630      	mov	r0, r6
 800df9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df9e:	89ab      	ldrh	r3, [r5, #12]
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d907      	bls.n	800dfb4 <_fwalk_sglue+0x38>
 800dfa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	d003      	beq.n	800dfb4 <_fwalk_sglue+0x38>
 800dfac:	4629      	mov	r1, r5
 800dfae:	4638      	mov	r0, r7
 800dfb0:	47c0      	blx	r8
 800dfb2:	4306      	orrs	r6, r0
 800dfb4:	3568      	adds	r5, #104	; 0x68
 800dfb6:	e7e9      	b.n	800df8c <_fwalk_sglue+0x10>

0800dfb8 <iprintf>:
 800dfb8:	b40f      	push	{r0, r1, r2, r3}
 800dfba:	b507      	push	{r0, r1, r2, lr}
 800dfbc:	4906      	ldr	r1, [pc, #24]	; (800dfd8 <iprintf+0x20>)
 800dfbe:	ab04      	add	r3, sp, #16
 800dfc0:	6808      	ldr	r0, [r1, #0]
 800dfc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfc6:	6881      	ldr	r1, [r0, #8]
 800dfc8:	9301      	str	r3, [sp, #4]
 800dfca:	f000 fa5b 	bl	800e484 <_vfiprintf_r>
 800dfce:	b003      	add	sp, #12
 800dfd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfd4:	b004      	add	sp, #16
 800dfd6:	4770      	bx	lr
 800dfd8:	200000c0 	.word	0x200000c0

0800dfdc <__sread>:
 800dfdc:	b510      	push	{r4, lr}
 800dfde:	460c      	mov	r4, r1
 800dfe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfe4:	f000 f8ce 	bl	800e184 <_read_r>
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	bfab      	itete	ge
 800dfec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dfee:	89a3      	ldrhlt	r3, [r4, #12]
 800dff0:	181b      	addge	r3, r3, r0
 800dff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dff6:	bfac      	ite	ge
 800dff8:	6563      	strge	r3, [r4, #84]	; 0x54
 800dffa:	81a3      	strhlt	r3, [r4, #12]
 800dffc:	bd10      	pop	{r4, pc}

0800dffe <__swrite>:
 800dffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e002:	461f      	mov	r7, r3
 800e004:	898b      	ldrh	r3, [r1, #12]
 800e006:	05db      	lsls	r3, r3, #23
 800e008:	4605      	mov	r5, r0
 800e00a:	460c      	mov	r4, r1
 800e00c:	4616      	mov	r6, r2
 800e00e:	d505      	bpl.n	800e01c <__swrite+0x1e>
 800e010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e014:	2302      	movs	r3, #2
 800e016:	2200      	movs	r2, #0
 800e018:	f000 f8a2 	bl	800e160 <_lseek_r>
 800e01c:	89a3      	ldrh	r3, [r4, #12]
 800e01e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e026:	81a3      	strh	r3, [r4, #12]
 800e028:	4632      	mov	r2, r6
 800e02a:	463b      	mov	r3, r7
 800e02c:	4628      	mov	r0, r5
 800e02e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e032:	f000 b8b9 	b.w	800e1a8 <_write_r>

0800e036 <__sseek>:
 800e036:	b510      	push	{r4, lr}
 800e038:	460c      	mov	r4, r1
 800e03a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e03e:	f000 f88f 	bl	800e160 <_lseek_r>
 800e042:	1c43      	adds	r3, r0, #1
 800e044:	89a3      	ldrh	r3, [r4, #12]
 800e046:	bf15      	itete	ne
 800e048:	6560      	strne	r0, [r4, #84]	; 0x54
 800e04a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e04e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e052:	81a3      	strheq	r3, [r4, #12]
 800e054:	bf18      	it	ne
 800e056:	81a3      	strhne	r3, [r4, #12]
 800e058:	bd10      	pop	{r4, pc}

0800e05a <__sclose>:
 800e05a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e05e:	f000 b819 	b.w	800e094 <_close_r>

0800e062 <memcmp>:
 800e062:	b510      	push	{r4, lr}
 800e064:	3901      	subs	r1, #1
 800e066:	4402      	add	r2, r0
 800e068:	4290      	cmp	r0, r2
 800e06a:	d101      	bne.n	800e070 <memcmp+0xe>
 800e06c:	2000      	movs	r0, #0
 800e06e:	e005      	b.n	800e07c <memcmp+0x1a>
 800e070:	7803      	ldrb	r3, [r0, #0]
 800e072:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e076:	42a3      	cmp	r3, r4
 800e078:	d001      	beq.n	800e07e <memcmp+0x1c>
 800e07a:	1b18      	subs	r0, r3, r4
 800e07c:	bd10      	pop	{r4, pc}
 800e07e:	3001      	adds	r0, #1
 800e080:	e7f2      	b.n	800e068 <memcmp+0x6>

0800e082 <memset>:
 800e082:	4402      	add	r2, r0
 800e084:	4603      	mov	r3, r0
 800e086:	4293      	cmp	r3, r2
 800e088:	d100      	bne.n	800e08c <memset+0xa>
 800e08a:	4770      	bx	lr
 800e08c:	f803 1b01 	strb.w	r1, [r3], #1
 800e090:	e7f9      	b.n	800e086 <memset+0x4>
	...

0800e094 <_close_r>:
 800e094:	b538      	push	{r3, r4, r5, lr}
 800e096:	4d06      	ldr	r5, [pc, #24]	; (800e0b0 <_close_r+0x1c>)
 800e098:	2300      	movs	r3, #0
 800e09a:	4604      	mov	r4, r0
 800e09c:	4608      	mov	r0, r1
 800e09e:	602b      	str	r3, [r5, #0]
 800e0a0:	f7f4 fa93 	bl	80025ca <_close>
 800e0a4:	1c43      	adds	r3, r0, #1
 800e0a6:	d102      	bne.n	800e0ae <_close_r+0x1a>
 800e0a8:	682b      	ldr	r3, [r5, #0]
 800e0aa:	b103      	cbz	r3, 800e0ae <_close_r+0x1a>
 800e0ac:	6023      	str	r3, [r4, #0]
 800e0ae:	bd38      	pop	{r3, r4, r5, pc}
 800e0b0:	20007b68 	.word	0x20007b68

0800e0b4 <_reclaim_reent>:
 800e0b4:	4b29      	ldr	r3, [pc, #164]	; (800e15c <_reclaim_reent+0xa8>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4283      	cmp	r3, r0
 800e0ba:	b570      	push	{r4, r5, r6, lr}
 800e0bc:	4604      	mov	r4, r0
 800e0be:	d04b      	beq.n	800e158 <_reclaim_reent+0xa4>
 800e0c0:	69c3      	ldr	r3, [r0, #28]
 800e0c2:	b143      	cbz	r3, 800e0d6 <_reclaim_reent+0x22>
 800e0c4:	68db      	ldr	r3, [r3, #12]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d144      	bne.n	800e154 <_reclaim_reent+0xa0>
 800e0ca:	69e3      	ldr	r3, [r4, #28]
 800e0cc:	6819      	ldr	r1, [r3, #0]
 800e0ce:	b111      	cbz	r1, 800e0d6 <_reclaim_reent+0x22>
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	f000 f8b5 	bl	800e240 <_free_r>
 800e0d6:	6961      	ldr	r1, [r4, #20]
 800e0d8:	b111      	cbz	r1, 800e0e0 <_reclaim_reent+0x2c>
 800e0da:	4620      	mov	r0, r4
 800e0dc:	f000 f8b0 	bl	800e240 <_free_r>
 800e0e0:	69e1      	ldr	r1, [r4, #28]
 800e0e2:	b111      	cbz	r1, 800e0ea <_reclaim_reent+0x36>
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	f000 f8ab 	bl	800e240 <_free_r>
 800e0ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e0ec:	b111      	cbz	r1, 800e0f4 <_reclaim_reent+0x40>
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	f000 f8a6 	bl	800e240 <_free_r>
 800e0f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0f6:	b111      	cbz	r1, 800e0fe <_reclaim_reent+0x4a>
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	f000 f8a1 	bl	800e240 <_free_r>
 800e0fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e100:	b111      	cbz	r1, 800e108 <_reclaim_reent+0x54>
 800e102:	4620      	mov	r0, r4
 800e104:	f000 f89c 	bl	800e240 <_free_r>
 800e108:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e10a:	b111      	cbz	r1, 800e112 <_reclaim_reent+0x5e>
 800e10c:	4620      	mov	r0, r4
 800e10e:	f000 f897 	bl	800e240 <_free_r>
 800e112:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e114:	b111      	cbz	r1, 800e11c <_reclaim_reent+0x68>
 800e116:	4620      	mov	r0, r4
 800e118:	f000 f892 	bl	800e240 <_free_r>
 800e11c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e11e:	b111      	cbz	r1, 800e126 <_reclaim_reent+0x72>
 800e120:	4620      	mov	r0, r4
 800e122:	f000 f88d 	bl	800e240 <_free_r>
 800e126:	6a23      	ldr	r3, [r4, #32]
 800e128:	b1b3      	cbz	r3, 800e158 <_reclaim_reent+0xa4>
 800e12a:	4620      	mov	r0, r4
 800e12c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e130:	4718      	bx	r3
 800e132:	5949      	ldr	r1, [r1, r5]
 800e134:	b941      	cbnz	r1, 800e148 <_reclaim_reent+0x94>
 800e136:	3504      	adds	r5, #4
 800e138:	69e3      	ldr	r3, [r4, #28]
 800e13a:	2d80      	cmp	r5, #128	; 0x80
 800e13c:	68d9      	ldr	r1, [r3, #12]
 800e13e:	d1f8      	bne.n	800e132 <_reclaim_reent+0x7e>
 800e140:	4620      	mov	r0, r4
 800e142:	f000 f87d 	bl	800e240 <_free_r>
 800e146:	e7c0      	b.n	800e0ca <_reclaim_reent+0x16>
 800e148:	680e      	ldr	r6, [r1, #0]
 800e14a:	4620      	mov	r0, r4
 800e14c:	f000 f878 	bl	800e240 <_free_r>
 800e150:	4631      	mov	r1, r6
 800e152:	e7ef      	b.n	800e134 <_reclaim_reent+0x80>
 800e154:	2500      	movs	r5, #0
 800e156:	e7ef      	b.n	800e138 <_reclaim_reent+0x84>
 800e158:	bd70      	pop	{r4, r5, r6, pc}
 800e15a:	bf00      	nop
 800e15c:	200000c0 	.word	0x200000c0

0800e160 <_lseek_r>:
 800e160:	b538      	push	{r3, r4, r5, lr}
 800e162:	4d07      	ldr	r5, [pc, #28]	; (800e180 <_lseek_r+0x20>)
 800e164:	4604      	mov	r4, r0
 800e166:	4608      	mov	r0, r1
 800e168:	4611      	mov	r1, r2
 800e16a:	2200      	movs	r2, #0
 800e16c:	602a      	str	r2, [r5, #0]
 800e16e:	461a      	mov	r2, r3
 800e170:	f7f4 fa52 	bl	8002618 <_lseek>
 800e174:	1c43      	adds	r3, r0, #1
 800e176:	d102      	bne.n	800e17e <_lseek_r+0x1e>
 800e178:	682b      	ldr	r3, [r5, #0]
 800e17a:	b103      	cbz	r3, 800e17e <_lseek_r+0x1e>
 800e17c:	6023      	str	r3, [r4, #0]
 800e17e:	bd38      	pop	{r3, r4, r5, pc}
 800e180:	20007b68 	.word	0x20007b68

0800e184 <_read_r>:
 800e184:	b538      	push	{r3, r4, r5, lr}
 800e186:	4d07      	ldr	r5, [pc, #28]	; (800e1a4 <_read_r+0x20>)
 800e188:	4604      	mov	r4, r0
 800e18a:	4608      	mov	r0, r1
 800e18c:	4611      	mov	r1, r2
 800e18e:	2200      	movs	r2, #0
 800e190:	602a      	str	r2, [r5, #0]
 800e192:	461a      	mov	r2, r3
 800e194:	f7f4 f9e0 	bl	8002558 <_read>
 800e198:	1c43      	adds	r3, r0, #1
 800e19a:	d102      	bne.n	800e1a2 <_read_r+0x1e>
 800e19c:	682b      	ldr	r3, [r5, #0]
 800e19e:	b103      	cbz	r3, 800e1a2 <_read_r+0x1e>
 800e1a0:	6023      	str	r3, [r4, #0]
 800e1a2:	bd38      	pop	{r3, r4, r5, pc}
 800e1a4:	20007b68 	.word	0x20007b68

0800e1a8 <_write_r>:
 800e1a8:	b538      	push	{r3, r4, r5, lr}
 800e1aa:	4d07      	ldr	r5, [pc, #28]	; (800e1c8 <_write_r+0x20>)
 800e1ac:	4604      	mov	r4, r0
 800e1ae:	4608      	mov	r0, r1
 800e1b0:	4611      	mov	r1, r2
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	602a      	str	r2, [r5, #0]
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	f7f4 f9eb 	bl	8002592 <_write>
 800e1bc:	1c43      	adds	r3, r0, #1
 800e1be:	d102      	bne.n	800e1c6 <_write_r+0x1e>
 800e1c0:	682b      	ldr	r3, [r5, #0]
 800e1c2:	b103      	cbz	r3, 800e1c6 <_write_r+0x1e>
 800e1c4:	6023      	str	r3, [r4, #0]
 800e1c6:	bd38      	pop	{r3, r4, r5, pc}
 800e1c8:	20007b68 	.word	0x20007b68

0800e1cc <__errno>:
 800e1cc:	4b01      	ldr	r3, [pc, #4]	; (800e1d4 <__errno+0x8>)
 800e1ce:	6818      	ldr	r0, [r3, #0]
 800e1d0:	4770      	bx	lr
 800e1d2:	bf00      	nop
 800e1d4:	200000c0 	.word	0x200000c0

0800e1d8 <__libc_init_array>:
 800e1d8:	b570      	push	{r4, r5, r6, lr}
 800e1da:	4d0d      	ldr	r5, [pc, #52]	; (800e210 <__libc_init_array+0x38>)
 800e1dc:	4c0d      	ldr	r4, [pc, #52]	; (800e214 <__libc_init_array+0x3c>)
 800e1de:	1b64      	subs	r4, r4, r5
 800e1e0:	10a4      	asrs	r4, r4, #2
 800e1e2:	2600      	movs	r6, #0
 800e1e4:	42a6      	cmp	r6, r4
 800e1e6:	d109      	bne.n	800e1fc <__libc_init_array+0x24>
 800e1e8:	4d0b      	ldr	r5, [pc, #44]	; (800e218 <__libc_init_array+0x40>)
 800e1ea:	4c0c      	ldr	r4, [pc, #48]	; (800e21c <__libc_init_array+0x44>)
 800e1ec:	f000 fdcc 	bl	800ed88 <_init>
 800e1f0:	1b64      	subs	r4, r4, r5
 800e1f2:	10a4      	asrs	r4, r4, #2
 800e1f4:	2600      	movs	r6, #0
 800e1f6:	42a6      	cmp	r6, r4
 800e1f8:	d105      	bne.n	800e206 <__libc_init_array+0x2e>
 800e1fa:	bd70      	pop	{r4, r5, r6, pc}
 800e1fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e200:	4798      	blx	r3
 800e202:	3601      	adds	r6, #1
 800e204:	e7ee      	b.n	800e1e4 <__libc_init_array+0xc>
 800e206:	f855 3b04 	ldr.w	r3, [r5], #4
 800e20a:	4798      	blx	r3
 800e20c:	3601      	adds	r6, #1
 800e20e:	e7f2      	b.n	800e1f6 <__libc_init_array+0x1e>
 800e210:	0801088c 	.word	0x0801088c
 800e214:	0801088c 	.word	0x0801088c
 800e218:	0801088c 	.word	0x0801088c
 800e21c:	08010890 	.word	0x08010890

0800e220 <__retarget_lock_acquire_recursive>:
 800e220:	4770      	bx	lr

0800e222 <__retarget_lock_release_recursive>:
 800e222:	4770      	bx	lr

0800e224 <memcpy>:
 800e224:	440a      	add	r2, r1
 800e226:	4291      	cmp	r1, r2
 800e228:	f100 33ff 	add.w	r3, r0, #4294967295
 800e22c:	d100      	bne.n	800e230 <memcpy+0xc>
 800e22e:	4770      	bx	lr
 800e230:	b510      	push	{r4, lr}
 800e232:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e23a:	4291      	cmp	r1, r2
 800e23c:	d1f9      	bne.n	800e232 <memcpy+0xe>
 800e23e:	bd10      	pop	{r4, pc}

0800e240 <_free_r>:
 800e240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e242:	2900      	cmp	r1, #0
 800e244:	d044      	beq.n	800e2d0 <_free_r+0x90>
 800e246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e24a:	9001      	str	r0, [sp, #4]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	f1a1 0404 	sub.w	r4, r1, #4
 800e252:	bfb8      	it	lt
 800e254:	18e4      	addlt	r4, r4, r3
 800e256:	f000 f8df 	bl	800e418 <__malloc_lock>
 800e25a:	4a1e      	ldr	r2, [pc, #120]	; (800e2d4 <_free_r+0x94>)
 800e25c:	9801      	ldr	r0, [sp, #4]
 800e25e:	6813      	ldr	r3, [r2, #0]
 800e260:	b933      	cbnz	r3, 800e270 <_free_r+0x30>
 800e262:	6063      	str	r3, [r4, #4]
 800e264:	6014      	str	r4, [r2, #0]
 800e266:	b003      	add	sp, #12
 800e268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e26c:	f000 b8da 	b.w	800e424 <__malloc_unlock>
 800e270:	42a3      	cmp	r3, r4
 800e272:	d908      	bls.n	800e286 <_free_r+0x46>
 800e274:	6825      	ldr	r5, [r4, #0]
 800e276:	1961      	adds	r1, r4, r5
 800e278:	428b      	cmp	r3, r1
 800e27a:	bf01      	itttt	eq
 800e27c:	6819      	ldreq	r1, [r3, #0]
 800e27e:	685b      	ldreq	r3, [r3, #4]
 800e280:	1949      	addeq	r1, r1, r5
 800e282:	6021      	streq	r1, [r4, #0]
 800e284:	e7ed      	b.n	800e262 <_free_r+0x22>
 800e286:	461a      	mov	r2, r3
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	b10b      	cbz	r3, 800e290 <_free_r+0x50>
 800e28c:	42a3      	cmp	r3, r4
 800e28e:	d9fa      	bls.n	800e286 <_free_r+0x46>
 800e290:	6811      	ldr	r1, [r2, #0]
 800e292:	1855      	adds	r5, r2, r1
 800e294:	42a5      	cmp	r5, r4
 800e296:	d10b      	bne.n	800e2b0 <_free_r+0x70>
 800e298:	6824      	ldr	r4, [r4, #0]
 800e29a:	4421      	add	r1, r4
 800e29c:	1854      	adds	r4, r2, r1
 800e29e:	42a3      	cmp	r3, r4
 800e2a0:	6011      	str	r1, [r2, #0]
 800e2a2:	d1e0      	bne.n	800e266 <_free_r+0x26>
 800e2a4:	681c      	ldr	r4, [r3, #0]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	6053      	str	r3, [r2, #4]
 800e2aa:	440c      	add	r4, r1
 800e2ac:	6014      	str	r4, [r2, #0]
 800e2ae:	e7da      	b.n	800e266 <_free_r+0x26>
 800e2b0:	d902      	bls.n	800e2b8 <_free_r+0x78>
 800e2b2:	230c      	movs	r3, #12
 800e2b4:	6003      	str	r3, [r0, #0]
 800e2b6:	e7d6      	b.n	800e266 <_free_r+0x26>
 800e2b8:	6825      	ldr	r5, [r4, #0]
 800e2ba:	1961      	adds	r1, r4, r5
 800e2bc:	428b      	cmp	r3, r1
 800e2be:	bf04      	itt	eq
 800e2c0:	6819      	ldreq	r1, [r3, #0]
 800e2c2:	685b      	ldreq	r3, [r3, #4]
 800e2c4:	6063      	str	r3, [r4, #4]
 800e2c6:	bf04      	itt	eq
 800e2c8:	1949      	addeq	r1, r1, r5
 800e2ca:	6021      	streq	r1, [r4, #0]
 800e2cc:	6054      	str	r4, [r2, #4]
 800e2ce:	e7ca      	b.n	800e266 <_free_r+0x26>
 800e2d0:	b003      	add	sp, #12
 800e2d2:	bd30      	pop	{r4, r5, pc}
 800e2d4:	20007b70 	.word	0x20007b70

0800e2d8 <sbrk_aligned>:
 800e2d8:	b570      	push	{r4, r5, r6, lr}
 800e2da:	4e0e      	ldr	r6, [pc, #56]	; (800e314 <sbrk_aligned+0x3c>)
 800e2dc:	460c      	mov	r4, r1
 800e2de:	6831      	ldr	r1, [r6, #0]
 800e2e0:	4605      	mov	r5, r0
 800e2e2:	b911      	cbnz	r1, 800e2ea <sbrk_aligned+0x12>
 800e2e4:	f000 fcbc 	bl	800ec60 <_sbrk_r>
 800e2e8:	6030      	str	r0, [r6, #0]
 800e2ea:	4621      	mov	r1, r4
 800e2ec:	4628      	mov	r0, r5
 800e2ee:	f000 fcb7 	bl	800ec60 <_sbrk_r>
 800e2f2:	1c43      	adds	r3, r0, #1
 800e2f4:	d00a      	beq.n	800e30c <sbrk_aligned+0x34>
 800e2f6:	1cc4      	adds	r4, r0, #3
 800e2f8:	f024 0403 	bic.w	r4, r4, #3
 800e2fc:	42a0      	cmp	r0, r4
 800e2fe:	d007      	beq.n	800e310 <sbrk_aligned+0x38>
 800e300:	1a21      	subs	r1, r4, r0
 800e302:	4628      	mov	r0, r5
 800e304:	f000 fcac 	bl	800ec60 <_sbrk_r>
 800e308:	3001      	adds	r0, #1
 800e30a:	d101      	bne.n	800e310 <sbrk_aligned+0x38>
 800e30c:	f04f 34ff 	mov.w	r4, #4294967295
 800e310:	4620      	mov	r0, r4
 800e312:	bd70      	pop	{r4, r5, r6, pc}
 800e314:	20007b74 	.word	0x20007b74

0800e318 <_malloc_r>:
 800e318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e31c:	1ccd      	adds	r5, r1, #3
 800e31e:	f025 0503 	bic.w	r5, r5, #3
 800e322:	3508      	adds	r5, #8
 800e324:	2d0c      	cmp	r5, #12
 800e326:	bf38      	it	cc
 800e328:	250c      	movcc	r5, #12
 800e32a:	2d00      	cmp	r5, #0
 800e32c:	4607      	mov	r7, r0
 800e32e:	db01      	blt.n	800e334 <_malloc_r+0x1c>
 800e330:	42a9      	cmp	r1, r5
 800e332:	d905      	bls.n	800e340 <_malloc_r+0x28>
 800e334:	230c      	movs	r3, #12
 800e336:	603b      	str	r3, [r7, #0]
 800e338:	2600      	movs	r6, #0
 800e33a:	4630      	mov	r0, r6
 800e33c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e340:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e414 <_malloc_r+0xfc>
 800e344:	f000 f868 	bl	800e418 <__malloc_lock>
 800e348:	f8d8 3000 	ldr.w	r3, [r8]
 800e34c:	461c      	mov	r4, r3
 800e34e:	bb5c      	cbnz	r4, 800e3a8 <_malloc_r+0x90>
 800e350:	4629      	mov	r1, r5
 800e352:	4638      	mov	r0, r7
 800e354:	f7ff ffc0 	bl	800e2d8 <sbrk_aligned>
 800e358:	1c43      	adds	r3, r0, #1
 800e35a:	4604      	mov	r4, r0
 800e35c:	d155      	bne.n	800e40a <_malloc_r+0xf2>
 800e35e:	f8d8 4000 	ldr.w	r4, [r8]
 800e362:	4626      	mov	r6, r4
 800e364:	2e00      	cmp	r6, #0
 800e366:	d145      	bne.n	800e3f4 <_malloc_r+0xdc>
 800e368:	2c00      	cmp	r4, #0
 800e36a:	d048      	beq.n	800e3fe <_malloc_r+0xe6>
 800e36c:	6823      	ldr	r3, [r4, #0]
 800e36e:	4631      	mov	r1, r6
 800e370:	4638      	mov	r0, r7
 800e372:	eb04 0903 	add.w	r9, r4, r3
 800e376:	f000 fc73 	bl	800ec60 <_sbrk_r>
 800e37a:	4581      	cmp	r9, r0
 800e37c:	d13f      	bne.n	800e3fe <_malloc_r+0xe6>
 800e37e:	6821      	ldr	r1, [r4, #0]
 800e380:	1a6d      	subs	r5, r5, r1
 800e382:	4629      	mov	r1, r5
 800e384:	4638      	mov	r0, r7
 800e386:	f7ff ffa7 	bl	800e2d8 <sbrk_aligned>
 800e38a:	3001      	adds	r0, #1
 800e38c:	d037      	beq.n	800e3fe <_malloc_r+0xe6>
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	442b      	add	r3, r5
 800e392:	6023      	str	r3, [r4, #0]
 800e394:	f8d8 3000 	ldr.w	r3, [r8]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d038      	beq.n	800e40e <_malloc_r+0xf6>
 800e39c:	685a      	ldr	r2, [r3, #4]
 800e39e:	42a2      	cmp	r2, r4
 800e3a0:	d12b      	bne.n	800e3fa <_malloc_r+0xe2>
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	605a      	str	r2, [r3, #4]
 800e3a6:	e00f      	b.n	800e3c8 <_malloc_r+0xb0>
 800e3a8:	6822      	ldr	r2, [r4, #0]
 800e3aa:	1b52      	subs	r2, r2, r5
 800e3ac:	d41f      	bmi.n	800e3ee <_malloc_r+0xd6>
 800e3ae:	2a0b      	cmp	r2, #11
 800e3b0:	d917      	bls.n	800e3e2 <_malloc_r+0xca>
 800e3b2:	1961      	adds	r1, r4, r5
 800e3b4:	42a3      	cmp	r3, r4
 800e3b6:	6025      	str	r5, [r4, #0]
 800e3b8:	bf18      	it	ne
 800e3ba:	6059      	strne	r1, [r3, #4]
 800e3bc:	6863      	ldr	r3, [r4, #4]
 800e3be:	bf08      	it	eq
 800e3c0:	f8c8 1000 	streq.w	r1, [r8]
 800e3c4:	5162      	str	r2, [r4, r5]
 800e3c6:	604b      	str	r3, [r1, #4]
 800e3c8:	4638      	mov	r0, r7
 800e3ca:	f104 060b 	add.w	r6, r4, #11
 800e3ce:	f000 f829 	bl	800e424 <__malloc_unlock>
 800e3d2:	f026 0607 	bic.w	r6, r6, #7
 800e3d6:	1d23      	adds	r3, r4, #4
 800e3d8:	1af2      	subs	r2, r6, r3
 800e3da:	d0ae      	beq.n	800e33a <_malloc_r+0x22>
 800e3dc:	1b9b      	subs	r3, r3, r6
 800e3de:	50a3      	str	r3, [r4, r2]
 800e3e0:	e7ab      	b.n	800e33a <_malloc_r+0x22>
 800e3e2:	42a3      	cmp	r3, r4
 800e3e4:	6862      	ldr	r2, [r4, #4]
 800e3e6:	d1dd      	bne.n	800e3a4 <_malloc_r+0x8c>
 800e3e8:	f8c8 2000 	str.w	r2, [r8]
 800e3ec:	e7ec      	b.n	800e3c8 <_malloc_r+0xb0>
 800e3ee:	4623      	mov	r3, r4
 800e3f0:	6864      	ldr	r4, [r4, #4]
 800e3f2:	e7ac      	b.n	800e34e <_malloc_r+0x36>
 800e3f4:	4634      	mov	r4, r6
 800e3f6:	6876      	ldr	r6, [r6, #4]
 800e3f8:	e7b4      	b.n	800e364 <_malloc_r+0x4c>
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	e7cc      	b.n	800e398 <_malloc_r+0x80>
 800e3fe:	230c      	movs	r3, #12
 800e400:	603b      	str	r3, [r7, #0]
 800e402:	4638      	mov	r0, r7
 800e404:	f000 f80e 	bl	800e424 <__malloc_unlock>
 800e408:	e797      	b.n	800e33a <_malloc_r+0x22>
 800e40a:	6025      	str	r5, [r4, #0]
 800e40c:	e7dc      	b.n	800e3c8 <_malloc_r+0xb0>
 800e40e:	605b      	str	r3, [r3, #4]
 800e410:	deff      	udf	#255	; 0xff
 800e412:	bf00      	nop
 800e414:	20007b70 	.word	0x20007b70

0800e418 <__malloc_lock>:
 800e418:	4801      	ldr	r0, [pc, #4]	; (800e420 <__malloc_lock+0x8>)
 800e41a:	f7ff bf01 	b.w	800e220 <__retarget_lock_acquire_recursive>
 800e41e:	bf00      	nop
 800e420:	20007b6c 	.word	0x20007b6c

0800e424 <__malloc_unlock>:
 800e424:	4801      	ldr	r0, [pc, #4]	; (800e42c <__malloc_unlock+0x8>)
 800e426:	f7ff befc 	b.w	800e222 <__retarget_lock_release_recursive>
 800e42a:	bf00      	nop
 800e42c:	20007b6c 	.word	0x20007b6c

0800e430 <__sfputc_r>:
 800e430:	6893      	ldr	r3, [r2, #8]
 800e432:	3b01      	subs	r3, #1
 800e434:	2b00      	cmp	r3, #0
 800e436:	b410      	push	{r4}
 800e438:	6093      	str	r3, [r2, #8]
 800e43a:	da08      	bge.n	800e44e <__sfputc_r+0x1e>
 800e43c:	6994      	ldr	r4, [r2, #24]
 800e43e:	42a3      	cmp	r3, r4
 800e440:	db01      	blt.n	800e446 <__sfputc_r+0x16>
 800e442:	290a      	cmp	r1, #10
 800e444:	d103      	bne.n	800e44e <__sfputc_r+0x1e>
 800e446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e44a:	f000 bb73 	b.w	800eb34 <__swbuf_r>
 800e44e:	6813      	ldr	r3, [r2, #0]
 800e450:	1c58      	adds	r0, r3, #1
 800e452:	6010      	str	r0, [r2, #0]
 800e454:	7019      	strb	r1, [r3, #0]
 800e456:	4608      	mov	r0, r1
 800e458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e45c:	4770      	bx	lr

0800e45e <__sfputs_r>:
 800e45e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e460:	4606      	mov	r6, r0
 800e462:	460f      	mov	r7, r1
 800e464:	4614      	mov	r4, r2
 800e466:	18d5      	adds	r5, r2, r3
 800e468:	42ac      	cmp	r4, r5
 800e46a:	d101      	bne.n	800e470 <__sfputs_r+0x12>
 800e46c:	2000      	movs	r0, #0
 800e46e:	e007      	b.n	800e480 <__sfputs_r+0x22>
 800e470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e474:	463a      	mov	r2, r7
 800e476:	4630      	mov	r0, r6
 800e478:	f7ff ffda 	bl	800e430 <__sfputc_r>
 800e47c:	1c43      	adds	r3, r0, #1
 800e47e:	d1f3      	bne.n	800e468 <__sfputs_r+0xa>
 800e480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e484 <_vfiprintf_r>:
 800e484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e488:	460d      	mov	r5, r1
 800e48a:	b09d      	sub	sp, #116	; 0x74
 800e48c:	4614      	mov	r4, r2
 800e48e:	4698      	mov	r8, r3
 800e490:	4606      	mov	r6, r0
 800e492:	b118      	cbz	r0, 800e49c <_vfiprintf_r+0x18>
 800e494:	6a03      	ldr	r3, [r0, #32]
 800e496:	b90b      	cbnz	r3, 800e49c <_vfiprintf_r+0x18>
 800e498:	f7ff fd58 	bl	800df4c <__sinit>
 800e49c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e49e:	07d9      	lsls	r1, r3, #31
 800e4a0:	d405      	bmi.n	800e4ae <_vfiprintf_r+0x2a>
 800e4a2:	89ab      	ldrh	r3, [r5, #12]
 800e4a4:	059a      	lsls	r2, r3, #22
 800e4a6:	d402      	bmi.n	800e4ae <_vfiprintf_r+0x2a>
 800e4a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4aa:	f7ff feb9 	bl	800e220 <__retarget_lock_acquire_recursive>
 800e4ae:	89ab      	ldrh	r3, [r5, #12]
 800e4b0:	071b      	lsls	r3, r3, #28
 800e4b2:	d501      	bpl.n	800e4b8 <_vfiprintf_r+0x34>
 800e4b4:	692b      	ldr	r3, [r5, #16]
 800e4b6:	b99b      	cbnz	r3, 800e4e0 <_vfiprintf_r+0x5c>
 800e4b8:	4629      	mov	r1, r5
 800e4ba:	4630      	mov	r0, r6
 800e4bc:	f000 fb78 	bl	800ebb0 <__swsetup_r>
 800e4c0:	b170      	cbz	r0, 800e4e0 <_vfiprintf_r+0x5c>
 800e4c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4c4:	07dc      	lsls	r4, r3, #31
 800e4c6:	d504      	bpl.n	800e4d2 <_vfiprintf_r+0x4e>
 800e4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4cc:	b01d      	add	sp, #116	; 0x74
 800e4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d2:	89ab      	ldrh	r3, [r5, #12]
 800e4d4:	0598      	lsls	r0, r3, #22
 800e4d6:	d4f7      	bmi.n	800e4c8 <_vfiprintf_r+0x44>
 800e4d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4da:	f7ff fea2 	bl	800e222 <__retarget_lock_release_recursive>
 800e4de:	e7f3      	b.n	800e4c8 <_vfiprintf_r+0x44>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	9309      	str	r3, [sp, #36]	; 0x24
 800e4e4:	2320      	movs	r3, #32
 800e4e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4ee:	2330      	movs	r3, #48	; 0x30
 800e4f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e6a4 <_vfiprintf_r+0x220>
 800e4f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4f8:	f04f 0901 	mov.w	r9, #1
 800e4fc:	4623      	mov	r3, r4
 800e4fe:	469a      	mov	sl, r3
 800e500:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e504:	b10a      	cbz	r2, 800e50a <_vfiprintf_r+0x86>
 800e506:	2a25      	cmp	r2, #37	; 0x25
 800e508:	d1f9      	bne.n	800e4fe <_vfiprintf_r+0x7a>
 800e50a:	ebba 0b04 	subs.w	fp, sl, r4
 800e50e:	d00b      	beq.n	800e528 <_vfiprintf_r+0xa4>
 800e510:	465b      	mov	r3, fp
 800e512:	4622      	mov	r2, r4
 800e514:	4629      	mov	r1, r5
 800e516:	4630      	mov	r0, r6
 800e518:	f7ff ffa1 	bl	800e45e <__sfputs_r>
 800e51c:	3001      	adds	r0, #1
 800e51e:	f000 80a9 	beq.w	800e674 <_vfiprintf_r+0x1f0>
 800e522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e524:	445a      	add	r2, fp
 800e526:	9209      	str	r2, [sp, #36]	; 0x24
 800e528:	f89a 3000 	ldrb.w	r3, [sl]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	f000 80a1 	beq.w	800e674 <_vfiprintf_r+0x1f0>
 800e532:	2300      	movs	r3, #0
 800e534:	f04f 32ff 	mov.w	r2, #4294967295
 800e538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e53c:	f10a 0a01 	add.w	sl, sl, #1
 800e540:	9304      	str	r3, [sp, #16]
 800e542:	9307      	str	r3, [sp, #28]
 800e544:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e548:	931a      	str	r3, [sp, #104]	; 0x68
 800e54a:	4654      	mov	r4, sl
 800e54c:	2205      	movs	r2, #5
 800e54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e552:	4854      	ldr	r0, [pc, #336]	; (800e6a4 <_vfiprintf_r+0x220>)
 800e554:	f7f1 fe74 	bl	8000240 <memchr>
 800e558:	9a04      	ldr	r2, [sp, #16]
 800e55a:	b9d8      	cbnz	r0, 800e594 <_vfiprintf_r+0x110>
 800e55c:	06d1      	lsls	r1, r2, #27
 800e55e:	bf44      	itt	mi
 800e560:	2320      	movmi	r3, #32
 800e562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e566:	0713      	lsls	r3, r2, #28
 800e568:	bf44      	itt	mi
 800e56a:	232b      	movmi	r3, #43	; 0x2b
 800e56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e570:	f89a 3000 	ldrb.w	r3, [sl]
 800e574:	2b2a      	cmp	r3, #42	; 0x2a
 800e576:	d015      	beq.n	800e5a4 <_vfiprintf_r+0x120>
 800e578:	9a07      	ldr	r2, [sp, #28]
 800e57a:	4654      	mov	r4, sl
 800e57c:	2000      	movs	r0, #0
 800e57e:	f04f 0c0a 	mov.w	ip, #10
 800e582:	4621      	mov	r1, r4
 800e584:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e588:	3b30      	subs	r3, #48	; 0x30
 800e58a:	2b09      	cmp	r3, #9
 800e58c:	d94d      	bls.n	800e62a <_vfiprintf_r+0x1a6>
 800e58e:	b1b0      	cbz	r0, 800e5be <_vfiprintf_r+0x13a>
 800e590:	9207      	str	r2, [sp, #28]
 800e592:	e014      	b.n	800e5be <_vfiprintf_r+0x13a>
 800e594:	eba0 0308 	sub.w	r3, r0, r8
 800e598:	fa09 f303 	lsl.w	r3, r9, r3
 800e59c:	4313      	orrs	r3, r2
 800e59e:	9304      	str	r3, [sp, #16]
 800e5a0:	46a2      	mov	sl, r4
 800e5a2:	e7d2      	b.n	800e54a <_vfiprintf_r+0xc6>
 800e5a4:	9b03      	ldr	r3, [sp, #12]
 800e5a6:	1d19      	adds	r1, r3, #4
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	9103      	str	r1, [sp, #12]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	bfbb      	ittet	lt
 800e5b0:	425b      	neglt	r3, r3
 800e5b2:	f042 0202 	orrlt.w	r2, r2, #2
 800e5b6:	9307      	strge	r3, [sp, #28]
 800e5b8:	9307      	strlt	r3, [sp, #28]
 800e5ba:	bfb8      	it	lt
 800e5bc:	9204      	strlt	r2, [sp, #16]
 800e5be:	7823      	ldrb	r3, [r4, #0]
 800e5c0:	2b2e      	cmp	r3, #46	; 0x2e
 800e5c2:	d10c      	bne.n	800e5de <_vfiprintf_r+0x15a>
 800e5c4:	7863      	ldrb	r3, [r4, #1]
 800e5c6:	2b2a      	cmp	r3, #42	; 0x2a
 800e5c8:	d134      	bne.n	800e634 <_vfiprintf_r+0x1b0>
 800e5ca:	9b03      	ldr	r3, [sp, #12]
 800e5cc:	1d1a      	adds	r2, r3, #4
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	9203      	str	r2, [sp, #12]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	bfb8      	it	lt
 800e5d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e5da:	3402      	adds	r4, #2
 800e5dc:	9305      	str	r3, [sp, #20]
 800e5de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e6b4 <_vfiprintf_r+0x230>
 800e5e2:	7821      	ldrb	r1, [r4, #0]
 800e5e4:	2203      	movs	r2, #3
 800e5e6:	4650      	mov	r0, sl
 800e5e8:	f7f1 fe2a 	bl	8000240 <memchr>
 800e5ec:	b138      	cbz	r0, 800e5fe <_vfiprintf_r+0x17a>
 800e5ee:	9b04      	ldr	r3, [sp, #16]
 800e5f0:	eba0 000a 	sub.w	r0, r0, sl
 800e5f4:	2240      	movs	r2, #64	; 0x40
 800e5f6:	4082      	lsls	r2, r0
 800e5f8:	4313      	orrs	r3, r2
 800e5fa:	3401      	adds	r4, #1
 800e5fc:	9304      	str	r3, [sp, #16]
 800e5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e602:	4829      	ldr	r0, [pc, #164]	; (800e6a8 <_vfiprintf_r+0x224>)
 800e604:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e608:	2206      	movs	r2, #6
 800e60a:	f7f1 fe19 	bl	8000240 <memchr>
 800e60e:	2800      	cmp	r0, #0
 800e610:	d03f      	beq.n	800e692 <_vfiprintf_r+0x20e>
 800e612:	4b26      	ldr	r3, [pc, #152]	; (800e6ac <_vfiprintf_r+0x228>)
 800e614:	bb1b      	cbnz	r3, 800e65e <_vfiprintf_r+0x1da>
 800e616:	9b03      	ldr	r3, [sp, #12]
 800e618:	3307      	adds	r3, #7
 800e61a:	f023 0307 	bic.w	r3, r3, #7
 800e61e:	3308      	adds	r3, #8
 800e620:	9303      	str	r3, [sp, #12]
 800e622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e624:	443b      	add	r3, r7
 800e626:	9309      	str	r3, [sp, #36]	; 0x24
 800e628:	e768      	b.n	800e4fc <_vfiprintf_r+0x78>
 800e62a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e62e:	460c      	mov	r4, r1
 800e630:	2001      	movs	r0, #1
 800e632:	e7a6      	b.n	800e582 <_vfiprintf_r+0xfe>
 800e634:	2300      	movs	r3, #0
 800e636:	3401      	adds	r4, #1
 800e638:	9305      	str	r3, [sp, #20]
 800e63a:	4619      	mov	r1, r3
 800e63c:	f04f 0c0a 	mov.w	ip, #10
 800e640:	4620      	mov	r0, r4
 800e642:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e646:	3a30      	subs	r2, #48	; 0x30
 800e648:	2a09      	cmp	r2, #9
 800e64a:	d903      	bls.n	800e654 <_vfiprintf_r+0x1d0>
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d0c6      	beq.n	800e5de <_vfiprintf_r+0x15a>
 800e650:	9105      	str	r1, [sp, #20]
 800e652:	e7c4      	b.n	800e5de <_vfiprintf_r+0x15a>
 800e654:	fb0c 2101 	mla	r1, ip, r1, r2
 800e658:	4604      	mov	r4, r0
 800e65a:	2301      	movs	r3, #1
 800e65c:	e7f0      	b.n	800e640 <_vfiprintf_r+0x1bc>
 800e65e:	ab03      	add	r3, sp, #12
 800e660:	9300      	str	r3, [sp, #0]
 800e662:	462a      	mov	r2, r5
 800e664:	4b12      	ldr	r3, [pc, #72]	; (800e6b0 <_vfiprintf_r+0x22c>)
 800e666:	a904      	add	r1, sp, #16
 800e668:	4630      	mov	r0, r6
 800e66a:	f3af 8000 	nop.w
 800e66e:	4607      	mov	r7, r0
 800e670:	1c78      	adds	r0, r7, #1
 800e672:	d1d6      	bne.n	800e622 <_vfiprintf_r+0x19e>
 800e674:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e676:	07d9      	lsls	r1, r3, #31
 800e678:	d405      	bmi.n	800e686 <_vfiprintf_r+0x202>
 800e67a:	89ab      	ldrh	r3, [r5, #12]
 800e67c:	059a      	lsls	r2, r3, #22
 800e67e:	d402      	bmi.n	800e686 <_vfiprintf_r+0x202>
 800e680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e682:	f7ff fdce 	bl	800e222 <__retarget_lock_release_recursive>
 800e686:	89ab      	ldrh	r3, [r5, #12]
 800e688:	065b      	lsls	r3, r3, #25
 800e68a:	f53f af1d 	bmi.w	800e4c8 <_vfiprintf_r+0x44>
 800e68e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e690:	e71c      	b.n	800e4cc <_vfiprintf_r+0x48>
 800e692:	ab03      	add	r3, sp, #12
 800e694:	9300      	str	r3, [sp, #0]
 800e696:	462a      	mov	r2, r5
 800e698:	4b05      	ldr	r3, [pc, #20]	; (800e6b0 <_vfiprintf_r+0x22c>)
 800e69a:	a904      	add	r1, sp, #16
 800e69c:	4630      	mov	r0, r6
 800e69e:	f000 f879 	bl	800e794 <_printf_i>
 800e6a2:	e7e4      	b.n	800e66e <_vfiprintf_r+0x1ea>
 800e6a4:	0801084e 	.word	0x0801084e
 800e6a8:	08010858 	.word	0x08010858
 800e6ac:	00000000 	.word	0x00000000
 800e6b0:	0800e45f 	.word	0x0800e45f
 800e6b4:	08010854 	.word	0x08010854

0800e6b8 <_printf_common>:
 800e6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6bc:	4616      	mov	r6, r2
 800e6be:	4699      	mov	r9, r3
 800e6c0:	688a      	ldr	r2, [r1, #8]
 800e6c2:	690b      	ldr	r3, [r1, #16]
 800e6c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	bfb8      	it	lt
 800e6cc:	4613      	movlt	r3, r2
 800e6ce:	6033      	str	r3, [r6, #0]
 800e6d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e6d4:	4607      	mov	r7, r0
 800e6d6:	460c      	mov	r4, r1
 800e6d8:	b10a      	cbz	r2, 800e6de <_printf_common+0x26>
 800e6da:	3301      	adds	r3, #1
 800e6dc:	6033      	str	r3, [r6, #0]
 800e6de:	6823      	ldr	r3, [r4, #0]
 800e6e0:	0699      	lsls	r1, r3, #26
 800e6e2:	bf42      	ittt	mi
 800e6e4:	6833      	ldrmi	r3, [r6, #0]
 800e6e6:	3302      	addmi	r3, #2
 800e6e8:	6033      	strmi	r3, [r6, #0]
 800e6ea:	6825      	ldr	r5, [r4, #0]
 800e6ec:	f015 0506 	ands.w	r5, r5, #6
 800e6f0:	d106      	bne.n	800e700 <_printf_common+0x48>
 800e6f2:	f104 0a19 	add.w	sl, r4, #25
 800e6f6:	68e3      	ldr	r3, [r4, #12]
 800e6f8:	6832      	ldr	r2, [r6, #0]
 800e6fa:	1a9b      	subs	r3, r3, r2
 800e6fc:	42ab      	cmp	r3, r5
 800e6fe:	dc26      	bgt.n	800e74e <_printf_common+0x96>
 800e700:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e704:	1e13      	subs	r3, r2, #0
 800e706:	6822      	ldr	r2, [r4, #0]
 800e708:	bf18      	it	ne
 800e70a:	2301      	movne	r3, #1
 800e70c:	0692      	lsls	r2, r2, #26
 800e70e:	d42b      	bmi.n	800e768 <_printf_common+0xb0>
 800e710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e714:	4649      	mov	r1, r9
 800e716:	4638      	mov	r0, r7
 800e718:	47c0      	blx	r8
 800e71a:	3001      	adds	r0, #1
 800e71c:	d01e      	beq.n	800e75c <_printf_common+0xa4>
 800e71e:	6823      	ldr	r3, [r4, #0]
 800e720:	6922      	ldr	r2, [r4, #16]
 800e722:	f003 0306 	and.w	r3, r3, #6
 800e726:	2b04      	cmp	r3, #4
 800e728:	bf02      	ittt	eq
 800e72a:	68e5      	ldreq	r5, [r4, #12]
 800e72c:	6833      	ldreq	r3, [r6, #0]
 800e72e:	1aed      	subeq	r5, r5, r3
 800e730:	68a3      	ldr	r3, [r4, #8]
 800e732:	bf0c      	ite	eq
 800e734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e738:	2500      	movne	r5, #0
 800e73a:	4293      	cmp	r3, r2
 800e73c:	bfc4      	itt	gt
 800e73e:	1a9b      	subgt	r3, r3, r2
 800e740:	18ed      	addgt	r5, r5, r3
 800e742:	2600      	movs	r6, #0
 800e744:	341a      	adds	r4, #26
 800e746:	42b5      	cmp	r5, r6
 800e748:	d11a      	bne.n	800e780 <_printf_common+0xc8>
 800e74a:	2000      	movs	r0, #0
 800e74c:	e008      	b.n	800e760 <_printf_common+0xa8>
 800e74e:	2301      	movs	r3, #1
 800e750:	4652      	mov	r2, sl
 800e752:	4649      	mov	r1, r9
 800e754:	4638      	mov	r0, r7
 800e756:	47c0      	blx	r8
 800e758:	3001      	adds	r0, #1
 800e75a:	d103      	bne.n	800e764 <_printf_common+0xac>
 800e75c:	f04f 30ff 	mov.w	r0, #4294967295
 800e760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e764:	3501      	adds	r5, #1
 800e766:	e7c6      	b.n	800e6f6 <_printf_common+0x3e>
 800e768:	18e1      	adds	r1, r4, r3
 800e76a:	1c5a      	adds	r2, r3, #1
 800e76c:	2030      	movs	r0, #48	; 0x30
 800e76e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e772:	4422      	add	r2, r4
 800e774:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e778:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e77c:	3302      	adds	r3, #2
 800e77e:	e7c7      	b.n	800e710 <_printf_common+0x58>
 800e780:	2301      	movs	r3, #1
 800e782:	4622      	mov	r2, r4
 800e784:	4649      	mov	r1, r9
 800e786:	4638      	mov	r0, r7
 800e788:	47c0      	blx	r8
 800e78a:	3001      	adds	r0, #1
 800e78c:	d0e6      	beq.n	800e75c <_printf_common+0xa4>
 800e78e:	3601      	adds	r6, #1
 800e790:	e7d9      	b.n	800e746 <_printf_common+0x8e>
	...

0800e794 <_printf_i>:
 800e794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e798:	7e0f      	ldrb	r7, [r1, #24]
 800e79a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e79c:	2f78      	cmp	r7, #120	; 0x78
 800e79e:	4691      	mov	r9, r2
 800e7a0:	4680      	mov	r8, r0
 800e7a2:	460c      	mov	r4, r1
 800e7a4:	469a      	mov	sl, r3
 800e7a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e7aa:	d807      	bhi.n	800e7bc <_printf_i+0x28>
 800e7ac:	2f62      	cmp	r7, #98	; 0x62
 800e7ae:	d80a      	bhi.n	800e7c6 <_printf_i+0x32>
 800e7b0:	2f00      	cmp	r7, #0
 800e7b2:	f000 80d4 	beq.w	800e95e <_printf_i+0x1ca>
 800e7b6:	2f58      	cmp	r7, #88	; 0x58
 800e7b8:	f000 80c0 	beq.w	800e93c <_printf_i+0x1a8>
 800e7bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e7c4:	e03a      	b.n	800e83c <_printf_i+0xa8>
 800e7c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e7ca:	2b15      	cmp	r3, #21
 800e7cc:	d8f6      	bhi.n	800e7bc <_printf_i+0x28>
 800e7ce:	a101      	add	r1, pc, #4	; (adr r1, 800e7d4 <_printf_i+0x40>)
 800e7d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e7d4:	0800e82d 	.word	0x0800e82d
 800e7d8:	0800e841 	.word	0x0800e841
 800e7dc:	0800e7bd 	.word	0x0800e7bd
 800e7e0:	0800e7bd 	.word	0x0800e7bd
 800e7e4:	0800e7bd 	.word	0x0800e7bd
 800e7e8:	0800e7bd 	.word	0x0800e7bd
 800e7ec:	0800e841 	.word	0x0800e841
 800e7f0:	0800e7bd 	.word	0x0800e7bd
 800e7f4:	0800e7bd 	.word	0x0800e7bd
 800e7f8:	0800e7bd 	.word	0x0800e7bd
 800e7fc:	0800e7bd 	.word	0x0800e7bd
 800e800:	0800e945 	.word	0x0800e945
 800e804:	0800e86d 	.word	0x0800e86d
 800e808:	0800e8ff 	.word	0x0800e8ff
 800e80c:	0800e7bd 	.word	0x0800e7bd
 800e810:	0800e7bd 	.word	0x0800e7bd
 800e814:	0800e967 	.word	0x0800e967
 800e818:	0800e7bd 	.word	0x0800e7bd
 800e81c:	0800e86d 	.word	0x0800e86d
 800e820:	0800e7bd 	.word	0x0800e7bd
 800e824:	0800e7bd 	.word	0x0800e7bd
 800e828:	0800e907 	.word	0x0800e907
 800e82c:	682b      	ldr	r3, [r5, #0]
 800e82e:	1d1a      	adds	r2, r3, #4
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	602a      	str	r2, [r5, #0]
 800e834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e83c:	2301      	movs	r3, #1
 800e83e:	e09f      	b.n	800e980 <_printf_i+0x1ec>
 800e840:	6820      	ldr	r0, [r4, #0]
 800e842:	682b      	ldr	r3, [r5, #0]
 800e844:	0607      	lsls	r7, r0, #24
 800e846:	f103 0104 	add.w	r1, r3, #4
 800e84a:	6029      	str	r1, [r5, #0]
 800e84c:	d501      	bpl.n	800e852 <_printf_i+0xbe>
 800e84e:	681e      	ldr	r6, [r3, #0]
 800e850:	e003      	b.n	800e85a <_printf_i+0xc6>
 800e852:	0646      	lsls	r6, r0, #25
 800e854:	d5fb      	bpl.n	800e84e <_printf_i+0xba>
 800e856:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e85a:	2e00      	cmp	r6, #0
 800e85c:	da03      	bge.n	800e866 <_printf_i+0xd2>
 800e85e:	232d      	movs	r3, #45	; 0x2d
 800e860:	4276      	negs	r6, r6
 800e862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e866:	485a      	ldr	r0, [pc, #360]	; (800e9d0 <_printf_i+0x23c>)
 800e868:	230a      	movs	r3, #10
 800e86a:	e012      	b.n	800e892 <_printf_i+0xfe>
 800e86c:	682b      	ldr	r3, [r5, #0]
 800e86e:	6820      	ldr	r0, [r4, #0]
 800e870:	1d19      	adds	r1, r3, #4
 800e872:	6029      	str	r1, [r5, #0]
 800e874:	0605      	lsls	r5, r0, #24
 800e876:	d501      	bpl.n	800e87c <_printf_i+0xe8>
 800e878:	681e      	ldr	r6, [r3, #0]
 800e87a:	e002      	b.n	800e882 <_printf_i+0xee>
 800e87c:	0641      	lsls	r1, r0, #25
 800e87e:	d5fb      	bpl.n	800e878 <_printf_i+0xe4>
 800e880:	881e      	ldrh	r6, [r3, #0]
 800e882:	4853      	ldr	r0, [pc, #332]	; (800e9d0 <_printf_i+0x23c>)
 800e884:	2f6f      	cmp	r7, #111	; 0x6f
 800e886:	bf0c      	ite	eq
 800e888:	2308      	moveq	r3, #8
 800e88a:	230a      	movne	r3, #10
 800e88c:	2100      	movs	r1, #0
 800e88e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e892:	6865      	ldr	r5, [r4, #4]
 800e894:	60a5      	str	r5, [r4, #8]
 800e896:	2d00      	cmp	r5, #0
 800e898:	bfa2      	ittt	ge
 800e89a:	6821      	ldrge	r1, [r4, #0]
 800e89c:	f021 0104 	bicge.w	r1, r1, #4
 800e8a0:	6021      	strge	r1, [r4, #0]
 800e8a2:	b90e      	cbnz	r6, 800e8a8 <_printf_i+0x114>
 800e8a4:	2d00      	cmp	r5, #0
 800e8a6:	d04b      	beq.n	800e940 <_printf_i+0x1ac>
 800e8a8:	4615      	mov	r5, r2
 800e8aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800e8ae:	fb03 6711 	mls	r7, r3, r1, r6
 800e8b2:	5dc7      	ldrb	r7, [r0, r7]
 800e8b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e8b8:	4637      	mov	r7, r6
 800e8ba:	42bb      	cmp	r3, r7
 800e8bc:	460e      	mov	r6, r1
 800e8be:	d9f4      	bls.n	800e8aa <_printf_i+0x116>
 800e8c0:	2b08      	cmp	r3, #8
 800e8c2:	d10b      	bne.n	800e8dc <_printf_i+0x148>
 800e8c4:	6823      	ldr	r3, [r4, #0]
 800e8c6:	07de      	lsls	r6, r3, #31
 800e8c8:	d508      	bpl.n	800e8dc <_printf_i+0x148>
 800e8ca:	6923      	ldr	r3, [r4, #16]
 800e8cc:	6861      	ldr	r1, [r4, #4]
 800e8ce:	4299      	cmp	r1, r3
 800e8d0:	bfde      	ittt	le
 800e8d2:	2330      	movle	r3, #48	; 0x30
 800e8d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e8d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e8dc:	1b52      	subs	r2, r2, r5
 800e8de:	6122      	str	r2, [r4, #16]
 800e8e0:	f8cd a000 	str.w	sl, [sp]
 800e8e4:	464b      	mov	r3, r9
 800e8e6:	aa03      	add	r2, sp, #12
 800e8e8:	4621      	mov	r1, r4
 800e8ea:	4640      	mov	r0, r8
 800e8ec:	f7ff fee4 	bl	800e6b8 <_printf_common>
 800e8f0:	3001      	adds	r0, #1
 800e8f2:	d14a      	bne.n	800e98a <_printf_i+0x1f6>
 800e8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8f8:	b004      	add	sp, #16
 800e8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8fe:	6823      	ldr	r3, [r4, #0]
 800e900:	f043 0320 	orr.w	r3, r3, #32
 800e904:	6023      	str	r3, [r4, #0]
 800e906:	4833      	ldr	r0, [pc, #204]	; (800e9d4 <_printf_i+0x240>)
 800e908:	2778      	movs	r7, #120	; 0x78
 800e90a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e90e:	6823      	ldr	r3, [r4, #0]
 800e910:	6829      	ldr	r1, [r5, #0]
 800e912:	061f      	lsls	r7, r3, #24
 800e914:	f851 6b04 	ldr.w	r6, [r1], #4
 800e918:	d402      	bmi.n	800e920 <_printf_i+0x18c>
 800e91a:	065f      	lsls	r7, r3, #25
 800e91c:	bf48      	it	mi
 800e91e:	b2b6      	uxthmi	r6, r6
 800e920:	07df      	lsls	r7, r3, #31
 800e922:	bf48      	it	mi
 800e924:	f043 0320 	orrmi.w	r3, r3, #32
 800e928:	6029      	str	r1, [r5, #0]
 800e92a:	bf48      	it	mi
 800e92c:	6023      	strmi	r3, [r4, #0]
 800e92e:	b91e      	cbnz	r6, 800e938 <_printf_i+0x1a4>
 800e930:	6823      	ldr	r3, [r4, #0]
 800e932:	f023 0320 	bic.w	r3, r3, #32
 800e936:	6023      	str	r3, [r4, #0]
 800e938:	2310      	movs	r3, #16
 800e93a:	e7a7      	b.n	800e88c <_printf_i+0xf8>
 800e93c:	4824      	ldr	r0, [pc, #144]	; (800e9d0 <_printf_i+0x23c>)
 800e93e:	e7e4      	b.n	800e90a <_printf_i+0x176>
 800e940:	4615      	mov	r5, r2
 800e942:	e7bd      	b.n	800e8c0 <_printf_i+0x12c>
 800e944:	682b      	ldr	r3, [r5, #0]
 800e946:	6826      	ldr	r6, [r4, #0]
 800e948:	6961      	ldr	r1, [r4, #20]
 800e94a:	1d18      	adds	r0, r3, #4
 800e94c:	6028      	str	r0, [r5, #0]
 800e94e:	0635      	lsls	r5, r6, #24
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	d501      	bpl.n	800e958 <_printf_i+0x1c4>
 800e954:	6019      	str	r1, [r3, #0]
 800e956:	e002      	b.n	800e95e <_printf_i+0x1ca>
 800e958:	0670      	lsls	r0, r6, #25
 800e95a:	d5fb      	bpl.n	800e954 <_printf_i+0x1c0>
 800e95c:	8019      	strh	r1, [r3, #0]
 800e95e:	2300      	movs	r3, #0
 800e960:	6123      	str	r3, [r4, #16]
 800e962:	4615      	mov	r5, r2
 800e964:	e7bc      	b.n	800e8e0 <_printf_i+0x14c>
 800e966:	682b      	ldr	r3, [r5, #0]
 800e968:	1d1a      	adds	r2, r3, #4
 800e96a:	602a      	str	r2, [r5, #0]
 800e96c:	681d      	ldr	r5, [r3, #0]
 800e96e:	6862      	ldr	r2, [r4, #4]
 800e970:	2100      	movs	r1, #0
 800e972:	4628      	mov	r0, r5
 800e974:	f7f1 fc64 	bl	8000240 <memchr>
 800e978:	b108      	cbz	r0, 800e97e <_printf_i+0x1ea>
 800e97a:	1b40      	subs	r0, r0, r5
 800e97c:	6060      	str	r0, [r4, #4]
 800e97e:	6863      	ldr	r3, [r4, #4]
 800e980:	6123      	str	r3, [r4, #16]
 800e982:	2300      	movs	r3, #0
 800e984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e988:	e7aa      	b.n	800e8e0 <_printf_i+0x14c>
 800e98a:	6923      	ldr	r3, [r4, #16]
 800e98c:	462a      	mov	r2, r5
 800e98e:	4649      	mov	r1, r9
 800e990:	4640      	mov	r0, r8
 800e992:	47d0      	blx	sl
 800e994:	3001      	adds	r0, #1
 800e996:	d0ad      	beq.n	800e8f4 <_printf_i+0x160>
 800e998:	6823      	ldr	r3, [r4, #0]
 800e99a:	079b      	lsls	r3, r3, #30
 800e99c:	d413      	bmi.n	800e9c6 <_printf_i+0x232>
 800e99e:	68e0      	ldr	r0, [r4, #12]
 800e9a0:	9b03      	ldr	r3, [sp, #12]
 800e9a2:	4298      	cmp	r0, r3
 800e9a4:	bfb8      	it	lt
 800e9a6:	4618      	movlt	r0, r3
 800e9a8:	e7a6      	b.n	800e8f8 <_printf_i+0x164>
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	4632      	mov	r2, r6
 800e9ae:	4649      	mov	r1, r9
 800e9b0:	4640      	mov	r0, r8
 800e9b2:	47d0      	blx	sl
 800e9b4:	3001      	adds	r0, #1
 800e9b6:	d09d      	beq.n	800e8f4 <_printf_i+0x160>
 800e9b8:	3501      	adds	r5, #1
 800e9ba:	68e3      	ldr	r3, [r4, #12]
 800e9bc:	9903      	ldr	r1, [sp, #12]
 800e9be:	1a5b      	subs	r3, r3, r1
 800e9c0:	42ab      	cmp	r3, r5
 800e9c2:	dcf2      	bgt.n	800e9aa <_printf_i+0x216>
 800e9c4:	e7eb      	b.n	800e99e <_printf_i+0x20a>
 800e9c6:	2500      	movs	r5, #0
 800e9c8:	f104 0619 	add.w	r6, r4, #25
 800e9cc:	e7f5      	b.n	800e9ba <_printf_i+0x226>
 800e9ce:	bf00      	nop
 800e9d0:	0801085f 	.word	0x0801085f
 800e9d4:	08010870 	.word	0x08010870

0800e9d8 <__sflush_r>:
 800e9d8:	898a      	ldrh	r2, [r1, #12]
 800e9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9de:	4605      	mov	r5, r0
 800e9e0:	0710      	lsls	r0, r2, #28
 800e9e2:	460c      	mov	r4, r1
 800e9e4:	d458      	bmi.n	800ea98 <__sflush_r+0xc0>
 800e9e6:	684b      	ldr	r3, [r1, #4]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	dc05      	bgt.n	800e9f8 <__sflush_r+0x20>
 800e9ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	dc02      	bgt.n	800e9f8 <__sflush_r+0x20>
 800e9f2:	2000      	movs	r0, #0
 800e9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9fa:	2e00      	cmp	r6, #0
 800e9fc:	d0f9      	beq.n	800e9f2 <__sflush_r+0x1a>
 800e9fe:	2300      	movs	r3, #0
 800ea00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ea04:	682f      	ldr	r7, [r5, #0]
 800ea06:	6a21      	ldr	r1, [r4, #32]
 800ea08:	602b      	str	r3, [r5, #0]
 800ea0a:	d032      	beq.n	800ea72 <__sflush_r+0x9a>
 800ea0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ea0e:	89a3      	ldrh	r3, [r4, #12]
 800ea10:	075a      	lsls	r2, r3, #29
 800ea12:	d505      	bpl.n	800ea20 <__sflush_r+0x48>
 800ea14:	6863      	ldr	r3, [r4, #4]
 800ea16:	1ac0      	subs	r0, r0, r3
 800ea18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea1a:	b10b      	cbz	r3, 800ea20 <__sflush_r+0x48>
 800ea1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea1e:	1ac0      	subs	r0, r0, r3
 800ea20:	2300      	movs	r3, #0
 800ea22:	4602      	mov	r2, r0
 800ea24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea26:	6a21      	ldr	r1, [r4, #32]
 800ea28:	4628      	mov	r0, r5
 800ea2a:	47b0      	blx	r6
 800ea2c:	1c43      	adds	r3, r0, #1
 800ea2e:	89a3      	ldrh	r3, [r4, #12]
 800ea30:	d106      	bne.n	800ea40 <__sflush_r+0x68>
 800ea32:	6829      	ldr	r1, [r5, #0]
 800ea34:	291d      	cmp	r1, #29
 800ea36:	d82b      	bhi.n	800ea90 <__sflush_r+0xb8>
 800ea38:	4a29      	ldr	r2, [pc, #164]	; (800eae0 <__sflush_r+0x108>)
 800ea3a:	410a      	asrs	r2, r1
 800ea3c:	07d6      	lsls	r6, r2, #31
 800ea3e:	d427      	bmi.n	800ea90 <__sflush_r+0xb8>
 800ea40:	2200      	movs	r2, #0
 800ea42:	6062      	str	r2, [r4, #4]
 800ea44:	04d9      	lsls	r1, r3, #19
 800ea46:	6922      	ldr	r2, [r4, #16]
 800ea48:	6022      	str	r2, [r4, #0]
 800ea4a:	d504      	bpl.n	800ea56 <__sflush_r+0x7e>
 800ea4c:	1c42      	adds	r2, r0, #1
 800ea4e:	d101      	bne.n	800ea54 <__sflush_r+0x7c>
 800ea50:	682b      	ldr	r3, [r5, #0]
 800ea52:	b903      	cbnz	r3, 800ea56 <__sflush_r+0x7e>
 800ea54:	6560      	str	r0, [r4, #84]	; 0x54
 800ea56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea58:	602f      	str	r7, [r5, #0]
 800ea5a:	2900      	cmp	r1, #0
 800ea5c:	d0c9      	beq.n	800e9f2 <__sflush_r+0x1a>
 800ea5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea62:	4299      	cmp	r1, r3
 800ea64:	d002      	beq.n	800ea6c <__sflush_r+0x94>
 800ea66:	4628      	mov	r0, r5
 800ea68:	f7ff fbea 	bl	800e240 <_free_r>
 800ea6c:	2000      	movs	r0, #0
 800ea6e:	6360      	str	r0, [r4, #52]	; 0x34
 800ea70:	e7c0      	b.n	800e9f4 <__sflush_r+0x1c>
 800ea72:	2301      	movs	r3, #1
 800ea74:	4628      	mov	r0, r5
 800ea76:	47b0      	blx	r6
 800ea78:	1c41      	adds	r1, r0, #1
 800ea7a:	d1c8      	bne.n	800ea0e <__sflush_r+0x36>
 800ea7c:	682b      	ldr	r3, [r5, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d0c5      	beq.n	800ea0e <__sflush_r+0x36>
 800ea82:	2b1d      	cmp	r3, #29
 800ea84:	d001      	beq.n	800ea8a <__sflush_r+0xb2>
 800ea86:	2b16      	cmp	r3, #22
 800ea88:	d101      	bne.n	800ea8e <__sflush_r+0xb6>
 800ea8a:	602f      	str	r7, [r5, #0]
 800ea8c:	e7b1      	b.n	800e9f2 <__sflush_r+0x1a>
 800ea8e:	89a3      	ldrh	r3, [r4, #12]
 800ea90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea94:	81a3      	strh	r3, [r4, #12]
 800ea96:	e7ad      	b.n	800e9f4 <__sflush_r+0x1c>
 800ea98:	690f      	ldr	r7, [r1, #16]
 800ea9a:	2f00      	cmp	r7, #0
 800ea9c:	d0a9      	beq.n	800e9f2 <__sflush_r+0x1a>
 800ea9e:	0793      	lsls	r3, r2, #30
 800eaa0:	680e      	ldr	r6, [r1, #0]
 800eaa2:	bf08      	it	eq
 800eaa4:	694b      	ldreq	r3, [r1, #20]
 800eaa6:	600f      	str	r7, [r1, #0]
 800eaa8:	bf18      	it	ne
 800eaaa:	2300      	movne	r3, #0
 800eaac:	eba6 0807 	sub.w	r8, r6, r7
 800eab0:	608b      	str	r3, [r1, #8]
 800eab2:	f1b8 0f00 	cmp.w	r8, #0
 800eab6:	dd9c      	ble.n	800e9f2 <__sflush_r+0x1a>
 800eab8:	6a21      	ldr	r1, [r4, #32]
 800eaba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eabc:	4643      	mov	r3, r8
 800eabe:	463a      	mov	r2, r7
 800eac0:	4628      	mov	r0, r5
 800eac2:	47b0      	blx	r6
 800eac4:	2800      	cmp	r0, #0
 800eac6:	dc06      	bgt.n	800ead6 <__sflush_r+0xfe>
 800eac8:	89a3      	ldrh	r3, [r4, #12]
 800eaca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eace:	81a3      	strh	r3, [r4, #12]
 800ead0:	f04f 30ff 	mov.w	r0, #4294967295
 800ead4:	e78e      	b.n	800e9f4 <__sflush_r+0x1c>
 800ead6:	4407      	add	r7, r0
 800ead8:	eba8 0800 	sub.w	r8, r8, r0
 800eadc:	e7e9      	b.n	800eab2 <__sflush_r+0xda>
 800eade:	bf00      	nop
 800eae0:	dfbffffe 	.word	0xdfbffffe

0800eae4 <_fflush_r>:
 800eae4:	b538      	push	{r3, r4, r5, lr}
 800eae6:	690b      	ldr	r3, [r1, #16]
 800eae8:	4605      	mov	r5, r0
 800eaea:	460c      	mov	r4, r1
 800eaec:	b913      	cbnz	r3, 800eaf4 <_fflush_r+0x10>
 800eaee:	2500      	movs	r5, #0
 800eaf0:	4628      	mov	r0, r5
 800eaf2:	bd38      	pop	{r3, r4, r5, pc}
 800eaf4:	b118      	cbz	r0, 800eafe <_fflush_r+0x1a>
 800eaf6:	6a03      	ldr	r3, [r0, #32]
 800eaf8:	b90b      	cbnz	r3, 800eafe <_fflush_r+0x1a>
 800eafa:	f7ff fa27 	bl	800df4c <__sinit>
 800eafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d0f3      	beq.n	800eaee <_fflush_r+0xa>
 800eb06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eb08:	07d0      	lsls	r0, r2, #31
 800eb0a:	d404      	bmi.n	800eb16 <_fflush_r+0x32>
 800eb0c:	0599      	lsls	r1, r3, #22
 800eb0e:	d402      	bmi.n	800eb16 <_fflush_r+0x32>
 800eb10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb12:	f7ff fb85 	bl	800e220 <__retarget_lock_acquire_recursive>
 800eb16:	4628      	mov	r0, r5
 800eb18:	4621      	mov	r1, r4
 800eb1a:	f7ff ff5d 	bl	800e9d8 <__sflush_r>
 800eb1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb20:	07da      	lsls	r2, r3, #31
 800eb22:	4605      	mov	r5, r0
 800eb24:	d4e4      	bmi.n	800eaf0 <_fflush_r+0xc>
 800eb26:	89a3      	ldrh	r3, [r4, #12]
 800eb28:	059b      	lsls	r3, r3, #22
 800eb2a:	d4e1      	bmi.n	800eaf0 <_fflush_r+0xc>
 800eb2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb2e:	f7ff fb78 	bl	800e222 <__retarget_lock_release_recursive>
 800eb32:	e7dd      	b.n	800eaf0 <_fflush_r+0xc>

0800eb34 <__swbuf_r>:
 800eb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb36:	460e      	mov	r6, r1
 800eb38:	4614      	mov	r4, r2
 800eb3a:	4605      	mov	r5, r0
 800eb3c:	b118      	cbz	r0, 800eb46 <__swbuf_r+0x12>
 800eb3e:	6a03      	ldr	r3, [r0, #32]
 800eb40:	b90b      	cbnz	r3, 800eb46 <__swbuf_r+0x12>
 800eb42:	f7ff fa03 	bl	800df4c <__sinit>
 800eb46:	69a3      	ldr	r3, [r4, #24]
 800eb48:	60a3      	str	r3, [r4, #8]
 800eb4a:	89a3      	ldrh	r3, [r4, #12]
 800eb4c:	071a      	lsls	r2, r3, #28
 800eb4e:	d525      	bpl.n	800eb9c <__swbuf_r+0x68>
 800eb50:	6923      	ldr	r3, [r4, #16]
 800eb52:	b31b      	cbz	r3, 800eb9c <__swbuf_r+0x68>
 800eb54:	6823      	ldr	r3, [r4, #0]
 800eb56:	6922      	ldr	r2, [r4, #16]
 800eb58:	1a98      	subs	r0, r3, r2
 800eb5a:	6963      	ldr	r3, [r4, #20]
 800eb5c:	b2f6      	uxtb	r6, r6
 800eb5e:	4283      	cmp	r3, r0
 800eb60:	4637      	mov	r7, r6
 800eb62:	dc04      	bgt.n	800eb6e <__swbuf_r+0x3a>
 800eb64:	4621      	mov	r1, r4
 800eb66:	4628      	mov	r0, r5
 800eb68:	f7ff ffbc 	bl	800eae4 <_fflush_r>
 800eb6c:	b9e0      	cbnz	r0, 800eba8 <__swbuf_r+0x74>
 800eb6e:	68a3      	ldr	r3, [r4, #8]
 800eb70:	3b01      	subs	r3, #1
 800eb72:	60a3      	str	r3, [r4, #8]
 800eb74:	6823      	ldr	r3, [r4, #0]
 800eb76:	1c5a      	adds	r2, r3, #1
 800eb78:	6022      	str	r2, [r4, #0]
 800eb7a:	701e      	strb	r6, [r3, #0]
 800eb7c:	6962      	ldr	r2, [r4, #20]
 800eb7e:	1c43      	adds	r3, r0, #1
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d004      	beq.n	800eb8e <__swbuf_r+0x5a>
 800eb84:	89a3      	ldrh	r3, [r4, #12]
 800eb86:	07db      	lsls	r3, r3, #31
 800eb88:	d506      	bpl.n	800eb98 <__swbuf_r+0x64>
 800eb8a:	2e0a      	cmp	r6, #10
 800eb8c:	d104      	bne.n	800eb98 <__swbuf_r+0x64>
 800eb8e:	4621      	mov	r1, r4
 800eb90:	4628      	mov	r0, r5
 800eb92:	f7ff ffa7 	bl	800eae4 <_fflush_r>
 800eb96:	b938      	cbnz	r0, 800eba8 <__swbuf_r+0x74>
 800eb98:	4638      	mov	r0, r7
 800eb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb9c:	4621      	mov	r1, r4
 800eb9e:	4628      	mov	r0, r5
 800eba0:	f000 f806 	bl	800ebb0 <__swsetup_r>
 800eba4:	2800      	cmp	r0, #0
 800eba6:	d0d5      	beq.n	800eb54 <__swbuf_r+0x20>
 800eba8:	f04f 37ff 	mov.w	r7, #4294967295
 800ebac:	e7f4      	b.n	800eb98 <__swbuf_r+0x64>
	...

0800ebb0 <__swsetup_r>:
 800ebb0:	b538      	push	{r3, r4, r5, lr}
 800ebb2:	4b2a      	ldr	r3, [pc, #168]	; (800ec5c <__swsetup_r+0xac>)
 800ebb4:	4605      	mov	r5, r0
 800ebb6:	6818      	ldr	r0, [r3, #0]
 800ebb8:	460c      	mov	r4, r1
 800ebba:	b118      	cbz	r0, 800ebc4 <__swsetup_r+0x14>
 800ebbc:	6a03      	ldr	r3, [r0, #32]
 800ebbe:	b90b      	cbnz	r3, 800ebc4 <__swsetup_r+0x14>
 800ebc0:	f7ff f9c4 	bl	800df4c <__sinit>
 800ebc4:	89a3      	ldrh	r3, [r4, #12]
 800ebc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ebca:	0718      	lsls	r0, r3, #28
 800ebcc:	d422      	bmi.n	800ec14 <__swsetup_r+0x64>
 800ebce:	06d9      	lsls	r1, r3, #27
 800ebd0:	d407      	bmi.n	800ebe2 <__swsetup_r+0x32>
 800ebd2:	2309      	movs	r3, #9
 800ebd4:	602b      	str	r3, [r5, #0]
 800ebd6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ebda:	81a3      	strh	r3, [r4, #12]
 800ebdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ebe0:	e034      	b.n	800ec4c <__swsetup_r+0x9c>
 800ebe2:	0758      	lsls	r0, r3, #29
 800ebe4:	d512      	bpl.n	800ec0c <__swsetup_r+0x5c>
 800ebe6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebe8:	b141      	cbz	r1, 800ebfc <__swsetup_r+0x4c>
 800ebea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebee:	4299      	cmp	r1, r3
 800ebf0:	d002      	beq.n	800ebf8 <__swsetup_r+0x48>
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	f7ff fb24 	bl	800e240 <_free_r>
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	6363      	str	r3, [r4, #52]	; 0x34
 800ebfc:	89a3      	ldrh	r3, [r4, #12]
 800ebfe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ec02:	81a3      	strh	r3, [r4, #12]
 800ec04:	2300      	movs	r3, #0
 800ec06:	6063      	str	r3, [r4, #4]
 800ec08:	6923      	ldr	r3, [r4, #16]
 800ec0a:	6023      	str	r3, [r4, #0]
 800ec0c:	89a3      	ldrh	r3, [r4, #12]
 800ec0e:	f043 0308 	orr.w	r3, r3, #8
 800ec12:	81a3      	strh	r3, [r4, #12]
 800ec14:	6923      	ldr	r3, [r4, #16]
 800ec16:	b94b      	cbnz	r3, 800ec2c <__swsetup_r+0x7c>
 800ec18:	89a3      	ldrh	r3, [r4, #12]
 800ec1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ec1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec22:	d003      	beq.n	800ec2c <__swsetup_r+0x7c>
 800ec24:	4621      	mov	r1, r4
 800ec26:	4628      	mov	r0, r5
 800ec28:	f000 f850 	bl	800eccc <__smakebuf_r>
 800ec2c:	89a0      	ldrh	r0, [r4, #12]
 800ec2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec32:	f010 0301 	ands.w	r3, r0, #1
 800ec36:	d00a      	beq.n	800ec4e <__swsetup_r+0x9e>
 800ec38:	2300      	movs	r3, #0
 800ec3a:	60a3      	str	r3, [r4, #8]
 800ec3c:	6963      	ldr	r3, [r4, #20]
 800ec3e:	425b      	negs	r3, r3
 800ec40:	61a3      	str	r3, [r4, #24]
 800ec42:	6923      	ldr	r3, [r4, #16]
 800ec44:	b943      	cbnz	r3, 800ec58 <__swsetup_r+0xa8>
 800ec46:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec4a:	d1c4      	bne.n	800ebd6 <__swsetup_r+0x26>
 800ec4c:	bd38      	pop	{r3, r4, r5, pc}
 800ec4e:	0781      	lsls	r1, r0, #30
 800ec50:	bf58      	it	pl
 800ec52:	6963      	ldrpl	r3, [r4, #20]
 800ec54:	60a3      	str	r3, [r4, #8]
 800ec56:	e7f4      	b.n	800ec42 <__swsetup_r+0x92>
 800ec58:	2000      	movs	r0, #0
 800ec5a:	e7f7      	b.n	800ec4c <__swsetup_r+0x9c>
 800ec5c:	200000c0 	.word	0x200000c0

0800ec60 <_sbrk_r>:
 800ec60:	b538      	push	{r3, r4, r5, lr}
 800ec62:	4d06      	ldr	r5, [pc, #24]	; (800ec7c <_sbrk_r+0x1c>)
 800ec64:	2300      	movs	r3, #0
 800ec66:	4604      	mov	r4, r0
 800ec68:	4608      	mov	r0, r1
 800ec6a:	602b      	str	r3, [r5, #0]
 800ec6c:	f7f3 fce2 	bl	8002634 <_sbrk>
 800ec70:	1c43      	adds	r3, r0, #1
 800ec72:	d102      	bne.n	800ec7a <_sbrk_r+0x1a>
 800ec74:	682b      	ldr	r3, [r5, #0]
 800ec76:	b103      	cbz	r3, 800ec7a <_sbrk_r+0x1a>
 800ec78:	6023      	str	r3, [r4, #0]
 800ec7a:	bd38      	pop	{r3, r4, r5, pc}
 800ec7c:	20007b68 	.word	0x20007b68

0800ec80 <__swhatbuf_r>:
 800ec80:	b570      	push	{r4, r5, r6, lr}
 800ec82:	460c      	mov	r4, r1
 800ec84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec88:	2900      	cmp	r1, #0
 800ec8a:	b096      	sub	sp, #88	; 0x58
 800ec8c:	4615      	mov	r5, r2
 800ec8e:	461e      	mov	r6, r3
 800ec90:	da0d      	bge.n	800ecae <__swhatbuf_r+0x2e>
 800ec92:	89a3      	ldrh	r3, [r4, #12]
 800ec94:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ec98:	f04f 0100 	mov.w	r1, #0
 800ec9c:	bf0c      	ite	eq
 800ec9e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800eca2:	2340      	movne	r3, #64	; 0x40
 800eca4:	2000      	movs	r0, #0
 800eca6:	6031      	str	r1, [r6, #0]
 800eca8:	602b      	str	r3, [r5, #0]
 800ecaa:	b016      	add	sp, #88	; 0x58
 800ecac:	bd70      	pop	{r4, r5, r6, pc}
 800ecae:	466a      	mov	r2, sp
 800ecb0:	f000 f848 	bl	800ed44 <_fstat_r>
 800ecb4:	2800      	cmp	r0, #0
 800ecb6:	dbec      	blt.n	800ec92 <__swhatbuf_r+0x12>
 800ecb8:	9901      	ldr	r1, [sp, #4]
 800ecba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ecbe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ecc2:	4259      	negs	r1, r3
 800ecc4:	4159      	adcs	r1, r3
 800ecc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecca:	e7eb      	b.n	800eca4 <__swhatbuf_r+0x24>

0800eccc <__smakebuf_r>:
 800eccc:	898b      	ldrh	r3, [r1, #12]
 800ecce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ecd0:	079d      	lsls	r5, r3, #30
 800ecd2:	4606      	mov	r6, r0
 800ecd4:	460c      	mov	r4, r1
 800ecd6:	d507      	bpl.n	800ece8 <__smakebuf_r+0x1c>
 800ecd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ecdc:	6023      	str	r3, [r4, #0]
 800ecde:	6123      	str	r3, [r4, #16]
 800ece0:	2301      	movs	r3, #1
 800ece2:	6163      	str	r3, [r4, #20]
 800ece4:	b002      	add	sp, #8
 800ece6:	bd70      	pop	{r4, r5, r6, pc}
 800ece8:	ab01      	add	r3, sp, #4
 800ecea:	466a      	mov	r2, sp
 800ecec:	f7ff ffc8 	bl	800ec80 <__swhatbuf_r>
 800ecf0:	9900      	ldr	r1, [sp, #0]
 800ecf2:	4605      	mov	r5, r0
 800ecf4:	4630      	mov	r0, r6
 800ecf6:	f7ff fb0f 	bl	800e318 <_malloc_r>
 800ecfa:	b948      	cbnz	r0, 800ed10 <__smakebuf_r+0x44>
 800ecfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed00:	059a      	lsls	r2, r3, #22
 800ed02:	d4ef      	bmi.n	800ece4 <__smakebuf_r+0x18>
 800ed04:	f023 0303 	bic.w	r3, r3, #3
 800ed08:	f043 0302 	orr.w	r3, r3, #2
 800ed0c:	81a3      	strh	r3, [r4, #12]
 800ed0e:	e7e3      	b.n	800ecd8 <__smakebuf_r+0xc>
 800ed10:	89a3      	ldrh	r3, [r4, #12]
 800ed12:	6020      	str	r0, [r4, #0]
 800ed14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed18:	81a3      	strh	r3, [r4, #12]
 800ed1a:	9b00      	ldr	r3, [sp, #0]
 800ed1c:	6163      	str	r3, [r4, #20]
 800ed1e:	9b01      	ldr	r3, [sp, #4]
 800ed20:	6120      	str	r0, [r4, #16]
 800ed22:	b15b      	cbz	r3, 800ed3c <__smakebuf_r+0x70>
 800ed24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed28:	4630      	mov	r0, r6
 800ed2a:	f000 f81d 	bl	800ed68 <_isatty_r>
 800ed2e:	b128      	cbz	r0, 800ed3c <__smakebuf_r+0x70>
 800ed30:	89a3      	ldrh	r3, [r4, #12]
 800ed32:	f023 0303 	bic.w	r3, r3, #3
 800ed36:	f043 0301 	orr.w	r3, r3, #1
 800ed3a:	81a3      	strh	r3, [r4, #12]
 800ed3c:	89a3      	ldrh	r3, [r4, #12]
 800ed3e:	431d      	orrs	r5, r3
 800ed40:	81a5      	strh	r5, [r4, #12]
 800ed42:	e7cf      	b.n	800ece4 <__smakebuf_r+0x18>

0800ed44 <_fstat_r>:
 800ed44:	b538      	push	{r3, r4, r5, lr}
 800ed46:	4d07      	ldr	r5, [pc, #28]	; (800ed64 <_fstat_r+0x20>)
 800ed48:	2300      	movs	r3, #0
 800ed4a:	4604      	mov	r4, r0
 800ed4c:	4608      	mov	r0, r1
 800ed4e:	4611      	mov	r1, r2
 800ed50:	602b      	str	r3, [r5, #0]
 800ed52:	f7f3 fc46 	bl	80025e2 <_fstat>
 800ed56:	1c43      	adds	r3, r0, #1
 800ed58:	d102      	bne.n	800ed60 <_fstat_r+0x1c>
 800ed5a:	682b      	ldr	r3, [r5, #0]
 800ed5c:	b103      	cbz	r3, 800ed60 <_fstat_r+0x1c>
 800ed5e:	6023      	str	r3, [r4, #0]
 800ed60:	bd38      	pop	{r3, r4, r5, pc}
 800ed62:	bf00      	nop
 800ed64:	20007b68 	.word	0x20007b68

0800ed68 <_isatty_r>:
 800ed68:	b538      	push	{r3, r4, r5, lr}
 800ed6a:	4d06      	ldr	r5, [pc, #24]	; (800ed84 <_isatty_r+0x1c>)
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	4604      	mov	r4, r0
 800ed70:	4608      	mov	r0, r1
 800ed72:	602b      	str	r3, [r5, #0]
 800ed74:	f7f3 fc45 	bl	8002602 <_isatty>
 800ed78:	1c43      	adds	r3, r0, #1
 800ed7a:	d102      	bne.n	800ed82 <_isatty_r+0x1a>
 800ed7c:	682b      	ldr	r3, [r5, #0]
 800ed7e:	b103      	cbz	r3, 800ed82 <_isatty_r+0x1a>
 800ed80:	6023      	str	r3, [r4, #0]
 800ed82:	bd38      	pop	{r3, r4, r5, pc}
 800ed84:	20007b68 	.word	0x20007b68

0800ed88 <_init>:
 800ed88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8a:	bf00      	nop
 800ed8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed8e:	bc08      	pop	{r3}
 800ed90:	469e      	mov	lr, r3
 800ed92:	4770      	bx	lr

0800ed94 <_fini>:
 800ed94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed96:	bf00      	nop
 800ed98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed9a:	bc08      	pop	{r3}
 800ed9c:	469e      	mov	lr, r3
 800ed9e:	4770      	bx	lr
